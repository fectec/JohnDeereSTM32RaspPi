
EngineAutomaticTransmissionController_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c854  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e10  0800c968  0800c968  0001c968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d778  0800d778  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800d778  0800d778  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d778  0800d778  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d778  0800d778  0001d778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d77c  0800d77c  0001d77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800d780  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000170c  20000208  0800d988  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001914  0800d988  00021914  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001685e  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f9b  00000000  00000000  00036ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0003aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa3  00000000  00000000  0003bef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c118  00000000  00000000  0003ce93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ce5  00000000  00000000  00058fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096aee  00000000  00000000  00072c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ac0  00000000  00000000  00109780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00110240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c94c 	.word	0x0800c94c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800c94c 	.word	0x0800c94c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4605      	mov	r5, r0
 8001074:	460c      	mov	r4, r1
 8001076:	2200      	movs	r2, #0
 8001078:	2300      	movs	r3, #0
 800107a:	4628      	mov	r0, r5
 800107c:	4621      	mov	r1, r4
 800107e:	f7ff fc9d 	bl	80009bc <__aeabi_dcmplt>
 8001082:	b928      	cbnz	r0, 8001090 <__aeabi_d2lz+0x20>
 8001084:	4628      	mov	r0, r5
 8001086:	4621      	mov	r1, r4
 8001088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800108c:	f000 b80a 	b.w	80010a4 <__aeabi_d2ulz>
 8001090:	4628      	mov	r0, r5
 8001092:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001096:	f000 f805 	bl	80010a4 <__aeabi_d2ulz>
 800109a:	4240      	negs	r0, r0
 800109c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop

080010a4 <__aeabi_d2ulz>:
 80010a4:	b5d0      	push	{r4, r6, r7, lr}
 80010a6:	2200      	movs	r2, #0
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <__aeabi_d2ulz+0x34>)
 80010aa:	4606      	mov	r6, r0
 80010ac:	460f      	mov	r7, r1
 80010ae:	f7ff fa13 	bl	80004d8 <__aeabi_dmul>
 80010b2:	f7ff fce9 	bl	8000a88 <__aeabi_d2uiz>
 80010b6:	4604      	mov	r4, r0
 80010b8:	f7ff f994 	bl	80003e4 <__aeabi_ui2d>
 80010bc:	2200      	movs	r2, #0
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <__aeabi_d2ulz+0x38>)
 80010c0:	f7ff fa0a 	bl	80004d8 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4630      	mov	r0, r6
 80010ca:	4639      	mov	r1, r7
 80010cc:	f7ff f84c 	bl	8000168 <__aeabi_dsub>
 80010d0:	f7ff fcda 	bl	8000a88 <__aeabi_d2uiz>
 80010d4:	4621      	mov	r1, r4
 80010d6:	bdd0      	pop	{r4, r6, r7, pc}
 80010d8:	3df00000 	.word	0x3df00000
 80010dc:	41f00000 	.word	0x41f00000

080010e0 <USER_ADC_Init>:
#include "GPIO.h"

// Initialize ADC

void USER_ADC_Init( uint8_t ADC )
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  RCC->CFGR	|=	RCC_CFGR_ADCPRE;       		// Adjust ADC input clock
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <USER_ADC_Init+0xb8>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4a2a      	ldr	r2, [pc, #168]	; (8001198 <USER_ADC_Init+0xb8>)
 80010f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010f4:	6053      	str	r3, [r2, #4]
  USER_GPIO_Define(PORTA, 0, INP, INP_AN);		// Pin PA0 as analog input
 80010f6:	2300      	movs	r3, #0
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 fff1 	bl	80020e4 <USER_GPIO_Define>

  if( ADC == 0 )
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d142      	bne.n	800118e <USER_ADC_Init+0xae>
  {
    RCC->APB2ENR	|=	RCC_APB2ENR_ADC1EN;	// ADC1 clock enable
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <USER_ADC_Init+0xb8>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a22      	ldr	r2, [pc, #136]	; (8001198 <USER_ADC_Init+0xb8>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001112:	6193      	str	r3, [r2, #24]

    ADC1->CR1		&=	~(ADC_CR1_DUALMOD);	// Step 1 - Select independent mode
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <USER_ADC_Init+0xbc>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a20      	ldr	r2, [pc, #128]	; (800119c <USER_ADC_Init+0xbc>)
 800111a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800111e:	6053      	str	r3, [r2, #4]
    ADC1->CR2		|=	ADC_CR2_CONT;		// Step 2 - Select conversion mode
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <USER_ADC_Init+0xbc>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <USER_ADC_Init+0xbc>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	6093      	str	r3, [r2, #8]
    ADC1->CR2		&= 	~(ADC_CR2_ALIGN);	//	and format for ADC result
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <USER_ADC_Init+0xbc>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a1a      	ldr	r2, [pc, #104]	; (800119c <USER_ADC_Init+0xbc>)
 8001132:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001136:	6093      	str	r3, [r2, #8]
    ADC1->SMPR2		&= 	~(ADC_SMPR2_SMP0);	// Step 3 - Select the sample time for the
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <USER_ADC_Init+0xbc>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <USER_ADC_Init+0xbc>)
 800113e:	f023 0307 	bic.w	r3, r3, #7
 8001142:	6113      	str	r3, [r2, #16]
							//	ADC channel
    ADC1->SQR1		&= 	~(ADC_SQR1_L);		// Step 4 - Select the sequence and number of
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <USER_ADC_Init+0xbc>)
 8001146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <USER_ADC_Init+0xbc>)
 800114a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800114e:	62d3      	str	r3, [r2, #44]	; 0x2c
							//	conversions for the ADC regular channels
    ADC1->SQR3		&= 	~(ADC_SQR3_SQ1);	// Step 5 - Select the channel for the first ADC
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <USER_ADC_Init+0xbc>)
 8001152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001154:	4a11      	ldr	r2, [pc, #68]	; (800119c <USER_ADC_Init+0xbc>)
 8001156:	f023 031f 	bic.w	r3, r3, #31
 800115a:	6353      	str	r3, [r2, #52]	; 0x34
							//	conversion
    ADC1->CR2		|=	ADC_CR2_ADON;		// Step 6 - Enable the ADC module
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <USER_ADC_Init+0xbc>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <USER_ADC_Init+0xbc>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6093      	str	r3, [r2, #8]
    ADC1->CR2		|=	ADC_CR2_CAL;		// Step 7 - Perform a calibration after
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <USER_ADC_Init+0xbc>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4a0b      	ldr	r2, [pc, #44]	; (800119c <USER_ADC_Init+0xbc>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6093      	str	r3, [r2, #8]
							// 	each power-up
    while ( ADC1->CR2 & ADC_CR2_CAL );			// Step 8 - Wait until the bit is reset by
 8001174:	bf00      	nop
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <USER_ADC_Init+0xbc>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f9      	bne.n	8001176 <USER_ADC_Init+0x96>
							//	hardware after calibration is complete
    ADC1->CR2		|=	ADC_CR2_ADON;		// Step 9 - Start conversion
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <USER_ADC_Init+0xbc>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <USER_ADC_Init+0xbc>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6093      	str	r3, [r2, #8]
  }
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	40012400 	.word	0x40012400

080011a0 <USER_ADC_Convert>:

// Convert Analog value to Digital using ADC

uint16_t USER_ADC_Convert( uint8_t ADC )
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if( ADC == 0 )
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10a      	bne.n	80011c6 <USER_ADC_Convert+0x26>
  {
    while( !( ADC1->SR & ADC_SR_EOC ) );		// Wait for end of conversion
 80011b0:	bf00      	nop
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <USER_ADC_Convert+0x34>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f9      	beq.n	80011b2 <USER_ADC_Convert+0x12>
    return ADC1->DR;
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <USER_ADC_Convert+0x34>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	e000      	b.n	80011c8 <USER_ADC_Convert+0x28>
  }

  return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40012400 	.word	0x40012400

080011d8 <scaleVoltageValue>:

// Scale ADC read voltage value to a range of 0 to 100

float scaleVoltageValue( float voltageValue, float min, float max )
{ 
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  float normalizedVoltageValue = (voltageValue - min) / (max - min) * 100;
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f7ff fcc2 	bl	8000b70 <__aeabi_fsub>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461c      	mov	r4, r3
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fcbc 	bl	8000b70 <__aeabi_fsub>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4619      	mov	r1, r3
 80011fc:	4620      	mov	r0, r4
 80011fe:	f7ff fe75 	bl	8000eec <__aeabi_fdiv>
 8001202:	4603      	mov	r3, r0
 8001204:	4905      	ldr	r1, [pc, #20]	; (800121c <scaleVoltageValue+0x44>)
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fdbc 	bl	8000d84 <__aeabi_fmul>
 800120c:	4603      	mov	r3, r0
 800120e:	617b      	str	r3, [r7, #20]
  return normalizedVoltageValue;
 8001210:	697b      	ldr	r3, [r7, #20]
}
 8001212:	4618      	mov	r0, r3
 8001214:	371c      	adds	r7, #28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}
 800121a:	bf00      	nop
 800121c:	42c80000 	.word	0x42c80000

08001220 <look2_binlxpw>:
/* Forward declaration for local functions */
static void EngTrModel_gear_state(const int32_T *sfEvent);
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b092      	sub	sp, #72	; 0x48
 8001224:	af00      	add	r7, sp, #0
 8001226:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800122a:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 800122e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001238:	f7ff fbca 	bl	80009d0 <__aeabi_dcmple>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d020      	beq.n	8001284 <look2_binlxpw+0x64>
    iLeft = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8001246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001250:	f7fe ff8a 	bl	8000168 <__aeabi_dsub>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4614      	mov	r4, r2
 800125a:	461d      	mov	r5, r3
 800125c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800125e:	3308      	adds	r3, #8
 8001260:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7fe ff7d 	bl	8000168 <__aeabi_dsub>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4620      	mov	r0, r4
 8001274:	4629      	mov	r1, r5
 8001276:	f7ff fa59 	bl	800072c <__aeabi_ddiv>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001282:	e08e      	b.n	80013a2 <look2_binlxpw+0x182>
  } else if (u0 < bp0[maxIndex[0U]]) {
 8001284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800128c:	4413      	add	r3, r2
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001296:	f7ff fb91 	bl	80009bc <__aeabi_dcmplt>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d04d      	beq.n	800133c <look2_binlxpw+0x11c>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 80012a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[0U];
 80012ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 80012b2:	e016      	b.n	80012e2 <look2_binlxpw+0xc2>
      if (u0 < bp0[bpIdx]) {
 80012b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012ba:	4413      	add	r3, r2
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012c4:	f7ff fb7a 	bl	80009bc <__aeabi_dcmplt>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <look2_binlxpw+0xb4>
        iRght = bpIdx;
 80012ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012d2:	e001      	b.n	80012d8 <look2_binlxpw+0xb8>
      } else {
        iLeft = bpIdx;
 80012d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80012d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012dc:	4413      	add	r3, r2
 80012de:	085b      	lsrs	r3, r3, #1
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 80012e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d8e3      	bhi.n	80012b4 <look2_binlxpw+0x94>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 80012ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012f2:	4413      	add	r3, r2
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012fc:	f7fe ff34 	bl	8000168 <__aeabi_dsub>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4614      	mov	r4, r2
 8001306:	461d      	mov	r5, r3
 8001308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130a:	3301      	adds	r3, #1
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001310:	4413      	add	r3, r2
 8001312:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800131c:	4413      	add	r3, r2
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7fe ff21 	bl	8000168 <__aeabi_dsub>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4620      	mov	r0, r4
 800132c:	4629      	mov	r1, r5
 800132e:	f7ff f9fd 	bl	800072c <__aeabi_ddiv>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800133a:	e032      	b.n	80013a2 <look2_binlxpw+0x182>
  } else {
    iLeft = maxIndex[0U] - 1U;
 800133c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3b01      	subs	r3, #1
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 8001344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800134c:	3b01      	subs	r3, #1
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001352:	4413      	add	r3, r2
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800135c:	f7fe ff04 	bl	8000168 <__aeabi_dsub>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4614      	mov	r4, r2
 8001366:	461d      	mov	r5, r3
 8001368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001370:	4413      	add	r3, r2
 8001372:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001376:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800137e:	3b01      	subs	r3, #1
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001384:	4413      	add	r3, r2
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7fe feed 	bl	8000168 <__aeabi_dsub>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4620      	mov	r0, r4
 8001394:	4629      	mov	r1, r5
 8001396:	f7ff f9c9 	bl	800072c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 80013a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 80013aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ac:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 80013ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013b8:	f7ff fb0a 	bl	80009d0 <__aeabi_dcmple>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d020      	beq.n	8001404 <look2_binlxpw+0x1e4>
    iLeft = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 80013c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013d0:	f7fe feca 	bl	8000168 <__aeabi_dsub>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4614      	mov	r4, r2
 80013da:	461d      	mov	r5, r3
 80013dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013de:	3308      	adds	r3, #8
 80013e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7fe febd 	bl	8000168 <__aeabi_dsub>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4620      	mov	r0, r4
 80013f4:	4629      	mov	r1, r5
 80013f6:	f7ff f999 	bl	800072c <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001402:	e095      	b.n	8001530 <look2_binlxpw+0x310>
  } else if (u1 < bp1[maxIndex[1U]]) {
 8001404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001406:	3304      	adds	r3, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800140e:	4413      	add	r3, r2
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001418:	f7ff fad0 	bl	80009bc <__aeabi_dcmplt>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d04f      	beq.n	80014c2 <look2_binlxpw+0x2a2>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 8001422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001424:	3304      	adds	r3, #4
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	085b      	lsrs	r3, r3, #1
 800142a:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[1U];
 8001430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001432:	3304      	adds	r3, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 8001438:	e016      	b.n	8001468 <look2_binlxpw+0x248>
      if (u1 < bp1[bpIdx]) {
 800143a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001440:	4413      	add	r3, r2
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800144a:	f7ff fab7 	bl	80009bc <__aeabi_dcmplt>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <look2_binlxpw+0x23a>
        iRght = bpIdx;
 8001454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001458:	e001      	b.n	800145e <look2_binlxpw+0x23e>
      } else {
        iLeft = bpIdx;
 800145a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 800145e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001462:	4413      	add	r3, r2
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 8001468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800146a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d8e3      	bhi.n	800143a <look2_binlxpw+0x21a>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 8001472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001478:	4413      	add	r3, r2
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001482:	f7fe fe71 	bl	8000168 <__aeabi_dsub>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4614      	mov	r4, r2
 800148c:	461d      	mov	r5, r3
 800148e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001490:	3301      	adds	r3, #1
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001496:	4413      	add	r3, r2
 8001498:	e9d3 0100 	ldrd	r0, r1, [r3]
 800149c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014a2:	4413      	add	r3, r2
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7fe fe5e 	bl	8000168 <__aeabi_dsub>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7ff f93a 	bl	800072c <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80014c0:	e036      	b.n	8001530 <look2_binlxpw+0x310>
  } else {
    iLeft = maxIndex[1U] - 1U;
 80014c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014c4:	3304      	adds	r3, #4
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 80014cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ce:	3304      	adds	r3, #4
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80014d6:	3b01      	subs	r3, #1
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014dc:	4413      	add	r3, r2
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014e6:	f7fe fe3f 	bl	8000168 <__aeabi_dsub>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4614      	mov	r4, r2
 80014f0:	461d      	mov	r5, r3
 80014f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014f4:	3304      	adds	r3, #4
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014fc:	4413      	add	r3, r2
 80014fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001504:	3304      	adds	r3, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800150c:	3b01      	subs	r3, #1
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001512:	4413      	add	r3, r2
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7fe fe26 	bl	8000168 <__aeabi_dsub>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4620      	mov	r0, r4
 8001522:	4629      	mov	r1, r5
 8001524:	f7ff f902 	bl	800072c <__aeabi_ddiv>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 8001530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001532:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001534:	fb03 f202 	mul.w	r2, r3, r2
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	4413      	add	r3, r2
 800153c:	63bb      	str	r3, [r7, #56]	; 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 800153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001540:	3301      	adds	r3, #1
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001546:	4413      	add	r3, r2
 8001548:	e9d3 0100 	ldrd	r0, r1, [r3]
 800154c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001552:	4413      	add	r3, r2
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7fe fe06 	bl	8000168 <__aeabi_dsub>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001568:	f7fe ffb6 	bl	80004d8 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800157a:	4413      	add	r3, r2
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7fe fdf4 	bl	800016c <__adddf3>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  bpIdx += stride;
 800158c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800158e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001590:	4413      	add	r3, r2
 8001592:	63bb      	str	r3, [r7, #56]	; 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 8001594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001596:	3301      	adds	r3, #1
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800159c:	4413      	add	r3, r2
 800159e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015a8:	4413      	add	r3, r2
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7fe fddb 	bl	8000168 <__aeabi_dsub>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015be:	f7fe ff8b 	bl	80004d8 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015d0:	4413      	add	r3, r2
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7fe fdc9 	bl	800016c <__adddf3>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015e6:	f7fe fdbf 	bl	8000168 <__aeabi_dsub>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
          yL_1d) * frac + yL_1d;
 80015f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015f6:	f7fe ff6f 	bl	80004d8 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001606:	f7fe fdb1 	bl	800016c <__adddf3>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
}
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	3748      	adds	r7, #72	; 0x48
 8001614:	46bd      	mov	sp, r7
 8001616:	bdb0      	pop	{r4, r5, r7, pc}

08001618 <look1_binlxpw>:

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001630:	f7ff f9ce 	bl	80009d0 <__aeabi_dcmple>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d020      	beq.n	800167c <look1_binlxpw+0x64>
    iLeft = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001648:	f7fe fd8e 	bl	8000168 <__aeabi_dsub>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4614      	mov	r4, r2
 8001652:	461d      	mov	r5, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3308      	adds	r3, #8
 8001658:	e9d3 0100 	ldrd	r0, r1, [r3]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7fe fd81 	bl	8000168 <__aeabi_dsub>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	f7ff f85d 	bl	800072c <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800167a:	e087      	b.n	800178c <look1_binlxpw+0x174>
  } else if (u0 < bp0[maxIndex]) {
 800167c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800168c:	f7ff f996 	bl	80009bc <__aeabi_dcmplt>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d04b      	beq.n	800172e <look1_binlxpw+0x116>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 8001696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 80016a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016a2:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 80016a4:	e016      	b.n	80016d4 <look1_binlxpw+0xbc>
      if (u0 < bp0[bpIdx]) {
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016b6:	f7ff f981 	bl	80009bc <__aeabi_dcmplt>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <look1_binlxpw+0xae>
        iRght = bpIdx;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	e001      	b.n	80016ca <look1_binlxpw+0xb2>
      } else {
        iLeft = bpIdx;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	4413      	add	r3, r2
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
    while (iRght - iLeft > 1U) {
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d8e3      	bhi.n	80016a6 <look1_binlxpw+0x8e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ee:	f7fe fd3b 	bl	8000168 <__aeabi_dsub>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4614      	mov	r4, r2
 80016f8:	461d      	mov	r5, r3
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	3301      	adds	r3, #1
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe fd28 	bl	8000168 <__aeabi_dsub>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4620      	mov	r0, r4
 800171e:	4629      	mov	r1, r5
 8001720:	f7ff f804 	bl	800072c <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800172c:	e02e      	b.n	800178c <look1_binlxpw+0x174>
  } else {
    iLeft = maxIndex - 1U;
 800172e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001730:	3b01      	subs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8001734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001736:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800173a:	3b01      	subs	r3, #1
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800174a:	f7fe fd0d 	bl	8000168 <__aeabi_dsub>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4614      	mov	r4, r2
 8001754:	461d      	mov	r5, r3
 8001756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001764:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001768:	3b01      	subs	r3, #1
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe fcf8 	bl	8000168 <__aeabi_dsub>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe ffd4 	bl	800072c <__aeabi_ddiv>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	3301      	adds	r3, #1
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
 8001796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	4413      	add	r3, r2
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7fe fcdf 	bl	8000168 <__aeabi_dsub>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017b6:	f7fe fe8f 	bl	80004d8 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	4413      	add	r3, r2
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe fccd 	bl	800016c <__adddf3>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
}
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bdb0      	pop	{r4, r5, r7, pc}

080017e0 <EngTrModel_gear_state>:

/* Function for Chart: '<Root>/ShiftLogic' */
static void EngTrModel_gear_state(const int32_T *sfEvent)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  switch (EngTrModel_DW.is_gear_state) {
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 80017ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ee:	3b01      	subs	r3, #1
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d86c      	bhi.n	80018ce <EngTrModel_gear_state+0xee>
 80017f4:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <EngTrModel_gear_state+0x1c>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	0800180d 	.word	0x0800180d
 8001800:	0800182d 	.word	0x0800182d
 8001804:	0800184b 	.word	0x0800184b
 8001808:	08001885 	.word	0x08001885
   case EngTrModel_IN_first:
    if (*sfEvent == EngTrModel_event_UP) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d155      	bne.n	80018c0 <EngTrModel_gear_state+0xe0>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 8001816:	2203      	movs	r2, #3
 8001818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 800181c:	492f      	ldr	r1, [pc, #188]	; (80018dc <EngTrModel_gear_state+0xfc>)
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001826:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 800182a:	e049      	b.n	80018c0 <EngTrModel_gear_state+0xe0>

   case EngTrModel_IN_fourth:
    if (*sfEvent == EngTrModel_event_DOWN) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d147      	bne.n	80018c4 <EngTrModel_gear_state+0xe4>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 8001834:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 8001836:	2204      	movs	r2, #4
 8001838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 800183c:	4927      	ldr	r1, [pc, #156]	; (80018dc <EngTrModel_gear_state+0xfc>)
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <EngTrModel_gear_state+0x100>)
 8001844:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 8001848:	e03c      	b.n	80018c4 <EngTrModel_gear_state+0xe4>

   case EngTrModel_IN_second:
    switch (*sfEvent) {
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00c      	beq.n	800186c <EngTrModel_gear_state+0x8c>
 8001852:	2b01      	cmp	r3, #1
 8001854:	d138      	bne.n	80018c8 <EngTrModel_gear_state+0xe8>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 8001858:	2204      	movs	r2, #4
 800185a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 800185e:	491f      	ldr	r1, [pc, #124]	; (80018dc <EngTrModel_gear_state+0xfc>)
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <EngTrModel_gear_state+0x100>)
 8001866:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 800186a:	e00a      	b.n	8001882 <EngTrModel_gear_state+0xa2>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 1.0;
 8001874:	4919      	ldr	r1, [pc, #100]	; (80018dc <EngTrModel_gear_state+0xfc>)
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <EngTrModel_gear_state+0x104>)
 800187c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 8001880:	bf00      	nop
    }
    break;
 8001882:	e021      	b.n	80018c8 <EngTrModel_gear_state+0xe8>

   case EngTrModel_IN_third:
    switch (*sfEvent) {
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00c      	beq.n	80018a6 <EngTrModel_gear_state+0xc6>
 800188c:	2b01      	cmp	r3, #1
 800188e:	d11d      	bne.n	80018cc <EngTrModel_gear_state+0xec>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_fourth;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 8001892:	2202      	movs	r2, #2
 8001894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 4.0;
 8001898:	4910      	ldr	r1, [pc, #64]	; (80018dc <EngTrModel_gear_state+0xfc>)
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <EngTrModel_gear_state+0x108>)
 80018a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80018a4:	e00b      	b.n	80018be <EngTrModel_gear_state+0xde>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 80018a8:	2203      	movs	r2, #3
 80018aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 80018ae:	490b      	ldr	r1, [pc, #44]	; (80018dc <EngTrModel_gear_state+0xfc>)
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018b8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80018bc:	bf00      	nop
    }
    break;
 80018be:	e005      	b.n	80018cc <EngTrModel_gear_state+0xec>
    break;
 80018c0:	bf00      	nop
 80018c2:	e004      	b.n	80018ce <EngTrModel_gear_state+0xee>
    break;
 80018c4:	bf00      	nop
 80018c6:	e002      	b.n	80018ce <EngTrModel_gear_state+0xee>
    break;
 80018c8:	bf00      	nop
 80018ca:	e000      	b.n	80018ce <EngTrModel_gear_state+0xee>
    break;
 80018cc:	bf00      	nop
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000258 	.word	0x20000258
 80018dc:	20000228 	.word	0x20000228
 80018e0:	40080000 	.word	0x40080000
 80018e4:	3ff00000 	.word	0x3ff00000
 80018e8:	40100000 	.word	0x40100000

080018ec <rt_powd_snf>:

real_T rt_powd_snf(real_T u0, real_T u1)
{
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80018f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  real_T y;
  real_T tmp;
  real_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 80018fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018fe:	f001 ffdd 	bl	80038bc <rtIsNaN>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d106      	bne.n	8001916 <rt_powd_snf+0x2a>
 8001908:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800190c:	f001 ffd6 	bl	80038bc <rtIsNaN>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <rt_powd_snf+0x36>
    y = (rtNaN);
 8001916:	4b7e      	ldr	r3, [pc, #504]	; (8001b10 <rt_powd_snf+0x224>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001920:	e0ef      	b.n	8001b02 <rt_powd_snf+0x216>
  } else {
    tmp = fabs(u0);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001932:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp_0 = fabs(u1);
 8001936:	68bc      	ldr	r4, [r7, #8]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800193e:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 8001942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001946:	f001 ff95 	bl	8003874 <rtIsInf>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d049      	beq.n	80019e4 <rt_powd_snf+0xf8>
      if (tmp == 1.0) {
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4b6f      	ldr	r3, [pc, #444]	; (8001b14 <rt_powd_snf+0x228>)
 8001956:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800195a:	f7ff f825 	bl	80009a8 <__aeabi_dcmpeq>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <rt_powd_snf+0x84>
        y = 1.0;
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <rt_powd_snf+0x228>)
 800196a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800196e:	e0c8      	b.n	8001b02 <rt_powd_snf+0x216>
      } else if (tmp > 1.0) {
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <rt_powd_snf+0x228>)
 8001976:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800197a:	f7ff f83d 	bl	80009f8 <__aeabi_dcmpgt>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d017      	beq.n	80019b4 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001990:	f7ff f832 	bl	80009f8 <__aeabi_dcmpgt>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <rt_powd_snf+0xba>
          y = (rtInf);
 800199a:	4b5f      	ldr	r3, [pc, #380]	; (8001b18 <rt_powd_snf+0x22c>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019a4:	e0ad      	b.n	8001b02 <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019b2:	e0a6      	b.n	8001b02 <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019c0:	f7ff f81a 	bl	80009f8 <__aeabi_dcmpgt>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <rt_powd_snf+0xec>
        y = 0.0;
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019d6:	e094      	b.n	8001b02 <rt_powd_snf+0x216>
      } else {
        y = (rtInf);
 80019d8:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <rt_powd_snf+0x22c>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019e2:	e08e      	b.n	8001b02 <rt_powd_snf+0x216>
      }
    } else if (tmp_0 == 0.0) {
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019f0:	f7fe ffda 	bl	80009a8 <__aeabi_dcmpeq>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <rt_powd_snf+0x11a>
      y = 1.0;
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	4b45      	ldr	r3, [pc, #276]	; (8001b14 <rt_powd_snf+0x228>)
 8001a00:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a04:	e07d      	b.n	8001b02 <rt_powd_snf+0x216>
    } else if (tmp_0 == 1.0) {
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b42      	ldr	r3, [pc, #264]	; (8001b14 <rt_powd_snf+0x228>)
 8001a0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a10:	f7fe ffca 	bl	80009a8 <__aeabi_dcmpeq>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01b      	beq.n	8001a52 <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a26:	f7fe ffe7 	bl	80009f8 <__aeabi_dcmpgt>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <rt_powd_snf+0x14e>
        y = u0;
 8001a30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a34:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a38:	e063      	b.n	8001b02 <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8001a3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a3e:	f04f 0000 	mov.w	r0, #0
 8001a42:	4934      	ldr	r1, [pc, #208]	; (8001b14 <rt_powd_snf+0x228>)
 8001a44:	f7fe fe72 	bl	800072c <__aeabi_ddiv>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a50:	e057      	b.n	8001b02 <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a5e:	f7fe ffa3 	bl	80009a8 <__aeabi_dcmpeq>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00a      	beq.n	8001a7e <rt_powd_snf+0x192>
      y = u0 * u0;
 8001a68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a70:	f7fe fd32 	bl	80004d8 <__aeabi_dmul>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a7c:	e041      	b.n	8001b02 <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <rt_powd_snf+0x230>)
 8001a84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a88:	f7fe ff8e 	bl	80009a8 <__aeabi_dcmpeq>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d011      	beq.n	8001ab6 <rt_powd_snf+0x1ca>
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a9e:	f7fe ffa1 	bl	80009e4 <__aeabi_dcmpge>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001aa8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aac:	f00a f80a 	bl	800bac4 <sqrt>
 8001ab0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001ab4:	e025      	b.n	8001b02 <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ac2:	f7fe ff7b 	bl	80009bc <__aeabi_dcmplt>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d012      	beq.n	8001af2 <rt_powd_snf+0x206>
 8001acc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ad0:	f00a f8fa 	bl	800bcc8 <floor>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001adc:	f7fe ff8c 	bl	80009f8 <__aeabi_dcmpgt>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <rt_powd_snf+0x206>
      y = (rtNaN);
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <rt_powd_snf+0x224>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001af0:	e007      	b.n	8001b02 <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8001af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001af6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001afa:	f009 ff7b 	bl	800b9f4 <pow>
 8001afe:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    }
  }

  return y;
 8001b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	3730      	adds	r7, #48	; 0x30
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b10:	20000618 	.word	0x20000618
 8001b14:	3ff00000 	.word	0x3ff00000
 8001b18:	20000608 	.word	0x20000608
 8001b1c:	3fe00000 	.word	0x3fe00000

08001b20 <EngTrModel_step>:

/* Model step function */
void EngTrModel_step(void)
{
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b08c      	sub	sp, #48	; 0x30
 8001b24:	af06      	add	r7, sp, #24
  int32_T sfEvent;
  real_T InterpDown;
  real_T InterpUp;

  /* DiscreteIntegrator: '<S1>/Discrete-Time Integrator' */
  EngTrModel_B.EngineRPM = EngTrModel_DW.DiscreteTimeIntegrator_DSTATE;
 8001b26:	4b8c      	ldr	r3, [pc, #560]	; (8001d58 <EngTrModel_step+0x238>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	498b      	ldr	r1, [pc, #556]	; (8001d5c <EngTrModel_step+0x23c>)
 8001b2e:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/EngineSpeed' */
  EngTrModel_Y.EngineSpeed = EngTrModel_B.EngineRPM;
 8001b32:	4b8a      	ldr	r3, [pc, #552]	; (8001d5c <EngTrModel_step+0x23c>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	4989      	ldr	r1, [pc, #548]	; (8001d60 <EngTrModel_step+0x240>)
 8001b3a:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S8>/ToLinearSpeed'
   */
  /* Unit Conversion - from: ft/min to: mph
     Expression: output = (0.0113636*input) + (0) */
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001b3e:	4b86      	ldr	r3, [pc, #536]	; (8001d58 <EngTrModel_step+0x238>)
 8001b40:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 8001b44:	a380      	add	r3, pc, #512	; (adr r3, 8001d48 <EngTrModel_step+0x228>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fcc5 	bl	80004d8 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001b56:	a37e      	add	r3, pc, #504	; (adr r3, 8001d50 <EngTrModel_step+0x230>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fcbc 	bl	80004d8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 8001b64:	497d      	ldr	r1, [pc, #500]	; (8001d5c <EngTrModel_step+0x23c>)
 8001b66:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Chart: '<Root>/ShiftLogic' */
  sfEvent = EngTrModel_CALL_EVENT;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	607b      	str	r3, [r7, #4]
  if (EngTrModel_DW.temporalCounter_i1 < MAX_uint32_T) {
 8001b70:	4b79      	ldr	r3, [pc, #484]	; (8001d58 <EngTrModel_step+0x238>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d004      	beq.n	8001b84 <EngTrModel_step+0x64>
    EngTrModel_DW.temporalCounter_i1++;
 8001b7a:	4b77      	ldr	r3, [pc, #476]	; (8001d58 <EngTrModel_step+0x238>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	4a75      	ldr	r2, [pc, #468]	; (8001d58 <EngTrModel_step+0x238>)
 8001b82:	61d3      	str	r3, [r2, #28]
  }

  if (EngTrModel_DW.is_active_c1_EngTrModel == 0U) {
 8001b84:	4b74      	ldr	r3, [pc, #464]	; (8001d58 <EngTrModel_step+0x238>)
 8001b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d11a      	bne.n	8001bc4 <EngTrModel_step+0xa4>
    EngTrModel_DW.is_active_c1_EngTrModel = 1U;
 8001b8e:	4b72      	ldr	r3, [pc, #456]	; (8001d58 <EngTrModel_step+0x238>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2020 	strb.w	r2, [r3, #32]
    EngTrModel_DW.is_active_gear_state = 1U;
 8001b96:	4b70      	ldr	r3, [pc, #448]	; (8001d58 <EngTrModel_step+0x238>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 8001b9e:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <EngTrModel_step+0x238>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    EngTrModel_B.Gear = 1.0;
 8001ba6:	496d      	ldr	r1, [pc, #436]	; (8001d5c <EngTrModel_step+0x23c>)
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <EngTrModel_step+0x244>)
 8001bae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    EngTrModel_DW.is_active_selection_state = 1U;
 8001bb2:	4b69      	ldr	r3, [pc, #420]	; (8001d58 <EngTrModel_step+0x238>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001bba:	4b67      	ldr	r3, [pc, #412]	; (8001d58 <EngTrModel_step+0x238>)
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001bc2:	e0e4      	b.n	8001d8e <EngTrModel_step+0x26e>
  } else {
    if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001bc4:	4b64      	ldr	r3, [pc, #400]	; (8001d58 <EngTrModel_step+0x238>)
 8001bc6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <EngTrModel_step+0xb6>
      EngTrModel_gear_state(&sfEvent);
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fe05 	bl	80017e0 <EngTrModel_gear_state>
    }

    if (EngTrModel_DW.is_active_selection_state != 0U) {
 8001bd6:	4b60      	ldr	r3, [pc, #384]	; (8001d58 <EngTrModel_step+0x238>)
 8001bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80d6 	beq.w	8001d8e <EngTrModel_step+0x26e>
      /* Outputs for Function Call SubSystem: '<S2>/ComputeThreshold' */
      /* Lookup_n-D: '<S5>/InterpDown' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpDown = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001be2:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <EngTrModel_step+0x248>)
 8001be4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001be8:	4b5c      	ldr	r3, [pc, #368]	; (8001d5c <EngTrModel_step+0x23c>)
 8001bea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001bee:	2406      	movs	r4, #6
 8001bf0:	9404      	str	r4, [sp, #16]
 8001bf2:	4c5e      	ldr	r4, [pc, #376]	; (8001d6c <EngTrModel_step+0x24c>)
 8001bf4:	9403      	str	r4, [sp, #12]
 8001bf6:	4c5e      	ldr	r4, [pc, #376]	; (8001d70 <EngTrModel_step+0x250>)
 8001bf8:	9402      	str	r4, [sp, #8]
 8001bfa:	4c5e      	ldr	r4, [pc, #376]	; (8001d74 <EngTrModel_step+0x254>)
 8001bfc:	9401      	str	r4, [sp, #4]
 8001bfe:	4c5e      	ldr	r4, [pc, #376]	; (8001d78 <EngTrModel_step+0x258>)
 8001c00:	9400      	str	r4, [sp, #0]
 8001c02:	f7ff fb0d 	bl	8001220 <look2_binlxpw>
 8001c06:	e9c7 0104 	strd	r0, r1, [r7, #16]
        EngTrModel_ConstP.InterpDown_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* Lookup_n-D: '<S5>/InterpUp' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpUp = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001c0a:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <EngTrModel_step+0x248>)
 8001c0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c10:	4b52      	ldr	r3, [pc, #328]	; (8001d5c <EngTrModel_step+0x23c>)
 8001c12:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c16:	2406      	movs	r4, #6
 8001c18:	9404      	str	r4, [sp, #16]
 8001c1a:	4c54      	ldr	r4, [pc, #336]	; (8001d6c <EngTrModel_step+0x24c>)
 8001c1c:	9403      	str	r4, [sp, #12]
 8001c1e:	4c57      	ldr	r4, [pc, #348]	; (8001d7c <EngTrModel_step+0x25c>)
 8001c20:	9402      	str	r4, [sp, #8]
 8001c22:	4c54      	ldr	r4, [pc, #336]	; (8001d74 <EngTrModel_step+0x254>)
 8001c24:	9401      	str	r4, [sp, #4]
 8001c26:	4c56      	ldr	r4, [pc, #344]	; (8001d80 <EngTrModel_step+0x260>)
 8001c28:	9400      	str	r4, [sp, #0]
 8001c2a:	f7ff faf9 	bl	8001220 <look2_binlxpw>
 8001c2e:	e9c7 0102 	strd	r0, r1, [r7, #8]
        EngTrModel_ConstP.InterpUp_bp01Data, EngTrModel_ConstP.pooled2,
        EngTrModel_ConstP.InterpUp_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* End of Outputs for SubSystem: '<S2>/ComputeThreshold' */
      switch (EngTrModel_DW.is_selection_state) {
 8001c32:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <EngTrModel_step+0x238>)
 8001c34:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d05a      	beq.n	8001cf2 <EngTrModel_step+0x1d2>
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	f300 80a6 	bgt.w	8001d8e <EngTrModel_step+0x26e>
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d002      	beq.n	8001c4c <EngTrModel_step+0x12c>
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d02e      	beq.n	8001ca8 <EngTrModel_step+0x188>
 8001c4a:	e0a0      	b.n	8001d8e <EngTrModel_step+0x26e>
       case EngTrModel_IN_downshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <EngTrModel_step+0x238>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d919      	bls.n	8001c88 <EngTrModel_step+0x168>
            (EngTrModel_B.VehicleSpeed <= InterpDown)) {
 8001c54:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <EngTrModel_step+0x23c>)
 8001c56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001c5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c5e:	f7fe fec1 	bl	80009e4 <__aeabi_dcmpge>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00f      	beq.n	8001c88 <EngTrModel_step+0x168>
          sfEvent = EngTrModel_event_DOWN;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001c6c:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <EngTrModel_step+0x238>)
 8001c6e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <EngTrModel_step+0x15e>
            EngTrModel_gear_state(&sfEvent);
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fdb1 	bl	80017e0 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001c7e:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <EngTrModel_step+0x238>)
 8001c80:	2202      	movs	r2, #2
 8001c82:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001c86:	e082      	b.n	8001d8e <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
 8001c88:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <EngTrModel_step+0x23c>)
 8001c8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c92:	f7fe fe93 	bl	80009bc <__aeabi_dcmplt>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d100      	bne.n	8001c9e <EngTrModel_step+0x17e>
        break;
 8001c9c:	e077      	b.n	8001d8e <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <EngTrModel_step+0x238>)
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001ca6:	e072      	b.n	8001d8e <EngTrModel_step+0x26e>

       case EngTrModel_IN_steady_state:
        if (EngTrModel_B.VehicleSpeed > InterpUp) {
 8001ca8:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <EngTrModel_step+0x23c>)
 8001caa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cb2:	f7fe fe83 	bl	80009bc <__aeabi_dcmplt>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <EngTrModel_step+0x1ac>
          EngTrModel_DW.is_selection_state = EngTrModel_IN_upshifting;
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <EngTrModel_step+0x238>)
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          EngTrModel_DW.temporalCounter_i1 = 0U;
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <EngTrModel_step+0x238>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
            EngTrModel_DW.temporalCounter_i1 = 0U;
          }
        }
        break;
 8001cca:	e060      	b.n	8001d8e <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
 8001ccc:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <EngTrModel_step+0x23c>)
 8001cce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cd6:	f7fe fe8f 	bl	80009f8 <__aeabi_dcmpgt>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d100      	bne.n	8001ce2 <EngTrModel_step+0x1c2>
        break;
 8001ce0:	e055      	b.n	8001d8e <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <EngTrModel_step+0x238>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            EngTrModel_DW.temporalCounter_i1 = 0U;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <EngTrModel_step+0x238>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	61da      	str	r2, [r3, #28]
        break;
 8001cf0:	e04d      	b.n	8001d8e <EngTrModel_step+0x26e>

       case EngTrModel_IN_upshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <EngTrModel_step+0x238>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d919      	bls.n	8001d2e <EngTrModel_step+0x20e>
            (EngTrModel_B.VehicleSpeed >= InterpUp)) {
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <EngTrModel_step+0x23c>)
 8001cfc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001d00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d04:	f7fe fe64 	bl	80009d0 <__aeabi_dcmple>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00f      	beq.n	8001d2e <EngTrModel_step+0x20e>
          sfEvent = EngTrModel_event_UP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <EngTrModel_step+0x238>)
 8001d14:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <EngTrModel_step+0x204>
            EngTrModel_gear_state(&sfEvent);
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fd5e 	bl	80017e0 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <EngTrModel_step+0x238>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001d2c:	e02e      	b.n	8001d8c <EngTrModel_step+0x26c>
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <EngTrModel_step+0x23c>)
 8001d30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d38:	f7fe fe5e 	bl	80009f8 <__aeabi_dcmpgt>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d120      	bne.n	8001d84 <EngTrModel_step+0x264>
        break;
 8001d42:	e023      	b.n	8001d8c <EngTrModel_step+0x26c>
 8001d44:	f3af 8000 	nop.w
 8001d48:	54442d18 	.word	0x54442d18
 8001d4c:	401921fb 	.word	0x401921fb
 8001d50:	745d1746 	.word	0x745d1746
 8001d54:	3f8745d1 	.word	0x3f8745d1
 8001d58:	20000258 	.word	0x20000258
 8001d5c:	20000228 	.word	0x20000228
 8001d60:	20000290 	.word	0x20000290
 8001d64:	3ff00000 	.word	0x3ff00000
 8001d68:	20000280 	.word	0x20000280
 8001d6c:	0800d2a0 	.word	0x0800d2a0
 8001d70:	0800ca70 	.word	0x0800ca70
 8001d74:	0800cb60 	.word	0x0800cb60
 8001d78:	0800cb30 	.word	0x0800cb30
 8001d7c:	0800cb80 	.word	0x0800cb80
 8001d80:	0800cc40 	.word	0x0800cc40
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001d84:	4b84      	ldr	r3, [pc, #528]	; (8001f98 <EngTrModel_step+0x478>)
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001d8c:	bf00      	nop
  }

  /* End of Chart: '<Root>/ShiftLogic' */

  /* Lookup_n-D: '<S7>/Table' */
  InterpDown = look1_binlxpw(EngTrModel_B.Gear, EngTrModel_ConstP.pooled2,
 8001d8e:	4b83      	ldr	r3, [pc, #524]	; (8001f9c <EngTrModel_step+0x47c>)
 8001d90:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001d94:	2303      	movs	r3, #3
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4b81      	ldr	r3, [pc, #516]	; (8001fa0 <EngTrModel_step+0x480>)
 8001d9a:	4a82      	ldr	r2, [pc, #520]	; (8001fa4 <EngTrModel_step+0x484>)
 8001d9c:	f7ff fc3c 	bl	8001618 <look1_binlxpw>
 8001da0:	e9c7 0104 	strd	r0, r1, [r7, #16]
    EngTrModel_ConstP.Table_tableData, 3U);

  /* Gain: '<S4>/FinalDriveRatio2' incorporates:
   *  DiscreteIntegrator: '<S4>/WheelSpeed'
   */
  EngTrModel_B.TransmissionRPM = 3.23 * EngTrModel_DW.WheelSpeed_DSTATE;
 8001da4:	4b7c      	ldr	r3, [pc, #496]	; (8001f98 <EngTrModel_step+0x478>)
 8001da6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001daa:	a375      	add	r3, pc, #468	; (adr r3, 8001f80 <EngTrModel_step+0x460>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fb92 	bl	80004d8 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4978      	ldr	r1, [pc, #480]	; (8001f9c <EngTrModel_step+0x47c>)
 8001dba:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Product: '<S6>/SpeedRatio' incorporates:
   *  Product: '<S7>/Product1'
   */
  if( EngTrModel_B.EngineRPM != 0)
 8001dbe:	4b77      	ldr	r3, [pc, #476]	; (8001f9c <EngTrModel_step+0x47c>)
 8001dc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	f7fe fdec 	bl	80009a8 <__aeabi_dcmpeq>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d114      	bne.n	8001e00 <EngTrModel_step+0x2e0>
    InterpUp = InterpDown * EngTrModel_B.TransmissionRPM / EngTrModel_B.EngineRPM;
 8001dd6:	4b71      	ldr	r3, [pc, #452]	; (8001f9c <EngTrModel_step+0x47c>)
 8001dd8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ddc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001de0:	f7fe fb7a 	bl	80004d8 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	4b6b      	ldr	r3, [pc, #428]	; (8001f9c <EngTrModel_step+0x47c>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fc9b 	bl	800072c <__aeabi_ddiv>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001dfe:	e005      	b.n	8001e0c <EngTrModel_step+0x2ec>
  else
    InterpUp = 0.0;
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Fcn: '<S6>/Impeller' incorporates:
   *  Lookup_n-D: '<S6>/FactorK'
   *  Product: '<S6>/Quotient'
   */
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001e0c:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <EngTrModel_step+0x47c>)
 8001e0e:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001e12:	2314      	movs	r3, #20
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	4b64      	ldr	r3, [pc, #400]	; (8001fa8 <EngTrModel_step+0x488>)
 8001e18:	4a64      	ldr	r2, [pc, #400]	; (8001fac <EngTrModel_step+0x48c>)
 8001e1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e1e:	f7ff fbfb 	bl	8001618 <look1_binlxpw>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001e26:	4620      	mov	r0, r4
 8001e28:	4629      	mov	r1, r5
 8001e2a:	f7fe fc7f 	bl	800072c <__aeabi_ddiv>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e3e:	f7ff fd55 	bl	80018ec <rt_powd_snf>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4955      	ldr	r1, [pc, #340]	; (8001f9c <EngTrModel_step+0x47c>)
 8001e48:	e9c1 2306 	strd	r2, r3, [r1, #24]
                  EngTrModel_ConstP.FactorK_tableData, 20U), 2.0);

  /* Lookup_n-D: '<S6>/TorqueRatio' */
  InterpUp = look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001e4c:	2314      	movs	r3, #20
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	4b57      	ldr	r3, [pc, #348]	; (8001fb0 <EngTrModel_step+0x490>)
 8001e52:	4a56      	ldr	r2, [pc, #344]	; (8001fac <EngTrModel_step+0x48c>)
 8001e54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e58:	f7ff fbde 	bl	8001618 <look1_binlxpw>
 8001e5c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    EngTrModel_ConstP.TorqueRatio_tableData, 20U);

  /* Product: '<S7>/Product' incorporates:
   *  Product: '<S6>/Turbine'
   */
  EngTrModel_B.OutputTorque = EngTrModel_B.ImpellerTorque * InterpUp *
 8001e60:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <EngTrModel_step+0x47c>)
 8001e62:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001e66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e6a:	f7fe fb35 	bl	80004d8 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e7a:	f7fe fb2d 	bl	80004d8 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4946      	ldr	r1, [pc, #280]	; (8001f9c <EngTrModel_step+0x47c>)
 8001e84:	e9c1 2308 	strd	r2, r3, [r1, #32]
    InterpDown;

  /* Outport: '<Root>/Gear' */
  EngTrModel_Y.Gear = EngTrModel_B.Gear;
 8001e88:	4b44      	ldr	r3, [pc, #272]	; (8001f9c <EngTrModel_step+0x47c>)
 8001e8a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e8e:	4949      	ldr	r1, [pc, #292]	; (8001fb4 <EngTrModel_step+0x494>)
 8001e90:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Outport: '<Root>/VehicleSpeed' */
  EngTrModel_Y.VehicleSpeed = EngTrModel_B.VehicleSpeed;
 8001e94:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <EngTrModel_step+0x47c>)
 8001e96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e9a:	4946      	ldr	r1, [pc, #280]	; (8001fb4 <EngTrModel_step+0x494>)
 8001e9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
   *  Gain: '<S1>/EnginePlusImpellerInertia'
   *  Inport: '<Root>/Throttle'
   *  Lookup_n-D: '<S1>/EngineTorque'
   *  Sum: '<S1>/Sum'
   */
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001ea0:	4b45      	ldr	r3, [pc, #276]	; (8001fb8 <EngTrModel_step+0x498>)
 8001ea2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ea6:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <EngTrModel_step+0x47c>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	240a      	movs	r4, #10
 8001eae:	9404      	str	r4, [sp, #16]
 8001eb0:	4c42      	ldr	r4, [pc, #264]	; (8001fbc <EngTrModel_step+0x49c>)
 8001eb2:	9403      	str	r4, [sp, #12]
 8001eb4:	4c42      	ldr	r4, [pc, #264]	; (8001fc0 <EngTrModel_step+0x4a0>)
 8001eb6:	9402      	str	r4, [sp, #8]
 8001eb8:	4c42      	ldr	r4, [pc, #264]	; (8001fc4 <EngTrModel_step+0x4a4>)
 8001eba:	9401      	str	r4, [sp, #4]
 8001ebc:	4c42      	ldr	r4, [pc, #264]	; (8001fc8 <EngTrModel_step+0x4a8>)
 8001ebe:	9400      	str	r4, [sp, #0]
 8001ec0:	f7ff f9ae 	bl	8001220 <look2_binlxpw>
    (EngTrModel_U.Throttle, EngTrModel_B.EngineRPM,
     EngTrModel_ConstP.EngineTorque_bp01Data,
     EngTrModel_ConstP.EngineTorque_bp02Data,
     EngTrModel_ConstP.EngineTorque_tableData,
     EngTrModel_ConstP.EngineTorque_maxIndex, 10U) - EngTrModel_B.ImpellerTorque)
 8001ec4:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <EngTrModel_step+0x47c>)
 8001ec6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001eca:	f7fe f94d 	bl	8000168 <__aeabi_dsub>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
    * 45.472138452209627 * 0.04;
 8001ed6:	a32c      	add	r3, pc, #176	; (adr r3, 8001f88 <EngTrModel_step+0x468>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fafc 	bl	80004d8 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	a329      	add	r3, pc, #164	; (adr r3, 8001f90 <EngTrModel_step+0x470>)
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	f7fe faf3 	bl	80004d8 <__aeabi_dmul>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001efa:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <EngTrModel_step+0x478>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe f934 	bl	800016c <__adddf3>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4923      	ldr	r1, [pc, #140]	; (8001f98 <EngTrModel_step+0x478>)
 8001f0a:	e9c1 2300 	strd	r2, r3, [r1]

  /* Signum: '<S4>/Sign' */
  if (EngTrModel_B.VehicleSpeed < 0.0) {
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <EngTrModel_step+0x47c>)
 8001f10:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	f7fe fd4e 	bl	80009bc <__aeabi_dcmplt>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <EngTrModel_step+0x412>
    InterpDown = -1.0;
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <EngTrModel_step+0x4ac>)
 8001f2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f30:	e055      	b.n	8001fde <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed > 0.0) {
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <EngTrModel_step+0x47c>)
 8001f34:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	f7fe fd5a 	bl	80009f8 <__aeabi_dcmpgt>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <EngTrModel_step+0x436>
    InterpDown = 1.0;
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <EngTrModel_step+0x4b0>)
 8001f50:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f54:	e043      	b.n	8001fde <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed == 0.0) {
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <EngTrModel_step+0x47c>)
 8001f58:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	f7fe fd20 	bl	80009a8 <__aeabi_dcmpeq>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d032      	beq.n	8001fd4 <EngTrModel_step+0x4b4>
    InterpDown = 0.0;
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f7a:	e030      	b.n	8001fde <EngTrModel_step+0x4be>
 8001f7c:	f3af 8000 	nop.w
 8001f80:	3d70a3d7 	.word	0x3d70a3d7
 8001f84:	4009d70a 	.word	0x4009d70a
 8001f88:	0865b653 	.word	0x0865b653
 8001f8c:	4046bc6f 	.word	0x4046bc6f
 8001f90:	47ae147b 	.word	0x47ae147b
 8001f94:	3fa47ae1 	.word	0x3fa47ae1
 8001f98:	20000258 	.word	0x20000258
 8001f9c:	20000228 	.word	0x20000228
 8001fa0:	0800d088 	.word	0x0800d088
 8001fa4:	0800cb60 	.word	0x0800cb60
 8001fa8:	0800d0a8 	.word	0x0800d0a8
 8001fac:	0800d150 	.word	0x0800d150
 8001fb0:	0800d1f8 	.word	0x0800d1f8
 8001fb4:	20000290 	.word	0x20000290
 8001fb8:	20000280 	.word	0x20000280
 8001fbc:	0800d2a8 	.word	0x0800d2a8
 8001fc0:	0800cc70 	.word	0x0800cc70
 8001fc4:	0800d030 	.word	0x0800d030
 8001fc8:	0800cfe0 	.word	0x0800cfe0
 8001fcc:	bff00000 	.word	0xbff00000
 8001fd0:	3ff00000 	.word	0x3ff00000
  } else {
    InterpDown = (rtNaN);
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <EngTrModel_step+0x5a0>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	e9c7 2304 	strd	r2, r3, [r7, #16]
   *  Inport: '<Root>/Brake'
   *  Product: '<S4>/SignedLoad'
   *  Sum: '<S4>/Sum'
   *  Sum: '<S4>/Sum1'
   */
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001fde:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <EngTrModel_step+0x5a4>)
 8001fe0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001fe4:	a32e      	add	r3, pc, #184	; (adr r3, 80020a0 <EngTrModel_step+0x580>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f7fe fa75 	bl	80004d8 <__aeabi_dmul>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4614      	mov	r4, r2
 8001ff4:	461d      	mov	r5, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001ff6:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <EngTrModel_step+0x5a4>)
 8001ff8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002004:	f7ff fc72 	bl	80018ec <rt_powd_snf>
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8002008:	a327      	add	r3, pc, #156	; (adr r3, 80020a8 <EngTrModel_step+0x588>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	f7fe fa63 	bl	80004d8 <__aeabi_dmul>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <EngTrModel_step+0x5a8>)
 8002020:	f7fe f8a4 	bl	800016c <__adddf3>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <EngTrModel_step+0x5ac>)
 800202e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8002032:	f7fe f89b 	bl	800016c <__adddf3>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 800203e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002042:	f7fe fa49 	bl	80004d8 <__aeabi_dmul>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 800204a:	4620      	mov	r0, r4
 800204c:	4629      	mov	r1, r5
 800204e:	f7fe f88b 	bl	8000168 <__aeabi_dsub>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 800205a:	a315      	add	r3, pc, #84	; (adr r3, 80020b0 <EngTrModel_step+0x590>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe fa3a 	bl	80004d8 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	a312      	add	r3, pc, #72	; (adr r3, 80020b8 <EngTrModel_step+0x598>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe fa31 	bl	80004d8 <__aeabi_dmul>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <EngTrModel_step+0x5b0>)
 8002080:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002084:	f7fe f872 	bl	800016c <__adddf3>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4910      	ldr	r1, [pc, #64]	; (80020d0 <EngTrModel_step+0x5b0>)
 800208e:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bdb0      	pop	{r4, r5, r7, pc}
 800209a:	bf00      	nop
 800209c:	f3af 8000 	nop.w
 80020a0:	3d70a3d7 	.word	0x3d70a3d7
 80020a4:	4009d70a 	.word	0x4009d70a
 80020a8:	47ae147b 	.word	0x47ae147b
 80020ac:	3f947ae1 	.word	0x3f947ae1
 80020b0:	b3bfa695 	.word	0xb3bfa695
 80020b4:	3fb52ad1 	.word	0x3fb52ad1
 80020b8:	47ae147b 	.word	0x47ae147b
 80020bc:	3fa47ae1 	.word	0x3fa47ae1
 80020c0:	20000618 	.word	0x20000618
 80020c4:	20000228 	.word	0x20000228
 80020c8:	40440000 	.word	0x40440000
 80020cc:	20000280 	.word	0x20000280
 80020d0:	20000258 	.word	0x20000258

080020d4 <EngTrModel_initialize>:

/* Model initialize function */
void EngTrModel_initialize(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 80020d8:	2008      	movs	r0, #8
 80020da:	f001 fb93 	bl	8003804 <rt_InitInfAndNaN>
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <USER_GPIO_Define>:
#include "main.h"

// Define a pin

void USER_GPIO_Define( uint8_t port, uint8_t pin, uint8_t direction, uint8_t option )
{
 80020e4:	b490      	push	{r4, r7}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4604      	mov	r4, r0
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	4603      	mov	r3, r0
 80020f8:	71bb      	strb	r3, [r7, #6]
 80020fa:	460b      	mov	r3, r1
 80020fc:	717b      	strb	r3, [r7, #5]
 80020fe:	4613      	mov	r3, r2
 8002100:	713b      	strb	r3, [r7, #4]
  volatile uint32_t * CR;
  uint8_t actual_pin = pin;
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	72fb      	strb	r3, [r7, #11]
  uint8_t offset = 0x00;
 8002106:	2300      	movs	r3, #0
 8002108:	72bb      	strb	r3, [r7, #10]

  if( pin > 7 ) {
 800210a:	79bb      	ldrb	r3, [r7, #6]
 800210c:	2b07      	cmp	r3, #7
 800210e:	d904      	bls.n	800211a <USER_GPIO_Define+0x36>
      actual_pin -= 8;
 8002110:	7afb      	ldrb	r3, [r7, #11]
 8002112:	3b08      	subs	r3, #8
 8002114:	72fb      	strb	r3, [r7, #11]
      offset = 0x01;
 8002116:	2301      	movs	r3, #1
 8002118:	72bb      	strb	r3, [r7, #10]
  }

  if( port == 0 )
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <USER_GPIO_Define+0x58>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPAEN;			// IO port A clock enable
 8002120:	4b42      	ldr	r3, [pc, #264]	; (800222c <USER_GPIO_Define+0x148>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	4a41      	ldr	r2, [pc, #260]	; (800222c <USER_GPIO_Define+0x148>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOA->CRL + offset);
 800212c:	7abb      	ldrb	r3, [r7, #10]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002134:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e042      	b.n	80021c2 <USER_GPIO_Define+0xde>
  }
  else if( port == 1 )
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10d      	bne.n	800215e <USER_GPIO_Define+0x7a>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPBEN;			// IO port B clock enable
 8002142:	4b3a      	ldr	r3, [pc, #232]	; (800222c <USER_GPIO_Define+0x148>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	4a39      	ldr	r2, [pc, #228]	; (800222c <USER_GPIO_Define+0x148>)
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOB->CRL + offset);
 800214e:	7abb      	ldrb	r3, [r7, #10]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002156:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	e031      	b.n	80021c2 <USER_GPIO_Define+0xde>
  }
  else if ( port == 2 )
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d10d      	bne.n	8002180 <USER_GPIO_Define+0x9c>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPCEN;			// IO port C clock enable
 8002164:	4b31      	ldr	r3, [pc, #196]	; (800222c <USER_GPIO_Define+0x148>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a30      	ldr	r2, [pc, #192]	; (800222c <USER_GPIO_Define+0x148>)
 800216a:	f043 0310 	orr.w	r3, r3, #16
 800216e:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOC->CRL + offset);
 8002170:	7abb      	ldrb	r3, [r7, #10]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002178:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e020      	b.n	80021c2 <USER_GPIO_Define+0xde>
  }
  else if ( port == 3 )
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d10d      	bne.n	80021a2 <USER_GPIO_Define+0xbe>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPDEN;			// IO port D clock enable
 8002186:	4b29      	ldr	r3, [pc, #164]	; (800222c <USER_GPIO_Define+0x148>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	4a28      	ldr	r2, [pc, #160]	; (800222c <USER_GPIO_Define+0x148>)
 800218c:	f043 0320 	orr.w	r3, r3, #32
 8002190:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOD->CRL + offset);
 8002192:	7abb      	ldrb	r3, [r7, #10]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800219a:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e00f      	b.n	80021c2 <USER_GPIO_Define+0xde>
  }
  else if( port == 4 )
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d10c      	bne.n	80021c2 <USER_GPIO_Define+0xde>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPEEN;			// IO port E clock enable
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <USER_GPIO_Define+0x148>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	4a1f      	ldr	r2, [pc, #124]	; (800222c <USER_GPIO_Define+0x148>)
 80021ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b2:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOE->CRL + offset);
 80021b4:	7abb      	ldrb	r3, [r7, #10]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021bc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  if( ( direction == 1 || direction == 2 || direction == 3 ) && ( option == 2 || option == 3 ) )
 80021c2:	797b      	ldrb	r3, [r7, #5]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d005      	beq.n	80021d4 <USER_GPIO_Define+0xf0>
 80021c8:	797b      	ldrb	r3, [r7, #5]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d002      	beq.n	80021d4 <USER_GPIO_Define+0xf0>
 80021ce:	797b      	ldrb	r3, [r7, #5]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d10b      	bne.n	80021ec <USER_GPIO_Define+0x108>
 80021d4:	793b      	ldrb	r3, [r7, #4]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d002      	beq.n	80021e0 <USER_GPIO_Define+0xfc>
 80021da:	793b      	ldrb	r3, [r7, #4]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d105      	bne.n	80021ec <USER_GPIO_Define+0x108>
  {
      RCC->APB2ENR	|=	RCC_APB2ENR_AFIOEN;		// Alternate function I/O clock enable
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <USER_GPIO_Define+0x148>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <USER_GPIO_Define+0x148>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6193      	str	r3, [r2, #24]
  }

  *CR	&=	~( 0xF << (actual_pin * 4) );			// Reset the target pin
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	7afa      	ldrb	r2, [r7, #11]
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	210f      	movs	r1, #15
 80021f6:	fa01 f202 	lsl.w	r2, r1, r2
 80021fa:	43d2      	mvns	r2, r2
 80021fc:	401a      	ands	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	601a      	str	r2, [r3, #0]
  *CR	|=	( direction << (actual_pin * 4) )		// Set up the direction and the option for the pin
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	7979      	ldrb	r1, [r7, #5]
 8002208:	7afa      	ldrb	r2, [r7, #11]
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	4091      	lsls	r1, r2
	|	( option << (actual_pin * 4 + 2) );
 800220e:	7938      	ldrb	r0, [r7, #4]
 8002210:	7afa      	ldrb	r2, [r7, #11]
 8002212:	0092      	lsls	r2, r2, #2
 8002214:	3202      	adds	r2, #2
 8002216:	fa00 f202 	lsl.w	r2, r0, r2
 800221a:	430a      	orrs	r2, r1
  *CR	|=	( direction << (actual_pin * 4) )		// Set up the direction and the option for the pin
 800221c:	431a      	orrs	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bc90      	pop	{r4, r7}
 800222a:	4770      	bx	lr
 800222c:	40021000 	.word	0x40021000

08002230 <USER_GPIO_Read>:

// Read a pin

uint8_t USER_GPIO_Read( uint8_t port, uint8_t pin )
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	460a      	mov	r2, r1
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	4613      	mov	r3, r2
 800223e:	71bb      	strb	r3, [r7, #6]
  volatile uint32_t * IDR;
  int state;

  if( port == 0 )
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <USER_GPIO_Read+0x1c>
  {
      IDR = (volatile uint32_t *) (&GPIOA->IDR);
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <USER_GPIO_Read+0x70>)
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e016      	b.n	800227a <USER_GPIO_Read+0x4a>
  }
  else if( port == 1 )
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <USER_GPIO_Read+0x28>
  {
      IDR = (volatile uint32_t *) (&GPIOB->IDR);
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <USER_GPIO_Read+0x74>)
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	e010      	b.n	800227a <USER_GPIO_Read+0x4a>
  }
  else if( port == 2 )
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d102      	bne.n	8002264 <USER_GPIO_Read+0x34>
  {
      IDR = (volatile uint32_t *) (&GPIOC->IDR);
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <USER_GPIO_Read+0x78>)
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e00a      	b.n	800227a <USER_GPIO_Read+0x4a>
  }
  else if( port == 3 )
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d102      	bne.n	8002270 <USER_GPIO_Read+0x40>
  {
      IDR = (volatile uint32_t *) (&GPIOD->IDR);
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <USER_GPIO_Read+0x7c>)
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	e004      	b.n	800227a <USER_GPIO_Read+0x4a>
  }
  else if( port == 4 )
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	2b04      	cmp	r3, #4
 8002274:	d101      	bne.n	800227a <USER_GPIO_Read+0x4a>
  {
      IDR = (volatile uint32_t *) (&GPIOE->IDR);
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <USER_GPIO_Read+0x80>)
 8002278:	60fb      	str	r3, [r7, #12]
  }

  state = ( ( *IDR & ( 1 << pin ) ) >> pin );
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	79ba      	ldrb	r2, [r7, #6]
 8002280:	2101      	movs	r1, #1
 8002282:	fa01 f202 	lsl.w	r2, r1, r2
 8002286:	401a      	ands	r2, r3
 8002288:	79bb      	ldrb	r3, [r7, #6]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	60bb      	str	r3, [r7, #8]
  return state;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	b2db      	uxtb	r3, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40010808 	.word	0x40010808
 80022a4:	40010c08 	.word	0x40010c08
 80022a8:	40011008 	.word	0x40011008
 80022ac:	40011408 	.word	0x40011408
 80022b0:	40011808 	.word	0x40011808

080022b4 <USER_GPIO_Write>:

// Write a pin

void USER_GPIO_Write(uint8_t port, uint8_t pin, uint8_t state)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
 80022be:	460b      	mov	r3, r1
 80022c0:	71bb      	strb	r3, [r7, #6]
 80022c2:	4613      	mov	r3, r2
 80022c4:	717b      	strb	r3, [r7, #5]
  volatile uint32_t * ODR;

  if( port == 0 ) {
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <USER_GPIO_Write+0x1e>
      ODR = (volatile uint32_t *) (&GPIOA->ODR);
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <USER_GPIO_Write+0x84>)
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e016      	b.n	8002300 <USER_GPIO_Write+0x4c>
  }
  else if( port == 1 )
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d102      	bne.n	80022de <USER_GPIO_Write+0x2a>
  {
      ODR = (volatile uint32_t *) (&GPIOB->ODR);
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <USER_GPIO_Write+0x88>)
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	e010      	b.n	8002300 <USER_GPIO_Write+0x4c>
  }
  else if( port == 2 )
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d102      	bne.n	80022ea <USER_GPIO_Write+0x36>
  {
      ODR = (volatile uint32_t *) (&GPIOC->ODR);
 80022e4:	4b16      	ldr	r3, [pc, #88]	; (8002340 <USER_GPIO_Write+0x8c>)
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e00a      	b.n	8002300 <USER_GPIO_Write+0x4c>
  }
  else if( port == 3 )
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d102      	bne.n	80022f6 <USER_GPIO_Write+0x42>
  {
      ODR = (volatile uint32_t *) (&GPIOD->ODR);
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <USER_GPIO_Write+0x90>)
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e004      	b.n	8002300 <USER_GPIO_Write+0x4c>
  }
  else if( port == 4 )
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d101      	bne.n	8002300 <USER_GPIO_Write+0x4c>
  {
      ODR = (volatile uint32_t *) (&GPIOE->ODR);
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <USER_GPIO_Write+0x94>)
 80022fe:	60fb      	str	r3, [r7, #12]
  }

  state ? ( *ODR |= ( state << pin ) ) : ( *ODR &= ~( 1 << pin ) );
 8002300:	797b      	ldrb	r3, [r7, #5]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <USER_GPIO_Write+0x66>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	7979      	ldrb	r1, [r7, #5]
 800230c:	79ba      	ldrb	r2, [r7, #6]
 800230e:	fa01 f202 	lsl.w	r2, r1, r2
 8002312:	431a      	orrs	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	e009      	b.n	800232e <USER_GPIO_Write+0x7a>
  state ? ( *ODR |= ( state << pin ) ) : ( *ODR &= ~( 1 << pin ) );
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	79ba      	ldrb	r2, [r7, #6]
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	43d2      	mvns	r2, r2
 8002328:	401a      	ands	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	601a      	str	r2, [r3, #0]
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	4001080c 	.word	0x4001080c
 800233c:	40010c0c 	.word	0x40010c0c
 8002340:	4001100c 	.word	0x4001100c
 8002344:	4001140c 	.word	0x4001140c
 8002348:	4001180c 	.word	0x4001180c

0800234c <USER_GPIO_Toggle>:

// Toggle a pin

void USER_GPIO_Toggle(uint8_t port, uint8_t pin)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	460a      	mov	r2, r1
 8002356:	71fb      	strb	r3, [r7, #7]
 8002358:	4613      	mov	r3, r2
 800235a:	71bb      	strb	r3, [r7, #6]
  if( USER_GPIO_Read(port, pin) ) {
 800235c:	79ba      	ldrb	r2, [r7, #6]
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff64 	bl	8002230 <USER_GPIO_Read>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <USER_GPIO_Toggle+0x30>
      USER_GPIO_Write(port, pin, 0);
 800236e:	79b9      	ldrb	r1, [r7, #6]
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	2200      	movs	r2, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff9d 	bl	80022b4 <USER_GPIO_Write>
  }
  else {
      USER_GPIO_Write(port, pin, 1);
  }
}
 800237a:	e005      	b.n	8002388 <USER_GPIO_Toggle+0x3c>
      USER_GPIO_Write(port, pin, 1);
 800237c:	79b9      	ldrb	r1, [r7, #6]
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	2201      	movs	r2, #1
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff96 	bl	80022b4 <USER_GPIO_Write>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <USER_LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

// Function that initializes the LCD to 4 bits

void USER_LCD_Init(void){
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0

	// RCC_APB2ENR modified to IO port C clock enable

	RCC->APB2ENR	|=	RCC_APB2ENR_IOPCEN;	// To set IOPCEN bit
 8002396:	4b66      	ldr	r3, [pc, #408]	; (8002530 <USER_LCD_Init+0x1a0>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	4a65      	ldr	r2, [pc, #404]	; (8002530 <USER_LCD_Init+0x1a0>)
 800239c:	f043 0310 	orr.w	r3, r3, #16
 80023a0:	6193      	str	r3, [r2, #24]

	int8_t const *p;

	// Configuration of all pins to the LCD as general-purpose output push-pull, 10 MHz speed

	GPIOC->CRL	&=	~( 0x3UL << 30U ) & ~( 0x2UL << 28U )
 80023a2:	4b64      	ldr	r3, [pc, #400]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a63      	ldr	r2, [pc, #396]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023a8:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80023ac:	6013      	str	r3, [r2, #0]
			& 	~( 0x3UL << 26U ) & ~( 0x2UL << 24U );
	GPIOC->CRL 	|= 	 ( 0x1UL << 28U )
 80023ae:	4b61      	ldr	r3, [pc, #388]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a60      	ldr	r2, [pc, #384]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023b4:	f043 5388 	orr.w	r3, r3, #285212672	; 0x11000000
 80023b8:	6013      	str	r3, [r2, #0]
			|  	 ( 0x1UL << 24U );
	GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U )
 80023ba:	4b5e      	ldr	r3, [pc, #376]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	495d      	ldr	r1, [pc, #372]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023c0:	4b5d      	ldr	r3, [pc, #372]	; (8002538 <USER_LCD_Init+0x1a8>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
			& 	~( 0x3UL << 14U ) & ~( 0x2UL << 12U )
			&	~( 0x3UL << 10U ) & ~( 0x2UL <<  8U )
			& 	~( 0x3UL <<  6U ) & ~( 0x2UL <<  4U )
			& 	~( 0x3UL <<  2U ) & ~( 0x2UL <<  0U );
	GPIOC->CRH	|= 	 ( 0x1UL << 16U )
 80023c6:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	495a      	ldr	r1, [pc, #360]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023cc:	4b5b      	ldr	r3, [pc, #364]	; (800253c <USER_LCD_Init+0x1ac>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
			|  	 ( 0x1UL << 12U )
			| 	 ( 0x1UL <<  8U )
			|  	 ( 0x1UL <<  4U )
			|  	 ( 0x1UL <<  0U );

	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 80023d2:	4b58      	ldr	r3, [pc, #352]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023d8:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_LOW;
 80023da:	4b56      	ldr	r3, [pc, #344]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023dc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023e0:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_LOW;
 80023e2:	4b54      	ldr	r3, [pc, #336]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023e8:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 80023ea:	4b52      	ldr	r3, [pc, #328]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f0:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_LOW;
 80023f2:	4b50      	ldr	r3, [pc, #320]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023f8:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80023fa:	4b4e      	ldr	r3, [pc, #312]	; (8002534 <USER_LCD_Init+0x1a4>)
 80023fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002400:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8002402:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <USER_LCD_Init+0x1a4>)
 8002404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002408:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_50MS, TIM_CNT_50MS );		//	50 ms
 800240a:	22e6      	movs	r2, #230	; 0xe6
 800240c:	2130      	movs	r1, #48	; 0x30
 800240e:	2000      	movs	r0, #0
 8002410:	f000 fb9a 	bl	8002b48 <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 8002414:	4b47      	ldr	r3, [pc, #284]	; (8002534 <USER_LCD_Init+0x1a4>)
 8002416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800241a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 800241c:	4b45      	ldr	r3, [pc, #276]	; (8002534 <USER_LCD_Init+0x1a4>)
 800241e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002422:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002424:	4b43      	ldr	r3, [pc, #268]	; (8002534 <USER_LCD_Init+0x1a4>)
 8002426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800242a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 800242c:	4b41      	ldr	r3, [pc, #260]	; (8002534 <USER_LCD_Init+0x1a4>)
 800242e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002432:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002434:	f000 f9a6 	bl	8002784 <LCD_Pulse_EN>

	USER_TIM_Delay( TIM_2, TIM_PSC_5MS, TIM_CNT_5MS );		//	5 ms
 8002438:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800243c:	2104      	movs	r1, #4
 800243e:	2000      	movs	r0, #0
 8002440:	f000 fb82 	bl	8002b48 <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 8002444:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <USER_LCD_Init+0x1a4>)
 8002446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800244a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 800244c:	4b39      	ldr	r3, [pc, #228]	; (8002534 <USER_LCD_Init+0x1a4>)
 800244e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002452:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002454:	4b37      	ldr	r3, [pc, #220]	; (8002534 <USER_LCD_Init+0x1a4>)
 8002456:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800245a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 800245c:	4b35      	ldr	r3, [pc, #212]	; (8002534 <USER_LCD_Init+0x1a4>)
 800245e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002462:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002464:	f000 f98e 	bl	8002784 <LCD_Pulse_EN>

	USER_TIM_Delay( TIM_2, TIM_PSC_100US, TIM_CNT_100US );		//	100 us
 8002468:	f44f 4267 	mov.w	r2, #59136	; 0xe700
 800246c:	2100      	movs	r1, #0
 800246e:	2000      	movs	r0, #0
 8002470:	f000 fb6a 	bl	8002b48 <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 8002474:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <USER_LCD_Init+0x1a4>)
 8002476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 800247c:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <USER_LCD_Init+0x1a4>)
 800247e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002482:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <USER_LCD_Init+0x1a4>)
 8002486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800248a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <USER_LCD_Init+0x1a4>)
 800248e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002492:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002494:	f000 f976 	bl	8002784 <LCD_Pulse_EN>
	while( LCD_Busy( ) );					//	Checking the busy flag
 8002498:	bf00      	nop
 800249a:	f000 f91f 	bl	80026dc <LCD_Busy>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1fa      	bne.n	800249a <USER_LCD_Init+0x10a>

	/* Initial 'Function Set' to change 4-bit mode	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 80024a4:	4b23      	ldr	r3, [pc, #140]	; (8002534 <USER_LCD_Init+0x1a4>)
 80024a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024aa:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <USER_LCD_Init+0x1a4>)
 80024ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b2:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <USER_LCD_Init+0x1a4>)
 80024b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024ba:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <USER_LCD_Init+0x1a4>)
 80024be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024c2:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 80024c4:	f000 f95e 	bl	8002784 <LCD_Pulse_EN>
	while( LCD_Busy( ) );					//	Checking the busy flag
 80024c8:	bf00      	nop
 80024ca:	f000 f907 	bl	80026dc <LCD_Busy>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1fa      	bne.n	80024ca <USER_LCD_Init+0x13a>

	/* 'Function Set' (I=1, N and F as required)	*/

	LCD_Write_Cmd( 0x28U );					//	2-line display, 5x7 dot
 80024d4:	2028      	movs	r0, #40	; 0x28
 80024d6:	f000 f89b 	bl	8002610 <LCD_Write_Cmd>

	/* 'Display ON/OFF Control' (D=0, C=0, B=0)	*/

	LCD_Write_Cmd( 0x08U );					//	Display, cursor and blinking off
 80024da:	2008      	movs	r0, #8
 80024dc:	f000 f898 	bl	8002610 <LCD_Write_Cmd>

	/* 'Clear Display' */

	LCD_Write_Cmd( 0x01U );//
 80024e0:	2001      	movs	r0, #1
 80024e2:	f000 f895 	bl	8002610 <LCD_Write_Cmd>

	/* 'Entry Mode Set' (I/D and S as required)	*/

	LCD_Write_Cmd( 0x06U );					//	Cursor increment by 1, shift off
 80024e6:	2006      	movs	r0, #6
 80024e8:	f000 f892 	bl	8002610 <LCD_Write_Cmd>

	/* Initialization Ends	*/

	LCD_Write_Cmd( 0x0FU );					//	Display, cursor and blinking on
 80024ec:	200f      	movs	r0, #15
 80024ee:	f000 f88f 	bl	8002610 <LCD_Write_Cmd>

	//	Load the character defined by the user into the CGRAM

	LCD_Write_Cmd( 0x40 );					//	Set the CGRAM address to 0
 80024f2:	2040      	movs	r0, #64	; 0x40
 80024f4:	f000 f88c 	bl	8002610 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <USER_LCD_Init+0x1b0>)
 80024fa:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 80024fc:	2300      	movs	r3, #0
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	e00c      	b.n	800251c <USER_LCD_Init+0x18c>
		LCD_Put_Char( *p );
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f993 3000 	ldrsb.w	r3, [r3]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f894 	bl	8002638 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	3301      	adds	r3, #1
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3301      	adds	r3, #1
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b3f      	cmp	r3, #63	; 0x3f
 8002520:	d9ef      	bls.n	8002502 <USER_LCD_Init+0x172>

	/*	Set DDRAM address in address	*/

	LCD_Write_Cmd( 0x80 );//
 8002522:	2080      	movs	r0, #128	; 0x80
 8002524:	f000 f874 	bl	8002610 <LCD_Write_Cmd>
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	40011000 	.word	0x40011000
 8002538:	fff11111 	.word	0xfff11111
 800253c:	00011111 	.word	0x00011111
 8002540:	0800d2b0 	.word	0x0800d2b0

08002544 <LCD_Out_Data4>:

// Function that generates a strobe on the LCD

void LCD_Out_Data4(uint8_t val)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )				//	Bit[0]
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <LCD_Out_Data4+0x1e>
		GPIOC->BSRR	=	LCD_D4_PIN_HIGH;
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <LCD_Out_Data4+0x84>)
 800255a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800255e:	611a      	str	r2, [r3, #16]
 8002560:	e003      	b.n	800256a <LCD_Out_Data4+0x26>
	else
		GPIOC->BSRR	=	LCD_D4_PIN_LOW;
 8002562:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <LCD_Out_Data4+0x84>)
 8002564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002568:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )				//	Bit[1]
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <LCD_Out_Data4+0x3a>
		GPIOC->BSRR	=	LCD_D5_PIN_HIGH;
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <LCD_Out_Data4+0x84>)
 8002576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800257a:	611a      	str	r2, [r3, #16]
 800257c:	e003      	b.n	8002586 <LCD_Out_Data4+0x42>
	else
		GPIOC->BSRR	=	LCD_D5_PIN_LOW;
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <LCD_Out_Data4+0x84>)
 8002580:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002584:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )				//	Bit[2]
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <LCD_Out_Data4+0x56>
		GPIOC->BSRR	=	LCD_D6_PIN_HIGH;
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <LCD_Out_Data4+0x84>)
 8002592:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002596:	611a      	str	r2, [r3, #16]
 8002598:	e003      	b.n	80025a2 <LCD_Out_Data4+0x5e>
	else
		GPIOC->BSRR	=	LCD_D6_PIN_LOW;
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <LCD_Out_Data4+0x84>)
 800259c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025a0:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )				//	Bit[3]
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <LCD_Out_Data4+0x72>
		GPIOC->BSRR	=	LCD_D7_PIN_HIGH;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <LCD_Out_Data4+0x84>)
 80025ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b2:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
}
 80025b4:	e003      	b.n	80025be <LCD_Out_Data4+0x7a>
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <LCD_Out_Data4+0x84>)
 80025b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025bc:	611a      	str	r2, [r3, #16]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40011000 	.word	0x40011000

080025cc <LCD_Write_Byte>:

// Function that writes 1 byte of data to the LCD

void LCD_Write_Byte(uint8_t val)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ffb1 	bl	8002544 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 80025e2:	f000 f8cf 	bl	8002784 <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ffa8 	bl	8002544 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 80025f4:	f000 f8c6 	bl	8002784 <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 80025f8:	bf00      	nop
 80025fa:	f000 f86f 	bl	80026dc <LCD_Busy>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1fa      	bne.n	80025fa <LCD_Write_Byte+0x2e>
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <LCD_Write_Cmd>:

// Function that writes a command to the LCD

void LCD_Write_Cmd( uint8_t val )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_LOW;			//	RS=0 (character selection)
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <LCD_Write_Cmd+0x24>)
 800261c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002620:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ffd1 	bl	80025cc <LCD_Write_Byte>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40011000 	.word	0x40011000

08002638 <LCD_Put_Char>:

// Write an ASCII character to the LCD

void LCD_Put_Char( uint8_t c )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_HIGH;		//	RS=1 (character selection)
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <LCD_Put_Char+0x20>)
 8002644:	2240      	movs	r2, #64	; 0x40
 8002646:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ffbe 	bl	80025cc <LCD_Write_Byte>
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40011000 	.word	0x40011000

0800265c <LCD_Set_Cursor>:

// Function that sets the cursor to a position on the LCD screen
// Minimum values for line and column must be 1

void LCD_Set_Cursor( uint8_t line, uint8_t column )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	460a      	mov	r2, r1
 8002666:	71fb      	strb	r3, [r7, #7]
 8002668:	4613      	mov	r3, r2
 800266a:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	column--;
 800266c:	79bb      	ldrb	r3, [r7, #6]
 800266e:	3b01      	subs	r3, #1
 8002670:	71bb      	strb	r3, [r7, #6]
	line--;
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	3b01      	subs	r3, #1
 8002676:	71fb      	strb	r3, [r7, #7]
	address = ( line * 0x40U ) + column;
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	019b      	lsls	r3, r3, #6
 800267c:	b2da      	uxtb	r2, r3
 800267e:	79bb      	ldrb	r3, [r7, #6]
 8002680:	4413      	add	r3, r2
 8002682:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800268a:	b2db      	uxtb	r3, r3
 800268c:	3b80      	subs	r3, #128	; 0x80
 800268e:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ffbc 	bl	8002610 <LCD_Write_Cmd>
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <LCD_Put_Str>:

// Function that sends a string of ASCII characters to the LCD

void LCD_Put_Str( char * str )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	for( int16_t i = 0; i < 16; i++ )
 80026a8:	2300      	movs	r3, #0
 80026aa:	81fb      	strh	r3, [r7, #14]
 80026ac:	e00d      	b.n	80026ca <LCD_Put_Str+0x2a>
		LCD_Put_Char( str[ i ] );			//	Send 1 byte to the LCD
 80026ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ffbd 	bl	8002638 <LCD_Put_Char>
	for( int16_t i = 0; i < 16; i++ )
 80026be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	81fb      	strh	r3, [r7, #14]
 80026ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026ce:	2b0f      	cmp	r3, #15
 80026d0:	dded      	ble.n	80026ae <LCD_Put_Str+0xe>
}
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <LCD_Busy>:
}

// Function that causes delays on the LCD

char LCD_Busy( void )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	// Configuration of D7 as input floating

	GPIOC->CRH	&=	~( 0x2UL << 18U ) & ~( 0x3UL << 16U );
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <LCD_Busy+0xa4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a26      	ldr	r2, [pc, #152]	; (8002780 <LCD_Busy+0xa4>)
 80026e6:	f423 2330 	bic.w	r3, r3, #720896	; 0xb0000
 80026ea:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=   	 ( 0x1UL << 18U );
 80026ec:	4b24      	ldr	r3, [pc, #144]	; (8002780 <LCD_Busy+0xa4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a23      	ldr	r2, [pc, #140]	; (8002780 <LCD_Busy+0xa4>)
 80026f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f6:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 80026f8:	4b21      	ldr	r3, [pc, #132]	; (8002780 <LCD_Busy+0xa4>)
 80026fa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80026fe:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_HIGH;
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <LCD_Busy+0xa4>)
 8002702:	2280      	movs	r2, #128	; 0x80
 8002704:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_HIGH;
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <LCD_Busy+0xa4>)
 8002708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800270c:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_100US, TIM_CNT_100US );	//	100 us
 800270e:	f44f 4267 	mov.w	r2, #59136	; 0xe700
 8002712:	2100      	movs	r1, #0
 8002714:	2000      	movs	r0, #0
 8002716:	f000 fa17 	bl	8002b48 <USER_TIM_Delay>

	if(( GPIOC->IDR	& LCD_D7_PIN_HIGH )) 			//	If D7 is set, then
 800271a:	4b19      	ldr	r3, [pc, #100]	; (8002780 <LCD_Busy+0xa4>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d015      	beq.n	8002752 <LCD_Busy+0x76>
	{
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <LCD_Busy+0xa4>)
 8002728:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800272c:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 800272e:	4b14      	ldr	r3, [pc, #80]	; (8002780 <LCD_Busy+0xa4>)
 8002730:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002734:	611a      	str	r2, [r3, #16]

	// Configuration of D7 as output push-pull, 10 MHz speed

		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <LCD_Busy+0xa4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a11      	ldr	r2, [pc, #68]	; (8002780 <LCD_Busy+0xa4>)
 800273c:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8002740:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <LCD_Busy+0xa4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <LCD_Busy+0xa4>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6053      	str	r3, [r2, #4]

		return 1;
 800274e:	2301      	movs	r3, #1
 8002750:	e014      	b.n	800277c <LCD_Busy+0xa0>
	}
	else
	{
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <LCD_Busy+0xa4>)
 8002754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002758:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <LCD_Busy+0xa4>)
 800275c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002760:	611a      	str	r2, [r3, #16]

	// Configuration of D7 as output push-pull, 10 MHz speed

		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 8002762:	4b07      	ldr	r3, [pc, #28]	; (8002780 <LCD_Busy+0xa4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4a06      	ldr	r2, [pc, #24]	; (8002780 <LCD_Busy+0xa4>)
 8002768:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800276c:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <LCD_Busy+0xa4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4a03      	ldr	r2, [pc, #12]	; (8002780 <LCD_Busy+0xa4>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002778:	6053      	str	r3, [r2, #4]

		return 0;
 800277a:	2300      	movs	r3, #0
	}
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40011000 	.word	0x40011000

08002784 <LCD_Pulse_EN>:

// Function that generates a pulse on the EN pin of the LCD

void LCD_Pulse_EN( void )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	LCD_EN_PIN_LOW;
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <LCD_Pulse_EN+0x44>)
 800278a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800278e:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_10US, TIM_CNT_10US );	//	10 us
 8002790:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8002794:	2100      	movs	r1, #0
 8002796:	2000      	movs	r0, #0
 8002798:	f000 f9d6 	bl	8002b48 <USER_TIM_Delay>

	GPIOC->BSRR	=	LCD_EN_PIN_HIGH;		//	Enable pin EN ON
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <LCD_Pulse_EN+0x44>)
 800279e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a2:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_10US, TIM_CNT_10US );	//	10 us
 80027a4:	f64f 5280 	movw	r2, #64896	; 0xfd80
 80027a8:	2100      	movs	r1, #0
 80027aa:	2000      	movs	r0, #0
 80027ac:	f000 f9cc 	bl	8002b48 <USER_TIM_Delay>

	GPIOC->BSRR	=	LCD_EN_PIN_LOW;			//	Enable pin EN OFF
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <LCD_Pulse_EN+0x44>)
 80027b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027b6:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_1MS, TIM_CNT_1MS );	//	1 ms
 80027b8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80027bc:	2100      	movs	r1, #0
 80027be:	2000      	movs	r0, #0
 80027c0:	f000 f9c2 	bl	8002b48 <USER_TIM_Delay>
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40011000 	.word	0x40011000

080027cc <USER_LEDS_Init>:
#include "main.h"
#include "GPIO.h"
#include "TIMER.h"

void USER_LEDS_Init( void )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  // Pin PC2 as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTC, 2, OUT_50, OUT_GP_PP );
 80027d0:	2300      	movs	r3, #0
 80027d2:	2203      	movs	r2, #3
 80027d4:	2102      	movs	r1, #2
 80027d6:	2002      	movs	r0, #2
 80027d8:	f7ff fc84 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTC, 2, 0 );
 80027dc:	2200      	movs	r2, #0
 80027de:	2102      	movs	r1, #2
 80027e0:	2002      	movs	r0, #2
 80027e2:	f7ff fd67 	bl	80022b4 <USER_GPIO_Write>

  // Pin PC3 as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTC, 3, OUT_50, OUT_GP_PP );
 80027e6:	2300      	movs	r3, #0
 80027e8:	2203      	movs	r2, #3
 80027ea:	2103      	movs	r1, #3
 80027ec:	2002      	movs	r0, #2
 80027ee:	f7ff fc79 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTC, 3, 0 );
 80027f2:	2200      	movs	r2, #0
 80027f4:	2103      	movs	r1, #3
 80027f6:	2002      	movs	r0, #2
 80027f8:	f7ff fd5c 	bl	80022b4 <USER_GPIO_Write>

  USER_TIM_Init( TIM_3 );
 80027fc:	2001      	movs	r0, #1
 80027fe:	f000 f8df 	bl	80029c0 <USER_TIM_Init>
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}

08002806 <USER_MATRIX_KEYPAD_Init>:
};

// Initialize matrix keypad

void USER_MATRIX_KEYPAD_Init( void )
{
 8002806:	b580      	push	{r7, lr}
 8002808:	af00      	add	r7, sp, #0
  // Pin PC5 (Row 1) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTC, 5, OUT_50, OUT_GP_PP );
 800280a:	2300      	movs	r3, #0
 800280c:	2203      	movs	r2, #3
 800280e:	2105      	movs	r1, #5
 8002810:	2002      	movs	r0, #2
 8002812:	f7ff fc67 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTC, 5, 1 );
 8002816:	2201      	movs	r2, #1
 8002818:	2105      	movs	r1, #5
 800281a:	2002      	movs	r0, #2
 800281c:	f7ff fd4a 	bl	80022b4 <USER_GPIO_Write>

  // Pin PA12 (Row 2) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTA, 12, OUT_50, OUT_GP_PP );
 8002820:	2300      	movs	r3, #0
 8002822:	2203      	movs	r2, #3
 8002824:	210c      	movs	r1, #12
 8002826:	2000      	movs	r0, #0
 8002828:	f7ff fc5c 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTA, 12, 1 );
 800282c:	2201      	movs	r2, #1
 800282e:	210c      	movs	r1, #12
 8002830:	2000      	movs	r0, #0
 8002832:	f7ff fd3f 	bl	80022b4 <USER_GPIO_Write>

  // Pin PA11 (Row 3) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTA, 11, OUT_50, OUT_GP_PP );
 8002836:	2300      	movs	r3, #0
 8002838:	2203      	movs	r2, #3
 800283a:	210b      	movs	r1, #11
 800283c:	2000      	movs	r0, #0
 800283e:	f7ff fc51 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTA, 11, 1 );
 8002842:	2201      	movs	r2, #1
 8002844:	210b      	movs	r1, #11
 8002846:	2000      	movs	r0, #0
 8002848:	f7ff fd34 	bl	80022b4 <USER_GPIO_Write>

  // Pin PB12 (Row 4) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTB, 12, OUT_50, OUT_GP_PP );
 800284c:	2300      	movs	r3, #0
 800284e:	2203      	movs	r2, #3
 8002850:	210c      	movs	r1, #12
 8002852:	2001      	movs	r0, #1
 8002854:	f7ff fc46 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 12, 1 );
 8002858:	2201      	movs	r2, #1
 800285a:	210c      	movs	r1, #12
 800285c:	2001      	movs	r0, #1
 800285e:	f7ff fd29 	bl	80022b4 <USER_GPIO_Write>

  // Pin PB1 (Col 1) as input pull up

  USER_GPIO_Define( PORTB, 1, INP, INP_PP );
 8002862:	2302      	movs	r3, #2
 8002864:	2200      	movs	r2, #0
 8002866:	2101      	movs	r1, #1
 8002868:	2001      	movs	r0, #1
 800286a:	f7ff fc3b 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 1, 1 );
 800286e:	2201      	movs	r2, #1
 8002870:	2101      	movs	r1, #1
 8002872:	2001      	movs	r0, #1
 8002874:	f7ff fd1e 	bl	80022b4 <USER_GPIO_Write>

  // Pin PB15 (Col 2) as input pull up

  USER_GPIO_Define( PORTB, 15, INP, INP_PP );
 8002878:	2302      	movs	r3, #2
 800287a:	2200      	movs	r2, #0
 800287c:	210f      	movs	r1, #15
 800287e:	2001      	movs	r0, #1
 8002880:	f7ff fc30 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 15, 1 );
 8002884:	2201      	movs	r2, #1
 8002886:	210f      	movs	r1, #15
 8002888:	2001      	movs	r0, #1
 800288a:	f7ff fd13 	bl	80022b4 <USER_GPIO_Write>

  // Pin PB14 (Col 3) as input pull up

  USER_GPIO_Define( PORTB, 14, INP, INP_PP );
 800288e:	2302      	movs	r3, #2
 8002890:	2200      	movs	r2, #0
 8002892:	210e      	movs	r1, #14
 8002894:	2001      	movs	r0, #1
 8002896:	f7ff fc25 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 14, 1 );
 800289a:	2201      	movs	r2, #1
 800289c:	210e      	movs	r1, #14
 800289e:	2001      	movs	r0, #1
 80028a0:	f7ff fd08 	bl	80022b4 <USER_GPIO_Write>

  // Pin PB13 (Col 4) as input pull up

  USER_GPIO_Define( PORTB, 13, INP, INP_PP );
 80028a4:	2302      	movs	r3, #2
 80028a6:	2200      	movs	r2, #0
 80028a8:	210d      	movs	r1, #13
 80028aa:	2001      	movs	r0, #1
 80028ac:	f7ff fc1a 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 13, 1 );
 80028b0:	2201      	movs	r2, #1
 80028b2:	210d      	movs	r1, #13
 80028b4:	2001      	movs	r0, #1
 80028b6:	f7ff fcfd 	bl	80022b4 <USER_GPIO_Write>
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <USER_MATRIX_KEYPAD_Read>:

// Read matrix keypad

char USER_MATRIX_KEYPAD_Read( void )
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
  char selectedKey = 'N';				// Default character
 80028c6:	234e      	movs	r3, #78	; 0x4e
 80028c8:	71fb      	strb	r3, [r7, #7]

  for (uint8_t i = 0; i < NUMBER_OF_ELEMENTS; i++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	71bb      	strb	r3, [r7, #6]
 80028ce:	e061      	b.n	8002994 <USER_MATRIX_KEYPAD_Read+0xd4>
  {
    if( i == 0 )
 80028d0:	79bb      	ldrb	r3, [r7, #6]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d108      	bne.n	80028e8 <USER_MATRIX_KEYPAD_Read+0x28>
    {
       GPIOC->BSRR = (1 << (R_POSITIONS[i] + 16));
 80028d6:	79bb      	ldrb	r3, [r7, #6]
 80028d8:	4a33      	ldr	r2, [pc, #204]	; (80029a8 <USER_MATRIX_KEYPAD_Read+0xe8>)
 80028da:	5cd3      	ldrb	r3, [r2, r3]
 80028dc:	3310      	adds	r3, #16
 80028de:	2201      	movs	r2, #1
 80028e0:	409a      	lsls	r2, r3
 80028e2:	4b32      	ldr	r3, [pc, #200]	; (80029ac <USER_MATRIX_KEYPAD_Read+0xec>)
 80028e4:	611a      	str	r2, [r3, #16]
 80028e6:	e013      	b.n	8002910 <USER_MATRIX_KEYPAD_Read+0x50>
    }
    else if( i == 3 )
 80028e8:	79bb      	ldrb	r3, [r7, #6]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d108      	bne.n	8002900 <USER_MATRIX_KEYPAD_Read+0x40>
    {
       GPIOB->BSRR = (1 << (R_POSITIONS[i] + 16));
 80028ee:	79bb      	ldrb	r3, [r7, #6]
 80028f0:	4a2d      	ldr	r2, [pc, #180]	; (80029a8 <USER_MATRIX_KEYPAD_Read+0xe8>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	3310      	adds	r3, #16
 80028f6:	2201      	movs	r2, #1
 80028f8:	409a      	lsls	r2, r3
 80028fa:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <USER_MATRIX_KEYPAD_Read+0xf0>)
 80028fc:	611a      	str	r2, [r3, #16]
 80028fe:	e007      	b.n	8002910 <USER_MATRIX_KEYPAD_Read+0x50>
    }
    else
    {
       GPIOA->BSRR = (1 << (R_POSITIONS[i] + 16));
 8002900:	79bb      	ldrb	r3, [r7, #6]
 8002902:	4a29      	ldr	r2, [pc, #164]	; (80029a8 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	3310      	adds	r3, #16
 8002908:	2201      	movs	r2, #1
 800290a:	409a      	lsls	r2, r3
 800290c:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <USER_MATRIX_KEYPAD_Read+0xf4>)
 800290e:	611a      	str	r2, [r3, #16]
    }

    for (uint8_t j = 0; j < NUMBER_OF_ELEMENTS; j++)
 8002910:	2300      	movs	r3, #0
 8002912:	717b      	strb	r3, [r7, #5]
 8002914:	e015      	b.n	8002942 <USER_MATRIX_KEYPAD_Read+0x82>
    {
      if ( !( GPIOB->IDR & (1 << C_POSITIONS[j]) ) )
 8002916:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <USER_MATRIX_KEYPAD_Read+0xf0>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	797a      	ldrb	r2, [r7, #5]
 800291c:	4926      	ldr	r1, [pc, #152]	; (80029b8 <USER_MATRIX_KEYPAD_Read+0xf8>)
 800291e:	5c8a      	ldrb	r2, [r1, r2]
 8002920:	4611      	mov	r1, r2
 8002922:	2201      	movs	r2, #1
 8002924:	408a      	lsls	r2, r1
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d107      	bne.n	800293c <USER_MATRIX_KEYPAD_Read+0x7c>
      {
	  selectedKey = keys[i][j];
 800292c:	79ba      	ldrb	r2, [r7, #6]
 800292e:	797b      	ldrb	r3, [r7, #5]
 8002930:	4922      	ldr	r1, [pc, #136]	; (80029bc <USER_MATRIX_KEYPAD_Read+0xfc>)
 8002932:	0092      	lsls	r2, r2, #2
 8002934:	440a      	add	r2, r1
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < NUMBER_OF_ELEMENTS; j++)
 800293c:	797b      	ldrb	r3, [r7, #5]
 800293e:	3301      	adds	r3, #1
 8002940:	717b      	strb	r3, [r7, #5]
 8002942:	797b      	ldrb	r3, [r7, #5]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d9e6      	bls.n	8002916 <USER_MATRIX_KEYPAD_Read+0x56>
      }
    }

    if( i == 0 )
 8002948:	79bb      	ldrb	r3, [r7, #6]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <USER_MATRIX_KEYPAD_Read+0xa2>
    {
      GPIOC->BSRR = (1 << R_POSITIONS[i]);
 800294e:	79bb      	ldrb	r3, [r7, #6]
 8002950:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002952:	5cd3      	ldrb	r3, [r2, r3]
 8002954:	461a      	mov	r2, r3
 8002956:	2301      	movs	r3, #1
 8002958:	fa03 f202 	lsl.w	r2, r3, r2
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <USER_MATRIX_KEYPAD_Read+0xec>)
 800295e:	611a      	str	r2, [r3, #16]
 8002960:	e015      	b.n	800298e <USER_MATRIX_KEYPAD_Read+0xce>
    }
    else if( i == 3 )
 8002962:	79bb      	ldrb	r3, [r7, #6]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d109      	bne.n	800297c <USER_MATRIX_KEYPAD_Read+0xbc>
    {
      GPIOB->BSRR = (1 << R_POSITIONS[i]);
 8002968:	79bb      	ldrb	r3, [r7, #6]
 800296a:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <USER_MATRIX_KEYPAD_Read+0xe8>)
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	461a      	mov	r2, r3
 8002970:	2301      	movs	r3, #1
 8002972:	fa03 f202 	lsl.w	r2, r3, r2
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <USER_MATRIX_KEYPAD_Read+0xf0>)
 8002978:	611a      	str	r2, [r3, #16]
 800297a:	e008      	b.n	800298e <USER_MATRIX_KEYPAD_Read+0xce>
    }
    else
    {
      GPIOA->BSRR = (1 << R_POSITIONS[i]);
 800297c:	79bb      	ldrb	r3, [r7, #6]
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002980:	5cd3      	ldrb	r3, [r2, r3]
 8002982:	461a      	mov	r2, r3
 8002984:	2301      	movs	r3, #1
 8002986:	fa03 f202 	lsl.w	r2, r3, r2
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <USER_MATRIX_KEYPAD_Read+0xf4>)
 800298c:	611a      	str	r2, [r3, #16]
  for (uint8_t i = 0; i < NUMBER_OF_ELEMENTS; i++)
 800298e:	79bb      	ldrb	r3, [r7, #6]
 8002990:	3301      	adds	r3, #1
 8002992:	71bb      	strb	r3, [r7, #6]
 8002994:	79bb      	ldrb	r3, [r7, #6]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d99a      	bls.n	80028d0 <USER_MATRIX_KEYPAD_Read+0x10>
    }
  }

  return selectedKey;
 800299a:	79fb      	ldrb	r3, [r7, #7]
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000000 	.word	0x20000000
 80029ac:	40011000 	.word	0x40011000
 80029b0:	40010c00 	.word	0x40010c00
 80029b4:	40010800 	.word	0x40010800
 80029b8:	20000004 	.word	0x20000004
 80029bc:	20000008 	.word	0x20000008

080029c0 <USER_TIM_Init>:
#include "GPIO.h"

// Initialize TIM timer

void USER_TIM_Init( uint8_t TIM )
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  if( TIM == 0 )
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d12e      	bne.n	8002a2e <USER_TIM_Init+0x6e>
  {
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM2EN;	// Clock enable for TIM2
 80029d0:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <USER_TIM_Init+0x178>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	4a58      	ldr	r2, [pc, #352]	; (8002b38 <USER_TIM_Init+0x178>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	61d3      	str	r3, [r2, #28]

    TIM2->SMCR		&=	~(TIM_SMCR_SMS);	// Step 1 - Enable internal clock source
 80029dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029e6:	f023 0307 	bic.w	r3, r3, #7
 80029ea:	6093      	str	r3, [r2, #8]
    TIM2->CR1		&=	~(TIM_CR1_UDIS);	// Step 2 - UEV enabled
 80029ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029f6:	f023 0302 	bic.w	r3, r3, #2
 80029fa:	6013      	str	r3, [r2, #0]
    TIM2->CR1		&=	~(TIM_CR1_DIR);		// 	Counter as upcounter
 80029fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a06:	f023 0310 	bic.w	r3, r3, #16
 8002a0a:	6013      	str	r3, [r2, #0]
    TIM2->CR1		&=	~(TIM_CR1_CMS);		//	Edge-aligned mode
 8002a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a16:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002a1a:	6013      	str	r3, [r2, #0]
    TIM2->SR		&=	~(TIM_SR_UIF);		// Step 3 - Clear Update Interrupt Flag
 8002a1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6113      	str	r3, [r2, #16]
    TIM4->CCMR1		|=	TIM_CCMR1_OC1M_2;
    TIM4->CCMR1		|=	TIM_CCMR1_OC1M_1;

    TIM4->CR1		|=	TIM_CR1_CEN;			// Enable the Timer to start counting
  }
}
 8002a2c:	e07e      	b.n	8002b2c <USER_TIM_Init+0x16c>
  else if( TIM == 1 )
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d130      	bne.n	8002a96 <USER_TIM_Init+0xd6>
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM3EN;	// Clock enable for TIM3
 8002a34:	4b40      	ldr	r3, [pc, #256]	; (8002b38 <USER_TIM_Init+0x178>)
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	4a3f      	ldr	r2, [pc, #252]	; (8002b38 <USER_TIM_Init+0x178>)
 8002a3a:	f043 0302 	orr.w	r3, r3, #2
 8002a3e:	61d3      	str	r3, [r2, #28]
    TIM3->SMCR		&=	~(TIM_SMCR_SMS);
 8002a40:	4b3e      	ldr	r3, [pc, #248]	; (8002b3c <USER_TIM_Init+0x17c>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4a3d      	ldr	r2, [pc, #244]	; (8002b3c <USER_TIM_Init+0x17c>)
 8002a46:	f023 0307 	bic.w	r3, r3, #7
 8002a4a:	6093      	str	r3, [r2, #8]
    TIM3->CR1		&=	~(TIM_CR1_UDIS);
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <USER_TIM_Init+0x17c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a3a      	ldr	r2, [pc, #232]	; (8002b3c <USER_TIM_Init+0x17c>)
 8002a52:	f023 0302 	bic.w	r3, r3, #2
 8002a56:	6013      	str	r3, [r2, #0]
    TIM3->CR1		&=	~(TIM_CR1_DIR);
 8002a58:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <USER_TIM_Init+0x17c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a37      	ldr	r2, [pc, #220]	; (8002b3c <USER_TIM_Init+0x17c>)
 8002a5e:	f023 0310 	bic.w	r3, r3, #16
 8002a62:	6013      	str	r3, [r2, #0]
    TIM3->CR1		&=	~(TIM_CR1_CMS);
 8002a64:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <USER_TIM_Init+0x17c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a34      	ldr	r2, [pc, #208]	; (8002b3c <USER_TIM_Init+0x17c>)
 8002a6a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002a6e:	6013      	str	r3, [r2, #0]
    TIM3->SR		&=	~(TIM_SR_UIF);
 8002a70:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <USER_TIM_Init+0x17c>)
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	4a31      	ldr	r2, [pc, #196]	; (8002b3c <USER_TIM_Init+0x17c>)
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	6113      	str	r3, [r2, #16]
    TIM3->DIER 		|=	TIM_DIER_UIE;		// Step 4 - Enable Update Interrupt
 8002a7c:	4b2f      	ldr	r3, [pc, #188]	; (8002b3c <USER_TIM_Init+0x17c>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a2e      	ldr	r2, [pc, #184]	; (8002b3c <USER_TIM_Init+0x17c>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	60d3      	str	r3, [r2, #12]
    NVIC->ISER[0]	|=	NVIC_ISER_29;		// Step 5 - Enable interrupt
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <USER_TIM_Init+0x180>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a2c      	ldr	r2, [pc, #176]	; (8002b40 <USER_TIM_Init+0x180>)
 8002a8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	e04a      	b.n	8002b2c <USER_TIM_Init+0x16c>
  else if( TIM == 2 )
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d147      	bne.n	8002b2c <USER_TIM_Init+0x16c>
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM4EN;	// Clock enable for TIM4
 8002a9c:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <USER_TIM_Init+0x178>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	4a25      	ldr	r2, [pc, #148]	; (8002b38 <USER_TIM_Init+0x178>)
 8002aa2:	f043 0304 	orr.w	r3, r3, #4
 8002aa6:	61d3      	str	r3, [r2, #28]
    TIM4->CR1		&=	~(TIM_CR1_UDIS);	// Step 1 - UEV enabled
 8002aa8:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <USER_TIM_Init+0x184>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a25      	ldr	r2, [pc, #148]	; (8002b44 <USER_TIM_Init+0x184>)
 8002aae:	f023 0302 	bic.w	r3, r3, #2
 8002ab2:	6013      	str	r3, [r2, #0]
    TIM4->CR1		&=	~(TIM_CR1_URS);		// 	UEV also by software
 8002ab4:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <USER_TIM_Init+0x184>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <USER_TIM_Init+0x184>)
 8002aba:	f023 0304 	bic.w	r3, r3, #4
 8002abe:	6013      	str	r3, [r2, #0]
    TIM4->CR1		&=	~(TIM_CR1_DIR);		// 	Counter as upcounter
 8002ac0:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <USER_TIM_Init+0x184>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <USER_TIM_Init+0x184>)
 8002ac6:	f023 0310 	bic.w	r3, r3, #16
 8002aca:	6013      	str	r3, [r2, #0]
    TIM4->CR1		&=	~(TIM_CR1_CMS);		// 	Edge-aligned mode
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <USER_TIM_Init+0x184>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <USER_TIM_Init+0x184>)
 8002ad2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002ad6:	6013      	str	r3, [r2, #0]
    TIM4->CR1		|=	TIM_CR1_ARPE;		//	Load ARR only on UEV
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <USER_TIM_Init+0x184>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <USER_TIM_Init+0x184>)
 8002ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae2:	6013      	str	r3, [r2, #0]
    TIM4->CCMR1		&=	~(TIM_CCMR1_CC1S);	// Step 2 - CC1 channel as output
 8002ae4:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <USER_TIM_Init+0x184>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <USER_TIM_Init+0x184>)
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1		|=	TIM_CCMR1_OC1PE;	//	CCRx load in UEV event
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <USER_TIM_Init+0x184>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <USER_TIM_Init+0x184>)
 8002af6:	f043 0308 	orr.w	r3, r3, #8
 8002afa:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1		&=	~(TIM_CCMR1_OC1M_0);	//	PWM mode 1
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <USER_TIM_Init+0x184>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	4a10      	ldr	r2, [pc, #64]	; (8002b44 <USER_TIM_Init+0x184>)
 8002b02:	f023 0310 	bic.w	r3, r3, #16
 8002b06:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1		|=	TIM_CCMR1_OC1M_2;
 8002b08:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <USER_TIM_Init+0x184>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <USER_TIM_Init+0x184>)
 8002b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b12:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1		|=	TIM_CCMR1_OC1M_1;
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <USER_TIM_Init+0x184>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <USER_TIM_Init+0x184>)
 8002b1a:	f043 0320 	orr.w	r3, r3, #32
 8002b1e:	6193      	str	r3, [r2, #24]
    TIM4->CR1		|=	TIM_CR1_CEN;			// Enable the Timer to start counting
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <USER_TIM_Init+0x184>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <USER_TIM_Init+0x184>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6013      	str	r3, [r2, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40000400 	.word	0x40000400
 8002b40:	e000e100 	.word	0xe000e100
 8002b44:	40000800 	.word	0x40000800

08002b48 <USER_TIM_Delay>:

// Generate delay via TIM timer

void USER_TIM_Delay( uint8_t TIM, uint16_t TIM_PSC, uint16_t TIM_CNT )
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
 8002b52:	460b      	mov	r3, r1
 8002b54:	80bb      	strh	r3, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	807b      	strh	r3, [r7, #2]
  if( TIM == 0 )
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d128      	bne.n	8002bb2 <USER_TIM_Delay+0x6a>
  {
    TIM2->PSC	=	TIM_PSC;			// Configure initial prescaler and count values
 8002b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b64:	88bb      	ldrh	r3, [r7, #4]
 8002b66:	6293      	str	r3, [r2, #40]	; 0x28
    TIM2->CNT	=	TIM_CNT;
 8002b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b6c:	887b      	ldrh	r3, [r7, #2]
 8002b6e:	6253      	str	r3, [r2, #36]	; 0x24

    TIM2->CR1	|=	TIM_CR1_CEN;			// Enable TIM2 timer to start counting
 8002b70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]

    while( !( TIM2->SR & TIM_SR_UIF ) );		// Wait for UIF
 8002b80:	bf00      	nop
 8002b82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f8      	beq.n	8002b82 <USER_TIM_Delay+0x3a>

    TIM2->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM2 timer
 8002b90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	6013      	str	r3, [r2, #0]
    TIM2->SR	&=	~(TIM_SR_UIF);			// Clear UIF
 8002ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	6113      	str	r3, [r2, #16]
      TIM3->CNT	=	TIM_CNT;

      TIM3->CR1	|=	TIM_CR1_CEN;			// Enable TIM3 timer to start counting
    }
  }
}
 8002bb0:	e01a      	b.n	8002be8 <USER_TIM_Delay+0xa0>
  else if( TIM == 1 )
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d117      	bne.n	8002be8 <USER_TIM_Delay+0xa0>
    if( !( TIM3->CR1 & TIM_CR1_CEN ) && !( TIM3->SR & TIM_SR_UIF ) )
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <USER_TIM_Delay+0xac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d111      	bne.n	8002be8 <USER_TIM_Delay+0xa0>
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <USER_TIM_Delay+0xac>)
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <USER_TIM_Delay+0xa0>
      TIM3->PSC	=	TIM_PSC;
 8002bd0:	4a08      	ldr	r2, [pc, #32]	; (8002bf4 <USER_TIM_Delay+0xac>)
 8002bd2:	88bb      	ldrh	r3, [r7, #4]
 8002bd4:	6293      	str	r3, [r2, #40]	; 0x28
      TIM3->CNT	=	TIM_CNT;
 8002bd6:	4a07      	ldr	r2, [pc, #28]	; (8002bf4 <USER_TIM_Delay+0xac>)
 8002bd8:	887b      	ldrh	r3, [r7, #2]
 8002bda:	6253      	str	r3, [r2, #36]	; 0x24
      TIM3->CR1	|=	TIM_CR1_CEN;			// Enable TIM3 timer to start counting
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <USER_TIM_Delay+0xac>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <USER_TIM_Delay+0xac>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6013      	str	r3, [r2, #0]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40000400 	.word	0x40000400

08002bf8 <TIM3_IRQHandler>:

void TIM3_IRQHandler( void )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  if( TIM3->SR & TIM_SR_UIF )      			// Wait for UIF
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <TIM3_IRQHandler+0x3c>)
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d013      	beq.n	8002c30 <TIM3_IRQHandler+0x38>
  {
    TIM3->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM3 timer
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <TIM3_IRQHandler+0x3c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a09      	ldr	r2, [pc, #36]	; (8002c34 <TIM3_IRQHandler+0x3c>)
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	6013      	str	r3, [r2, #0]
    TIM3->SR	&=	~(TIM_SR_UIF);			// Clear UIF
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <TIM3_IRQHandler+0x3c>)
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	4a06      	ldr	r2, [pc, #24]	; (8002c34 <TIM3_IRQHandler+0x3c>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6113      	str	r3, [r2, #16]

    USER_GPIO_Toggle( PORTC, 2 );
 8002c20:	2102      	movs	r1, #2
 8002c22:	2002      	movs	r0, #2
 8002c24:	f7ff fb92 	bl	800234c <USER_GPIO_Toggle>
    USER_GPIO_Toggle( PORTC, 3 );
 8002c28:	2103      	movs	r1, #3
 8002c2a:	2002      	movs	r0, #2
 8002c2c:	f7ff fb8e 	bl	800234c <USER_GPIO_Toggle>
  }
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40000400 	.word	0x40000400

08002c38 <USER_USART_Init>:
#include "GPIO.h"

// Initialize USART

void USER_USART_Init( uint8_t USART )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
  /* Only USART1 is clocked with PCLK2 (72 MHz max). Other USARTs are clocked with
  PCLK1 (36 MHz max) */

  if( USART == 0 )
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d138      	bne.n	8002cba <USER_USART_Init+0x82>
  {
    RCC->APB2ENR	|= 	RCC_APB2ENR_USART1EN; 		// Clock enable for USART1
 8002c48:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <USER_USART_Init+0x8c>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <USER_USART_Init+0x8c>)
 8002c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c52:	6193      	str	r3, [r2, #24]

    USER_GPIO_Define(PORTA, 9, OUT_10, OUT_AF_PP);		// Pin PA9 (USART1_TX) as alternate function output push-pull, max speed 10 MHz
 8002c54:	2302      	movs	r3, #2
 8002c56:	2201      	movs	r2, #1
 8002c58:	2109      	movs	r1, #9
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7ff fa42 	bl	80020e4 <USER_GPIO_Define>

    USER_GPIO_Define(PORTA, 10, INP, INP_PP);			// Pin PA10 (USART1_RX) as input pull-up
 8002c60:	2302      	movs	r3, #2
 8002c62:	2200      	movs	r2, #0
 8002c64:	210a      	movs	r1, #10
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7ff fa3c 	bl	80020e4 <USER_GPIO_Define>
    USER_GPIO_Write(PORTA, 10, 1);
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	210a      	movs	r1, #10
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7ff fb1f 	bl	80022b4 <USER_GPIO_Write>

    USART1->CR1		|=	 USART_CR1_UE;			// Step 1 - USART enabled
 8002c76:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <USER_USART_Init+0x90>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <USER_USART_Init+0x90>)
 8002c7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c80:	60d3      	str	r3, [r2, #12]
    USART1->CR1		&=	~USART_CR1_M;			// Step 2 - 8 Data bits
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <USER_USART_Init+0x90>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	4a10      	ldr	r2, [pc, #64]	; (8002cc8 <USER_USART_Init+0x90>)
 8002c88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c8c:	60d3      	str	r3, [r2, #12]
    USART1->CR2		&=	~USART_CR2_STOP;		// Step 3 - 1 Stop bit
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <USER_USART_Init+0x90>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <USER_USART_Init+0x90>)
 8002c94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c98:	6113      	str	r3, [r2, #16]
    USART1->BRR		=	 USARTDIV_64MHZ;		// Step 5 - Desired baud rate
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <USER_USART_Init+0x90>)
 8002c9c:	f240 222b 	movw	r2, #555	; 0x22b
 8002ca0:	609a      	str	r2, [r3, #8]
    USART1->CR1		|= 	 USART_CR1_TE;			// Step 6 - Transmitter enabled
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <USER_USART_Init+0x90>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <USER_USART_Init+0x90>)
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	60d3      	str	r3, [r2, #12]
    USART1->CR1		|=	 USART_CR1_RE;			// Step 7 - Receiver enabled
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <USER_USART_Init+0x90>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <USER_USART_Init+0x90>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	60d3      	str	r3, [r2, #12]
  }
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40013800 	.word	0x40013800

08002ccc <_write>:
 *
 * It redirects standard output stream in C to USART peripheral
 * device */

int _write( int file, char *ptr, int len )
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for( DataIdx = 0 ; DataIdx < len; DataIdx++ )
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	e00f      	b.n	8002cfe <_write+0x32>
  {
    while(!( USART2->SR & USART_SR_TXE ));		// Wait until USART_DR is empty
 8002cde:	bf00      	nop
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <_write+0x48>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f9      	beq.n	8002ce0 <_write+0x14>
    USART2->DR = *ptr++;				// Transmit data
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	60ba      	str	r2, [r7, #8]
 8002cf2:	781a      	ldrb	r2, [r3, #0]
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <_write+0x48>)
 8002cf6:	605a      	str	r2, [r3, #4]
  for( DataIdx = 0 ; DataIdx < len; DataIdx++ )
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	dbeb      	blt.n	8002cde <_write+0x12>
  }

  return len;
 8002d06:	687b      	ldr	r3, [r7, #4]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40004400 	.word	0x40004400

08002d18 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a06      	ldr	r2, [pc, #24]	; (8002d40 <vApplicationGetIdleTaskMemory+0x28>)
 8002d28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	200002a8 	.word	0x200002a8
 8002d44:	2000034c 	.word	0x2000034c

08002d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d48:	b5b0      	push	{r4, r5, r7, lr}
 8002d4a:	b0a6      	sub	sp, #152	; 0x98
 8002d4c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8002d4e:	f001 f81d 	bl	8003d8c <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */

  SystemClock_Config();
 8002d52:	f000 f889 	bl	8002e68 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8002d56:	f000 f8f3 	bl	8002f40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002d5a:	f000 f8c7 	bl	8002eec <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */

  osMutexDef(Mutex1);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  Mutex1Handle = osMutexCreate(osMutex(Mutex1));
 8002d6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f002 fae3 	bl	800533a <osMutexCreate>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4a31      	ldr	r2, [pc, #196]	; (8002e3c <main+0xf4>)
 8002d78:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */

  osThreadDef(Task2, TASK_2_ADC_Read, osPriorityHigh, 0, 128);
 8002d7a:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <main+0xf8>)
 8002d7c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002d80:	461d      	mov	r5, r3
 8002d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8002d8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f002 fa70 	bl	800527a <osThreadCreate>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4a29      	ldr	r2, [pc, #164]	; (8002e44 <main+0xfc>)
 8002d9e:	6013      	str	r3, [r2, #0]

  osThreadDef(Task4, TASK_4_UART_Use, osPriorityNormal, 0, 256);
 8002da0:	4b29      	ldr	r3, [pc, #164]	; (8002e48 <main+0x100>)
 8002da2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002da6:	461d      	mov	r5, r3
 8002da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002db0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task4Handle = osThreadCreate(osThread(Task4), NULL);
 8002db4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f002 fa5d 	bl	800527a <osThreadCreate>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <main+0x104>)
 8002dc4:	6013      	str	r3, [r2, #0]

  osThreadDef(Task5, TASK_5_LCD_Write, osPriorityBelowNormal, 0, 128);
 8002dc6:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <main+0x108>)
 8002dc8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002dcc:	461d      	mov	r5, r3
 8002dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002dd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task5Handle = osThreadCreate(osThread(Task5), NULL);
 8002dda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f002 fa4a 	bl	800527a <osThreadCreate>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4a1a      	ldr	r2, [pc, #104]	; (8002e54 <main+0x10c>)
 8002dea:	6013      	str	r3, [r2, #0]

  osThreadDef(Task3, TASK_3_MODEL_Step, osPriorityAboveNormal, 0, 128);
 8002dec:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <main+0x110>)
 8002dee:	f107 0420 	add.w	r4, r7, #32
 8002df2:	461d      	mov	r5, r3
 8002df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002df8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002dfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8002e00:	f107 0320 	add.w	r3, r7, #32
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f002 fa37 	bl	800527a <osThreadCreate>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <main+0x114>)
 8002e10:	6013      	str	r3, [r2, #0]

  osThreadDef(Task1, TASK_1_MATRIX_KEYPAD_Read, osPriorityRealtime, 0, 128);
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <main+0x118>)
 8002e14:	1d3c      	adds	r4, r7, #4
 8002e16:	461d      	mov	r5, r3
 8002e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 fa26 	bl	800527a <osThreadCreate>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4a0c      	ldr	r2, [pc, #48]	; (8002e64 <main+0x11c>)
 8002e32:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */

  osKernelStart();
 8002e34:	f002 fa0a 	bl	800524c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <main+0xf0>
 8002e3a:	bf00      	nop
 8002e3c:	200005a8 	.word	0x200005a8
 8002e40:	0800c970 	.word	0x0800c970
 8002e44:	20000598 	.word	0x20000598
 8002e48:	0800c994 	.word	0x0800c994
 8002e4c:	200005a0 	.word	0x200005a0
 8002e50:	0800c9b8 	.word	0x0800c9b8
 8002e54:	200005a4 	.word	0x200005a4
 8002e58:	0800c9dc 	.word	0x0800c9dc
 8002e5c:	2000059c 	.word	0x2000059c
 8002e60:	0800ca00 	.word	0x0800ca00
 8002e64:	20000594 	.word	0x20000594

08002e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b090      	sub	sp, #64	; 0x40
 8002e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e6e:	f107 0318 	add.w	r3, r7, #24
 8002e72:	2228      	movs	r2, #40	; 0x28
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f005 f93f 	bl	80080fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	609a      	str	r2, [r3, #8]
 8002e86:	60da      	str	r2, [r3, #12]
 8002e88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e92:	2310      	movs	r3, #16
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e96:	2302      	movs	r3, #2
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002e9e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ea4:	f107 0318 	add.w	r3, r7, #24
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 fa3f 	bl	800432c <HAL_RCC_OscConfig>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002eb4:	f000 fb8c 	bl	80035d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eb8:	230f      	movs	r3, #15
 8002eba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 fcac 	bl	8004830 <HAL_RCC_ClockConfig>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002ede:	f000 fb77 	bl	80035d0 <Error_Handler>
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	3740      	adds	r7, #64	; 0x40
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <MX_USART2_UART_Init+0x50>)
 8002ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f12:	220c      	movs	r2, #12
 8002f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f22:	4805      	ldr	r0, [pc, #20]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f24:	f002 f88c 	bl	8005040 <HAL_UART_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f2e:	f000 fb4f 	bl	80035d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	2000054c 	.word	0x2000054c
 8002f3c:	40004400 	.word	0x40004400

08002f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f46:	f107 0310 	add.w	r3, r7, #16
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <MX_GPIO_Init+0xcc>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	4a2c      	ldr	r2, [pc, #176]	; (800300c <MX_GPIO_Init+0xcc>)
 8002f5a:	f043 0310 	orr.w	r3, r3, #16
 8002f5e:	6193      	str	r3, [r2, #24]
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <MX_GPIO_Init+0xcc>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <MX_GPIO_Init+0xcc>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	4a26      	ldr	r2, [pc, #152]	; (800300c <MX_GPIO_Init+0xcc>)
 8002f72:	f043 0320 	orr.w	r3, r3, #32
 8002f76:	6193      	str	r3, [r2, #24]
 8002f78:	4b24      	ldr	r3, [pc, #144]	; (800300c <MX_GPIO_Init+0xcc>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <MX_GPIO_Init+0xcc>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	4a20      	ldr	r2, [pc, #128]	; (800300c <MX_GPIO_Init+0xcc>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6193      	str	r3, [r2, #24]
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <MX_GPIO_Init+0xcc>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <MX_GPIO_Init+0xcc>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4a1a      	ldr	r2, [pc, #104]	; (800300c <MX_GPIO_Init+0xcc>)
 8002fa2:	f043 0308 	orr.w	r3, r3, #8
 8002fa6:	6193      	str	r3, [r2, #24]
 8002fa8:	4b18      	ldr	r3, [pc, #96]	; (800300c <MX_GPIO_Init+0xcc>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2120      	movs	r1, #32
 8002fb8:	4815      	ldr	r0, [pc, #84]	; (8003010 <MX_GPIO_Init+0xd0>)
 8002fba:	f001 f97d 	bl	80042b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <MX_GPIO_Init+0xd4>)
 8002fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fcc:	f107 0310 	add.w	r3, r7, #16
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4811      	ldr	r0, [pc, #68]	; (8003018 <MX_GPIO_Init+0xd8>)
 8002fd4:	f000 ffec 	bl	8003fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002fd8:	2320      	movs	r3, #32
 8002fda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002fe8:	f107 0310 	add.w	r3, r7, #16
 8002fec:	4619      	mov	r1, r3
 8002fee:	4808      	ldr	r0, [pc, #32]	; (8003010 <MX_GPIO_Init+0xd0>)
 8002ff0:	f000 ffde 	bl	8003fb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2105      	movs	r1, #5
 8002ff8:	2028      	movs	r0, #40	; 0x28
 8002ffa:	f000 ffae 	bl	8003f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ffe:	2028      	movs	r0, #40	; 0x28
 8003000:	f000 ffc7 	bl	8003f92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003004:	bf00      	nop
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	40010800 	.word	0x40010800
 8003014:	10110000 	.word	0x10110000
 8003018:	40011000 	.word	0x40011000

0800301c <TASK_1_MATRIX_KEYPAD_Read>:
 * and operation mode
 * based on the selected key.
 */

void TASK_1_MATRIX_KEYPAD_Read( void const * argument )
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  USER_USART_Init( USART_1 );
 8003024:	2000      	movs	r0, #0
 8003026:	f7ff fe07 	bl	8002c38 <USER_USART_Init>
  EngTrModel_initialize();
 800302a:	f7ff f853 	bl	80020d4 <EngTrModel_initialize>

  USER_MATRIX_KEYPAD_Init();
 800302e:	f7ff fbea 	bl	8002806 <USER_MATRIX_KEYPAD_Init>
  USER_LEDS_Init();
 8003032:	f7ff fbcb 	bl	80027cc <USER_LEDS_Init>

  uint32_t counter = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    selectedKey = USER_MATRIX_KEYPAD_Read();
 800303a:	f7ff fc41 	bl	80028c0 <USER_MATRIX_KEYPAD_Read>
 800303e:	4603      	mov	r3, r0
 8003040:	461a      	mov	r2, r3
 8003042:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <TASK_1_MATRIX_KEYPAD_Read+0xd0>)
 8003044:	701a      	strb	r2, [r3, #0]

    if(selectedKey == '5')							// Brake action
 8003046:	4b29      	ldr	r3, [pc, #164]	; (80030ec <TASK_1_MATRIX_KEYPAD_Read+0xd0>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b35      	cmp	r3, #53	; 0x35
 800304c:	d108      	bne.n	8003060 <TASK_1_MATRIX_KEYPAD_Read+0x44>
    {
      keyBrakeTorque = 100.0;							// Full brake torque
 800304e:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <TASK_1_MATRIX_KEYPAD_Read+0xd4>)
 8003050:	4a28      	ldr	r2, [pc, #160]	; (80030f4 <TASK_1_MATRIX_KEYPAD_Read+0xd8>)
 8003052:	601a      	str	r2, [r3, #0]

      USER_TIM_Delay( TIM_3, TIM_PSC_200MS, TIM_CNT_200MS );			// LEDs blinking
 8003054:	22e6      	movs	r2, #230	; 0xe6
 8003056:	21c3      	movs	r1, #195	; 0xc3
 8003058:	2001      	movs	r0, #1
 800305a:	f7ff fd75 	bl	8002b48 <USER_TIM_Delay>
 800305e:	e038      	b.n	80030d2 <TASK_1_MATRIX_KEYPAD_Read+0xb6>
    }
    else if(selectedKey == '4' || selectedKey == '6')				// Left or right action
 8003060:	4b22      	ldr	r3, [pc, #136]	; (80030ec <TASK_1_MATRIX_KEYPAD_Read+0xd0>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b34      	cmp	r3, #52	; 0x34
 8003066:	d003      	beq.n	8003070 <TASK_1_MATRIX_KEYPAD_Read+0x54>
 8003068:	4b20      	ldr	r3, [pc, #128]	; (80030ec <TASK_1_MATRIX_KEYPAD_Read+0xd0>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b36      	cmp	r3, #54	; 0x36
 800306e:	d112      	bne.n	8003096 <TASK_1_MATRIX_KEYPAD_Read+0x7a>
    {
      keyBrakeTorque = 50.0;							// Half brake torque
 8003070:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <TASK_1_MATRIX_KEYPAD_Read+0xd4>)
 8003072:	4a21      	ldr	r2, [pc, #132]	; (80030f8 <TASK_1_MATRIX_KEYPAD_Read+0xdc>)
 8003074:	601a      	str	r2, [r3, #0]

      if(selectedKey == '4')							// Left action
 8003076:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <TASK_1_MATRIX_KEYPAD_Read+0xd0>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b34      	cmp	r3, #52	; 0x34
 800307c:	d105      	bne.n	800308a <TASK_1_MATRIX_KEYPAD_Read+0x6e>
      {
	USER_GPIO_Write( PORTC, 2, 1 );						// Left LED turned on
 800307e:	2201      	movs	r2, #1
 8003080:	2102      	movs	r1, #2
 8003082:	2002      	movs	r0, #2
 8003084:	f7ff f916 	bl	80022b4 <USER_GPIO_Write>
      if(selectedKey == '4')							// Left action
 8003088:	e023      	b.n	80030d2 <TASK_1_MATRIX_KEYPAD_Read+0xb6>
      }
      else									// Right action
      {
	USER_GPIO_Write( PORTC, 3, 1 );						// Right LED turned on
 800308a:	2201      	movs	r2, #1
 800308c:	2103      	movs	r1, #3
 800308e:	2002      	movs	r0, #2
 8003090:	f7ff f910 	bl	80022b4 <USER_GPIO_Write>
      if(selectedKey == '4')							// Left action
 8003094:	e01d      	b.n	80030d2 <TASK_1_MATRIX_KEYPAD_Read+0xb6>
      }
    }
    else if(selectedKey == 'A')							// Select manual mode action
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <TASK_1_MATRIX_KEYPAD_Read+0xd0>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b41      	cmp	r3, #65	; 0x41
 800309c:	d103      	bne.n	80030a6 <TASK_1_MATRIX_KEYPAD_Read+0x8a>
    {
      operationMode = 0;							// Manual mode
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <TASK_1_MATRIX_KEYPAD_Read+0xe0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e015      	b.n	80030d2 <TASK_1_MATRIX_KEYPAD_Read+0xb6>
    }
    else if(selectedKey == 'B')							// Select simulation mode action
 80030a6:	4b11      	ldr	r3, [pc, #68]	; (80030ec <TASK_1_MATRIX_KEYPAD_Read+0xd0>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b42      	cmp	r3, #66	; 0x42
 80030ac:	d103      	bne.n	80030b6 <TASK_1_MATRIX_KEYPAD_Read+0x9a>
    {
      operationMode = 1;							// Simulation mode
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <TASK_1_MATRIX_KEYPAD_Read+0xe0>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e00d      	b.n	80030d2 <TASK_1_MATRIX_KEYPAD_Read+0xb6>
    }
    else									// No action
    {
      keyBrakeTorque = 0.0;							// No brake torque
 80030b6:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <TASK_1_MATRIX_KEYPAD_Read+0xd4>)
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

      USER_GPIO_Write( PORTC, 2, 0 );						// LEDs turned off
 80030be:	2200      	movs	r2, #0
 80030c0:	2102      	movs	r1, #2
 80030c2:	2002      	movs	r0, #2
 80030c4:	f7ff f8f6 	bl	80022b4 <USER_GPIO_Write>
      USER_GPIO_Write( PORTC, 3, 0 );
 80030c8:	2200      	movs	r2, #0
 80030ca:	2103      	movs	r1, #3
 80030cc:	2002      	movs	r0, #2
 80030ce:	f7ff f8f1 	bl	80022b4 <USER_GPIO_Write>
    }

    osDelay(PERIOD_TASK_1 - TICK_DIFF_TASK_1);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	60fa      	str	r2, [r7, #12]
 80030d8:	005c      	lsls	r4, r3, #1
 80030da:	f002 f8be 	bl	800525a <osKernelSysTick>
 80030de:	4603      	mov	r3, r0
 80030e0:	1ae3      	subs	r3, r4, r3
 80030e2:	3302      	adds	r3, #2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f002 f914 	bl	8005312 <osDelay>
    selectedKey = USER_MATRIX_KEYPAD_Read();
 80030ea:	e7a6      	b.n	800303a <TASK_1_MATRIX_KEYPAD_Read+0x1e>
 80030ec:	20000018 	.word	0x20000018
 80030f0:	200005ac 	.word	0x200005ac
 80030f4:	42c80000 	.word	0x42c80000
 80030f8:	42480000 	.word	0x42480000
 80030fc:	200005bd 	.word	0x200005bd

08003100 <TASK_2_ADC_Read>:
 * and normalize it to within the range accepted by the model,
 * this for manual mode.
 */

void TASK_2_ADC_Read( void const * argument )
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  USER_ADC_Init( ADC_1 );
 8003108:	2000      	movs	r0, #0
 800310a:	f7fd ffe9 	bl	80010e0 <USER_ADC_Init>

  uint32_t counter = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    conversionData = USER_ADC_Convert( ADC_1 );
 8003112:	2000      	movs	r0, #0
 8003114:	f7fe f844 	bl	80011a0 <USER_ADC_Convert>
 8003118:	4603      	mov	r3, r0
 800311a:	461a      	mov	r2, r3
 800311c:	4b18      	ldr	r3, [pc, #96]	; (8003180 <TASK_2_ADC_Read+0x80>)
 800311e:	801a      	strh	r2, [r3, #0]
    voltageValue = 0.00080586 * conversionData;
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <TASK_2_ADC_Read+0x80>)
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd f96d 	bl	8000404 <__aeabi_i2d>
 800312a:	a313      	add	r3, pc, #76	; (adr r3, 8003178 <TASK_2_ADC_Read+0x78>)
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	f7fd f9d2 	bl	80004d8 <__aeabi_dmul>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	f7fd fcc4 	bl	8000ac8 <__aeabi_d2f>
 8003140:	4603      	mov	r3, r0
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <TASK_2_ADC_Read+0x84>)
 8003144:	6013      	str	r3, [r2, #0]
    potentiometerThrottle = scaleVoltageValue( voltageValue, 0, 3.3 );
 8003146:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <TASK_2_ADC_Read+0x84>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a0f      	ldr	r2, [pc, #60]	; (8003188 <TASK_2_ADC_Read+0x88>)
 800314c:	f04f 0100 	mov.w	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe f841 	bl	80011d8 <scaleVoltageValue>
 8003156:	4603      	mov	r3, r0
 8003158:	4a0c      	ldr	r2, [pc, #48]	; (800318c <TASK_2_ADC_Read+0x8c>)
 800315a:	6013      	str	r3, [r2, #0]

    osDelay(PERIOD_TASK_2 - TICK_DIFF_TASK_2);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	60fa      	str	r2, [r7, #12]
 8003162:	00dc      	lsls	r4, r3, #3
 8003164:	f002 f879 	bl	800525a <osKernelSysTick>
 8003168:	4603      	mov	r3, r0
 800316a:	1ae3      	subs	r3, r4, r3
 800316c:	3308      	adds	r3, #8
 800316e:	4618      	mov	r0, r3
 8003170:	f002 f8cf 	bl	8005312 <osDelay>
    conversionData = USER_ADC_Convert( ADC_1 );
 8003174:	e7cd      	b.n	8003112 <TASK_2_ADC_Read+0x12>
 8003176:	bf00      	nop
 8003178:	2c2e064e 	.word	0x2c2e064e
 800317c:	3f4a680b 	.word	0x3f4a680b
 8003180:	200005b0 	.word	0x200005b0
 8003184:	200005b4 	.word	0x200005b4
 8003188:	40533333 	.word	0x40533333
 800318c:	200005b8 	.word	0x200005b8

08003190 <TASK_3_MODEL_Step>:
 * and the brake value, take a step and
 * sanitize the output values.
 */

void TASK_3_MODEL_Step( void const * argument )
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    if(operationMode == 0)							// Manual mode
 800319c:	4b4d      	ldr	r3, [pc, #308]	; (80032d4 <TASK_3_MODEL_Step+0x144>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <TASK_3_MODEL_Step+0x2a>
    {
      EngTrModel_U.Throttle = potentiometerThrottle;				// Model feed with potentiometer throttle value
 80031a4:	4b4c      	ldr	r3, [pc, #304]	; (80032d8 <TASK_3_MODEL_Step+0x148>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd f93d 	bl	8000428 <__aeabi_f2d>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	494a      	ldr	r1, [pc, #296]	; (80032dc <TASK_3_MODEL_Step+0x14c>)
 80031b4:	e9c1 2300 	strd	r2, r3, [r1]
 80031b8:	e00d      	b.n	80031d6 <TASK_3_MODEL_Step+0x46>
    }
    else									// Simulation mode
    {
      EngTrModel_U.Throttle = (float) receivedThrottle;				// Model feed with received throttle value
 80031ba:	4b49      	ldr	r3, [pc, #292]	; (80032e0 <TASK_3_MODEL_Step+0x150>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fd88 	bl	8000cd4 <__aeabi_ui2f>
 80031c4:	4603      	mov	r3, r0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd f92e 	bl	8000428 <__aeabi_f2d>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4942      	ldr	r1, [pc, #264]	; (80032dc <TASK_3_MODEL_Step+0x14c>)
 80031d2:	e9c1 2300 	strd	r2, r3, [r1]
    }

    EngTrModel_U.BrakeTorque = keyBrakeTorque;					// Model feed with brake value
 80031d6:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <TASK_3_MODEL_Step+0x154>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd f924 	bl	8000428 <__aeabi_f2d>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	493d      	ldr	r1, [pc, #244]	; (80032dc <TASK_3_MODEL_Step+0x14c>)
 80031e6:	e9c1 2302 	strd	r2, r3, [r1, #8]

    EngTrModel_step();								// Take a step
 80031ea:	f7fe fc99 	bl	8001b20 <EngTrModel_step>

    // Sanitize the output values

    if(isnan(EngTrModel_Y.VehicleSpeed) || EngTrModel_Y.VehicleSpeed < 0 || EngTrModel_Y.VehicleSpeed > 200)
 80031ee:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <TASK_3_MODEL_Step+0x158>)
 80031f0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	f7fd fc08 	bl	8000a0c <__aeabi_dcmpun>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d116      	bne.n	8003230 <TASK_3_MODEL_Step+0xa0>
 8003202:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <TASK_3_MODEL_Step+0x158>)
 8003204:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	f7fd fbd4 	bl	80009bc <__aeabi_dcmplt>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <TASK_3_MODEL_Step+0xa0>
 800321a:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <TASK_3_MODEL_Step+0x158>)
 800321c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	4b31      	ldr	r3, [pc, #196]	; (80032ec <TASK_3_MODEL_Step+0x15c>)
 8003226:	f7fd fbe7 	bl	80009f8 <__aeabi_dcmpgt>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <TASK_3_MODEL_Step+0xae>
    {
      EngTrModel_Y.VehicleSpeed = 0.0;
 8003230:	492d      	ldr	r1, [pc, #180]	; (80032e8 <TASK_3_MODEL_Step+0x158>)
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    }

    if(isnan(EngTrModel_Y.EngineSpeed) || EngTrModel_Y.EngineSpeed < 0)
 800323e:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <TASK_3_MODEL_Step+0x158>)
 8003240:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	f7fd fbe0 	bl	8000a0c <__aeabi_dcmpun>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <TASK_3_MODEL_Step+0xda>
 8003252:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <TASK_3_MODEL_Step+0x158>)
 8003254:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	f7fd fbac 	bl	80009bc <__aeabi_dcmplt>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d006      	beq.n	8003278 <TASK_3_MODEL_Step+0xe8>
    {
      EngTrModel_Y.EngineSpeed = 0.0;
 800326a:	491f      	ldr	r1, [pc, #124]	; (80032e8 <TASK_3_MODEL_Step+0x158>)
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if(isnan(EngTrModel_Y.Gear) || EngTrModel_Y.Gear < 0)
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <TASK_3_MODEL_Step+0x158>)
 800327a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	f7fd fbc3 	bl	8000a0c <__aeabi_dcmpun>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10b      	bne.n	80032a4 <TASK_3_MODEL_Step+0x114>
 800328c:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <TASK_3_MODEL_Step+0x158>)
 800328e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	f7fd fb8f 	bl	80009bc <__aeabi_dcmplt>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d006      	beq.n	80032b2 <TASK_3_MODEL_Step+0x122>
    {
      EngTrModel_Y.Gear = 0.0;
 80032a4:	4910      	ldr	r1, [pc, #64]	; (80032e8 <TASK_3_MODEL_Step+0x158>)
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }

    osDelay(PERIOD_TASK_3 - TICK_DIFF_TASK_3);
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	1c53      	adds	r3, r2, #1
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	461c      	mov	r4, r3
 80032c2:	f001 ffca 	bl	800525a <osKernelSysTick>
 80032c6:	4603      	mov	r3, r0
 80032c8:	1ae3      	subs	r3, r4, r3
 80032ca:	330a      	adds	r3, #10
 80032cc:	4618      	mov	r0, r3
 80032ce:	f002 f820 	bl	8005312 <osDelay>
    if(operationMode == 0)							// Manual mode
 80032d2:	e763      	b.n	800319c <TASK_3_MODEL_Step+0xc>
 80032d4:	200005bd 	.word	0x200005bd
 80032d8:	200005b8 	.word	0x200005b8
 80032dc:	20000280 	.word	0x20000280
 80032e0:	200005bc 	.word	0x200005bc
 80032e4:	200005ac 	.word	0x200005ac
 80032e8:	20000290 	.word	0x20000290
 80032ec:	40690000 	.word	0x40690000

080032f0 <TASK_4_UART_Use>:
 * read the throttle value sent via UART by the Raspeberry Pi
 * for simulation mode.
 */

void TASK_4_UART_Use( void const * argument )
{
 80032f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f4:	b08c      	sub	sp, #48	; 0x30
 80032f6:	af08      	add	r7, sp, #32
 80032f8:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    printf("%f,%f,%f,%f,%f\n\r", potentiometerThrottle, keyBrakeTorque, EngTrModel_Y.VehicleSpeed, EngTrModel_Y.EngineSpeed, EngTrModel_Y.Gear);
 80032fe:	4b21      	ldr	r3, [pc, #132]	; (8003384 <TASK_4_UART_Use+0x94>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd f890 	bl	8000428 <__aeabi_f2d>
 8003308:	4682      	mov	sl, r0
 800330a:	468b      	mov	fp, r1
 800330c:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <TASK_4_UART_Use+0x98>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd f889 	bl	8000428 <__aeabi_f2d>
 8003316:	4680      	mov	r8, r0
 8003318:	4689      	mov	r9, r1
 800331a:	4b1c      	ldr	r3, [pc, #112]	; (800338c <TASK_4_UART_Use+0x9c>)
 800331c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003320:	491a      	ldr	r1, [pc, #104]	; (800338c <TASK_4_UART_Use+0x9c>)
 8003322:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003326:	4c19      	ldr	r4, [pc, #100]	; (800338c <TASK_4_UART_Use+0x9c>)
 8003328:	f104 0510 	add.w	r5, r4, #16
 800332c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003330:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003334:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003338:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800333c:	e9cd 8900 	strd	r8, r9, [sp]
 8003340:	4652      	mov	r2, sl
 8003342:	465b      	mov	r3, fp
 8003344:	4812      	ldr	r0, [pc, #72]	; (8003390 <TASK_4_UART_Use+0xa0>)
 8003346:	f004 fe2f 	bl	8007fa8 <iprintf>

    if( USART1->SR & USART_SR_RXNE )						// If USART_DR is not empty
 800334a:	4b12      	ldr	r3, [pc, #72]	; (8003394 <TASK_4_UART_Use+0xa4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <TASK_4_UART_Use+0x70>
    {
      receivedThrottle = USART1->DR;						// Receive data
 8003356:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <TASK_4_UART_Use+0xa4>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	b2da      	uxtb	r2, r3
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <TASK_4_UART_Use+0xa8>)
 800335e:	701a      	strb	r2, [r3, #0]
    }

    osDelay(PERIOD_TASK_4 - TICK_DIFF_TASK_4);
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	1c53      	adds	r3, r2, #1
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	461c      	mov	r4, r3
 8003370:	f001 ff73 	bl	800525a <osKernelSysTick>
 8003374:	4603      	mov	r3, r0
 8003376:	1ae3      	subs	r3, r4, r3
 8003378:	330c      	adds	r3, #12
 800337a:	4618      	mov	r0, r3
 800337c:	f001 ffc9 	bl	8005312 <osDelay>
    printf("%f,%f,%f,%f,%f\n\r", potentiometerThrottle, keyBrakeTorque, EngTrModel_Y.VehicleSpeed, EngTrModel_Y.EngineSpeed, EngTrModel_Y.Gear);
 8003380:	e7bd      	b.n	80032fe <TASK_4_UART_Use+0xe>
 8003382:	bf00      	nop
 8003384:	200005b8 	.word	0x200005b8
 8003388:	200005ac 	.word	0x200005ac
 800338c:	20000290 	.word	0x20000290
 8003390:	0800ca1c 	.word	0x0800ca1c
 8003394:	40013800 	.word	0x40013800
 8003398:	200005bc 	.word	0x200005bc

0800339c <TASK_5_LCD_Write>:
/* Properly format the model output data
 * and display it on the LCD
 */

void TASK_5_LCD_Write( void const * argument )
{
 800339c:	b5b0      	push	{r4, r5, r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af04      	add	r7, sp, #16
 80033a2:	6078      	str	r0, [r7, #4]
  USER_TIM_Init( TIM_2 );
 80033a4:	2000      	movs	r0, #0
 80033a6:	f7ff fb0b 	bl	80029c0 <USER_TIM_Init>
  USER_LCD_Init();
 80033aa:	f7fe fff1 	bl	8002390 <USER_LCD_Init>

  uint32_t counter = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
    /* Extract the whole and decimal parts for Throttle,
     * Engine Speed and Vehicle Speed, and cast them
     * alongside Brake and Gear to integers.
     */

    ThrottleWhole = (int) ( potentiometerThrottle );
 80033b2:	4b6c      	ldr	r3, [pc, #432]	; (8003564 <TASK_5_LCD_Write+0x1c8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fe34 	bl	8001024 <__aeabi_f2iz>
 80033bc:	4603      	mov	r3, r0
 80033be:	4a6a      	ldr	r2, [pc, #424]	; (8003568 <TASK_5_LCD_Write+0x1cc>)
 80033c0:	6013      	str	r3, [r2, #0]
    ThrottleDecimal = (int) ( ( potentiometerThrottle - ThrottleWhole ) * 100 );
 80033c2:	4b68      	ldr	r3, [pc, #416]	; (8003564 <TASK_5_LCD_Write+0x1c8>)
 80033c4:	681c      	ldr	r4, [r3, #0]
 80033c6:	4b68      	ldr	r3, [pc, #416]	; (8003568 <TASK_5_LCD_Write+0x1cc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fd fc86 	bl	8000cdc <__aeabi_i2f>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4619      	mov	r1, r3
 80033d4:	4620      	mov	r0, r4
 80033d6:	f7fd fbcb 	bl	8000b70 <__aeabi_fsub>
 80033da:	4603      	mov	r3, r0
 80033dc:	4963      	ldr	r1, [pc, #396]	; (800356c <TASK_5_LCD_Write+0x1d0>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd fcd0 	bl	8000d84 <__aeabi_fmul>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fe1c 	bl	8001024 <__aeabi_f2iz>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4a60      	ldr	r2, [pc, #384]	; (8003570 <TASK_5_LCD_Write+0x1d4>)
 80033f0:	6013      	str	r3, [r2, #0]

    VehicleSpeedWhole = (int)( EngTrModel_Y.VehicleSpeed );
 80033f2:	4b60      	ldr	r3, [pc, #384]	; (8003574 <TASK_5_LCD_Write+0x1d8>)
 80033f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033f8:	4610      	mov	r0, r2
 80033fa:	4619      	mov	r1, r3
 80033fc:	f7fd fb1c 	bl	8000a38 <__aeabi_d2iz>
 8003400:	4603      	mov	r3, r0
 8003402:	4a5d      	ldr	r2, [pc, #372]	; (8003578 <TASK_5_LCD_Write+0x1dc>)
 8003404:	6013      	str	r3, [r2, #0]
    VehicleSpeedDecimal = (int)( ( EngTrModel_Y.VehicleSpeed - VehicleSpeedWhole ) * 100 );
 8003406:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <TASK_5_LCD_Write+0x1d8>)
 8003408:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800340c:	4b5a      	ldr	r3, [pc, #360]	; (8003578 <TASK_5_LCD_Write+0x1dc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fc fff7 	bl	8000404 <__aeabi_i2d>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4620      	mov	r0, r4
 800341c:	4629      	mov	r1, r5
 800341e:	f7fc fea3 	bl	8000168 <__aeabi_dsub>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	4b53      	ldr	r3, [pc, #332]	; (800357c <TASK_5_LCD_Write+0x1e0>)
 8003430:	f7fd f852 	bl	80004d8 <__aeabi_dmul>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f7fd fafc 	bl	8000a38 <__aeabi_d2iz>
 8003440:	4603      	mov	r3, r0
 8003442:	4a4f      	ldr	r2, [pc, #316]	; (8003580 <TASK_5_LCD_Write+0x1e4>)
 8003444:	6013      	str	r3, [r2, #0]

    EngineSpeedWhole = (int)( EngTrModel_Y.EngineSpeed );
 8003446:	4b4b      	ldr	r3, [pc, #300]	; (8003574 <TASK_5_LCD_Write+0x1d8>)
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	f7fd faf2 	bl	8000a38 <__aeabi_d2iz>
 8003454:	4603      	mov	r3, r0
 8003456:	4a4b      	ldr	r2, [pc, #300]	; (8003584 <TASK_5_LCD_Write+0x1e8>)
 8003458:	6013      	str	r3, [r2, #0]
    EngineSpeedDecimal = (int)( ( EngTrModel_Y.EngineSpeed - EngineSpeedWhole ) * 100 );
 800345a:	4b46      	ldr	r3, [pc, #280]	; (8003574 <TASK_5_LCD_Write+0x1d8>)
 800345c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003460:	4b48      	ldr	r3, [pc, #288]	; (8003584 <TASK_5_LCD_Write+0x1e8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fc ffcd 	bl	8000404 <__aeabi_i2d>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4620      	mov	r0, r4
 8003470:	4629      	mov	r1, r5
 8003472:	f7fc fe79 	bl	8000168 <__aeabi_dsub>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	4b3e      	ldr	r3, [pc, #248]	; (800357c <TASK_5_LCD_Write+0x1e0>)
 8003484:	f7fd f828 	bl	80004d8 <__aeabi_dmul>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	f7fd fad2 	bl	8000a38 <__aeabi_d2iz>
 8003494:	4603      	mov	r3, r0
 8003496:	4a3c      	ldr	r2, [pc, #240]	; (8003588 <TASK_5_LCD_Write+0x1ec>)
 8003498:	6013      	str	r3, [r2, #0]

    BrakeWhole = (int) ( keyBrakeTorque );
 800349a:	4b3c      	ldr	r3, [pc, #240]	; (800358c <TASK_5_LCD_Write+0x1f0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd fdc0 	bl	8001024 <__aeabi_f2iz>
 80034a4:	4603      	mov	r3, r0
 80034a6:	4a3a      	ldr	r2, [pc, #232]	; (8003590 <TASK_5_LCD_Write+0x1f4>)
 80034a8:	6013      	str	r3, [r2, #0]
    GearWhole = (int) ( EngTrModel_Y.Gear );
 80034aa:	4b32      	ldr	r3, [pc, #200]	; (8003574 <TASK_5_LCD_Write+0x1d8>)
 80034ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	f7fd fac0 	bl	8000a38 <__aeabi_d2iz>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4a36      	ldr	r2, [pc, #216]	; (8003594 <TASK_5_LCD_Write+0x1f8>)
 80034bc:	6013      	str	r3, [r2, #0]

    // Write the messages to send to the LCD

    snprintf( FirstLine_LCD_MSG, sizeof(FirstLine_LCD_MSG), "%03d.%01d  %03d.%01d m/s", ThrottleWhole, ThrottleDecimal / 10, VehicleSpeedWhole, VehicleSpeedDecimal / 10 );
 80034be:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <TASK_5_LCD_Write+0x1cc>)
 80034c0:	681c      	ldr	r4, [r3, #0]
 80034c2:	4b2b      	ldr	r3, [pc, #172]	; (8003570 <TASK_5_LCD_Write+0x1d4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a34      	ldr	r2, [pc, #208]	; (8003598 <TASK_5_LCD_Write+0x1fc>)
 80034c8:	fb82 1203 	smull	r1, r2, r2, r3
 80034cc:	1092      	asrs	r2, r2, #2
 80034ce:	17db      	asrs	r3, r3, #31
 80034d0:	1ad2      	subs	r2, r2, r3
 80034d2:	4b29      	ldr	r3, [pc, #164]	; (8003578 <TASK_5_LCD_Write+0x1dc>)
 80034d4:	6819      	ldr	r1, [r3, #0]
 80034d6:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <TASK_5_LCD_Write+0x1e4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	482f      	ldr	r0, [pc, #188]	; (8003598 <TASK_5_LCD_Write+0x1fc>)
 80034dc:	fb80 5003 	smull	r5, r0, r0, r3
 80034e0:	1080      	asrs	r0, r0, #2
 80034e2:	17db      	asrs	r3, r3, #31
 80034e4:	1ac3      	subs	r3, r0, r3
 80034e6:	9302      	str	r3, [sp, #8]
 80034e8:	9101      	str	r1, [sp, #4]
 80034ea:	9200      	str	r2, [sp, #0]
 80034ec:	4623      	mov	r3, r4
 80034ee:	4a2b      	ldr	r2, [pc, #172]	; (800359c <TASK_5_LCD_Write+0x200>)
 80034f0:	2111      	movs	r1, #17
 80034f2:	482b      	ldr	r0, [pc, #172]	; (80035a0 <TASK_5_LCD_Write+0x204>)
 80034f4:	f004 fd6a 	bl	8007fcc <sniprintf>
    snprintf( SecondLine_LCD_MSG, sizeof(SecondLine_LCD_MSG), "%03d %01d %04d.%01d RPM", BrakeWhole, GearWhole, EngineSpeedWhole, EngineSpeedDecimal / 10 );
 80034f8:	4b25      	ldr	r3, [pc, #148]	; (8003590 <TASK_5_LCD_Write+0x1f4>)
 80034fa:	681c      	ldr	r4, [r3, #0]
 80034fc:	4b25      	ldr	r3, [pc, #148]	; (8003594 <TASK_5_LCD_Write+0x1f8>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b20      	ldr	r3, [pc, #128]	; (8003584 <TASK_5_LCD_Write+0x1e8>)
 8003502:	6819      	ldr	r1, [r3, #0]
 8003504:	4b20      	ldr	r3, [pc, #128]	; (8003588 <TASK_5_LCD_Write+0x1ec>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4823      	ldr	r0, [pc, #140]	; (8003598 <TASK_5_LCD_Write+0x1fc>)
 800350a:	fb80 5003 	smull	r5, r0, r0, r3
 800350e:	1080      	asrs	r0, r0, #2
 8003510:	17db      	asrs	r3, r3, #31
 8003512:	1ac3      	subs	r3, r0, r3
 8003514:	9302      	str	r3, [sp, #8]
 8003516:	9101      	str	r1, [sp, #4]
 8003518:	9200      	str	r2, [sp, #0]
 800351a:	4623      	mov	r3, r4
 800351c:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <TASK_5_LCD_Write+0x208>)
 800351e:	2111      	movs	r1, #17
 8003520:	4821      	ldr	r0, [pc, #132]	; (80035a8 <TASK_5_LCD_Write+0x20c>)
 8003522:	f004 fd53 	bl	8007fcc <sniprintf>

    // Display values on the LCD

    LCD_Set_Cursor( 1, 1 );
 8003526:	2101      	movs	r1, #1
 8003528:	2001      	movs	r0, #1
 800352a:	f7ff f897 	bl	800265c <LCD_Set_Cursor>
    LCD_Put_Str( FirstLine_LCD_MSG );
 800352e:	481c      	ldr	r0, [pc, #112]	; (80035a0 <TASK_5_LCD_Write+0x204>)
 8003530:	f7ff f8b6 	bl	80026a0 <LCD_Put_Str>
    LCD_Set_Cursor( 2, 1 );
 8003534:	2101      	movs	r1, #1
 8003536:	2002      	movs	r0, #2
 8003538:	f7ff f890 	bl	800265c <LCD_Set_Cursor>
    LCD_Put_Str( SecondLine_LCD_MSG );
 800353c:	481a      	ldr	r0, [pc, #104]	; (80035a8 <TASK_5_LCD_Write+0x20c>)
 800353e:	f7ff f8af 	bl	80026a0 <LCD_Put_Str>

    osDelay(PERIOD_TASK_5 - TICK_DIFF_TASK_5);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	60fa      	str	r2, [r7, #12]
 8003548:	f44f 7216 	mov.w	r2, #600	; 0x258
 800354c:	fb02 f403 	mul.w	r4, r2, r3
 8003550:	f001 fe83 	bl	800525a <osKernelSysTick>
 8003554:	4603      	mov	r3, r0
 8003556:	1ae3      	subs	r3, r4, r3
 8003558:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fed8 	bl	8005312 <osDelay>
    ThrottleWhole = (int) ( potentiometerThrottle );
 8003562:	e726      	b.n	80033b2 <TASK_5_LCD_Write+0x16>
 8003564:	200005b8 	.word	0x200005b8
 8003568:	200005c0 	.word	0x200005c0
 800356c:	42c80000 	.word	0x42c80000
 8003570:	200005c4 	.word	0x200005c4
 8003574:	20000290 	.word	0x20000290
 8003578:	200005c8 	.word	0x200005c8
 800357c:	40590000 	.word	0x40590000
 8003580:	200005cc 	.word	0x200005cc
 8003584:	200005d0 	.word	0x200005d0
 8003588:	200005d4 	.word	0x200005d4
 800358c:	200005ac 	.word	0x200005ac
 8003590:	200005d8 	.word	0x200005d8
 8003594:	200005dc 	.word	0x200005dc
 8003598:	66666667 	.word	0x66666667
 800359c:	0800ca30 	.word	0x0800ca30
 80035a0:	200005e0 	.word	0x200005e0
 80035a4:	0800ca4c 	.word	0x0800ca4c
 80035a8:	200005f4 	.word	0x200005f4

080035ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a04      	ldr	r2, [pc, #16]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80035be:	f000 fbfb 	bl	8003db8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40000800 	.word	0x40000800

080035d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035d4:	b672      	cpsid	i
}
 80035d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035d8:	e7fe      	b.n	80035d8 <Error_Handler+0x8>
	...

080035dc <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80035e2:	2340      	movs	r3, #64	; 0x40
 80035e4:	617b      	str	r3, [r7, #20]
  real_T inf = 0.0;
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d10a      	bne.n	800360e <rtGetInf+0x32>
    inf = rtGetInfF();
 80035f8:	f000 f836 	bl	8003668 <rtGetInfF>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc ff12 	bl	8000428 <__aeabi_f2d>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800360c:	e022      	b.n	8003654 <rtGetInf+0x78>
  } else {
    uint16_T one = 1U;
 800360e:	2301      	movs	r3, #1
 8003610:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003612:	f107 0310 	add.w	r3, r7, #16
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b01      	cmp	r3, #1
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <rtGetInf+0x54>
 800362a:	2b01      	cmp	r3, #1
 800362c:	d009      	beq.n	8003642 <rtGetInf+0x66>
 800362e:	e011      	b.n	8003654 <rtGetInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8003630:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <rtGetInf+0x88>)
 8003632:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
        inf = tmpVal.fltVal;
 8003638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800363c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003640:	e008      	b.n	8003654 <rtGetInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <rtGetInf+0x88>)
 8003644:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003646:	2300      	movs	r3, #0
 8003648:	607b      	str	r3, [r7, #4]
        inf = tmpVal.fltVal;
 800364a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800364e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003652:	bf00      	nop
      }
    }
  }

  return inf;
 8003654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003658:	4610      	mov	r0, r2
 800365a:	4619      	mov	r1, r3
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	7ff00000 	.word	0x7ff00000

08003668 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800366e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8003672:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8003674:	687b      	ldr	r3, [r7, #4]
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003686:	2340      	movs	r3, #64	; 0x40
 8003688:	617b      	str	r3, [r7, #20]
  real_T minf = 0.0;
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b20      	cmp	r3, #32
 800369a:	d10a      	bne.n	80036b2 <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 800369c:	f000 f836 	bl	800370c <rtGetMinusInfF>
 80036a0:	4603      	mov	r3, r0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fc fec0 	bl	8000428 <__aeabi_f2d>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80036b0:	e022      	b.n	80036f8 <rtGetMinusInf+0x78>
  } else {
    uint16_T one = 1U;
 80036b2:	2301      	movs	r3, #1
 80036b4:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80036b6:	f107 0310 	add.w	r3, r7, #16
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	bf14      	ite	ne
 80036c0:	2301      	movne	r3, #1
 80036c2:	2300      	moveq	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <rtGetMinusInf+0x54>
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d009      	beq.n	80036e6 <rtGetMinusInf+0x66>
 80036d2:	e011      	b.n	80036f8 <rtGetMinusInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <rtGetMinusInf+0x88>)
 80036d6:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 80036d8:	2300      	movs	r3, #0
 80036da:	60bb      	str	r3, [r7, #8]
        minf = tmpVal.fltVal;
 80036dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 80036e4:	e008      	b.n	80036f8 <rtGetMinusInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <rtGetMinusInf+0x88>)
 80036e8:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
        minf = tmpVal.fltVal;
 80036ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 80036f6:	bf00      	nop
      }
    }
  }

  return minf;
 80036f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	fff00000 	.word	0xfff00000

0800370c <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8003712:	4b04      	ldr	r3, [pc, #16]	; (8003724 <rtGetMinusInfF+0x18>)
 8003714:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8003716:	687b      	ldr	r3, [r7, #4]
}
 8003718:	4618      	mov	r0, r3
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	ff800000 	.word	0xff800000

08003728 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800372e:	2340      	movs	r3, #64	; 0x40
 8003730:	617b      	str	r3, [r7, #20]
  real_T nan = 0.0;
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b20      	cmp	r3, #32
 8003742:	d10a      	bne.n	800375a <rtGetNaN+0x32>
    nan = rtGetNaNF();
 8003744:	f000 f838 	bl	80037b8 <rtGetNaNF>
 8003748:	4603      	mov	r3, r0
 800374a:	4618      	mov	r0, r3
 800374c:	f7fc fe6c 	bl	8000428 <__aeabi_f2d>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003758:	e024      	b.n	80037a4 <rtGetNaN+0x7c>
  } else {
    uint16_T one = 1U;
 800375a:	2301      	movs	r3, #1
 800375c:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 800375e:	f107 0310 	add.w	r3, r7, #16
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b01      	cmp	r3, #1
 8003766:	bf14      	ite	ne
 8003768:	2301      	movne	r3, #1
 800376a:	2300      	moveq	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <rtGetNaN+0x54>
 8003776:	2b01      	cmp	r3, #1
 8003778:	d009      	beq.n	800378e <rtGetNaN+0x66>
 800377a:	e013      	b.n	80037a4 <rtGetNaN+0x7c>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <rtGetNaN+0x8c>)
 800377e:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003780:	2300      	movs	r3, #0
 8003782:	60bb      	str	r3, [r7, #8]
        nan = tmpVal.fltVal;
 8003784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003788:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 800378c:	e00a      	b.n	80037a4 <rtGetNaN+0x7c>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;
 800378e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003792:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
 8003798:	607b      	str	r3, [r7, #4]
        nan = tmpVal.fltVal;
 800379a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800379e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 80037a2:	bf00      	nop
      }
    }
  }

  return nan;
 80037a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	fff80000 	.word	0xfff80000

080037b8 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]

  uint16_T one = 1U;
 80037c4:	2301      	movs	r3, #1
 80037c6:	80fb      	strh	r3, [r7, #6]
  enum {
    LittleEndian,
    BigEndian
  } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80037c8:	1dbb      	adds	r3, r7, #6
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	bf14      	ite	ne
 80037d0:	2301      	movne	r3, #1
 80037d2:	2300      	moveq	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	73fb      	strb	r3, [r7, #15]
  switch (machByteOrder) {
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <rtGetNaNF+0x2c>
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d003      	beq.n	80037ea <rtGetNaNF+0x32>
 80037e2:	e006      	b.n	80037f2 <rtGetNaNF+0x3a>
   case LittleEndian:
    {
      nanF.wordL.wordLuint = 0xFFC00000U;
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <rtGetNaNF+0x48>)
 80037e6:	60bb      	str	r3, [r7, #8]
      break;
 80037e8:	e003      	b.n	80037f2 <rtGetNaNF+0x3a>
    }

   case BigEndian:
    {
      nanF.wordL.wordLuint = 0x7FFFFFFFU;
 80037ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80037ee:	60bb      	str	r3, [r7, #8]
      break;
 80037f0:	bf00      	nop
    }
  }

  return nanF.wordL.wordLreal;
 80037f2:	68bb      	ldr	r3, [r7, #8]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	ffc00000 	.word	0xffc00000

08003804 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800380c:	f7ff ff8c 	bl	8003728 <rtGetNaN>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4911      	ldr	r1, [pc, #68]	; (800385c <rt_InitInfAndNaN+0x58>)
 8003816:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 800381a:	f7ff ffcd 	bl	80037b8 <rtGetNaNF>
 800381e:	4603      	mov	r3, r0
 8003820:	4a0f      	ldr	r2, [pc, #60]	; (8003860 <rt_InitInfAndNaN+0x5c>)
 8003822:	6013      	str	r3, [r2, #0]
  rtInf = rtGetInf();
 8003824:	f7ff feda 	bl	80035dc <rtGetInf>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	490d      	ldr	r1, [pc, #52]	; (8003864 <rt_InitInfAndNaN+0x60>)
 800382e:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 8003832:	f7ff ff19 	bl	8003668 <rtGetInfF>
 8003836:	4603      	mov	r3, r0
 8003838:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <rt_InitInfAndNaN+0x64>)
 800383a:	6013      	str	r3, [r2, #0]
  rtMinusInf = rtGetMinusInf();
 800383c:	f7ff ff20 	bl	8003680 <rtGetMinusInf>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4909      	ldr	r1, [pc, #36]	; (800386c <rt_InitInfAndNaN+0x68>)
 8003846:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 800384a:	f7ff ff5f 	bl	800370c <rtGetMinusInfF>
 800384e:	4603      	mov	r3, r0
 8003850:	4a07      	ldr	r2, [pc, #28]	; (8003870 <rt_InitInfAndNaN+0x6c>)
 8003852:	6013      	str	r3, [r2, #0]
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000618 	.word	0x20000618
 8003860:	20000628 	.word	0x20000628
 8003864:	20000608 	.word	0x20000608
 8003868:	20000620 	.word	0x20000620
 800386c:	20000610 	.word	0x20000610
 8003870:	20000624 	.word	0x20000624

08003874 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <rtIsInf+0x40>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003888:	f7fd f88e 	bl	80009a8 <__aeabi_dcmpeq>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <rtIsInf+0x32>
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <rtIsInf+0x44>)
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800389c:	f7fd f884 	bl	80009a8 <__aeabi_dcmpeq>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <rtIsInf+0x36>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <rtIsInf+0x38>
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20000608 	.word	0x20000608
 80038b8:	20000610 	.word	0x20000610

080038bc <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	e9c7 0100 	strd	r0, r1, [r7]
  boolean_T result = (boolean_T) 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80038cc:	2340      	movs	r3, #64	; 0x40
 80038ce:	623b      	str	r3, [r7, #32]
  if (bitsPerReal == 32U) {
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d10b      	bne.n	80038ee <rtIsNaN+0x32>
    result = rtIsNaNF((real32_T)value);
 80038d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038da:	f7fd f8f5 	bl	8000ac8 <__aeabi_d2f>
 80038de:	4603      	mov	r3, r0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 f84d 	bl	8003980 <rtIsNaNF>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038ec:	e040      	b.n	8003970 <rtIsNaN+0xb4>
  } else {
    uint16_T one = 1U;
 80038ee:	2301      	movs	r3, #1
 80038f0:	83bb      	strh	r3, [r7, #28]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80038f2:	f107 031c 	add.w	r3, r7, #28
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	77fb      	strb	r3, [r7, #31]
    switch (machByteOrder) {
 8003904:	7ffb      	ldrb	r3, [r7, #31]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <rtIsNaN+0x54>
 800390a:	2b01      	cmp	r3, #1
 800390c:	d018      	beq.n	8003940 <rtIsNaN+0x84>
 800390e:	e02f      	b.n	8003970 <rtIsNaN+0xb4>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8003910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003914:	e9c7 2304 	strd	r2, r3, [r7, #16]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4b18      	ldr	r3, [pc, #96]	; (800397c <rtIsNaN+0xc0>)
 800391c:	4013      	ands	r3, r2
                             0x7FF00000 &&
 800391e:	4a17      	ldr	r2, [pc, #92]	; (800397c <rtIsNaN+0xc0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d109      	bne.n	8003938 <rtIsNaN+0x7c>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <rtIsNaN+0x78>
                              (tmpVal.bitVal.words.wordL != 0) ));
 800392e:	693b      	ldr	r3, [r7, #16]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <rtIsNaN+0x7c>
                             0x7FF00000 &&
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <rtIsNaN+0x7e>
 8003938:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800393a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 800393e:	e017      	b.n	8003970 <rtIsNaN+0xb4>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8003940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003944:	e9c7 2302 	strd	r2, r3, [r7, #8]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	4b0c      	ldr	r3, [pc, #48]	; (800397c <rtIsNaN+0xc0>)
 800394c:	4013      	ands	r3, r2
                             0x7FF00000 &&
 800394e:	4a0b      	ldr	r2, [pc, #44]	; (800397c <rtIsNaN+0xc0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d109      	bne.n	8003968 <rtIsNaN+0xac>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <rtIsNaN+0xa8>
                              (tmpVal.bitVal.words.wordL != 0) ));
 800395e:	68fb      	ldr	r3, [r7, #12]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <rtIsNaN+0xac>
                             0x7FF00000 &&
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <rtIsNaN+0xae>
 8003968:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800396a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 800396e:	bf00      	nop
      }
    }
  }

  return result;
 8003970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003974:	4618      	mov	r0, r3
 8003976:	3728      	adds	r7, #40	; 0x28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	7ff00000 	.word	0x7ff00000

08003980 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8003992:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003996:	d106      	bne.n	80039a6 <rtIsNaNF+0x26>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <rtIsNaNF+0x26>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <rtIsNaNF+0x28>
 80039a6:	2300      	movs	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80039ba:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <HAL_MspInit+0x68>)
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <HAL_MspInit+0x68>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6193      	str	r3, [r2, #24]
 80039c6:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <HAL_MspInit+0x68>)
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_MspInit+0x68>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4a11      	ldr	r2, [pc, #68]	; (8003a1c <HAL_MspInit+0x68>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039dc:	61d3      	str	r3, [r2, #28]
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <HAL_MspInit+0x68>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039ea:	2200      	movs	r2, #0
 80039ec:	210f      	movs	r1, #15
 80039ee:	f06f 0001 	mvn.w	r0, #1
 80039f2:	f000 fab2 	bl	8003f5a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_MspInit+0x6c>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	4a04      	ldr	r2, [pc, #16]	; (8003a20 <HAL_MspInit+0x6c>)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40010000 	.word	0x40010000

08003a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 0310 	add.w	r3, r7, #16
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a15      	ldr	r2, [pc, #84]	; (8003a94 <HAL_UART_MspInit+0x70>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d123      	bne.n	8003a8c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <HAL_UART_MspInit+0x74>)
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <HAL_UART_MspInit+0x74>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4e:	61d3      	str	r3, [r2, #28]
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <HAL_UART_MspInit+0x74>)
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <HAL_UART_MspInit+0x74>)
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	4a0d      	ldr	r2, [pc, #52]	; (8003a98 <HAL_UART_MspInit+0x74>)
 8003a62:	f043 0304 	orr.w	r3, r3, #4
 8003a66:	6193      	str	r3, [r2, #24]
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_UART_MspInit+0x74>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a74:	230c      	movs	r3, #12
 8003a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a80:	f107 0310 	add.w	r3, r7, #16
 8003a84:	4619      	mov	r1, r3
 8003a86:	4805      	ldr	r0, [pc, #20]	; (8003a9c <HAL_UART_MspInit+0x78>)
 8003a88:	f000 fa92 	bl	8003fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a8c:	bf00      	nop
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40004400 	.word	0x40004400
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40010800 	.word	0x40010800

08003aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08e      	sub	sp, #56	; 0x38
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003ab6:	4b34      	ldr	r3, [pc, #208]	; (8003b88 <HAL_InitTick+0xe8>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	4a33      	ldr	r2, [pc, #204]	; (8003b88 <HAL_InitTick+0xe8>)
 8003abc:	f043 0304 	orr.w	r3, r3, #4
 8003ac0:	61d3      	str	r3, [r2, #28]
 8003ac2:	4b31      	ldr	r3, [pc, #196]	; (8003b88 <HAL_InitTick+0xe8>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ace:	f107 0210 	add.w	r2, r7, #16
 8003ad2:	f107 0314 	add.w	r3, r7, #20
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 f819 	bl	8004b10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ae8:	f000 ffea 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 8003aec:	6378      	str	r0, [r7, #52]	; 0x34
 8003aee:	e004      	b.n	8003afa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003af0:	f000 ffe6 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 8003af4:	4603      	mov	r3, r0
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afc:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <HAL_InitTick+0xec>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	0c9b      	lsrs	r3, r3, #18
 8003b04:	3b01      	subs	r3, #1
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003b08:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <HAL_InitTick+0xf0>)
 8003b0a:	4a22      	ldr	r2, [pc, #136]	; (8003b94 <HAL_InitTick+0xf4>)
 8003b0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003b0e:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <HAL_InitTick+0xf0>)
 8003b10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b14:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003b16:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <HAL_InitTick+0xf0>)
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <HAL_InitTick+0xf0>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b22:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_InitTick+0xf0>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_InitTick+0xf0>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003b2e:	4818      	ldr	r0, [pc, #96]	; (8003b90 <HAL_InitTick+0xf0>)
 8003b30:	f001 f83c 	bl	8004bac <HAL_TIM_Base_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003b3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d11b      	bne.n	8003b7a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003b42:	4813      	ldr	r0, [pc, #76]	; (8003b90 <HAL_InitTick+0xf0>)
 8003b44:	f001 f88a 	bl	8004c5c <HAL_TIM_Base_Start_IT>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003b4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d111      	bne.n	8003b7a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b56:	201e      	movs	r0, #30
 8003b58:	f000 fa1b 	bl	8003f92 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b0f      	cmp	r3, #15
 8003b60:	d808      	bhi.n	8003b74 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003b62:	2200      	movs	r2, #0
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	201e      	movs	r0, #30
 8003b68:	f000 f9f7 	bl	8003f5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b6c:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <HAL_InitTick+0xf8>)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e002      	b.n	8003b7a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003b7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3738      	adds	r7, #56	; 0x38
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	431bde83 	.word	0x431bde83
 8003b90:	2000062c 	.word	0x2000062c
 8003b94:	40000800 	.word	0x40000800
 8003b98:	20000020 	.word	0x20000020

08003b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ba0:	e7fe      	b.n	8003ba0 <NMI_Handler+0x4>

08003ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ba6:	e7fe      	b.n	8003ba6 <HardFault_Handler+0x4>

08003ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bac:	e7fe      	b.n	8003bac <MemManage_Handler+0x4>

08003bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bb2:	e7fe      	b.n	8003bb2 <BusFault_Handler+0x4>

08003bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bb8:	e7fe      	b.n	8003bb8 <UsageFault_Handler+0x4>

08003bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
	...

08003bc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <TIM4_IRQHandler+0x10>)
 8003bce:	f001 f897 	bl	8004d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	2000062c 	.word	0x2000062c

08003bdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003be0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003be4:	f000 fb80 	bl	80042e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}

08003bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return 1;
 8003bf0:	2301      	movs	r3, #1
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <_kill>:

int _kill(int pid, int sig)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c04:	f004 fb22 	bl	800824c <__errno>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2216      	movs	r2, #22
 8003c0c:	601a      	str	r2, [r3, #0]
  return -1;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <_exit>:

void _exit (int status)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c22:	f04f 31ff 	mov.w	r1, #4294967295
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ffe7 	bl	8003bfa <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c2c:	e7fe      	b.n	8003c2c <_exit+0x12>

08003c2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e00a      	b.n	8003c56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c40:	f3af 8000 	nop.w
 8003c44:	4601      	mov	r1, r0
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	60ba      	str	r2, [r7, #8]
 8003c4c:	b2ca      	uxtb	r2, r1
 8003c4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3301      	adds	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	dbf0      	blt.n	8003c40 <_read+0x12>
  }

  return len;
 8003c5e:	687b      	ldr	r3, [r7, #4]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c8e:	605a      	str	r2, [r3, #4]
  return 0;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <_isatty>:

int _isatty(int file)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ca4:	2301      	movs	r3, #1
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cd0:	4a14      	ldr	r2, [pc, #80]	; (8003d24 <_sbrk+0x5c>)
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <_sbrk+0x60>)
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cdc:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <_sbrk+0x64>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d102      	bne.n	8003cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <_sbrk+0x64>)
 8003ce6:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <_sbrk+0x68>)
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <_sbrk+0x64>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d207      	bcs.n	8003d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cf8:	f004 faa8 	bl	800824c <__errno>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	220c      	movs	r2, #12
 8003d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d02:	f04f 33ff 	mov.w	r3, #4294967295
 8003d06:	e009      	b.n	8003d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d08:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <_sbrk+0x64>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <_sbrk+0x64>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <_sbrk+0x64>)
 8003d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20005000 	.word	0x20005000
 8003d28:	00000400 	.word	0x00000400
 8003d2c:	20000674 	.word	0x20000674
 8003d30:	20001918 	.word	0x20001918

08003d34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <Reset_Handler>:
 8003d40:	f7ff fff8 	bl	8003d34 <SystemInit>
 8003d44:	480b      	ldr	r0, [pc, #44]	; (8003d74 <LoopFillZerobss+0xe>)
 8003d46:	490c      	ldr	r1, [pc, #48]	; (8003d78 <LoopFillZerobss+0x12>)
 8003d48:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <LoopFillZerobss+0x16>)
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e002      	b.n	8003d54 <LoopCopyDataInit>

08003d4e <CopyDataInit>:
 8003d4e:	58d4      	ldr	r4, [r2, r3]
 8003d50:	50c4      	str	r4, [r0, r3]
 8003d52:	3304      	adds	r3, #4

08003d54 <LoopCopyDataInit>:
 8003d54:	18c4      	adds	r4, r0, r3
 8003d56:	428c      	cmp	r4, r1
 8003d58:	d3f9      	bcc.n	8003d4e <CopyDataInit>
 8003d5a:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <LoopFillZerobss+0x1a>)
 8003d5c:	4c09      	ldr	r4, [pc, #36]	; (8003d84 <LoopFillZerobss+0x1e>)
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e001      	b.n	8003d66 <LoopFillZerobss>

08003d62 <FillZerobss>:
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	3204      	adds	r2, #4

08003d66 <LoopFillZerobss>:
 8003d66:	42a2      	cmp	r2, r4
 8003d68:	d3fb      	bcc.n	8003d62 <FillZerobss>
 8003d6a:	f004 fa75 	bl	8008258 <__libc_init_array>
 8003d6e:	f7fe ffeb 	bl	8002d48 <main>
 8003d72:	4770      	bx	lr
 8003d74:	20000000 	.word	0x20000000
 8003d78:	20000208 	.word	0x20000208
 8003d7c:	0800d780 	.word	0x0800d780
 8003d80:	20000208 	.word	0x20000208
 8003d84:	20001914 	.word	0x20001914

08003d88 <ADC1_2_IRQHandler>:
 8003d88:	e7fe      	b.n	8003d88 <ADC1_2_IRQHandler>
	...

08003d8c <HAL_Init>:
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <HAL_Init+0x28>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a07      	ldr	r2, [pc, #28]	; (8003db4 <HAL_Init+0x28>)
 8003d96:	f043 0310 	orr.w	r3, r3, #16
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	2003      	movs	r0, #3
 8003d9e:	f000 f8d1 	bl	8003f44 <HAL_NVIC_SetPriorityGrouping>
 8003da2:	200f      	movs	r0, #15
 8003da4:	f7ff fe7c 	bl	8003aa0 <HAL_InitTick>
 8003da8:	f7ff fe04 	bl	80039b4 <HAL_MspInit>
 8003dac:	2300      	movs	r3, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40022000 	.word	0x40022000

08003db8 <HAL_IncTick>:
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_IncTick+0x1c>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_IncTick+0x20>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	4a03      	ldr	r2, [pc, #12]	; (8003dd8 <HAL_IncTick+0x20>)
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	20000024 	.word	0x20000024
 8003dd8:	20000678 	.word	0x20000678

08003ddc <HAL_GetTick>:
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	4b02      	ldr	r3, [pc, #8]	; (8003dec <HAL_GetTick+0x10>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	20000678 	.word	0x20000678

08003df0 <__NVIC_SetPriorityGrouping>:
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <__NVIC_SetPriorityGrouping+0x44>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	021a      	lsls	r2, r3, #8
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	4a04      	ldr	r2, [pc, #16]	; (8003e34 <__NVIC_SetPriorityGrouping+0x44>)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	60d3      	str	r3, [r2, #12]
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <__NVIC_GetPriorityGrouping>:
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <__NVIC_GetPriorityGrouping+0x18>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	0a1b      	lsrs	r3, r3, #8
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	4618      	mov	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	e000ed00 	.word	0xe000ed00

08003e54 <__NVIC_EnableIRQ>:
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	71fb      	strb	r3, [r7, #7]
 8003e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	db0b      	blt.n	8003e7e <__NVIC_EnableIRQ+0x2a>
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	f003 021f 	and.w	r2, r3, #31
 8003e6c:	4906      	ldr	r1, [pc, #24]	; (8003e88 <__NVIC_EnableIRQ+0x34>)
 8003e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	2001      	movs	r0, #1
 8003e76:	fa00 f202 	lsl.w	r2, r0, r2
 8003e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	e000e100 	.word	0xe000e100

08003e8c <__NVIC_SetPriority>:
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	6039      	str	r1, [r7, #0]
 8003e96:	71fb      	strb	r3, [r7, #7]
 8003e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	db0a      	blt.n	8003eb6 <__NVIC_SetPriority+0x2a>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	490c      	ldr	r1, [pc, #48]	; (8003ed8 <__NVIC_SetPriority+0x4c>)
 8003ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eaa:	0112      	lsls	r2, r2, #4
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	440b      	add	r3, r1
 8003eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003eb4:	e00a      	b.n	8003ecc <__NVIC_SetPriority+0x40>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4908      	ldr	r1, [pc, #32]	; (8003edc <__NVIC_SetPriority+0x50>)
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	3b04      	subs	r3, #4
 8003ec4:	0112      	lsls	r2, r2, #4
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	440b      	add	r3, r1
 8003eca:	761a      	strb	r2, [r3, #24]
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	e000e100 	.word	0xe000e100
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <NVIC_EncodePriority>:
 8003ee0:	b480      	push	{r7}
 8003ee2:	b089      	sub	sp, #36	; 0x24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f1c3 0307 	rsb	r3, r3, #7
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	bf28      	it	cs
 8003efe:	2304      	movcs	r3, #4
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3304      	adds	r3, #4
 8003f06:	2b06      	cmp	r3, #6
 8003f08:	d902      	bls.n	8003f10 <NVIC_EncodePriority+0x30>
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	3b03      	subs	r3, #3
 8003f0e:	e000      	b.n	8003f12 <NVIC_EncodePriority+0x32>
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	f04f 32ff 	mov.w	r2, #4294967295
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43da      	mvns	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	401a      	ands	r2, r3
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	409a      	lsls	r2, r3
 8003f28:	f04f 31ff 	mov.w	r1, #4294967295
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f32:	43d9      	mvns	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	400b      	ands	r3, r1
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3724      	adds	r7, #36	; 0x24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <HAL_NVIC_SetPriorityGrouping>:
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff ff4f 	bl	8003df0 <__NVIC_SetPriorityGrouping>
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_NVIC_SetPriority>:
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b086      	sub	sp, #24
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	4603      	mov	r3, r0
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	73fb      	strb	r3, [r7, #15]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	f7ff ff64 	bl	8003e38 <__NVIC_GetPriorityGrouping>
 8003f70:	6178      	str	r0, [r7, #20]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7ff ffb2 	bl	8003ee0 <NVIC_EncodePriority>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff81 	bl	8003e8c <__NVIC_SetPriority>
 8003f8a:	bf00      	nop
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_NVIC_EnableIRQ>:
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	4603      	mov	r3, r0
 8003f9a:	71fb      	strb	r3, [r7, #7]
 8003f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff57 	bl	8003e54 <__NVIC_EnableIRQ>
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <HAL_GPIO_Init>:
 8003fb0:	b480      	push	{r7}
 8003fb2:	b08b      	sub	sp, #44	; 0x2c
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	623b      	str	r3, [r7, #32]
 8003fc2:	e169      	b.n	8004298 <HAL_GPIO_Init+0x2e8>
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	f040 8158 	bne.w	8004292 <HAL_GPIO_Init+0x2e2>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4a9a      	ldr	r2, [pc, #616]	; (8004250 <HAL_GPIO_Init+0x2a0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d05e      	beq.n	80040aa <HAL_GPIO_Init+0xfa>
 8003fec:	4a98      	ldr	r2, [pc, #608]	; (8004250 <HAL_GPIO_Init+0x2a0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d875      	bhi.n	80040de <HAL_GPIO_Init+0x12e>
 8003ff2:	4a98      	ldr	r2, [pc, #608]	; (8004254 <HAL_GPIO_Init+0x2a4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d058      	beq.n	80040aa <HAL_GPIO_Init+0xfa>
 8003ff8:	4a96      	ldr	r2, [pc, #600]	; (8004254 <HAL_GPIO_Init+0x2a4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d86f      	bhi.n	80040de <HAL_GPIO_Init+0x12e>
 8003ffe:	4a96      	ldr	r2, [pc, #600]	; (8004258 <HAL_GPIO_Init+0x2a8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d052      	beq.n	80040aa <HAL_GPIO_Init+0xfa>
 8004004:	4a94      	ldr	r2, [pc, #592]	; (8004258 <HAL_GPIO_Init+0x2a8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d869      	bhi.n	80040de <HAL_GPIO_Init+0x12e>
 800400a:	4a94      	ldr	r2, [pc, #592]	; (800425c <HAL_GPIO_Init+0x2ac>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d04c      	beq.n	80040aa <HAL_GPIO_Init+0xfa>
 8004010:	4a92      	ldr	r2, [pc, #584]	; (800425c <HAL_GPIO_Init+0x2ac>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d863      	bhi.n	80040de <HAL_GPIO_Init+0x12e>
 8004016:	4a92      	ldr	r2, [pc, #584]	; (8004260 <HAL_GPIO_Init+0x2b0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d046      	beq.n	80040aa <HAL_GPIO_Init+0xfa>
 800401c:	4a90      	ldr	r2, [pc, #576]	; (8004260 <HAL_GPIO_Init+0x2b0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d85d      	bhi.n	80040de <HAL_GPIO_Init+0x12e>
 8004022:	2b12      	cmp	r3, #18
 8004024:	d82a      	bhi.n	800407c <HAL_GPIO_Init+0xcc>
 8004026:	2b12      	cmp	r3, #18
 8004028:	d859      	bhi.n	80040de <HAL_GPIO_Init+0x12e>
 800402a:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <HAL_GPIO_Init+0x80>)
 800402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004030:	080040ab 	.word	0x080040ab
 8004034:	08004085 	.word	0x08004085
 8004038:	08004097 	.word	0x08004097
 800403c:	080040d9 	.word	0x080040d9
 8004040:	080040df 	.word	0x080040df
 8004044:	080040df 	.word	0x080040df
 8004048:	080040df 	.word	0x080040df
 800404c:	080040df 	.word	0x080040df
 8004050:	080040df 	.word	0x080040df
 8004054:	080040df 	.word	0x080040df
 8004058:	080040df 	.word	0x080040df
 800405c:	080040df 	.word	0x080040df
 8004060:	080040df 	.word	0x080040df
 8004064:	080040df 	.word	0x080040df
 8004068:	080040df 	.word	0x080040df
 800406c:	080040df 	.word	0x080040df
 8004070:	080040df 	.word	0x080040df
 8004074:	0800408d 	.word	0x0800408d
 8004078:	080040a1 	.word	0x080040a1
 800407c:	4a79      	ldr	r2, [pc, #484]	; (8004264 <HAL_GPIO_Init+0x2b4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <HAL_GPIO_Init+0xfa>
 8004082:	e02c      	b.n	80040de <HAL_GPIO_Init+0x12e>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	e029      	b.n	80040e0 <HAL_GPIO_Init+0x130>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	3304      	adds	r3, #4
 8004092:	623b      	str	r3, [r7, #32]
 8004094:	e024      	b.n	80040e0 <HAL_GPIO_Init+0x130>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	3308      	adds	r3, #8
 800409c:	623b      	str	r3, [r7, #32]
 800409e:	e01f      	b.n	80040e0 <HAL_GPIO_Init+0x130>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	330c      	adds	r3, #12
 80040a6:	623b      	str	r3, [r7, #32]
 80040a8:	e01a      	b.n	80040e0 <HAL_GPIO_Init+0x130>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <HAL_GPIO_Init+0x108>
 80040b2:	2304      	movs	r3, #4
 80040b4:	623b      	str	r3, [r7, #32]
 80040b6:	e013      	b.n	80040e0 <HAL_GPIO_Init+0x130>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d105      	bne.n	80040cc <HAL_GPIO_Init+0x11c>
 80040c0:	2308      	movs	r3, #8
 80040c2:	623b      	str	r3, [r7, #32]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	611a      	str	r2, [r3, #16]
 80040ca:	e009      	b.n	80040e0 <HAL_GPIO_Init+0x130>
 80040cc:	2308      	movs	r3, #8
 80040ce:	623b      	str	r3, [r7, #32]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	615a      	str	r2, [r3, #20]
 80040d6:	e003      	b.n	80040e0 <HAL_GPIO_Init+0x130>
 80040d8:	2300      	movs	r3, #0
 80040da:	623b      	str	r3, [r7, #32]
 80040dc:	e000      	b.n	80040e0 <HAL_GPIO_Init+0x130>
 80040de:	bf00      	nop
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2bff      	cmp	r3, #255	; 0xff
 80040e4:	d801      	bhi.n	80040ea <HAL_GPIO_Init+0x13a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	e001      	b.n	80040ee <HAL_GPIO_Init+0x13e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3304      	adds	r3, #4
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2bff      	cmp	r3, #255	; 0xff
 80040f4:	d802      	bhi.n	80040fc <HAL_GPIO_Init+0x14c>
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	e002      	b.n	8004102 <HAL_GPIO_Init+0x152>
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	3b08      	subs	r3, #8
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	210f      	movs	r1, #15
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	401a      	ands	r2, r3
 8004114:	6a39      	ldr	r1, [r7, #32]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	fa01 f303 	lsl.w	r3, r1, r3
 800411c:	431a      	orrs	r2, r3
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 80b1 	beq.w	8004292 <HAL_GPIO_Init+0x2e2>
 8004130:	4b4d      	ldr	r3, [pc, #308]	; (8004268 <HAL_GPIO_Init+0x2b8>)
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	4a4c      	ldr	r2, [pc, #304]	; (8004268 <HAL_GPIO_Init+0x2b8>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	6193      	str	r3, [r2, #24]
 800413c:	4b4a      	ldr	r3, [pc, #296]	; (8004268 <HAL_GPIO_Init+0x2b8>)
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4a48      	ldr	r2, [pc, #288]	; (800426c <HAL_GPIO_Init+0x2bc>)
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	089b      	lsrs	r3, r3, #2
 800414e:	3302      	adds	r3, #2
 8004150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	220f      	movs	r2, #15
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4013      	ands	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a40      	ldr	r2, [pc, #256]	; (8004270 <HAL_GPIO_Init+0x2c0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d013      	beq.n	800419c <HAL_GPIO_Init+0x1ec>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a3f      	ldr	r2, [pc, #252]	; (8004274 <HAL_GPIO_Init+0x2c4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00d      	beq.n	8004198 <HAL_GPIO_Init+0x1e8>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3e      	ldr	r2, [pc, #248]	; (8004278 <HAL_GPIO_Init+0x2c8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d007      	beq.n	8004194 <HAL_GPIO_Init+0x1e4>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a3d      	ldr	r2, [pc, #244]	; (800427c <HAL_GPIO_Init+0x2cc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d101      	bne.n	8004190 <HAL_GPIO_Init+0x1e0>
 800418c:	2303      	movs	r3, #3
 800418e:	e006      	b.n	800419e <HAL_GPIO_Init+0x1ee>
 8004190:	2304      	movs	r3, #4
 8004192:	e004      	b.n	800419e <HAL_GPIO_Init+0x1ee>
 8004194:	2302      	movs	r3, #2
 8004196:	e002      	b.n	800419e <HAL_GPIO_Init+0x1ee>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <HAL_GPIO_Init+0x1ee>
 800419c:	2300      	movs	r3, #0
 800419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a0:	f002 0203 	and.w	r2, r2, #3
 80041a4:	0092      	lsls	r2, r2, #2
 80041a6:	4093      	lsls	r3, r2
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	492f      	ldr	r1, [pc, #188]	; (800426c <HAL_GPIO_Init+0x2bc>)
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	3302      	adds	r3, #2
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d006      	beq.n	80041d6 <HAL_GPIO_Init+0x226>
 80041c8:	4b2d      	ldr	r3, [pc, #180]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	492c      	ldr	r1, [pc, #176]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]
 80041d4:	e006      	b.n	80041e4 <HAL_GPIO_Init+0x234>
 80041d6:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	43db      	mvns	r3, r3
 80041de:	4928      	ldr	r1, [pc, #160]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	608b      	str	r3, [r1, #8]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d006      	beq.n	80041fe <HAL_GPIO_Init+0x24e>
 80041f0:	4b23      	ldr	r3, [pc, #140]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	4922      	ldr	r1, [pc, #136]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60cb      	str	r3, [r1, #12]
 80041fc:	e006      	b.n	800420c <HAL_GPIO_Init+0x25c>
 80041fe:	4b20      	ldr	r3, [pc, #128]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	43db      	mvns	r3, r3
 8004206:	491e      	ldr	r1, [pc, #120]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 8004208:	4013      	ands	r3, r2
 800420a:	60cb      	str	r3, [r1, #12]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d006      	beq.n	8004226 <HAL_GPIO_Init+0x276>
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	4918      	ldr	r1, [pc, #96]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]
 8004224:	e006      	b.n	8004234 <HAL_GPIO_Init+0x284>
 8004226:	4b16      	ldr	r3, [pc, #88]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	43db      	mvns	r3, r3
 800422e:	4914      	ldr	r1, [pc, #80]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 8004230:	4013      	ands	r3, r2
 8004232:	604b      	str	r3, [r1, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d021      	beq.n	8004284 <HAL_GPIO_Init+0x2d4>
 8004240:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	490e      	ldr	r1, [pc, #56]	; (8004280 <HAL_GPIO_Init+0x2d0>)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]
 800424c:	e021      	b.n	8004292 <HAL_GPIO_Init+0x2e2>
 800424e:	bf00      	nop
 8004250:	10320000 	.word	0x10320000
 8004254:	10310000 	.word	0x10310000
 8004258:	10220000 	.word	0x10220000
 800425c:	10210000 	.word	0x10210000
 8004260:	10120000 	.word	0x10120000
 8004264:	10110000 	.word	0x10110000
 8004268:	40021000 	.word	0x40021000
 800426c:	40010000 	.word	0x40010000
 8004270:	40010800 	.word	0x40010800
 8004274:	40010c00 	.word	0x40010c00
 8004278:	40011000 	.word	0x40011000
 800427c:	40011400 	.word	0x40011400
 8004280:	40010400 	.word	0x40010400
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_GPIO_Init+0x304>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	43db      	mvns	r3, r3
 800428c:	4909      	ldr	r1, [pc, #36]	; (80042b4 <HAL_GPIO_Init+0x304>)
 800428e:	4013      	ands	r3, r2
 8004290:	600b      	str	r3, [r1, #0]
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	3301      	adds	r3, #1
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	fa22 f303 	lsr.w	r3, r2, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f47f ae8e 	bne.w	8003fc4 <HAL_GPIO_Init+0x14>
 80042a8:	bf00      	nop
 80042aa:	bf00      	nop
 80042ac:	372c      	adds	r7, #44	; 0x2c
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr
 80042b4:	40010400 	.word	0x40010400

080042b8 <HAL_GPIO_WritePin>:
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	807b      	strh	r3, [r7, #2]
 80042c4:	4613      	mov	r3, r2
 80042c6:	707b      	strb	r3, [r7, #1]
 80042c8:	787b      	ldrb	r3, [r7, #1]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_GPIO_WritePin+0x1e>
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	611a      	str	r2, [r3, #16]
 80042d4:	e003      	b.n	80042de <HAL_GPIO_WritePin+0x26>
 80042d6:	887b      	ldrh	r3, [r7, #2]
 80042d8:	041a      	lsls	r2, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	611a      	str	r2, [r3, #16]
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <HAL_GPIO_EXTI_IRQHandler>:
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	80fb      	strh	r3, [r7, #6]
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d006      	beq.n	800430c <HAL_GPIO_EXTI_IRQHandler+0x24>
 80042fe:	4a05      	ldr	r2, [pc, #20]	; (8004314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	6153      	str	r3, [r2, #20]
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f806 	bl	8004318 <HAL_GPIO_EXTI_Callback>
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40010400 	.word	0x40010400

08004318 <HAL_GPIO_EXTI_Callback>:
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	80fb      	strh	r3, [r7, #6]
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <HAL_RCC_OscConfig>:
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x12>
 800433a:	2301      	movs	r3, #1
 800433c:	e272      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8087 	beq.w	800445a <HAL_RCC_OscConfig+0x12e>
 800434c:	4b92      	ldr	r3, [pc, #584]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	2b04      	cmp	r3, #4
 8004356:	d00c      	beq.n	8004372 <HAL_RCC_OscConfig+0x46>
 8004358:	4b8f      	ldr	r3, [pc, #572]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 030c 	and.w	r3, r3, #12
 8004360:	2b08      	cmp	r3, #8
 8004362:	d112      	bne.n	800438a <HAL_RCC_OscConfig+0x5e>
 8004364:	4b8c      	ldr	r3, [pc, #560]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004370:	d10b      	bne.n	800438a <HAL_RCC_OscConfig+0x5e>
 8004372:	4b89      	ldr	r3, [pc, #548]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d06c      	beq.n	8004458 <HAL_RCC_OscConfig+0x12c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d168      	bne.n	8004458 <HAL_RCC_OscConfig+0x12c>
 8004386:	2301      	movs	r3, #1
 8004388:	e24c      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004392:	d106      	bne.n	80043a2 <HAL_RCC_OscConfig+0x76>
 8004394:	4b80      	ldr	r3, [pc, #512]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a7f      	ldr	r2, [pc, #508]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 800439a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	e02e      	b.n	8004400 <HAL_RCC_OscConfig+0xd4>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x98>
 80043aa:	4b7b      	ldr	r3, [pc, #492]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a7a      	ldr	r2, [pc, #488]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	4b78      	ldr	r3, [pc, #480]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a77      	ldr	r2, [pc, #476]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e01d      	b.n	8004400 <HAL_RCC_OscConfig+0xd4>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0xbc>
 80043ce:	4b72      	ldr	r3, [pc, #456]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a71      	ldr	r2, [pc, #452]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b6f      	ldr	r3, [pc, #444]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6e      	ldr	r2, [pc, #440]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e00b      	b.n	8004400 <HAL_RCC_OscConfig+0xd4>
 80043e8:	4b6b      	ldr	r3, [pc, #428]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a6a      	ldr	r2, [pc, #424]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80043ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b68      	ldr	r3, [pc, #416]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a67      	ldr	r2, [pc, #412]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80043fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d013      	beq.n	8004430 <HAL_RCC_OscConfig+0x104>
 8004408:	f7ff fce8 	bl	8003ddc <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0xf6>
 8004410:	f7ff fce4 	bl	8003ddc <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	; 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0xf6>
 800441e:	2303      	movs	r3, #3
 8004420:	e200      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 8004422:	4b5d      	ldr	r3, [pc, #372]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0xe4>
 800442e:	e014      	b.n	800445a <HAL_RCC_OscConfig+0x12e>
 8004430:	f7ff fcd4 	bl	8003ddc <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x11e>
 8004438:	f7ff fcd0 	bl	8003ddc <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x11e>
 8004446:	2303      	movs	r3, #3
 8004448:	e1ec      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 800444a:	4b53      	ldr	r3, [pc, #332]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x10c>
 8004456:	e000      	b.n	800445a <HAL_RCC_OscConfig+0x12e>
 8004458:	bf00      	nop
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d063      	beq.n	800452e <HAL_RCC_OscConfig+0x202>
 8004466:	4b4c      	ldr	r3, [pc, #304]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_RCC_OscConfig+0x15e>
 8004472:	4b49      	ldr	r3, [pc, #292]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	2b08      	cmp	r3, #8
 800447c:	d11c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x18c>
 800447e:	4b46      	ldr	r3, [pc, #280]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d116      	bne.n	80044b8 <HAL_RCC_OscConfig+0x18c>
 800448a:	4b43      	ldr	r3, [pc, #268]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <HAL_RCC_OscConfig+0x176>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d001      	beq.n	80044a2 <HAL_RCC_OscConfig+0x176>
 800449e:	2301      	movs	r3, #1
 80044a0:	e1c0      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 80044a2:	4b3d      	ldr	r3, [pc, #244]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4939      	ldr	r1, [pc, #228]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]
 80044b6:	e03a      	b.n	800452e <HAL_RCC_OscConfig+0x202>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d020      	beq.n	8004502 <HAL_RCC_OscConfig+0x1d6>
 80044c0:	4b36      	ldr	r3, [pc, #216]	; (800459c <HAL_RCC_OscConfig+0x270>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	f7ff fc89 	bl	8003ddc <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x1b4>
 80044ce:	f7ff fc85 	bl	8003ddc <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x1b4>
 80044dc:	2303      	movs	r3, #3
 80044de:	e1a1      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 80044e0:	4b2d      	ldr	r3, [pc, #180]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x1a2>
 80044ec:	4b2a      	ldr	r3, [pc, #168]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4927      	ldr	r1, [pc, #156]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	600b      	str	r3, [r1, #0]
 8004500:	e015      	b.n	800452e <HAL_RCC_OscConfig+0x202>
 8004502:	4b26      	ldr	r3, [pc, #152]	; (800459c <HAL_RCC_OscConfig+0x270>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	f7ff fc68 	bl	8003ddc <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x1f6>
 8004510:	f7ff fc64 	bl	8003ddc <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x1f6>
 800451e:	2303      	movs	r3, #3
 8004520:	e180      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 8004522:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x1e4>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d03a      	beq.n	80045b0 <HAL_RCC_OscConfig+0x284>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d019      	beq.n	8004576 <HAL_RCC_OscConfig+0x24a>
 8004542:	4b17      	ldr	r3, [pc, #92]	; (80045a0 <HAL_RCC_OscConfig+0x274>)
 8004544:	2201      	movs	r2, #1
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	f7ff fc48 	bl	8003ddc <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x236>
 8004550:	f7ff fc44 	bl	8003ddc <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x236>
 800455e:	2303      	movs	r3, #3
 8004560:	e160      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 8004562:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <HAL_RCC_OscConfig+0x26c>)
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0x224>
 800456e:	2001      	movs	r0, #1
 8004570:	f000 fafe 	bl	8004b70 <RCC_Delay>
 8004574:	e01c      	b.n	80045b0 <HAL_RCC_OscConfig+0x284>
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <HAL_RCC_OscConfig+0x274>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	f7ff fc2e 	bl	8003ddc <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]
 8004582:	e00f      	b.n	80045a4 <HAL_RCC_OscConfig+0x278>
 8004584:	f7ff fc2a 	bl	8003ddc <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d908      	bls.n	80045a4 <HAL_RCC_OscConfig+0x278>
 8004592:	2303      	movs	r3, #3
 8004594:	e146      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 8004596:	bf00      	nop
 8004598:	40021000 	.word	0x40021000
 800459c:	42420000 	.word	0x42420000
 80045a0:	42420480 	.word	0x42420480
 80045a4:	4b92      	ldr	r3, [pc, #584]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e9      	bne.n	8004584 <HAL_RCC_OscConfig+0x258>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80a6 	beq.w	800470a <HAL_RCC_OscConfig+0x3de>
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]
 80045c2:	4b8b      	ldr	r3, [pc, #556]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10d      	bne.n	80045ea <HAL_RCC_OscConfig+0x2be>
 80045ce:	4b88      	ldr	r3, [pc, #544]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	4a87      	ldr	r2, [pc, #540]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d8:	61d3      	str	r3, [r2, #28]
 80045da:	4b85      	ldr	r3, [pc, #532]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e2:	60bb      	str	r3, [r7, #8]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2301      	movs	r3, #1
 80045e8:	75fb      	strb	r3, [r7, #23]
 80045ea:	4b82      	ldr	r3, [pc, #520]	; (80047f4 <HAL_RCC_OscConfig+0x4c8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d118      	bne.n	8004628 <HAL_RCC_OscConfig+0x2fc>
 80045f6:	4b7f      	ldr	r3, [pc, #508]	; (80047f4 <HAL_RCC_OscConfig+0x4c8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a7e      	ldr	r2, [pc, #504]	; (80047f4 <HAL_RCC_OscConfig+0x4c8>)
 80045fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	f7ff fbeb 	bl	8003ddc <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x2f0>
 800460a:	f7ff fbe7 	bl	8003ddc <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b64      	cmp	r3, #100	; 0x64
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x2f0>
 8004618:	2303      	movs	r3, #3
 800461a:	e103      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 800461c:	4b75      	ldr	r3, [pc, #468]	; (80047f4 <HAL_RCC_OscConfig+0x4c8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x2de>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d106      	bne.n	800463e <HAL_RCC_OscConfig+0x312>
 8004630:	4b6f      	ldr	r3, [pc, #444]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	4a6e      	ldr	r2, [pc, #440]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	6213      	str	r3, [r2, #32]
 800463c:	e02d      	b.n	800469a <HAL_RCC_OscConfig+0x36e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10c      	bne.n	8004660 <HAL_RCC_OscConfig+0x334>
 8004646:	4b6a      	ldr	r3, [pc, #424]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	4a69      	ldr	r2, [pc, #420]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	6213      	str	r3, [r2, #32]
 8004652:	4b67      	ldr	r3, [pc, #412]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	4a66      	ldr	r2, [pc, #408]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	f023 0304 	bic.w	r3, r3, #4
 800465c:	6213      	str	r3, [r2, #32]
 800465e:	e01c      	b.n	800469a <HAL_RCC_OscConfig+0x36e>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	2b05      	cmp	r3, #5
 8004666:	d10c      	bne.n	8004682 <HAL_RCC_OscConfig+0x356>
 8004668:	4b61      	ldr	r3, [pc, #388]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	4a60      	ldr	r2, [pc, #384]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 800466e:	f043 0304 	orr.w	r3, r3, #4
 8004672:	6213      	str	r3, [r2, #32]
 8004674:	4b5e      	ldr	r3, [pc, #376]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	4a5d      	ldr	r2, [pc, #372]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6213      	str	r3, [r2, #32]
 8004680:	e00b      	b.n	800469a <HAL_RCC_OscConfig+0x36e>
 8004682:	4b5b      	ldr	r3, [pc, #364]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	4a5a      	ldr	r2, [pc, #360]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	6213      	str	r3, [r2, #32]
 800468e:	4b58      	ldr	r3, [pc, #352]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	4a57      	ldr	r2, [pc, #348]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004694:	f023 0304 	bic.w	r3, r3, #4
 8004698:	6213      	str	r3, [r2, #32]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d015      	beq.n	80046ce <HAL_RCC_OscConfig+0x3a2>
 80046a2:	f7ff fb9b 	bl	8003ddc <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_OscConfig+0x394>
 80046aa:	f7ff fb97 	bl	8003ddc <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x394>
 80046bc:	2303      	movs	r3, #3
 80046be:	e0b1      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 80046c0:	4b4b      	ldr	r3, [pc, #300]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0ee      	beq.n	80046aa <HAL_RCC_OscConfig+0x37e>
 80046cc:	e014      	b.n	80046f8 <HAL_RCC_OscConfig+0x3cc>
 80046ce:	f7ff fb85 	bl	8003ddc <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]
 80046d4:	e00a      	b.n	80046ec <HAL_RCC_OscConfig+0x3c0>
 80046d6:	f7ff fb81 	bl	8003ddc <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x3c0>
 80046e8:	2303      	movs	r3, #3
 80046ea:	e09b      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 80046ec:	4b40      	ldr	r3, [pc, #256]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1ee      	bne.n	80046d6 <HAL_RCC_OscConfig+0x3aa>
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <HAL_RCC_OscConfig+0x3de>
 80046fe:	4b3c      	ldr	r3, [pc, #240]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	4a3b      	ldr	r2, [pc, #236]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004708:	61d3      	str	r3, [r2, #28]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8087 	beq.w	8004822 <HAL_RCC_OscConfig+0x4f6>
 8004714:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b08      	cmp	r3, #8
 800471e:	d061      	beq.n	80047e4 <HAL_RCC_OscConfig+0x4b8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d146      	bne.n	80047b6 <HAL_RCC_OscConfig+0x48a>
 8004728:	4b33      	ldr	r3, [pc, #204]	; (80047f8 <HAL_RCC_OscConfig+0x4cc>)
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	f7ff fb55 	bl	8003ddc <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x41c>
 8004736:	f7ff fb51 	bl	8003ddc <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x41c>
 8004744:	2303      	movs	r3, #3
 8004746:	e06d      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 8004748:	4b29      	ldr	r3, [pc, #164]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f0      	bne.n	8004736 <HAL_RCC_OscConfig+0x40a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475c:	d108      	bne.n	8004770 <HAL_RCC_OscConfig+0x444>
 800475e:	4b24      	ldr	r3, [pc, #144]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	4921      	ldr	r1, [pc, #132]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 800476c:	4313      	orrs	r3, r2
 800476e:	604b      	str	r3, [r1, #4]
 8004770:	4b1f      	ldr	r3, [pc, #124]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a19      	ldr	r1, [r3, #32]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	430b      	orrs	r3, r1
 8004782:	491b      	ldr	r1, [pc, #108]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 8004784:	4313      	orrs	r3, r2
 8004786:	604b      	str	r3, [r1, #4]
 8004788:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <HAL_RCC_OscConfig+0x4cc>)
 800478a:	2201      	movs	r2, #1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	f7ff fb25 	bl	8003ddc <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x47c>
 8004796:	f7ff fb21 	bl	8003ddc <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x47c>
 80047a4:	2303      	movs	r3, #3
 80047a6:	e03d      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 80047a8:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x46a>
 80047b4:	e035      	b.n	8004822 <HAL_RCC_OscConfig+0x4f6>
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <HAL_RCC_OscConfig+0x4cc>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	f7ff fb0e 	bl	8003ddc <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x4aa>
 80047c4:	f7ff fb0a 	bl	8003ddc <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x4aa>
 80047d2:	2303      	movs	r3, #3
 80047d4:	e026      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 80047d6:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x498>
 80047e2:	e01e      	b.n	8004822 <HAL_RCC_OscConfig+0x4f6>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d107      	bne.n	80047fc <HAL_RCC_OscConfig+0x4d0>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e019      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40007000 	.word	0x40007000
 80047f8:	42420060 	.word	0x42420060
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <HAL_RCC_OscConfig+0x500>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	429a      	cmp	r2, r3
 800480e:	d106      	bne.n	800481e <HAL_RCC_OscConfig+0x4f2>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	429a      	cmp	r2, r3
 800481c:	d001      	beq.n	8004822 <HAL_RCC_OscConfig+0x4f6>
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <HAL_RCC_OscConfig+0x4f8>
 8004822:	2300      	movs	r3, #0
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40021000 	.word	0x40021000

08004830 <HAL_RCC_ClockConfig>:
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_ClockConfig+0x14>
 8004840:	2301      	movs	r3, #1
 8004842:	e0d0      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1b6>
 8004844:	4b6a      	ldr	r3, [pc, #424]	; (80049f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d910      	bls.n	8004874 <HAL_RCC_ClockConfig+0x44>
 8004852:	4b67      	ldr	r3, [pc, #412]	; (80049f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 0207 	bic.w	r2, r3, #7
 800485a:	4965      	ldr	r1, [pc, #404]	; (80049f0 <HAL_RCC_ClockConfig+0x1c0>)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	4313      	orrs	r3, r2
 8004860:	600b      	str	r3, [r1, #0]
 8004862:	4b63      	ldr	r3, [pc, #396]	; (80049f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d001      	beq.n	8004874 <HAL_RCC_ClockConfig+0x44>
 8004870:	2301      	movs	r3, #1
 8004872:	e0b8      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1b6>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d020      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x92>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_RCC_ClockConfig+0x68>
 800488c:	4b59      	ldr	r3, [pc, #356]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4a58      	ldr	r2, [pc, #352]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004892:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004896:	6053      	str	r3, [r2, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x80>
 80048a4:	4b53      	ldr	r3, [pc, #332]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4a52      	ldr	r2, [pc, #328]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80048ae:	6053      	str	r3, [r2, #4]
 80048b0:	4b50      	ldr	r3, [pc, #320]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	494d      	ldr	r1, [pc, #308]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	604b      	str	r3, [r1, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d040      	beq.n	8004950 <HAL_RCC_ClockConfig+0x120>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d107      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xb6>
 80048d6:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d115      	bne.n	800490e <HAL_RCC_ClockConfig+0xde>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e07f      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1b6>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d107      	bne.n	80048fe <HAL_RCC_ClockConfig+0xce>
 80048ee:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <HAL_RCC_ClockConfig+0xde>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e073      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1b6>
 80048fe:	4b3d      	ldr	r3, [pc, #244]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_ClockConfig+0xde>
 800490a:	2301      	movs	r3, #1
 800490c:	e06b      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1b6>
 800490e:	4b39      	ldr	r3, [pc, #228]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f023 0203 	bic.w	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4936      	ldr	r1, [pc, #216]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
 8004920:	f7ff fa5c 	bl	8003ddc <HAL_GetTick>
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	e00a      	b.n	800493e <HAL_RCC_ClockConfig+0x10e>
 8004928:	f7ff fa58 	bl	8003ddc <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f241 3288 	movw	r2, #5000	; 0x1388
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_RCC_ClockConfig+0x10e>
 800493a:	2303      	movs	r3, #3
 800493c:	e053      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1b6>
 800493e:	4b2d      	ldr	r3, [pc, #180]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f003 020c 	and.w	r2, r3, #12
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	429a      	cmp	r2, r3
 800494e:	d1eb      	bne.n	8004928 <HAL_RCC_ClockConfig+0xf8>
 8004950:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d210      	bcs.n	8004980 <HAL_RCC_ClockConfig+0x150>
 800495e:	4b24      	ldr	r3, [pc, #144]	; (80049f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f023 0207 	bic.w	r2, r3, #7
 8004966:	4922      	ldr	r1, [pc, #136]	; (80049f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	4313      	orrs	r3, r2
 800496c:	600b      	str	r3, [r1, #0]
 800496e:	4b20      	ldr	r3, [pc, #128]	; (80049f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d001      	beq.n	8004980 <HAL_RCC_ClockConfig+0x150>
 800497c:	2301      	movs	r3, #1
 800497e:	e032      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1b6>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <HAL_RCC_ClockConfig+0x16e>
 800498c:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4916      	ldr	r1, [pc, #88]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d009      	beq.n	80049be <HAL_RCC_ClockConfig+0x18e>
 80049aa:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	490e      	ldr	r1, [pc, #56]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	604b      	str	r3, [r1, #4]
 80049be:	f000 f821 	bl	8004a04 <HAL_RCC_GetSysClockFreq>
 80049c2:	4602      	mov	r2, r0
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	490a      	ldr	r1, [pc, #40]	; (80049f8 <HAL_RCC_ClockConfig+0x1c8>)
 80049d0:	5ccb      	ldrb	r3, [r1, r3]
 80049d2:	fa22 f303 	lsr.w	r3, r2, r3
 80049d6:	4a09      	ldr	r2, [pc, #36]	; (80049fc <HAL_RCC_ClockConfig+0x1cc>)
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <HAL_RCC_ClockConfig+0x1d0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff f85e 	bl	8003aa0 <HAL_InitTick>
 80049e4:	2300      	movs	r3, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40022000 	.word	0x40022000
 80049f4:	40021000 	.word	0x40021000
 80049f8:	0800d2f0 	.word	0x0800d2f0
 80049fc:	2000001c 	.word	0x2000001c
 8004a00:	20000020 	.word	0x20000020

08004a04 <HAL_RCC_GetSysClockFreq>:
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	2300      	movs	r3, #0
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d002      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x30>
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d003      	beq.n	8004a3a <HAL_RCC_GetSysClockFreq+0x36>
 8004a32:	e027      	b.n	8004a84 <HAL_RCC_GetSysClockFreq+0x80>
 8004a34:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	e027      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0x86>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	0c9b      	lsrs	r3, r3, #18
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	4a17      	ldr	r2, [pc, #92]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a44:	5cd3      	ldrb	r3, [r2, r3]
 8004a46:	607b      	str	r3, [r7, #4]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d010      	beq.n	8004a74 <HAL_RCC_GetSysClockFreq+0x70>
 8004a52:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	0c5b      	lsrs	r3, r3, #17
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	4a11      	ldr	r2, [pc, #68]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a5e:	5cd3      	ldrb	r3, [r2, r3]
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a0d      	ldr	r2, [pc, #52]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a66:	fb03 f202 	mul.w	r2, r3, r2
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	e004      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x7a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a78:	fb02 f303 	mul.w	r3, r2, r3
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	e002      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0x86>
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	bf00      	nop
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	371c      	adds	r7, #28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	007a1200 	.word	0x007a1200
 8004aa0:	0800d308 	.word	0x0800d308
 8004aa4:	0800d318 	.word	0x0800d318
 8004aa8:	003d0900 	.word	0x003d0900

08004aac <HAL_RCC_GetHCLKFreq>:
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	4b02      	ldr	r3, [pc, #8]	; (8004abc <HAL_RCC_GetHCLKFreq+0x10>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	2000001c 	.word	0x2000001c

08004ac0 <HAL_RCC_GetPCLK1Freq>:
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	f7ff fff2 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	0a1b      	lsrs	r3, r3, #8
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4903      	ldr	r1, [pc, #12]	; (8004ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	0800d300 	.word	0x0800d300

08004ae8 <HAL_RCC_GetPCLK2Freq>:
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	f7ff ffde 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	0adb      	lsrs	r3, r3, #11
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4903      	ldr	r1, [pc, #12]	; (8004b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	0800d300 	.word	0x0800d300

08004b10 <HAL_RCC_GetClockConfig>:
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	220f      	movs	r2, #15
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <HAL_RCC_GetClockConfig+0x58>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 0203 	and.w	r2, r3, #3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <HAL_RCC_GetClockConfig+0x58>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_RCC_GetClockConfig+0x58>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	60da      	str	r2, [r3, #12]
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <HAL_RCC_GetClockConfig+0x58>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	08db      	lsrs	r3, r3, #3
 8004b4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	611a      	str	r2, [r3, #16]
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_RCC_GetClockConfig+0x5c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0207 	and.w	r2, r3, #7
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40022000 	.word	0x40022000

08004b70 <RCC_Delay>:
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <RCC_Delay+0x34>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <RCC_Delay+0x38>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	0a5b      	lsrs	r3, r3, #9
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	bf00      	nop
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1e5a      	subs	r2, r3, #1
 8004b92:	60fa      	str	r2, [r7, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1f9      	bne.n	8004b8c <RCC_Delay+0x1c>
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	2000001c 	.word	0x2000001c
 8004ba8:	10624dd3 	.word	0x10624dd3

08004bac <HAL_TIM_Base_Init>:
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_TIM_Base_Init+0x12>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e041      	b.n	8004c42 <HAL_TIM_Base_Init+0x96>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_TIM_Base_Init+0x2c>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f839 	bl	8004c4a <HAL_TIM_Base_MspInit>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f000 f9b4 	bl	8004f58 <TIM_Base_SetConfig>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c40:	2300      	movs	r3, #0
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_TIM_Base_MspInit>:
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <HAL_TIM_Base_Start_IT>:
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d001      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x18>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e03a      	b.n	8004cea <HAL_TIM_Base_Start_IT+0x8e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	60da      	str	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a18      	ldr	r2, [pc, #96]	; (8004cf4 <HAL_TIM_Base_Start_IT+0x98>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00e      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x58>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9e:	d009      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x58>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x58>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <HAL_TIM_Base_Start_IT+0xa0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d111      	bne.n	8004cd8 <HAL_TIM_Base_Start_IT+0x7c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b06      	cmp	r3, #6
 8004cc4:	d010      	beq.n	8004ce8 <HAL_TIM_Base_Start_IT+0x8c>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e007      	b.n	8004ce8 <HAL_TIM_Base_Start_IT+0x8c>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr
 8004cf4:	40012c00 	.word	0x40012c00
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800

08004d00 <HAL_TIM_IRQHandler>:
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d122      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x5c>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d11b      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x5c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0202 	mvn.w	r2, #2
 8004d2c:	611a      	str	r2, [r3, #16]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	771a      	strb	r2, [r3, #28]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x4a>
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f8ed 	bl	8004f22 <HAL_TIM_IC_CaptureCallback>
 8004d48:	e005      	b.n	8004d56 <HAL_TIM_IRQHandler+0x56>
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f8e0 	bl	8004f10 <HAL_TIM_OC_DelayElapsedCallback>
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f8ef 	bl	8004f34 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	771a      	strb	r2, [r3, #28]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d122      	bne.n	8004db0 <HAL_TIM_IRQHandler+0xb0>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d11b      	bne.n	8004db0 <HAL_TIM_IRQHandler+0xb0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0204 	mvn.w	r2, #4
 8004d80:	611a      	str	r2, [r3, #16]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2202      	movs	r2, #2
 8004d86:	771a      	strb	r2, [r3, #28]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_TIM_IRQHandler+0x9e>
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f8c3 	bl	8004f22 <HAL_TIM_IC_CaptureCallback>
 8004d9c:	e005      	b.n	8004daa <HAL_TIM_IRQHandler+0xaa>
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f8b6 	bl	8004f10 <HAL_TIM_OC_DelayElapsedCallback>
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f8c5 	bl	8004f34 <HAL_TIM_PWM_PulseFinishedCallback>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	771a      	strb	r2, [r3, #28]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d122      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x104>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d11b      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x104>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f06f 0208 	mvn.w	r2, #8
 8004dd4:	611a      	str	r2, [r3, #16]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2204      	movs	r2, #4
 8004dda:	771a      	strb	r2, [r3, #28]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_TIM_IRQHandler+0xf2>
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f899 	bl	8004f22 <HAL_TIM_IC_CaptureCallback>
 8004df0:	e005      	b.n	8004dfe <HAL_TIM_IRQHandler+0xfe>
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f88c 	bl	8004f10 <HAL_TIM_OC_DelayElapsedCallback>
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f89b 	bl	8004f34 <HAL_TIM_PWM_PulseFinishedCallback>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	771a      	strb	r2, [r3, #28]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	2b10      	cmp	r3, #16
 8004e10:	d122      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x158>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b10      	cmp	r3, #16
 8004e1e:	d11b      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x158>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0210 	mvn.w	r2, #16
 8004e28:	611a      	str	r2, [r3, #16]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	771a      	strb	r2, [r3, #28]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x146>
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f86f 	bl	8004f22 <HAL_TIM_IC_CaptureCallback>
 8004e44:	e005      	b.n	8004e52 <HAL_TIM_IRQHandler+0x152>
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f862 	bl	8004f10 <HAL_TIM_OC_DelayElapsedCallback>
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f871 	bl	8004f34 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	771a      	strb	r2, [r3, #28]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d10e      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x184>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d107      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x184>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0201 	mvn.w	r2, #1
 8004e7c:	611a      	str	r2, [r3, #16]
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fe fb94 	bl	80035ac <HAL_TIM_PeriodElapsedCallback>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8e:	2b80      	cmp	r3, #128	; 0x80
 8004e90:	d10e      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x1b0>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9c:	2b80      	cmp	r3, #128	; 0x80
 8004e9e:	d107      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x1b0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ea8:	611a      	str	r2, [r3, #16]
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f8bf 	bl	800502e <HAL_TIMEx_BreakCallback>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b40      	cmp	r3, #64	; 0x40
 8004ebc:	d10e      	bne.n	8004edc <HAL_TIM_IRQHandler+0x1dc>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec8:	2b40      	cmp	r3, #64	; 0x40
 8004eca:	d107      	bne.n	8004edc <HAL_TIM_IRQHandler+0x1dc>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ed4:	611a      	str	r2, [r3, #16]
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f835 	bl	8004f46 <HAL_TIM_TriggerCallback>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d10e      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x208>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d107      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x208>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0220 	mvn.w	r2, #32
 8004f00:	611a      	str	r2, [r3, #16]
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f88a 	bl	800501c <HAL_TIMEx_CommutCallback>
 8004f08:	bf00      	nop
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_TIM_OC_DelayElapsedCallback>:
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bc80      	pop	{r7}
 8004f20:	4770      	bx	lr

08004f22 <HAL_TIM_IC_CaptureCallback>:
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr

08004f34 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr

08004f46 <HAL_TIM_TriggerCallback>:
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr

08004f58 <TIM_Base_SetConfig>:
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a29      	ldr	r2, [pc, #164]	; (8005010 <TIM_Base_SetConfig+0xb8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00b      	beq.n	8004f88 <TIM_Base_SetConfig+0x30>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f76:	d007      	beq.n	8004f88 <TIM_Base_SetConfig+0x30>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a26      	ldr	r2, [pc, #152]	; (8005014 <TIM_Base_SetConfig+0xbc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_Base_SetConfig+0x30>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a25      	ldr	r2, [pc, #148]	; (8005018 <TIM_Base_SetConfig+0xc0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d108      	bne.n	8004f9a <TIM_Base_SetConfig+0x42>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a1c      	ldr	r2, [pc, #112]	; (8005010 <TIM_Base_SetConfig+0xb8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <TIM_Base_SetConfig+0x62>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa8:	d007      	beq.n	8004fba <TIM_Base_SetConfig+0x62>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a19      	ldr	r2, [pc, #100]	; (8005014 <TIM_Base_SetConfig+0xbc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_Base_SetConfig+0x62>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a18      	ldr	r2, [pc, #96]	; (8005018 <TIM_Base_SetConfig+0xc0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d108      	bne.n	8004fcc <TIM_Base_SetConfig+0x74>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a07      	ldr	r2, [pc, #28]	; (8005010 <TIM_Base_SetConfig+0xb8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d103      	bne.n	8005000 <TIM_Base_SetConfig+0xa8>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	615a      	str	r2, [r3, #20]
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr
 8005010:	40012c00 	.word	0x40012c00
 8005014:	40000400 	.word	0x40000400
 8005018:	40000800 	.word	0x40000800

0800501c <HAL_TIMEx_CommutCallback>:
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr

0800502e <HAL_TIMEx_BreakCallback>:
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <HAL_UART_Init>:
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_UART_Init+0x12>
 800504e:	2301      	movs	r3, #1
 8005050:	e042      	b.n	80050d8 <HAL_UART_Init+0x98>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_UART_Init+0x2c>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fe fcdc 	bl	8003a24 <HAL_UART_MspInit>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2224      	movs	r2, #36	; 0x24
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005082:	60da      	str	r2, [r3, #12]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f82b 	bl	80050e0 <UART_SetConfig>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005098:	611a      	str	r2, [r3, #16]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050a8:	615a      	str	r2, [r3, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050b8:	60da      	str	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	645a      	str	r2, [r3, #68]	; 0x44
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	635a      	str	r2, [r3, #52]	; 0x34
 80050d6:	2300      	movs	r3, #0
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <UART_SetConfig>:
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	611a      	str	r2, [r3, #16]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800511a:	f023 030c 	bic.w	r3, r3, #12
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	430b      	orrs	r3, r1
 8005126:	60d3      	str	r3, [r2, #12]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	615a      	str	r2, [r3, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2c      	ldr	r2, [pc, #176]	; (80051f4 <UART_SetConfig+0x114>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d103      	bne.n	8005150 <UART_SetConfig+0x70>
 8005148:	f7ff fcce 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	e002      	b.n	8005156 <UART_SetConfig+0x76>
 8005150:	f7ff fcb6 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009a      	lsls	r2, r3, #2
 8005160:	441a      	add	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	4a22      	ldr	r2, [pc, #136]	; (80051f8 <UART_SetConfig+0x118>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	0119      	lsls	r1, r3, #4
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	009a      	lsls	r2, r3, #2
 8005180:	441a      	add	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	fbb2 f2f3 	udiv	r2, r2, r3
 800518c:	4b1a      	ldr	r3, [pc, #104]	; (80051f8 <UART_SetConfig+0x118>)
 800518e:	fba3 0302 	umull	r0, r3, r3, r2
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2064      	movs	r0, #100	; 0x64
 8005196:	fb00 f303 	mul.w	r3, r0, r3
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	3332      	adds	r3, #50	; 0x32
 80051a0:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <UART_SetConfig+0x118>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ac:	4419      	add	r1, r3
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009a      	lsls	r2, r3, #2
 80051b8:	441a      	add	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c4:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <UART_SetConfig+0x118>)
 80051c6:	fba3 0302 	umull	r0, r3, r3, r2
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	2064      	movs	r0, #100	; 0x64
 80051ce:	fb00 f303 	mul.w	r3, r0, r3
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	3332      	adds	r3, #50	; 0x32
 80051d8:	4a07      	ldr	r2, [pc, #28]	; (80051f8 <UART_SetConfig+0x118>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	f003 020f 	and.w	r2, r3, #15
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	440a      	add	r2, r1
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	bf00      	nop
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40013800 	.word	0x40013800
 80051f8:	51eb851f 	.word	0x51eb851f

080051fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	4603      	mov	r3, r0
 8005204:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800520a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800520e:	2b84      	cmp	r3, #132	; 0x84
 8005210:	d005      	beq.n	800521e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005212:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	3303      	adds	r3, #3
 800521c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800521e:	68fb      	ldr	r3, [r7, #12]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr

0800522a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005230:	f3ef 8305 	mrs	r3, IPSR
 8005234:	607b      	str	r3, [r7, #4]
  return(result);
 8005236:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005238:	2b00      	cmp	r3, #0
 800523a:	bf14      	ite	ne
 800523c:	2301      	movne	r3, #1
 800523e:	2300      	moveq	r3, #0
 8005240:	b2db      	uxtb	r3, r3
}
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr

0800524c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005250:	f000 fe6c 	bl	8005f2c <vTaskStartScheduler>
  
  return osOK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	bd80      	pop	{r7, pc}

0800525a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800525e:	f7ff ffe4 	bl	800522a <inHandlerMode>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005268:	f000 ff82 	bl	8006170 <xTaskGetTickCountFromISR>
 800526c:	4603      	mov	r3, r0
 800526e:	e002      	b.n	8005276 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005270:	f000 ff70 	bl	8006154 <xTaskGetTickCount>
 8005274:	4603      	mov	r3, r0
  }
}
 8005276:	4618      	mov	r0, r3
 8005278:	bd80      	pop	{r7, pc}

0800527a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800527a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800527c:	b089      	sub	sp, #36	; 0x24
 800527e:	af04      	add	r7, sp, #16
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d020      	beq.n	80052ce <osThreadCreate+0x54>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01c      	beq.n	80052ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685c      	ldr	r4, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691e      	ldr	r6, [r3, #16]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff ffa8 	bl	80051fc <makeFreeRtosPriority>
 80052ac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052b6:	9202      	str	r2, [sp, #8]
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	9100      	str	r1, [sp, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	4632      	mov	r2, r6
 80052c0:	4629      	mov	r1, r5
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 fc5c 	bl	8005b80 <xTaskCreateStatic>
 80052c8:	4603      	mov	r3, r0
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	e01c      	b.n	8005308 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685c      	ldr	r4, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052da:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff ff8a 	bl	80051fc <makeFreeRtosPriority>
 80052e8:	4602      	mov	r2, r0
 80052ea:	f107 030c 	add.w	r3, r7, #12
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	9200      	str	r2, [sp, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	4632      	mov	r2, r6
 80052f6:	4629      	mov	r1, r5
 80052f8:	4620      	mov	r0, r4
 80052fa:	f000 fc9d 	bl	8005c38 <xTaskCreate>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b01      	cmp	r3, #1
 8005302:	d001      	beq.n	8005308 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005304:	2300      	movs	r3, #0
 8005306:	e000      	b.n	800530a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005308:	68fb      	ldr	r3, [r7, #12]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005312 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <osDelay+0x16>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	e000      	b.n	800532a <osDelay+0x18>
 8005328:	2301      	movs	r3, #1
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fdca 	bl	8005ec4 <vTaskDelay>
  
  return osOK;
 8005330:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d007      	beq.n	800535a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	4619      	mov	r1, r3
 8005350:	2001      	movs	r0, #1
 8005352:	f000 fa27 	bl	80057a4 <xQueueCreateMutexStatic>
 8005356:	4603      	mov	r3, r0
 8005358:	e003      	b.n	8005362 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800535a:	2001      	movs	r0, #1
 800535c:	f000 fa0a 	bl	8005774 <xQueueCreateMutex>
 8005360:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f103 0208 	add.w	r2, r3, #8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f04f 32ff 	mov.w	r2, #4294967295
 8005382:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f103 0208 	add.w	r2, r3, #8
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f103 0208 	add.w	r2, r3, #8
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr

080053a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	601a      	str	r2, [r3, #0]
}
 80053fc:	bf00      	nop
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541c:	d103      	bne.n	8005426 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	e00c      	b.n	8005440 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3308      	adds	r3, #8
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e002      	b.n	8005434 <vListInsert+0x2e>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	429a      	cmp	r2, r3
 800543e:	d2f6      	bcs.n	800542e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	601a      	str	r2, [r3, #0]
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr

08005476 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6892      	ldr	r2, [r2, #8]
 800548c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6852      	ldr	r2, [r2, #4]
 8005496:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d103      	bne.n	80054aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	1e5a      	subs	r2, r3, #1
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054ee:	bf00      	nop
 80054f0:	e7fe      	b.n	80054f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054f2:	f001 fb53 	bl	8006b9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fe:	68f9      	ldr	r1, [r7, #12]
 8005500:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005502:	fb01 f303 	mul.w	r3, r1, r3
 8005506:	441a      	add	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005522:	3b01      	subs	r3, #1
 8005524:	68f9      	ldr	r1, [r7, #12]
 8005526:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005528:	fb01 f303 	mul.w	r3, r1, r3
 800552c:	441a      	add	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	22ff      	movs	r2, #255	; 0xff
 8005536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	22ff      	movs	r2, #255	; 0xff
 800553e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d114      	bne.n	8005572 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01a      	beq.n	8005586 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3310      	adds	r3, #16
 8005554:	4618      	mov	r0, r3
 8005556:	f000 ff61 	bl	800641c <xTaskRemoveFromEventList>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d012      	beq.n	8005586 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005560:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <xQueueGenericReset+0xcc>)
 8005562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	e009      	b.n	8005586 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3310      	adds	r3, #16
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff fef7 	bl	800536a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3324      	adds	r3, #36	; 0x24
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff fef2 	bl	800536a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005586:	f001 fb39 	bl	8006bfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800558a:	2301      	movs	r3, #1
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	e000ed04 	.word	0xe000ed04

08005598 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08e      	sub	sp, #56	; 0x38
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <xQueueGenericCreateStatic+0x52>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <xQueueGenericCreateStatic+0x56>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <xQueueGenericCreateStatic+0x58>
 80055ee:	2300      	movs	r3, #0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	623b      	str	r3, [r7, #32]
}
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <xQueueGenericCreateStatic+0x7e>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <xQueueGenericCreateStatic+0x82>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <xQueueGenericCreateStatic+0x84>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	61fb      	str	r3, [r7, #28]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005636:	2348      	movs	r3, #72	; 0x48
 8005638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b48      	cmp	r3, #72	; 0x48
 800563e:	d00a      	beq.n	8005656 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	61bb      	str	r3, [r7, #24]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00d      	beq.n	800567c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005668:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f843 	bl	8005702 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800567e:	4618      	mov	r0, r3
 8005680:	3730      	adds	r7, #48	; 0x30
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005686:	b580      	push	{r7, lr}
 8005688:	b08a      	sub	sp, #40	; 0x28
 800568a:	af02      	add	r7, sp, #8
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	4613      	mov	r3, r2
 8005692:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	613b      	str	r3, [r7, #16]
}
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	e004      	b.n	80056c6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	fb02 f303 	mul.w	r3, r2, r3
 80056c4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	3348      	adds	r3, #72	; 0x48
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 fb66 	bl	8006d9c <pvPortMalloc>
 80056d0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00f      	beq.n	80056f8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	3348      	adds	r3, #72	; 0x48
 80056dc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056e6:	79fa      	ldrb	r2, [r7, #7]
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f805 	bl	8005702 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80056f8:	69bb      	ldr	r3, [r7, #24]
	}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	e002      	b.n	8005724 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005730:	2101      	movs	r1, #1
 8005732:	69b8      	ldr	r0, [r7, #24]
 8005734:	f7ff fec8 	bl	80054c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00e      	beq.n	800576c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005760:	2300      	movs	r3, #0
 8005762:	2200      	movs	r2, #0
 8005764:	2100      	movs	r1, #0
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f838 	bl	80057dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800576c:	bf00      	nop
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800577e:	2301      	movs	r3, #1
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	461a      	mov	r2, r3
 800578a:	6939      	ldr	r1, [r7, #16]
 800578c:	6978      	ldr	r0, [r7, #20]
 800578e:	f7ff ff7a 	bl	8005686 <xQueueGenericCreate>
 8005792:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7ff ffd3 	bl	8005740 <prvInitialiseMutex>

		return pxNewQueue;
 800579a:	68fb      	ldr	r3, [r7, #12]
	}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	4603      	mov	r3, r0
 80057ac:	6039      	str	r1, [r7, #0]
 80057ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80057b0:	2301      	movs	r3, #1
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	2300      	movs	r3, #0
 80057b6:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	6939      	ldr	r1, [r7, #16]
 80057c2:	6978      	ldr	r0, [r7, #20]
 80057c4:	f7ff fee8 	bl	8005598 <xQueueGenericCreateStatic>
 80057c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff ffb8 	bl	8005740 <prvInitialiseMutex>

		return pxNewQueue;
 80057d0:	68fb      	ldr	r3, [r7, #12]
	}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08e      	sub	sp, #56	; 0x38
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057ea:	2300      	movs	r3, #0
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <xQueueGenericSend+0x32>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800580a:	bf00      	nop
 800580c:	e7fe      	b.n	800580c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d103      	bne.n	800581c <xQueueGenericSend+0x40>
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <xQueueGenericSend+0x44>
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <xQueueGenericSend+0x46>
 8005820:	2300      	movs	r3, #0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10a      	bne.n	800583c <xQueueGenericSend+0x60>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005838:	bf00      	nop
 800583a:	e7fe      	b.n	800583a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d103      	bne.n	800584a <xQueueGenericSend+0x6e>
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <xQueueGenericSend+0x72>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <xQueueGenericSend+0x74>
 800584e:	2300      	movs	r3, #0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <xQueueGenericSend+0x8e>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	623b      	str	r3, [r7, #32]
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800586a:	f000 ff9b 	bl	80067a4 <xTaskGetSchedulerState>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <xQueueGenericSend+0x9e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <xQueueGenericSend+0xa2>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <xQueueGenericSend+0xa4>
 800587e:	2300      	movs	r3, #0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <xQueueGenericSend+0xbe>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	61fb      	str	r3, [r7, #28]
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800589a:	f001 f97f 	bl	8006b9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d302      	bcc.n	80058b0 <xQueueGenericSend+0xd4>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d129      	bne.n	8005904 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b6:	f000 f88f 	bl	80059d8 <prvCopyDataToQueue>
 80058ba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d010      	beq.n	80058e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	3324      	adds	r3, #36	; 0x24
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fda7 	bl	800641c <xTaskRemoveFromEventList>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d013      	beq.n	80058fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058d4:	4b3f      	ldr	r3, [pc, #252]	; (80059d4 <xQueueGenericSend+0x1f8>)
 80058d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	e00a      	b.n	80058fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058ec:	4b39      	ldr	r3, [pc, #228]	; (80059d4 <xQueueGenericSend+0x1f8>)
 80058ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058fc:	f001 f97e 	bl	8006bfc <vPortExitCritical>
				return pdPASS;
 8005900:	2301      	movs	r3, #1
 8005902:	e063      	b.n	80059cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d103      	bne.n	8005912 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800590a:	f001 f977 	bl	8006bfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800590e:	2300      	movs	r3, #0
 8005910:	e05c      	b.n	80059cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005914:	2b00      	cmp	r3, #0
 8005916:	d106      	bne.n	8005926 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005918:	f107 0314 	add.w	r3, r7, #20
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fddf 	bl	80064e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005922:	2301      	movs	r3, #1
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005926:	f001 f969 	bl	8006bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800592a:	f000 fb69 	bl	8006000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800592e:	f001 f935 	bl	8006b9c <vPortEnterCritical>
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005938:	b25b      	sxtb	r3, r3
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593e:	d103      	bne.n	8005948 <xQueueGenericSend+0x16c>
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800594e:	b25b      	sxtb	r3, r3
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d103      	bne.n	800595e <xQueueGenericSend+0x182>
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800595e:	f001 f94d 	bl	8006bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005962:	1d3a      	adds	r2, r7, #4
 8005964:	f107 0314 	add.w	r3, r7, #20
 8005968:	4611      	mov	r1, r2
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fdce 	bl	800650c <xTaskCheckForTimeOut>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d124      	bne.n	80059c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005978:	f000 f8ea 	bl	8005b50 <prvIsQueueFull>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d018      	beq.n	80059b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	3310      	adds	r3, #16
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4611      	mov	r1, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fd22 	bl	80063d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005992:	f000 f88b 	bl	8005aac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005996:	f000 fb41 	bl	800601c <xTaskResumeAll>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	f47f af7c 	bne.w	800589a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80059a2:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <xQueueGenericSend+0x1f8>)
 80059a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	e772      	b.n	800589a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b6:	f000 f879 	bl	8005aac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059ba:	f000 fb2f 	bl	800601c <xTaskResumeAll>
 80059be:	e76c      	b.n	800589a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059c2:	f000 f873 	bl	8005aac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059c6:	f000 fb29 	bl	800601c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059ca:	2300      	movs	r3, #0
		}
	}
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3738      	adds	r7, #56	; 0x38
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	e000ed04 	.word	0xe000ed04

080059d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10d      	bne.n	8005a12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d14d      	bne.n	8005a9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 feec 	bl	80067e0 <xTaskPriorityDisinherit>
 8005a08:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	605a      	str	r2, [r3, #4]
 8005a10:	e043      	b.n	8005a9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d119      	bne.n	8005a4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6898      	ldr	r0, [r3, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	461a      	mov	r2, r3
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	f002 fc4d 	bl	80082c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	441a      	add	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d32b      	bcc.n	8005a9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	609a      	str	r2, [r3, #8]
 8005a4a:	e026      	b.n	8005a9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68d8      	ldr	r0, [r3, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	461a      	mov	r2, r3
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	f002 fc33 	bl	80082c2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	425b      	negs	r3, r3
 8005a66:	441a      	add	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d207      	bcs.n	8005a88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	425b      	negs	r3, r3
 8005a82:	441a      	add	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d105      	bne.n	8005a9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005aa2:	697b      	ldr	r3, [r7, #20]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ab4:	f001 f872 	bl	8006b9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005abe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ac0:	e011      	b.n	8005ae6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d012      	beq.n	8005af0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3324      	adds	r3, #36	; 0x24
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fca4 	bl	800641c <xTaskRemoveFromEventList>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ada:	f000 fd79 	bl	80065d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	dce9      	bgt.n	8005ac2 <prvUnlockQueue+0x16>
 8005aee:	e000      	b.n	8005af2 <prvUnlockQueue+0x46>
					break;
 8005af0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	22ff      	movs	r2, #255	; 0xff
 8005af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005afa:	f001 f87f 	bl	8006bfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005afe:	f001 f84d 	bl	8006b9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b0a:	e011      	b.n	8005b30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d012      	beq.n	8005b3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3310      	adds	r3, #16
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fc7f 	bl	800641c <xTaskRemoveFromEventList>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b24:	f000 fd54 	bl	80065d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	dce9      	bgt.n	8005b0c <prvUnlockQueue+0x60>
 8005b38:	e000      	b.n	8005b3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	22ff      	movs	r2, #255	; 0xff
 8005b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005b44:	f001 f85a 	bl	8006bfc <vPortExitCritical>
}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b58:	f001 f820 	bl	8006b9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d102      	bne.n	8005b6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	e001      	b.n	8005b72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b72:	f001 f843 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 8005b76:	68fb      	ldr	r3, [r7, #12]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08e      	sub	sp, #56	; 0x38
 8005b84:	af04      	add	r7, sp, #16
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	623b      	str	r3, [r7, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	61fb      	str	r3, [r7, #28]
}
 8005bc2:	bf00      	nop
 8005bc4:	e7fe      	b.n	8005bc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bc6:	23a4      	movs	r3, #164	; 0xa4
 8005bc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2ba4      	cmp	r3, #164	; 0xa4
 8005bce:	d00a      	beq.n	8005be6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	61bb      	str	r3, [r7, #24]
}
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01e      	beq.n	8005c2a <xTaskCreateStatic+0xaa>
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d01b      	beq.n	8005c2a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c04:	2300      	movs	r3, #0
 8005c06:	9303      	str	r3, [sp, #12]
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	9302      	str	r3, [sp, #8]
 8005c0c:	f107 0314 	add.w	r3, r7, #20
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f851 	bl	8005cc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c24:	f000 f8e4 	bl	8005df0 <prvAddNewTaskToReadyList>
 8005c28:	e001      	b.n	8005c2e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c2e:	697b      	ldr	r3, [r7, #20]
	}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3728      	adds	r7, #40	; 0x28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08c      	sub	sp, #48	; 0x30
 8005c3c:	af04      	add	r7, sp, #16
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	603b      	str	r3, [r7, #0]
 8005c44:	4613      	mov	r3, r2
 8005c46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c48:	88fb      	ldrh	r3, [r7, #6]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f001 f8a5 	bl	8006d9c <pvPortMalloc>
 8005c52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00e      	beq.n	8005c78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005c5a:	20a4      	movs	r0, #164	; 0xa4
 8005c5c:	f001 f89e 	bl	8006d9c <pvPortMalloc>
 8005c60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8005c6e:	e005      	b.n	8005c7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c70:	6978      	ldr	r0, [r7, #20]
 8005c72:	f001 f957 	bl	8006f24 <vPortFree>
 8005c76:	e001      	b.n	8005c7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d017      	beq.n	8005cb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c8a:	88fa      	ldrh	r2, [r7, #6]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	9303      	str	r3, [sp, #12]
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	9302      	str	r3, [sp, #8]
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c96:	9301      	str	r3, [sp, #4]
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f80f 	bl	8005cc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ca6:	69f8      	ldr	r0, [r7, #28]
 8005ca8:	f000 f8a2 	bl	8005df0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005cac:	2301      	movs	r3, #1
 8005cae:	61bb      	str	r3, [r7, #24]
 8005cb0:	e002      	b.n	8005cb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cb8:	69bb      	ldr	r3, [r7, #24]
	}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3720      	adds	r7, #32
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f023 0307 	bic.w	r3, r3, #7
 8005cea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	617b      	str	r3, [r7, #20]
}
 8005d08:	bf00      	nop
 8005d0a:	e7fe      	b.n	8005d0a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	e012      	b.n	8005d38 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	4413      	add	r3, r2
 8005d18:	7819      	ldrb	r1, [r3, #0]
 8005d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	4413      	add	r3, r2
 8005d20:	3334      	adds	r3, #52	; 0x34
 8005d22:	460a      	mov	r2, r1
 8005d24:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d006      	beq.n	8005d40 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	3301      	adds	r3, #1
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b13      	cmp	r3, #19
 8005d3c:	d9e9      	bls.n	8005d12 <prvInitialiseNewTask+0x4e>
 8005d3e:	e000      	b.n	8005d42 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005d40:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	2b06      	cmp	r3, #6
 8005d4e:	d901      	bls.n	8005d54 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d50:	2306      	movs	r3, #6
 8005d52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d5e:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	2200      	movs	r2, #0
 8005d64:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fb1c 	bl	80053a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	3318      	adds	r3, #24
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fb17 	bl	80053a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	f1c3 0207 	rsb	r2, r3, #7
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	2200      	movs	r2, #0
 8005d94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	3350      	adds	r3, #80	; 0x50
 8005da4:	224c      	movs	r2, #76	; 0x4c
 8005da6:	2100      	movs	r1, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f002 f9a6 	bl	80080fa <memset>
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	4a0c      	ldr	r2, [pc, #48]	; (8005de4 <prvInitialiseNewTask+0x120>)
 8005db2:	655a      	str	r2, [r3, #84]	; 0x54
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	4a0c      	ldr	r2, [pc, #48]	; (8005de8 <prvInitialiseNewTask+0x124>)
 8005db8:	659a      	str	r2, [r3, #88]	; 0x58
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	4a0b      	ldr	r2, [pc, #44]	; (8005dec <prvInitialiseNewTask+0x128>)
 8005dbe:	65da      	str	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	68f9      	ldr	r1, [r7, #12]
 8005dc4:	69b8      	ldr	r0, [r7, #24]
 8005dc6:	f000 fdf7 	bl	80069b8 <pxPortInitialiseStack>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ddc:	bf00      	nop
 8005dde:	3720      	adds	r7, #32
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	200017c8 	.word	0x200017c8
 8005de8:	20001830 	.word	0x20001830
 8005dec:	20001898 	.word	0x20001898

08005df0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005df8:	f000 fed0 	bl	8006b9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005dfc:	4b2a      	ldr	r3, [pc, #168]	; (8005ea8 <prvAddNewTaskToReadyList+0xb8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3301      	adds	r3, #1
 8005e02:	4a29      	ldr	r2, [pc, #164]	; (8005ea8 <prvAddNewTaskToReadyList+0xb8>)
 8005e04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e06:	4b29      	ldr	r3, [pc, #164]	; (8005eac <prvAddNewTaskToReadyList+0xbc>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e0e:	4a27      	ldr	r2, [pc, #156]	; (8005eac <prvAddNewTaskToReadyList+0xbc>)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e14:	4b24      	ldr	r3, [pc, #144]	; (8005ea8 <prvAddNewTaskToReadyList+0xb8>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d110      	bne.n	8005e3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e1c:	f000 fbfc 	bl	8006618 <prvInitialiseTaskLists>
 8005e20:	e00d      	b.n	8005e3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e22:	4b23      	ldr	r3, [pc, #140]	; (8005eb0 <prvAddNewTaskToReadyList+0xc0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e2a:	4b20      	ldr	r3, [pc, #128]	; (8005eac <prvAddNewTaskToReadyList+0xbc>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d802      	bhi.n	8005e3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e38:	4a1c      	ldr	r2, [pc, #112]	; (8005eac <prvAddNewTaskToReadyList+0xbc>)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e3e:	4b1d      	ldr	r3, [pc, #116]	; (8005eb4 <prvAddNewTaskToReadyList+0xc4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3301      	adds	r3, #1
 8005e44:	4a1b      	ldr	r2, [pc, #108]	; (8005eb4 <prvAddNewTaskToReadyList+0xc4>)
 8005e46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	4b19      	ldr	r3, [pc, #100]	; (8005eb8 <prvAddNewTaskToReadyList+0xc8>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <prvAddNewTaskToReadyList+0xc8>)
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4a15      	ldr	r2, [pc, #84]	; (8005ebc <prvAddNewTaskToReadyList+0xcc>)
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4610      	mov	r0, r2
 8005e72:	f7ff faa5 	bl	80053c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e76:	f000 fec1 	bl	8006bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e7a:	4b0d      	ldr	r3, [pc, #52]	; (8005eb0 <prvAddNewTaskToReadyList+0xc0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00e      	beq.n	8005ea0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e82:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <prvAddNewTaskToReadyList+0xbc>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d207      	bcs.n	8005ea0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e90:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <prvAddNewTaskToReadyList+0xd0>)
 8005e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	2000077c 	.word	0x2000077c
 8005eac:	2000067c 	.word	0x2000067c
 8005eb0:	20000788 	.word	0x20000788
 8005eb4:	20000798 	.word	0x20000798
 8005eb8:	20000784 	.word	0x20000784
 8005ebc:	20000680 	.word	0x20000680
 8005ec0:	e000ed04 	.word	0xe000ed04

08005ec4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d017      	beq.n	8005f06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ed6:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <vTaskDelay+0x60>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <vTaskDelay+0x30>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	60bb      	str	r3, [r7, #8]
}
 8005ef0:	bf00      	nop
 8005ef2:	e7fe      	b.n	8005ef2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ef4:	f000 f884 	bl	8006000 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ef8:	2100      	movs	r1, #0
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fcf6 	bl	80068ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f00:	f000 f88c 	bl	800601c <xTaskResumeAll>
 8005f04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d107      	bne.n	8005f1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <vTaskDelay+0x64>)
 8005f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f1c:	bf00      	nop
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	200007a4 	.word	0x200007a4
 8005f28:	e000ed04 	.word	0xe000ed04

08005f2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	; 0x28
 8005f30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f3a:	463a      	mov	r2, r7
 8005f3c:	1d39      	adds	r1, r7, #4
 8005f3e:	f107 0308 	add.w	r3, r7, #8
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fc fee8 	bl	8002d18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	9202      	str	r2, [sp, #8]
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	2300      	movs	r3, #0
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	2300      	movs	r3, #0
 8005f58:	460a      	mov	r2, r1
 8005f5a:	4921      	ldr	r1, [pc, #132]	; (8005fe0 <vTaskStartScheduler+0xb4>)
 8005f5c:	4821      	ldr	r0, [pc, #132]	; (8005fe4 <vTaskStartScheduler+0xb8>)
 8005f5e:	f7ff fe0f 	bl	8005b80 <xTaskCreateStatic>
 8005f62:	4603      	mov	r3, r0
 8005f64:	4a20      	ldr	r2, [pc, #128]	; (8005fe8 <vTaskStartScheduler+0xbc>)
 8005f66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f68:	4b1f      	ldr	r3, [pc, #124]	; (8005fe8 <vTaskStartScheduler+0xbc>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f70:	2301      	movs	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	e001      	b.n	8005f7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d11b      	bne.n	8005fb8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	613b      	str	r3, [r7, #16]
}
 8005f92:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f94:	4b15      	ldr	r3, [pc, #84]	; (8005fec <vTaskStartScheduler+0xc0>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3350      	adds	r3, #80	; 0x50
 8005f9a:	4a15      	ldr	r2, [pc, #84]	; (8005ff0 <vTaskStartScheduler+0xc4>)
 8005f9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f9e:	4b15      	ldr	r3, [pc, #84]	; (8005ff4 <vTaskStartScheduler+0xc8>)
 8005fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <vTaskStartScheduler+0xcc>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005fac:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <vTaskStartScheduler+0xd0>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fb2:	f000 fd81 	bl	8006ab8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fb6:	e00e      	b.n	8005fd6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbe:	d10a      	bne.n	8005fd6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60fb      	str	r3, [r7, #12]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <vTaskStartScheduler+0xa8>
}
 8005fd6:	bf00      	nop
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	0800ca64 	.word	0x0800ca64
 8005fe4:	080065e9 	.word	0x080065e9
 8005fe8:	200007a0 	.word	0x200007a0
 8005fec:	2000067c 	.word	0x2000067c
 8005ff0:	20000084 	.word	0x20000084
 8005ff4:	2000079c 	.word	0x2000079c
 8005ff8:	20000788 	.word	0x20000788
 8005ffc:	20000780 	.word	0x20000780

08006000 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006004:	4b04      	ldr	r3, [pc, #16]	; (8006018 <vTaskSuspendAll+0x18>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3301      	adds	r3, #1
 800600a:	4a03      	ldr	r2, [pc, #12]	; (8006018 <vTaskSuspendAll+0x18>)
 800600c:	6013      	str	r3, [r2, #0]
}
 800600e:	bf00      	nop
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	200007a4 	.word	0x200007a4

0800601c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006026:	2300      	movs	r3, #0
 8006028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800602a:	4b41      	ldr	r3, [pc, #260]	; (8006130 <xTaskResumeAll+0x114>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <xTaskResumeAll+0x2c>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	603b      	str	r3, [r7, #0]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006048:	f000 fda8 	bl	8006b9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800604c:	4b38      	ldr	r3, [pc, #224]	; (8006130 <xTaskResumeAll+0x114>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3b01      	subs	r3, #1
 8006052:	4a37      	ldr	r2, [pc, #220]	; (8006130 <xTaskResumeAll+0x114>)
 8006054:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006056:	4b36      	ldr	r3, [pc, #216]	; (8006130 <xTaskResumeAll+0x114>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d161      	bne.n	8006122 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800605e:	4b35      	ldr	r3, [pc, #212]	; (8006134 <xTaskResumeAll+0x118>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d05d      	beq.n	8006122 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006066:	e02e      	b.n	80060c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006068:	4b33      	ldr	r3, [pc, #204]	; (8006138 <xTaskResumeAll+0x11c>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3318      	adds	r3, #24
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff f9fe 	bl	8005476 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3304      	adds	r3, #4
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff f9f9 	bl	8005476 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	2201      	movs	r2, #1
 800608a:	409a      	lsls	r2, r3
 800608c:	4b2b      	ldr	r3, [pc, #172]	; (800613c <xTaskResumeAll+0x120>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4313      	orrs	r3, r2
 8006092:	4a2a      	ldr	r2, [pc, #168]	; (800613c <xTaskResumeAll+0x120>)
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4a27      	ldr	r2, [pc, #156]	; (8006140 <xTaskResumeAll+0x124>)
 80060a4:	441a      	add	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3304      	adds	r3, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	4610      	mov	r0, r2
 80060ae:	f7ff f987 	bl	80053c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b6:	4b23      	ldr	r3, [pc, #140]	; (8006144 <xTaskResumeAll+0x128>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	429a      	cmp	r2, r3
 80060be:	d302      	bcc.n	80060c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80060c0:	4b21      	ldr	r3, [pc, #132]	; (8006148 <xTaskResumeAll+0x12c>)
 80060c2:	2201      	movs	r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060c6:	4b1c      	ldr	r3, [pc, #112]	; (8006138 <xTaskResumeAll+0x11c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1cc      	bne.n	8006068 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060d4:	f000 fb42 	bl	800675c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060d8:	4b1c      	ldr	r3, [pc, #112]	; (800614c <xTaskResumeAll+0x130>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d010      	beq.n	8006106 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060e4:	f000 f856 	bl	8006194 <xTaskIncrementTick>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80060ee:	4b16      	ldr	r3, [pc, #88]	; (8006148 <xTaskResumeAll+0x12c>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1f1      	bne.n	80060e4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006100:	4b12      	ldr	r3, [pc, #72]	; (800614c <xTaskResumeAll+0x130>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006106:	4b10      	ldr	r3, [pc, #64]	; (8006148 <xTaskResumeAll+0x12c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800610e:	2301      	movs	r3, #1
 8006110:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006112:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <xTaskResumeAll+0x134>)
 8006114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006122:	f000 fd6b 	bl	8006bfc <vPortExitCritical>

	return xAlreadyYielded;
 8006126:	68bb      	ldr	r3, [r7, #8]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	200007a4 	.word	0x200007a4
 8006134:	2000077c 	.word	0x2000077c
 8006138:	2000073c 	.word	0x2000073c
 800613c:	20000784 	.word	0x20000784
 8006140:	20000680 	.word	0x20000680
 8006144:	2000067c 	.word	0x2000067c
 8006148:	20000790 	.word	0x20000790
 800614c:	2000078c 	.word	0x2000078c
 8006150:	e000ed04 	.word	0xe000ed04

08006154 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800615a:	4b04      	ldr	r3, [pc, #16]	; (800616c <xTaskGetTickCount+0x18>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006160:	687b      	ldr	r3, [r7, #4]
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr
 800616c:	20000780 	.word	0x20000780

08006170 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006176:	f000 fdd3 	bl	8006d20 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800617a:	2300      	movs	r3, #0
 800617c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800617e:	4b04      	ldr	r3, [pc, #16]	; (8006190 <xTaskGetTickCountFromISR+0x20>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006184:	683b      	ldr	r3, [r7, #0]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000780 	.word	0x20000780

08006194 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800619e:	4b51      	ldr	r3, [pc, #324]	; (80062e4 <xTaskIncrementTick+0x150>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f040 808d 	bne.w	80062c2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061a8:	4b4f      	ldr	r3, [pc, #316]	; (80062e8 <xTaskIncrementTick+0x154>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3301      	adds	r3, #1
 80061ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061b0:	4a4d      	ldr	r2, [pc, #308]	; (80062e8 <xTaskIncrementTick+0x154>)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d120      	bne.n	80061fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80061bc:	4b4b      	ldr	r3, [pc, #300]	; (80062ec <xTaskIncrementTick+0x158>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <xTaskIncrementTick+0x48>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	603b      	str	r3, [r7, #0]
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <xTaskIncrementTick+0x46>
 80061dc:	4b43      	ldr	r3, [pc, #268]	; (80062ec <xTaskIncrementTick+0x158>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	4b43      	ldr	r3, [pc, #268]	; (80062f0 <xTaskIncrementTick+0x15c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a41      	ldr	r2, [pc, #260]	; (80062ec <xTaskIncrementTick+0x158>)
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	4a41      	ldr	r2, [pc, #260]	; (80062f0 <xTaskIncrementTick+0x15c>)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	4b40      	ldr	r3, [pc, #256]	; (80062f4 <xTaskIncrementTick+0x160>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3301      	adds	r3, #1
 80061f6:	4a3f      	ldr	r2, [pc, #252]	; (80062f4 <xTaskIncrementTick+0x160>)
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	f000 faaf 	bl	800675c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061fe:	4b3e      	ldr	r3, [pc, #248]	; (80062f8 <xTaskIncrementTick+0x164>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	429a      	cmp	r2, r3
 8006206:	d34d      	bcc.n	80062a4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006208:	4b38      	ldr	r3, [pc, #224]	; (80062ec <xTaskIncrementTick+0x158>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <xTaskIncrementTick+0x82>
 8006212:	2301      	movs	r3, #1
 8006214:	e000      	b.n	8006218 <xTaskIncrementTick+0x84>
 8006216:	2300      	movs	r3, #0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d004      	beq.n	8006226 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800621c:	4b36      	ldr	r3, [pc, #216]	; (80062f8 <xTaskIncrementTick+0x164>)
 800621e:	f04f 32ff 	mov.w	r2, #4294967295
 8006222:	601a      	str	r2, [r3, #0]
					break;
 8006224:	e03e      	b.n	80062a4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006226:	4b31      	ldr	r3, [pc, #196]	; (80062ec <xTaskIncrementTick+0x158>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	429a      	cmp	r2, r3
 800623c:	d203      	bcs.n	8006246 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800623e:	4a2e      	ldr	r2, [pc, #184]	; (80062f8 <xTaskIncrementTick+0x164>)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6013      	str	r3, [r2, #0]
						break;
 8006244:	e02e      	b.n	80062a4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	3304      	adds	r3, #4
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff f913 	bl	8005476 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	2b00      	cmp	r3, #0
 8006256:	d004      	beq.n	8006262 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	3318      	adds	r3, #24
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff f90a 	bl	8005476 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	2201      	movs	r2, #1
 8006268:	409a      	lsls	r2, r3
 800626a:	4b24      	ldr	r3, [pc, #144]	; (80062fc <xTaskIncrementTick+0x168>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4313      	orrs	r3, r2
 8006270:	4a22      	ldr	r2, [pc, #136]	; (80062fc <xTaskIncrementTick+0x168>)
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4a1f      	ldr	r2, [pc, #124]	; (8006300 <xTaskIncrementTick+0x16c>)
 8006282:	441a      	add	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	3304      	adds	r3, #4
 8006288:	4619      	mov	r1, r3
 800628a:	4610      	mov	r0, r2
 800628c:	f7ff f898 	bl	80053c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006294:	4b1b      	ldr	r3, [pc, #108]	; (8006304 <xTaskIncrementTick+0x170>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	429a      	cmp	r2, r3
 800629c:	d3b4      	bcc.n	8006208 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800629e:	2301      	movs	r3, #1
 80062a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062a2:	e7b1      	b.n	8006208 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062a4:	4b17      	ldr	r3, [pc, #92]	; (8006304 <xTaskIncrementTick+0x170>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062aa:	4915      	ldr	r1, [pc, #84]	; (8006300 <xTaskIncrementTick+0x16c>)
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d907      	bls.n	80062cc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80062bc:	2301      	movs	r3, #1
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	e004      	b.n	80062cc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80062c2:	4b11      	ldr	r3, [pc, #68]	; (8006308 <xTaskIncrementTick+0x174>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3301      	adds	r3, #1
 80062c8:	4a0f      	ldr	r2, [pc, #60]	; (8006308 <xTaskIncrementTick+0x174>)
 80062ca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80062cc:	4b0f      	ldr	r3, [pc, #60]	; (800630c <xTaskIncrementTick+0x178>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80062d4:	2301      	movs	r3, #1
 80062d6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80062d8:	697b      	ldr	r3, [r7, #20]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	200007a4 	.word	0x200007a4
 80062e8:	20000780 	.word	0x20000780
 80062ec:	20000734 	.word	0x20000734
 80062f0:	20000738 	.word	0x20000738
 80062f4:	20000794 	.word	0x20000794
 80062f8:	2000079c 	.word	0x2000079c
 80062fc:	20000784 	.word	0x20000784
 8006300:	20000680 	.word	0x20000680
 8006304:	2000067c 	.word	0x2000067c
 8006308:	2000078c 	.word	0x2000078c
 800630c:	20000790 	.word	0x20000790

08006310 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006316:	4b29      	ldr	r3, [pc, #164]	; (80063bc <vTaskSwitchContext+0xac>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800631e:	4b28      	ldr	r3, [pc, #160]	; (80063c0 <vTaskSwitchContext+0xb0>)
 8006320:	2201      	movs	r2, #1
 8006322:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006324:	e044      	b.n	80063b0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006326:	4b26      	ldr	r3, [pc, #152]	; (80063c0 <vTaskSwitchContext+0xb0>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800632c:	4b25      	ldr	r3, [pc, #148]	; (80063c4 <vTaskSwitchContext+0xb4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	fab3 f383 	clz	r3, r3
 8006338:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800633a:	7afb      	ldrb	r3, [r7, #11]
 800633c:	f1c3 031f 	rsb	r3, r3, #31
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	4921      	ldr	r1, [pc, #132]	; (80063c8 <vTaskSwitchContext+0xb8>)
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	440b      	add	r3, r1
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	607b      	str	r3, [r7, #4]
}
 8006368:	bf00      	nop
 800636a:	e7fe      	b.n	800636a <vTaskSwitchContext+0x5a>
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4a14      	ldr	r2, [pc, #80]	; (80063c8 <vTaskSwitchContext+0xb8>)
 8006378:	4413      	add	r3, r2
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	605a      	str	r2, [r3, #4]
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	3308      	adds	r3, #8
 800638e:	429a      	cmp	r2, r3
 8006390:	d104      	bne.n	800639c <vTaskSwitchContext+0x8c>
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	605a      	str	r2, [r3, #4]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	4a0a      	ldr	r2, [pc, #40]	; (80063cc <vTaskSwitchContext+0xbc>)
 80063a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063a6:	4b09      	ldr	r3, [pc, #36]	; (80063cc <vTaskSwitchContext+0xbc>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3350      	adds	r3, #80	; 0x50
 80063ac:	4a08      	ldr	r2, [pc, #32]	; (80063d0 <vTaskSwitchContext+0xc0>)
 80063ae:	6013      	str	r3, [r2, #0]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	200007a4 	.word	0x200007a4
 80063c0:	20000790 	.word	0x20000790
 80063c4:	20000784 	.word	0x20000784
 80063c8:	20000680 	.word	0x20000680
 80063cc:	2000067c 	.word	0x2000067c
 80063d0:	20000084 	.word	0x20000084

080063d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	60fb      	str	r3, [r7, #12]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063fa:	4b07      	ldr	r3, [pc, #28]	; (8006418 <vTaskPlaceOnEventList+0x44>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3318      	adds	r3, #24
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fe ffff 	bl	8005406 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006408:	2101      	movs	r1, #1
 800640a:	6838      	ldr	r0, [r7, #0]
 800640c:	f000 fa6e 	bl	80068ec <prvAddCurrentTaskToDelayedList>
}
 8006410:	bf00      	nop
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	2000067c 	.word	0x2000067c

0800641c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10a      	bne.n	8006448 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60fb      	str	r3, [r7, #12]
}
 8006444:	bf00      	nop
 8006446:	e7fe      	b.n	8006446 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	3318      	adds	r3, #24
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff f812 	bl	8005476 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006452:	4b1d      	ldr	r3, [pc, #116]	; (80064c8 <xTaskRemoveFromEventList+0xac>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d11c      	bne.n	8006494 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	3304      	adds	r3, #4
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff f809 	bl	8005476 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	2201      	movs	r2, #1
 800646a:	409a      	lsls	r2, r3
 800646c:	4b17      	ldr	r3, [pc, #92]	; (80064cc <xTaskRemoveFromEventList+0xb0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4313      	orrs	r3, r2
 8006472:	4a16      	ldr	r2, [pc, #88]	; (80064cc <xTaskRemoveFromEventList+0xb0>)
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4a13      	ldr	r2, [pc, #76]	; (80064d0 <xTaskRemoveFromEventList+0xb4>)
 8006484:	441a      	add	r2, r3
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	3304      	adds	r3, #4
 800648a:	4619      	mov	r1, r3
 800648c:	4610      	mov	r0, r2
 800648e:	f7fe ff97 	bl	80053c0 <vListInsertEnd>
 8006492:	e005      	b.n	80064a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	3318      	adds	r3, #24
 8006498:	4619      	mov	r1, r3
 800649a:	480e      	ldr	r0, [pc, #56]	; (80064d4 <xTaskRemoveFromEventList+0xb8>)
 800649c:	f7fe ff90 	bl	80053c0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <xTaskRemoveFromEventList+0xbc>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d905      	bls.n	80064ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064ae:	2301      	movs	r3, #1
 80064b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064b2:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <xTaskRemoveFromEventList+0xc0>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	e001      	b.n	80064be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80064be:	697b      	ldr	r3, [r7, #20]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	200007a4 	.word	0x200007a4
 80064cc:	20000784 	.word	0x20000784
 80064d0:	20000680 	.word	0x20000680
 80064d4:	2000073c 	.word	0x2000073c
 80064d8:	2000067c 	.word	0x2000067c
 80064dc:	20000790 	.word	0x20000790

080064e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064e8:	4b06      	ldr	r3, [pc, #24]	; (8006504 <vTaskInternalSetTimeOutState+0x24>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064f0:	4b05      	ldr	r3, [pc, #20]	; (8006508 <vTaskInternalSetTimeOutState+0x28>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	605a      	str	r2, [r3, #4]
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000794 	.word	0x20000794
 8006508:	20000780 	.word	0x20000780

0800650c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	613b      	str	r3, [r7, #16]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	60fb      	str	r3, [r7, #12]
}
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800654e:	f000 fb25 	bl	8006b9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006552:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <xTaskCheckForTimeOut+0xbc>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656a:	d102      	bne.n	8006572 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800656c:	2300      	movs	r3, #0
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	e023      	b.n	80065ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b15      	ldr	r3, [pc, #84]	; (80065cc <xTaskCheckForTimeOut+0xc0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d007      	beq.n	800658e <xTaskCheckForTimeOut+0x82>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	429a      	cmp	r2, r3
 8006586:	d302      	bcc.n	800658e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006588:	2301      	movs	r3, #1
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	e015      	b.n	80065ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	429a      	cmp	r2, r3
 8006596:	d20b      	bcs.n	80065b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	1ad2      	subs	r2, r2, r3
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7ff ff9b 	bl	80064e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	e004      	b.n	80065ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065b6:	2301      	movs	r3, #1
 80065b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065ba:	f000 fb1f 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 80065be:	69fb      	ldr	r3, [r7, #28]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3720      	adds	r7, #32
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000780 	.word	0x20000780
 80065cc:	20000794 	.word	0x20000794

080065d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065d4:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <vTaskMissedYield+0x14>)
 80065d6:	2201      	movs	r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
}
 80065da:	bf00      	nop
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000790 	.word	0x20000790

080065e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065f0:	f000 f852 	bl	8006698 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065f4:	4b06      	ldr	r3, [pc, #24]	; (8006610 <prvIdleTask+0x28>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d9f9      	bls.n	80065f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065fc:	4b05      	ldr	r3, [pc, #20]	; (8006614 <prvIdleTask+0x2c>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800660c:	e7f0      	b.n	80065f0 <prvIdleTask+0x8>
 800660e:	bf00      	nop
 8006610:	20000680 	.word	0x20000680
 8006614:	e000ed04 	.word	0xe000ed04

08006618 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800661e:	2300      	movs	r3, #0
 8006620:	607b      	str	r3, [r7, #4]
 8006622:	e00c      	b.n	800663e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4a12      	ldr	r2, [pc, #72]	; (8006678 <prvInitialiseTaskLists+0x60>)
 8006630:	4413      	add	r3, r2
 8006632:	4618      	mov	r0, r3
 8006634:	f7fe fe99 	bl	800536a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3301      	adds	r3, #1
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b06      	cmp	r3, #6
 8006642:	d9ef      	bls.n	8006624 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006644:	480d      	ldr	r0, [pc, #52]	; (800667c <prvInitialiseTaskLists+0x64>)
 8006646:	f7fe fe90 	bl	800536a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800664a:	480d      	ldr	r0, [pc, #52]	; (8006680 <prvInitialiseTaskLists+0x68>)
 800664c:	f7fe fe8d 	bl	800536a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006650:	480c      	ldr	r0, [pc, #48]	; (8006684 <prvInitialiseTaskLists+0x6c>)
 8006652:	f7fe fe8a 	bl	800536a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006656:	480c      	ldr	r0, [pc, #48]	; (8006688 <prvInitialiseTaskLists+0x70>)
 8006658:	f7fe fe87 	bl	800536a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800665c:	480b      	ldr	r0, [pc, #44]	; (800668c <prvInitialiseTaskLists+0x74>)
 800665e:	f7fe fe84 	bl	800536a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006662:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <prvInitialiseTaskLists+0x78>)
 8006664:	4a05      	ldr	r2, [pc, #20]	; (800667c <prvInitialiseTaskLists+0x64>)
 8006666:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <prvInitialiseTaskLists+0x7c>)
 800666a:	4a05      	ldr	r2, [pc, #20]	; (8006680 <prvInitialiseTaskLists+0x68>)
 800666c:	601a      	str	r2, [r3, #0]
}
 800666e:	bf00      	nop
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000680 	.word	0x20000680
 800667c:	2000070c 	.word	0x2000070c
 8006680:	20000720 	.word	0x20000720
 8006684:	2000073c 	.word	0x2000073c
 8006688:	20000750 	.word	0x20000750
 800668c:	20000768 	.word	0x20000768
 8006690:	20000734 	.word	0x20000734
 8006694:	20000738 	.word	0x20000738

08006698 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800669e:	e019      	b.n	80066d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066a0:	f000 fa7c 	bl	8006b9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80066a4:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <prvCheckTasksWaitingTermination+0x50>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3304      	adds	r3, #4
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fe fee0 	bl	8005476 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066b6:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <prvCheckTasksWaitingTermination+0x54>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	4a0b      	ldr	r2, [pc, #44]	; (80066ec <prvCheckTasksWaitingTermination+0x54>)
 80066be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066c0:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <prvCheckTasksWaitingTermination+0x58>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	4a0a      	ldr	r2, [pc, #40]	; (80066f0 <prvCheckTasksWaitingTermination+0x58>)
 80066c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066ca:	f000 fa97 	bl	8006bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f810 	bl	80066f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066d4:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <prvCheckTasksWaitingTermination+0x58>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e1      	bne.n	80066a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000750 	.word	0x20000750
 80066ec:	2000077c 	.word	0x2000077c
 80066f0:	20000764 	.word	0x20000764

080066f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3350      	adds	r3, #80	; 0x50
 8006700:	4618      	mov	r0, r3
 8006702:	f001 fd17 	bl	8008134 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d108      	bne.n	8006722 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fc05 	bl	8006f24 <vPortFree>
				vPortFree( pxTCB );
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fc02 	bl	8006f24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006720:	e018      	b.n	8006754 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006728:	2b01      	cmp	r3, #1
 800672a:	d103      	bne.n	8006734 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fbf9 	bl	8006f24 <vPortFree>
	}
 8006732:	e00f      	b.n	8006754 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800673a:	2b02      	cmp	r3, #2
 800673c:	d00a      	beq.n	8006754 <prvDeleteTCB+0x60>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	60fb      	str	r3, [r7, #12]
}
 8006750:	bf00      	nop
 8006752:	e7fe      	b.n	8006752 <prvDeleteTCB+0x5e>
	}
 8006754:	bf00      	nop
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006762:	4b0e      	ldr	r3, [pc, #56]	; (800679c <prvResetNextTaskUnblockTime+0x40>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <prvResetNextTaskUnblockTime+0x14>
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <prvResetNextTaskUnblockTime+0x16>
 8006770:	2300      	movs	r3, #0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d004      	beq.n	8006780 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006776:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <prvResetNextTaskUnblockTime+0x44>)
 8006778:	f04f 32ff 	mov.w	r2, #4294967295
 800677c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800677e:	e008      	b.n	8006792 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006780:	4b06      	ldr	r3, [pc, #24]	; (800679c <prvResetNextTaskUnblockTime+0x40>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	4a04      	ldr	r2, [pc, #16]	; (80067a0 <prvResetNextTaskUnblockTime+0x44>)
 8006790:	6013      	str	r3, [r2, #0]
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr
 800679c:	20000734 	.word	0x20000734
 80067a0:	2000079c 	.word	0x2000079c

080067a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <xTaskGetSchedulerState+0x34>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d102      	bne.n	80067b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067b2:	2301      	movs	r3, #1
 80067b4:	607b      	str	r3, [r7, #4]
 80067b6:	e008      	b.n	80067ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067b8:	4b08      	ldr	r3, [pc, #32]	; (80067dc <xTaskGetSchedulerState+0x38>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d102      	bne.n	80067c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067c0:	2302      	movs	r3, #2
 80067c2:	607b      	str	r3, [r7, #4]
 80067c4:	e001      	b.n	80067ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067c6:	2300      	movs	r3, #0
 80067c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067ca:	687b      	ldr	r3, [r7, #4]
	}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bc80      	pop	{r7}
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	20000788 	.word	0x20000788
 80067dc:	200007a4 	.word	0x200007a4

080067e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d06e      	beq.n	80068d4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067f6:	4b3a      	ldr	r3, [pc, #232]	; (80068e0 <xTaskPriorityDisinherit+0x100>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d00a      	beq.n	8006816 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	60fb      	str	r3, [r7, #12]
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10a      	bne.n	8006834 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	60bb      	str	r3, [r7, #8]
}
 8006830:	bf00      	nop
 8006832:	e7fe      	b.n	8006832 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006838:	1e5a      	subs	r2, r3, #1
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006846:	429a      	cmp	r2, r3
 8006848:	d044      	beq.n	80068d4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d140      	bne.n	80068d4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3304      	adds	r3, #4
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fe0d 	bl	8005476 <uxListRemove>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d115      	bne.n	800688e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006866:	491f      	ldr	r1, [pc, #124]	; (80068e4 <xTaskPriorityDisinherit+0x104>)
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10a      	bne.n	800688e <xTaskPriorityDisinherit+0xae>
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	2201      	movs	r2, #1
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	43da      	mvns	r2, r3
 8006884:	4b18      	ldr	r3, [pc, #96]	; (80068e8 <xTaskPriorityDisinherit+0x108>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4013      	ands	r3, r2
 800688a:	4a17      	ldr	r2, [pc, #92]	; (80068e8 <xTaskPriorityDisinherit+0x108>)
 800688c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689a:	f1c3 0207 	rsb	r2, r3, #7
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	2201      	movs	r2, #1
 80068a8:	409a      	lsls	r2, r3
 80068aa:	4b0f      	ldr	r3, [pc, #60]	; (80068e8 <xTaskPriorityDisinherit+0x108>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	4a0d      	ldr	r2, [pc, #52]	; (80068e8 <xTaskPriorityDisinherit+0x108>)
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4a08      	ldr	r2, [pc, #32]	; (80068e4 <xTaskPriorityDisinherit+0x104>)
 80068c2:	441a      	add	r2, r3
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f7fe fd78 	bl	80053c0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068d0:	2301      	movs	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068d4:	697b      	ldr	r3, [r7, #20]
	}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	2000067c 	.word	0x2000067c
 80068e4:	20000680 	.word	0x20000680
 80068e8:	20000784 	.word	0x20000784

080068ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80068f6:	4b29      	ldr	r3, [pc, #164]	; (800699c <prvAddCurrentTaskToDelayedList+0xb0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068fc:	4b28      	ldr	r3, [pc, #160]	; (80069a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3304      	adds	r3, #4
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe fdb7 	bl	8005476 <uxListRemove>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10b      	bne.n	8006926 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800690e:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	2201      	movs	r2, #1
 8006916:	fa02 f303 	lsl.w	r3, r2, r3
 800691a:	43da      	mvns	r2, r3
 800691c:	4b21      	ldr	r3, [pc, #132]	; (80069a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4013      	ands	r3, r2
 8006922:	4a20      	ldr	r2, [pc, #128]	; (80069a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006924:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d10a      	bne.n	8006944 <prvAddCurrentTaskToDelayedList+0x58>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d007      	beq.n	8006944 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006934:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3304      	adds	r3, #4
 800693a:	4619      	mov	r1, r3
 800693c:	481a      	ldr	r0, [pc, #104]	; (80069a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800693e:	f7fe fd3f 	bl	80053c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006942:	e026      	b.n	8006992 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4413      	add	r3, r2
 800694a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800694c:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	429a      	cmp	r2, r3
 800695a:	d209      	bcs.n	8006970 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800695c:	4b13      	ldr	r3, [pc, #76]	; (80069ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3304      	adds	r3, #4
 8006966:	4619      	mov	r1, r3
 8006968:	4610      	mov	r0, r2
 800696a:	f7fe fd4c 	bl	8005406 <vListInsert>
}
 800696e:	e010      	b.n	8006992 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006970:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3304      	adds	r3, #4
 800697a:	4619      	mov	r1, r3
 800697c:	4610      	mov	r0, r2
 800697e:	f7fe fd42 	bl	8005406 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006982:	4b0c      	ldr	r3, [pc, #48]	; (80069b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	429a      	cmp	r2, r3
 800698a:	d202      	bcs.n	8006992 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800698c:	4a09      	ldr	r2, [pc, #36]	; (80069b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	6013      	str	r3, [r2, #0]
}
 8006992:	bf00      	nop
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000780 	.word	0x20000780
 80069a0:	2000067c 	.word	0x2000067c
 80069a4:	20000784 	.word	0x20000784
 80069a8:	20000768 	.word	0x20000768
 80069ac:	20000738 	.word	0x20000738
 80069b0:	20000734 	.word	0x20000734
 80069b4:	2000079c 	.word	0x2000079c

080069b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3b04      	subs	r3, #4
 80069c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3b04      	subs	r3, #4
 80069d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f023 0201 	bic.w	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3b04      	subs	r3, #4
 80069e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069e8:	4a08      	ldr	r2, [pc, #32]	; (8006a0c <pxPortInitialiseStack+0x54>)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3b14      	subs	r3, #20
 80069f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3b20      	subs	r3, #32
 80069fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a00:	68fb      	ldr	r3, [r7, #12]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr
 8006a0c:	08006a11 	.word	0x08006a11

08006a10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a1a:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <prvTaskExitError+0x54>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a22:	d00a      	beq.n	8006a3a <prvTaskExitError+0x2a>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	60fb      	str	r3, [r7, #12]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <prvTaskExitError+0x28>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	60bb      	str	r3, [r7, #8]
}
 8006a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a4e:	bf00      	nop
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0fc      	beq.n	8006a50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a56:	bf00      	nop
 8006a58:	bf00      	nop
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bc80      	pop	{r7}
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	20000028 	.word	0x20000028
	...

08006a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <pxCurrentTCBConst2>)
 8006a72:	6819      	ldr	r1, [r3, #0]
 8006a74:	6808      	ldr	r0, [r1, #0]
 8006a76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a7a:	f380 8809 	msr	PSP, r0
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f04f 0000 	mov.w	r0, #0
 8006a86:	f380 8811 	msr	BASEPRI, r0
 8006a8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006a8e:	4770      	bx	lr

08006a90 <pxCurrentTCBConst2>:
 8006a90:	2000067c 	.word	0x2000067c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop

08006a98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006a98:	4806      	ldr	r0, [pc, #24]	; (8006ab4 <prvPortStartFirstTask+0x1c>)
 8006a9a:	6800      	ldr	r0, [r0, #0]
 8006a9c:	6800      	ldr	r0, [r0, #0]
 8006a9e:	f380 8808 	msr	MSP, r0
 8006aa2:	b662      	cpsie	i
 8006aa4:	b661      	cpsie	f
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	df00      	svc	0
 8006ab0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ab2:	bf00      	nop
 8006ab4:	e000ed08 	.word	0xe000ed08

08006ab8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006abe:	4b32      	ldr	r3, [pc, #200]	; (8006b88 <xPortStartScheduler+0xd0>)
 8006ac0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	22ff      	movs	r2, #255	; 0xff
 8006ace:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	4b2a      	ldr	r3, [pc, #168]	; (8006b8c <xPortStartScheduler+0xd4>)
 8006ae4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ae6:	4b2a      	ldr	r3, [pc, #168]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006ae8:	2207      	movs	r2, #7
 8006aea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aec:	e009      	b.n	8006b02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006aee:	4b28      	ldr	r3, [pc, #160]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	4a26      	ldr	r2, [pc, #152]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006af6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0a:	2b80      	cmp	r3, #128	; 0x80
 8006b0c:	d0ef      	beq.n	8006aee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b0e:	4b20      	ldr	r3, [pc, #128]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1c3 0307 	rsb	r3, r3, #7
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d00a      	beq.n	8006b30 <xPortStartScheduler+0x78>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	60bb      	str	r3, [r7, #8]
}
 8006b2c:	bf00      	nop
 8006b2e:	e7fe      	b.n	8006b2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b30:	4b17      	ldr	r3, [pc, #92]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	4a16      	ldr	r2, [pc, #88]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006b38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b3a:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b42:	4a13      	ldr	r2, [pc, #76]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006b44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b4e:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <xPortStartScheduler+0xdc>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a10      	ldr	r2, [pc, #64]	; (8006b94 <xPortStartScheduler+0xdc>)
 8006b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b5a:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <xPortStartScheduler+0xdc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a0d      	ldr	r2, [pc, #52]	; (8006b94 <xPortStartScheduler+0xdc>)
 8006b60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b66:	f000 f8b9 	bl	8006cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b6a:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <xPortStartScheduler+0xe0>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b70:	f7ff ff92 	bl	8006a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b74:	f7ff fbcc 	bl	8006310 <vTaskSwitchContext>
	prvTaskExitError();
 8006b78:	f7ff ff4a 	bl	8006a10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	e000e400 	.word	0xe000e400
 8006b8c:	200007a8 	.word	0x200007a8
 8006b90:	200007ac 	.word	0x200007ac
 8006b94:	e000ed20 	.word	0xe000ed20
 8006b98:	20000028 	.word	0x20000028

08006b9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	607b      	str	r3, [r7, #4]
}
 8006bb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <vPortEnterCritical+0x58>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	4a0d      	ldr	r2, [pc, #52]	; (8006bf4 <vPortEnterCritical+0x58>)
 8006bbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bc0:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <vPortEnterCritical+0x58>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d10f      	bne.n	8006be8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bc8:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <vPortEnterCritical+0x5c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	603b      	str	r3, [r7, #0]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <vPortEnterCritical+0x4a>
	}
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bc80      	pop	{r7}
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	20000028 	.word	0x20000028
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c02:	4b11      	ldr	r3, [pc, #68]	; (8006c48 <vPortExitCritical+0x4c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <vPortExitCritical+0x24>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	607b      	str	r3, [r7, #4]
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c20:	4b09      	ldr	r3, [pc, #36]	; (8006c48 <vPortExitCritical+0x4c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <vPortExitCritical+0x4c>)
 8006c28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c2a:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <vPortExitCritical+0x4c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d105      	bne.n	8006c3e <vPortExitCritical+0x42>
 8006c32:	2300      	movs	r3, #0
 8006c34:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr
 8006c48:	20000028 	.word	0x20000028
 8006c4c:	00000000 	.word	0x00000000

08006c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c50:	f3ef 8009 	mrs	r0, PSP
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <pxCurrentTCBConst>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c60:	6010      	str	r0, [r2, #0]
 8006c62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006c66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c6a:	f380 8811 	msr	BASEPRI, r0
 8006c6e:	f7ff fb4f 	bl	8006310 <vTaskSwitchContext>
 8006c72:	f04f 0000 	mov.w	r0, #0
 8006c76:	f380 8811 	msr	BASEPRI, r0
 8006c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c7e:	6819      	ldr	r1, [r3, #0]
 8006c80:	6808      	ldr	r0, [r1, #0]
 8006c82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c86:	f380 8809 	msr	PSP, r0
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	4770      	bx	lr

08006c90 <pxCurrentTCBConst>:
 8006c90:	2000067c 	.word	0x2000067c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop

08006c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	607b      	str	r3, [r7, #4]
}
 8006cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cb2:	f7ff fa6f 	bl	8006194 <xTaskIncrementTick>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <SysTick_Handler+0x40>)
 8006cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f383 8811 	msr	BASEPRI, r3
}
 8006cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	e000ed04 	.word	0xe000ed04

08006cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <vPortSetupTimerInterrupt+0x30>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ce6:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <vPortSetupTimerInterrupt+0x34>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cec:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <vPortSetupTimerInterrupt+0x38>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a09      	ldr	r2, [pc, #36]	; (8006d18 <vPortSetupTimerInterrupt+0x3c>)
 8006cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf6:	099b      	lsrs	r3, r3, #6
 8006cf8:	4a08      	ldr	r2, [pc, #32]	; (8006d1c <vPortSetupTimerInterrupt+0x40>)
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cfe:	4b03      	ldr	r3, [pc, #12]	; (8006d0c <vPortSetupTimerInterrupt+0x30>)
 8006d00:	2207      	movs	r2, #7
 8006d02:	601a      	str	r2, [r3, #0]
}
 8006d04:	bf00      	nop
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bc80      	pop	{r7}
 8006d0a:	4770      	bx	lr
 8006d0c:	e000e010 	.word	0xe000e010
 8006d10:	e000e018 	.word	0xe000e018
 8006d14:	2000001c 	.word	0x2000001c
 8006d18:	10624dd3 	.word	0x10624dd3
 8006d1c:	e000e014 	.word	0xe000e014

08006d20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d26:	f3ef 8305 	mrs	r3, IPSR
 8006d2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b0f      	cmp	r3, #15
 8006d30:	d914      	bls.n	8006d5c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d32:	4a16      	ldr	r2, [pc, #88]	; (8006d8c <vPortValidateInterruptPriority+0x6c>)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d3c:	4b14      	ldr	r3, [pc, #80]	; (8006d90 <vPortValidateInterruptPriority+0x70>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	7afa      	ldrb	r2, [r7, #11]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d20a      	bcs.n	8006d5c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	607b      	str	r3, [r7, #4]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	; (8006d94 <vPortValidateInterruptPriority+0x74>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d64:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <vPortValidateInterruptPriority+0x78>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d90a      	bls.n	8006d82 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	603b      	str	r3, [r7, #0]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <vPortValidateInterruptPriority+0x60>
	}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr
 8006d8c:	e000e3f0 	.word	0xe000e3f0
 8006d90:	200007a8 	.word	0x200007a8
 8006d94:	e000ed0c 	.word	0xe000ed0c
 8006d98:	200007ac 	.word	0x200007ac

08006d9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	; 0x28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006da8:	f7ff f92a 	bl	8006000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dac:	4b58      	ldr	r3, [pc, #352]	; (8006f10 <pvPortMalloc+0x174>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006db4:	f000 f910 	bl	8006fd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006db8:	4b56      	ldr	r3, [pc, #344]	; (8006f14 <pvPortMalloc+0x178>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f040 808e 	bne.w	8006ee2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01d      	beq.n	8006e08 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006dcc:	2208      	movs	r2, #8
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d014      	beq.n	8006e08 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f023 0307 	bic.w	r3, r3, #7
 8006de4:	3308      	adds	r3, #8
 8006de6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <pvPortMalloc+0x6c>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	617b      	str	r3, [r7, #20]
}
 8006e04:	bf00      	nop
 8006e06:	e7fe      	b.n	8006e06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d069      	beq.n	8006ee2 <pvPortMalloc+0x146>
 8006e0e:	4b42      	ldr	r3, [pc, #264]	; (8006f18 <pvPortMalloc+0x17c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d864      	bhi.n	8006ee2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e18:	4b40      	ldr	r3, [pc, #256]	; (8006f1c <pvPortMalloc+0x180>)
 8006e1a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e1c:	4b3f      	ldr	r3, [pc, #252]	; (8006f1c <pvPortMalloc+0x180>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e22:	e004      	b.n	8006e2e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d903      	bls.n	8006e40 <pvPortMalloc+0xa4>
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1f1      	bne.n	8006e24 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e40:	4b33      	ldr	r3, [pc, #204]	; (8006f10 <pvPortMalloc+0x174>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d04b      	beq.n	8006ee2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2208      	movs	r2, #8
 8006e50:	4413      	add	r3, r2
 8006e52:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	1ad2      	subs	r2, r2, r3
 8006e64:	2308      	movs	r3, #8
 8006e66:	005b      	lsls	r3, r3, #1
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d91f      	bls.n	8006eac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4413      	add	r3, r2
 8006e72:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <pvPortMalloc+0xf8>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	613b      	str	r3, [r7, #16]
}
 8006e90:	bf00      	nop
 8006e92:	e7fe      	b.n	8006e92 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	1ad2      	subs	r2, r2, r3
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ea6:	69b8      	ldr	r0, [r7, #24]
 8006ea8:	f000 f8f8 	bl	800709c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006eac:	4b1a      	ldr	r3, [pc, #104]	; (8006f18 <pvPortMalloc+0x17c>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <pvPortMalloc+0x17c>)
 8006eb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eba:	4b17      	ldr	r3, [pc, #92]	; (8006f18 <pvPortMalloc+0x17c>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4b18      	ldr	r3, [pc, #96]	; (8006f20 <pvPortMalloc+0x184>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d203      	bcs.n	8006ece <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ec6:	4b14      	ldr	r3, [pc, #80]	; (8006f18 <pvPortMalloc+0x17c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <pvPortMalloc+0x184>)
 8006ecc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	4b10      	ldr	r3, [pc, #64]	; (8006f14 <pvPortMalloc+0x178>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ee2:	f7ff f89b 	bl	800601c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	f003 0307 	and.w	r3, r3, #7
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00a      	beq.n	8006f06 <pvPortMalloc+0x16a>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	60fb      	str	r3, [r7, #12]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <pvPortMalloc+0x168>
	return pvReturn;
 8006f06:	69fb      	ldr	r3, [r7, #28]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3728      	adds	r7, #40	; 0x28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	200017b8 	.word	0x200017b8
 8006f14:	200017c4 	.word	0x200017c4
 8006f18:	200017bc 	.word	0x200017bc
 8006f1c:	200017b0 	.word	0x200017b0
 8006f20:	200017c0 	.word	0x200017c0

08006f24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d048      	beq.n	8006fc8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f36:	2308      	movs	r3, #8
 8006f38:	425b      	negs	r3, r3
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	4b21      	ldr	r3, [pc, #132]	; (8006fd0 <vPortFree+0xac>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <vPortFree+0x44>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60fb      	str	r3, [r7, #12]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <vPortFree+0x62>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	60bb      	str	r3, [r7, #8]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	4b11      	ldr	r3, [pc, #68]	; (8006fd0 <vPortFree+0xac>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d019      	beq.n	8006fc8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d115      	bne.n	8006fc8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	4b0b      	ldr	r3, [pc, #44]	; (8006fd0 <vPortFree+0xac>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	401a      	ands	r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fac:	f7ff f828 	bl	8006000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <vPortFree+0xb0>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4413      	add	r3, r2
 8006fba:	4a06      	ldr	r2, [pc, #24]	; (8006fd4 <vPortFree+0xb0>)
 8006fbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fbe:	6938      	ldr	r0, [r7, #16]
 8006fc0:	f000 f86c 	bl	800709c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006fc4:	f7ff f82a 	bl	800601c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fc8:	bf00      	nop
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	200017c4 	.word	0x200017c4
 8006fd4:	200017bc 	.word	0x200017bc

08006fd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fe2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fe4:	4b27      	ldr	r3, [pc, #156]	; (8007084 <prvHeapInit+0xac>)
 8006fe6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00c      	beq.n	800700c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3307      	adds	r3, #7
 8006ff6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0307 	bic.w	r3, r3, #7
 8006ffe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	4a1f      	ldr	r2, [pc, #124]	; (8007084 <prvHeapInit+0xac>)
 8007008:	4413      	add	r3, r2
 800700a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007010:	4a1d      	ldr	r2, [pc, #116]	; (8007088 <prvHeapInit+0xb0>)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007016:	4b1c      	ldr	r3, [pc, #112]	; (8007088 <prvHeapInit+0xb0>)
 8007018:	2200      	movs	r2, #0
 800701a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	4413      	add	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007024:	2208      	movs	r2, #8
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	1a9b      	subs	r3, r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0307 	bic.w	r3, r3, #7
 8007032:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4a15      	ldr	r2, [pc, #84]	; (800708c <prvHeapInit+0xb4>)
 8007038:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800703a:	4b14      	ldr	r3, [pc, #80]	; (800708c <prvHeapInit+0xb4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2200      	movs	r2, #0
 8007040:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007042:	4b12      	ldr	r3, [pc, #72]	; (800708c <prvHeapInit+0xb4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	1ad2      	subs	r2, r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <prvHeapInit+0xb4>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	4a0a      	ldr	r2, [pc, #40]	; (8007090 <prvHeapInit+0xb8>)
 8007066:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	4a09      	ldr	r2, [pc, #36]	; (8007094 <prvHeapInit+0xbc>)
 800706e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007070:	4b09      	ldr	r3, [pc, #36]	; (8007098 <prvHeapInit+0xc0>)
 8007072:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007076:	601a      	str	r2, [r3, #0]
}
 8007078:	bf00      	nop
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	bc80      	pop	{r7}
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	200007b0 	.word	0x200007b0
 8007088:	200017b0 	.word	0x200017b0
 800708c:	200017b8 	.word	0x200017b8
 8007090:	200017c0 	.word	0x200017c0
 8007094:	200017bc 	.word	0x200017bc
 8007098:	200017c4 	.word	0x200017c4

0800709c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070a4:	4b27      	ldr	r3, [pc, #156]	; (8007144 <prvInsertBlockIntoFreeList+0xa8>)
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	e002      	b.n	80070b0 <prvInsertBlockIntoFreeList+0x14>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d8f7      	bhi.n	80070aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	4413      	add	r3, r2
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d108      	bne.n	80070de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	441a      	add	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	441a      	add	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d118      	bne.n	8007124 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	4b14      	ldr	r3, [pc, #80]	; (8007148 <prvInsertBlockIntoFreeList+0xac>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d00d      	beq.n	800711a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	441a      	add	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	e008      	b.n	800712c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800711a:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <prvInsertBlockIntoFreeList+0xac>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	e003      	b.n	800712c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d002      	beq.n	800713a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr
 8007144:	200017b0 	.word	0x200017b0
 8007148:	200017b8 	.word	0x200017b8

0800714c <__cvt>:
 800714c:	2b00      	cmp	r3, #0
 800714e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007152:	461f      	mov	r7, r3
 8007154:	bfbb      	ittet	lt
 8007156:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800715a:	461f      	movlt	r7, r3
 800715c:	2300      	movge	r3, #0
 800715e:	232d      	movlt	r3, #45	; 0x2d
 8007160:	b088      	sub	sp, #32
 8007162:	4614      	mov	r4, r2
 8007164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007166:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007168:	7013      	strb	r3, [r2, #0]
 800716a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800716c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007170:	f023 0820 	bic.w	r8, r3, #32
 8007174:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007178:	d005      	beq.n	8007186 <__cvt+0x3a>
 800717a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800717e:	d100      	bne.n	8007182 <__cvt+0x36>
 8007180:	3501      	adds	r5, #1
 8007182:	2302      	movs	r3, #2
 8007184:	e000      	b.n	8007188 <__cvt+0x3c>
 8007186:	2303      	movs	r3, #3
 8007188:	aa07      	add	r2, sp, #28
 800718a:	9204      	str	r2, [sp, #16]
 800718c:	aa06      	add	r2, sp, #24
 800718e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007192:	e9cd 3500 	strd	r3, r5, [sp]
 8007196:	4622      	mov	r2, r4
 8007198:	463b      	mov	r3, r7
 800719a:	f001 f931 	bl	8008400 <_dtoa_r>
 800719e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80071a2:	4606      	mov	r6, r0
 80071a4:	d102      	bne.n	80071ac <__cvt+0x60>
 80071a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071a8:	07db      	lsls	r3, r3, #31
 80071aa:	d522      	bpl.n	80071f2 <__cvt+0xa6>
 80071ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071b0:	eb06 0905 	add.w	r9, r6, r5
 80071b4:	d110      	bne.n	80071d8 <__cvt+0x8c>
 80071b6:	7833      	ldrb	r3, [r6, #0]
 80071b8:	2b30      	cmp	r3, #48	; 0x30
 80071ba:	d10a      	bne.n	80071d2 <__cvt+0x86>
 80071bc:	2200      	movs	r2, #0
 80071be:	2300      	movs	r3, #0
 80071c0:	4620      	mov	r0, r4
 80071c2:	4639      	mov	r1, r7
 80071c4:	f7f9 fbf0 	bl	80009a8 <__aeabi_dcmpeq>
 80071c8:	b918      	cbnz	r0, 80071d2 <__cvt+0x86>
 80071ca:	f1c5 0501 	rsb	r5, r5, #1
 80071ce:	f8ca 5000 	str.w	r5, [sl]
 80071d2:	f8da 3000 	ldr.w	r3, [sl]
 80071d6:	4499      	add	r9, r3
 80071d8:	2200      	movs	r2, #0
 80071da:	2300      	movs	r3, #0
 80071dc:	4620      	mov	r0, r4
 80071de:	4639      	mov	r1, r7
 80071e0:	f7f9 fbe2 	bl	80009a8 <__aeabi_dcmpeq>
 80071e4:	b108      	cbz	r0, 80071ea <__cvt+0x9e>
 80071e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80071ea:	2230      	movs	r2, #48	; 0x30
 80071ec:	9b07      	ldr	r3, [sp, #28]
 80071ee:	454b      	cmp	r3, r9
 80071f0:	d307      	bcc.n	8007202 <__cvt+0xb6>
 80071f2:	4630      	mov	r0, r6
 80071f4:	9b07      	ldr	r3, [sp, #28]
 80071f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80071f8:	1b9b      	subs	r3, r3, r6
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	b008      	add	sp, #32
 80071fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007202:	1c59      	adds	r1, r3, #1
 8007204:	9107      	str	r1, [sp, #28]
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	e7f0      	b.n	80071ec <__cvt+0xa0>

0800720a <__exponent>:
 800720a:	4603      	mov	r3, r0
 800720c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800720e:	2900      	cmp	r1, #0
 8007210:	f803 2b02 	strb.w	r2, [r3], #2
 8007214:	bfb6      	itet	lt
 8007216:	222d      	movlt	r2, #45	; 0x2d
 8007218:	222b      	movge	r2, #43	; 0x2b
 800721a:	4249      	neglt	r1, r1
 800721c:	2909      	cmp	r1, #9
 800721e:	7042      	strb	r2, [r0, #1]
 8007220:	dd2a      	ble.n	8007278 <__exponent+0x6e>
 8007222:	f10d 0207 	add.w	r2, sp, #7
 8007226:	4617      	mov	r7, r2
 8007228:	260a      	movs	r6, #10
 800722a:	fb91 f5f6 	sdiv	r5, r1, r6
 800722e:	4694      	mov	ip, r2
 8007230:	fb06 1415 	mls	r4, r6, r5, r1
 8007234:	3430      	adds	r4, #48	; 0x30
 8007236:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800723a:	460c      	mov	r4, r1
 800723c:	2c63      	cmp	r4, #99	; 0x63
 800723e:	4629      	mov	r1, r5
 8007240:	f102 32ff 	add.w	r2, r2, #4294967295
 8007244:	dcf1      	bgt.n	800722a <__exponent+0x20>
 8007246:	3130      	adds	r1, #48	; 0x30
 8007248:	f1ac 0402 	sub.w	r4, ip, #2
 800724c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007250:	4622      	mov	r2, r4
 8007252:	1c41      	adds	r1, r0, #1
 8007254:	42ba      	cmp	r2, r7
 8007256:	d30a      	bcc.n	800726e <__exponent+0x64>
 8007258:	f10d 0209 	add.w	r2, sp, #9
 800725c:	eba2 020c 	sub.w	r2, r2, ip
 8007260:	42bc      	cmp	r4, r7
 8007262:	bf88      	it	hi
 8007264:	2200      	movhi	r2, #0
 8007266:	4413      	add	r3, r2
 8007268:	1a18      	subs	r0, r3, r0
 800726a:	b003      	add	sp, #12
 800726c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800726e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007272:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007276:	e7ed      	b.n	8007254 <__exponent+0x4a>
 8007278:	2330      	movs	r3, #48	; 0x30
 800727a:	3130      	adds	r1, #48	; 0x30
 800727c:	7083      	strb	r3, [r0, #2]
 800727e:	70c1      	strb	r1, [r0, #3]
 8007280:	1d03      	adds	r3, r0, #4
 8007282:	e7f1      	b.n	8007268 <__exponent+0x5e>

08007284 <_printf_float>:
 8007284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007288:	b091      	sub	sp, #68	; 0x44
 800728a:	460c      	mov	r4, r1
 800728c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007290:	4616      	mov	r6, r2
 8007292:	461f      	mov	r7, r3
 8007294:	4605      	mov	r5, r0
 8007296:	f000 ff39 	bl	800810c <_localeconv_r>
 800729a:	6803      	ldr	r3, [r0, #0]
 800729c:	4618      	mov	r0, r3
 800729e:	9309      	str	r3, [sp, #36]	; 0x24
 80072a0:	f7f8 ff56 	bl	8000150 <strlen>
 80072a4:	2300      	movs	r3, #0
 80072a6:	930e      	str	r3, [sp, #56]	; 0x38
 80072a8:	f8d8 3000 	ldr.w	r3, [r8]
 80072ac:	900a      	str	r0, [sp, #40]	; 0x28
 80072ae:	3307      	adds	r3, #7
 80072b0:	f023 0307 	bic.w	r3, r3, #7
 80072b4:	f103 0208 	add.w	r2, r3, #8
 80072b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80072bc:	f8d4 b000 	ldr.w	fp, [r4]
 80072c0:	f8c8 2000 	str.w	r2, [r8]
 80072c4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80072c8:	4652      	mov	r2, sl
 80072ca:	4643      	mov	r3, r8
 80072cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80072d0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80072d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80072d6:	f04f 32ff 	mov.w	r2, #4294967295
 80072da:	4650      	mov	r0, sl
 80072dc:	4b9c      	ldr	r3, [pc, #624]	; (8007550 <_printf_float+0x2cc>)
 80072de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072e0:	f7f9 fb94 	bl	8000a0c <__aeabi_dcmpun>
 80072e4:	bb70      	cbnz	r0, 8007344 <_printf_float+0xc0>
 80072e6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ea:	4650      	mov	r0, sl
 80072ec:	4b98      	ldr	r3, [pc, #608]	; (8007550 <_printf_float+0x2cc>)
 80072ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072f0:	f7f9 fb6e 	bl	80009d0 <__aeabi_dcmple>
 80072f4:	bb30      	cbnz	r0, 8007344 <_printf_float+0xc0>
 80072f6:	2200      	movs	r2, #0
 80072f8:	2300      	movs	r3, #0
 80072fa:	4650      	mov	r0, sl
 80072fc:	4641      	mov	r1, r8
 80072fe:	f7f9 fb5d 	bl	80009bc <__aeabi_dcmplt>
 8007302:	b110      	cbz	r0, 800730a <_printf_float+0x86>
 8007304:	232d      	movs	r3, #45	; 0x2d
 8007306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800730a:	4a92      	ldr	r2, [pc, #584]	; (8007554 <_printf_float+0x2d0>)
 800730c:	4b92      	ldr	r3, [pc, #584]	; (8007558 <_printf_float+0x2d4>)
 800730e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007312:	bf94      	ite	ls
 8007314:	4690      	movls	r8, r2
 8007316:	4698      	movhi	r8, r3
 8007318:	2303      	movs	r3, #3
 800731a:	f04f 0a00 	mov.w	sl, #0
 800731e:	6123      	str	r3, [r4, #16]
 8007320:	f02b 0304 	bic.w	r3, fp, #4
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	4633      	mov	r3, r6
 8007328:	4621      	mov	r1, r4
 800732a:	4628      	mov	r0, r5
 800732c:	9700      	str	r7, [sp, #0]
 800732e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007330:	f000 f9d6 	bl	80076e0 <_printf_common>
 8007334:	3001      	adds	r0, #1
 8007336:	f040 8090 	bne.w	800745a <_printf_float+0x1d6>
 800733a:	f04f 30ff 	mov.w	r0, #4294967295
 800733e:	b011      	add	sp, #68	; 0x44
 8007340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007344:	4652      	mov	r2, sl
 8007346:	4643      	mov	r3, r8
 8007348:	4650      	mov	r0, sl
 800734a:	4641      	mov	r1, r8
 800734c:	f7f9 fb5e 	bl	8000a0c <__aeabi_dcmpun>
 8007350:	b148      	cbz	r0, 8007366 <_printf_float+0xe2>
 8007352:	f1b8 0f00 	cmp.w	r8, #0
 8007356:	bfb8      	it	lt
 8007358:	232d      	movlt	r3, #45	; 0x2d
 800735a:	4a80      	ldr	r2, [pc, #512]	; (800755c <_printf_float+0x2d8>)
 800735c:	bfb8      	it	lt
 800735e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007362:	4b7f      	ldr	r3, [pc, #508]	; (8007560 <_printf_float+0x2dc>)
 8007364:	e7d3      	b.n	800730e <_printf_float+0x8a>
 8007366:	6863      	ldr	r3, [r4, #4]
 8007368:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	d142      	bne.n	80073f6 <_printf_float+0x172>
 8007370:	2306      	movs	r3, #6
 8007372:	6063      	str	r3, [r4, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	9206      	str	r2, [sp, #24]
 8007378:	aa0e      	add	r2, sp, #56	; 0x38
 800737a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800737e:	aa0d      	add	r2, sp, #52	; 0x34
 8007380:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007384:	9203      	str	r2, [sp, #12]
 8007386:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800738a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800738e:	6023      	str	r3, [r4, #0]
 8007390:	6863      	ldr	r3, [r4, #4]
 8007392:	4652      	mov	r2, sl
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4628      	mov	r0, r5
 8007398:	4643      	mov	r3, r8
 800739a:	910b      	str	r1, [sp, #44]	; 0x2c
 800739c:	f7ff fed6 	bl	800714c <__cvt>
 80073a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073a2:	4680      	mov	r8, r0
 80073a4:	2947      	cmp	r1, #71	; 0x47
 80073a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80073a8:	d108      	bne.n	80073bc <_printf_float+0x138>
 80073aa:	1cc8      	adds	r0, r1, #3
 80073ac:	db02      	blt.n	80073b4 <_printf_float+0x130>
 80073ae:	6863      	ldr	r3, [r4, #4]
 80073b0:	4299      	cmp	r1, r3
 80073b2:	dd40      	ble.n	8007436 <_printf_float+0x1b2>
 80073b4:	f1a9 0902 	sub.w	r9, r9, #2
 80073b8:	fa5f f989 	uxtb.w	r9, r9
 80073bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80073c0:	d81f      	bhi.n	8007402 <_printf_float+0x17e>
 80073c2:	464a      	mov	r2, r9
 80073c4:	3901      	subs	r1, #1
 80073c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80073ca:	910d      	str	r1, [sp, #52]	; 0x34
 80073cc:	f7ff ff1d 	bl	800720a <__exponent>
 80073d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073d2:	4682      	mov	sl, r0
 80073d4:	1813      	adds	r3, r2, r0
 80073d6:	2a01      	cmp	r2, #1
 80073d8:	6123      	str	r3, [r4, #16]
 80073da:	dc02      	bgt.n	80073e2 <_printf_float+0x15e>
 80073dc:	6822      	ldr	r2, [r4, #0]
 80073de:	07d2      	lsls	r2, r2, #31
 80073e0:	d501      	bpl.n	80073e6 <_printf_float+0x162>
 80073e2:	3301      	adds	r3, #1
 80073e4:	6123      	str	r3, [r4, #16]
 80073e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d09b      	beq.n	8007326 <_printf_float+0xa2>
 80073ee:	232d      	movs	r3, #45	; 0x2d
 80073f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f4:	e797      	b.n	8007326 <_printf_float+0xa2>
 80073f6:	2947      	cmp	r1, #71	; 0x47
 80073f8:	d1bc      	bne.n	8007374 <_printf_float+0xf0>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1ba      	bne.n	8007374 <_printf_float+0xf0>
 80073fe:	2301      	movs	r3, #1
 8007400:	e7b7      	b.n	8007372 <_printf_float+0xee>
 8007402:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007406:	d118      	bne.n	800743a <_printf_float+0x1b6>
 8007408:	2900      	cmp	r1, #0
 800740a:	6863      	ldr	r3, [r4, #4]
 800740c:	dd0b      	ble.n	8007426 <_printf_float+0x1a2>
 800740e:	6121      	str	r1, [r4, #16]
 8007410:	b913      	cbnz	r3, 8007418 <_printf_float+0x194>
 8007412:	6822      	ldr	r2, [r4, #0]
 8007414:	07d0      	lsls	r0, r2, #31
 8007416:	d502      	bpl.n	800741e <_printf_float+0x19a>
 8007418:	3301      	adds	r3, #1
 800741a:	440b      	add	r3, r1
 800741c:	6123      	str	r3, [r4, #16]
 800741e:	f04f 0a00 	mov.w	sl, #0
 8007422:	65a1      	str	r1, [r4, #88]	; 0x58
 8007424:	e7df      	b.n	80073e6 <_printf_float+0x162>
 8007426:	b913      	cbnz	r3, 800742e <_printf_float+0x1aa>
 8007428:	6822      	ldr	r2, [r4, #0]
 800742a:	07d2      	lsls	r2, r2, #31
 800742c:	d501      	bpl.n	8007432 <_printf_float+0x1ae>
 800742e:	3302      	adds	r3, #2
 8007430:	e7f4      	b.n	800741c <_printf_float+0x198>
 8007432:	2301      	movs	r3, #1
 8007434:	e7f2      	b.n	800741c <_printf_float+0x198>
 8007436:	f04f 0967 	mov.w	r9, #103	; 0x67
 800743a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800743c:	4299      	cmp	r1, r3
 800743e:	db05      	blt.n	800744c <_printf_float+0x1c8>
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	6121      	str	r1, [r4, #16]
 8007444:	07d8      	lsls	r0, r3, #31
 8007446:	d5ea      	bpl.n	800741e <_printf_float+0x19a>
 8007448:	1c4b      	adds	r3, r1, #1
 800744a:	e7e7      	b.n	800741c <_printf_float+0x198>
 800744c:	2900      	cmp	r1, #0
 800744e:	bfcc      	ite	gt
 8007450:	2201      	movgt	r2, #1
 8007452:	f1c1 0202 	rsble	r2, r1, #2
 8007456:	4413      	add	r3, r2
 8007458:	e7e0      	b.n	800741c <_printf_float+0x198>
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	055a      	lsls	r2, r3, #21
 800745e:	d407      	bmi.n	8007470 <_printf_float+0x1ec>
 8007460:	6923      	ldr	r3, [r4, #16]
 8007462:	4642      	mov	r2, r8
 8007464:	4631      	mov	r1, r6
 8007466:	4628      	mov	r0, r5
 8007468:	47b8      	blx	r7
 800746a:	3001      	adds	r0, #1
 800746c:	d12b      	bne.n	80074c6 <_printf_float+0x242>
 800746e:	e764      	b.n	800733a <_printf_float+0xb6>
 8007470:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007474:	f240 80dd 	bls.w	8007632 <_printf_float+0x3ae>
 8007478:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800747c:	2200      	movs	r2, #0
 800747e:	2300      	movs	r3, #0
 8007480:	f7f9 fa92 	bl	80009a8 <__aeabi_dcmpeq>
 8007484:	2800      	cmp	r0, #0
 8007486:	d033      	beq.n	80074f0 <_printf_float+0x26c>
 8007488:	2301      	movs	r3, #1
 800748a:	4631      	mov	r1, r6
 800748c:	4628      	mov	r0, r5
 800748e:	4a35      	ldr	r2, [pc, #212]	; (8007564 <_printf_float+0x2e0>)
 8007490:	47b8      	blx	r7
 8007492:	3001      	adds	r0, #1
 8007494:	f43f af51 	beq.w	800733a <_printf_float+0xb6>
 8007498:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800749c:	429a      	cmp	r2, r3
 800749e:	db02      	blt.n	80074a6 <_printf_float+0x222>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	07d8      	lsls	r0, r3, #31
 80074a4:	d50f      	bpl.n	80074c6 <_printf_float+0x242>
 80074a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074aa:	4631      	mov	r1, r6
 80074ac:	4628      	mov	r0, r5
 80074ae:	47b8      	blx	r7
 80074b0:	3001      	adds	r0, #1
 80074b2:	f43f af42 	beq.w	800733a <_printf_float+0xb6>
 80074b6:	f04f 0800 	mov.w	r8, #0
 80074ba:	f104 091a 	add.w	r9, r4, #26
 80074be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074c0:	3b01      	subs	r3, #1
 80074c2:	4543      	cmp	r3, r8
 80074c4:	dc09      	bgt.n	80074da <_printf_float+0x256>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	079b      	lsls	r3, r3, #30
 80074ca:	f100 8104 	bmi.w	80076d6 <_printf_float+0x452>
 80074ce:	68e0      	ldr	r0, [r4, #12]
 80074d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074d2:	4298      	cmp	r0, r3
 80074d4:	bfb8      	it	lt
 80074d6:	4618      	movlt	r0, r3
 80074d8:	e731      	b.n	800733e <_printf_float+0xba>
 80074da:	2301      	movs	r3, #1
 80074dc:	464a      	mov	r2, r9
 80074de:	4631      	mov	r1, r6
 80074e0:	4628      	mov	r0, r5
 80074e2:	47b8      	blx	r7
 80074e4:	3001      	adds	r0, #1
 80074e6:	f43f af28 	beq.w	800733a <_printf_float+0xb6>
 80074ea:	f108 0801 	add.w	r8, r8, #1
 80074ee:	e7e6      	b.n	80074be <_printf_float+0x23a>
 80074f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	dc38      	bgt.n	8007568 <_printf_float+0x2e4>
 80074f6:	2301      	movs	r3, #1
 80074f8:	4631      	mov	r1, r6
 80074fa:	4628      	mov	r0, r5
 80074fc:	4a19      	ldr	r2, [pc, #100]	; (8007564 <_printf_float+0x2e0>)
 80074fe:	47b8      	blx	r7
 8007500:	3001      	adds	r0, #1
 8007502:	f43f af1a 	beq.w	800733a <_printf_float+0xb6>
 8007506:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800750a:	4313      	orrs	r3, r2
 800750c:	d102      	bne.n	8007514 <_printf_float+0x290>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	07d9      	lsls	r1, r3, #31
 8007512:	d5d8      	bpl.n	80074c6 <_printf_float+0x242>
 8007514:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007518:	4631      	mov	r1, r6
 800751a:	4628      	mov	r0, r5
 800751c:	47b8      	blx	r7
 800751e:	3001      	adds	r0, #1
 8007520:	f43f af0b 	beq.w	800733a <_printf_float+0xb6>
 8007524:	f04f 0900 	mov.w	r9, #0
 8007528:	f104 0a1a 	add.w	sl, r4, #26
 800752c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800752e:	425b      	negs	r3, r3
 8007530:	454b      	cmp	r3, r9
 8007532:	dc01      	bgt.n	8007538 <_printf_float+0x2b4>
 8007534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007536:	e794      	b.n	8007462 <_printf_float+0x1de>
 8007538:	2301      	movs	r3, #1
 800753a:	4652      	mov	r2, sl
 800753c:	4631      	mov	r1, r6
 800753e:	4628      	mov	r0, r5
 8007540:	47b8      	blx	r7
 8007542:	3001      	adds	r0, #1
 8007544:	f43f aef9 	beq.w	800733a <_printf_float+0xb6>
 8007548:	f109 0901 	add.w	r9, r9, #1
 800754c:	e7ee      	b.n	800752c <_printf_float+0x2a8>
 800754e:	bf00      	nop
 8007550:	7fefffff 	.word	0x7fefffff
 8007554:	0800d31a 	.word	0x0800d31a
 8007558:	0800d31e 	.word	0x0800d31e
 800755c:	0800d322 	.word	0x0800d322
 8007560:	0800d326 	.word	0x0800d326
 8007564:	0800d32a 	.word	0x0800d32a
 8007568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800756a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800756c:	429a      	cmp	r2, r3
 800756e:	bfa8      	it	ge
 8007570:	461a      	movge	r2, r3
 8007572:	2a00      	cmp	r2, #0
 8007574:	4691      	mov	r9, r2
 8007576:	dc37      	bgt.n	80075e8 <_printf_float+0x364>
 8007578:	f04f 0b00 	mov.w	fp, #0
 800757c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007580:	f104 021a 	add.w	r2, r4, #26
 8007584:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007588:	ebaa 0309 	sub.w	r3, sl, r9
 800758c:	455b      	cmp	r3, fp
 800758e:	dc33      	bgt.n	80075f8 <_printf_float+0x374>
 8007590:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007594:	429a      	cmp	r2, r3
 8007596:	db3b      	blt.n	8007610 <_printf_float+0x38c>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	07da      	lsls	r2, r3, #31
 800759c:	d438      	bmi.n	8007610 <_printf_float+0x38c>
 800759e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80075a2:	eba2 0903 	sub.w	r9, r2, r3
 80075a6:	eba2 020a 	sub.w	r2, r2, sl
 80075aa:	4591      	cmp	r9, r2
 80075ac:	bfa8      	it	ge
 80075ae:	4691      	movge	r9, r2
 80075b0:	f1b9 0f00 	cmp.w	r9, #0
 80075b4:	dc34      	bgt.n	8007620 <_printf_float+0x39c>
 80075b6:	f04f 0800 	mov.w	r8, #0
 80075ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075be:	f104 0a1a 	add.w	sl, r4, #26
 80075c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	eba3 0309 	sub.w	r3, r3, r9
 80075cc:	4543      	cmp	r3, r8
 80075ce:	f77f af7a 	ble.w	80074c6 <_printf_float+0x242>
 80075d2:	2301      	movs	r3, #1
 80075d4:	4652      	mov	r2, sl
 80075d6:	4631      	mov	r1, r6
 80075d8:	4628      	mov	r0, r5
 80075da:	47b8      	blx	r7
 80075dc:	3001      	adds	r0, #1
 80075de:	f43f aeac 	beq.w	800733a <_printf_float+0xb6>
 80075e2:	f108 0801 	add.w	r8, r8, #1
 80075e6:	e7ec      	b.n	80075c2 <_printf_float+0x33e>
 80075e8:	4613      	mov	r3, r2
 80075ea:	4631      	mov	r1, r6
 80075ec:	4642      	mov	r2, r8
 80075ee:	4628      	mov	r0, r5
 80075f0:	47b8      	blx	r7
 80075f2:	3001      	adds	r0, #1
 80075f4:	d1c0      	bne.n	8007578 <_printf_float+0x2f4>
 80075f6:	e6a0      	b.n	800733a <_printf_float+0xb6>
 80075f8:	2301      	movs	r3, #1
 80075fa:	4631      	mov	r1, r6
 80075fc:	4628      	mov	r0, r5
 80075fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8007600:	47b8      	blx	r7
 8007602:	3001      	adds	r0, #1
 8007604:	f43f ae99 	beq.w	800733a <_printf_float+0xb6>
 8007608:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800760a:	f10b 0b01 	add.w	fp, fp, #1
 800760e:	e7b9      	b.n	8007584 <_printf_float+0x300>
 8007610:	4631      	mov	r1, r6
 8007612:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007616:	4628      	mov	r0, r5
 8007618:	47b8      	blx	r7
 800761a:	3001      	adds	r0, #1
 800761c:	d1bf      	bne.n	800759e <_printf_float+0x31a>
 800761e:	e68c      	b.n	800733a <_printf_float+0xb6>
 8007620:	464b      	mov	r3, r9
 8007622:	4631      	mov	r1, r6
 8007624:	4628      	mov	r0, r5
 8007626:	eb08 020a 	add.w	r2, r8, sl
 800762a:	47b8      	blx	r7
 800762c:	3001      	adds	r0, #1
 800762e:	d1c2      	bne.n	80075b6 <_printf_float+0x332>
 8007630:	e683      	b.n	800733a <_printf_float+0xb6>
 8007632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007634:	2a01      	cmp	r2, #1
 8007636:	dc01      	bgt.n	800763c <_printf_float+0x3b8>
 8007638:	07db      	lsls	r3, r3, #31
 800763a:	d539      	bpl.n	80076b0 <_printf_float+0x42c>
 800763c:	2301      	movs	r3, #1
 800763e:	4642      	mov	r2, r8
 8007640:	4631      	mov	r1, r6
 8007642:	4628      	mov	r0, r5
 8007644:	47b8      	blx	r7
 8007646:	3001      	adds	r0, #1
 8007648:	f43f ae77 	beq.w	800733a <_printf_float+0xb6>
 800764c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007650:	4631      	mov	r1, r6
 8007652:	4628      	mov	r0, r5
 8007654:	47b8      	blx	r7
 8007656:	3001      	adds	r0, #1
 8007658:	f43f ae6f 	beq.w	800733a <_printf_float+0xb6>
 800765c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007660:	2200      	movs	r2, #0
 8007662:	2300      	movs	r3, #0
 8007664:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007668:	f7f9 f99e 	bl	80009a8 <__aeabi_dcmpeq>
 800766c:	b9d8      	cbnz	r0, 80076a6 <_printf_float+0x422>
 800766e:	f109 33ff 	add.w	r3, r9, #4294967295
 8007672:	f108 0201 	add.w	r2, r8, #1
 8007676:	4631      	mov	r1, r6
 8007678:	4628      	mov	r0, r5
 800767a:	47b8      	blx	r7
 800767c:	3001      	adds	r0, #1
 800767e:	d10e      	bne.n	800769e <_printf_float+0x41a>
 8007680:	e65b      	b.n	800733a <_printf_float+0xb6>
 8007682:	2301      	movs	r3, #1
 8007684:	464a      	mov	r2, r9
 8007686:	4631      	mov	r1, r6
 8007688:	4628      	mov	r0, r5
 800768a:	47b8      	blx	r7
 800768c:	3001      	adds	r0, #1
 800768e:	f43f ae54 	beq.w	800733a <_printf_float+0xb6>
 8007692:	f108 0801 	add.w	r8, r8, #1
 8007696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007698:	3b01      	subs	r3, #1
 800769a:	4543      	cmp	r3, r8
 800769c:	dcf1      	bgt.n	8007682 <_printf_float+0x3fe>
 800769e:	4653      	mov	r3, sl
 80076a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80076a4:	e6de      	b.n	8007464 <_printf_float+0x1e0>
 80076a6:	f04f 0800 	mov.w	r8, #0
 80076aa:	f104 091a 	add.w	r9, r4, #26
 80076ae:	e7f2      	b.n	8007696 <_printf_float+0x412>
 80076b0:	2301      	movs	r3, #1
 80076b2:	4642      	mov	r2, r8
 80076b4:	e7df      	b.n	8007676 <_printf_float+0x3f2>
 80076b6:	2301      	movs	r3, #1
 80076b8:	464a      	mov	r2, r9
 80076ba:	4631      	mov	r1, r6
 80076bc:	4628      	mov	r0, r5
 80076be:	47b8      	blx	r7
 80076c0:	3001      	adds	r0, #1
 80076c2:	f43f ae3a 	beq.w	800733a <_printf_float+0xb6>
 80076c6:	f108 0801 	add.w	r8, r8, #1
 80076ca:	68e3      	ldr	r3, [r4, #12]
 80076cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80076ce:	1a5b      	subs	r3, r3, r1
 80076d0:	4543      	cmp	r3, r8
 80076d2:	dcf0      	bgt.n	80076b6 <_printf_float+0x432>
 80076d4:	e6fb      	b.n	80074ce <_printf_float+0x24a>
 80076d6:	f04f 0800 	mov.w	r8, #0
 80076da:	f104 0919 	add.w	r9, r4, #25
 80076de:	e7f4      	b.n	80076ca <_printf_float+0x446>

080076e0 <_printf_common>:
 80076e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e4:	4616      	mov	r6, r2
 80076e6:	4699      	mov	r9, r3
 80076e8:	688a      	ldr	r2, [r1, #8]
 80076ea:	690b      	ldr	r3, [r1, #16]
 80076ec:	4607      	mov	r7, r0
 80076ee:	4293      	cmp	r3, r2
 80076f0:	bfb8      	it	lt
 80076f2:	4613      	movlt	r3, r2
 80076f4:	6033      	str	r3, [r6, #0]
 80076f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076fa:	460c      	mov	r4, r1
 80076fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007700:	b10a      	cbz	r2, 8007706 <_printf_common+0x26>
 8007702:	3301      	adds	r3, #1
 8007704:	6033      	str	r3, [r6, #0]
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	0699      	lsls	r1, r3, #26
 800770a:	bf42      	ittt	mi
 800770c:	6833      	ldrmi	r3, [r6, #0]
 800770e:	3302      	addmi	r3, #2
 8007710:	6033      	strmi	r3, [r6, #0]
 8007712:	6825      	ldr	r5, [r4, #0]
 8007714:	f015 0506 	ands.w	r5, r5, #6
 8007718:	d106      	bne.n	8007728 <_printf_common+0x48>
 800771a:	f104 0a19 	add.w	sl, r4, #25
 800771e:	68e3      	ldr	r3, [r4, #12]
 8007720:	6832      	ldr	r2, [r6, #0]
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	42ab      	cmp	r3, r5
 8007726:	dc2b      	bgt.n	8007780 <_printf_common+0xa0>
 8007728:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800772c:	1e13      	subs	r3, r2, #0
 800772e:	6822      	ldr	r2, [r4, #0]
 8007730:	bf18      	it	ne
 8007732:	2301      	movne	r3, #1
 8007734:	0692      	lsls	r2, r2, #26
 8007736:	d430      	bmi.n	800779a <_printf_common+0xba>
 8007738:	4649      	mov	r1, r9
 800773a:	4638      	mov	r0, r7
 800773c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007740:	47c0      	blx	r8
 8007742:	3001      	adds	r0, #1
 8007744:	d023      	beq.n	800778e <_printf_common+0xae>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	6922      	ldr	r2, [r4, #16]
 800774a:	f003 0306 	and.w	r3, r3, #6
 800774e:	2b04      	cmp	r3, #4
 8007750:	bf14      	ite	ne
 8007752:	2500      	movne	r5, #0
 8007754:	6833      	ldreq	r3, [r6, #0]
 8007756:	f04f 0600 	mov.w	r6, #0
 800775a:	bf08      	it	eq
 800775c:	68e5      	ldreq	r5, [r4, #12]
 800775e:	f104 041a 	add.w	r4, r4, #26
 8007762:	bf08      	it	eq
 8007764:	1aed      	subeq	r5, r5, r3
 8007766:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800776a:	bf08      	it	eq
 800776c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007770:	4293      	cmp	r3, r2
 8007772:	bfc4      	itt	gt
 8007774:	1a9b      	subgt	r3, r3, r2
 8007776:	18ed      	addgt	r5, r5, r3
 8007778:	42b5      	cmp	r5, r6
 800777a:	d11a      	bne.n	80077b2 <_printf_common+0xd2>
 800777c:	2000      	movs	r0, #0
 800777e:	e008      	b.n	8007792 <_printf_common+0xb2>
 8007780:	2301      	movs	r3, #1
 8007782:	4652      	mov	r2, sl
 8007784:	4649      	mov	r1, r9
 8007786:	4638      	mov	r0, r7
 8007788:	47c0      	blx	r8
 800778a:	3001      	adds	r0, #1
 800778c:	d103      	bne.n	8007796 <_printf_common+0xb6>
 800778e:	f04f 30ff 	mov.w	r0, #4294967295
 8007792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007796:	3501      	adds	r5, #1
 8007798:	e7c1      	b.n	800771e <_printf_common+0x3e>
 800779a:	2030      	movs	r0, #48	; 0x30
 800779c:	18e1      	adds	r1, r4, r3
 800779e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077a8:	4422      	add	r2, r4
 80077aa:	3302      	adds	r3, #2
 80077ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077b0:	e7c2      	b.n	8007738 <_printf_common+0x58>
 80077b2:	2301      	movs	r3, #1
 80077b4:	4622      	mov	r2, r4
 80077b6:	4649      	mov	r1, r9
 80077b8:	4638      	mov	r0, r7
 80077ba:	47c0      	blx	r8
 80077bc:	3001      	adds	r0, #1
 80077be:	d0e6      	beq.n	800778e <_printf_common+0xae>
 80077c0:	3601      	adds	r6, #1
 80077c2:	e7d9      	b.n	8007778 <_printf_common+0x98>

080077c4 <_printf_i>:
 80077c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077c8:	7e0f      	ldrb	r7, [r1, #24]
 80077ca:	4691      	mov	r9, r2
 80077cc:	2f78      	cmp	r7, #120	; 0x78
 80077ce:	4680      	mov	r8, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	469a      	mov	sl, r3
 80077d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077da:	d807      	bhi.n	80077ec <_printf_i+0x28>
 80077dc:	2f62      	cmp	r7, #98	; 0x62
 80077de:	d80a      	bhi.n	80077f6 <_printf_i+0x32>
 80077e0:	2f00      	cmp	r7, #0
 80077e2:	f000 80d5 	beq.w	8007990 <_printf_i+0x1cc>
 80077e6:	2f58      	cmp	r7, #88	; 0x58
 80077e8:	f000 80c1 	beq.w	800796e <_printf_i+0x1aa>
 80077ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077f4:	e03a      	b.n	800786c <_printf_i+0xa8>
 80077f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077fa:	2b15      	cmp	r3, #21
 80077fc:	d8f6      	bhi.n	80077ec <_printf_i+0x28>
 80077fe:	a101      	add	r1, pc, #4	; (adr r1, 8007804 <_printf_i+0x40>)
 8007800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007804:	0800785d 	.word	0x0800785d
 8007808:	08007871 	.word	0x08007871
 800780c:	080077ed 	.word	0x080077ed
 8007810:	080077ed 	.word	0x080077ed
 8007814:	080077ed 	.word	0x080077ed
 8007818:	080077ed 	.word	0x080077ed
 800781c:	08007871 	.word	0x08007871
 8007820:	080077ed 	.word	0x080077ed
 8007824:	080077ed 	.word	0x080077ed
 8007828:	080077ed 	.word	0x080077ed
 800782c:	080077ed 	.word	0x080077ed
 8007830:	08007977 	.word	0x08007977
 8007834:	0800789d 	.word	0x0800789d
 8007838:	08007931 	.word	0x08007931
 800783c:	080077ed 	.word	0x080077ed
 8007840:	080077ed 	.word	0x080077ed
 8007844:	08007999 	.word	0x08007999
 8007848:	080077ed 	.word	0x080077ed
 800784c:	0800789d 	.word	0x0800789d
 8007850:	080077ed 	.word	0x080077ed
 8007854:	080077ed 	.word	0x080077ed
 8007858:	08007939 	.word	0x08007939
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	1d1a      	adds	r2, r3, #4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	602a      	str	r2, [r5, #0]
 8007864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800786c:	2301      	movs	r3, #1
 800786e:	e0a0      	b.n	80079b2 <_printf_i+0x1ee>
 8007870:	6820      	ldr	r0, [r4, #0]
 8007872:	682b      	ldr	r3, [r5, #0]
 8007874:	0607      	lsls	r7, r0, #24
 8007876:	f103 0104 	add.w	r1, r3, #4
 800787a:	6029      	str	r1, [r5, #0]
 800787c:	d501      	bpl.n	8007882 <_printf_i+0xbe>
 800787e:	681e      	ldr	r6, [r3, #0]
 8007880:	e003      	b.n	800788a <_printf_i+0xc6>
 8007882:	0646      	lsls	r6, r0, #25
 8007884:	d5fb      	bpl.n	800787e <_printf_i+0xba>
 8007886:	f9b3 6000 	ldrsh.w	r6, [r3]
 800788a:	2e00      	cmp	r6, #0
 800788c:	da03      	bge.n	8007896 <_printf_i+0xd2>
 800788e:	232d      	movs	r3, #45	; 0x2d
 8007890:	4276      	negs	r6, r6
 8007892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007896:	230a      	movs	r3, #10
 8007898:	4859      	ldr	r0, [pc, #356]	; (8007a00 <_printf_i+0x23c>)
 800789a:	e012      	b.n	80078c2 <_printf_i+0xfe>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	6820      	ldr	r0, [r4, #0]
 80078a0:	1d19      	adds	r1, r3, #4
 80078a2:	6029      	str	r1, [r5, #0]
 80078a4:	0605      	lsls	r5, r0, #24
 80078a6:	d501      	bpl.n	80078ac <_printf_i+0xe8>
 80078a8:	681e      	ldr	r6, [r3, #0]
 80078aa:	e002      	b.n	80078b2 <_printf_i+0xee>
 80078ac:	0641      	lsls	r1, r0, #25
 80078ae:	d5fb      	bpl.n	80078a8 <_printf_i+0xe4>
 80078b0:	881e      	ldrh	r6, [r3, #0]
 80078b2:	2f6f      	cmp	r7, #111	; 0x6f
 80078b4:	bf0c      	ite	eq
 80078b6:	2308      	moveq	r3, #8
 80078b8:	230a      	movne	r3, #10
 80078ba:	4851      	ldr	r0, [pc, #324]	; (8007a00 <_printf_i+0x23c>)
 80078bc:	2100      	movs	r1, #0
 80078be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078c2:	6865      	ldr	r5, [r4, #4]
 80078c4:	2d00      	cmp	r5, #0
 80078c6:	bfa8      	it	ge
 80078c8:	6821      	ldrge	r1, [r4, #0]
 80078ca:	60a5      	str	r5, [r4, #8]
 80078cc:	bfa4      	itt	ge
 80078ce:	f021 0104 	bicge.w	r1, r1, #4
 80078d2:	6021      	strge	r1, [r4, #0]
 80078d4:	b90e      	cbnz	r6, 80078da <_printf_i+0x116>
 80078d6:	2d00      	cmp	r5, #0
 80078d8:	d04b      	beq.n	8007972 <_printf_i+0x1ae>
 80078da:	4615      	mov	r5, r2
 80078dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80078e0:	fb03 6711 	mls	r7, r3, r1, r6
 80078e4:	5dc7      	ldrb	r7, [r0, r7]
 80078e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078ea:	4637      	mov	r7, r6
 80078ec:	42bb      	cmp	r3, r7
 80078ee:	460e      	mov	r6, r1
 80078f0:	d9f4      	bls.n	80078dc <_printf_i+0x118>
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d10b      	bne.n	800790e <_printf_i+0x14a>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	07de      	lsls	r6, r3, #31
 80078fa:	d508      	bpl.n	800790e <_printf_i+0x14a>
 80078fc:	6923      	ldr	r3, [r4, #16]
 80078fe:	6861      	ldr	r1, [r4, #4]
 8007900:	4299      	cmp	r1, r3
 8007902:	bfde      	ittt	le
 8007904:	2330      	movle	r3, #48	; 0x30
 8007906:	f805 3c01 	strble.w	r3, [r5, #-1]
 800790a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800790e:	1b52      	subs	r2, r2, r5
 8007910:	6122      	str	r2, [r4, #16]
 8007912:	464b      	mov	r3, r9
 8007914:	4621      	mov	r1, r4
 8007916:	4640      	mov	r0, r8
 8007918:	f8cd a000 	str.w	sl, [sp]
 800791c:	aa03      	add	r2, sp, #12
 800791e:	f7ff fedf 	bl	80076e0 <_printf_common>
 8007922:	3001      	adds	r0, #1
 8007924:	d14a      	bne.n	80079bc <_printf_i+0x1f8>
 8007926:	f04f 30ff 	mov.w	r0, #4294967295
 800792a:	b004      	add	sp, #16
 800792c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	f043 0320 	orr.w	r3, r3, #32
 8007936:	6023      	str	r3, [r4, #0]
 8007938:	2778      	movs	r7, #120	; 0x78
 800793a:	4832      	ldr	r0, [pc, #200]	; (8007a04 <_printf_i+0x240>)
 800793c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	6829      	ldr	r1, [r5, #0]
 8007944:	061f      	lsls	r7, r3, #24
 8007946:	f851 6b04 	ldr.w	r6, [r1], #4
 800794a:	d402      	bmi.n	8007952 <_printf_i+0x18e>
 800794c:	065f      	lsls	r7, r3, #25
 800794e:	bf48      	it	mi
 8007950:	b2b6      	uxthmi	r6, r6
 8007952:	07df      	lsls	r7, r3, #31
 8007954:	bf48      	it	mi
 8007956:	f043 0320 	orrmi.w	r3, r3, #32
 800795a:	6029      	str	r1, [r5, #0]
 800795c:	bf48      	it	mi
 800795e:	6023      	strmi	r3, [r4, #0]
 8007960:	b91e      	cbnz	r6, 800796a <_printf_i+0x1a6>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	f023 0320 	bic.w	r3, r3, #32
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	2310      	movs	r3, #16
 800796c:	e7a6      	b.n	80078bc <_printf_i+0xf8>
 800796e:	4824      	ldr	r0, [pc, #144]	; (8007a00 <_printf_i+0x23c>)
 8007970:	e7e4      	b.n	800793c <_printf_i+0x178>
 8007972:	4615      	mov	r5, r2
 8007974:	e7bd      	b.n	80078f2 <_printf_i+0x12e>
 8007976:	682b      	ldr	r3, [r5, #0]
 8007978:	6826      	ldr	r6, [r4, #0]
 800797a:	1d18      	adds	r0, r3, #4
 800797c:	6961      	ldr	r1, [r4, #20]
 800797e:	6028      	str	r0, [r5, #0]
 8007980:	0635      	lsls	r5, r6, #24
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	d501      	bpl.n	800798a <_printf_i+0x1c6>
 8007986:	6019      	str	r1, [r3, #0]
 8007988:	e002      	b.n	8007990 <_printf_i+0x1cc>
 800798a:	0670      	lsls	r0, r6, #25
 800798c:	d5fb      	bpl.n	8007986 <_printf_i+0x1c2>
 800798e:	8019      	strh	r1, [r3, #0]
 8007990:	2300      	movs	r3, #0
 8007992:	4615      	mov	r5, r2
 8007994:	6123      	str	r3, [r4, #16]
 8007996:	e7bc      	b.n	8007912 <_printf_i+0x14e>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	2100      	movs	r1, #0
 800799c:	1d1a      	adds	r2, r3, #4
 800799e:	602a      	str	r2, [r5, #0]
 80079a0:	681d      	ldr	r5, [r3, #0]
 80079a2:	6862      	ldr	r2, [r4, #4]
 80079a4:	4628      	mov	r0, r5
 80079a6:	f000 fc7e 	bl	80082a6 <memchr>
 80079aa:	b108      	cbz	r0, 80079b0 <_printf_i+0x1ec>
 80079ac:	1b40      	subs	r0, r0, r5
 80079ae:	6060      	str	r0, [r4, #4]
 80079b0:	6863      	ldr	r3, [r4, #4]
 80079b2:	6123      	str	r3, [r4, #16]
 80079b4:	2300      	movs	r3, #0
 80079b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ba:	e7aa      	b.n	8007912 <_printf_i+0x14e>
 80079bc:	462a      	mov	r2, r5
 80079be:	4649      	mov	r1, r9
 80079c0:	4640      	mov	r0, r8
 80079c2:	6923      	ldr	r3, [r4, #16]
 80079c4:	47d0      	blx	sl
 80079c6:	3001      	adds	r0, #1
 80079c8:	d0ad      	beq.n	8007926 <_printf_i+0x162>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	079b      	lsls	r3, r3, #30
 80079ce:	d413      	bmi.n	80079f8 <_printf_i+0x234>
 80079d0:	68e0      	ldr	r0, [r4, #12]
 80079d2:	9b03      	ldr	r3, [sp, #12]
 80079d4:	4298      	cmp	r0, r3
 80079d6:	bfb8      	it	lt
 80079d8:	4618      	movlt	r0, r3
 80079da:	e7a6      	b.n	800792a <_printf_i+0x166>
 80079dc:	2301      	movs	r3, #1
 80079de:	4632      	mov	r2, r6
 80079e0:	4649      	mov	r1, r9
 80079e2:	4640      	mov	r0, r8
 80079e4:	47d0      	blx	sl
 80079e6:	3001      	adds	r0, #1
 80079e8:	d09d      	beq.n	8007926 <_printf_i+0x162>
 80079ea:	3501      	adds	r5, #1
 80079ec:	68e3      	ldr	r3, [r4, #12]
 80079ee:	9903      	ldr	r1, [sp, #12]
 80079f0:	1a5b      	subs	r3, r3, r1
 80079f2:	42ab      	cmp	r3, r5
 80079f4:	dcf2      	bgt.n	80079dc <_printf_i+0x218>
 80079f6:	e7eb      	b.n	80079d0 <_printf_i+0x20c>
 80079f8:	2500      	movs	r5, #0
 80079fa:	f104 0619 	add.w	r6, r4, #25
 80079fe:	e7f5      	b.n	80079ec <_printf_i+0x228>
 8007a00:	0800d32c 	.word	0x0800d32c
 8007a04:	0800d33d 	.word	0x0800d33d

08007a08 <_scanf_float>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	b087      	sub	sp, #28
 8007a0e:	9303      	str	r3, [sp, #12]
 8007a10:	688b      	ldr	r3, [r1, #8]
 8007a12:	4617      	mov	r7, r2
 8007a14:	1e5a      	subs	r2, r3, #1
 8007a16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007a1a:	bf85      	ittet	hi
 8007a1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007a20:	195b      	addhi	r3, r3, r5
 8007a22:	2300      	movls	r3, #0
 8007a24:	9302      	strhi	r3, [sp, #8]
 8007a26:	bf88      	it	hi
 8007a28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007a2c:	468b      	mov	fp, r1
 8007a2e:	f04f 0500 	mov.w	r5, #0
 8007a32:	bf8c      	ite	hi
 8007a34:	608b      	strhi	r3, [r1, #8]
 8007a36:	9302      	strls	r3, [sp, #8]
 8007a38:	680b      	ldr	r3, [r1, #0]
 8007a3a:	4680      	mov	r8, r0
 8007a3c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007a40:	f84b 3b1c 	str.w	r3, [fp], #28
 8007a44:	460c      	mov	r4, r1
 8007a46:	465e      	mov	r6, fp
 8007a48:	46aa      	mov	sl, r5
 8007a4a:	46a9      	mov	r9, r5
 8007a4c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007a50:	9501      	str	r5, [sp, #4]
 8007a52:	68a2      	ldr	r2, [r4, #8]
 8007a54:	b152      	cbz	r2, 8007a6c <_scanf_float+0x64>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	2b4e      	cmp	r3, #78	; 0x4e
 8007a5c:	d864      	bhi.n	8007b28 <_scanf_float+0x120>
 8007a5e:	2b40      	cmp	r3, #64	; 0x40
 8007a60:	d83c      	bhi.n	8007adc <_scanf_float+0xd4>
 8007a62:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007a66:	b2c8      	uxtb	r0, r1
 8007a68:	280e      	cmp	r0, #14
 8007a6a:	d93a      	bls.n	8007ae2 <_scanf_float+0xda>
 8007a6c:	f1b9 0f00 	cmp.w	r9, #0
 8007a70:	d003      	beq.n	8007a7a <_scanf_float+0x72>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a7e:	f1ba 0f01 	cmp.w	sl, #1
 8007a82:	f200 8113 	bhi.w	8007cac <_scanf_float+0x2a4>
 8007a86:	455e      	cmp	r6, fp
 8007a88:	f200 8105 	bhi.w	8007c96 <_scanf_float+0x28e>
 8007a8c:	2501      	movs	r5, #1
 8007a8e:	4628      	mov	r0, r5
 8007a90:	b007      	add	sp, #28
 8007a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a96:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007a9a:	2a0d      	cmp	r2, #13
 8007a9c:	d8e6      	bhi.n	8007a6c <_scanf_float+0x64>
 8007a9e:	a101      	add	r1, pc, #4	; (adr r1, 8007aa4 <_scanf_float+0x9c>)
 8007aa0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007aa4:	08007be3 	.word	0x08007be3
 8007aa8:	08007a6d 	.word	0x08007a6d
 8007aac:	08007a6d 	.word	0x08007a6d
 8007ab0:	08007a6d 	.word	0x08007a6d
 8007ab4:	08007c43 	.word	0x08007c43
 8007ab8:	08007c1b 	.word	0x08007c1b
 8007abc:	08007a6d 	.word	0x08007a6d
 8007ac0:	08007a6d 	.word	0x08007a6d
 8007ac4:	08007bf1 	.word	0x08007bf1
 8007ac8:	08007a6d 	.word	0x08007a6d
 8007acc:	08007a6d 	.word	0x08007a6d
 8007ad0:	08007a6d 	.word	0x08007a6d
 8007ad4:	08007a6d 	.word	0x08007a6d
 8007ad8:	08007ba9 	.word	0x08007ba9
 8007adc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007ae0:	e7db      	b.n	8007a9a <_scanf_float+0x92>
 8007ae2:	290e      	cmp	r1, #14
 8007ae4:	d8c2      	bhi.n	8007a6c <_scanf_float+0x64>
 8007ae6:	a001      	add	r0, pc, #4	; (adr r0, 8007aec <_scanf_float+0xe4>)
 8007ae8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007aec:	08007b9b 	.word	0x08007b9b
 8007af0:	08007a6d 	.word	0x08007a6d
 8007af4:	08007b9b 	.word	0x08007b9b
 8007af8:	08007c2f 	.word	0x08007c2f
 8007afc:	08007a6d 	.word	0x08007a6d
 8007b00:	08007b49 	.word	0x08007b49
 8007b04:	08007b85 	.word	0x08007b85
 8007b08:	08007b85 	.word	0x08007b85
 8007b0c:	08007b85 	.word	0x08007b85
 8007b10:	08007b85 	.word	0x08007b85
 8007b14:	08007b85 	.word	0x08007b85
 8007b18:	08007b85 	.word	0x08007b85
 8007b1c:	08007b85 	.word	0x08007b85
 8007b20:	08007b85 	.word	0x08007b85
 8007b24:	08007b85 	.word	0x08007b85
 8007b28:	2b6e      	cmp	r3, #110	; 0x6e
 8007b2a:	d809      	bhi.n	8007b40 <_scanf_float+0x138>
 8007b2c:	2b60      	cmp	r3, #96	; 0x60
 8007b2e:	d8b2      	bhi.n	8007a96 <_scanf_float+0x8e>
 8007b30:	2b54      	cmp	r3, #84	; 0x54
 8007b32:	d077      	beq.n	8007c24 <_scanf_float+0x21c>
 8007b34:	2b59      	cmp	r3, #89	; 0x59
 8007b36:	d199      	bne.n	8007a6c <_scanf_float+0x64>
 8007b38:	2d07      	cmp	r5, #7
 8007b3a:	d197      	bne.n	8007a6c <_scanf_float+0x64>
 8007b3c:	2508      	movs	r5, #8
 8007b3e:	e029      	b.n	8007b94 <_scanf_float+0x18c>
 8007b40:	2b74      	cmp	r3, #116	; 0x74
 8007b42:	d06f      	beq.n	8007c24 <_scanf_float+0x21c>
 8007b44:	2b79      	cmp	r3, #121	; 0x79
 8007b46:	e7f6      	b.n	8007b36 <_scanf_float+0x12e>
 8007b48:	6821      	ldr	r1, [r4, #0]
 8007b4a:	05c8      	lsls	r0, r1, #23
 8007b4c:	d51a      	bpl.n	8007b84 <_scanf_float+0x17c>
 8007b4e:	9b02      	ldr	r3, [sp, #8]
 8007b50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007b54:	6021      	str	r1, [r4, #0]
 8007b56:	f109 0901 	add.w	r9, r9, #1
 8007b5a:	b11b      	cbz	r3, 8007b64 <_scanf_float+0x15c>
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	3201      	adds	r2, #1
 8007b60:	9302      	str	r3, [sp, #8]
 8007b62:	60a2      	str	r2, [r4, #8]
 8007b64:	68a3      	ldr	r3, [r4, #8]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	60a3      	str	r3, [r4, #8]
 8007b6a:	6923      	ldr	r3, [r4, #16]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	6123      	str	r3, [r4, #16]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	607b      	str	r3, [r7, #4]
 8007b78:	f340 8084 	ble.w	8007c84 <_scanf_float+0x27c>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	603b      	str	r3, [r7, #0]
 8007b82:	e766      	b.n	8007a52 <_scanf_float+0x4a>
 8007b84:	eb1a 0f05 	cmn.w	sl, r5
 8007b88:	f47f af70 	bne.w	8007a6c <_scanf_float+0x64>
 8007b8c:	6822      	ldr	r2, [r4, #0]
 8007b8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007b92:	6022      	str	r2, [r4, #0]
 8007b94:	f806 3b01 	strb.w	r3, [r6], #1
 8007b98:	e7e4      	b.n	8007b64 <_scanf_float+0x15c>
 8007b9a:	6822      	ldr	r2, [r4, #0]
 8007b9c:	0610      	lsls	r0, r2, #24
 8007b9e:	f57f af65 	bpl.w	8007a6c <_scanf_float+0x64>
 8007ba2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ba6:	e7f4      	b.n	8007b92 <_scanf_float+0x18a>
 8007ba8:	f1ba 0f00 	cmp.w	sl, #0
 8007bac:	d10e      	bne.n	8007bcc <_scanf_float+0x1c4>
 8007bae:	f1b9 0f00 	cmp.w	r9, #0
 8007bb2:	d10e      	bne.n	8007bd2 <_scanf_float+0x1ca>
 8007bb4:	6822      	ldr	r2, [r4, #0]
 8007bb6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007bba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007bbe:	d108      	bne.n	8007bd2 <_scanf_float+0x1ca>
 8007bc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007bc4:	f04f 0a01 	mov.w	sl, #1
 8007bc8:	6022      	str	r2, [r4, #0]
 8007bca:	e7e3      	b.n	8007b94 <_scanf_float+0x18c>
 8007bcc:	f1ba 0f02 	cmp.w	sl, #2
 8007bd0:	d055      	beq.n	8007c7e <_scanf_float+0x276>
 8007bd2:	2d01      	cmp	r5, #1
 8007bd4:	d002      	beq.n	8007bdc <_scanf_float+0x1d4>
 8007bd6:	2d04      	cmp	r5, #4
 8007bd8:	f47f af48 	bne.w	8007a6c <_scanf_float+0x64>
 8007bdc:	3501      	adds	r5, #1
 8007bde:	b2ed      	uxtb	r5, r5
 8007be0:	e7d8      	b.n	8007b94 <_scanf_float+0x18c>
 8007be2:	f1ba 0f01 	cmp.w	sl, #1
 8007be6:	f47f af41 	bne.w	8007a6c <_scanf_float+0x64>
 8007bea:	f04f 0a02 	mov.w	sl, #2
 8007bee:	e7d1      	b.n	8007b94 <_scanf_float+0x18c>
 8007bf0:	b97d      	cbnz	r5, 8007c12 <_scanf_float+0x20a>
 8007bf2:	f1b9 0f00 	cmp.w	r9, #0
 8007bf6:	f47f af3c 	bne.w	8007a72 <_scanf_float+0x6a>
 8007bfa:	6822      	ldr	r2, [r4, #0]
 8007bfc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007c00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007c04:	f47f af39 	bne.w	8007a7a <_scanf_float+0x72>
 8007c08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c0c:	2501      	movs	r5, #1
 8007c0e:	6022      	str	r2, [r4, #0]
 8007c10:	e7c0      	b.n	8007b94 <_scanf_float+0x18c>
 8007c12:	2d03      	cmp	r5, #3
 8007c14:	d0e2      	beq.n	8007bdc <_scanf_float+0x1d4>
 8007c16:	2d05      	cmp	r5, #5
 8007c18:	e7de      	b.n	8007bd8 <_scanf_float+0x1d0>
 8007c1a:	2d02      	cmp	r5, #2
 8007c1c:	f47f af26 	bne.w	8007a6c <_scanf_float+0x64>
 8007c20:	2503      	movs	r5, #3
 8007c22:	e7b7      	b.n	8007b94 <_scanf_float+0x18c>
 8007c24:	2d06      	cmp	r5, #6
 8007c26:	f47f af21 	bne.w	8007a6c <_scanf_float+0x64>
 8007c2a:	2507      	movs	r5, #7
 8007c2c:	e7b2      	b.n	8007b94 <_scanf_float+0x18c>
 8007c2e:	6822      	ldr	r2, [r4, #0]
 8007c30:	0591      	lsls	r1, r2, #22
 8007c32:	f57f af1b 	bpl.w	8007a6c <_scanf_float+0x64>
 8007c36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007c3a:	6022      	str	r2, [r4, #0]
 8007c3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c40:	e7a8      	b.n	8007b94 <_scanf_float+0x18c>
 8007c42:	6822      	ldr	r2, [r4, #0]
 8007c44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007c48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007c4c:	d006      	beq.n	8007c5c <_scanf_float+0x254>
 8007c4e:	0550      	lsls	r0, r2, #21
 8007c50:	f57f af0c 	bpl.w	8007a6c <_scanf_float+0x64>
 8007c54:	f1b9 0f00 	cmp.w	r9, #0
 8007c58:	f43f af0f 	beq.w	8007a7a <_scanf_float+0x72>
 8007c5c:	0591      	lsls	r1, r2, #22
 8007c5e:	bf58      	it	pl
 8007c60:	9901      	ldrpl	r1, [sp, #4]
 8007c62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c66:	bf58      	it	pl
 8007c68:	eba9 0101 	subpl.w	r1, r9, r1
 8007c6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007c70:	f04f 0900 	mov.w	r9, #0
 8007c74:	bf58      	it	pl
 8007c76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007c7a:	6022      	str	r2, [r4, #0]
 8007c7c:	e78a      	b.n	8007b94 <_scanf_float+0x18c>
 8007c7e:	f04f 0a03 	mov.w	sl, #3
 8007c82:	e787      	b.n	8007b94 <_scanf_float+0x18c>
 8007c84:	4639      	mov	r1, r7
 8007c86:	4640      	mov	r0, r8
 8007c88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007c8c:	4798      	blx	r3
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	f43f aedf 	beq.w	8007a52 <_scanf_float+0x4a>
 8007c94:	e6ea      	b.n	8007a6c <_scanf_float+0x64>
 8007c96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c9a:	463a      	mov	r2, r7
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ca2:	4798      	blx	r3
 8007ca4:	6923      	ldr	r3, [r4, #16]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	6123      	str	r3, [r4, #16]
 8007caa:	e6ec      	b.n	8007a86 <_scanf_float+0x7e>
 8007cac:	1e6b      	subs	r3, r5, #1
 8007cae:	2b06      	cmp	r3, #6
 8007cb0:	d825      	bhi.n	8007cfe <_scanf_float+0x2f6>
 8007cb2:	2d02      	cmp	r5, #2
 8007cb4:	d836      	bhi.n	8007d24 <_scanf_float+0x31c>
 8007cb6:	455e      	cmp	r6, fp
 8007cb8:	f67f aee8 	bls.w	8007a8c <_scanf_float+0x84>
 8007cbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cc0:	463a      	mov	r2, r7
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007cc8:	4798      	blx	r3
 8007cca:	6923      	ldr	r3, [r4, #16]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	6123      	str	r3, [r4, #16]
 8007cd0:	e7f1      	b.n	8007cb6 <_scanf_float+0x2ae>
 8007cd2:	9802      	ldr	r0, [sp, #8]
 8007cd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cd8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007cdc:	463a      	mov	r2, r7
 8007cde:	9002      	str	r0, [sp, #8]
 8007ce0:	4640      	mov	r0, r8
 8007ce2:	4798      	blx	r3
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	6123      	str	r3, [r4, #16]
 8007cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cee:	fa5f fa8a 	uxtb.w	sl, sl
 8007cf2:	f1ba 0f02 	cmp.w	sl, #2
 8007cf6:	d1ec      	bne.n	8007cd2 <_scanf_float+0x2ca>
 8007cf8:	3d03      	subs	r5, #3
 8007cfa:	b2ed      	uxtb	r5, r5
 8007cfc:	1b76      	subs	r6, r6, r5
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	05da      	lsls	r2, r3, #23
 8007d02:	d52f      	bpl.n	8007d64 <_scanf_float+0x35c>
 8007d04:	055b      	lsls	r3, r3, #21
 8007d06:	d510      	bpl.n	8007d2a <_scanf_float+0x322>
 8007d08:	455e      	cmp	r6, fp
 8007d0a:	f67f aebf 	bls.w	8007a8c <_scanf_float+0x84>
 8007d0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d12:	463a      	mov	r2, r7
 8007d14:	4640      	mov	r0, r8
 8007d16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d1a:	4798      	blx	r3
 8007d1c:	6923      	ldr	r3, [r4, #16]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	6123      	str	r3, [r4, #16]
 8007d22:	e7f1      	b.n	8007d08 <_scanf_float+0x300>
 8007d24:	46aa      	mov	sl, r5
 8007d26:	9602      	str	r6, [sp, #8]
 8007d28:	e7df      	b.n	8007cea <_scanf_float+0x2e2>
 8007d2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007d2e:	6923      	ldr	r3, [r4, #16]
 8007d30:	2965      	cmp	r1, #101	; 0x65
 8007d32:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d36:	f106 35ff 	add.w	r5, r6, #4294967295
 8007d3a:	6123      	str	r3, [r4, #16]
 8007d3c:	d00c      	beq.n	8007d58 <_scanf_float+0x350>
 8007d3e:	2945      	cmp	r1, #69	; 0x45
 8007d40:	d00a      	beq.n	8007d58 <_scanf_float+0x350>
 8007d42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d46:	463a      	mov	r2, r7
 8007d48:	4640      	mov	r0, r8
 8007d4a:	4798      	blx	r3
 8007d4c:	6923      	ldr	r3, [r4, #16]
 8007d4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	1eb5      	subs	r5, r6, #2
 8007d56:	6123      	str	r3, [r4, #16]
 8007d58:	463a      	mov	r2, r7
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d60:	4798      	blx	r3
 8007d62:	462e      	mov	r6, r5
 8007d64:	6825      	ldr	r5, [r4, #0]
 8007d66:	f015 0510 	ands.w	r5, r5, #16
 8007d6a:	d155      	bne.n	8007e18 <_scanf_float+0x410>
 8007d6c:	7035      	strb	r5, [r6, #0]
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d78:	d11d      	bne.n	8007db6 <_scanf_float+0x3ae>
 8007d7a:	9b01      	ldr	r3, [sp, #4]
 8007d7c:	454b      	cmp	r3, r9
 8007d7e:	eba3 0209 	sub.w	r2, r3, r9
 8007d82:	d125      	bne.n	8007dd0 <_scanf_float+0x3c8>
 8007d84:	2200      	movs	r2, #0
 8007d86:	4659      	mov	r1, fp
 8007d88:	4640      	mov	r0, r8
 8007d8a:	f002 fccd 	bl	800a728 <_strtod_r>
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	f8d4 c000 	ldr.w	ip, [r4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f01c 0f02 	tst.w	ip, #2
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	460f      	mov	r7, r1
 8007d9e:	f103 0204 	add.w	r2, r3, #4
 8007da2:	d020      	beq.n	8007de6 <_scanf_float+0x3de>
 8007da4:	9903      	ldr	r1, [sp, #12]
 8007da6:	600a      	str	r2, [r1, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	e9c3 6700 	strd	r6, r7, [r3]
 8007dae:	68e3      	ldr	r3, [r4, #12]
 8007db0:	3301      	adds	r3, #1
 8007db2:	60e3      	str	r3, [r4, #12]
 8007db4:	e66b      	b.n	8007a8e <_scanf_float+0x86>
 8007db6:	9b04      	ldr	r3, [sp, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d0e3      	beq.n	8007d84 <_scanf_float+0x37c>
 8007dbc:	9905      	ldr	r1, [sp, #20]
 8007dbe:	230a      	movs	r3, #10
 8007dc0:	462a      	mov	r2, r5
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	3101      	adds	r1, #1
 8007dc6:	f002 fd33 	bl	800a830 <_strtol_r>
 8007dca:	9b04      	ldr	r3, [sp, #16]
 8007dcc:	9e05      	ldr	r6, [sp, #20]
 8007dce:	1ac2      	subs	r2, r0, r3
 8007dd0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007dd4:	429e      	cmp	r6, r3
 8007dd6:	bf28      	it	cs
 8007dd8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007ddc:	4630      	mov	r0, r6
 8007dde:	490f      	ldr	r1, [pc, #60]	; (8007e1c <_scanf_float+0x414>)
 8007de0:	f000 f928 	bl	8008034 <siprintf>
 8007de4:	e7ce      	b.n	8007d84 <_scanf_float+0x37c>
 8007de6:	f01c 0f04 	tst.w	ip, #4
 8007dea:	d1db      	bne.n	8007da4 <_scanf_float+0x39c>
 8007dec:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007df0:	f8cc 2000 	str.w	r2, [ip]
 8007df4:	f8d3 8000 	ldr.w	r8, [r3]
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	f7f8 fe06 	bl	8000a0c <__aeabi_dcmpun>
 8007e00:	b128      	cbz	r0, 8007e0e <_scanf_float+0x406>
 8007e02:	4807      	ldr	r0, [pc, #28]	; (8007e20 <_scanf_float+0x418>)
 8007e04:	f000 fa6c 	bl	80082e0 <nanf>
 8007e08:	f8c8 0000 	str.w	r0, [r8]
 8007e0c:	e7cf      	b.n	8007dae <_scanf_float+0x3a6>
 8007e0e:	4630      	mov	r0, r6
 8007e10:	4639      	mov	r1, r7
 8007e12:	f7f8 fe59 	bl	8000ac8 <__aeabi_d2f>
 8007e16:	e7f7      	b.n	8007e08 <_scanf_float+0x400>
 8007e18:	2500      	movs	r5, #0
 8007e1a:	e638      	b.n	8007a8e <_scanf_float+0x86>
 8007e1c:	0800d34e 	.word	0x0800d34e
 8007e20:	0800d6e5 	.word	0x0800d6e5

08007e24 <std>:
 8007e24:	2300      	movs	r3, #0
 8007e26:	b510      	push	{r4, lr}
 8007e28:	4604      	mov	r4, r0
 8007e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e32:	6083      	str	r3, [r0, #8]
 8007e34:	8181      	strh	r1, [r0, #12]
 8007e36:	6643      	str	r3, [r0, #100]	; 0x64
 8007e38:	81c2      	strh	r2, [r0, #14]
 8007e3a:	6183      	str	r3, [r0, #24]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	2208      	movs	r2, #8
 8007e40:	305c      	adds	r0, #92	; 0x5c
 8007e42:	f000 f95a 	bl	80080fa <memset>
 8007e46:	4b0d      	ldr	r3, [pc, #52]	; (8007e7c <std+0x58>)
 8007e48:	6224      	str	r4, [r4, #32]
 8007e4a:	6263      	str	r3, [r4, #36]	; 0x24
 8007e4c:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <std+0x5c>)
 8007e4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e50:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <std+0x60>)
 8007e52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e54:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <std+0x64>)
 8007e56:	6323      	str	r3, [r4, #48]	; 0x30
 8007e58:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <std+0x68>)
 8007e5a:	429c      	cmp	r4, r3
 8007e5c:	d006      	beq.n	8007e6c <std+0x48>
 8007e5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007e62:	4294      	cmp	r4, r2
 8007e64:	d002      	beq.n	8007e6c <std+0x48>
 8007e66:	33d0      	adds	r3, #208	; 0xd0
 8007e68:	429c      	cmp	r4, r3
 8007e6a:	d105      	bne.n	8007e78 <std+0x54>
 8007e6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e74:	f000 ba14 	b.w	80082a0 <__retarget_lock_init_recursive>
 8007e78:	bd10      	pop	{r4, pc}
 8007e7a:	bf00      	nop
 8007e7c:	08008075 	.word	0x08008075
 8007e80:	08008097 	.word	0x08008097
 8007e84:	080080cf 	.word	0x080080cf
 8007e88:	080080f3 	.word	0x080080f3
 8007e8c:	200017c8 	.word	0x200017c8

08007e90 <stdio_exit_handler>:
 8007e90:	4a02      	ldr	r2, [pc, #8]	; (8007e9c <stdio_exit_handler+0xc>)
 8007e92:	4903      	ldr	r1, [pc, #12]	; (8007ea0 <stdio_exit_handler+0x10>)
 8007e94:	4803      	ldr	r0, [pc, #12]	; (8007ea4 <stdio_exit_handler+0x14>)
 8007e96:	f000 b869 	b.w	8007f6c <_fwalk_sglue>
 8007e9a:	bf00      	nop
 8007e9c:	2000002c 	.word	0x2000002c
 8007ea0:	0800ae6d 	.word	0x0800ae6d
 8007ea4:	20000038 	.word	0x20000038

08007ea8 <cleanup_stdio>:
 8007ea8:	6841      	ldr	r1, [r0, #4]
 8007eaa:	4b0c      	ldr	r3, [pc, #48]	; (8007edc <cleanup_stdio+0x34>)
 8007eac:	b510      	push	{r4, lr}
 8007eae:	4299      	cmp	r1, r3
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	d001      	beq.n	8007eb8 <cleanup_stdio+0x10>
 8007eb4:	f002 ffda 	bl	800ae6c <_fflush_r>
 8007eb8:	68a1      	ldr	r1, [r4, #8]
 8007eba:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <cleanup_stdio+0x38>)
 8007ebc:	4299      	cmp	r1, r3
 8007ebe:	d002      	beq.n	8007ec6 <cleanup_stdio+0x1e>
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f002 ffd3 	bl	800ae6c <_fflush_r>
 8007ec6:	68e1      	ldr	r1, [r4, #12]
 8007ec8:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <cleanup_stdio+0x3c>)
 8007eca:	4299      	cmp	r1, r3
 8007ecc:	d004      	beq.n	8007ed8 <cleanup_stdio+0x30>
 8007ece:	4620      	mov	r0, r4
 8007ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ed4:	f002 bfca 	b.w	800ae6c <_fflush_r>
 8007ed8:	bd10      	pop	{r4, pc}
 8007eda:	bf00      	nop
 8007edc:	200017c8 	.word	0x200017c8
 8007ee0:	20001830 	.word	0x20001830
 8007ee4:	20001898 	.word	0x20001898

08007ee8 <global_stdio_init.part.0>:
 8007ee8:	b510      	push	{r4, lr}
 8007eea:	4b0b      	ldr	r3, [pc, #44]	; (8007f18 <global_stdio_init.part.0+0x30>)
 8007eec:	4c0b      	ldr	r4, [pc, #44]	; (8007f1c <global_stdio_init.part.0+0x34>)
 8007eee:	4a0c      	ldr	r2, [pc, #48]	; (8007f20 <global_stdio_init.part.0+0x38>)
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	2104      	movs	r1, #4
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f7ff ff94 	bl	8007e24 <std>
 8007efc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f00:	2201      	movs	r2, #1
 8007f02:	2109      	movs	r1, #9
 8007f04:	f7ff ff8e 	bl	8007e24 <std>
 8007f08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f12:	2112      	movs	r1, #18
 8007f14:	f7ff bf86 	b.w	8007e24 <std>
 8007f18:	20001900 	.word	0x20001900
 8007f1c:	200017c8 	.word	0x200017c8
 8007f20:	08007e91 	.word	0x08007e91

08007f24 <__sfp_lock_acquire>:
 8007f24:	4801      	ldr	r0, [pc, #4]	; (8007f2c <__sfp_lock_acquire+0x8>)
 8007f26:	f000 b9bc 	b.w	80082a2 <__retarget_lock_acquire_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	20001909 	.word	0x20001909

08007f30 <__sfp_lock_release>:
 8007f30:	4801      	ldr	r0, [pc, #4]	; (8007f38 <__sfp_lock_release+0x8>)
 8007f32:	f000 b9b7 	b.w	80082a4 <__retarget_lock_release_recursive>
 8007f36:	bf00      	nop
 8007f38:	20001909 	.word	0x20001909

08007f3c <__sinit>:
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	4604      	mov	r4, r0
 8007f40:	f7ff fff0 	bl	8007f24 <__sfp_lock_acquire>
 8007f44:	6a23      	ldr	r3, [r4, #32]
 8007f46:	b11b      	cbz	r3, 8007f50 <__sinit+0x14>
 8007f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f4c:	f7ff bff0 	b.w	8007f30 <__sfp_lock_release>
 8007f50:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <__sinit+0x28>)
 8007f52:	6223      	str	r3, [r4, #32]
 8007f54:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <__sinit+0x2c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1f5      	bne.n	8007f48 <__sinit+0xc>
 8007f5c:	f7ff ffc4 	bl	8007ee8 <global_stdio_init.part.0>
 8007f60:	e7f2      	b.n	8007f48 <__sinit+0xc>
 8007f62:	bf00      	nop
 8007f64:	08007ea9 	.word	0x08007ea9
 8007f68:	20001900 	.word	0x20001900

08007f6c <_fwalk_sglue>:
 8007f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f70:	4607      	mov	r7, r0
 8007f72:	4688      	mov	r8, r1
 8007f74:	4614      	mov	r4, r2
 8007f76:	2600      	movs	r6, #0
 8007f78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f7c:	f1b9 0901 	subs.w	r9, r9, #1
 8007f80:	d505      	bpl.n	8007f8e <_fwalk_sglue+0x22>
 8007f82:	6824      	ldr	r4, [r4, #0]
 8007f84:	2c00      	cmp	r4, #0
 8007f86:	d1f7      	bne.n	8007f78 <_fwalk_sglue+0xc>
 8007f88:	4630      	mov	r0, r6
 8007f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f8e:	89ab      	ldrh	r3, [r5, #12]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d907      	bls.n	8007fa4 <_fwalk_sglue+0x38>
 8007f94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	d003      	beq.n	8007fa4 <_fwalk_sglue+0x38>
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	47c0      	blx	r8
 8007fa2:	4306      	orrs	r6, r0
 8007fa4:	3568      	adds	r5, #104	; 0x68
 8007fa6:	e7e9      	b.n	8007f7c <_fwalk_sglue+0x10>

08007fa8 <iprintf>:
 8007fa8:	b40f      	push	{r0, r1, r2, r3}
 8007faa:	b507      	push	{r0, r1, r2, lr}
 8007fac:	4906      	ldr	r1, [pc, #24]	; (8007fc8 <iprintf+0x20>)
 8007fae:	ab04      	add	r3, sp, #16
 8007fb0:	6808      	ldr	r0, [r1, #0]
 8007fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb6:	6881      	ldr	r1, [r0, #8]
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	f002 fdbb 	bl	800ab34 <_vfiprintf_r>
 8007fbe:	b003      	add	sp, #12
 8007fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fc4:	b004      	add	sp, #16
 8007fc6:	4770      	bx	lr
 8007fc8:	20000084 	.word	0x20000084

08007fcc <sniprintf>:
 8007fcc:	b40c      	push	{r2, r3}
 8007fce:	b530      	push	{r4, r5, lr}
 8007fd0:	4b17      	ldr	r3, [pc, #92]	; (8008030 <sniprintf+0x64>)
 8007fd2:	1e0c      	subs	r4, r1, #0
 8007fd4:	681d      	ldr	r5, [r3, #0]
 8007fd6:	b09d      	sub	sp, #116	; 0x74
 8007fd8:	da08      	bge.n	8007fec <sniprintf+0x20>
 8007fda:	238b      	movs	r3, #139	; 0x8b
 8007fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe0:	602b      	str	r3, [r5, #0]
 8007fe2:	b01d      	add	sp, #116	; 0x74
 8007fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fe8:	b002      	add	sp, #8
 8007fea:	4770      	bx	lr
 8007fec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007ff0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ff4:	bf0c      	ite	eq
 8007ff6:	4623      	moveq	r3, r4
 8007ff8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ffc:	9304      	str	r3, [sp, #16]
 8007ffe:	9307      	str	r3, [sp, #28]
 8008000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008004:	9002      	str	r0, [sp, #8]
 8008006:	9006      	str	r0, [sp, #24]
 8008008:	f8ad 3016 	strh.w	r3, [sp, #22]
 800800c:	4628      	mov	r0, r5
 800800e:	ab21      	add	r3, sp, #132	; 0x84
 8008010:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008012:	a902      	add	r1, sp, #8
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	f002 fc67 	bl	800a8e8 <_svfiprintf_r>
 800801a:	1c43      	adds	r3, r0, #1
 800801c:	bfbc      	itt	lt
 800801e:	238b      	movlt	r3, #139	; 0x8b
 8008020:	602b      	strlt	r3, [r5, #0]
 8008022:	2c00      	cmp	r4, #0
 8008024:	d0dd      	beq.n	8007fe2 <sniprintf+0x16>
 8008026:	2200      	movs	r2, #0
 8008028:	9b02      	ldr	r3, [sp, #8]
 800802a:	701a      	strb	r2, [r3, #0]
 800802c:	e7d9      	b.n	8007fe2 <sniprintf+0x16>
 800802e:	bf00      	nop
 8008030:	20000084 	.word	0x20000084

08008034 <siprintf>:
 8008034:	b40e      	push	{r1, r2, r3}
 8008036:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800803a:	b500      	push	{lr}
 800803c:	b09c      	sub	sp, #112	; 0x70
 800803e:	ab1d      	add	r3, sp, #116	; 0x74
 8008040:	9002      	str	r0, [sp, #8]
 8008042:	9006      	str	r0, [sp, #24]
 8008044:	9107      	str	r1, [sp, #28]
 8008046:	9104      	str	r1, [sp, #16]
 8008048:	4808      	ldr	r0, [pc, #32]	; (800806c <siprintf+0x38>)
 800804a:	4909      	ldr	r1, [pc, #36]	; (8008070 <siprintf+0x3c>)
 800804c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008050:	9105      	str	r1, [sp, #20]
 8008052:	6800      	ldr	r0, [r0, #0]
 8008054:	a902      	add	r1, sp, #8
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	f002 fc46 	bl	800a8e8 <_svfiprintf_r>
 800805c:	2200      	movs	r2, #0
 800805e:	9b02      	ldr	r3, [sp, #8]
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	b01c      	add	sp, #112	; 0x70
 8008064:	f85d eb04 	ldr.w	lr, [sp], #4
 8008068:	b003      	add	sp, #12
 800806a:	4770      	bx	lr
 800806c:	20000084 	.word	0x20000084
 8008070:	ffff0208 	.word	0xffff0208

08008074 <__sread>:
 8008074:	b510      	push	{r4, lr}
 8008076:	460c      	mov	r4, r1
 8008078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807c:	f000 f8c2 	bl	8008204 <_read_r>
 8008080:	2800      	cmp	r0, #0
 8008082:	bfab      	itete	ge
 8008084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008086:	89a3      	ldrhlt	r3, [r4, #12]
 8008088:	181b      	addge	r3, r3, r0
 800808a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800808e:	bfac      	ite	ge
 8008090:	6563      	strge	r3, [r4, #84]	; 0x54
 8008092:	81a3      	strhlt	r3, [r4, #12]
 8008094:	bd10      	pop	{r4, pc}

08008096 <__swrite>:
 8008096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800809a:	461f      	mov	r7, r3
 800809c:	898b      	ldrh	r3, [r1, #12]
 800809e:	4605      	mov	r5, r0
 80080a0:	05db      	lsls	r3, r3, #23
 80080a2:	460c      	mov	r4, r1
 80080a4:	4616      	mov	r6, r2
 80080a6:	d505      	bpl.n	80080b4 <__swrite+0x1e>
 80080a8:	2302      	movs	r3, #2
 80080aa:	2200      	movs	r2, #0
 80080ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b0:	f000 f896 	bl	80081e0 <_lseek_r>
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	4632      	mov	r2, r6
 80080b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080bc:	81a3      	strh	r3, [r4, #12]
 80080be:	4628      	mov	r0, r5
 80080c0:	463b      	mov	r3, r7
 80080c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ca:	f000 b8ad 	b.w	8008228 <_write_r>

080080ce <__sseek>:
 80080ce:	b510      	push	{r4, lr}
 80080d0:	460c      	mov	r4, r1
 80080d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d6:	f000 f883 	bl	80081e0 <_lseek_r>
 80080da:	1c43      	adds	r3, r0, #1
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	bf15      	itete	ne
 80080e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80080e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080ea:	81a3      	strheq	r3, [r4, #12]
 80080ec:	bf18      	it	ne
 80080ee:	81a3      	strhne	r3, [r4, #12]
 80080f0:	bd10      	pop	{r4, pc}

080080f2 <__sclose>:
 80080f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f6:	f000 b80d 	b.w	8008114 <_close_r>

080080fa <memset>:
 80080fa:	4603      	mov	r3, r0
 80080fc:	4402      	add	r2, r0
 80080fe:	4293      	cmp	r3, r2
 8008100:	d100      	bne.n	8008104 <memset+0xa>
 8008102:	4770      	bx	lr
 8008104:	f803 1b01 	strb.w	r1, [r3], #1
 8008108:	e7f9      	b.n	80080fe <memset+0x4>
	...

0800810c <_localeconv_r>:
 800810c:	4800      	ldr	r0, [pc, #0]	; (8008110 <_localeconv_r+0x4>)
 800810e:	4770      	bx	lr
 8008110:	20000178 	.word	0x20000178

08008114 <_close_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	2300      	movs	r3, #0
 8008118:	4d05      	ldr	r5, [pc, #20]	; (8008130 <_close_r+0x1c>)
 800811a:	4604      	mov	r4, r0
 800811c:	4608      	mov	r0, r1
 800811e:	602b      	str	r3, [r5, #0]
 8008120:	f7fb fda2 	bl	8003c68 <_close>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d102      	bne.n	800812e <_close_r+0x1a>
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	b103      	cbz	r3, 800812e <_close_r+0x1a>
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	20001904 	.word	0x20001904

08008134 <_reclaim_reent>:
 8008134:	4b29      	ldr	r3, [pc, #164]	; (80081dc <_reclaim_reent+0xa8>)
 8008136:	b570      	push	{r4, r5, r6, lr}
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4604      	mov	r4, r0
 800813c:	4283      	cmp	r3, r0
 800813e:	d04b      	beq.n	80081d8 <_reclaim_reent+0xa4>
 8008140:	69c3      	ldr	r3, [r0, #28]
 8008142:	b143      	cbz	r3, 8008156 <_reclaim_reent+0x22>
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d144      	bne.n	80081d4 <_reclaim_reent+0xa0>
 800814a:	69e3      	ldr	r3, [r4, #28]
 800814c:	6819      	ldr	r1, [r3, #0]
 800814e:	b111      	cbz	r1, 8008156 <_reclaim_reent+0x22>
 8008150:	4620      	mov	r0, r4
 8008152:	f000 ff39 	bl	8008fc8 <_free_r>
 8008156:	6961      	ldr	r1, [r4, #20]
 8008158:	b111      	cbz	r1, 8008160 <_reclaim_reent+0x2c>
 800815a:	4620      	mov	r0, r4
 800815c:	f000 ff34 	bl	8008fc8 <_free_r>
 8008160:	69e1      	ldr	r1, [r4, #28]
 8008162:	b111      	cbz	r1, 800816a <_reclaim_reent+0x36>
 8008164:	4620      	mov	r0, r4
 8008166:	f000 ff2f 	bl	8008fc8 <_free_r>
 800816a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800816c:	b111      	cbz	r1, 8008174 <_reclaim_reent+0x40>
 800816e:	4620      	mov	r0, r4
 8008170:	f000 ff2a 	bl	8008fc8 <_free_r>
 8008174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008176:	b111      	cbz	r1, 800817e <_reclaim_reent+0x4a>
 8008178:	4620      	mov	r0, r4
 800817a:	f000 ff25 	bl	8008fc8 <_free_r>
 800817e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008180:	b111      	cbz	r1, 8008188 <_reclaim_reent+0x54>
 8008182:	4620      	mov	r0, r4
 8008184:	f000 ff20 	bl	8008fc8 <_free_r>
 8008188:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800818a:	b111      	cbz	r1, 8008192 <_reclaim_reent+0x5e>
 800818c:	4620      	mov	r0, r4
 800818e:	f000 ff1b 	bl	8008fc8 <_free_r>
 8008192:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008194:	b111      	cbz	r1, 800819c <_reclaim_reent+0x68>
 8008196:	4620      	mov	r0, r4
 8008198:	f000 ff16 	bl	8008fc8 <_free_r>
 800819c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800819e:	b111      	cbz	r1, 80081a6 <_reclaim_reent+0x72>
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 ff11 	bl	8008fc8 <_free_r>
 80081a6:	6a23      	ldr	r3, [r4, #32]
 80081a8:	b1b3      	cbz	r3, 80081d8 <_reclaim_reent+0xa4>
 80081aa:	4620      	mov	r0, r4
 80081ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081b0:	4718      	bx	r3
 80081b2:	5949      	ldr	r1, [r1, r5]
 80081b4:	b941      	cbnz	r1, 80081c8 <_reclaim_reent+0x94>
 80081b6:	3504      	adds	r5, #4
 80081b8:	69e3      	ldr	r3, [r4, #28]
 80081ba:	2d80      	cmp	r5, #128	; 0x80
 80081bc:	68d9      	ldr	r1, [r3, #12]
 80081be:	d1f8      	bne.n	80081b2 <_reclaim_reent+0x7e>
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 ff01 	bl	8008fc8 <_free_r>
 80081c6:	e7c0      	b.n	800814a <_reclaim_reent+0x16>
 80081c8:	680e      	ldr	r6, [r1, #0]
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 fefc 	bl	8008fc8 <_free_r>
 80081d0:	4631      	mov	r1, r6
 80081d2:	e7ef      	b.n	80081b4 <_reclaim_reent+0x80>
 80081d4:	2500      	movs	r5, #0
 80081d6:	e7ef      	b.n	80081b8 <_reclaim_reent+0x84>
 80081d8:	bd70      	pop	{r4, r5, r6, pc}
 80081da:	bf00      	nop
 80081dc:	20000084 	.word	0x20000084

080081e0 <_lseek_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	2200      	movs	r2, #0
 80081ea:	4d05      	ldr	r5, [pc, #20]	; (8008200 <_lseek_r+0x20>)
 80081ec:	602a      	str	r2, [r5, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f7fb fd5e 	bl	8003cb0 <_lseek>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d102      	bne.n	80081fe <_lseek_r+0x1e>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	b103      	cbz	r3, 80081fe <_lseek_r+0x1e>
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	bd38      	pop	{r3, r4, r5, pc}
 8008200:	20001904 	.word	0x20001904

08008204 <_read_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	4611      	mov	r1, r2
 800820c:	2200      	movs	r2, #0
 800820e:	4d05      	ldr	r5, [pc, #20]	; (8008224 <_read_r+0x20>)
 8008210:	602a      	str	r2, [r5, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	f7fb fd0b 	bl	8003c2e <_read>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d102      	bne.n	8008222 <_read_r+0x1e>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	b103      	cbz	r3, 8008222 <_read_r+0x1e>
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	20001904 	.word	0x20001904

08008228 <_write_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4604      	mov	r4, r0
 800822c:	4608      	mov	r0, r1
 800822e:	4611      	mov	r1, r2
 8008230:	2200      	movs	r2, #0
 8008232:	4d05      	ldr	r5, [pc, #20]	; (8008248 <_write_r+0x20>)
 8008234:	602a      	str	r2, [r5, #0]
 8008236:	461a      	mov	r2, r3
 8008238:	f7fa fd48 	bl	8002ccc <_write>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	d102      	bne.n	8008246 <_write_r+0x1e>
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	b103      	cbz	r3, 8008246 <_write_r+0x1e>
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	bd38      	pop	{r3, r4, r5, pc}
 8008248:	20001904 	.word	0x20001904

0800824c <__errno>:
 800824c:	4b01      	ldr	r3, [pc, #4]	; (8008254 <__errno+0x8>)
 800824e:	6818      	ldr	r0, [r3, #0]
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	20000084 	.word	0x20000084

08008258 <__libc_init_array>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	2600      	movs	r6, #0
 800825c:	4d0c      	ldr	r5, [pc, #48]	; (8008290 <__libc_init_array+0x38>)
 800825e:	4c0d      	ldr	r4, [pc, #52]	; (8008294 <__libc_init_array+0x3c>)
 8008260:	1b64      	subs	r4, r4, r5
 8008262:	10a4      	asrs	r4, r4, #2
 8008264:	42a6      	cmp	r6, r4
 8008266:	d109      	bne.n	800827c <__libc_init_array+0x24>
 8008268:	f004 fb70 	bl	800c94c <_init>
 800826c:	2600      	movs	r6, #0
 800826e:	4d0a      	ldr	r5, [pc, #40]	; (8008298 <__libc_init_array+0x40>)
 8008270:	4c0a      	ldr	r4, [pc, #40]	; (800829c <__libc_init_array+0x44>)
 8008272:	1b64      	subs	r4, r4, r5
 8008274:	10a4      	asrs	r4, r4, #2
 8008276:	42a6      	cmp	r6, r4
 8008278:	d105      	bne.n	8008286 <__libc_init_array+0x2e>
 800827a:	bd70      	pop	{r4, r5, r6, pc}
 800827c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008280:	4798      	blx	r3
 8008282:	3601      	adds	r6, #1
 8008284:	e7ee      	b.n	8008264 <__libc_init_array+0xc>
 8008286:	f855 3b04 	ldr.w	r3, [r5], #4
 800828a:	4798      	blx	r3
 800828c:	3601      	adds	r6, #1
 800828e:	e7f2      	b.n	8008276 <__libc_init_array+0x1e>
 8008290:	0800d778 	.word	0x0800d778
 8008294:	0800d778 	.word	0x0800d778
 8008298:	0800d778 	.word	0x0800d778
 800829c:	0800d77c 	.word	0x0800d77c

080082a0 <__retarget_lock_init_recursive>:
 80082a0:	4770      	bx	lr

080082a2 <__retarget_lock_acquire_recursive>:
 80082a2:	4770      	bx	lr

080082a4 <__retarget_lock_release_recursive>:
 80082a4:	4770      	bx	lr

080082a6 <memchr>:
 80082a6:	4603      	mov	r3, r0
 80082a8:	b510      	push	{r4, lr}
 80082aa:	b2c9      	uxtb	r1, r1
 80082ac:	4402      	add	r2, r0
 80082ae:	4293      	cmp	r3, r2
 80082b0:	4618      	mov	r0, r3
 80082b2:	d101      	bne.n	80082b8 <memchr+0x12>
 80082b4:	2000      	movs	r0, #0
 80082b6:	e003      	b.n	80082c0 <memchr+0x1a>
 80082b8:	7804      	ldrb	r4, [r0, #0]
 80082ba:	3301      	adds	r3, #1
 80082bc:	428c      	cmp	r4, r1
 80082be:	d1f6      	bne.n	80082ae <memchr+0x8>
 80082c0:	bd10      	pop	{r4, pc}

080082c2 <memcpy>:
 80082c2:	440a      	add	r2, r1
 80082c4:	4291      	cmp	r1, r2
 80082c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80082ca:	d100      	bne.n	80082ce <memcpy+0xc>
 80082cc:	4770      	bx	lr
 80082ce:	b510      	push	{r4, lr}
 80082d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082d4:	4291      	cmp	r1, r2
 80082d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082da:	d1f9      	bne.n	80082d0 <memcpy+0xe>
 80082dc:	bd10      	pop	{r4, pc}
	...

080082e0 <nanf>:
 80082e0:	4800      	ldr	r0, [pc, #0]	; (80082e4 <nanf+0x4>)
 80082e2:	4770      	bx	lr
 80082e4:	7fc00000 	.word	0x7fc00000

080082e8 <quorem>:
 80082e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	6903      	ldr	r3, [r0, #16]
 80082ee:	690c      	ldr	r4, [r1, #16]
 80082f0:	4607      	mov	r7, r0
 80082f2:	42a3      	cmp	r3, r4
 80082f4:	db7f      	blt.n	80083f6 <quorem+0x10e>
 80082f6:	3c01      	subs	r4, #1
 80082f8:	f100 0514 	add.w	r5, r0, #20
 80082fc:	f101 0814 	add.w	r8, r1, #20
 8008300:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800830a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800830e:	3301      	adds	r3, #1
 8008310:	429a      	cmp	r2, r3
 8008312:	fbb2 f6f3 	udiv	r6, r2, r3
 8008316:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800831a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800831e:	d331      	bcc.n	8008384 <quorem+0x9c>
 8008320:	f04f 0e00 	mov.w	lr, #0
 8008324:	4640      	mov	r0, r8
 8008326:	46ac      	mov	ip, r5
 8008328:	46f2      	mov	sl, lr
 800832a:	f850 2b04 	ldr.w	r2, [r0], #4
 800832e:	b293      	uxth	r3, r2
 8008330:	fb06 e303 	mla	r3, r6, r3, lr
 8008334:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008338:	0c1a      	lsrs	r2, r3, #16
 800833a:	b29b      	uxth	r3, r3
 800833c:	fb06 220e 	mla	r2, r6, lr, r2
 8008340:	ebaa 0303 	sub.w	r3, sl, r3
 8008344:	f8dc a000 	ldr.w	sl, [ip]
 8008348:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800834c:	fa1f fa8a 	uxth.w	sl, sl
 8008350:	4453      	add	r3, sl
 8008352:	f8dc a000 	ldr.w	sl, [ip]
 8008356:	b292      	uxth	r2, r2
 8008358:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800835c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008360:	b29b      	uxth	r3, r3
 8008362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008366:	4581      	cmp	r9, r0
 8008368:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800836c:	f84c 3b04 	str.w	r3, [ip], #4
 8008370:	d2db      	bcs.n	800832a <quorem+0x42>
 8008372:	f855 300b 	ldr.w	r3, [r5, fp]
 8008376:	b92b      	cbnz	r3, 8008384 <quorem+0x9c>
 8008378:	9b01      	ldr	r3, [sp, #4]
 800837a:	3b04      	subs	r3, #4
 800837c:	429d      	cmp	r5, r3
 800837e:	461a      	mov	r2, r3
 8008380:	d32d      	bcc.n	80083de <quorem+0xf6>
 8008382:	613c      	str	r4, [r7, #16]
 8008384:	4638      	mov	r0, r7
 8008386:	f001 f9df 	bl	8009748 <__mcmp>
 800838a:	2800      	cmp	r0, #0
 800838c:	db23      	blt.n	80083d6 <quorem+0xee>
 800838e:	4629      	mov	r1, r5
 8008390:	2000      	movs	r0, #0
 8008392:	3601      	adds	r6, #1
 8008394:	f858 2b04 	ldr.w	r2, [r8], #4
 8008398:	f8d1 c000 	ldr.w	ip, [r1]
 800839c:	b293      	uxth	r3, r2
 800839e:	1ac3      	subs	r3, r0, r3
 80083a0:	0c12      	lsrs	r2, r2, #16
 80083a2:	fa1f f08c 	uxth.w	r0, ip
 80083a6:	4403      	add	r3, r0
 80083a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80083ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083b6:	45c1      	cmp	r9, r8
 80083b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80083bc:	f841 3b04 	str.w	r3, [r1], #4
 80083c0:	d2e8      	bcs.n	8008394 <quorem+0xac>
 80083c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083ca:	b922      	cbnz	r2, 80083d6 <quorem+0xee>
 80083cc:	3b04      	subs	r3, #4
 80083ce:	429d      	cmp	r5, r3
 80083d0:	461a      	mov	r2, r3
 80083d2:	d30a      	bcc.n	80083ea <quorem+0x102>
 80083d4:	613c      	str	r4, [r7, #16]
 80083d6:	4630      	mov	r0, r6
 80083d8:	b003      	add	sp, #12
 80083da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083de:	6812      	ldr	r2, [r2, #0]
 80083e0:	3b04      	subs	r3, #4
 80083e2:	2a00      	cmp	r2, #0
 80083e4:	d1cd      	bne.n	8008382 <quorem+0x9a>
 80083e6:	3c01      	subs	r4, #1
 80083e8:	e7c8      	b.n	800837c <quorem+0x94>
 80083ea:	6812      	ldr	r2, [r2, #0]
 80083ec:	3b04      	subs	r3, #4
 80083ee:	2a00      	cmp	r2, #0
 80083f0:	d1f0      	bne.n	80083d4 <quorem+0xec>
 80083f2:	3c01      	subs	r4, #1
 80083f4:	e7eb      	b.n	80083ce <quorem+0xe6>
 80083f6:	2000      	movs	r0, #0
 80083f8:	e7ee      	b.n	80083d8 <quorem+0xf0>
 80083fa:	0000      	movs	r0, r0
 80083fc:	0000      	movs	r0, r0
	...

08008400 <_dtoa_r>:
 8008400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	4616      	mov	r6, r2
 8008406:	461f      	mov	r7, r3
 8008408:	69c4      	ldr	r4, [r0, #28]
 800840a:	b099      	sub	sp, #100	; 0x64
 800840c:	4605      	mov	r5, r0
 800840e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008412:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008416:	b974      	cbnz	r4, 8008436 <_dtoa_r+0x36>
 8008418:	2010      	movs	r0, #16
 800841a:	f000 fe1d 	bl	8009058 <malloc>
 800841e:	4602      	mov	r2, r0
 8008420:	61e8      	str	r0, [r5, #28]
 8008422:	b920      	cbnz	r0, 800842e <_dtoa_r+0x2e>
 8008424:	21ef      	movs	r1, #239	; 0xef
 8008426:	4bac      	ldr	r3, [pc, #688]	; (80086d8 <_dtoa_r+0x2d8>)
 8008428:	48ac      	ldr	r0, [pc, #688]	; (80086dc <_dtoa_r+0x2dc>)
 800842a:	f002 fe1f 	bl	800b06c <__assert_func>
 800842e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008432:	6004      	str	r4, [r0, #0]
 8008434:	60c4      	str	r4, [r0, #12]
 8008436:	69eb      	ldr	r3, [r5, #28]
 8008438:	6819      	ldr	r1, [r3, #0]
 800843a:	b151      	cbz	r1, 8008452 <_dtoa_r+0x52>
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	2301      	movs	r3, #1
 8008440:	4093      	lsls	r3, r2
 8008442:	604a      	str	r2, [r1, #4]
 8008444:	608b      	str	r3, [r1, #8]
 8008446:	4628      	mov	r0, r5
 8008448:	f000 fefa 	bl	8009240 <_Bfree>
 800844c:	2200      	movs	r2, #0
 800844e:	69eb      	ldr	r3, [r5, #28]
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	1e3b      	subs	r3, r7, #0
 8008454:	bfaf      	iteee	ge
 8008456:	2300      	movge	r3, #0
 8008458:	2201      	movlt	r2, #1
 800845a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800845e:	9305      	strlt	r3, [sp, #20]
 8008460:	bfa8      	it	ge
 8008462:	f8c8 3000 	strge.w	r3, [r8]
 8008466:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800846a:	4b9d      	ldr	r3, [pc, #628]	; (80086e0 <_dtoa_r+0x2e0>)
 800846c:	bfb8      	it	lt
 800846e:	f8c8 2000 	strlt.w	r2, [r8]
 8008472:	ea33 0309 	bics.w	r3, r3, r9
 8008476:	d119      	bne.n	80084ac <_dtoa_r+0xac>
 8008478:	f242 730f 	movw	r3, #9999	; 0x270f
 800847c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800847e:	6013      	str	r3, [r2, #0]
 8008480:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008484:	4333      	orrs	r3, r6
 8008486:	f000 8589 	beq.w	8008f9c <_dtoa_r+0xb9c>
 800848a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800848c:	b953      	cbnz	r3, 80084a4 <_dtoa_r+0xa4>
 800848e:	4b95      	ldr	r3, [pc, #596]	; (80086e4 <_dtoa_r+0x2e4>)
 8008490:	e023      	b.n	80084da <_dtoa_r+0xda>
 8008492:	4b95      	ldr	r3, [pc, #596]	; (80086e8 <_dtoa_r+0x2e8>)
 8008494:	9303      	str	r3, [sp, #12]
 8008496:	3308      	adds	r3, #8
 8008498:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	9803      	ldr	r0, [sp, #12]
 800849e:	b019      	add	sp, #100	; 0x64
 80084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a4:	4b8f      	ldr	r3, [pc, #572]	; (80086e4 <_dtoa_r+0x2e4>)
 80084a6:	9303      	str	r3, [sp, #12]
 80084a8:	3303      	adds	r3, #3
 80084aa:	e7f5      	b.n	8008498 <_dtoa_r+0x98>
 80084ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80084b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80084b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084b8:	2200      	movs	r2, #0
 80084ba:	2300      	movs	r3, #0
 80084bc:	f7f8 fa74 	bl	80009a8 <__aeabi_dcmpeq>
 80084c0:	4680      	mov	r8, r0
 80084c2:	b160      	cbz	r0, 80084de <_dtoa_r+0xde>
 80084c4:	2301      	movs	r3, #1
 80084c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80084c8:	6013      	str	r3, [r2, #0]
 80084ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8562 	beq.w	8008f96 <_dtoa_r+0xb96>
 80084d2:	4b86      	ldr	r3, [pc, #536]	; (80086ec <_dtoa_r+0x2ec>)
 80084d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80084d6:	6013      	str	r3, [r2, #0]
 80084d8:	3b01      	subs	r3, #1
 80084da:	9303      	str	r3, [sp, #12]
 80084dc:	e7de      	b.n	800849c <_dtoa_r+0x9c>
 80084de:	ab16      	add	r3, sp, #88	; 0x58
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	ab17      	add	r3, sp, #92	; 0x5c
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	4628      	mov	r0, r5
 80084e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084ec:	f001 fa3c 	bl	8009968 <__d2b>
 80084f0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80084f4:	4682      	mov	sl, r0
 80084f6:	2c00      	cmp	r4, #0
 80084f8:	d07e      	beq.n	80085f8 <_dtoa_r+0x1f8>
 80084fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008500:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008508:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800850c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008510:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008514:	4619      	mov	r1, r3
 8008516:	2200      	movs	r2, #0
 8008518:	4b75      	ldr	r3, [pc, #468]	; (80086f0 <_dtoa_r+0x2f0>)
 800851a:	f7f7 fe25 	bl	8000168 <__aeabi_dsub>
 800851e:	a368      	add	r3, pc, #416	; (adr r3, 80086c0 <_dtoa_r+0x2c0>)
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	f7f7 ffd8 	bl	80004d8 <__aeabi_dmul>
 8008528:	a367      	add	r3, pc, #412	; (adr r3, 80086c8 <_dtoa_r+0x2c8>)
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	f7f7 fe1d 	bl	800016c <__adddf3>
 8008532:	4606      	mov	r6, r0
 8008534:	4620      	mov	r0, r4
 8008536:	460f      	mov	r7, r1
 8008538:	f7f7 ff64 	bl	8000404 <__aeabi_i2d>
 800853c:	a364      	add	r3, pc, #400	; (adr r3, 80086d0 <_dtoa_r+0x2d0>)
 800853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008542:	f7f7 ffc9 	bl	80004d8 <__aeabi_dmul>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	4630      	mov	r0, r6
 800854c:	4639      	mov	r1, r7
 800854e:	f7f7 fe0d 	bl	800016c <__adddf3>
 8008552:	4606      	mov	r6, r0
 8008554:	460f      	mov	r7, r1
 8008556:	f7f8 fa6f 	bl	8000a38 <__aeabi_d2iz>
 800855a:	2200      	movs	r2, #0
 800855c:	4683      	mov	fp, r0
 800855e:	2300      	movs	r3, #0
 8008560:	4630      	mov	r0, r6
 8008562:	4639      	mov	r1, r7
 8008564:	f7f8 fa2a 	bl	80009bc <__aeabi_dcmplt>
 8008568:	b148      	cbz	r0, 800857e <_dtoa_r+0x17e>
 800856a:	4658      	mov	r0, fp
 800856c:	f7f7 ff4a 	bl	8000404 <__aeabi_i2d>
 8008570:	4632      	mov	r2, r6
 8008572:	463b      	mov	r3, r7
 8008574:	f7f8 fa18 	bl	80009a8 <__aeabi_dcmpeq>
 8008578:	b908      	cbnz	r0, 800857e <_dtoa_r+0x17e>
 800857a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800857e:	f1bb 0f16 	cmp.w	fp, #22
 8008582:	d857      	bhi.n	8008634 <_dtoa_r+0x234>
 8008584:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008588:	4b5a      	ldr	r3, [pc, #360]	; (80086f4 <_dtoa_r+0x2f4>)
 800858a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	f7f8 fa13 	bl	80009bc <__aeabi_dcmplt>
 8008596:	2800      	cmp	r0, #0
 8008598:	d04e      	beq.n	8008638 <_dtoa_r+0x238>
 800859a:	2300      	movs	r3, #0
 800859c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80085a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80085a4:	1b1b      	subs	r3, r3, r4
 80085a6:	1e5a      	subs	r2, r3, #1
 80085a8:	bf46      	itte	mi
 80085aa:	f1c3 0901 	rsbmi	r9, r3, #1
 80085ae:	2300      	movmi	r3, #0
 80085b0:	f04f 0900 	movpl.w	r9, #0
 80085b4:	9209      	str	r2, [sp, #36]	; 0x24
 80085b6:	bf48      	it	mi
 80085b8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80085ba:	f1bb 0f00 	cmp.w	fp, #0
 80085be:	db3d      	blt.n	800863c <_dtoa_r+0x23c>
 80085c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80085c6:	445b      	add	r3, fp
 80085c8:	9309      	str	r3, [sp, #36]	; 0x24
 80085ca:	2300      	movs	r3, #0
 80085cc:	930a      	str	r3, [sp, #40]	; 0x28
 80085ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085d0:	2b09      	cmp	r3, #9
 80085d2:	d867      	bhi.n	80086a4 <_dtoa_r+0x2a4>
 80085d4:	2b05      	cmp	r3, #5
 80085d6:	bfc4      	itt	gt
 80085d8:	3b04      	subgt	r3, #4
 80085da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80085dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085de:	bfc8      	it	gt
 80085e0:	2400      	movgt	r4, #0
 80085e2:	f1a3 0302 	sub.w	r3, r3, #2
 80085e6:	bfd8      	it	le
 80085e8:	2401      	movle	r4, #1
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	f200 8086 	bhi.w	80086fc <_dtoa_r+0x2fc>
 80085f0:	e8df f003 	tbb	[pc, r3]
 80085f4:	5637392c 	.word	0x5637392c
 80085f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80085fc:	441c      	add	r4, r3
 80085fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008602:	2b20      	cmp	r3, #32
 8008604:	bfc1      	itttt	gt
 8008606:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800860a:	fa09 f903 	lslgt.w	r9, r9, r3
 800860e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008612:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008616:	bfd6      	itet	le
 8008618:	f1c3 0320 	rsble	r3, r3, #32
 800861c:	ea49 0003 	orrgt.w	r0, r9, r3
 8008620:	fa06 f003 	lslle.w	r0, r6, r3
 8008624:	f7f7 fede 	bl	80003e4 <__aeabi_ui2d>
 8008628:	2201      	movs	r2, #1
 800862a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800862e:	3c01      	subs	r4, #1
 8008630:	9213      	str	r2, [sp, #76]	; 0x4c
 8008632:	e76f      	b.n	8008514 <_dtoa_r+0x114>
 8008634:	2301      	movs	r3, #1
 8008636:	e7b3      	b.n	80085a0 <_dtoa_r+0x1a0>
 8008638:	900f      	str	r0, [sp, #60]	; 0x3c
 800863a:	e7b2      	b.n	80085a2 <_dtoa_r+0x1a2>
 800863c:	f1cb 0300 	rsb	r3, fp, #0
 8008640:	930a      	str	r3, [sp, #40]	; 0x28
 8008642:	2300      	movs	r3, #0
 8008644:	eba9 090b 	sub.w	r9, r9, fp
 8008648:	930e      	str	r3, [sp, #56]	; 0x38
 800864a:	e7c0      	b.n	80085ce <_dtoa_r+0x1ce>
 800864c:	2300      	movs	r3, #0
 800864e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008650:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008652:	2b00      	cmp	r3, #0
 8008654:	dc55      	bgt.n	8008702 <_dtoa_r+0x302>
 8008656:	2301      	movs	r3, #1
 8008658:	461a      	mov	r2, r3
 800865a:	9306      	str	r3, [sp, #24]
 800865c:	9308      	str	r3, [sp, #32]
 800865e:	9223      	str	r2, [sp, #140]	; 0x8c
 8008660:	e00b      	b.n	800867a <_dtoa_r+0x27a>
 8008662:	2301      	movs	r3, #1
 8008664:	e7f3      	b.n	800864e <_dtoa_r+0x24e>
 8008666:	2300      	movs	r3, #0
 8008668:	930b      	str	r3, [sp, #44]	; 0x2c
 800866a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800866c:	445b      	add	r3, fp
 800866e:	9306      	str	r3, [sp, #24]
 8008670:	3301      	adds	r3, #1
 8008672:	2b01      	cmp	r3, #1
 8008674:	9308      	str	r3, [sp, #32]
 8008676:	bfb8      	it	lt
 8008678:	2301      	movlt	r3, #1
 800867a:	2100      	movs	r1, #0
 800867c:	2204      	movs	r2, #4
 800867e:	69e8      	ldr	r0, [r5, #28]
 8008680:	f102 0614 	add.w	r6, r2, #20
 8008684:	429e      	cmp	r6, r3
 8008686:	d940      	bls.n	800870a <_dtoa_r+0x30a>
 8008688:	6041      	str	r1, [r0, #4]
 800868a:	4628      	mov	r0, r5
 800868c:	f000 fd98 	bl	80091c0 <_Balloc>
 8008690:	9003      	str	r0, [sp, #12]
 8008692:	2800      	cmp	r0, #0
 8008694:	d13c      	bne.n	8008710 <_dtoa_r+0x310>
 8008696:	4602      	mov	r2, r0
 8008698:	f240 11af 	movw	r1, #431	; 0x1af
 800869c:	4b16      	ldr	r3, [pc, #88]	; (80086f8 <_dtoa_r+0x2f8>)
 800869e:	e6c3      	b.n	8008428 <_dtoa_r+0x28>
 80086a0:	2301      	movs	r3, #1
 80086a2:	e7e1      	b.n	8008668 <_dtoa_r+0x268>
 80086a4:	2401      	movs	r4, #1
 80086a6:	2300      	movs	r3, #0
 80086a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80086aa:	9322      	str	r3, [sp, #136]	; 0x88
 80086ac:	f04f 33ff 	mov.w	r3, #4294967295
 80086b0:	2200      	movs	r2, #0
 80086b2:	9306      	str	r3, [sp, #24]
 80086b4:	9308      	str	r3, [sp, #32]
 80086b6:	2312      	movs	r3, #18
 80086b8:	e7d1      	b.n	800865e <_dtoa_r+0x25e>
 80086ba:	bf00      	nop
 80086bc:	f3af 8000 	nop.w
 80086c0:	636f4361 	.word	0x636f4361
 80086c4:	3fd287a7 	.word	0x3fd287a7
 80086c8:	8b60c8b3 	.word	0x8b60c8b3
 80086cc:	3fc68a28 	.word	0x3fc68a28
 80086d0:	509f79fb 	.word	0x509f79fb
 80086d4:	3fd34413 	.word	0x3fd34413
 80086d8:	0800d360 	.word	0x0800d360
 80086dc:	0800d377 	.word	0x0800d377
 80086e0:	7ff00000 	.word	0x7ff00000
 80086e4:	0800d35c 	.word	0x0800d35c
 80086e8:	0800d353 	.word	0x0800d353
 80086ec:	0800d32b 	.word	0x0800d32b
 80086f0:	3ff80000 	.word	0x3ff80000
 80086f4:	0800d468 	.word	0x0800d468
 80086f8:	0800d3cf 	.word	0x0800d3cf
 80086fc:	2301      	movs	r3, #1
 80086fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008700:	e7d4      	b.n	80086ac <_dtoa_r+0x2ac>
 8008702:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008704:	9306      	str	r3, [sp, #24]
 8008706:	9308      	str	r3, [sp, #32]
 8008708:	e7b7      	b.n	800867a <_dtoa_r+0x27a>
 800870a:	3101      	adds	r1, #1
 800870c:	0052      	lsls	r2, r2, #1
 800870e:	e7b7      	b.n	8008680 <_dtoa_r+0x280>
 8008710:	69eb      	ldr	r3, [r5, #28]
 8008712:	9a03      	ldr	r2, [sp, #12]
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	9b08      	ldr	r3, [sp, #32]
 8008718:	2b0e      	cmp	r3, #14
 800871a:	f200 80a8 	bhi.w	800886e <_dtoa_r+0x46e>
 800871e:	2c00      	cmp	r4, #0
 8008720:	f000 80a5 	beq.w	800886e <_dtoa_r+0x46e>
 8008724:	f1bb 0f00 	cmp.w	fp, #0
 8008728:	dd34      	ble.n	8008794 <_dtoa_r+0x394>
 800872a:	4b9a      	ldr	r3, [pc, #616]	; (8008994 <_dtoa_r+0x594>)
 800872c:	f00b 020f 	and.w	r2, fp, #15
 8008730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008734:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008738:	e9d3 3400 	ldrd	r3, r4, [r3]
 800873c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008740:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008744:	d016      	beq.n	8008774 <_dtoa_r+0x374>
 8008746:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800874a:	4b93      	ldr	r3, [pc, #588]	; (8008998 <_dtoa_r+0x598>)
 800874c:	2703      	movs	r7, #3
 800874e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008752:	f7f7 ffeb 	bl	800072c <__aeabi_ddiv>
 8008756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800875a:	f004 040f 	and.w	r4, r4, #15
 800875e:	4e8e      	ldr	r6, [pc, #568]	; (8008998 <_dtoa_r+0x598>)
 8008760:	b954      	cbnz	r4, 8008778 <_dtoa_r+0x378>
 8008762:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800876a:	f7f7 ffdf 	bl	800072c <__aeabi_ddiv>
 800876e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008772:	e029      	b.n	80087c8 <_dtoa_r+0x3c8>
 8008774:	2702      	movs	r7, #2
 8008776:	e7f2      	b.n	800875e <_dtoa_r+0x35e>
 8008778:	07e1      	lsls	r1, r4, #31
 800877a:	d508      	bpl.n	800878e <_dtoa_r+0x38e>
 800877c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008780:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008784:	f7f7 fea8 	bl	80004d8 <__aeabi_dmul>
 8008788:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800878c:	3701      	adds	r7, #1
 800878e:	1064      	asrs	r4, r4, #1
 8008790:	3608      	adds	r6, #8
 8008792:	e7e5      	b.n	8008760 <_dtoa_r+0x360>
 8008794:	f000 80a5 	beq.w	80088e2 <_dtoa_r+0x4e2>
 8008798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800879c:	f1cb 0400 	rsb	r4, fp, #0
 80087a0:	4b7c      	ldr	r3, [pc, #496]	; (8008994 <_dtoa_r+0x594>)
 80087a2:	f004 020f 	and.w	r2, r4, #15
 80087a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ae:	f7f7 fe93 	bl	80004d8 <__aeabi_dmul>
 80087b2:	2702      	movs	r7, #2
 80087b4:	2300      	movs	r3, #0
 80087b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087ba:	4e77      	ldr	r6, [pc, #476]	; (8008998 <_dtoa_r+0x598>)
 80087bc:	1124      	asrs	r4, r4, #4
 80087be:	2c00      	cmp	r4, #0
 80087c0:	f040 8084 	bne.w	80088cc <_dtoa_r+0x4cc>
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1d2      	bne.n	800876e <_dtoa_r+0x36e>
 80087c8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80087cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80087d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 8087 	beq.w	80088e6 <_dtoa_r+0x4e6>
 80087d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087dc:	2200      	movs	r2, #0
 80087de:	4b6f      	ldr	r3, [pc, #444]	; (800899c <_dtoa_r+0x59c>)
 80087e0:	f7f8 f8ec 	bl	80009bc <__aeabi_dcmplt>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d07e      	beq.n	80088e6 <_dtoa_r+0x4e6>
 80087e8:	9b08      	ldr	r3, [sp, #32]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d07b      	beq.n	80088e6 <_dtoa_r+0x4e6>
 80087ee:	9b06      	ldr	r3, [sp, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	dd38      	ble.n	8008866 <_dtoa_r+0x466>
 80087f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087f8:	2200      	movs	r2, #0
 80087fa:	4b69      	ldr	r3, [pc, #420]	; (80089a0 <_dtoa_r+0x5a0>)
 80087fc:	f7f7 fe6c 	bl	80004d8 <__aeabi_dmul>
 8008800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008804:	9c06      	ldr	r4, [sp, #24]
 8008806:	f10b 38ff 	add.w	r8, fp, #4294967295
 800880a:	3701      	adds	r7, #1
 800880c:	4638      	mov	r0, r7
 800880e:	f7f7 fdf9 	bl	8000404 <__aeabi_i2d>
 8008812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008816:	f7f7 fe5f 	bl	80004d8 <__aeabi_dmul>
 800881a:	2200      	movs	r2, #0
 800881c:	4b61      	ldr	r3, [pc, #388]	; (80089a4 <_dtoa_r+0x5a4>)
 800881e:	f7f7 fca5 	bl	800016c <__adddf3>
 8008822:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008826:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800882a:	9611      	str	r6, [sp, #68]	; 0x44
 800882c:	2c00      	cmp	r4, #0
 800882e:	d15d      	bne.n	80088ec <_dtoa_r+0x4ec>
 8008830:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008834:	2200      	movs	r2, #0
 8008836:	4b5c      	ldr	r3, [pc, #368]	; (80089a8 <_dtoa_r+0x5a8>)
 8008838:	f7f7 fc96 	bl	8000168 <__aeabi_dsub>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008844:	4633      	mov	r3, r6
 8008846:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008848:	f7f8 f8d6 	bl	80009f8 <__aeabi_dcmpgt>
 800884c:	2800      	cmp	r0, #0
 800884e:	f040 8295 	bne.w	8008d7c <_dtoa_r+0x97c>
 8008852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008856:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008858:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800885c:	f7f8 f8ae 	bl	80009bc <__aeabi_dcmplt>
 8008860:	2800      	cmp	r0, #0
 8008862:	f040 8289 	bne.w	8008d78 <_dtoa_r+0x978>
 8008866:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800886a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800886e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008870:	2b00      	cmp	r3, #0
 8008872:	f2c0 8151 	blt.w	8008b18 <_dtoa_r+0x718>
 8008876:	f1bb 0f0e 	cmp.w	fp, #14
 800887a:	f300 814d 	bgt.w	8008b18 <_dtoa_r+0x718>
 800887e:	4b45      	ldr	r3, [pc, #276]	; (8008994 <_dtoa_r+0x594>)
 8008880:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008884:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008888:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800888c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800888e:	2b00      	cmp	r3, #0
 8008890:	f280 80da 	bge.w	8008a48 <_dtoa_r+0x648>
 8008894:	9b08      	ldr	r3, [sp, #32]
 8008896:	2b00      	cmp	r3, #0
 8008898:	f300 80d6 	bgt.w	8008a48 <_dtoa_r+0x648>
 800889c:	f040 826b 	bne.w	8008d76 <_dtoa_r+0x976>
 80088a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088a4:	2200      	movs	r2, #0
 80088a6:	4b40      	ldr	r3, [pc, #256]	; (80089a8 <_dtoa_r+0x5a8>)
 80088a8:	f7f7 fe16 	bl	80004d8 <__aeabi_dmul>
 80088ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b0:	f7f8 f898 	bl	80009e4 <__aeabi_dcmpge>
 80088b4:	9c08      	ldr	r4, [sp, #32]
 80088b6:	4626      	mov	r6, r4
 80088b8:	2800      	cmp	r0, #0
 80088ba:	f040 8241 	bne.w	8008d40 <_dtoa_r+0x940>
 80088be:	2331      	movs	r3, #49	; 0x31
 80088c0:	9f03      	ldr	r7, [sp, #12]
 80088c2:	f10b 0b01 	add.w	fp, fp, #1
 80088c6:	f807 3b01 	strb.w	r3, [r7], #1
 80088ca:	e23d      	b.n	8008d48 <_dtoa_r+0x948>
 80088cc:	07e2      	lsls	r2, r4, #31
 80088ce:	d505      	bpl.n	80088dc <_dtoa_r+0x4dc>
 80088d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088d4:	f7f7 fe00 	bl	80004d8 <__aeabi_dmul>
 80088d8:	2301      	movs	r3, #1
 80088da:	3701      	adds	r7, #1
 80088dc:	1064      	asrs	r4, r4, #1
 80088de:	3608      	adds	r6, #8
 80088e0:	e76d      	b.n	80087be <_dtoa_r+0x3be>
 80088e2:	2702      	movs	r7, #2
 80088e4:	e770      	b.n	80087c8 <_dtoa_r+0x3c8>
 80088e6:	46d8      	mov	r8, fp
 80088e8:	9c08      	ldr	r4, [sp, #32]
 80088ea:	e78f      	b.n	800880c <_dtoa_r+0x40c>
 80088ec:	9903      	ldr	r1, [sp, #12]
 80088ee:	4b29      	ldr	r3, [pc, #164]	; (8008994 <_dtoa_r+0x594>)
 80088f0:	4421      	add	r1, r4
 80088f2:	9112      	str	r1, [sp, #72]	; 0x48
 80088f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088fa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80088fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008902:	2900      	cmp	r1, #0
 8008904:	d054      	beq.n	80089b0 <_dtoa_r+0x5b0>
 8008906:	2000      	movs	r0, #0
 8008908:	4928      	ldr	r1, [pc, #160]	; (80089ac <_dtoa_r+0x5ac>)
 800890a:	f7f7 ff0f 	bl	800072c <__aeabi_ddiv>
 800890e:	463b      	mov	r3, r7
 8008910:	4632      	mov	r2, r6
 8008912:	f7f7 fc29 	bl	8000168 <__aeabi_dsub>
 8008916:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800891a:	9f03      	ldr	r7, [sp, #12]
 800891c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008920:	f7f8 f88a 	bl	8000a38 <__aeabi_d2iz>
 8008924:	4604      	mov	r4, r0
 8008926:	f7f7 fd6d 	bl	8000404 <__aeabi_i2d>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008932:	f7f7 fc19 	bl	8000168 <__aeabi_dsub>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	3430      	adds	r4, #48	; 0x30
 800893c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008940:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008944:	f807 4b01 	strb.w	r4, [r7], #1
 8008948:	f7f8 f838 	bl	80009bc <__aeabi_dcmplt>
 800894c:	2800      	cmp	r0, #0
 800894e:	d173      	bne.n	8008a38 <_dtoa_r+0x638>
 8008950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008954:	2000      	movs	r0, #0
 8008956:	4911      	ldr	r1, [pc, #68]	; (800899c <_dtoa_r+0x59c>)
 8008958:	f7f7 fc06 	bl	8000168 <__aeabi_dsub>
 800895c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008960:	f7f8 f82c 	bl	80009bc <__aeabi_dcmplt>
 8008964:	2800      	cmp	r0, #0
 8008966:	f040 80b6 	bne.w	8008ad6 <_dtoa_r+0x6d6>
 800896a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800896c:	429f      	cmp	r7, r3
 800896e:	f43f af7a 	beq.w	8008866 <_dtoa_r+0x466>
 8008972:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008976:	2200      	movs	r2, #0
 8008978:	4b09      	ldr	r3, [pc, #36]	; (80089a0 <_dtoa_r+0x5a0>)
 800897a:	f7f7 fdad 	bl	80004d8 <__aeabi_dmul>
 800897e:	2200      	movs	r2, #0
 8008980:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008988:	4b05      	ldr	r3, [pc, #20]	; (80089a0 <_dtoa_r+0x5a0>)
 800898a:	f7f7 fda5 	bl	80004d8 <__aeabi_dmul>
 800898e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008992:	e7c3      	b.n	800891c <_dtoa_r+0x51c>
 8008994:	0800d468 	.word	0x0800d468
 8008998:	0800d440 	.word	0x0800d440
 800899c:	3ff00000 	.word	0x3ff00000
 80089a0:	40240000 	.word	0x40240000
 80089a4:	401c0000 	.word	0x401c0000
 80089a8:	40140000 	.word	0x40140000
 80089ac:	3fe00000 	.word	0x3fe00000
 80089b0:	4630      	mov	r0, r6
 80089b2:	4639      	mov	r1, r7
 80089b4:	f7f7 fd90 	bl	80004d8 <__aeabi_dmul>
 80089b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80089be:	9c03      	ldr	r4, [sp, #12]
 80089c0:	9314      	str	r3, [sp, #80]	; 0x50
 80089c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089c6:	f7f8 f837 	bl	8000a38 <__aeabi_d2iz>
 80089ca:	9015      	str	r0, [sp, #84]	; 0x54
 80089cc:	f7f7 fd1a 	bl	8000404 <__aeabi_i2d>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089d8:	f7f7 fbc6 	bl	8000168 <__aeabi_dsub>
 80089dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089de:	4606      	mov	r6, r0
 80089e0:	3330      	adds	r3, #48	; 0x30
 80089e2:	f804 3b01 	strb.w	r3, [r4], #1
 80089e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089e8:	460f      	mov	r7, r1
 80089ea:	429c      	cmp	r4, r3
 80089ec:	f04f 0200 	mov.w	r2, #0
 80089f0:	d124      	bne.n	8008a3c <_dtoa_r+0x63c>
 80089f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089f6:	4baf      	ldr	r3, [pc, #700]	; (8008cb4 <_dtoa_r+0x8b4>)
 80089f8:	f7f7 fbb8 	bl	800016c <__adddf3>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4630      	mov	r0, r6
 8008a02:	4639      	mov	r1, r7
 8008a04:	f7f7 fff8 	bl	80009f8 <__aeabi_dcmpgt>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d163      	bne.n	8008ad4 <_dtoa_r+0x6d4>
 8008a0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a10:	2000      	movs	r0, #0
 8008a12:	49a8      	ldr	r1, [pc, #672]	; (8008cb4 <_dtoa_r+0x8b4>)
 8008a14:	f7f7 fba8 	bl	8000168 <__aeabi_dsub>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	4639      	mov	r1, r7
 8008a20:	f7f7 ffcc 	bl	80009bc <__aeabi_dcmplt>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f43f af1e 	beq.w	8008866 <_dtoa_r+0x466>
 8008a2a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008a2c:	1e7b      	subs	r3, r7, #1
 8008a2e:	9314      	str	r3, [sp, #80]	; 0x50
 8008a30:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008a34:	2b30      	cmp	r3, #48	; 0x30
 8008a36:	d0f8      	beq.n	8008a2a <_dtoa_r+0x62a>
 8008a38:	46c3      	mov	fp, r8
 8008a3a:	e03b      	b.n	8008ab4 <_dtoa_r+0x6b4>
 8008a3c:	4b9e      	ldr	r3, [pc, #632]	; (8008cb8 <_dtoa_r+0x8b8>)
 8008a3e:	f7f7 fd4b 	bl	80004d8 <__aeabi_dmul>
 8008a42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a46:	e7bc      	b.n	80089c2 <_dtoa_r+0x5c2>
 8008a48:	9f03      	ldr	r7, [sp, #12]
 8008a4a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008a4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a52:	4640      	mov	r0, r8
 8008a54:	4649      	mov	r1, r9
 8008a56:	f7f7 fe69 	bl	800072c <__aeabi_ddiv>
 8008a5a:	f7f7 ffed 	bl	8000a38 <__aeabi_d2iz>
 8008a5e:	4604      	mov	r4, r0
 8008a60:	f7f7 fcd0 	bl	8000404 <__aeabi_i2d>
 8008a64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a68:	f7f7 fd36 	bl	80004d8 <__aeabi_dmul>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4640      	mov	r0, r8
 8008a72:	4649      	mov	r1, r9
 8008a74:	f7f7 fb78 	bl	8000168 <__aeabi_dsub>
 8008a78:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008a7c:	f807 6b01 	strb.w	r6, [r7], #1
 8008a80:	9e03      	ldr	r6, [sp, #12]
 8008a82:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008a86:	1bbe      	subs	r6, r7, r6
 8008a88:	45b4      	cmp	ip, r6
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	d136      	bne.n	8008afe <_dtoa_r+0x6fe>
 8008a90:	f7f7 fb6c 	bl	800016c <__adddf3>
 8008a94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a98:	4680      	mov	r8, r0
 8008a9a:	4689      	mov	r9, r1
 8008a9c:	f7f7 ffac 	bl	80009f8 <__aeabi_dcmpgt>
 8008aa0:	bb58      	cbnz	r0, 8008afa <_dtoa_r+0x6fa>
 8008aa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	f7f7 ff7d 	bl	80009a8 <__aeabi_dcmpeq>
 8008aae:	b108      	cbz	r0, 8008ab4 <_dtoa_r+0x6b4>
 8008ab0:	07e3      	lsls	r3, r4, #31
 8008ab2:	d422      	bmi.n	8008afa <_dtoa_r+0x6fa>
 8008ab4:	4651      	mov	r1, sl
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f000 fbc2 	bl	8009240 <_Bfree>
 8008abc:	2300      	movs	r3, #0
 8008abe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008ac0:	703b      	strb	r3, [r7, #0]
 8008ac2:	f10b 0301 	add.w	r3, fp, #1
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f43f ace6 	beq.w	800849c <_dtoa_r+0x9c>
 8008ad0:	601f      	str	r7, [r3, #0]
 8008ad2:	e4e3      	b.n	800849c <_dtoa_r+0x9c>
 8008ad4:	4627      	mov	r7, r4
 8008ad6:	463b      	mov	r3, r7
 8008ad8:	461f      	mov	r7, r3
 8008ada:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ade:	2a39      	cmp	r2, #57	; 0x39
 8008ae0:	d107      	bne.n	8008af2 <_dtoa_r+0x6f2>
 8008ae2:	9a03      	ldr	r2, [sp, #12]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d1f7      	bne.n	8008ad8 <_dtoa_r+0x6d8>
 8008ae8:	2230      	movs	r2, #48	; 0x30
 8008aea:	9903      	ldr	r1, [sp, #12]
 8008aec:	f108 0801 	add.w	r8, r8, #1
 8008af0:	700a      	strb	r2, [r1, #0]
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	3201      	adds	r2, #1
 8008af6:	701a      	strb	r2, [r3, #0]
 8008af8:	e79e      	b.n	8008a38 <_dtoa_r+0x638>
 8008afa:	46d8      	mov	r8, fp
 8008afc:	e7eb      	b.n	8008ad6 <_dtoa_r+0x6d6>
 8008afe:	2200      	movs	r2, #0
 8008b00:	4b6d      	ldr	r3, [pc, #436]	; (8008cb8 <_dtoa_r+0x8b8>)
 8008b02:	f7f7 fce9 	bl	80004d8 <__aeabi_dmul>
 8008b06:	2200      	movs	r2, #0
 8008b08:	2300      	movs	r3, #0
 8008b0a:	4680      	mov	r8, r0
 8008b0c:	4689      	mov	r9, r1
 8008b0e:	f7f7 ff4b 	bl	80009a8 <__aeabi_dcmpeq>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d09b      	beq.n	8008a4e <_dtoa_r+0x64e>
 8008b16:	e7cd      	b.n	8008ab4 <_dtoa_r+0x6b4>
 8008b18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b1a:	2a00      	cmp	r2, #0
 8008b1c:	f000 80c4 	beq.w	8008ca8 <_dtoa_r+0x8a8>
 8008b20:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008b22:	2a01      	cmp	r2, #1
 8008b24:	f300 80a8 	bgt.w	8008c78 <_dtoa_r+0x878>
 8008b28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b2a:	2a00      	cmp	r2, #0
 8008b2c:	f000 80a0 	beq.w	8008c70 <_dtoa_r+0x870>
 8008b30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b34:	464f      	mov	r7, r9
 8008b36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	441a      	add	r2, r3
 8008b3e:	4628      	mov	r0, r5
 8008b40:	4499      	add	r9, r3
 8008b42:	9209      	str	r2, [sp, #36]	; 0x24
 8008b44:	f000 fc7c 	bl	8009440 <__i2b>
 8008b48:	4606      	mov	r6, r0
 8008b4a:	b15f      	cbz	r7, 8008b64 <_dtoa_r+0x764>
 8008b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	dd08      	ble.n	8008b64 <_dtoa_r+0x764>
 8008b52:	42bb      	cmp	r3, r7
 8008b54:	bfa8      	it	ge
 8008b56:	463b      	movge	r3, r7
 8008b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b5a:	eba9 0903 	sub.w	r9, r9, r3
 8008b5e:	1aff      	subs	r7, r7, r3
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	9309      	str	r3, [sp, #36]	; 0x24
 8008b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b66:	b1f3      	cbz	r3, 8008ba6 <_dtoa_r+0x7a6>
 8008b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 80a0 	beq.w	8008cb0 <_dtoa_r+0x8b0>
 8008b70:	2c00      	cmp	r4, #0
 8008b72:	dd10      	ble.n	8008b96 <_dtoa_r+0x796>
 8008b74:	4631      	mov	r1, r6
 8008b76:	4622      	mov	r2, r4
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f000 fd1f 	bl	80095bc <__pow5mult>
 8008b7e:	4652      	mov	r2, sl
 8008b80:	4601      	mov	r1, r0
 8008b82:	4606      	mov	r6, r0
 8008b84:	4628      	mov	r0, r5
 8008b86:	f000 fc71 	bl	800946c <__multiply>
 8008b8a:	4680      	mov	r8, r0
 8008b8c:	4651      	mov	r1, sl
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 fb56 	bl	8009240 <_Bfree>
 8008b94:	46c2      	mov	sl, r8
 8008b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b98:	1b1a      	subs	r2, r3, r4
 8008b9a:	d004      	beq.n	8008ba6 <_dtoa_r+0x7a6>
 8008b9c:	4651      	mov	r1, sl
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f000 fd0c 	bl	80095bc <__pow5mult>
 8008ba4:	4682      	mov	sl, r0
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f000 fc49 	bl	8009440 <__i2b>
 8008bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f340 8082 	ble.w	8008cbc <_dtoa_r+0x8bc>
 8008bb8:	461a      	mov	r2, r3
 8008bba:	4601      	mov	r1, r0
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	f000 fcfd 	bl	80095bc <__pow5mult>
 8008bc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	dd7b      	ble.n	8008cc2 <_dtoa_r+0x8c2>
 8008bca:	f04f 0800 	mov.w	r8, #0
 8008bce:	6923      	ldr	r3, [r4, #16]
 8008bd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bd4:	6918      	ldr	r0, [r3, #16]
 8008bd6:	f000 fbe5 	bl	80093a4 <__hi0bits>
 8008bda:	f1c0 0020 	rsb	r0, r0, #32
 8008bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be0:	4418      	add	r0, r3
 8008be2:	f010 001f 	ands.w	r0, r0, #31
 8008be6:	f000 8092 	beq.w	8008d0e <_dtoa_r+0x90e>
 8008bea:	f1c0 0320 	rsb	r3, r0, #32
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	f340 8085 	ble.w	8008cfe <_dtoa_r+0x8fe>
 8008bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf6:	f1c0 001c 	rsb	r0, r0, #28
 8008bfa:	4403      	add	r3, r0
 8008bfc:	4481      	add	r9, r0
 8008bfe:	4407      	add	r7, r0
 8008c00:	9309      	str	r3, [sp, #36]	; 0x24
 8008c02:	f1b9 0f00 	cmp.w	r9, #0
 8008c06:	dd05      	ble.n	8008c14 <_dtoa_r+0x814>
 8008c08:	4651      	mov	r1, sl
 8008c0a:	464a      	mov	r2, r9
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	f000 fd2f 	bl	8009670 <__lshift>
 8008c12:	4682      	mov	sl, r0
 8008c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	dd05      	ble.n	8008c26 <_dtoa_r+0x826>
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f000 fd26 	bl	8009670 <__lshift>
 8008c24:	4604      	mov	r4, r0
 8008c26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d072      	beq.n	8008d12 <_dtoa_r+0x912>
 8008c2c:	4621      	mov	r1, r4
 8008c2e:	4650      	mov	r0, sl
 8008c30:	f000 fd8a 	bl	8009748 <__mcmp>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	da6c      	bge.n	8008d12 <_dtoa_r+0x912>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4651      	mov	r1, sl
 8008c3c:	220a      	movs	r2, #10
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 fb20 	bl	8009284 <__multadd>
 8008c44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c46:	4682      	mov	sl, r0
 8008c48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 81ac 	beq.w	8008faa <_dtoa_r+0xbaa>
 8008c52:	2300      	movs	r3, #0
 8008c54:	4631      	mov	r1, r6
 8008c56:	220a      	movs	r2, #10
 8008c58:	4628      	mov	r0, r5
 8008c5a:	f000 fb13 	bl	8009284 <__multadd>
 8008c5e:	9b06      	ldr	r3, [sp, #24]
 8008c60:	4606      	mov	r6, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f300 8093 	bgt.w	8008d8e <_dtoa_r+0x98e>
 8008c68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	dc59      	bgt.n	8008d22 <_dtoa_r+0x922>
 8008c6e:	e08e      	b.n	8008d8e <_dtoa_r+0x98e>
 8008c70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c72:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c76:	e75d      	b.n	8008b34 <_dtoa_r+0x734>
 8008c78:	9b08      	ldr	r3, [sp, #32]
 8008c7a:	1e5c      	subs	r4, r3, #1
 8008c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7e:	42a3      	cmp	r3, r4
 8008c80:	bfbf      	itttt	lt
 8008c82:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c84:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008c86:	1ae3      	sublt	r3, r4, r3
 8008c88:	18d2      	addlt	r2, r2, r3
 8008c8a:	bfa8      	it	ge
 8008c8c:	1b1c      	subge	r4, r3, r4
 8008c8e:	9b08      	ldr	r3, [sp, #32]
 8008c90:	bfbe      	ittt	lt
 8008c92:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008c94:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008c96:	2400      	movlt	r4, #0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	bfb5      	itete	lt
 8008c9c:	eba9 0703 	sublt.w	r7, r9, r3
 8008ca0:	464f      	movge	r7, r9
 8008ca2:	2300      	movlt	r3, #0
 8008ca4:	9b08      	ldrge	r3, [sp, #32]
 8008ca6:	e747      	b.n	8008b38 <_dtoa_r+0x738>
 8008ca8:	464f      	mov	r7, r9
 8008caa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008cac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008cae:	e74c      	b.n	8008b4a <_dtoa_r+0x74a>
 8008cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cb2:	e773      	b.n	8008b9c <_dtoa_r+0x79c>
 8008cb4:	3fe00000 	.word	0x3fe00000
 8008cb8:	40240000 	.word	0x40240000
 8008cbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	dc18      	bgt.n	8008cf4 <_dtoa_r+0x8f4>
 8008cc2:	9b04      	ldr	r3, [sp, #16]
 8008cc4:	b9b3      	cbnz	r3, 8008cf4 <_dtoa_r+0x8f4>
 8008cc6:	9b05      	ldr	r3, [sp, #20]
 8008cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ccc:	b993      	cbnz	r3, 8008cf4 <_dtoa_r+0x8f4>
 8008cce:	9b05      	ldr	r3, [sp, #20]
 8008cd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cd4:	0d1b      	lsrs	r3, r3, #20
 8008cd6:	051b      	lsls	r3, r3, #20
 8008cd8:	b17b      	cbz	r3, 8008cfa <_dtoa_r+0x8fa>
 8008cda:	f04f 0801 	mov.w	r8, #1
 8008cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce0:	f109 0901 	add.w	r9, r9, #1
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f47f af6f 	bne.w	8008bce <_dtoa_r+0x7ce>
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	e774      	b.n	8008bde <_dtoa_r+0x7de>
 8008cf4:	f04f 0800 	mov.w	r8, #0
 8008cf8:	e7f6      	b.n	8008ce8 <_dtoa_r+0x8e8>
 8008cfa:	4698      	mov	r8, r3
 8008cfc:	e7f4      	b.n	8008ce8 <_dtoa_r+0x8e8>
 8008cfe:	d080      	beq.n	8008c02 <_dtoa_r+0x802>
 8008d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d02:	331c      	adds	r3, #28
 8008d04:	441a      	add	r2, r3
 8008d06:	4499      	add	r9, r3
 8008d08:	441f      	add	r7, r3
 8008d0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d0c:	e779      	b.n	8008c02 <_dtoa_r+0x802>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	e7f6      	b.n	8008d00 <_dtoa_r+0x900>
 8008d12:	9b08      	ldr	r3, [sp, #32]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dc34      	bgt.n	8008d82 <_dtoa_r+0x982>
 8008d18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	dd31      	ble.n	8008d82 <_dtoa_r+0x982>
 8008d1e:	9b08      	ldr	r3, [sp, #32]
 8008d20:	9306      	str	r3, [sp, #24]
 8008d22:	9b06      	ldr	r3, [sp, #24]
 8008d24:	b963      	cbnz	r3, 8008d40 <_dtoa_r+0x940>
 8008d26:	4621      	mov	r1, r4
 8008d28:	2205      	movs	r2, #5
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	f000 faaa 	bl	8009284 <__multadd>
 8008d30:	4601      	mov	r1, r0
 8008d32:	4604      	mov	r4, r0
 8008d34:	4650      	mov	r0, sl
 8008d36:	f000 fd07 	bl	8009748 <__mcmp>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	f73f adbf 	bgt.w	80088be <_dtoa_r+0x4be>
 8008d40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d42:	9f03      	ldr	r7, [sp, #12]
 8008d44:	ea6f 0b03 	mvn.w	fp, r3
 8008d48:	f04f 0800 	mov.w	r8, #0
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f000 fa76 	bl	8009240 <_Bfree>
 8008d54:	2e00      	cmp	r6, #0
 8008d56:	f43f aead 	beq.w	8008ab4 <_dtoa_r+0x6b4>
 8008d5a:	f1b8 0f00 	cmp.w	r8, #0
 8008d5e:	d005      	beq.n	8008d6c <_dtoa_r+0x96c>
 8008d60:	45b0      	cmp	r8, r6
 8008d62:	d003      	beq.n	8008d6c <_dtoa_r+0x96c>
 8008d64:	4641      	mov	r1, r8
 8008d66:	4628      	mov	r0, r5
 8008d68:	f000 fa6a 	bl	8009240 <_Bfree>
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f000 fa66 	bl	8009240 <_Bfree>
 8008d74:	e69e      	b.n	8008ab4 <_dtoa_r+0x6b4>
 8008d76:	2400      	movs	r4, #0
 8008d78:	4626      	mov	r6, r4
 8008d7a:	e7e1      	b.n	8008d40 <_dtoa_r+0x940>
 8008d7c:	46c3      	mov	fp, r8
 8008d7e:	4626      	mov	r6, r4
 8008d80:	e59d      	b.n	80088be <_dtoa_r+0x4be>
 8008d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 80c8 	beq.w	8008f1a <_dtoa_r+0xb1a>
 8008d8a:	9b08      	ldr	r3, [sp, #32]
 8008d8c:	9306      	str	r3, [sp, #24]
 8008d8e:	2f00      	cmp	r7, #0
 8008d90:	dd05      	ble.n	8008d9e <_dtoa_r+0x99e>
 8008d92:	4631      	mov	r1, r6
 8008d94:	463a      	mov	r2, r7
 8008d96:	4628      	mov	r0, r5
 8008d98:	f000 fc6a 	bl	8009670 <__lshift>
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	f1b8 0f00 	cmp.w	r8, #0
 8008da2:	d05b      	beq.n	8008e5c <_dtoa_r+0xa5c>
 8008da4:	4628      	mov	r0, r5
 8008da6:	6871      	ldr	r1, [r6, #4]
 8008da8:	f000 fa0a 	bl	80091c0 <_Balloc>
 8008dac:	4607      	mov	r7, r0
 8008dae:	b928      	cbnz	r0, 8008dbc <_dtoa_r+0x9bc>
 8008db0:	4602      	mov	r2, r0
 8008db2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008db6:	4b81      	ldr	r3, [pc, #516]	; (8008fbc <_dtoa_r+0xbbc>)
 8008db8:	f7ff bb36 	b.w	8008428 <_dtoa_r+0x28>
 8008dbc:	6932      	ldr	r2, [r6, #16]
 8008dbe:	f106 010c 	add.w	r1, r6, #12
 8008dc2:	3202      	adds	r2, #2
 8008dc4:	0092      	lsls	r2, r2, #2
 8008dc6:	300c      	adds	r0, #12
 8008dc8:	f7ff fa7b 	bl	80082c2 <memcpy>
 8008dcc:	2201      	movs	r2, #1
 8008dce:	4639      	mov	r1, r7
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f000 fc4d 	bl	8009670 <__lshift>
 8008dd6:	46b0      	mov	r8, r6
 8008dd8:	4606      	mov	r6, r0
 8008dda:	9b03      	ldr	r3, [sp, #12]
 8008ddc:	9a03      	ldr	r2, [sp, #12]
 8008dde:	3301      	adds	r3, #1
 8008de0:	9308      	str	r3, [sp, #32]
 8008de2:	9b06      	ldr	r3, [sp, #24]
 8008de4:	4413      	add	r3, r2
 8008de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008de8:	9b04      	ldr	r3, [sp, #16]
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	930a      	str	r3, [sp, #40]	; 0x28
 8008df0:	9b08      	ldr	r3, [sp, #32]
 8008df2:	4621      	mov	r1, r4
 8008df4:	3b01      	subs	r3, #1
 8008df6:	4650      	mov	r0, sl
 8008df8:	9304      	str	r3, [sp, #16]
 8008dfa:	f7ff fa75 	bl	80082e8 <quorem>
 8008dfe:	4641      	mov	r1, r8
 8008e00:	9006      	str	r0, [sp, #24]
 8008e02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008e06:	4650      	mov	r0, sl
 8008e08:	f000 fc9e 	bl	8009748 <__mcmp>
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	9009      	str	r0, [sp, #36]	; 0x24
 8008e10:	4621      	mov	r1, r4
 8008e12:	4628      	mov	r0, r5
 8008e14:	f000 fcb4 	bl	8009780 <__mdiff>
 8008e18:	68c2      	ldr	r2, [r0, #12]
 8008e1a:	4607      	mov	r7, r0
 8008e1c:	bb02      	cbnz	r2, 8008e60 <_dtoa_r+0xa60>
 8008e1e:	4601      	mov	r1, r0
 8008e20:	4650      	mov	r0, sl
 8008e22:	f000 fc91 	bl	8009748 <__mcmp>
 8008e26:	4602      	mov	r2, r0
 8008e28:	4639      	mov	r1, r7
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	920c      	str	r2, [sp, #48]	; 0x30
 8008e2e:	f000 fa07 	bl	8009240 <_Bfree>
 8008e32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e36:	9f08      	ldr	r7, [sp, #32]
 8008e38:	ea43 0102 	orr.w	r1, r3, r2
 8008e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e3e:	4319      	orrs	r1, r3
 8008e40:	d110      	bne.n	8008e64 <_dtoa_r+0xa64>
 8008e42:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e46:	d029      	beq.n	8008e9c <_dtoa_r+0xa9c>
 8008e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	dd02      	ble.n	8008e54 <_dtoa_r+0xa54>
 8008e4e:	9b06      	ldr	r3, [sp, #24]
 8008e50:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008e54:	9b04      	ldr	r3, [sp, #16]
 8008e56:	f883 9000 	strb.w	r9, [r3]
 8008e5a:	e777      	b.n	8008d4c <_dtoa_r+0x94c>
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	e7ba      	b.n	8008dd6 <_dtoa_r+0x9d6>
 8008e60:	2201      	movs	r2, #1
 8008e62:	e7e1      	b.n	8008e28 <_dtoa_r+0xa28>
 8008e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	db04      	blt.n	8008e74 <_dtoa_r+0xa74>
 8008e6a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008e6c:	430b      	orrs	r3, r1
 8008e6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e70:	430b      	orrs	r3, r1
 8008e72:	d120      	bne.n	8008eb6 <_dtoa_r+0xab6>
 8008e74:	2a00      	cmp	r2, #0
 8008e76:	dded      	ble.n	8008e54 <_dtoa_r+0xa54>
 8008e78:	4651      	mov	r1, sl
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f000 fbf7 	bl	8009670 <__lshift>
 8008e82:	4621      	mov	r1, r4
 8008e84:	4682      	mov	sl, r0
 8008e86:	f000 fc5f 	bl	8009748 <__mcmp>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	dc03      	bgt.n	8008e96 <_dtoa_r+0xa96>
 8008e8e:	d1e1      	bne.n	8008e54 <_dtoa_r+0xa54>
 8008e90:	f019 0f01 	tst.w	r9, #1
 8008e94:	d0de      	beq.n	8008e54 <_dtoa_r+0xa54>
 8008e96:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e9a:	d1d8      	bne.n	8008e4e <_dtoa_r+0xa4e>
 8008e9c:	2339      	movs	r3, #57	; 0x39
 8008e9e:	9a04      	ldr	r2, [sp, #16]
 8008ea0:	7013      	strb	r3, [r2, #0]
 8008ea2:	463b      	mov	r3, r7
 8008ea4:	461f      	mov	r7, r3
 8008ea6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	2a39      	cmp	r2, #57	; 0x39
 8008eae:	d06b      	beq.n	8008f88 <_dtoa_r+0xb88>
 8008eb0:	3201      	adds	r2, #1
 8008eb2:	701a      	strb	r2, [r3, #0]
 8008eb4:	e74a      	b.n	8008d4c <_dtoa_r+0x94c>
 8008eb6:	2a00      	cmp	r2, #0
 8008eb8:	dd07      	ble.n	8008eca <_dtoa_r+0xaca>
 8008eba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ebe:	d0ed      	beq.n	8008e9c <_dtoa_r+0xa9c>
 8008ec0:	9a04      	ldr	r2, [sp, #16]
 8008ec2:	f109 0301 	add.w	r3, r9, #1
 8008ec6:	7013      	strb	r3, [r2, #0]
 8008ec8:	e740      	b.n	8008d4c <_dtoa_r+0x94c>
 8008eca:	9b08      	ldr	r3, [sp, #32]
 8008ecc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ece:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d042      	beq.n	8008f5c <_dtoa_r+0xb5c>
 8008ed6:	4651      	mov	r1, sl
 8008ed8:	2300      	movs	r3, #0
 8008eda:	220a      	movs	r2, #10
 8008edc:	4628      	mov	r0, r5
 8008ede:	f000 f9d1 	bl	8009284 <__multadd>
 8008ee2:	45b0      	cmp	r8, r6
 8008ee4:	4682      	mov	sl, r0
 8008ee6:	f04f 0300 	mov.w	r3, #0
 8008eea:	f04f 020a 	mov.w	r2, #10
 8008eee:	4641      	mov	r1, r8
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	d107      	bne.n	8008f04 <_dtoa_r+0xb04>
 8008ef4:	f000 f9c6 	bl	8009284 <__multadd>
 8008ef8:	4680      	mov	r8, r0
 8008efa:	4606      	mov	r6, r0
 8008efc:	9b08      	ldr	r3, [sp, #32]
 8008efe:	3301      	adds	r3, #1
 8008f00:	9308      	str	r3, [sp, #32]
 8008f02:	e775      	b.n	8008df0 <_dtoa_r+0x9f0>
 8008f04:	f000 f9be 	bl	8009284 <__multadd>
 8008f08:	4631      	mov	r1, r6
 8008f0a:	4680      	mov	r8, r0
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	220a      	movs	r2, #10
 8008f10:	4628      	mov	r0, r5
 8008f12:	f000 f9b7 	bl	8009284 <__multadd>
 8008f16:	4606      	mov	r6, r0
 8008f18:	e7f0      	b.n	8008efc <_dtoa_r+0xafc>
 8008f1a:	9b08      	ldr	r3, [sp, #32]
 8008f1c:	9306      	str	r3, [sp, #24]
 8008f1e:	9f03      	ldr	r7, [sp, #12]
 8008f20:	4621      	mov	r1, r4
 8008f22:	4650      	mov	r0, sl
 8008f24:	f7ff f9e0 	bl	80082e8 <quorem>
 8008f28:	9b03      	ldr	r3, [sp, #12]
 8008f2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008f2e:	f807 9b01 	strb.w	r9, [r7], #1
 8008f32:	1afa      	subs	r2, r7, r3
 8008f34:	9b06      	ldr	r3, [sp, #24]
 8008f36:	4293      	cmp	r3, r2
 8008f38:	dd07      	ble.n	8008f4a <_dtoa_r+0xb4a>
 8008f3a:	4651      	mov	r1, sl
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	220a      	movs	r2, #10
 8008f40:	4628      	mov	r0, r5
 8008f42:	f000 f99f 	bl	8009284 <__multadd>
 8008f46:	4682      	mov	sl, r0
 8008f48:	e7ea      	b.n	8008f20 <_dtoa_r+0xb20>
 8008f4a:	9b06      	ldr	r3, [sp, #24]
 8008f4c:	f04f 0800 	mov.w	r8, #0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	bfcc      	ite	gt
 8008f54:	461f      	movgt	r7, r3
 8008f56:	2701      	movle	r7, #1
 8008f58:	9b03      	ldr	r3, [sp, #12]
 8008f5a:	441f      	add	r7, r3
 8008f5c:	4651      	mov	r1, sl
 8008f5e:	2201      	movs	r2, #1
 8008f60:	4628      	mov	r0, r5
 8008f62:	f000 fb85 	bl	8009670 <__lshift>
 8008f66:	4621      	mov	r1, r4
 8008f68:	4682      	mov	sl, r0
 8008f6a:	f000 fbed 	bl	8009748 <__mcmp>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	dc97      	bgt.n	8008ea2 <_dtoa_r+0xaa2>
 8008f72:	d102      	bne.n	8008f7a <_dtoa_r+0xb7a>
 8008f74:	f019 0f01 	tst.w	r9, #1
 8008f78:	d193      	bne.n	8008ea2 <_dtoa_r+0xaa2>
 8008f7a:	463b      	mov	r3, r7
 8008f7c:	461f      	mov	r7, r3
 8008f7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f82:	2a30      	cmp	r2, #48	; 0x30
 8008f84:	d0fa      	beq.n	8008f7c <_dtoa_r+0xb7c>
 8008f86:	e6e1      	b.n	8008d4c <_dtoa_r+0x94c>
 8008f88:	9a03      	ldr	r2, [sp, #12]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d18a      	bne.n	8008ea4 <_dtoa_r+0xaa4>
 8008f8e:	2331      	movs	r3, #49	; 0x31
 8008f90:	f10b 0b01 	add.w	fp, fp, #1
 8008f94:	e797      	b.n	8008ec6 <_dtoa_r+0xac6>
 8008f96:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <_dtoa_r+0xbc0>)
 8008f98:	f7ff ba9f 	b.w	80084da <_dtoa_r+0xda>
 8008f9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f47f aa77 	bne.w	8008492 <_dtoa_r+0x92>
 8008fa4:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <_dtoa_r+0xbc4>)
 8008fa6:	f7ff ba98 	b.w	80084da <_dtoa_r+0xda>
 8008faa:	9b06      	ldr	r3, [sp, #24]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	dcb6      	bgt.n	8008f1e <_dtoa_r+0xb1e>
 8008fb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	f73f aeb5 	bgt.w	8008d22 <_dtoa_r+0x922>
 8008fb8:	e7b1      	b.n	8008f1e <_dtoa_r+0xb1e>
 8008fba:	bf00      	nop
 8008fbc:	0800d3cf 	.word	0x0800d3cf
 8008fc0:	0800d32a 	.word	0x0800d32a
 8008fc4:	0800d353 	.word	0x0800d353

08008fc8 <_free_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4605      	mov	r5, r0
 8008fcc:	2900      	cmp	r1, #0
 8008fce:	d040      	beq.n	8009052 <_free_r+0x8a>
 8008fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fd4:	1f0c      	subs	r4, r1, #4
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	bfb8      	it	lt
 8008fda:	18e4      	addlt	r4, r4, r3
 8008fdc:	f000 f8e4 	bl	80091a8 <__malloc_lock>
 8008fe0:	4a1c      	ldr	r2, [pc, #112]	; (8009054 <_free_r+0x8c>)
 8008fe2:	6813      	ldr	r3, [r2, #0]
 8008fe4:	b933      	cbnz	r3, 8008ff4 <_free_r+0x2c>
 8008fe6:	6063      	str	r3, [r4, #4]
 8008fe8:	6014      	str	r4, [r2, #0]
 8008fea:	4628      	mov	r0, r5
 8008fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff0:	f000 b8e0 	b.w	80091b4 <__malloc_unlock>
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	d908      	bls.n	800900a <_free_r+0x42>
 8008ff8:	6820      	ldr	r0, [r4, #0]
 8008ffa:	1821      	adds	r1, r4, r0
 8008ffc:	428b      	cmp	r3, r1
 8008ffe:	bf01      	itttt	eq
 8009000:	6819      	ldreq	r1, [r3, #0]
 8009002:	685b      	ldreq	r3, [r3, #4]
 8009004:	1809      	addeq	r1, r1, r0
 8009006:	6021      	streq	r1, [r4, #0]
 8009008:	e7ed      	b.n	8008fe6 <_free_r+0x1e>
 800900a:	461a      	mov	r2, r3
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	b10b      	cbz	r3, 8009014 <_free_r+0x4c>
 8009010:	42a3      	cmp	r3, r4
 8009012:	d9fa      	bls.n	800900a <_free_r+0x42>
 8009014:	6811      	ldr	r1, [r2, #0]
 8009016:	1850      	adds	r0, r2, r1
 8009018:	42a0      	cmp	r0, r4
 800901a:	d10b      	bne.n	8009034 <_free_r+0x6c>
 800901c:	6820      	ldr	r0, [r4, #0]
 800901e:	4401      	add	r1, r0
 8009020:	1850      	adds	r0, r2, r1
 8009022:	4283      	cmp	r3, r0
 8009024:	6011      	str	r1, [r2, #0]
 8009026:	d1e0      	bne.n	8008fea <_free_r+0x22>
 8009028:	6818      	ldr	r0, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	4408      	add	r0, r1
 800902e:	6010      	str	r0, [r2, #0]
 8009030:	6053      	str	r3, [r2, #4]
 8009032:	e7da      	b.n	8008fea <_free_r+0x22>
 8009034:	d902      	bls.n	800903c <_free_r+0x74>
 8009036:	230c      	movs	r3, #12
 8009038:	602b      	str	r3, [r5, #0]
 800903a:	e7d6      	b.n	8008fea <_free_r+0x22>
 800903c:	6820      	ldr	r0, [r4, #0]
 800903e:	1821      	adds	r1, r4, r0
 8009040:	428b      	cmp	r3, r1
 8009042:	bf01      	itttt	eq
 8009044:	6819      	ldreq	r1, [r3, #0]
 8009046:	685b      	ldreq	r3, [r3, #4]
 8009048:	1809      	addeq	r1, r1, r0
 800904a:	6021      	streq	r1, [r4, #0]
 800904c:	6063      	str	r3, [r4, #4]
 800904e:	6054      	str	r4, [r2, #4]
 8009050:	e7cb      	b.n	8008fea <_free_r+0x22>
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	2000190c 	.word	0x2000190c

08009058 <malloc>:
 8009058:	4b02      	ldr	r3, [pc, #8]	; (8009064 <malloc+0xc>)
 800905a:	4601      	mov	r1, r0
 800905c:	6818      	ldr	r0, [r3, #0]
 800905e:	f000 b823 	b.w	80090a8 <_malloc_r>
 8009062:	bf00      	nop
 8009064:	20000084 	.word	0x20000084

08009068 <sbrk_aligned>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	4e0e      	ldr	r6, [pc, #56]	; (80090a4 <sbrk_aligned+0x3c>)
 800906c:	460c      	mov	r4, r1
 800906e:	6831      	ldr	r1, [r6, #0]
 8009070:	4605      	mov	r5, r0
 8009072:	b911      	cbnz	r1, 800907a <sbrk_aligned+0x12>
 8009074:	f001 ffe4 	bl	800b040 <_sbrk_r>
 8009078:	6030      	str	r0, [r6, #0]
 800907a:	4621      	mov	r1, r4
 800907c:	4628      	mov	r0, r5
 800907e:	f001 ffdf 	bl	800b040 <_sbrk_r>
 8009082:	1c43      	adds	r3, r0, #1
 8009084:	d00a      	beq.n	800909c <sbrk_aligned+0x34>
 8009086:	1cc4      	adds	r4, r0, #3
 8009088:	f024 0403 	bic.w	r4, r4, #3
 800908c:	42a0      	cmp	r0, r4
 800908e:	d007      	beq.n	80090a0 <sbrk_aligned+0x38>
 8009090:	1a21      	subs	r1, r4, r0
 8009092:	4628      	mov	r0, r5
 8009094:	f001 ffd4 	bl	800b040 <_sbrk_r>
 8009098:	3001      	adds	r0, #1
 800909a:	d101      	bne.n	80090a0 <sbrk_aligned+0x38>
 800909c:	f04f 34ff 	mov.w	r4, #4294967295
 80090a0:	4620      	mov	r0, r4
 80090a2:	bd70      	pop	{r4, r5, r6, pc}
 80090a4:	20001910 	.word	0x20001910

080090a8 <_malloc_r>:
 80090a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090ac:	1ccd      	adds	r5, r1, #3
 80090ae:	f025 0503 	bic.w	r5, r5, #3
 80090b2:	3508      	adds	r5, #8
 80090b4:	2d0c      	cmp	r5, #12
 80090b6:	bf38      	it	cc
 80090b8:	250c      	movcc	r5, #12
 80090ba:	2d00      	cmp	r5, #0
 80090bc:	4607      	mov	r7, r0
 80090be:	db01      	blt.n	80090c4 <_malloc_r+0x1c>
 80090c0:	42a9      	cmp	r1, r5
 80090c2:	d905      	bls.n	80090d0 <_malloc_r+0x28>
 80090c4:	230c      	movs	r3, #12
 80090c6:	2600      	movs	r6, #0
 80090c8:	603b      	str	r3, [r7, #0]
 80090ca:	4630      	mov	r0, r6
 80090cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80091a4 <_malloc_r+0xfc>
 80090d4:	f000 f868 	bl	80091a8 <__malloc_lock>
 80090d8:	f8d8 3000 	ldr.w	r3, [r8]
 80090dc:	461c      	mov	r4, r3
 80090de:	bb5c      	cbnz	r4, 8009138 <_malloc_r+0x90>
 80090e0:	4629      	mov	r1, r5
 80090e2:	4638      	mov	r0, r7
 80090e4:	f7ff ffc0 	bl	8009068 <sbrk_aligned>
 80090e8:	1c43      	adds	r3, r0, #1
 80090ea:	4604      	mov	r4, r0
 80090ec:	d155      	bne.n	800919a <_malloc_r+0xf2>
 80090ee:	f8d8 4000 	ldr.w	r4, [r8]
 80090f2:	4626      	mov	r6, r4
 80090f4:	2e00      	cmp	r6, #0
 80090f6:	d145      	bne.n	8009184 <_malloc_r+0xdc>
 80090f8:	2c00      	cmp	r4, #0
 80090fa:	d048      	beq.n	800918e <_malloc_r+0xe6>
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	4631      	mov	r1, r6
 8009100:	4638      	mov	r0, r7
 8009102:	eb04 0903 	add.w	r9, r4, r3
 8009106:	f001 ff9b 	bl	800b040 <_sbrk_r>
 800910a:	4581      	cmp	r9, r0
 800910c:	d13f      	bne.n	800918e <_malloc_r+0xe6>
 800910e:	6821      	ldr	r1, [r4, #0]
 8009110:	4638      	mov	r0, r7
 8009112:	1a6d      	subs	r5, r5, r1
 8009114:	4629      	mov	r1, r5
 8009116:	f7ff ffa7 	bl	8009068 <sbrk_aligned>
 800911a:	3001      	adds	r0, #1
 800911c:	d037      	beq.n	800918e <_malloc_r+0xe6>
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	442b      	add	r3, r5
 8009122:	6023      	str	r3, [r4, #0]
 8009124:	f8d8 3000 	ldr.w	r3, [r8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d038      	beq.n	800919e <_malloc_r+0xf6>
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	42a2      	cmp	r2, r4
 8009130:	d12b      	bne.n	800918a <_malloc_r+0xe2>
 8009132:	2200      	movs	r2, #0
 8009134:	605a      	str	r2, [r3, #4]
 8009136:	e00f      	b.n	8009158 <_malloc_r+0xb0>
 8009138:	6822      	ldr	r2, [r4, #0]
 800913a:	1b52      	subs	r2, r2, r5
 800913c:	d41f      	bmi.n	800917e <_malloc_r+0xd6>
 800913e:	2a0b      	cmp	r2, #11
 8009140:	d917      	bls.n	8009172 <_malloc_r+0xca>
 8009142:	1961      	adds	r1, r4, r5
 8009144:	42a3      	cmp	r3, r4
 8009146:	6025      	str	r5, [r4, #0]
 8009148:	bf18      	it	ne
 800914a:	6059      	strne	r1, [r3, #4]
 800914c:	6863      	ldr	r3, [r4, #4]
 800914e:	bf08      	it	eq
 8009150:	f8c8 1000 	streq.w	r1, [r8]
 8009154:	5162      	str	r2, [r4, r5]
 8009156:	604b      	str	r3, [r1, #4]
 8009158:	4638      	mov	r0, r7
 800915a:	f104 060b 	add.w	r6, r4, #11
 800915e:	f000 f829 	bl	80091b4 <__malloc_unlock>
 8009162:	f026 0607 	bic.w	r6, r6, #7
 8009166:	1d23      	adds	r3, r4, #4
 8009168:	1af2      	subs	r2, r6, r3
 800916a:	d0ae      	beq.n	80090ca <_malloc_r+0x22>
 800916c:	1b9b      	subs	r3, r3, r6
 800916e:	50a3      	str	r3, [r4, r2]
 8009170:	e7ab      	b.n	80090ca <_malloc_r+0x22>
 8009172:	42a3      	cmp	r3, r4
 8009174:	6862      	ldr	r2, [r4, #4]
 8009176:	d1dd      	bne.n	8009134 <_malloc_r+0x8c>
 8009178:	f8c8 2000 	str.w	r2, [r8]
 800917c:	e7ec      	b.n	8009158 <_malloc_r+0xb0>
 800917e:	4623      	mov	r3, r4
 8009180:	6864      	ldr	r4, [r4, #4]
 8009182:	e7ac      	b.n	80090de <_malloc_r+0x36>
 8009184:	4634      	mov	r4, r6
 8009186:	6876      	ldr	r6, [r6, #4]
 8009188:	e7b4      	b.n	80090f4 <_malloc_r+0x4c>
 800918a:	4613      	mov	r3, r2
 800918c:	e7cc      	b.n	8009128 <_malloc_r+0x80>
 800918e:	230c      	movs	r3, #12
 8009190:	4638      	mov	r0, r7
 8009192:	603b      	str	r3, [r7, #0]
 8009194:	f000 f80e 	bl	80091b4 <__malloc_unlock>
 8009198:	e797      	b.n	80090ca <_malloc_r+0x22>
 800919a:	6025      	str	r5, [r4, #0]
 800919c:	e7dc      	b.n	8009158 <_malloc_r+0xb0>
 800919e:	605b      	str	r3, [r3, #4]
 80091a0:	deff      	udf	#255	; 0xff
 80091a2:	bf00      	nop
 80091a4:	2000190c 	.word	0x2000190c

080091a8 <__malloc_lock>:
 80091a8:	4801      	ldr	r0, [pc, #4]	; (80091b0 <__malloc_lock+0x8>)
 80091aa:	f7ff b87a 	b.w	80082a2 <__retarget_lock_acquire_recursive>
 80091ae:	bf00      	nop
 80091b0:	20001908 	.word	0x20001908

080091b4 <__malloc_unlock>:
 80091b4:	4801      	ldr	r0, [pc, #4]	; (80091bc <__malloc_unlock+0x8>)
 80091b6:	f7ff b875 	b.w	80082a4 <__retarget_lock_release_recursive>
 80091ba:	bf00      	nop
 80091bc:	20001908 	.word	0x20001908

080091c0 <_Balloc>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	69c6      	ldr	r6, [r0, #28]
 80091c4:	4604      	mov	r4, r0
 80091c6:	460d      	mov	r5, r1
 80091c8:	b976      	cbnz	r6, 80091e8 <_Balloc+0x28>
 80091ca:	2010      	movs	r0, #16
 80091cc:	f7ff ff44 	bl	8009058 <malloc>
 80091d0:	4602      	mov	r2, r0
 80091d2:	61e0      	str	r0, [r4, #28]
 80091d4:	b920      	cbnz	r0, 80091e0 <_Balloc+0x20>
 80091d6:	216b      	movs	r1, #107	; 0x6b
 80091d8:	4b17      	ldr	r3, [pc, #92]	; (8009238 <_Balloc+0x78>)
 80091da:	4818      	ldr	r0, [pc, #96]	; (800923c <_Balloc+0x7c>)
 80091dc:	f001 ff46 	bl	800b06c <__assert_func>
 80091e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091e4:	6006      	str	r6, [r0, #0]
 80091e6:	60c6      	str	r6, [r0, #12]
 80091e8:	69e6      	ldr	r6, [r4, #28]
 80091ea:	68f3      	ldr	r3, [r6, #12]
 80091ec:	b183      	cbz	r3, 8009210 <_Balloc+0x50>
 80091ee:	69e3      	ldr	r3, [r4, #28]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091f6:	b9b8      	cbnz	r0, 8009228 <_Balloc+0x68>
 80091f8:	2101      	movs	r1, #1
 80091fa:	fa01 f605 	lsl.w	r6, r1, r5
 80091fe:	1d72      	adds	r2, r6, #5
 8009200:	4620      	mov	r0, r4
 8009202:	0092      	lsls	r2, r2, #2
 8009204:	f001 ff50 	bl	800b0a8 <_calloc_r>
 8009208:	b160      	cbz	r0, 8009224 <_Balloc+0x64>
 800920a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800920e:	e00e      	b.n	800922e <_Balloc+0x6e>
 8009210:	2221      	movs	r2, #33	; 0x21
 8009212:	2104      	movs	r1, #4
 8009214:	4620      	mov	r0, r4
 8009216:	f001 ff47 	bl	800b0a8 <_calloc_r>
 800921a:	69e3      	ldr	r3, [r4, #28]
 800921c:	60f0      	str	r0, [r6, #12]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e4      	bne.n	80091ee <_Balloc+0x2e>
 8009224:	2000      	movs	r0, #0
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	6802      	ldr	r2, [r0, #0]
 800922a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800922e:	2300      	movs	r3, #0
 8009230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009234:	e7f7      	b.n	8009226 <_Balloc+0x66>
 8009236:	bf00      	nop
 8009238:	0800d360 	.word	0x0800d360
 800923c:	0800d3e0 	.word	0x0800d3e0

08009240 <_Bfree>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	69c6      	ldr	r6, [r0, #28]
 8009244:	4605      	mov	r5, r0
 8009246:	460c      	mov	r4, r1
 8009248:	b976      	cbnz	r6, 8009268 <_Bfree+0x28>
 800924a:	2010      	movs	r0, #16
 800924c:	f7ff ff04 	bl	8009058 <malloc>
 8009250:	4602      	mov	r2, r0
 8009252:	61e8      	str	r0, [r5, #28]
 8009254:	b920      	cbnz	r0, 8009260 <_Bfree+0x20>
 8009256:	218f      	movs	r1, #143	; 0x8f
 8009258:	4b08      	ldr	r3, [pc, #32]	; (800927c <_Bfree+0x3c>)
 800925a:	4809      	ldr	r0, [pc, #36]	; (8009280 <_Bfree+0x40>)
 800925c:	f001 ff06 	bl	800b06c <__assert_func>
 8009260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009264:	6006      	str	r6, [r0, #0]
 8009266:	60c6      	str	r6, [r0, #12]
 8009268:	b13c      	cbz	r4, 800927a <_Bfree+0x3a>
 800926a:	69eb      	ldr	r3, [r5, #28]
 800926c:	6862      	ldr	r2, [r4, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009274:	6021      	str	r1, [r4, #0]
 8009276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	0800d360 	.word	0x0800d360
 8009280:	0800d3e0 	.word	0x0800d3e0

08009284 <__multadd>:
 8009284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009288:	4607      	mov	r7, r0
 800928a:	460c      	mov	r4, r1
 800928c:	461e      	mov	r6, r3
 800928e:	2000      	movs	r0, #0
 8009290:	690d      	ldr	r5, [r1, #16]
 8009292:	f101 0c14 	add.w	ip, r1, #20
 8009296:	f8dc 3000 	ldr.w	r3, [ip]
 800929a:	3001      	adds	r0, #1
 800929c:	b299      	uxth	r1, r3
 800929e:	fb02 6101 	mla	r1, r2, r1, r6
 80092a2:	0c1e      	lsrs	r6, r3, #16
 80092a4:	0c0b      	lsrs	r3, r1, #16
 80092a6:	fb02 3306 	mla	r3, r2, r6, r3
 80092aa:	b289      	uxth	r1, r1
 80092ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092b0:	4285      	cmp	r5, r0
 80092b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092b6:	f84c 1b04 	str.w	r1, [ip], #4
 80092ba:	dcec      	bgt.n	8009296 <__multadd+0x12>
 80092bc:	b30e      	cbz	r6, 8009302 <__multadd+0x7e>
 80092be:	68a3      	ldr	r3, [r4, #8]
 80092c0:	42ab      	cmp	r3, r5
 80092c2:	dc19      	bgt.n	80092f8 <__multadd+0x74>
 80092c4:	6861      	ldr	r1, [r4, #4]
 80092c6:	4638      	mov	r0, r7
 80092c8:	3101      	adds	r1, #1
 80092ca:	f7ff ff79 	bl	80091c0 <_Balloc>
 80092ce:	4680      	mov	r8, r0
 80092d0:	b928      	cbnz	r0, 80092de <__multadd+0x5a>
 80092d2:	4602      	mov	r2, r0
 80092d4:	21ba      	movs	r1, #186	; 0xba
 80092d6:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <__multadd+0x84>)
 80092d8:	480c      	ldr	r0, [pc, #48]	; (800930c <__multadd+0x88>)
 80092da:	f001 fec7 	bl	800b06c <__assert_func>
 80092de:	6922      	ldr	r2, [r4, #16]
 80092e0:	f104 010c 	add.w	r1, r4, #12
 80092e4:	3202      	adds	r2, #2
 80092e6:	0092      	lsls	r2, r2, #2
 80092e8:	300c      	adds	r0, #12
 80092ea:	f7fe ffea 	bl	80082c2 <memcpy>
 80092ee:	4621      	mov	r1, r4
 80092f0:	4638      	mov	r0, r7
 80092f2:	f7ff ffa5 	bl	8009240 <_Bfree>
 80092f6:	4644      	mov	r4, r8
 80092f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092fc:	3501      	adds	r5, #1
 80092fe:	615e      	str	r6, [r3, #20]
 8009300:	6125      	str	r5, [r4, #16]
 8009302:	4620      	mov	r0, r4
 8009304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009308:	0800d3cf 	.word	0x0800d3cf
 800930c:	0800d3e0 	.word	0x0800d3e0

08009310 <__s2b>:
 8009310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009314:	4615      	mov	r5, r2
 8009316:	2209      	movs	r2, #9
 8009318:	461f      	mov	r7, r3
 800931a:	3308      	adds	r3, #8
 800931c:	460c      	mov	r4, r1
 800931e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009322:	4606      	mov	r6, r0
 8009324:	2201      	movs	r2, #1
 8009326:	2100      	movs	r1, #0
 8009328:	429a      	cmp	r2, r3
 800932a:	db09      	blt.n	8009340 <__s2b+0x30>
 800932c:	4630      	mov	r0, r6
 800932e:	f7ff ff47 	bl	80091c0 <_Balloc>
 8009332:	b940      	cbnz	r0, 8009346 <__s2b+0x36>
 8009334:	4602      	mov	r2, r0
 8009336:	21d3      	movs	r1, #211	; 0xd3
 8009338:	4b18      	ldr	r3, [pc, #96]	; (800939c <__s2b+0x8c>)
 800933a:	4819      	ldr	r0, [pc, #100]	; (80093a0 <__s2b+0x90>)
 800933c:	f001 fe96 	bl	800b06c <__assert_func>
 8009340:	0052      	lsls	r2, r2, #1
 8009342:	3101      	adds	r1, #1
 8009344:	e7f0      	b.n	8009328 <__s2b+0x18>
 8009346:	9b08      	ldr	r3, [sp, #32]
 8009348:	2d09      	cmp	r5, #9
 800934a:	6143      	str	r3, [r0, #20]
 800934c:	f04f 0301 	mov.w	r3, #1
 8009350:	6103      	str	r3, [r0, #16]
 8009352:	dd16      	ble.n	8009382 <__s2b+0x72>
 8009354:	f104 0909 	add.w	r9, r4, #9
 8009358:	46c8      	mov	r8, r9
 800935a:	442c      	add	r4, r5
 800935c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009360:	4601      	mov	r1, r0
 8009362:	220a      	movs	r2, #10
 8009364:	4630      	mov	r0, r6
 8009366:	3b30      	subs	r3, #48	; 0x30
 8009368:	f7ff ff8c 	bl	8009284 <__multadd>
 800936c:	45a0      	cmp	r8, r4
 800936e:	d1f5      	bne.n	800935c <__s2b+0x4c>
 8009370:	f1a5 0408 	sub.w	r4, r5, #8
 8009374:	444c      	add	r4, r9
 8009376:	1b2d      	subs	r5, r5, r4
 8009378:	1963      	adds	r3, r4, r5
 800937a:	42bb      	cmp	r3, r7
 800937c:	db04      	blt.n	8009388 <__s2b+0x78>
 800937e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009382:	2509      	movs	r5, #9
 8009384:	340a      	adds	r4, #10
 8009386:	e7f6      	b.n	8009376 <__s2b+0x66>
 8009388:	f814 3b01 	ldrb.w	r3, [r4], #1
 800938c:	4601      	mov	r1, r0
 800938e:	220a      	movs	r2, #10
 8009390:	4630      	mov	r0, r6
 8009392:	3b30      	subs	r3, #48	; 0x30
 8009394:	f7ff ff76 	bl	8009284 <__multadd>
 8009398:	e7ee      	b.n	8009378 <__s2b+0x68>
 800939a:	bf00      	nop
 800939c:	0800d3cf 	.word	0x0800d3cf
 80093a0:	0800d3e0 	.word	0x0800d3e0

080093a4 <__hi0bits>:
 80093a4:	0c02      	lsrs	r2, r0, #16
 80093a6:	0412      	lsls	r2, r2, #16
 80093a8:	4603      	mov	r3, r0
 80093aa:	b9ca      	cbnz	r2, 80093e0 <__hi0bits+0x3c>
 80093ac:	0403      	lsls	r3, r0, #16
 80093ae:	2010      	movs	r0, #16
 80093b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80093b4:	bf04      	itt	eq
 80093b6:	021b      	lsleq	r3, r3, #8
 80093b8:	3008      	addeq	r0, #8
 80093ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80093be:	bf04      	itt	eq
 80093c0:	011b      	lsleq	r3, r3, #4
 80093c2:	3004      	addeq	r0, #4
 80093c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80093c8:	bf04      	itt	eq
 80093ca:	009b      	lsleq	r3, r3, #2
 80093cc:	3002      	addeq	r0, #2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	db05      	blt.n	80093de <__hi0bits+0x3a>
 80093d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80093d6:	f100 0001 	add.w	r0, r0, #1
 80093da:	bf08      	it	eq
 80093dc:	2020      	moveq	r0, #32
 80093de:	4770      	bx	lr
 80093e0:	2000      	movs	r0, #0
 80093e2:	e7e5      	b.n	80093b0 <__hi0bits+0xc>

080093e4 <__lo0bits>:
 80093e4:	6803      	ldr	r3, [r0, #0]
 80093e6:	4602      	mov	r2, r0
 80093e8:	f013 0007 	ands.w	r0, r3, #7
 80093ec:	d00b      	beq.n	8009406 <__lo0bits+0x22>
 80093ee:	07d9      	lsls	r1, r3, #31
 80093f0:	d421      	bmi.n	8009436 <__lo0bits+0x52>
 80093f2:	0798      	lsls	r0, r3, #30
 80093f4:	bf49      	itett	mi
 80093f6:	085b      	lsrmi	r3, r3, #1
 80093f8:	089b      	lsrpl	r3, r3, #2
 80093fa:	2001      	movmi	r0, #1
 80093fc:	6013      	strmi	r3, [r2, #0]
 80093fe:	bf5c      	itt	pl
 8009400:	2002      	movpl	r0, #2
 8009402:	6013      	strpl	r3, [r2, #0]
 8009404:	4770      	bx	lr
 8009406:	b299      	uxth	r1, r3
 8009408:	b909      	cbnz	r1, 800940e <__lo0bits+0x2a>
 800940a:	2010      	movs	r0, #16
 800940c:	0c1b      	lsrs	r3, r3, #16
 800940e:	b2d9      	uxtb	r1, r3
 8009410:	b909      	cbnz	r1, 8009416 <__lo0bits+0x32>
 8009412:	3008      	adds	r0, #8
 8009414:	0a1b      	lsrs	r3, r3, #8
 8009416:	0719      	lsls	r1, r3, #28
 8009418:	bf04      	itt	eq
 800941a:	091b      	lsreq	r3, r3, #4
 800941c:	3004      	addeq	r0, #4
 800941e:	0799      	lsls	r1, r3, #30
 8009420:	bf04      	itt	eq
 8009422:	089b      	lsreq	r3, r3, #2
 8009424:	3002      	addeq	r0, #2
 8009426:	07d9      	lsls	r1, r3, #31
 8009428:	d403      	bmi.n	8009432 <__lo0bits+0x4e>
 800942a:	085b      	lsrs	r3, r3, #1
 800942c:	f100 0001 	add.w	r0, r0, #1
 8009430:	d003      	beq.n	800943a <__lo0bits+0x56>
 8009432:	6013      	str	r3, [r2, #0]
 8009434:	4770      	bx	lr
 8009436:	2000      	movs	r0, #0
 8009438:	4770      	bx	lr
 800943a:	2020      	movs	r0, #32
 800943c:	4770      	bx	lr
	...

08009440 <__i2b>:
 8009440:	b510      	push	{r4, lr}
 8009442:	460c      	mov	r4, r1
 8009444:	2101      	movs	r1, #1
 8009446:	f7ff febb 	bl	80091c0 <_Balloc>
 800944a:	4602      	mov	r2, r0
 800944c:	b928      	cbnz	r0, 800945a <__i2b+0x1a>
 800944e:	f240 1145 	movw	r1, #325	; 0x145
 8009452:	4b04      	ldr	r3, [pc, #16]	; (8009464 <__i2b+0x24>)
 8009454:	4804      	ldr	r0, [pc, #16]	; (8009468 <__i2b+0x28>)
 8009456:	f001 fe09 	bl	800b06c <__assert_func>
 800945a:	2301      	movs	r3, #1
 800945c:	6144      	str	r4, [r0, #20]
 800945e:	6103      	str	r3, [r0, #16]
 8009460:	bd10      	pop	{r4, pc}
 8009462:	bf00      	nop
 8009464:	0800d3cf 	.word	0x0800d3cf
 8009468:	0800d3e0 	.word	0x0800d3e0

0800946c <__multiply>:
 800946c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009470:	4691      	mov	r9, r2
 8009472:	690a      	ldr	r2, [r1, #16]
 8009474:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009478:	460c      	mov	r4, r1
 800947a:	429a      	cmp	r2, r3
 800947c:	bfbe      	ittt	lt
 800947e:	460b      	movlt	r3, r1
 8009480:	464c      	movlt	r4, r9
 8009482:	4699      	movlt	r9, r3
 8009484:	6927      	ldr	r7, [r4, #16]
 8009486:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800948a:	68a3      	ldr	r3, [r4, #8]
 800948c:	6861      	ldr	r1, [r4, #4]
 800948e:	eb07 060a 	add.w	r6, r7, sl
 8009492:	42b3      	cmp	r3, r6
 8009494:	b085      	sub	sp, #20
 8009496:	bfb8      	it	lt
 8009498:	3101      	addlt	r1, #1
 800949a:	f7ff fe91 	bl	80091c0 <_Balloc>
 800949e:	b930      	cbnz	r0, 80094ae <__multiply+0x42>
 80094a0:	4602      	mov	r2, r0
 80094a2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80094a6:	4b43      	ldr	r3, [pc, #268]	; (80095b4 <__multiply+0x148>)
 80094a8:	4843      	ldr	r0, [pc, #268]	; (80095b8 <__multiply+0x14c>)
 80094aa:	f001 fddf 	bl	800b06c <__assert_func>
 80094ae:	f100 0514 	add.w	r5, r0, #20
 80094b2:	462b      	mov	r3, r5
 80094b4:	2200      	movs	r2, #0
 80094b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094ba:	4543      	cmp	r3, r8
 80094bc:	d321      	bcc.n	8009502 <__multiply+0x96>
 80094be:	f104 0314 	add.w	r3, r4, #20
 80094c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80094c6:	f109 0314 	add.w	r3, r9, #20
 80094ca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80094ce:	9202      	str	r2, [sp, #8]
 80094d0:	1b3a      	subs	r2, r7, r4
 80094d2:	3a15      	subs	r2, #21
 80094d4:	f022 0203 	bic.w	r2, r2, #3
 80094d8:	3204      	adds	r2, #4
 80094da:	f104 0115 	add.w	r1, r4, #21
 80094de:	428f      	cmp	r7, r1
 80094e0:	bf38      	it	cc
 80094e2:	2204      	movcc	r2, #4
 80094e4:	9201      	str	r2, [sp, #4]
 80094e6:	9a02      	ldr	r2, [sp, #8]
 80094e8:	9303      	str	r3, [sp, #12]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d80c      	bhi.n	8009508 <__multiply+0x9c>
 80094ee:	2e00      	cmp	r6, #0
 80094f0:	dd03      	ble.n	80094fa <__multiply+0x8e>
 80094f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d05a      	beq.n	80095b0 <__multiply+0x144>
 80094fa:	6106      	str	r6, [r0, #16]
 80094fc:	b005      	add	sp, #20
 80094fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009502:	f843 2b04 	str.w	r2, [r3], #4
 8009506:	e7d8      	b.n	80094ba <__multiply+0x4e>
 8009508:	f8b3 a000 	ldrh.w	sl, [r3]
 800950c:	f1ba 0f00 	cmp.w	sl, #0
 8009510:	d023      	beq.n	800955a <__multiply+0xee>
 8009512:	46a9      	mov	r9, r5
 8009514:	f04f 0c00 	mov.w	ip, #0
 8009518:	f104 0e14 	add.w	lr, r4, #20
 800951c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009520:	f8d9 1000 	ldr.w	r1, [r9]
 8009524:	fa1f fb82 	uxth.w	fp, r2
 8009528:	b289      	uxth	r1, r1
 800952a:	fb0a 110b 	mla	r1, sl, fp, r1
 800952e:	4461      	add	r1, ip
 8009530:	f8d9 c000 	ldr.w	ip, [r9]
 8009534:	0c12      	lsrs	r2, r2, #16
 8009536:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800953a:	fb0a c202 	mla	r2, sl, r2, ip
 800953e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009542:	b289      	uxth	r1, r1
 8009544:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009548:	4577      	cmp	r7, lr
 800954a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800954e:	f849 1b04 	str.w	r1, [r9], #4
 8009552:	d8e3      	bhi.n	800951c <__multiply+0xb0>
 8009554:	9a01      	ldr	r2, [sp, #4]
 8009556:	f845 c002 	str.w	ip, [r5, r2]
 800955a:	9a03      	ldr	r2, [sp, #12]
 800955c:	3304      	adds	r3, #4
 800955e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009562:	f1b9 0f00 	cmp.w	r9, #0
 8009566:	d021      	beq.n	80095ac <__multiply+0x140>
 8009568:	46ae      	mov	lr, r5
 800956a:	f04f 0a00 	mov.w	sl, #0
 800956e:	6829      	ldr	r1, [r5, #0]
 8009570:	f104 0c14 	add.w	ip, r4, #20
 8009574:	f8bc b000 	ldrh.w	fp, [ip]
 8009578:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800957c:	b289      	uxth	r1, r1
 800957e:	fb09 220b 	mla	r2, r9, fp, r2
 8009582:	4452      	add	r2, sl
 8009584:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009588:	f84e 1b04 	str.w	r1, [lr], #4
 800958c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009590:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009594:	f8be 1000 	ldrh.w	r1, [lr]
 8009598:	4567      	cmp	r7, ip
 800959a:	fb09 110a 	mla	r1, r9, sl, r1
 800959e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80095a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80095a6:	d8e5      	bhi.n	8009574 <__multiply+0x108>
 80095a8:	9a01      	ldr	r2, [sp, #4]
 80095aa:	50a9      	str	r1, [r5, r2]
 80095ac:	3504      	adds	r5, #4
 80095ae:	e79a      	b.n	80094e6 <__multiply+0x7a>
 80095b0:	3e01      	subs	r6, #1
 80095b2:	e79c      	b.n	80094ee <__multiply+0x82>
 80095b4:	0800d3cf 	.word	0x0800d3cf
 80095b8:	0800d3e0 	.word	0x0800d3e0

080095bc <__pow5mult>:
 80095bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c0:	4615      	mov	r5, r2
 80095c2:	f012 0203 	ands.w	r2, r2, #3
 80095c6:	4606      	mov	r6, r0
 80095c8:	460f      	mov	r7, r1
 80095ca:	d007      	beq.n	80095dc <__pow5mult+0x20>
 80095cc:	4c25      	ldr	r4, [pc, #148]	; (8009664 <__pow5mult+0xa8>)
 80095ce:	3a01      	subs	r2, #1
 80095d0:	2300      	movs	r3, #0
 80095d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095d6:	f7ff fe55 	bl	8009284 <__multadd>
 80095da:	4607      	mov	r7, r0
 80095dc:	10ad      	asrs	r5, r5, #2
 80095de:	d03d      	beq.n	800965c <__pow5mult+0xa0>
 80095e0:	69f4      	ldr	r4, [r6, #28]
 80095e2:	b97c      	cbnz	r4, 8009604 <__pow5mult+0x48>
 80095e4:	2010      	movs	r0, #16
 80095e6:	f7ff fd37 	bl	8009058 <malloc>
 80095ea:	4602      	mov	r2, r0
 80095ec:	61f0      	str	r0, [r6, #28]
 80095ee:	b928      	cbnz	r0, 80095fc <__pow5mult+0x40>
 80095f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80095f4:	4b1c      	ldr	r3, [pc, #112]	; (8009668 <__pow5mult+0xac>)
 80095f6:	481d      	ldr	r0, [pc, #116]	; (800966c <__pow5mult+0xb0>)
 80095f8:	f001 fd38 	bl	800b06c <__assert_func>
 80095fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009600:	6004      	str	r4, [r0, #0]
 8009602:	60c4      	str	r4, [r0, #12]
 8009604:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009608:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800960c:	b94c      	cbnz	r4, 8009622 <__pow5mult+0x66>
 800960e:	f240 2171 	movw	r1, #625	; 0x271
 8009612:	4630      	mov	r0, r6
 8009614:	f7ff ff14 	bl	8009440 <__i2b>
 8009618:	2300      	movs	r3, #0
 800961a:	4604      	mov	r4, r0
 800961c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009620:	6003      	str	r3, [r0, #0]
 8009622:	f04f 0900 	mov.w	r9, #0
 8009626:	07eb      	lsls	r3, r5, #31
 8009628:	d50a      	bpl.n	8009640 <__pow5mult+0x84>
 800962a:	4639      	mov	r1, r7
 800962c:	4622      	mov	r2, r4
 800962e:	4630      	mov	r0, r6
 8009630:	f7ff ff1c 	bl	800946c <__multiply>
 8009634:	4680      	mov	r8, r0
 8009636:	4639      	mov	r1, r7
 8009638:	4630      	mov	r0, r6
 800963a:	f7ff fe01 	bl	8009240 <_Bfree>
 800963e:	4647      	mov	r7, r8
 8009640:	106d      	asrs	r5, r5, #1
 8009642:	d00b      	beq.n	800965c <__pow5mult+0xa0>
 8009644:	6820      	ldr	r0, [r4, #0]
 8009646:	b938      	cbnz	r0, 8009658 <__pow5mult+0x9c>
 8009648:	4622      	mov	r2, r4
 800964a:	4621      	mov	r1, r4
 800964c:	4630      	mov	r0, r6
 800964e:	f7ff ff0d 	bl	800946c <__multiply>
 8009652:	6020      	str	r0, [r4, #0]
 8009654:	f8c0 9000 	str.w	r9, [r0]
 8009658:	4604      	mov	r4, r0
 800965a:	e7e4      	b.n	8009626 <__pow5mult+0x6a>
 800965c:	4638      	mov	r0, r7
 800965e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009662:	bf00      	nop
 8009664:	0800d530 	.word	0x0800d530
 8009668:	0800d360 	.word	0x0800d360
 800966c:	0800d3e0 	.word	0x0800d3e0

08009670 <__lshift>:
 8009670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009674:	460c      	mov	r4, r1
 8009676:	4607      	mov	r7, r0
 8009678:	4691      	mov	r9, r2
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	6849      	ldr	r1, [r1, #4]
 800967e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009682:	68a3      	ldr	r3, [r4, #8]
 8009684:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009688:	f108 0601 	add.w	r6, r8, #1
 800968c:	42b3      	cmp	r3, r6
 800968e:	db0b      	blt.n	80096a8 <__lshift+0x38>
 8009690:	4638      	mov	r0, r7
 8009692:	f7ff fd95 	bl	80091c0 <_Balloc>
 8009696:	4605      	mov	r5, r0
 8009698:	b948      	cbnz	r0, 80096ae <__lshift+0x3e>
 800969a:	4602      	mov	r2, r0
 800969c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80096a0:	4b27      	ldr	r3, [pc, #156]	; (8009740 <__lshift+0xd0>)
 80096a2:	4828      	ldr	r0, [pc, #160]	; (8009744 <__lshift+0xd4>)
 80096a4:	f001 fce2 	bl	800b06c <__assert_func>
 80096a8:	3101      	adds	r1, #1
 80096aa:	005b      	lsls	r3, r3, #1
 80096ac:	e7ee      	b.n	800968c <__lshift+0x1c>
 80096ae:	2300      	movs	r3, #0
 80096b0:	f100 0114 	add.w	r1, r0, #20
 80096b4:	f100 0210 	add.w	r2, r0, #16
 80096b8:	4618      	mov	r0, r3
 80096ba:	4553      	cmp	r3, sl
 80096bc:	db33      	blt.n	8009726 <__lshift+0xb6>
 80096be:	6920      	ldr	r0, [r4, #16]
 80096c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096c4:	f104 0314 	add.w	r3, r4, #20
 80096c8:	f019 091f 	ands.w	r9, r9, #31
 80096cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096d4:	d02b      	beq.n	800972e <__lshift+0xbe>
 80096d6:	468a      	mov	sl, r1
 80096d8:	2200      	movs	r2, #0
 80096da:	f1c9 0e20 	rsb	lr, r9, #32
 80096de:	6818      	ldr	r0, [r3, #0]
 80096e0:	fa00 f009 	lsl.w	r0, r0, r9
 80096e4:	4310      	orrs	r0, r2
 80096e6:	f84a 0b04 	str.w	r0, [sl], #4
 80096ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ee:	459c      	cmp	ip, r3
 80096f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80096f4:	d8f3      	bhi.n	80096de <__lshift+0x6e>
 80096f6:	ebac 0304 	sub.w	r3, ip, r4
 80096fa:	3b15      	subs	r3, #21
 80096fc:	f023 0303 	bic.w	r3, r3, #3
 8009700:	3304      	adds	r3, #4
 8009702:	f104 0015 	add.w	r0, r4, #21
 8009706:	4584      	cmp	ip, r0
 8009708:	bf38      	it	cc
 800970a:	2304      	movcc	r3, #4
 800970c:	50ca      	str	r2, [r1, r3]
 800970e:	b10a      	cbz	r2, 8009714 <__lshift+0xa4>
 8009710:	f108 0602 	add.w	r6, r8, #2
 8009714:	3e01      	subs	r6, #1
 8009716:	4638      	mov	r0, r7
 8009718:	4621      	mov	r1, r4
 800971a:	612e      	str	r6, [r5, #16]
 800971c:	f7ff fd90 	bl	8009240 <_Bfree>
 8009720:	4628      	mov	r0, r5
 8009722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009726:	f842 0f04 	str.w	r0, [r2, #4]!
 800972a:	3301      	adds	r3, #1
 800972c:	e7c5      	b.n	80096ba <__lshift+0x4a>
 800972e:	3904      	subs	r1, #4
 8009730:	f853 2b04 	ldr.w	r2, [r3], #4
 8009734:	459c      	cmp	ip, r3
 8009736:	f841 2f04 	str.w	r2, [r1, #4]!
 800973a:	d8f9      	bhi.n	8009730 <__lshift+0xc0>
 800973c:	e7ea      	b.n	8009714 <__lshift+0xa4>
 800973e:	bf00      	nop
 8009740:	0800d3cf 	.word	0x0800d3cf
 8009744:	0800d3e0 	.word	0x0800d3e0

08009748 <__mcmp>:
 8009748:	4603      	mov	r3, r0
 800974a:	690a      	ldr	r2, [r1, #16]
 800974c:	6900      	ldr	r0, [r0, #16]
 800974e:	b530      	push	{r4, r5, lr}
 8009750:	1a80      	subs	r0, r0, r2
 8009752:	d10d      	bne.n	8009770 <__mcmp+0x28>
 8009754:	3314      	adds	r3, #20
 8009756:	3114      	adds	r1, #20
 8009758:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800975c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009760:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009764:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009768:	4295      	cmp	r5, r2
 800976a:	d002      	beq.n	8009772 <__mcmp+0x2a>
 800976c:	d304      	bcc.n	8009778 <__mcmp+0x30>
 800976e:	2001      	movs	r0, #1
 8009770:	bd30      	pop	{r4, r5, pc}
 8009772:	42a3      	cmp	r3, r4
 8009774:	d3f4      	bcc.n	8009760 <__mcmp+0x18>
 8009776:	e7fb      	b.n	8009770 <__mcmp+0x28>
 8009778:	f04f 30ff 	mov.w	r0, #4294967295
 800977c:	e7f8      	b.n	8009770 <__mcmp+0x28>
	...

08009780 <__mdiff>:
 8009780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	460d      	mov	r5, r1
 8009786:	4607      	mov	r7, r0
 8009788:	4611      	mov	r1, r2
 800978a:	4628      	mov	r0, r5
 800978c:	4614      	mov	r4, r2
 800978e:	f7ff ffdb 	bl	8009748 <__mcmp>
 8009792:	1e06      	subs	r6, r0, #0
 8009794:	d111      	bne.n	80097ba <__mdiff+0x3a>
 8009796:	4631      	mov	r1, r6
 8009798:	4638      	mov	r0, r7
 800979a:	f7ff fd11 	bl	80091c0 <_Balloc>
 800979e:	4602      	mov	r2, r0
 80097a0:	b928      	cbnz	r0, 80097ae <__mdiff+0x2e>
 80097a2:	f240 2137 	movw	r1, #567	; 0x237
 80097a6:	4b3a      	ldr	r3, [pc, #232]	; (8009890 <__mdiff+0x110>)
 80097a8:	483a      	ldr	r0, [pc, #232]	; (8009894 <__mdiff+0x114>)
 80097aa:	f001 fc5f 	bl	800b06c <__assert_func>
 80097ae:	2301      	movs	r3, #1
 80097b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80097b4:	4610      	mov	r0, r2
 80097b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ba:	bfa4      	itt	ge
 80097bc:	4623      	movge	r3, r4
 80097be:	462c      	movge	r4, r5
 80097c0:	4638      	mov	r0, r7
 80097c2:	6861      	ldr	r1, [r4, #4]
 80097c4:	bfa6      	itte	ge
 80097c6:	461d      	movge	r5, r3
 80097c8:	2600      	movge	r6, #0
 80097ca:	2601      	movlt	r6, #1
 80097cc:	f7ff fcf8 	bl	80091c0 <_Balloc>
 80097d0:	4602      	mov	r2, r0
 80097d2:	b918      	cbnz	r0, 80097dc <__mdiff+0x5c>
 80097d4:	f240 2145 	movw	r1, #581	; 0x245
 80097d8:	4b2d      	ldr	r3, [pc, #180]	; (8009890 <__mdiff+0x110>)
 80097da:	e7e5      	b.n	80097a8 <__mdiff+0x28>
 80097dc:	f102 0814 	add.w	r8, r2, #20
 80097e0:	46c2      	mov	sl, r8
 80097e2:	f04f 0c00 	mov.w	ip, #0
 80097e6:	6927      	ldr	r7, [r4, #16]
 80097e8:	60c6      	str	r6, [r0, #12]
 80097ea:	692e      	ldr	r6, [r5, #16]
 80097ec:	f104 0014 	add.w	r0, r4, #20
 80097f0:	f105 0914 	add.w	r9, r5, #20
 80097f4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80097f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80097fc:	3410      	adds	r4, #16
 80097fe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009802:	f859 3b04 	ldr.w	r3, [r9], #4
 8009806:	fa1f f18b 	uxth.w	r1, fp
 800980a:	4461      	add	r1, ip
 800980c:	fa1f fc83 	uxth.w	ip, r3
 8009810:	0c1b      	lsrs	r3, r3, #16
 8009812:	eba1 010c 	sub.w	r1, r1, ip
 8009816:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800981a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800981e:	b289      	uxth	r1, r1
 8009820:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009824:	454e      	cmp	r6, r9
 8009826:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800982a:	f84a 1b04 	str.w	r1, [sl], #4
 800982e:	d8e6      	bhi.n	80097fe <__mdiff+0x7e>
 8009830:	1b73      	subs	r3, r6, r5
 8009832:	3b15      	subs	r3, #21
 8009834:	f023 0303 	bic.w	r3, r3, #3
 8009838:	3515      	adds	r5, #21
 800983a:	3304      	adds	r3, #4
 800983c:	42ae      	cmp	r6, r5
 800983e:	bf38      	it	cc
 8009840:	2304      	movcc	r3, #4
 8009842:	4418      	add	r0, r3
 8009844:	4443      	add	r3, r8
 8009846:	461e      	mov	r6, r3
 8009848:	4605      	mov	r5, r0
 800984a:	4575      	cmp	r5, lr
 800984c:	d30e      	bcc.n	800986c <__mdiff+0xec>
 800984e:	f10e 0103 	add.w	r1, lr, #3
 8009852:	1a09      	subs	r1, r1, r0
 8009854:	f021 0103 	bic.w	r1, r1, #3
 8009858:	3803      	subs	r0, #3
 800985a:	4586      	cmp	lr, r0
 800985c:	bf38      	it	cc
 800985e:	2100      	movcc	r1, #0
 8009860:	440b      	add	r3, r1
 8009862:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009866:	b189      	cbz	r1, 800988c <__mdiff+0x10c>
 8009868:	6117      	str	r7, [r2, #16]
 800986a:	e7a3      	b.n	80097b4 <__mdiff+0x34>
 800986c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009870:	fa1f f188 	uxth.w	r1, r8
 8009874:	4461      	add	r1, ip
 8009876:	140c      	asrs	r4, r1, #16
 8009878:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800987c:	b289      	uxth	r1, r1
 800987e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009882:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009886:	f846 1b04 	str.w	r1, [r6], #4
 800988a:	e7de      	b.n	800984a <__mdiff+0xca>
 800988c:	3f01      	subs	r7, #1
 800988e:	e7e8      	b.n	8009862 <__mdiff+0xe2>
 8009890:	0800d3cf 	.word	0x0800d3cf
 8009894:	0800d3e0 	.word	0x0800d3e0

08009898 <__ulp>:
 8009898:	4b0e      	ldr	r3, [pc, #56]	; (80098d4 <__ulp+0x3c>)
 800989a:	400b      	ands	r3, r1
 800989c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	dc08      	bgt.n	80098b6 <__ulp+0x1e>
 80098a4:	425b      	negs	r3, r3
 80098a6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80098aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80098ae:	da04      	bge.n	80098ba <__ulp+0x22>
 80098b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80098b4:	4113      	asrs	r3, r2
 80098b6:	2200      	movs	r2, #0
 80098b8:	e008      	b.n	80098cc <__ulp+0x34>
 80098ba:	f1a2 0314 	sub.w	r3, r2, #20
 80098be:	2b1e      	cmp	r3, #30
 80098c0:	bfd6      	itet	le
 80098c2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80098c6:	2201      	movgt	r2, #1
 80098c8:	40da      	lsrle	r2, r3
 80098ca:	2300      	movs	r3, #0
 80098cc:	4619      	mov	r1, r3
 80098ce:	4610      	mov	r0, r2
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	7ff00000 	.word	0x7ff00000

080098d8 <__b2d>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	6905      	ldr	r5, [r0, #16]
 80098dc:	f100 0714 	add.w	r7, r0, #20
 80098e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80098e4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80098e8:	1f2e      	subs	r6, r5, #4
 80098ea:	4620      	mov	r0, r4
 80098ec:	f7ff fd5a 	bl	80093a4 <__hi0bits>
 80098f0:	f1c0 0220 	rsb	r2, r0, #32
 80098f4:	280a      	cmp	r0, #10
 80098f6:	4603      	mov	r3, r0
 80098f8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8009964 <__b2d+0x8c>
 80098fc:	600a      	str	r2, [r1, #0]
 80098fe:	dc12      	bgt.n	8009926 <__b2d+0x4e>
 8009900:	f1c0 0e0b 	rsb	lr, r0, #11
 8009904:	fa24 f20e 	lsr.w	r2, r4, lr
 8009908:	42b7      	cmp	r7, r6
 800990a:	ea42 010c 	orr.w	r1, r2, ip
 800990e:	bf2c      	ite	cs
 8009910:	2200      	movcs	r2, #0
 8009912:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009916:	3315      	adds	r3, #21
 8009918:	fa04 f303 	lsl.w	r3, r4, r3
 800991c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009920:	431a      	orrs	r2, r3
 8009922:	4610      	mov	r0, r2
 8009924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009926:	42b7      	cmp	r7, r6
 8009928:	bf2e      	itee	cs
 800992a:	2200      	movcs	r2, #0
 800992c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009930:	f1a5 0608 	subcc.w	r6, r5, #8
 8009934:	3b0b      	subs	r3, #11
 8009936:	d012      	beq.n	800995e <__b2d+0x86>
 8009938:	f1c3 0520 	rsb	r5, r3, #32
 800993c:	fa22 f105 	lsr.w	r1, r2, r5
 8009940:	409c      	lsls	r4, r3
 8009942:	430c      	orrs	r4, r1
 8009944:	42be      	cmp	r6, r7
 8009946:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800994a:	bf94      	ite	ls
 800994c:	2400      	movls	r4, #0
 800994e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009952:	409a      	lsls	r2, r3
 8009954:	40ec      	lsrs	r4, r5
 8009956:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800995a:	4322      	orrs	r2, r4
 800995c:	e7e1      	b.n	8009922 <__b2d+0x4a>
 800995e:	ea44 010c 	orr.w	r1, r4, ip
 8009962:	e7de      	b.n	8009922 <__b2d+0x4a>
 8009964:	3ff00000 	.word	0x3ff00000

08009968 <__d2b>:
 8009968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800996a:	2101      	movs	r1, #1
 800996c:	4617      	mov	r7, r2
 800996e:	461c      	mov	r4, r3
 8009970:	9e08      	ldr	r6, [sp, #32]
 8009972:	f7ff fc25 	bl	80091c0 <_Balloc>
 8009976:	4605      	mov	r5, r0
 8009978:	b930      	cbnz	r0, 8009988 <__d2b+0x20>
 800997a:	4602      	mov	r2, r0
 800997c:	f240 310f 	movw	r1, #783	; 0x30f
 8009980:	4b22      	ldr	r3, [pc, #136]	; (8009a0c <__d2b+0xa4>)
 8009982:	4823      	ldr	r0, [pc, #140]	; (8009a10 <__d2b+0xa8>)
 8009984:	f001 fb72 	bl	800b06c <__assert_func>
 8009988:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800998c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009990:	bb24      	cbnz	r4, 80099dc <__d2b+0x74>
 8009992:	2f00      	cmp	r7, #0
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	d026      	beq.n	80099e6 <__d2b+0x7e>
 8009998:	4668      	mov	r0, sp
 800999a:	9700      	str	r7, [sp, #0]
 800999c:	f7ff fd22 	bl	80093e4 <__lo0bits>
 80099a0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80099a4:	b1e8      	cbz	r0, 80099e2 <__d2b+0x7a>
 80099a6:	f1c0 0320 	rsb	r3, r0, #32
 80099aa:	fa02 f303 	lsl.w	r3, r2, r3
 80099ae:	430b      	orrs	r3, r1
 80099b0:	40c2      	lsrs	r2, r0
 80099b2:	616b      	str	r3, [r5, #20]
 80099b4:	9201      	str	r2, [sp, #4]
 80099b6:	9b01      	ldr	r3, [sp, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bf14      	ite	ne
 80099bc:	2102      	movne	r1, #2
 80099be:	2101      	moveq	r1, #1
 80099c0:	61ab      	str	r3, [r5, #24]
 80099c2:	6129      	str	r1, [r5, #16]
 80099c4:	b1bc      	cbz	r4, 80099f6 <__d2b+0x8e>
 80099c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80099ca:	4404      	add	r4, r0
 80099cc:	6034      	str	r4, [r6, #0]
 80099ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d4:	6018      	str	r0, [r3, #0]
 80099d6:	4628      	mov	r0, r5
 80099d8:	b003      	add	sp, #12
 80099da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099e0:	e7d7      	b.n	8009992 <__d2b+0x2a>
 80099e2:	6169      	str	r1, [r5, #20]
 80099e4:	e7e7      	b.n	80099b6 <__d2b+0x4e>
 80099e6:	a801      	add	r0, sp, #4
 80099e8:	f7ff fcfc 	bl	80093e4 <__lo0bits>
 80099ec:	9b01      	ldr	r3, [sp, #4]
 80099ee:	2101      	movs	r1, #1
 80099f0:	616b      	str	r3, [r5, #20]
 80099f2:	3020      	adds	r0, #32
 80099f4:	e7e5      	b.n	80099c2 <__d2b+0x5a>
 80099f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099fa:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80099fe:	6030      	str	r0, [r6, #0]
 8009a00:	6918      	ldr	r0, [r3, #16]
 8009a02:	f7ff fccf 	bl	80093a4 <__hi0bits>
 8009a06:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009a0a:	e7e2      	b.n	80099d2 <__d2b+0x6a>
 8009a0c:	0800d3cf 	.word	0x0800d3cf
 8009a10:	0800d3e0 	.word	0x0800d3e0

08009a14 <__ratio>:
 8009a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a18:	4688      	mov	r8, r1
 8009a1a:	4669      	mov	r1, sp
 8009a1c:	4681      	mov	r9, r0
 8009a1e:	f7ff ff5b 	bl	80098d8 <__b2d>
 8009a22:	460f      	mov	r7, r1
 8009a24:	4604      	mov	r4, r0
 8009a26:	460d      	mov	r5, r1
 8009a28:	4640      	mov	r0, r8
 8009a2a:	a901      	add	r1, sp, #4
 8009a2c:	f7ff ff54 	bl	80098d8 <__b2d>
 8009a30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a34:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009a38:	468b      	mov	fp, r1
 8009a3a:	eba3 0c02 	sub.w	ip, r3, r2
 8009a3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009a42:	1a9b      	subs	r3, r3, r2
 8009a44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	bfd5      	itete	le
 8009a4c:	460a      	movle	r2, r1
 8009a4e:	462a      	movgt	r2, r5
 8009a50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a54:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009a58:	bfd8      	it	le
 8009a5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009a5e:	465b      	mov	r3, fp
 8009a60:	4602      	mov	r2, r0
 8009a62:	4639      	mov	r1, r7
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7f6 fe61 	bl	800072c <__aeabi_ddiv>
 8009a6a:	b003      	add	sp, #12
 8009a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a70 <__copybits>:
 8009a70:	3901      	subs	r1, #1
 8009a72:	b570      	push	{r4, r5, r6, lr}
 8009a74:	1149      	asrs	r1, r1, #5
 8009a76:	6914      	ldr	r4, [r2, #16]
 8009a78:	3101      	adds	r1, #1
 8009a7a:	f102 0314 	add.w	r3, r2, #20
 8009a7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009a86:	1f05      	subs	r5, r0, #4
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	d30c      	bcc.n	8009aa6 <__copybits+0x36>
 8009a8c:	1aa3      	subs	r3, r4, r2
 8009a8e:	3b11      	subs	r3, #17
 8009a90:	f023 0303 	bic.w	r3, r3, #3
 8009a94:	3211      	adds	r2, #17
 8009a96:	42a2      	cmp	r2, r4
 8009a98:	bf88      	it	hi
 8009a9a:	2300      	movhi	r3, #0
 8009a9c:	4418      	add	r0, r3
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	4288      	cmp	r0, r1
 8009aa2:	d305      	bcc.n	8009ab0 <__copybits+0x40>
 8009aa4:	bd70      	pop	{r4, r5, r6, pc}
 8009aa6:	f853 6b04 	ldr.w	r6, [r3], #4
 8009aaa:	f845 6f04 	str.w	r6, [r5, #4]!
 8009aae:	e7eb      	b.n	8009a88 <__copybits+0x18>
 8009ab0:	f840 3b04 	str.w	r3, [r0], #4
 8009ab4:	e7f4      	b.n	8009aa0 <__copybits+0x30>

08009ab6 <__any_on>:
 8009ab6:	f100 0214 	add.w	r2, r0, #20
 8009aba:	6900      	ldr	r0, [r0, #16]
 8009abc:	114b      	asrs	r3, r1, #5
 8009abe:	4298      	cmp	r0, r3
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	db11      	blt.n	8009ae8 <__any_on+0x32>
 8009ac4:	dd0a      	ble.n	8009adc <__any_on+0x26>
 8009ac6:	f011 011f 	ands.w	r1, r1, #31
 8009aca:	d007      	beq.n	8009adc <__any_on+0x26>
 8009acc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ad0:	fa24 f001 	lsr.w	r0, r4, r1
 8009ad4:	fa00 f101 	lsl.w	r1, r0, r1
 8009ad8:	428c      	cmp	r4, r1
 8009ada:	d10b      	bne.n	8009af4 <__any_on+0x3e>
 8009adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d803      	bhi.n	8009aec <__any_on+0x36>
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	bd10      	pop	{r4, pc}
 8009ae8:	4603      	mov	r3, r0
 8009aea:	e7f7      	b.n	8009adc <__any_on+0x26>
 8009aec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009af0:	2900      	cmp	r1, #0
 8009af2:	d0f5      	beq.n	8009ae0 <__any_on+0x2a>
 8009af4:	2001      	movs	r0, #1
 8009af6:	e7f6      	b.n	8009ae6 <__any_on+0x30>

08009af8 <sulp>:
 8009af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009afc:	460f      	mov	r7, r1
 8009afe:	4690      	mov	r8, r2
 8009b00:	f7ff feca 	bl	8009898 <__ulp>
 8009b04:	4604      	mov	r4, r0
 8009b06:	460d      	mov	r5, r1
 8009b08:	f1b8 0f00 	cmp.w	r8, #0
 8009b0c:	d011      	beq.n	8009b32 <sulp+0x3a>
 8009b0e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009b12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	dd0b      	ble.n	8009b32 <sulp+0x3a>
 8009b1a:	2400      	movs	r4, #0
 8009b1c:	051b      	lsls	r3, r3, #20
 8009b1e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009b22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009b26:	4622      	mov	r2, r4
 8009b28:	462b      	mov	r3, r5
 8009b2a:	f7f6 fcd5 	bl	80004d8 <__aeabi_dmul>
 8009b2e:	4604      	mov	r4, r0
 8009b30:	460d      	mov	r5, r1
 8009b32:	4620      	mov	r0, r4
 8009b34:	4629      	mov	r1, r5
 8009b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b3a:	0000      	movs	r0, r0
 8009b3c:	0000      	movs	r0, r0
	...

08009b40 <_strtod_l>:
 8009b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	b09f      	sub	sp, #124	; 0x7c
 8009b46:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b48:	2200      	movs	r2, #0
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	921a      	str	r2, [sp, #104]	; 0x68
 8009b4e:	460d      	mov	r5, r1
 8009b50:	f04f 0800 	mov.w	r8, #0
 8009b54:	f04f 0900 	mov.w	r9, #0
 8009b58:	460a      	mov	r2, r1
 8009b5a:	9219      	str	r2, [sp, #100]	; 0x64
 8009b5c:	7811      	ldrb	r1, [r2, #0]
 8009b5e:	292b      	cmp	r1, #43	; 0x2b
 8009b60:	d04a      	beq.n	8009bf8 <_strtod_l+0xb8>
 8009b62:	d838      	bhi.n	8009bd6 <_strtod_l+0x96>
 8009b64:	290d      	cmp	r1, #13
 8009b66:	d832      	bhi.n	8009bce <_strtod_l+0x8e>
 8009b68:	2908      	cmp	r1, #8
 8009b6a:	d832      	bhi.n	8009bd2 <_strtod_l+0x92>
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	d03b      	beq.n	8009be8 <_strtod_l+0xa8>
 8009b70:	2200      	movs	r2, #0
 8009b72:	920e      	str	r2, [sp, #56]	; 0x38
 8009b74:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009b76:	7832      	ldrb	r2, [r6, #0]
 8009b78:	2a30      	cmp	r2, #48	; 0x30
 8009b7a:	f040 80b2 	bne.w	8009ce2 <_strtod_l+0x1a2>
 8009b7e:	7872      	ldrb	r2, [r6, #1]
 8009b80:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009b84:	2a58      	cmp	r2, #88	; 0x58
 8009b86:	d16e      	bne.n	8009c66 <_strtod_l+0x126>
 8009b88:	9302      	str	r3, [sp, #8]
 8009b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	9301      	str	r3, [sp, #4]
 8009b90:	ab1a      	add	r3, sp, #104	; 0x68
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	4a8c      	ldr	r2, [pc, #560]	; (8009dc8 <_strtod_l+0x288>)
 8009b96:	ab1b      	add	r3, sp, #108	; 0x6c
 8009b98:	a919      	add	r1, sp, #100	; 0x64
 8009b9a:	f001 fb01 	bl	800b1a0 <__gethex>
 8009b9e:	f010 070f 	ands.w	r7, r0, #15
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	d005      	beq.n	8009bb2 <_strtod_l+0x72>
 8009ba6:	2f06      	cmp	r7, #6
 8009ba8:	d128      	bne.n	8009bfc <_strtod_l+0xbc>
 8009baa:	2300      	movs	r3, #0
 8009bac:	3601      	adds	r6, #1
 8009bae:	9619      	str	r6, [sp, #100]	; 0x64
 8009bb0:	930e      	str	r3, [sp, #56]	; 0x38
 8009bb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f040 85a0 	bne.w	800a6fa <_strtod_l+0xbba>
 8009bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bbc:	b1cb      	cbz	r3, 8009bf2 <_strtod_l+0xb2>
 8009bbe:	4642      	mov	r2, r8
 8009bc0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	b01f      	add	sp, #124	; 0x7c
 8009bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bce:	2920      	cmp	r1, #32
 8009bd0:	d1ce      	bne.n	8009b70 <_strtod_l+0x30>
 8009bd2:	3201      	adds	r2, #1
 8009bd4:	e7c1      	b.n	8009b5a <_strtod_l+0x1a>
 8009bd6:	292d      	cmp	r1, #45	; 0x2d
 8009bd8:	d1ca      	bne.n	8009b70 <_strtod_l+0x30>
 8009bda:	2101      	movs	r1, #1
 8009bdc:	910e      	str	r1, [sp, #56]	; 0x38
 8009bde:	1c51      	adds	r1, r2, #1
 8009be0:	9119      	str	r1, [sp, #100]	; 0x64
 8009be2:	7852      	ldrb	r2, [r2, #1]
 8009be4:	2a00      	cmp	r2, #0
 8009be6:	d1c5      	bne.n	8009b74 <_strtod_l+0x34>
 8009be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bea:	9519      	str	r5, [sp, #100]	; 0x64
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f040 8582 	bne.w	800a6f6 <_strtod_l+0xbb6>
 8009bf2:	4642      	mov	r2, r8
 8009bf4:	464b      	mov	r3, r9
 8009bf6:	e7e5      	b.n	8009bc4 <_strtod_l+0x84>
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	e7ef      	b.n	8009bdc <_strtod_l+0x9c>
 8009bfc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009bfe:	b13a      	cbz	r2, 8009c10 <_strtod_l+0xd0>
 8009c00:	2135      	movs	r1, #53	; 0x35
 8009c02:	a81c      	add	r0, sp, #112	; 0x70
 8009c04:	f7ff ff34 	bl	8009a70 <__copybits>
 8009c08:	4620      	mov	r0, r4
 8009c0a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c0c:	f7ff fb18 	bl	8009240 <_Bfree>
 8009c10:	3f01      	subs	r7, #1
 8009c12:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c14:	2f04      	cmp	r7, #4
 8009c16:	d806      	bhi.n	8009c26 <_strtod_l+0xe6>
 8009c18:	e8df f007 	tbb	[pc, r7]
 8009c1c:	201d0314 	.word	0x201d0314
 8009c20:	14          	.byte	0x14
 8009c21:	00          	.byte	0x00
 8009c22:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009c26:	05e9      	lsls	r1, r5, #23
 8009c28:	bf48      	it	mi
 8009c2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009c2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c32:	0d1b      	lsrs	r3, r3, #20
 8009c34:	051b      	lsls	r3, r3, #20
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1bb      	bne.n	8009bb2 <_strtod_l+0x72>
 8009c3a:	f7fe fb07 	bl	800824c <__errno>
 8009c3e:	2322      	movs	r3, #34	; 0x22
 8009c40:	6003      	str	r3, [r0, #0]
 8009c42:	e7b6      	b.n	8009bb2 <_strtod_l+0x72>
 8009c44:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c48:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009c4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009c54:	e7e7      	b.n	8009c26 <_strtod_l+0xe6>
 8009c56:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009dcc <_strtod_l+0x28c>
 8009c5a:	e7e4      	b.n	8009c26 <_strtod_l+0xe6>
 8009c5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009c60:	f04f 38ff 	mov.w	r8, #4294967295
 8009c64:	e7df      	b.n	8009c26 <_strtod_l+0xe6>
 8009c66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c68:	1c5a      	adds	r2, r3, #1
 8009c6a:	9219      	str	r2, [sp, #100]	; 0x64
 8009c6c:	785b      	ldrb	r3, [r3, #1]
 8009c6e:	2b30      	cmp	r3, #48	; 0x30
 8009c70:	d0f9      	beq.n	8009c66 <_strtod_l+0x126>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d09d      	beq.n	8009bb2 <_strtod_l+0x72>
 8009c76:	2301      	movs	r3, #1
 8009c78:	f04f 0a00 	mov.w	sl, #0
 8009c7c:	220a      	movs	r2, #10
 8009c7e:	46d3      	mov	fp, sl
 8009c80:	9305      	str	r3, [sp, #20]
 8009c82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c84:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009c88:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c8a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009c8c:	7806      	ldrb	r6, [r0, #0]
 8009c8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009c92:	b2d9      	uxtb	r1, r3
 8009c94:	2909      	cmp	r1, #9
 8009c96:	d926      	bls.n	8009ce6 <_strtod_l+0x1a6>
 8009c98:	2201      	movs	r2, #1
 8009c9a:	494d      	ldr	r1, [pc, #308]	; (8009dd0 <_strtod_l+0x290>)
 8009c9c:	f001 f9be 	bl	800b01c <strncmp>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d030      	beq.n	8009d06 <_strtod_l+0x1c6>
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	4632      	mov	r2, r6
 8009ca8:	4603      	mov	r3, r0
 8009caa:	465e      	mov	r6, fp
 8009cac:	9008      	str	r0, [sp, #32]
 8009cae:	2a65      	cmp	r2, #101	; 0x65
 8009cb0:	d001      	beq.n	8009cb6 <_strtod_l+0x176>
 8009cb2:	2a45      	cmp	r2, #69	; 0x45
 8009cb4:	d113      	bne.n	8009cde <_strtod_l+0x19e>
 8009cb6:	b91e      	cbnz	r6, 8009cc0 <_strtod_l+0x180>
 8009cb8:	9a05      	ldr	r2, [sp, #20]
 8009cba:	4302      	orrs	r2, r0
 8009cbc:	d094      	beq.n	8009be8 <_strtod_l+0xa8>
 8009cbe:	2600      	movs	r6, #0
 8009cc0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009cc2:	1c6a      	adds	r2, r5, #1
 8009cc4:	9219      	str	r2, [sp, #100]	; 0x64
 8009cc6:	786a      	ldrb	r2, [r5, #1]
 8009cc8:	2a2b      	cmp	r2, #43	; 0x2b
 8009cca:	d074      	beq.n	8009db6 <_strtod_l+0x276>
 8009ccc:	2a2d      	cmp	r2, #45	; 0x2d
 8009cce:	d078      	beq.n	8009dc2 <_strtod_l+0x282>
 8009cd0:	f04f 0c00 	mov.w	ip, #0
 8009cd4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009cd8:	2909      	cmp	r1, #9
 8009cda:	d97f      	bls.n	8009ddc <_strtod_l+0x29c>
 8009cdc:	9519      	str	r5, [sp, #100]	; 0x64
 8009cde:	2700      	movs	r7, #0
 8009ce0:	e09e      	b.n	8009e20 <_strtod_l+0x2e0>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e7c8      	b.n	8009c78 <_strtod_l+0x138>
 8009ce6:	f1bb 0f08 	cmp.w	fp, #8
 8009cea:	bfd8      	it	le
 8009cec:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8009cee:	f100 0001 	add.w	r0, r0, #1
 8009cf2:	bfd6      	itet	le
 8009cf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8009cf8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009cfc:	930a      	strle	r3, [sp, #40]	; 0x28
 8009cfe:	f10b 0b01 	add.w	fp, fp, #1
 8009d02:	9019      	str	r0, [sp, #100]	; 0x64
 8009d04:	e7c1      	b.n	8009c8a <_strtod_l+0x14a>
 8009d06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d08:	1c5a      	adds	r2, r3, #1
 8009d0a:	9219      	str	r2, [sp, #100]	; 0x64
 8009d0c:	785a      	ldrb	r2, [r3, #1]
 8009d0e:	f1bb 0f00 	cmp.w	fp, #0
 8009d12:	d037      	beq.n	8009d84 <_strtod_l+0x244>
 8009d14:	465e      	mov	r6, fp
 8009d16:	9008      	str	r0, [sp, #32]
 8009d18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009d1c:	2b09      	cmp	r3, #9
 8009d1e:	d912      	bls.n	8009d46 <_strtod_l+0x206>
 8009d20:	2301      	movs	r3, #1
 8009d22:	e7c4      	b.n	8009cae <_strtod_l+0x16e>
 8009d24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d26:	3001      	adds	r0, #1
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	9219      	str	r2, [sp, #100]	; 0x64
 8009d2c:	785a      	ldrb	r2, [r3, #1]
 8009d2e:	2a30      	cmp	r2, #48	; 0x30
 8009d30:	d0f8      	beq.n	8009d24 <_strtod_l+0x1e4>
 8009d32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009d36:	2b08      	cmp	r3, #8
 8009d38:	f200 84e4 	bhi.w	800a704 <_strtod_l+0xbc4>
 8009d3c:	9008      	str	r0, [sp, #32]
 8009d3e:	2000      	movs	r0, #0
 8009d40:	4606      	mov	r6, r0
 8009d42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d44:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d46:	3a30      	subs	r2, #48	; 0x30
 8009d48:	f100 0301 	add.w	r3, r0, #1
 8009d4c:	d014      	beq.n	8009d78 <_strtod_l+0x238>
 8009d4e:	9908      	ldr	r1, [sp, #32]
 8009d50:	eb00 0c06 	add.w	ip, r0, r6
 8009d54:	4419      	add	r1, r3
 8009d56:	9108      	str	r1, [sp, #32]
 8009d58:	4633      	mov	r3, r6
 8009d5a:	210a      	movs	r1, #10
 8009d5c:	4563      	cmp	r3, ip
 8009d5e:	d113      	bne.n	8009d88 <_strtod_l+0x248>
 8009d60:	1833      	adds	r3, r6, r0
 8009d62:	2b08      	cmp	r3, #8
 8009d64:	f106 0601 	add.w	r6, r6, #1
 8009d68:	4406      	add	r6, r0
 8009d6a:	dc1a      	bgt.n	8009da2 <_strtod_l+0x262>
 8009d6c:	230a      	movs	r3, #10
 8009d6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d70:	fb03 2301 	mla	r3, r3, r1, r2
 8009d74:	930a      	str	r3, [sp, #40]	; 0x28
 8009d76:	2300      	movs	r3, #0
 8009d78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	1c51      	adds	r1, r2, #1
 8009d7e:	9119      	str	r1, [sp, #100]	; 0x64
 8009d80:	7852      	ldrb	r2, [r2, #1]
 8009d82:	e7c9      	b.n	8009d18 <_strtod_l+0x1d8>
 8009d84:	4658      	mov	r0, fp
 8009d86:	e7d2      	b.n	8009d2e <_strtod_l+0x1ee>
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	f103 0301 	add.w	r3, r3, #1
 8009d8e:	dc03      	bgt.n	8009d98 <_strtod_l+0x258>
 8009d90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009d92:	434f      	muls	r7, r1
 8009d94:	970a      	str	r7, [sp, #40]	; 0x28
 8009d96:	e7e1      	b.n	8009d5c <_strtod_l+0x21c>
 8009d98:	2b10      	cmp	r3, #16
 8009d9a:	bfd8      	it	le
 8009d9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009da0:	e7dc      	b.n	8009d5c <_strtod_l+0x21c>
 8009da2:	2e10      	cmp	r6, #16
 8009da4:	bfdc      	itt	le
 8009da6:	230a      	movle	r3, #10
 8009da8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009dac:	e7e3      	b.n	8009d76 <_strtod_l+0x236>
 8009dae:	2300      	movs	r3, #0
 8009db0:	9308      	str	r3, [sp, #32]
 8009db2:	2301      	movs	r3, #1
 8009db4:	e780      	b.n	8009cb8 <_strtod_l+0x178>
 8009db6:	f04f 0c00 	mov.w	ip, #0
 8009dba:	1caa      	adds	r2, r5, #2
 8009dbc:	9219      	str	r2, [sp, #100]	; 0x64
 8009dbe:	78aa      	ldrb	r2, [r5, #2]
 8009dc0:	e788      	b.n	8009cd4 <_strtod_l+0x194>
 8009dc2:	f04f 0c01 	mov.w	ip, #1
 8009dc6:	e7f8      	b.n	8009dba <_strtod_l+0x27a>
 8009dc8:	0800d540 	.word	0x0800d540
 8009dcc:	7ff00000 	.word	0x7ff00000
 8009dd0:	0800d53c 	.word	0x0800d53c
 8009dd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009dd6:	1c51      	adds	r1, r2, #1
 8009dd8:	9119      	str	r1, [sp, #100]	; 0x64
 8009dda:	7852      	ldrb	r2, [r2, #1]
 8009ddc:	2a30      	cmp	r2, #48	; 0x30
 8009dde:	d0f9      	beq.n	8009dd4 <_strtod_l+0x294>
 8009de0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009de4:	2908      	cmp	r1, #8
 8009de6:	f63f af7a 	bhi.w	8009cde <_strtod_l+0x19e>
 8009dea:	3a30      	subs	r2, #48	; 0x30
 8009dec:	9209      	str	r2, [sp, #36]	; 0x24
 8009dee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009df0:	920c      	str	r2, [sp, #48]	; 0x30
 8009df2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009df4:	1c57      	adds	r7, r2, #1
 8009df6:	9719      	str	r7, [sp, #100]	; 0x64
 8009df8:	7852      	ldrb	r2, [r2, #1]
 8009dfa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009dfe:	f1be 0f09 	cmp.w	lr, #9
 8009e02:	d938      	bls.n	8009e76 <_strtod_l+0x336>
 8009e04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e06:	1a7f      	subs	r7, r7, r1
 8009e08:	2f08      	cmp	r7, #8
 8009e0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009e0e:	dc03      	bgt.n	8009e18 <_strtod_l+0x2d8>
 8009e10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e12:	428f      	cmp	r7, r1
 8009e14:	bfa8      	it	ge
 8009e16:	460f      	movge	r7, r1
 8009e18:	f1bc 0f00 	cmp.w	ip, #0
 8009e1c:	d000      	beq.n	8009e20 <_strtod_l+0x2e0>
 8009e1e:	427f      	negs	r7, r7
 8009e20:	2e00      	cmp	r6, #0
 8009e22:	d14f      	bne.n	8009ec4 <_strtod_l+0x384>
 8009e24:	9905      	ldr	r1, [sp, #20]
 8009e26:	4301      	orrs	r1, r0
 8009e28:	f47f aec3 	bne.w	8009bb2 <_strtod_l+0x72>
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f47f aedb 	bne.w	8009be8 <_strtod_l+0xa8>
 8009e32:	2a69      	cmp	r2, #105	; 0x69
 8009e34:	d029      	beq.n	8009e8a <_strtod_l+0x34a>
 8009e36:	dc26      	bgt.n	8009e86 <_strtod_l+0x346>
 8009e38:	2a49      	cmp	r2, #73	; 0x49
 8009e3a:	d026      	beq.n	8009e8a <_strtod_l+0x34a>
 8009e3c:	2a4e      	cmp	r2, #78	; 0x4e
 8009e3e:	f47f aed3 	bne.w	8009be8 <_strtod_l+0xa8>
 8009e42:	499a      	ldr	r1, [pc, #616]	; (800a0ac <_strtod_l+0x56c>)
 8009e44:	a819      	add	r0, sp, #100	; 0x64
 8009e46:	f001 fbed 	bl	800b624 <__match>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	f43f aecc 	beq.w	8009be8 <_strtod_l+0xa8>
 8009e50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	2b28      	cmp	r3, #40	; 0x28
 8009e56:	d12f      	bne.n	8009eb8 <_strtod_l+0x378>
 8009e58:	4995      	ldr	r1, [pc, #596]	; (800a0b0 <_strtod_l+0x570>)
 8009e5a:	aa1c      	add	r2, sp, #112	; 0x70
 8009e5c:	a819      	add	r0, sp, #100	; 0x64
 8009e5e:	f001 fbf5 	bl	800b64c <__hexnan>
 8009e62:	2805      	cmp	r0, #5
 8009e64:	d128      	bne.n	8009eb8 <_strtod_l+0x378>
 8009e66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e68:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009e6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009e70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009e74:	e69d      	b.n	8009bb2 <_strtod_l+0x72>
 8009e76:	210a      	movs	r1, #10
 8009e78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e7a:	fb01 2107 	mla	r1, r1, r7, r2
 8009e7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009e82:	9209      	str	r2, [sp, #36]	; 0x24
 8009e84:	e7b5      	b.n	8009df2 <_strtod_l+0x2b2>
 8009e86:	2a6e      	cmp	r2, #110	; 0x6e
 8009e88:	e7d9      	b.n	8009e3e <_strtod_l+0x2fe>
 8009e8a:	498a      	ldr	r1, [pc, #552]	; (800a0b4 <_strtod_l+0x574>)
 8009e8c:	a819      	add	r0, sp, #100	; 0x64
 8009e8e:	f001 fbc9 	bl	800b624 <__match>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	f43f aea8 	beq.w	8009be8 <_strtod_l+0xa8>
 8009e98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e9a:	4987      	ldr	r1, [pc, #540]	; (800a0b8 <_strtod_l+0x578>)
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	a819      	add	r0, sp, #100	; 0x64
 8009ea0:	9319      	str	r3, [sp, #100]	; 0x64
 8009ea2:	f001 fbbf 	bl	800b624 <__match>
 8009ea6:	b910      	cbnz	r0, 8009eae <_strtod_l+0x36e>
 8009ea8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009eaa:	3301      	adds	r3, #1
 8009eac:	9319      	str	r3, [sp, #100]	; 0x64
 8009eae:	f04f 0800 	mov.w	r8, #0
 8009eb2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800a0bc <_strtod_l+0x57c>
 8009eb6:	e67c      	b.n	8009bb2 <_strtod_l+0x72>
 8009eb8:	4881      	ldr	r0, [pc, #516]	; (800a0c0 <_strtod_l+0x580>)
 8009eba:	f001 f8d1 	bl	800b060 <nan>
 8009ebe:	4680      	mov	r8, r0
 8009ec0:	4689      	mov	r9, r1
 8009ec2:	e676      	b.n	8009bb2 <_strtod_l+0x72>
 8009ec4:	9b08      	ldr	r3, [sp, #32]
 8009ec6:	f1bb 0f00 	cmp.w	fp, #0
 8009eca:	bf08      	it	eq
 8009ecc:	46b3      	moveq	fp, r6
 8009ece:	1afb      	subs	r3, r7, r3
 8009ed0:	2e10      	cmp	r6, #16
 8009ed2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ed4:	4635      	mov	r5, r6
 8009ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed8:	bfa8      	it	ge
 8009eda:	2510      	movge	r5, #16
 8009edc:	f7f6 fa82 	bl	80003e4 <__aeabi_ui2d>
 8009ee0:	2e09      	cmp	r6, #9
 8009ee2:	4680      	mov	r8, r0
 8009ee4:	4689      	mov	r9, r1
 8009ee6:	dd13      	ble.n	8009f10 <_strtod_l+0x3d0>
 8009ee8:	4b76      	ldr	r3, [pc, #472]	; (800a0c4 <_strtod_l+0x584>)
 8009eea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009eee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ef2:	f7f6 faf1 	bl	80004d8 <__aeabi_dmul>
 8009ef6:	4680      	mov	r8, r0
 8009ef8:	4650      	mov	r0, sl
 8009efa:	4689      	mov	r9, r1
 8009efc:	f7f6 fa72 	bl	80003e4 <__aeabi_ui2d>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4640      	mov	r0, r8
 8009f06:	4649      	mov	r1, r9
 8009f08:	f7f6 f930 	bl	800016c <__adddf3>
 8009f0c:	4680      	mov	r8, r0
 8009f0e:	4689      	mov	r9, r1
 8009f10:	2e0f      	cmp	r6, #15
 8009f12:	dc36      	bgt.n	8009f82 <_strtod_l+0x442>
 8009f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f43f ae4b 	beq.w	8009bb2 <_strtod_l+0x72>
 8009f1c:	dd22      	ble.n	8009f64 <_strtod_l+0x424>
 8009f1e:	2b16      	cmp	r3, #22
 8009f20:	dc09      	bgt.n	8009f36 <_strtod_l+0x3f6>
 8009f22:	4968      	ldr	r1, [pc, #416]	; (800a0c4 <_strtod_l+0x584>)
 8009f24:	4642      	mov	r2, r8
 8009f26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f30:	f7f6 fad2 	bl	80004d8 <__aeabi_dmul>
 8009f34:	e7c3      	b.n	8009ebe <_strtod_l+0x37e>
 8009f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f38:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	db20      	blt.n	8009f82 <_strtod_l+0x442>
 8009f40:	4c60      	ldr	r4, [pc, #384]	; (800a0c4 <_strtod_l+0x584>)
 8009f42:	f1c6 060f 	rsb	r6, r6, #15
 8009f46:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009f4a:	4642      	mov	r2, r8
 8009f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f50:	464b      	mov	r3, r9
 8009f52:	f7f6 fac1 	bl	80004d8 <__aeabi_dmul>
 8009f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f58:	1b9e      	subs	r6, r3, r6
 8009f5a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009f5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f62:	e7e5      	b.n	8009f30 <_strtod_l+0x3f0>
 8009f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f66:	3316      	adds	r3, #22
 8009f68:	db0b      	blt.n	8009f82 <_strtod_l+0x442>
 8009f6a:	9b08      	ldr	r3, [sp, #32]
 8009f6c:	4640      	mov	r0, r8
 8009f6e:	1bdf      	subs	r7, r3, r7
 8009f70:	4b54      	ldr	r3, [pc, #336]	; (800a0c4 <_strtod_l+0x584>)
 8009f72:	4649      	mov	r1, r9
 8009f74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f7c:	f7f6 fbd6 	bl	800072c <__aeabi_ddiv>
 8009f80:	e79d      	b.n	8009ebe <_strtod_l+0x37e>
 8009f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f84:	1b75      	subs	r5, r6, r5
 8009f86:	441d      	add	r5, r3
 8009f88:	2d00      	cmp	r5, #0
 8009f8a:	dd70      	ble.n	800a06e <_strtod_l+0x52e>
 8009f8c:	f015 030f 	ands.w	r3, r5, #15
 8009f90:	d00a      	beq.n	8009fa8 <_strtod_l+0x468>
 8009f92:	494c      	ldr	r1, [pc, #304]	; (800a0c4 <_strtod_l+0x584>)
 8009f94:	4642      	mov	r2, r8
 8009f96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f9e:	464b      	mov	r3, r9
 8009fa0:	f7f6 fa9a 	bl	80004d8 <__aeabi_dmul>
 8009fa4:	4680      	mov	r8, r0
 8009fa6:	4689      	mov	r9, r1
 8009fa8:	f035 050f 	bics.w	r5, r5, #15
 8009fac:	d04d      	beq.n	800a04a <_strtod_l+0x50a>
 8009fae:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009fb2:	dd22      	ble.n	8009ffa <_strtod_l+0x4ba>
 8009fb4:	2600      	movs	r6, #0
 8009fb6:	46b3      	mov	fp, r6
 8009fb8:	960b      	str	r6, [sp, #44]	; 0x2c
 8009fba:	9608      	str	r6, [sp, #32]
 8009fbc:	2322      	movs	r3, #34	; 0x22
 8009fbe:	f04f 0800 	mov.w	r8, #0
 8009fc2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800a0bc <_strtod_l+0x57c>
 8009fc6:	6023      	str	r3, [r4, #0]
 8009fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f43f adf1 	beq.w	8009bb2 <_strtod_l+0x72>
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009fd4:	f7ff f934 	bl	8009240 <_Bfree>
 8009fd8:	4620      	mov	r0, r4
 8009fda:	9908      	ldr	r1, [sp, #32]
 8009fdc:	f7ff f930 	bl	8009240 <_Bfree>
 8009fe0:	4659      	mov	r1, fp
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f7ff f92c 	bl	8009240 <_Bfree>
 8009fe8:	4620      	mov	r0, r4
 8009fea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fec:	f7ff f928 	bl	8009240 <_Bfree>
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7ff f924 	bl	8009240 <_Bfree>
 8009ff8:	e5db      	b.n	8009bb2 <_strtod_l+0x72>
 8009ffa:	4b33      	ldr	r3, [pc, #204]	; (800a0c8 <_strtod_l+0x588>)
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	9305      	str	r3, [sp, #20]
 800a000:	2300      	movs	r3, #0
 800a002:	4649      	mov	r1, r9
 800a004:	469a      	mov	sl, r3
 800a006:	112d      	asrs	r5, r5, #4
 800a008:	2d01      	cmp	r5, #1
 800a00a:	dc21      	bgt.n	800a050 <_strtod_l+0x510>
 800a00c:	b10b      	cbz	r3, 800a012 <_strtod_l+0x4d2>
 800a00e:	4680      	mov	r8, r0
 800a010:	4689      	mov	r9, r1
 800a012:	492d      	ldr	r1, [pc, #180]	; (800a0c8 <_strtod_l+0x588>)
 800a014:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a018:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a01c:	4642      	mov	r2, r8
 800a01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a022:	464b      	mov	r3, r9
 800a024:	f7f6 fa58 	bl	80004d8 <__aeabi_dmul>
 800a028:	4b24      	ldr	r3, [pc, #144]	; (800a0bc <_strtod_l+0x57c>)
 800a02a:	460a      	mov	r2, r1
 800a02c:	400b      	ands	r3, r1
 800a02e:	4927      	ldr	r1, [pc, #156]	; (800a0cc <_strtod_l+0x58c>)
 800a030:	4680      	mov	r8, r0
 800a032:	428b      	cmp	r3, r1
 800a034:	d8be      	bhi.n	8009fb4 <_strtod_l+0x474>
 800a036:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a03a:	428b      	cmp	r3, r1
 800a03c:	bf86      	itte	hi
 800a03e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a042:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800a0d0 <_strtod_l+0x590>
 800a046:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a04a:	2300      	movs	r3, #0
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	e07b      	b.n	800a148 <_strtod_l+0x608>
 800a050:	07ea      	lsls	r2, r5, #31
 800a052:	d505      	bpl.n	800a060 <_strtod_l+0x520>
 800a054:	9b05      	ldr	r3, [sp, #20]
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	f7f6 fa3d 	bl	80004d8 <__aeabi_dmul>
 800a05e:	2301      	movs	r3, #1
 800a060:	9a05      	ldr	r2, [sp, #20]
 800a062:	f10a 0a01 	add.w	sl, sl, #1
 800a066:	3208      	adds	r2, #8
 800a068:	106d      	asrs	r5, r5, #1
 800a06a:	9205      	str	r2, [sp, #20]
 800a06c:	e7cc      	b.n	800a008 <_strtod_l+0x4c8>
 800a06e:	d0ec      	beq.n	800a04a <_strtod_l+0x50a>
 800a070:	426d      	negs	r5, r5
 800a072:	f015 020f 	ands.w	r2, r5, #15
 800a076:	d00a      	beq.n	800a08e <_strtod_l+0x54e>
 800a078:	4b12      	ldr	r3, [pc, #72]	; (800a0c4 <_strtod_l+0x584>)
 800a07a:	4640      	mov	r0, r8
 800a07c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a080:	4649      	mov	r1, r9
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 fb51 	bl	800072c <__aeabi_ddiv>
 800a08a:	4680      	mov	r8, r0
 800a08c:	4689      	mov	r9, r1
 800a08e:	112d      	asrs	r5, r5, #4
 800a090:	d0db      	beq.n	800a04a <_strtod_l+0x50a>
 800a092:	2d1f      	cmp	r5, #31
 800a094:	dd1e      	ble.n	800a0d4 <_strtod_l+0x594>
 800a096:	2600      	movs	r6, #0
 800a098:	46b3      	mov	fp, r6
 800a09a:	960b      	str	r6, [sp, #44]	; 0x2c
 800a09c:	9608      	str	r6, [sp, #32]
 800a09e:	2322      	movs	r3, #34	; 0x22
 800a0a0:	f04f 0800 	mov.w	r8, #0
 800a0a4:	f04f 0900 	mov.w	r9, #0
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	e78d      	b.n	8009fc8 <_strtod_l+0x488>
 800a0ac:	0800d327 	.word	0x0800d327
 800a0b0:	0800d554 	.word	0x0800d554
 800a0b4:	0800d31f 	.word	0x0800d31f
 800a0b8:	0800d356 	.word	0x0800d356
 800a0bc:	7ff00000 	.word	0x7ff00000
 800a0c0:	0800d6e5 	.word	0x0800d6e5
 800a0c4:	0800d468 	.word	0x0800d468
 800a0c8:	0800d440 	.word	0x0800d440
 800a0cc:	7ca00000 	.word	0x7ca00000
 800a0d0:	7fefffff 	.word	0x7fefffff
 800a0d4:	f015 0310 	ands.w	r3, r5, #16
 800a0d8:	bf18      	it	ne
 800a0da:	236a      	movne	r3, #106	; 0x6a
 800a0dc:	4640      	mov	r0, r8
 800a0de:	9305      	str	r3, [sp, #20]
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800a3b0 <_strtod_l+0x870>
 800a0e8:	07ea      	lsls	r2, r5, #31
 800a0ea:	d504      	bpl.n	800a0f6 <_strtod_l+0x5b6>
 800a0ec:	e9da 2300 	ldrd	r2, r3, [sl]
 800a0f0:	f7f6 f9f2 	bl	80004d8 <__aeabi_dmul>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	106d      	asrs	r5, r5, #1
 800a0f8:	f10a 0a08 	add.w	sl, sl, #8
 800a0fc:	d1f4      	bne.n	800a0e8 <_strtod_l+0x5a8>
 800a0fe:	b10b      	cbz	r3, 800a104 <_strtod_l+0x5c4>
 800a100:	4680      	mov	r8, r0
 800a102:	4689      	mov	r9, r1
 800a104:	9b05      	ldr	r3, [sp, #20]
 800a106:	b1bb      	cbz	r3, 800a138 <_strtod_l+0x5f8>
 800a108:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a10c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a110:	2b00      	cmp	r3, #0
 800a112:	4649      	mov	r1, r9
 800a114:	dd10      	ble.n	800a138 <_strtod_l+0x5f8>
 800a116:	2b1f      	cmp	r3, #31
 800a118:	f340 8128 	ble.w	800a36c <_strtod_l+0x82c>
 800a11c:	2b34      	cmp	r3, #52	; 0x34
 800a11e:	bfd8      	it	le
 800a120:	f04f 33ff 	movle.w	r3, #4294967295
 800a124:	f04f 0800 	mov.w	r8, #0
 800a128:	bfcf      	iteee	gt
 800a12a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a12e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a132:	4093      	lslle	r3, r2
 800a134:	ea03 0901 	andle.w	r9, r3, r1
 800a138:	2200      	movs	r2, #0
 800a13a:	2300      	movs	r3, #0
 800a13c:	4640      	mov	r0, r8
 800a13e:	4649      	mov	r1, r9
 800a140:	f7f6 fc32 	bl	80009a8 <__aeabi_dcmpeq>
 800a144:	2800      	cmp	r0, #0
 800a146:	d1a6      	bne.n	800a096 <_strtod_l+0x556>
 800a148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a14a:	465a      	mov	r2, fp
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	4620      	mov	r0, r4
 800a150:	4633      	mov	r3, r6
 800a152:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a154:	f7ff f8dc 	bl	8009310 <__s2b>
 800a158:	900b      	str	r0, [sp, #44]	; 0x2c
 800a15a:	2800      	cmp	r0, #0
 800a15c:	f43f af2a 	beq.w	8009fb4 <_strtod_l+0x474>
 800a160:	2600      	movs	r6, #0
 800a162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a164:	9b08      	ldr	r3, [sp, #32]
 800a166:	2a00      	cmp	r2, #0
 800a168:	eba3 0307 	sub.w	r3, r3, r7
 800a16c:	bfa8      	it	ge
 800a16e:	2300      	movge	r3, #0
 800a170:	46b3      	mov	fp, r6
 800a172:	9312      	str	r3, [sp, #72]	; 0x48
 800a174:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a178:	9316      	str	r3, [sp, #88]	; 0x58
 800a17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a17c:	4620      	mov	r0, r4
 800a17e:	6859      	ldr	r1, [r3, #4]
 800a180:	f7ff f81e 	bl	80091c0 <_Balloc>
 800a184:	9008      	str	r0, [sp, #32]
 800a186:	2800      	cmp	r0, #0
 800a188:	f43f af18 	beq.w	8009fbc <_strtod_l+0x47c>
 800a18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a18e:	300c      	adds	r0, #12
 800a190:	691a      	ldr	r2, [r3, #16]
 800a192:	f103 010c 	add.w	r1, r3, #12
 800a196:	3202      	adds	r2, #2
 800a198:	0092      	lsls	r2, r2, #2
 800a19a:	f7fe f892 	bl	80082c2 <memcpy>
 800a19e:	ab1c      	add	r3, sp, #112	; 0x70
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	ab1b      	add	r3, sp, #108	; 0x6c
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	4642      	mov	r2, r8
 800a1a8:	464b      	mov	r3, r9
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800a1b0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800a1b4:	f7ff fbd8 	bl	8009968 <__d2b>
 800a1b8:	901a      	str	r0, [sp, #104]	; 0x68
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f43f aefe 	beq.w	8009fbc <_strtod_l+0x47c>
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f7ff f93c 	bl	8009440 <__i2b>
 800a1c8:	4683      	mov	fp, r0
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	f43f aef6 	beq.w	8009fbc <_strtod_l+0x47c>
 800a1d0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a1d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a1d4:	2f00      	cmp	r7, #0
 800a1d6:	bfab      	itete	ge
 800a1d8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800a1da:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a1dc:	eb07 0a03 	addge.w	sl, r7, r3
 800a1e0:	1bdd      	sublt	r5, r3, r7
 800a1e2:	9b05      	ldr	r3, [sp, #20]
 800a1e4:	bfa8      	it	ge
 800a1e6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a1e8:	eba7 0703 	sub.w	r7, r7, r3
 800a1ec:	4417      	add	r7, r2
 800a1ee:	4b71      	ldr	r3, [pc, #452]	; (800a3b4 <_strtod_l+0x874>)
 800a1f0:	f107 37ff 	add.w	r7, r7, #4294967295
 800a1f4:	bfb8      	it	lt
 800a1f6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800a1fa:	429f      	cmp	r7, r3
 800a1fc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a200:	f280 80c7 	bge.w	800a392 <_strtod_l+0x852>
 800a204:	1bdb      	subs	r3, r3, r7
 800a206:	2b1f      	cmp	r3, #31
 800a208:	f04f 0101 	mov.w	r1, #1
 800a20c:	eba2 0203 	sub.w	r2, r2, r3
 800a210:	f300 80b3 	bgt.w	800a37a <_strtod_l+0x83a>
 800a214:	fa01 f303 	lsl.w	r3, r1, r3
 800a218:	9313      	str	r3, [sp, #76]	; 0x4c
 800a21a:	2300      	movs	r3, #0
 800a21c:	9310      	str	r3, [sp, #64]	; 0x40
 800a21e:	eb0a 0702 	add.w	r7, sl, r2
 800a222:	9b05      	ldr	r3, [sp, #20]
 800a224:	45ba      	cmp	sl, r7
 800a226:	4415      	add	r5, r2
 800a228:	441d      	add	r5, r3
 800a22a:	4653      	mov	r3, sl
 800a22c:	bfa8      	it	ge
 800a22e:	463b      	movge	r3, r7
 800a230:	42ab      	cmp	r3, r5
 800a232:	bfa8      	it	ge
 800a234:	462b      	movge	r3, r5
 800a236:	2b00      	cmp	r3, #0
 800a238:	bfc2      	ittt	gt
 800a23a:	1aff      	subgt	r7, r7, r3
 800a23c:	1aed      	subgt	r5, r5, r3
 800a23e:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a242:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a244:	2b00      	cmp	r3, #0
 800a246:	dd17      	ble.n	800a278 <_strtod_l+0x738>
 800a248:	4659      	mov	r1, fp
 800a24a:	461a      	mov	r2, r3
 800a24c:	4620      	mov	r0, r4
 800a24e:	f7ff f9b5 	bl	80095bc <__pow5mult>
 800a252:	4683      	mov	fp, r0
 800a254:	2800      	cmp	r0, #0
 800a256:	f43f aeb1 	beq.w	8009fbc <_strtod_l+0x47c>
 800a25a:	4601      	mov	r1, r0
 800a25c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a25e:	4620      	mov	r0, r4
 800a260:	f7ff f904 	bl	800946c <__multiply>
 800a264:	900a      	str	r0, [sp, #40]	; 0x28
 800a266:	2800      	cmp	r0, #0
 800a268:	f43f aea8 	beq.w	8009fbc <_strtod_l+0x47c>
 800a26c:	4620      	mov	r0, r4
 800a26e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a270:	f7fe ffe6 	bl	8009240 <_Bfree>
 800a274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a276:	931a      	str	r3, [sp, #104]	; 0x68
 800a278:	2f00      	cmp	r7, #0
 800a27a:	f300 808f 	bgt.w	800a39c <_strtod_l+0x85c>
 800a27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a280:	2b00      	cmp	r3, #0
 800a282:	dd08      	ble.n	800a296 <_strtod_l+0x756>
 800a284:	4620      	mov	r0, r4
 800a286:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a288:	9908      	ldr	r1, [sp, #32]
 800a28a:	f7ff f997 	bl	80095bc <__pow5mult>
 800a28e:	9008      	str	r0, [sp, #32]
 800a290:	2800      	cmp	r0, #0
 800a292:	f43f ae93 	beq.w	8009fbc <_strtod_l+0x47c>
 800a296:	2d00      	cmp	r5, #0
 800a298:	dd08      	ble.n	800a2ac <_strtod_l+0x76c>
 800a29a:	462a      	mov	r2, r5
 800a29c:	4620      	mov	r0, r4
 800a29e:	9908      	ldr	r1, [sp, #32]
 800a2a0:	f7ff f9e6 	bl	8009670 <__lshift>
 800a2a4:	9008      	str	r0, [sp, #32]
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	f43f ae88 	beq.w	8009fbc <_strtod_l+0x47c>
 800a2ac:	f1ba 0f00 	cmp.w	sl, #0
 800a2b0:	dd08      	ble.n	800a2c4 <_strtod_l+0x784>
 800a2b2:	4659      	mov	r1, fp
 800a2b4:	4652      	mov	r2, sl
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f7ff f9da 	bl	8009670 <__lshift>
 800a2bc:	4683      	mov	fp, r0
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	f43f ae7c 	beq.w	8009fbc <_strtod_l+0x47c>
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	9a08      	ldr	r2, [sp, #32]
 800a2c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a2ca:	f7ff fa59 	bl	8009780 <__mdiff>
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	f43f ae73 	beq.w	8009fbc <_strtod_l+0x47c>
 800a2d6:	2500      	movs	r5, #0
 800a2d8:	68c3      	ldr	r3, [r0, #12]
 800a2da:	4659      	mov	r1, fp
 800a2dc:	60c5      	str	r5, [r0, #12]
 800a2de:	930a      	str	r3, [sp, #40]	; 0x28
 800a2e0:	f7ff fa32 	bl	8009748 <__mcmp>
 800a2e4:	42a8      	cmp	r0, r5
 800a2e6:	da6b      	bge.n	800a3c0 <_strtod_l+0x880>
 800a2e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ea:	ea53 0308 	orrs.w	r3, r3, r8
 800a2ee:	f040 808f 	bne.w	800a410 <_strtod_l+0x8d0>
 800a2f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f040 808a 	bne.w	800a410 <_strtod_l+0x8d0>
 800a2fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a300:	0d1b      	lsrs	r3, r3, #20
 800a302:	051b      	lsls	r3, r3, #20
 800a304:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a308:	f240 8082 	bls.w	800a410 <_strtod_l+0x8d0>
 800a30c:	6973      	ldr	r3, [r6, #20]
 800a30e:	b913      	cbnz	r3, 800a316 <_strtod_l+0x7d6>
 800a310:	6933      	ldr	r3, [r6, #16]
 800a312:	2b01      	cmp	r3, #1
 800a314:	dd7c      	ble.n	800a410 <_strtod_l+0x8d0>
 800a316:	4631      	mov	r1, r6
 800a318:	2201      	movs	r2, #1
 800a31a:	4620      	mov	r0, r4
 800a31c:	f7ff f9a8 	bl	8009670 <__lshift>
 800a320:	4659      	mov	r1, fp
 800a322:	4606      	mov	r6, r0
 800a324:	f7ff fa10 	bl	8009748 <__mcmp>
 800a328:	2800      	cmp	r0, #0
 800a32a:	dd71      	ble.n	800a410 <_strtod_l+0x8d0>
 800a32c:	9905      	ldr	r1, [sp, #20]
 800a32e:	464b      	mov	r3, r9
 800a330:	4a21      	ldr	r2, [pc, #132]	; (800a3b8 <_strtod_l+0x878>)
 800a332:	2900      	cmp	r1, #0
 800a334:	f000 808d 	beq.w	800a452 <_strtod_l+0x912>
 800a338:	ea02 0109 	and.w	r1, r2, r9
 800a33c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a340:	f300 8087 	bgt.w	800a452 <_strtod_l+0x912>
 800a344:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a348:	f77f aea9 	ble.w	800a09e <_strtod_l+0x55e>
 800a34c:	4640      	mov	r0, r8
 800a34e:	4649      	mov	r1, r9
 800a350:	4b1a      	ldr	r3, [pc, #104]	; (800a3bc <_strtod_l+0x87c>)
 800a352:	2200      	movs	r2, #0
 800a354:	f7f6 f8c0 	bl	80004d8 <__aeabi_dmul>
 800a358:	4b17      	ldr	r3, [pc, #92]	; (800a3b8 <_strtod_l+0x878>)
 800a35a:	4680      	mov	r8, r0
 800a35c:	400b      	ands	r3, r1
 800a35e:	4689      	mov	r9, r1
 800a360:	2b00      	cmp	r3, #0
 800a362:	f47f ae35 	bne.w	8009fd0 <_strtod_l+0x490>
 800a366:	2322      	movs	r3, #34	; 0x22
 800a368:	6023      	str	r3, [r4, #0]
 800a36a:	e631      	b.n	8009fd0 <_strtod_l+0x490>
 800a36c:	f04f 32ff 	mov.w	r2, #4294967295
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	ea03 0808 	and.w	r8, r3, r8
 800a378:	e6de      	b.n	800a138 <_strtod_l+0x5f8>
 800a37a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800a37e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800a382:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800a386:	37e2      	adds	r7, #226	; 0xe2
 800a388:	fa01 f307 	lsl.w	r3, r1, r7
 800a38c:	9310      	str	r3, [sp, #64]	; 0x40
 800a38e:	9113      	str	r1, [sp, #76]	; 0x4c
 800a390:	e745      	b.n	800a21e <_strtod_l+0x6de>
 800a392:	2300      	movs	r3, #0
 800a394:	9310      	str	r3, [sp, #64]	; 0x40
 800a396:	2301      	movs	r3, #1
 800a398:	9313      	str	r3, [sp, #76]	; 0x4c
 800a39a:	e740      	b.n	800a21e <_strtod_l+0x6de>
 800a39c:	463a      	mov	r2, r7
 800a39e:	4620      	mov	r0, r4
 800a3a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a3a2:	f7ff f965 	bl	8009670 <__lshift>
 800a3a6:	901a      	str	r0, [sp, #104]	; 0x68
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	f47f af68 	bne.w	800a27e <_strtod_l+0x73e>
 800a3ae:	e605      	b.n	8009fbc <_strtod_l+0x47c>
 800a3b0:	0800d568 	.word	0x0800d568
 800a3b4:	fffffc02 	.word	0xfffffc02
 800a3b8:	7ff00000 	.word	0x7ff00000
 800a3bc:	39500000 	.word	0x39500000
 800a3c0:	46ca      	mov	sl, r9
 800a3c2:	d165      	bne.n	800a490 <_strtod_l+0x950>
 800a3c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3ca:	b352      	cbz	r2, 800a422 <_strtod_l+0x8e2>
 800a3cc:	4a9e      	ldr	r2, [pc, #632]	; (800a648 <_strtod_l+0xb08>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d12a      	bne.n	800a428 <_strtod_l+0x8e8>
 800a3d2:	9b05      	ldr	r3, [sp, #20]
 800a3d4:	4641      	mov	r1, r8
 800a3d6:	b1fb      	cbz	r3, 800a418 <_strtod_l+0x8d8>
 800a3d8:	4b9c      	ldr	r3, [pc, #624]	; (800a64c <_strtod_l+0xb0c>)
 800a3da:	f04f 32ff 	mov.w	r2, #4294967295
 800a3de:	ea09 0303 	and.w	r3, r9, r3
 800a3e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a3e6:	d81a      	bhi.n	800a41e <_strtod_l+0x8de>
 800a3e8:	0d1b      	lsrs	r3, r3, #20
 800a3ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f2:	4299      	cmp	r1, r3
 800a3f4:	d118      	bne.n	800a428 <_strtod_l+0x8e8>
 800a3f6:	4b96      	ldr	r3, [pc, #600]	; (800a650 <_strtod_l+0xb10>)
 800a3f8:	459a      	cmp	sl, r3
 800a3fa:	d102      	bne.n	800a402 <_strtod_l+0x8c2>
 800a3fc:	3101      	adds	r1, #1
 800a3fe:	f43f addd 	beq.w	8009fbc <_strtod_l+0x47c>
 800a402:	f04f 0800 	mov.w	r8, #0
 800a406:	4b91      	ldr	r3, [pc, #580]	; (800a64c <_strtod_l+0xb0c>)
 800a408:	ea0a 0303 	and.w	r3, sl, r3
 800a40c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a410:	9b05      	ldr	r3, [sp, #20]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d19a      	bne.n	800a34c <_strtod_l+0x80c>
 800a416:	e5db      	b.n	8009fd0 <_strtod_l+0x490>
 800a418:	f04f 33ff 	mov.w	r3, #4294967295
 800a41c:	e7e9      	b.n	800a3f2 <_strtod_l+0x8b2>
 800a41e:	4613      	mov	r3, r2
 800a420:	e7e7      	b.n	800a3f2 <_strtod_l+0x8b2>
 800a422:	ea53 0308 	orrs.w	r3, r3, r8
 800a426:	d081      	beq.n	800a32c <_strtod_l+0x7ec>
 800a428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a42a:	b1e3      	cbz	r3, 800a466 <_strtod_l+0x926>
 800a42c:	ea13 0f0a 	tst.w	r3, sl
 800a430:	d0ee      	beq.n	800a410 <_strtod_l+0x8d0>
 800a432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a434:	4640      	mov	r0, r8
 800a436:	4649      	mov	r1, r9
 800a438:	9a05      	ldr	r2, [sp, #20]
 800a43a:	b1c3      	cbz	r3, 800a46e <_strtod_l+0x92e>
 800a43c:	f7ff fb5c 	bl	8009af8 <sulp>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a446:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a448:	f7f5 fe90 	bl	800016c <__adddf3>
 800a44c:	4680      	mov	r8, r0
 800a44e:	4689      	mov	r9, r1
 800a450:	e7de      	b.n	800a410 <_strtod_l+0x8d0>
 800a452:	4013      	ands	r3, r2
 800a454:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a458:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a45c:	f04f 38ff 	mov.w	r8, #4294967295
 800a460:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a464:	e7d4      	b.n	800a410 <_strtod_l+0x8d0>
 800a466:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a468:	ea13 0f08 	tst.w	r3, r8
 800a46c:	e7e0      	b.n	800a430 <_strtod_l+0x8f0>
 800a46e:	f7ff fb43 	bl	8009af8 <sulp>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a478:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a47a:	f7f5 fe75 	bl	8000168 <__aeabi_dsub>
 800a47e:	2200      	movs	r2, #0
 800a480:	2300      	movs	r3, #0
 800a482:	4680      	mov	r8, r0
 800a484:	4689      	mov	r9, r1
 800a486:	f7f6 fa8f 	bl	80009a8 <__aeabi_dcmpeq>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d0c0      	beq.n	800a410 <_strtod_l+0x8d0>
 800a48e:	e606      	b.n	800a09e <_strtod_l+0x55e>
 800a490:	4659      	mov	r1, fp
 800a492:	4630      	mov	r0, r6
 800a494:	f7ff fabe 	bl	8009a14 <__ratio>
 800a498:	4602      	mov	r2, r0
 800a49a:	460b      	mov	r3, r1
 800a49c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4a6:	f7f6 fa93 	bl	80009d0 <__aeabi_dcmple>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d06f      	beq.n	800a58e <_strtod_l+0xa4e>
 800a4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d17c      	bne.n	800a5ae <_strtod_l+0xa6e>
 800a4b4:	f1b8 0f00 	cmp.w	r8, #0
 800a4b8:	d159      	bne.n	800a56e <_strtod_l+0xa2e>
 800a4ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d17b      	bne.n	800a5ba <_strtod_l+0xa7a>
 800a4c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	4b62      	ldr	r3, [pc, #392]	; (800a654 <_strtod_l+0xb14>)
 800a4ca:	f7f6 fa77 	bl	80009bc <__aeabi_dcmplt>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d15a      	bne.n	800a588 <_strtod_l+0xa48>
 800a4d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	4b5f      	ldr	r3, [pc, #380]	; (800a658 <_strtod_l+0xb18>)
 800a4da:	f7f5 fffd 	bl	80004d8 <__aeabi_dmul>
 800a4de:	4605      	mov	r5, r0
 800a4e0:	460f      	mov	r7, r1
 800a4e2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a4e6:	9506      	str	r5, [sp, #24]
 800a4e8:	9307      	str	r3, [sp, #28]
 800a4ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a4f2:	4b56      	ldr	r3, [pc, #344]	; (800a64c <_strtod_l+0xb0c>)
 800a4f4:	4a55      	ldr	r2, [pc, #340]	; (800a64c <_strtod_l+0xb0c>)
 800a4f6:	ea0a 0303 	and.w	r3, sl, r3
 800a4fa:	9313      	str	r3, [sp, #76]	; 0x4c
 800a4fc:	4b57      	ldr	r3, [pc, #348]	; (800a65c <_strtod_l+0xb1c>)
 800a4fe:	ea0a 0202 	and.w	r2, sl, r2
 800a502:	429a      	cmp	r2, r3
 800a504:	f040 80b0 	bne.w	800a668 <_strtod_l+0xb28>
 800a508:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a50c:	4640      	mov	r0, r8
 800a50e:	4649      	mov	r1, r9
 800a510:	f7ff f9c2 	bl	8009898 <__ulp>
 800a514:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a518:	f7f5 ffde 	bl	80004d8 <__aeabi_dmul>
 800a51c:	4642      	mov	r2, r8
 800a51e:	464b      	mov	r3, r9
 800a520:	f7f5 fe24 	bl	800016c <__adddf3>
 800a524:	f8df a124 	ldr.w	sl, [pc, #292]	; 800a64c <_strtod_l+0xb0c>
 800a528:	4a4d      	ldr	r2, [pc, #308]	; (800a660 <_strtod_l+0xb20>)
 800a52a:	ea01 0a0a 	and.w	sl, r1, sl
 800a52e:	4592      	cmp	sl, r2
 800a530:	4680      	mov	r8, r0
 800a532:	d948      	bls.n	800a5c6 <_strtod_l+0xa86>
 800a534:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a536:	4b46      	ldr	r3, [pc, #280]	; (800a650 <_strtod_l+0xb10>)
 800a538:	429a      	cmp	r2, r3
 800a53a:	d103      	bne.n	800a544 <_strtod_l+0xa04>
 800a53c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a53e:	3301      	adds	r3, #1
 800a540:	f43f ad3c 	beq.w	8009fbc <_strtod_l+0x47c>
 800a544:	f04f 38ff 	mov.w	r8, #4294967295
 800a548:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800a650 <_strtod_l+0xb10>
 800a54c:	4620      	mov	r0, r4
 800a54e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a550:	f7fe fe76 	bl	8009240 <_Bfree>
 800a554:	4620      	mov	r0, r4
 800a556:	9908      	ldr	r1, [sp, #32]
 800a558:	f7fe fe72 	bl	8009240 <_Bfree>
 800a55c:	4659      	mov	r1, fp
 800a55e:	4620      	mov	r0, r4
 800a560:	f7fe fe6e 	bl	8009240 <_Bfree>
 800a564:	4631      	mov	r1, r6
 800a566:	4620      	mov	r0, r4
 800a568:	f7fe fe6a 	bl	8009240 <_Bfree>
 800a56c:	e605      	b.n	800a17a <_strtod_l+0x63a>
 800a56e:	f1b8 0f01 	cmp.w	r8, #1
 800a572:	d103      	bne.n	800a57c <_strtod_l+0xa3c>
 800a574:	f1b9 0f00 	cmp.w	r9, #0
 800a578:	f43f ad91 	beq.w	800a09e <_strtod_l+0x55e>
 800a57c:	2200      	movs	r2, #0
 800a57e:	4b39      	ldr	r3, [pc, #228]	; (800a664 <_strtod_l+0xb24>)
 800a580:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a582:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a586:	e016      	b.n	800a5b6 <_strtod_l+0xa76>
 800a588:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a58a:	4f33      	ldr	r7, [pc, #204]	; (800a658 <_strtod_l+0xb18>)
 800a58c:	e7a9      	b.n	800a4e2 <_strtod_l+0x9a2>
 800a58e:	4b32      	ldr	r3, [pc, #200]	; (800a658 <_strtod_l+0xb18>)
 800a590:	2200      	movs	r2, #0
 800a592:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a596:	f7f5 ff9f 	bl	80004d8 <__aeabi_dmul>
 800a59a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a59c:	4605      	mov	r5, r0
 800a59e:	460f      	mov	r7, r1
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d09e      	beq.n	800a4e2 <_strtod_l+0x9a2>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5ac:	e79d      	b.n	800a4ea <_strtod_l+0x9aa>
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	4b28      	ldr	r3, [pc, #160]	; (800a654 <_strtod_l+0xb14>)
 800a5b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5b6:	4f27      	ldr	r7, [pc, #156]	; (800a654 <_strtod_l+0xb14>)
 800a5b8:	e797      	b.n	800a4ea <_strtod_l+0x9aa>
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	4b29      	ldr	r3, [pc, #164]	; (800a664 <_strtod_l+0xb24>)
 800a5be:	4645      	mov	r5, r8
 800a5c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5c4:	e7f7      	b.n	800a5b6 <_strtod_l+0xa76>
 800a5c6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800a5ca:	9b05      	ldr	r3, [sp, #20]
 800a5cc:	46ca      	mov	sl, r9
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1bc      	bne.n	800a54c <_strtod_l+0xa0c>
 800a5d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a5d8:	0d1b      	lsrs	r3, r3, #20
 800a5da:	051b      	lsls	r3, r3, #20
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d1b5      	bne.n	800a54c <_strtod_l+0xa0c>
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	f7f6 fd44 	bl	8001070 <__aeabi_d2lz>
 800a5e8:	f7f5 ff48 	bl	800047c <__aeabi_l2d>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	f7f5 fdb8 	bl	8000168 <__aeabi_dsub>
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800a600:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a606:	ea4a 0a08 	orr.w	sl, sl, r8
 800a60a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800a60e:	d06c      	beq.n	800a6ea <_strtod_l+0xbaa>
 800a610:	a309      	add	r3, pc, #36	; (adr r3, 800a638 <_strtod_l+0xaf8>)
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	f7f6 f9d1 	bl	80009bc <__aeabi_dcmplt>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	f47f acd8 	bne.w	8009fd0 <_strtod_l+0x490>
 800a620:	a307      	add	r3, pc, #28	; (adr r3, 800a640 <_strtod_l+0xb00>)
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a62a:	f7f6 f9e5 	bl	80009f8 <__aeabi_dcmpgt>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d08c      	beq.n	800a54c <_strtod_l+0xa0c>
 800a632:	e4cd      	b.n	8009fd0 <_strtod_l+0x490>
 800a634:	f3af 8000 	nop.w
 800a638:	94a03595 	.word	0x94a03595
 800a63c:	3fdfffff 	.word	0x3fdfffff
 800a640:	35afe535 	.word	0x35afe535
 800a644:	3fe00000 	.word	0x3fe00000
 800a648:	000fffff 	.word	0x000fffff
 800a64c:	7ff00000 	.word	0x7ff00000
 800a650:	7fefffff 	.word	0x7fefffff
 800a654:	3ff00000 	.word	0x3ff00000
 800a658:	3fe00000 	.word	0x3fe00000
 800a65c:	7fe00000 	.word	0x7fe00000
 800a660:	7c9fffff 	.word	0x7c9fffff
 800a664:	bff00000 	.word	0xbff00000
 800a668:	9b05      	ldr	r3, [sp, #20]
 800a66a:	b333      	cbz	r3, 800a6ba <_strtod_l+0xb7a>
 800a66c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a66e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a672:	d822      	bhi.n	800a6ba <_strtod_l+0xb7a>
 800a674:	a328      	add	r3, pc, #160	; (adr r3, 800a718 <_strtod_l+0xbd8>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	4628      	mov	r0, r5
 800a67c:	4639      	mov	r1, r7
 800a67e:	f7f6 f9a7 	bl	80009d0 <__aeabi_dcmple>
 800a682:	b1a0      	cbz	r0, 800a6ae <_strtod_l+0xb6e>
 800a684:	4639      	mov	r1, r7
 800a686:	4628      	mov	r0, r5
 800a688:	f7f6 f9fe 	bl	8000a88 <__aeabi_d2uiz>
 800a68c:	2801      	cmp	r0, #1
 800a68e:	bf38      	it	cc
 800a690:	2001      	movcc	r0, #1
 800a692:	f7f5 fea7 	bl	80003e4 <__aeabi_ui2d>
 800a696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a698:	4605      	mov	r5, r0
 800a69a:	460f      	mov	r7, r1
 800a69c:	bb03      	cbnz	r3, 800a6e0 <_strtod_l+0xba0>
 800a69e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6a2:	9014      	str	r0, [sp, #80]	; 0x50
 800a6a4:	9315      	str	r3, [sp, #84]	; 0x54
 800a6a6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a6aa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a6ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6b2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a6b6:	1a9b      	subs	r3, r3, r2
 800a6b8:	9311      	str	r3, [sp, #68]	; 0x44
 800a6ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a6bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6be:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800a6c2:	f7ff f8e9 	bl	8009898 <__ulp>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	f7f5 ff03 	bl	80004d8 <__aeabi_dmul>
 800a6d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6d6:	f7f5 fd49 	bl	800016c <__adddf3>
 800a6da:	4680      	mov	r8, r0
 800a6dc:	4689      	mov	r9, r1
 800a6de:	e774      	b.n	800a5ca <_strtod_l+0xa8a>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a6e8:	e7dd      	b.n	800a6a6 <_strtod_l+0xb66>
 800a6ea:	a30d      	add	r3, pc, #52	; (adr r3, 800a720 <_strtod_l+0xbe0>)
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	f7f6 f964 	bl	80009bc <__aeabi_dcmplt>
 800a6f4:	e79b      	b.n	800a62e <_strtod_l+0xaee>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	930e      	str	r3, [sp, #56]	; 0x38
 800a6fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a6fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6fe:	6013      	str	r3, [r2, #0]
 800a700:	f7ff ba5b 	b.w	8009bba <_strtod_l+0x7a>
 800a704:	2a65      	cmp	r2, #101	; 0x65
 800a706:	f43f ab52 	beq.w	8009dae <_strtod_l+0x26e>
 800a70a:	2a45      	cmp	r2, #69	; 0x45
 800a70c:	f43f ab4f 	beq.w	8009dae <_strtod_l+0x26e>
 800a710:	2301      	movs	r3, #1
 800a712:	f7ff bb87 	b.w	8009e24 <_strtod_l+0x2e4>
 800a716:	bf00      	nop
 800a718:	ffc00000 	.word	0xffc00000
 800a71c:	41dfffff 	.word	0x41dfffff
 800a720:	94a03595 	.word	0x94a03595
 800a724:	3fcfffff 	.word	0x3fcfffff

0800a728 <_strtod_r>:
 800a728:	4b01      	ldr	r3, [pc, #4]	; (800a730 <_strtod_r+0x8>)
 800a72a:	f7ff ba09 	b.w	8009b40 <_strtod_l>
 800a72e:	bf00      	nop
 800a730:	20000088 	.word	0x20000088

0800a734 <_strtol_l.constprop.0>:
 800a734:	2b01      	cmp	r3, #1
 800a736:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a73a:	4686      	mov	lr, r0
 800a73c:	4690      	mov	r8, r2
 800a73e:	d001      	beq.n	800a744 <_strtol_l.constprop.0+0x10>
 800a740:	2b24      	cmp	r3, #36	; 0x24
 800a742:	d906      	bls.n	800a752 <_strtol_l.constprop.0+0x1e>
 800a744:	f7fd fd82 	bl	800824c <__errno>
 800a748:	2316      	movs	r3, #22
 800a74a:	6003      	str	r3, [r0, #0]
 800a74c:	2000      	movs	r0, #0
 800a74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a752:	460d      	mov	r5, r1
 800a754:	4835      	ldr	r0, [pc, #212]	; (800a82c <_strtol_l.constprop.0+0xf8>)
 800a756:	462a      	mov	r2, r5
 800a758:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a75c:	5d06      	ldrb	r6, [r0, r4]
 800a75e:	f016 0608 	ands.w	r6, r6, #8
 800a762:	d1f8      	bne.n	800a756 <_strtol_l.constprop.0+0x22>
 800a764:	2c2d      	cmp	r4, #45	; 0x2d
 800a766:	d12e      	bne.n	800a7c6 <_strtol_l.constprop.0+0x92>
 800a768:	2601      	movs	r6, #1
 800a76a:	782c      	ldrb	r4, [r5, #0]
 800a76c:	1c95      	adds	r5, r2, #2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d057      	beq.n	800a822 <_strtol_l.constprop.0+0xee>
 800a772:	2b10      	cmp	r3, #16
 800a774:	d109      	bne.n	800a78a <_strtol_l.constprop.0+0x56>
 800a776:	2c30      	cmp	r4, #48	; 0x30
 800a778:	d107      	bne.n	800a78a <_strtol_l.constprop.0+0x56>
 800a77a:	782a      	ldrb	r2, [r5, #0]
 800a77c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a780:	2a58      	cmp	r2, #88	; 0x58
 800a782:	d149      	bne.n	800a818 <_strtol_l.constprop.0+0xe4>
 800a784:	2310      	movs	r3, #16
 800a786:	786c      	ldrb	r4, [r5, #1]
 800a788:	3502      	adds	r5, #2
 800a78a:	2200      	movs	r2, #0
 800a78c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a790:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a794:	fbbc f9f3 	udiv	r9, ip, r3
 800a798:	4610      	mov	r0, r2
 800a79a:	fb03 ca19 	mls	sl, r3, r9, ip
 800a79e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a7a2:	2f09      	cmp	r7, #9
 800a7a4:	d814      	bhi.n	800a7d0 <_strtol_l.constprop.0+0x9c>
 800a7a6:	463c      	mov	r4, r7
 800a7a8:	42a3      	cmp	r3, r4
 800a7aa:	dd20      	ble.n	800a7ee <_strtol_l.constprop.0+0xba>
 800a7ac:	1c57      	adds	r7, r2, #1
 800a7ae:	d007      	beq.n	800a7c0 <_strtol_l.constprop.0+0x8c>
 800a7b0:	4581      	cmp	r9, r0
 800a7b2:	d319      	bcc.n	800a7e8 <_strtol_l.constprop.0+0xb4>
 800a7b4:	d101      	bne.n	800a7ba <_strtol_l.constprop.0+0x86>
 800a7b6:	45a2      	cmp	sl, r4
 800a7b8:	db16      	blt.n	800a7e8 <_strtol_l.constprop.0+0xb4>
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	fb00 4003 	mla	r0, r0, r3, r4
 800a7c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7c4:	e7eb      	b.n	800a79e <_strtol_l.constprop.0+0x6a>
 800a7c6:	2c2b      	cmp	r4, #43	; 0x2b
 800a7c8:	bf04      	itt	eq
 800a7ca:	782c      	ldrbeq	r4, [r5, #0]
 800a7cc:	1c95      	addeq	r5, r2, #2
 800a7ce:	e7ce      	b.n	800a76e <_strtol_l.constprop.0+0x3a>
 800a7d0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a7d4:	2f19      	cmp	r7, #25
 800a7d6:	d801      	bhi.n	800a7dc <_strtol_l.constprop.0+0xa8>
 800a7d8:	3c37      	subs	r4, #55	; 0x37
 800a7da:	e7e5      	b.n	800a7a8 <_strtol_l.constprop.0+0x74>
 800a7dc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a7e0:	2f19      	cmp	r7, #25
 800a7e2:	d804      	bhi.n	800a7ee <_strtol_l.constprop.0+0xba>
 800a7e4:	3c57      	subs	r4, #87	; 0x57
 800a7e6:	e7df      	b.n	800a7a8 <_strtol_l.constprop.0+0x74>
 800a7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ec:	e7e8      	b.n	800a7c0 <_strtol_l.constprop.0+0x8c>
 800a7ee:	1c53      	adds	r3, r2, #1
 800a7f0:	d108      	bne.n	800a804 <_strtol_l.constprop.0+0xd0>
 800a7f2:	2322      	movs	r3, #34	; 0x22
 800a7f4:	4660      	mov	r0, ip
 800a7f6:	f8ce 3000 	str.w	r3, [lr]
 800a7fa:	f1b8 0f00 	cmp.w	r8, #0
 800a7fe:	d0a6      	beq.n	800a74e <_strtol_l.constprop.0+0x1a>
 800a800:	1e69      	subs	r1, r5, #1
 800a802:	e006      	b.n	800a812 <_strtol_l.constprop.0+0xde>
 800a804:	b106      	cbz	r6, 800a808 <_strtol_l.constprop.0+0xd4>
 800a806:	4240      	negs	r0, r0
 800a808:	f1b8 0f00 	cmp.w	r8, #0
 800a80c:	d09f      	beq.n	800a74e <_strtol_l.constprop.0+0x1a>
 800a80e:	2a00      	cmp	r2, #0
 800a810:	d1f6      	bne.n	800a800 <_strtol_l.constprop.0+0xcc>
 800a812:	f8c8 1000 	str.w	r1, [r8]
 800a816:	e79a      	b.n	800a74e <_strtol_l.constprop.0+0x1a>
 800a818:	2430      	movs	r4, #48	; 0x30
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1b5      	bne.n	800a78a <_strtol_l.constprop.0+0x56>
 800a81e:	2308      	movs	r3, #8
 800a820:	e7b3      	b.n	800a78a <_strtol_l.constprop.0+0x56>
 800a822:	2c30      	cmp	r4, #48	; 0x30
 800a824:	d0a9      	beq.n	800a77a <_strtol_l.constprop.0+0x46>
 800a826:	230a      	movs	r3, #10
 800a828:	e7af      	b.n	800a78a <_strtol_l.constprop.0+0x56>
 800a82a:	bf00      	nop
 800a82c:	0800d591 	.word	0x0800d591

0800a830 <_strtol_r>:
 800a830:	f7ff bf80 	b.w	800a734 <_strtol_l.constprop.0>

0800a834 <__ssputs_r>:
 800a834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a838:	461f      	mov	r7, r3
 800a83a:	688e      	ldr	r6, [r1, #8]
 800a83c:	4682      	mov	sl, r0
 800a83e:	42be      	cmp	r6, r7
 800a840:	460c      	mov	r4, r1
 800a842:	4690      	mov	r8, r2
 800a844:	680b      	ldr	r3, [r1, #0]
 800a846:	d82c      	bhi.n	800a8a2 <__ssputs_r+0x6e>
 800a848:	898a      	ldrh	r2, [r1, #12]
 800a84a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a84e:	d026      	beq.n	800a89e <__ssputs_r+0x6a>
 800a850:	6965      	ldr	r5, [r4, #20]
 800a852:	6909      	ldr	r1, [r1, #16]
 800a854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a858:	eba3 0901 	sub.w	r9, r3, r1
 800a85c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a860:	1c7b      	adds	r3, r7, #1
 800a862:	444b      	add	r3, r9
 800a864:	106d      	asrs	r5, r5, #1
 800a866:	429d      	cmp	r5, r3
 800a868:	bf38      	it	cc
 800a86a:	461d      	movcc	r5, r3
 800a86c:	0553      	lsls	r3, r2, #21
 800a86e:	d527      	bpl.n	800a8c0 <__ssputs_r+0x8c>
 800a870:	4629      	mov	r1, r5
 800a872:	f7fe fc19 	bl	80090a8 <_malloc_r>
 800a876:	4606      	mov	r6, r0
 800a878:	b360      	cbz	r0, 800a8d4 <__ssputs_r+0xa0>
 800a87a:	464a      	mov	r2, r9
 800a87c:	6921      	ldr	r1, [r4, #16]
 800a87e:	f7fd fd20 	bl	80082c2 <memcpy>
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a88c:	81a3      	strh	r3, [r4, #12]
 800a88e:	6126      	str	r6, [r4, #16]
 800a890:	444e      	add	r6, r9
 800a892:	6026      	str	r6, [r4, #0]
 800a894:	463e      	mov	r6, r7
 800a896:	6165      	str	r5, [r4, #20]
 800a898:	eba5 0509 	sub.w	r5, r5, r9
 800a89c:	60a5      	str	r5, [r4, #8]
 800a89e:	42be      	cmp	r6, r7
 800a8a0:	d900      	bls.n	800a8a4 <__ssputs_r+0x70>
 800a8a2:	463e      	mov	r6, r7
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	4641      	mov	r1, r8
 800a8a8:	6820      	ldr	r0, [r4, #0]
 800a8aa:	f000 fb9d 	bl	800afe8 <memmove>
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	68a3      	ldr	r3, [r4, #8]
 800a8b2:	1b9b      	subs	r3, r3, r6
 800a8b4:	60a3      	str	r3, [r4, #8]
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	4433      	add	r3, r6
 800a8ba:	6023      	str	r3, [r4, #0]
 800a8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c0:	462a      	mov	r2, r5
 800a8c2:	f000 ff70 	bl	800b7a6 <_realloc_r>
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d1e0      	bne.n	800a88e <__ssputs_r+0x5a>
 800a8cc:	4650      	mov	r0, sl
 800a8ce:	6921      	ldr	r1, [r4, #16]
 800a8d0:	f7fe fb7a 	bl	8008fc8 <_free_r>
 800a8d4:	230c      	movs	r3, #12
 800a8d6:	f8ca 3000 	str.w	r3, [sl]
 800a8da:	89a3      	ldrh	r3, [r4, #12]
 800a8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8e4:	81a3      	strh	r3, [r4, #12]
 800a8e6:	e7e9      	b.n	800a8bc <__ssputs_r+0x88>

0800a8e8 <_svfiprintf_r>:
 800a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	4698      	mov	r8, r3
 800a8ee:	898b      	ldrh	r3, [r1, #12]
 800a8f0:	4607      	mov	r7, r0
 800a8f2:	061b      	lsls	r3, r3, #24
 800a8f4:	460d      	mov	r5, r1
 800a8f6:	4614      	mov	r4, r2
 800a8f8:	b09d      	sub	sp, #116	; 0x74
 800a8fa:	d50e      	bpl.n	800a91a <_svfiprintf_r+0x32>
 800a8fc:	690b      	ldr	r3, [r1, #16]
 800a8fe:	b963      	cbnz	r3, 800a91a <_svfiprintf_r+0x32>
 800a900:	2140      	movs	r1, #64	; 0x40
 800a902:	f7fe fbd1 	bl	80090a8 <_malloc_r>
 800a906:	6028      	str	r0, [r5, #0]
 800a908:	6128      	str	r0, [r5, #16]
 800a90a:	b920      	cbnz	r0, 800a916 <_svfiprintf_r+0x2e>
 800a90c:	230c      	movs	r3, #12
 800a90e:	603b      	str	r3, [r7, #0]
 800a910:	f04f 30ff 	mov.w	r0, #4294967295
 800a914:	e0d0      	b.n	800aab8 <_svfiprintf_r+0x1d0>
 800a916:	2340      	movs	r3, #64	; 0x40
 800a918:	616b      	str	r3, [r5, #20]
 800a91a:	2300      	movs	r3, #0
 800a91c:	9309      	str	r3, [sp, #36]	; 0x24
 800a91e:	2320      	movs	r3, #32
 800a920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a924:	2330      	movs	r3, #48	; 0x30
 800a926:	f04f 0901 	mov.w	r9, #1
 800a92a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a92e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800aad0 <_svfiprintf_r+0x1e8>
 800a932:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a936:	4623      	mov	r3, r4
 800a938:	469a      	mov	sl, r3
 800a93a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a93e:	b10a      	cbz	r2, 800a944 <_svfiprintf_r+0x5c>
 800a940:	2a25      	cmp	r2, #37	; 0x25
 800a942:	d1f9      	bne.n	800a938 <_svfiprintf_r+0x50>
 800a944:	ebba 0b04 	subs.w	fp, sl, r4
 800a948:	d00b      	beq.n	800a962 <_svfiprintf_r+0x7a>
 800a94a:	465b      	mov	r3, fp
 800a94c:	4622      	mov	r2, r4
 800a94e:	4629      	mov	r1, r5
 800a950:	4638      	mov	r0, r7
 800a952:	f7ff ff6f 	bl	800a834 <__ssputs_r>
 800a956:	3001      	adds	r0, #1
 800a958:	f000 80a9 	beq.w	800aaae <_svfiprintf_r+0x1c6>
 800a95c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a95e:	445a      	add	r2, fp
 800a960:	9209      	str	r2, [sp, #36]	; 0x24
 800a962:	f89a 3000 	ldrb.w	r3, [sl]
 800a966:	2b00      	cmp	r3, #0
 800a968:	f000 80a1 	beq.w	800aaae <_svfiprintf_r+0x1c6>
 800a96c:	2300      	movs	r3, #0
 800a96e:	f04f 32ff 	mov.w	r2, #4294967295
 800a972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a976:	f10a 0a01 	add.w	sl, sl, #1
 800a97a:	9304      	str	r3, [sp, #16]
 800a97c:	9307      	str	r3, [sp, #28]
 800a97e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a982:	931a      	str	r3, [sp, #104]	; 0x68
 800a984:	4654      	mov	r4, sl
 800a986:	2205      	movs	r2, #5
 800a988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98c:	4850      	ldr	r0, [pc, #320]	; (800aad0 <_svfiprintf_r+0x1e8>)
 800a98e:	f7fd fc8a 	bl	80082a6 <memchr>
 800a992:	9a04      	ldr	r2, [sp, #16]
 800a994:	b9d8      	cbnz	r0, 800a9ce <_svfiprintf_r+0xe6>
 800a996:	06d0      	lsls	r0, r2, #27
 800a998:	bf44      	itt	mi
 800a99a:	2320      	movmi	r3, #32
 800a99c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a0:	0711      	lsls	r1, r2, #28
 800a9a2:	bf44      	itt	mi
 800a9a4:	232b      	movmi	r3, #43	; 0x2b
 800a9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a9b0:	d015      	beq.n	800a9de <_svfiprintf_r+0xf6>
 800a9b2:	4654      	mov	r4, sl
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	f04f 0c0a 	mov.w	ip, #10
 800a9ba:	9a07      	ldr	r2, [sp, #28]
 800a9bc:	4621      	mov	r1, r4
 800a9be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c2:	3b30      	subs	r3, #48	; 0x30
 800a9c4:	2b09      	cmp	r3, #9
 800a9c6:	d94d      	bls.n	800aa64 <_svfiprintf_r+0x17c>
 800a9c8:	b1b0      	cbz	r0, 800a9f8 <_svfiprintf_r+0x110>
 800a9ca:	9207      	str	r2, [sp, #28]
 800a9cc:	e014      	b.n	800a9f8 <_svfiprintf_r+0x110>
 800a9ce:	eba0 0308 	sub.w	r3, r0, r8
 800a9d2:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	46a2      	mov	sl, r4
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	e7d2      	b.n	800a984 <_svfiprintf_r+0x9c>
 800a9de:	9b03      	ldr	r3, [sp, #12]
 800a9e0:	1d19      	adds	r1, r3, #4
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	9103      	str	r1, [sp, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bfbb      	ittet	lt
 800a9ea:	425b      	neglt	r3, r3
 800a9ec:	f042 0202 	orrlt.w	r2, r2, #2
 800a9f0:	9307      	strge	r3, [sp, #28]
 800a9f2:	9307      	strlt	r3, [sp, #28]
 800a9f4:	bfb8      	it	lt
 800a9f6:	9204      	strlt	r2, [sp, #16]
 800a9f8:	7823      	ldrb	r3, [r4, #0]
 800a9fa:	2b2e      	cmp	r3, #46	; 0x2e
 800a9fc:	d10c      	bne.n	800aa18 <_svfiprintf_r+0x130>
 800a9fe:	7863      	ldrb	r3, [r4, #1]
 800aa00:	2b2a      	cmp	r3, #42	; 0x2a
 800aa02:	d134      	bne.n	800aa6e <_svfiprintf_r+0x186>
 800aa04:	9b03      	ldr	r3, [sp, #12]
 800aa06:	3402      	adds	r4, #2
 800aa08:	1d1a      	adds	r2, r3, #4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	9203      	str	r2, [sp, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	bfb8      	it	lt
 800aa12:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa16:	9305      	str	r3, [sp, #20]
 800aa18:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800aad4 <_svfiprintf_r+0x1ec>
 800aa1c:	2203      	movs	r2, #3
 800aa1e:	4650      	mov	r0, sl
 800aa20:	7821      	ldrb	r1, [r4, #0]
 800aa22:	f7fd fc40 	bl	80082a6 <memchr>
 800aa26:	b138      	cbz	r0, 800aa38 <_svfiprintf_r+0x150>
 800aa28:	2240      	movs	r2, #64	; 0x40
 800aa2a:	9b04      	ldr	r3, [sp, #16]
 800aa2c:	eba0 000a 	sub.w	r0, r0, sl
 800aa30:	4082      	lsls	r2, r0
 800aa32:	4313      	orrs	r3, r2
 800aa34:	3401      	adds	r4, #1
 800aa36:	9304      	str	r3, [sp, #16]
 800aa38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa3c:	2206      	movs	r2, #6
 800aa3e:	4826      	ldr	r0, [pc, #152]	; (800aad8 <_svfiprintf_r+0x1f0>)
 800aa40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa44:	f7fd fc2f 	bl	80082a6 <memchr>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d038      	beq.n	800aabe <_svfiprintf_r+0x1d6>
 800aa4c:	4b23      	ldr	r3, [pc, #140]	; (800aadc <_svfiprintf_r+0x1f4>)
 800aa4e:	bb1b      	cbnz	r3, 800aa98 <_svfiprintf_r+0x1b0>
 800aa50:	9b03      	ldr	r3, [sp, #12]
 800aa52:	3307      	adds	r3, #7
 800aa54:	f023 0307 	bic.w	r3, r3, #7
 800aa58:	3308      	adds	r3, #8
 800aa5a:	9303      	str	r3, [sp, #12]
 800aa5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa5e:	4433      	add	r3, r6
 800aa60:	9309      	str	r3, [sp, #36]	; 0x24
 800aa62:	e768      	b.n	800a936 <_svfiprintf_r+0x4e>
 800aa64:	460c      	mov	r4, r1
 800aa66:	2001      	movs	r0, #1
 800aa68:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa6c:	e7a6      	b.n	800a9bc <_svfiprintf_r+0xd4>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f04f 0c0a 	mov.w	ip, #10
 800aa74:	4619      	mov	r1, r3
 800aa76:	3401      	adds	r4, #1
 800aa78:	9305      	str	r3, [sp, #20]
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa80:	3a30      	subs	r2, #48	; 0x30
 800aa82:	2a09      	cmp	r2, #9
 800aa84:	d903      	bls.n	800aa8e <_svfiprintf_r+0x1a6>
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d0c6      	beq.n	800aa18 <_svfiprintf_r+0x130>
 800aa8a:	9105      	str	r1, [sp, #20]
 800aa8c:	e7c4      	b.n	800aa18 <_svfiprintf_r+0x130>
 800aa8e:	4604      	mov	r4, r0
 800aa90:	2301      	movs	r3, #1
 800aa92:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa96:	e7f0      	b.n	800aa7a <_svfiprintf_r+0x192>
 800aa98:	ab03      	add	r3, sp, #12
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	462a      	mov	r2, r5
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	4b0f      	ldr	r3, [pc, #60]	; (800aae0 <_svfiprintf_r+0x1f8>)
 800aaa2:	a904      	add	r1, sp, #16
 800aaa4:	f7fc fbee 	bl	8007284 <_printf_float>
 800aaa8:	1c42      	adds	r2, r0, #1
 800aaaa:	4606      	mov	r6, r0
 800aaac:	d1d6      	bne.n	800aa5c <_svfiprintf_r+0x174>
 800aaae:	89ab      	ldrh	r3, [r5, #12]
 800aab0:	065b      	lsls	r3, r3, #25
 800aab2:	f53f af2d 	bmi.w	800a910 <_svfiprintf_r+0x28>
 800aab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aab8:	b01d      	add	sp, #116	; 0x74
 800aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aabe:	ab03      	add	r3, sp, #12
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	462a      	mov	r2, r5
 800aac4:	4638      	mov	r0, r7
 800aac6:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <_svfiprintf_r+0x1f8>)
 800aac8:	a904      	add	r1, sp, #16
 800aaca:	f7fc fe7b 	bl	80077c4 <_printf_i>
 800aace:	e7eb      	b.n	800aaa8 <_svfiprintf_r+0x1c0>
 800aad0:	0800d691 	.word	0x0800d691
 800aad4:	0800d697 	.word	0x0800d697
 800aad8:	0800d69b 	.word	0x0800d69b
 800aadc:	08007285 	.word	0x08007285
 800aae0:	0800a835 	.word	0x0800a835

0800aae4 <__sfputc_r>:
 800aae4:	6893      	ldr	r3, [r2, #8]
 800aae6:	b410      	push	{r4}
 800aae8:	3b01      	subs	r3, #1
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	6093      	str	r3, [r2, #8]
 800aaee:	da07      	bge.n	800ab00 <__sfputc_r+0x1c>
 800aaf0:	6994      	ldr	r4, [r2, #24]
 800aaf2:	42a3      	cmp	r3, r4
 800aaf4:	db01      	blt.n	800aafa <__sfputc_r+0x16>
 800aaf6:	290a      	cmp	r1, #10
 800aaf8:	d102      	bne.n	800ab00 <__sfputc_r+0x1c>
 800aafa:	bc10      	pop	{r4}
 800aafc:	f000 b9de 	b.w	800aebc <__swbuf_r>
 800ab00:	6813      	ldr	r3, [r2, #0]
 800ab02:	1c58      	adds	r0, r3, #1
 800ab04:	6010      	str	r0, [r2, #0]
 800ab06:	7019      	strb	r1, [r3, #0]
 800ab08:	4608      	mov	r0, r1
 800ab0a:	bc10      	pop	{r4}
 800ab0c:	4770      	bx	lr

0800ab0e <__sfputs_r>:
 800ab0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab10:	4606      	mov	r6, r0
 800ab12:	460f      	mov	r7, r1
 800ab14:	4614      	mov	r4, r2
 800ab16:	18d5      	adds	r5, r2, r3
 800ab18:	42ac      	cmp	r4, r5
 800ab1a:	d101      	bne.n	800ab20 <__sfputs_r+0x12>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e007      	b.n	800ab30 <__sfputs_r+0x22>
 800ab20:	463a      	mov	r2, r7
 800ab22:	4630      	mov	r0, r6
 800ab24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab28:	f7ff ffdc 	bl	800aae4 <__sfputc_r>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	d1f3      	bne.n	800ab18 <__sfputs_r+0xa>
 800ab30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab34 <_vfiprintf_r>:
 800ab34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab38:	460d      	mov	r5, r1
 800ab3a:	4614      	mov	r4, r2
 800ab3c:	4698      	mov	r8, r3
 800ab3e:	4606      	mov	r6, r0
 800ab40:	b09d      	sub	sp, #116	; 0x74
 800ab42:	b118      	cbz	r0, 800ab4c <_vfiprintf_r+0x18>
 800ab44:	6a03      	ldr	r3, [r0, #32]
 800ab46:	b90b      	cbnz	r3, 800ab4c <_vfiprintf_r+0x18>
 800ab48:	f7fd f9f8 	bl	8007f3c <__sinit>
 800ab4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab4e:	07d9      	lsls	r1, r3, #31
 800ab50:	d405      	bmi.n	800ab5e <_vfiprintf_r+0x2a>
 800ab52:	89ab      	ldrh	r3, [r5, #12]
 800ab54:	059a      	lsls	r2, r3, #22
 800ab56:	d402      	bmi.n	800ab5e <_vfiprintf_r+0x2a>
 800ab58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab5a:	f7fd fba2 	bl	80082a2 <__retarget_lock_acquire_recursive>
 800ab5e:	89ab      	ldrh	r3, [r5, #12]
 800ab60:	071b      	lsls	r3, r3, #28
 800ab62:	d501      	bpl.n	800ab68 <_vfiprintf_r+0x34>
 800ab64:	692b      	ldr	r3, [r5, #16]
 800ab66:	b99b      	cbnz	r3, 800ab90 <_vfiprintf_r+0x5c>
 800ab68:	4629      	mov	r1, r5
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	f000 f9e4 	bl	800af38 <__swsetup_r>
 800ab70:	b170      	cbz	r0, 800ab90 <_vfiprintf_r+0x5c>
 800ab72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab74:	07dc      	lsls	r4, r3, #31
 800ab76:	d504      	bpl.n	800ab82 <_vfiprintf_r+0x4e>
 800ab78:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7c:	b01d      	add	sp, #116	; 0x74
 800ab7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab82:	89ab      	ldrh	r3, [r5, #12]
 800ab84:	0598      	lsls	r0, r3, #22
 800ab86:	d4f7      	bmi.n	800ab78 <_vfiprintf_r+0x44>
 800ab88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab8a:	f7fd fb8b 	bl	80082a4 <__retarget_lock_release_recursive>
 800ab8e:	e7f3      	b.n	800ab78 <_vfiprintf_r+0x44>
 800ab90:	2300      	movs	r3, #0
 800ab92:	9309      	str	r3, [sp, #36]	; 0x24
 800ab94:	2320      	movs	r3, #32
 800ab96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab9a:	2330      	movs	r3, #48	; 0x30
 800ab9c:	f04f 0901 	mov.w	r9, #1
 800aba0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aba4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800ad54 <_vfiprintf_r+0x220>
 800aba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abac:	4623      	mov	r3, r4
 800abae:	469a      	mov	sl, r3
 800abb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abb4:	b10a      	cbz	r2, 800abba <_vfiprintf_r+0x86>
 800abb6:	2a25      	cmp	r2, #37	; 0x25
 800abb8:	d1f9      	bne.n	800abae <_vfiprintf_r+0x7a>
 800abba:	ebba 0b04 	subs.w	fp, sl, r4
 800abbe:	d00b      	beq.n	800abd8 <_vfiprintf_r+0xa4>
 800abc0:	465b      	mov	r3, fp
 800abc2:	4622      	mov	r2, r4
 800abc4:	4629      	mov	r1, r5
 800abc6:	4630      	mov	r0, r6
 800abc8:	f7ff ffa1 	bl	800ab0e <__sfputs_r>
 800abcc:	3001      	adds	r0, #1
 800abce:	f000 80a9 	beq.w	800ad24 <_vfiprintf_r+0x1f0>
 800abd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd4:	445a      	add	r2, fp
 800abd6:	9209      	str	r2, [sp, #36]	; 0x24
 800abd8:	f89a 3000 	ldrb.w	r3, [sl]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f000 80a1 	beq.w	800ad24 <_vfiprintf_r+0x1f0>
 800abe2:	2300      	movs	r3, #0
 800abe4:	f04f 32ff 	mov.w	r2, #4294967295
 800abe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abec:	f10a 0a01 	add.w	sl, sl, #1
 800abf0:	9304      	str	r3, [sp, #16]
 800abf2:	9307      	str	r3, [sp, #28]
 800abf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abf8:	931a      	str	r3, [sp, #104]	; 0x68
 800abfa:	4654      	mov	r4, sl
 800abfc:	2205      	movs	r2, #5
 800abfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac02:	4854      	ldr	r0, [pc, #336]	; (800ad54 <_vfiprintf_r+0x220>)
 800ac04:	f7fd fb4f 	bl	80082a6 <memchr>
 800ac08:	9a04      	ldr	r2, [sp, #16]
 800ac0a:	b9d8      	cbnz	r0, 800ac44 <_vfiprintf_r+0x110>
 800ac0c:	06d1      	lsls	r1, r2, #27
 800ac0e:	bf44      	itt	mi
 800ac10:	2320      	movmi	r3, #32
 800ac12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac16:	0713      	lsls	r3, r2, #28
 800ac18:	bf44      	itt	mi
 800ac1a:	232b      	movmi	r3, #43	; 0x2b
 800ac1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac20:	f89a 3000 	ldrb.w	r3, [sl]
 800ac24:	2b2a      	cmp	r3, #42	; 0x2a
 800ac26:	d015      	beq.n	800ac54 <_vfiprintf_r+0x120>
 800ac28:	4654      	mov	r4, sl
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	f04f 0c0a 	mov.w	ip, #10
 800ac30:	9a07      	ldr	r2, [sp, #28]
 800ac32:	4621      	mov	r1, r4
 800ac34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac38:	3b30      	subs	r3, #48	; 0x30
 800ac3a:	2b09      	cmp	r3, #9
 800ac3c:	d94d      	bls.n	800acda <_vfiprintf_r+0x1a6>
 800ac3e:	b1b0      	cbz	r0, 800ac6e <_vfiprintf_r+0x13a>
 800ac40:	9207      	str	r2, [sp, #28]
 800ac42:	e014      	b.n	800ac6e <_vfiprintf_r+0x13a>
 800ac44:	eba0 0308 	sub.w	r3, r0, r8
 800ac48:	fa09 f303 	lsl.w	r3, r9, r3
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	46a2      	mov	sl, r4
 800ac50:	9304      	str	r3, [sp, #16]
 800ac52:	e7d2      	b.n	800abfa <_vfiprintf_r+0xc6>
 800ac54:	9b03      	ldr	r3, [sp, #12]
 800ac56:	1d19      	adds	r1, r3, #4
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	9103      	str	r1, [sp, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	bfbb      	ittet	lt
 800ac60:	425b      	neglt	r3, r3
 800ac62:	f042 0202 	orrlt.w	r2, r2, #2
 800ac66:	9307      	strge	r3, [sp, #28]
 800ac68:	9307      	strlt	r3, [sp, #28]
 800ac6a:	bfb8      	it	lt
 800ac6c:	9204      	strlt	r2, [sp, #16]
 800ac6e:	7823      	ldrb	r3, [r4, #0]
 800ac70:	2b2e      	cmp	r3, #46	; 0x2e
 800ac72:	d10c      	bne.n	800ac8e <_vfiprintf_r+0x15a>
 800ac74:	7863      	ldrb	r3, [r4, #1]
 800ac76:	2b2a      	cmp	r3, #42	; 0x2a
 800ac78:	d134      	bne.n	800ace4 <_vfiprintf_r+0x1b0>
 800ac7a:	9b03      	ldr	r3, [sp, #12]
 800ac7c:	3402      	adds	r4, #2
 800ac7e:	1d1a      	adds	r2, r3, #4
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	9203      	str	r2, [sp, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bfb8      	it	lt
 800ac88:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac8c:	9305      	str	r3, [sp, #20]
 800ac8e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad58 <_vfiprintf_r+0x224>
 800ac92:	2203      	movs	r2, #3
 800ac94:	4650      	mov	r0, sl
 800ac96:	7821      	ldrb	r1, [r4, #0]
 800ac98:	f7fd fb05 	bl	80082a6 <memchr>
 800ac9c:	b138      	cbz	r0, 800acae <_vfiprintf_r+0x17a>
 800ac9e:	2240      	movs	r2, #64	; 0x40
 800aca0:	9b04      	ldr	r3, [sp, #16]
 800aca2:	eba0 000a 	sub.w	r0, r0, sl
 800aca6:	4082      	lsls	r2, r0
 800aca8:	4313      	orrs	r3, r2
 800acaa:	3401      	adds	r4, #1
 800acac:	9304      	str	r3, [sp, #16]
 800acae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb2:	2206      	movs	r2, #6
 800acb4:	4829      	ldr	r0, [pc, #164]	; (800ad5c <_vfiprintf_r+0x228>)
 800acb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acba:	f7fd faf4 	bl	80082a6 <memchr>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d03f      	beq.n	800ad42 <_vfiprintf_r+0x20e>
 800acc2:	4b27      	ldr	r3, [pc, #156]	; (800ad60 <_vfiprintf_r+0x22c>)
 800acc4:	bb1b      	cbnz	r3, 800ad0e <_vfiprintf_r+0x1da>
 800acc6:	9b03      	ldr	r3, [sp, #12]
 800acc8:	3307      	adds	r3, #7
 800acca:	f023 0307 	bic.w	r3, r3, #7
 800acce:	3308      	adds	r3, #8
 800acd0:	9303      	str	r3, [sp, #12]
 800acd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd4:	443b      	add	r3, r7
 800acd6:	9309      	str	r3, [sp, #36]	; 0x24
 800acd8:	e768      	b.n	800abac <_vfiprintf_r+0x78>
 800acda:	460c      	mov	r4, r1
 800acdc:	2001      	movs	r0, #1
 800acde:	fb0c 3202 	mla	r2, ip, r2, r3
 800ace2:	e7a6      	b.n	800ac32 <_vfiprintf_r+0xfe>
 800ace4:	2300      	movs	r3, #0
 800ace6:	f04f 0c0a 	mov.w	ip, #10
 800acea:	4619      	mov	r1, r3
 800acec:	3401      	adds	r4, #1
 800acee:	9305      	str	r3, [sp, #20]
 800acf0:	4620      	mov	r0, r4
 800acf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acf6:	3a30      	subs	r2, #48	; 0x30
 800acf8:	2a09      	cmp	r2, #9
 800acfa:	d903      	bls.n	800ad04 <_vfiprintf_r+0x1d0>
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d0c6      	beq.n	800ac8e <_vfiprintf_r+0x15a>
 800ad00:	9105      	str	r1, [sp, #20]
 800ad02:	e7c4      	b.n	800ac8e <_vfiprintf_r+0x15a>
 800ad04:	4604      	mov	r4, r0
 800ad06:	2301      	movs	r3, #1
 800ad08:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad0c:	e7f0      	b.n	800acf0 <_vfiprintf_r+0x1bc>
 800ad0e:	ab03      	add	r3, sp, #12
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	462a      	mov	r2, r5
 800ad14:	4630      	mov	r0, r6
 800ad16:	4b13      	ldr	r3, [pc, #76]	; (800ad64 <_vfiprintf_r+0x230>)
 800ad18:	a904      	add	r1, sp, #16
 800ad1a:	f7fc fab3 	bl	8007284 <_printf_float>
 800ad1e:	4607      	mov	r7, r0
 800ad20:	1c78      	adds	r0, r7, #1
 800ad22:	d1d6      	bne.n	800acd2 <_vfiprintf_r+0x19e>
 800ad24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad26:	07d9      	lsls	r1, r3, #31
 800ad28:	d405      	bmi.n	800ad36 <_vfiprintf_r+0x202>
 800ad2a:	89ab      	ldrh	r3, [r5, #12]
 800ad2c:	059a      	lsls	r2, r3, #22
 800ad2e:	d402      	bmi.n	800ad36 <_vfiprintf_r+0x202>
 800ad30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad32:	f7fd fab7 	bl	80082a4 <__retarget_lock_release_recursive>
 800ad36:	89ab      	ldrh	r3, [r5, #12]
 800ad38:	065b      	lsls	r3, r3, #25
 800ad3a:	f53f af1d 	bmi.w	800ab78 <_vfiprintf_r+0x44>
 800ad3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad40:	e71c      	b.n	800ab7c <_vfiprintf_r+0x48>
 800ad42:	ab03      	add	r3, sp, #12
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	462a      	mov	r2, r5
 800ad48:	4630      	mov	r0, r6
 800ad4a:	4b06      	ldr	r3, [pc, #24]	; (800ad64 <_vfiprintf_r+0x230>)
 800ad4c:	a904      	add	r1, sp, #16
 800ad4e:	f7fc fd39 	bl	80077c4 <_printf_i>
 800ad52:	e7e4      	b.n	800ad1e <_vfiprintf_r+0x1ea>
 800ad54:	0800d691 	.word	0x0800d691
 800ad58:	0800d697 	.word	0x0800d697
 800ad5c:	0800d69b 	.word	0x0800d69b
 800ad60:	08007285 	.word	0x08007285
 800ad64:	0800ab0f 	.word	0x0800ab0f

0800ad68 <__sflush_r>:
 800ad68:	898a      	ldrh	r2, [r1, #12]
 800ad6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6c:	4605      	mov	r5, r0
 800ad6e:	0710      	lsls	r0, r2, #28
 800ad70:	460c      	mov	r4, r1
 800ad72:	d457      	bmi.n	800ae24 <__sflush_r+0xbc>
 800ad74:	684b      	ldr	r3, [r1, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	dc04      	bgt.n	800ad84 <__sflush_r+0x1c>
 800ad7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	dc01      	bgt.n	800ad84 <__sflush_r+0x1c>
 800ad80:	2000      	movs	r0, #0
 800ad82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad86:	2e00      	cmp	r6, #0
 800ad88:	d0fa      	beq.n	800ad80 <__sflush_r+0x18>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad90:	682f      	ldr	r7, [r5, #0]
 800ad92:	6a21      	ldr	r1, [r4, #32]
 800ad94:	602b      	str	r3, [r5, #0]
 800ad96:	d032      	beq.n	800adfe <__sflush_r+0x96>
 800ad98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	075a      	lsls	r2, r3, #29
 800ad9e:	d505      	bpl.n	800adac <__sflush_r+0x44>
 800ada0:	6863      	ldr	r3, [r4, #4]
 800ada2:	1ac0      	subs	r0, r0, r3
 800ada4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ada6:	b10b      	cbz	r3, 800adac <__sflush_r+0x44>
 800ada8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adaa:	1ac0      	subs	r0, r0, r3
 800adac:	2300      	movs	r3, #0
 800adae:	4602      	mov	r2, r0
 800adb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adb2:	4628      	mov	r0, r5
 800adb4:	6a21      	ldr	r1, [r4, #32]
 800adb6:	47b0      	blx	r6
 800adb8:	1c43      	adds	r3, r0, #1
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	d106      	bne.n	800adcc <__sflush_r+0x64>
 800adbe:	6829      	ldr	r1, [r5, #0]
 800adc0:	291d      	cmp	r1, #29
 800adc2:	d82b      	bhi.n	800ae1c <__sflush_r+0xb4>
 800adc4:	4a28      	ldr	r2, [pc, #160]	; (800ae68 <__sflush_r+0x100>)
 800adc6:	410a      	asrs	r2, r1
 800adc8:	07d6      	lsls	r6, r2, #31
 800adca:	d427      	bmi.n	800ae1c <__sflush_r+0xb4>
 800adcc:	2200      	movs	r2, #0
 800adce:	6062      	str	r2, [r4, #4]
 800add0:	6922      	ldr	r2, [r4, #16]
 800add2:	04d9      	lsls	r1, r3, #19
 800add4:	6022      	str	r2, [r4, #0]
 800add6:	d504      	bpl.n	800ade2 <__sflush_r+0x7a>
 800add8:	1c42      	adds	r2, r0, #1
 800adda:	d101      	bne.n	800ade0 <__sflush_r+0x78>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	b903      	cbnz	r3, 800ade2 <__sflush_r+0x7a>
 800ade0:	6560      	str	r0, [r4, #84]	; 0x54
 800ade2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ade4:	602f      	str	r7, [r5, #0]
 800ade6:	2900      	cmp	r1, #0
 800ade8:	d0ca      	beq.n	800ad80 <__sflush_r+0x18>
 800adea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adee:	4299      	cmp	r1, r3
 800adf0:	d002      	beq.n	800adf8 <__sflush_r+0x90>
 800adf2:	4628      	mov	r0, r5
 800adf4:	f7fe f8e8 	bl	8008fc8 <_free_r>
 800adf8:	2000      	movs	r0, #0
 800adfa:	6360      	str	r0, [r4, #52]	; 0x34
 800adfc:	e7c1      	b.n	800ad82 <__sflush_r+0x1a>
 800adfe:	2301      	movs	r3, #1
 800ae00:	4628      	mov	r0, r5
 800ae02:	47b0      	blx	r6
 800ae04:	1c41      	adds	r1, r0, #1
 800ae06:	d1c8      	bne.n	800ad9a <__sflush_r+0x32>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d0c5      	beq.n	800ad9a <__sflush_r+0x32>
 800ae0e:	2b1d      	cmp	r3, #29
 800ae10:	d001      	beq.n	800ae16 <__sflush_r+0xae>
 800ae12:	2b16      	cmp	r3, #22
 800ae14:	d101      	bne.n	800ae1a <__sflush_r+0xb2>
 800ae16:	602f      	str	r7, [r5, #0]
 800ae18:	e7b2      	b.n	800ad80 <__sflush_r+0x18>
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae20:	81a3      	strh	r3, [r4, #12]
 800ae22:	e7ae      	b.n	800ad82 <__sflush_r+0x1a>
 800ae24:	690f      	ldr	r7, [r1, #16]
 800ae26:	2f00      	cmp	r7, #0
 800ae28:	d0aa      	beq.n	800ad80 <__sflush_r+0x18>
 800ae2a:	0793      	lsls	r3, r2, #30
 800ae2c:	bf18      	it	ne
 800ae2e:	2300      	movne	r3, #0
 800ae30:	680e      	ldr	r6, [r1, #0]
 800ae32:	bf08      	it	eq
 800ae34:	694b      	ldreq	r3, [r1, #20]
 800ae36:	1bf6      	subs	r6, r6, r7
 800ae38:	600f      	str	r7, [r1, #0]
 800ae3a:	608b      	str	r3, [r1, #8]
 800ae3c:	2e00      	cmp	r6, #0
 800ae3e:	dd9f      	ble.n	800ad80 <__sflush_r+0x18>
 800ae40:	4633      	mov	r3, r6
 800ae42:	463a      	mov	r2, r7
 800ae44:	4628      	mov	r0, r5
 800ae46:	6a21      	ldr	r1, [r4, #32]
 800ae48:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ae4c:	47e0      	blx	ip
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	dc06      	bgt.n	800ae60 <__sflush_r+0xf8>
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295
 800ae58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae5c:	81a3      	strh	r3, [r4, #12]
 800ae5e:	e790      	b.n	800ad82 <__sflush_r+0x1a>
 800ae60:	4407      	add	r7, r0
 800ae62:	1a36      	subs	r6, r6, r0
 800ae64:	e7ea      	b.n	800ae3c <__sflush_r+0xd4>
 800ae66:	bf00      	nop
 800ae68:	dfbffffe 	.word	0xdfbffffe

0800ae6c <_fflush_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	690b      	ldr	r3, [r1, #16]
 800ae70:	4605      	mov	r5, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	b913      	cbnz	r3, 800ae7c <_fflush_r+0x10>
 800ae76:	2500      	movs	r5, #0
 800ae78:	4628      	mov	r0, r5
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	b118      	cbz	r0, 800ae86 <_fflush_r+0x1a>
 800ae7e:	6a03      	ldr	r3, [r0, #32]
 800ae80:	b90b      	cbnz	r3, 800ae86 <_fflush_r+0x1a>
 800ae82:	f7fd f85b 	bl	8007f3c <__sinit>
 800ae86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d0f3      	beq.n	800ae76 <_fflush_r+0xa>
 800ae8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae90:	07d0      	lsls	r0, r2, #31
 800ae92:	d404      	bmi.n	800ae9e <_fflush_r+0x32>
 800ae94:	0599      	lsls	r1, r3, #22
 800ae96:	d402      	bmi.n	800ae9e <_fflush_r+0x32>
 800ae98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae9a:	f7fd fa02 	bl	80082a2 <__retarget_lock_acquire_recursive>
 800ae9e:	4628      	mov	r0, r5
 800aea0:	4621      	mov	r1, r4
 800aea2:	f7ff ff61 	bl	800ad68 <__sflush_r>
 800aea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aea8:	4605      	mov	r5, r0
 800aeaa:	07da      	lsls	r2, r3, #31
 800aeac:	d4e4      	bmi.n	800ae78 <_fflush_r+0xc>
 800aeae:	89a3      	ldrh	r3, [r4, #12]
 800aeb0:	059b      	lsls	r3, r3, #22
 800aeb2:	d4e1      	bmi.n	800ae78 <_fflush_r+0xc>
 800aeb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeb6:	f7fd f9f5 	bl	80082a4 <__retarget_lock_release_recursive>
 800aeba:	e7dd      	b.n	800ae78 <_fflush_r+0xc>

0800aebc <__swbuf_r>:
 800aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aebe:	460e      	mov	r6, r1
 800aec0:	4614      	mov	r4, r2
 800aec2:	4605      	mov	r5, r0
 800aec4:	b118      	cbz	r0, 800aece <__swbuf_r+0x12>
 800aec6:	6a03      	ldr	r3, [r0, #32]
 800aec8:	b90b      	cbnz	r3, 800aece <__swbuf_r+0x12>
 800aeca:	f7fd f837 	bl	8007f3c <__sinit>
 800aece:	69a3      	ldr	r3, [r4, #24]
 800aed0:	60a3      	str	r3, [r4, #8]
 800aed2:	89a3      	ldrh	r3, [r4, #12]
 800aed4:	071a      	lsls	r2, r3, #28
 800aed6:	d525      	bpl.n	800af24 <__swbuf_r+0x68>
 800aed8:	6923      	ldr	r3, [r4, #16]
 800aeda:	b31b      	cbz	r3, 800af24 <__swbuf_r+0x68>
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	6922      	ldr	r2, [r4, #16]
 800aee0:	b2f6      	uxtb	r6, r6
 800aee2:	1a98      	subs	r0, r3, r2
 800aee4:	6963      	ldr	r3, [r4, #20]
 800aee6:	4637      	mov	r7, r6
 800aee8:	4283      	cmp	r3, r0
 800aeea:	dc04      	bgt.n	800aef6 <__swbuf_r+0x3a>
 800aeec:	4621      	mov	r1, r4
 800aeee:	4628      	mov	r0, r5
 800aef0:	f7ff ffbc 	bl	800ae6c <_fflush_r>
 800aef4:	b9e0      	cbnz	r0, 800af30 <__swbuf_r+0x74>
 800aef6:	68a3      	ldr	r3, [r4, #8]
 800aef8:	3b01      	subs	r3, #1
 800aefa:	60a3      	str	r3, [r4, #8]
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	1c5a      	adds	r2, r3, #1
 800af00:	6022      	str	r2, [r4, #0]
 800af02:	701e      	strb	r6, [r3, #0]
 800af04:	6962      	ldr	r2, [r4, #20]
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	429a      	cmp	r2, r3
 800af0a:	d004      	beq.n	800af16 <__swbuf_r+0x5a>
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	07db      	lsls	r3, r3, #31
 800af10:	d506      	bpl.n	800af20 <__swbuf_r+0x64>
 800af12:	2e0a      	cmp	r6, #10
 800af14:	d104      	bne.n	800af20 <__swbuf_r+0x64>
 800af16:	4621      	mov	r1, r4
 800af18:	4628      	mov	r0, r5
 800af1a:	f7ff ffa7 	bl	800ae6c <_fflush_r>
 800af1e:	b938      	cbnz	r0, 800af30 <__swbuf_r+0x74>
 800af20:	4638      	mov	r0, r7
 800af22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af24:	4621      	mov	r1, r4
 800af26:	4628      	mov	r0, r5
 800af28:	f000 f806 	bl	800af38 <__swsetup_r>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d0d5      	beq.n	800aedc <__swbuf_r+0x20>
 800af30:	f04f 37ff 	mov.w	r7, #4294967295
 800af34:	e7f4      	b.n	800af20 <__swbuf_r+0x64>
	...

0800af38 <__swsetup_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	4b2a      	ldr	r3, [pc, #168]	; (800afe4 <__swsetup_r+0xac>)
 800af3c:	4605      	mov	r5, r0
 800af3e:	6818      	ldr	r0, [r3, #0]
 800af40:	460c      	mov	r4, r1
 800af42:	b118      	cbz	r0, 800af4c <__swsetup_r+0x14>
 800af44:	6a03      	ldr	r3, [r0, #32]
 800af46:	b90b      	cbnz	r3, 800af4c <__swsetup_r+0x14>
 800af48:	f7fc fff8 	bl	8007f3c <__sinit>
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af52:	0718      	lsls	r0, r3, #28
 800af54:	d422      	bmi.n	800af9c <__swsetup_r+0x64>
 800af56:	06d9      	lsls	r1, r3, #27
 800af58:	d407      	bmi.n	800af6a <__swsetup_r+0x32>
 800af5a:	2309      	movs	r3, #9
 800af5c:	602b      	str	r3, [r5, #0]
 800af5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af62:	f04f 30ff 	mov.w	r0, #4294967295
 800af66:	81a3      	strh	r3, [r4, #12]
 800af68:	e034      	b.n	800afd4 <__swsetup_r+0x9c>
 800af6a:	0758      	lsls	r0, r3, #29
 800af6c:	d512      	bpl.n	800af94 <__swsetup_r+0x5c>
 800af6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af70:	b141      	cbz	r1, 800af84 <__swsetup_r+0x4c>
 800af72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af76:	4299      	cmp	r1, r3
 800af78:	d002      	beq.n	800af80 <__swsetup_r+0x48>
 800af7a:	4628      	mov	r0, r5
 800af7c:	f7fe f824 	bl	8008fc8 <_free_r>
 800af80:	2300      	movs	r3, #0
 800af82:	6363      	str	r3, [r4, #52]	; 0x34
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af8a:	81a3      	strh	r3, [r4, #12]
 800af8c:	2300      	movs	r3, #0
 800af8e:	6063      	str	r3, [r4, #4]
 800af90:	6923      	ldr	r3, [r4, #16]
 800af92:	6023      	str	r3, [r4, #0]
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	f043 0308 	orr.w	r3, r3, #8
 800af9a:	81a3      	strh	r3, [r4, #12]
 800af9c:	6923      	ldr	r3, [r4, #16]
 800af9e:	b94b      	cbnz	r3, 800afb4 <__swsetup_r+0x7c>
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afaa:	d003      	beq.n	800afb4 <__swsetup_r+0x7c>
 800afac:	4621      	mov	r1, r4
 800afae:	4628      	mov	r0, r5
 800afb0:	f000 fc6d 	bl	800b88e <__smakebuf_r>
 800afb4:	89a0      	ldrh	r0, [r4, #12]
 800afb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afba:	f010 0301 	ands.w	r3, r0, #1
 800afbe:	d00a      	beq.n	800afd6 <__swsetup_r+0x9e>
 800afc0:	2300      	movs	r3, #0
 800afc2:	60a3      	str	r3, [r4, #8]
 800afc4:	6963      	ldr	r3, [r4, #20]
 800afc6:	425b      	negs	r3, r3
 800afc8:	61a3      	str	r3, [r4, #24]
 800afca:	6923      	ldr	r3, [r4, #16]
 800afcc:	b943      	cbnz	r3, 800afe0 <__swsetup_r+0xa8>
 800afce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afd2:	d1c4      	bne.n	800af5e <__swsetup_r+0x26>
 800afd4:	bd38      	pop	{r3, r4, r5, pc}
 800afd6:	0781      	lsls	r1, r0, #30
 800afd8:	bf58      	it	pl
 800afda:	6963      	ldrpl	r3, [r4, #20]
 800afdc:	60a3      	str	r3, [r4, #8]
 800afde:	e7f4      	b.n	800afca <__swsetup_r+0x92>
 800afe0:	2000      	movs	r0, #0
 800afe2:	e7f7      	b.n	800afd4 <__swsetup_r+0x9c>
 800afe4:	20000084 	.word	0x20000084

0800afe8 <memmove>:
 800afe8:	4288      	cmp	r0, r1
 800afea:	b510      	push	{r4, lr}
 800afec:	eb01 0402 	add.w	r4, r1, r2
 800aff0:	d902      	bls.n	800aff8 <memmove+0x10>
 800aff2:	4284      	cmp	r4, r0
 800aff4:	4623      	mov	r3, r4
 800aff6:	d807      	bhi.n	800b008 <memmove+0x20>
 800aff8:	1e43      	subs	r3, r0, #1
 800affa:	42a1      	cmp	r1, r4
 800affc:	d008      	beq.n	800b010 <memmove+0x28>
 800affe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b002:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b006:	e7f8      	b.n	800affa <memmove+0x12>
 800b008:	4601      	mov	r1, r0
 800b00a:	4402      	add	r2, r0
 800b00c:	428a      	cmp	r2, r1
 800b00e:	d100      	bne.n	800b012 <memmove+0x2a>
 800b010:	bd10      	pop	{r4, pc}
 800b012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b01a:	e7f7      	b.n	800b00c <memmove+0x24>

0800b01c <strncmp>:
 800b01c:	b510      	push	{r4, lr}
 800b01e:	b16a      	cbz	r2, 800b03c <strncmp+0x20>
 800b020:	3901      	subs	r1, #1
 800b022:	1884      	adds	r4, r0, r2
 800b024:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b028:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d103      	bne.n	800b038 <strncmp+0x1c>
 800b030:	42a0      	cmp	r0, r4
 800b032:	d001      	beq.n	800b038 <strncmp+0x1c>
 800b034:	2a00      	cmp	r2, #0
 800b036:	d1f5      	bne.n	800b024 <strncmp+0x8>
 800b038:	1ad0      	subs	r0, r2, r3
 800b03a:	bd10      	pop	{r4, pc}
 800b03c:	4610      	mov	r0, r2
 800b03e:	e7fc      	b.n	800b03a <strncmp+0x1e>

0800b040 <_sbrk_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	2300      	movs	r3, #0
 800b044:	4d05      	ldr	r5, [pc, #20]	; (800b05c <_sbrk_r+0x1c>)
 800b046:	4604      	mov	r4, r0
 800b048:	4608      	mov	r0, r1
 800b04a:	602b      	str	r3, [r5, #0]
 800b04c:	f7f8 fe3c 	bl	8003cc8 <_sbrk>
 800b050:	1c43      	adds	r3, r0, #1
 800b052:	d102      	bne.n	800b05a <_sbrk_r+0x1a>
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	b103      	cbz	r3, 800b05a <_sbrk_r+0x1a>
 800b058:	6023      	str	r3, [r4, #0]
 800b05a:	bd38      	pop	{r3, r4, r5, pc}
 800b05c:	20001904 	.word	0x20001904

0800b060 <nan>:
 800b060:	2000      	movs	r0, #0
 800b062:	4901      	ldr	r1, [pc, #4]	; (800b068 <nan+0x8>)
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	7ff80000 	.word	0x7ff80000

0800b06c <__assert_func>:
 800b06c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b06e:	4614      	mov	r4, r2
 800b070:	461a      	mov	r2, r3
 800b072:	4b09      	ldr	r3, [pc, #36]	; (800b098 <__assert_func+0x2c>)
 800b074:	4605      	mov	r5, r0
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68d8      	ldr	r0, [r3, #12]
 800b07a:	b14c      	cbz	r4, 800b090 <__assert_func+0x24>
 800b07c:	4b07      	ldr	r3, [pc, #28]	; (800b09c <__assert_func+0x30>)
 800b07e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b082:	9100      	str	r1, [sp, #0]
 800b084:	462b      	mov	r3, r5
 800b086:	4906      	ldr	r1, [pc, #24]	; (800b0a0 <__assert_func+0x34>)
 800b088:	f000 fbca 	bl	800b820 <fiprintf>
 800b08c:	f000 fc5e 	bl	800b94c <abort>
 800b090:	4b04      	ldr	r3, [pc, #16]	; (800b0a4 <__assert_func+0x38>)
 800b092:	461c      	mov	r4, r3
 800b094:	e7f3      	b.n	800b07e <__assert_func+0x12>
 800b096:	bf00      	nop
 800b098:	20000084 	.word	0x20000084
 800b09c:	0800d6aa 	.word	0x0800d6aa
 800b0a0:	0800d6b7 	.word	0x0800d6b7
 800b0a4:	0800d6e5 	.word	0x0800d6e5

0800b0a8 <_calloc_r>:
 800b0a8:	b570      	push	{r4, r5, r6, lr}
 800b0aa:	fba1 5402 	umull	r5, r4, r1, r2
 800b0ae:	b934      	cbnz	r4, 800b0be <_calloc_r+0x16>
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	f7fd fff9 	bl	80090a8 <_malloc_r>
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	b928      	cbnz	r0, 800b0c6 <_calloc_r+0x1e>
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	bd70      	pop	{r4, r5, r6, pc}
 800b0be:	220c      	movs	r2, #12
 800b0c0:	2600      	movs	r6, #0
 800b0c2:	6002      	str	r2, [r0, #0]
 800b0c4:	e7f9      	b.n	800b0ba <_calloc_r+0x12>
 800b0c6:	462a      	mov	r2, r5
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	f7fd f816 	bl	80080fa <memset>
 800b0ce:	e7f4      	b.n	800b0ba <_calloc_r+0x12>

0800b0d0 <rshift>:
 800b0d0:	6903      	ldr	r3, [r0, #16]
 800b0d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b0da:	f100 0414 	add.w	r4, r0, #20
 800b0de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b0e2:	dd46      	ble.n	800b172 <rshift+0xa2>
 800b0e4:	f011 011f 	ands.w	r1, r1, #31
 800b0e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b0ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b0f0:	d10c      	bne.n	800b10c <rshift+0x3c>
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	f100 0710 	add.w	r7, r0, #16
 800b0f8:	42b1      	cmp	r1, r6
 800b0fa:	d335      	bcc.n	800b168 <rshift+0x98>
 800b0fc:	1a9b      	subs	r3, r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	1eea      	subs	r2, r5, #3
 800b102:	4296      	cmp	r6, r2
 800b104:	bf38      	it	cc
 800b106:	2300      	movcc	r3, #0
 800b108:	4423      	add	r3, r4
 800b10a:	e015      	b.n	800b138 <rshift+0x68>
 800b10c:	46a1      	mov	r9, r4
 800b10e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b112:	f1c1 0820 	rsb	r8, r1, #32
 800b116:	40cf      	lsrs	r7, r1
 800b118:	f105 0e04 	add.w	lr, r5, #4
 800b11c:	4576      	cmp	r6, lr
 800b11e:	46f4      	mov	ip, lr
 800b120:	d816      	bhi.n	800b150 <rshift+0x80>
 800b122:	1a9a      	subs	r2, r3, r2
 800b124:	0092      	lsls	r2, r2, #2
 800b126:	3a04      	subs	r2, #4
 800b128:	3501      	adds	r5, #1
 800b12a:	42ae      	cmp	r6, r5
 800b12c:	bf38      	it	cc
 800b12e:	2200      	movcc	r2, #0
 800b130:	18a3      	adds	r3, r4, r2
 800b132:	50a7      	str	r7, [r4, r2]
 800b134:	b107      	cbz	r7, 800b138 <rshift+0x68>
 800b136:	3304      	adds	r3, #4
 800b138:	42a3      	cmp	r3, r4
 800b13a:	eba3 0204 	sub.w	r2, r3, r4
 800b13e:	bf08      	it	eq
 800b140:	2300      	moveq	r3, #0
 800b142:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b146:	6102      	str	r2, [r0, #16]
 800b148:	bf08      	it	eq
 800b14a:	6143      	streq	r3, [r0, #20]
 800b14c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b150:	f8dc c000 	ldr.w	ip, [ip]
 800b154:	fa0c fc08 	lsl.w	ip, ip, r8
 800b158:	ea4c 0707 	orr.w	r7, ip, r7
 800b15c:	f849 7b04 	str.w	r7, [r9], #4
 800b160:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b164:	40cf      	lsrs	r7, r1
 800b166:	e7d9      	b.n	800b11c <rshift+0x4c>
 800b168:	f851 cb04 	ldr.w	ip, [r1], #4
 800b16c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b170:	e7c2      	b.n	800b0f8 <rshift+0x28>
 800b172:	4623      	mov	r3, r4
 800b174:	e7e0      	b.n	800b138 <rshift+0x68>

0800b176 <__hexdig_fun>:
 800b176:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b17a:	2b09      	cmp	r3, #9
 800b17c:	d802      	bhi.n	800b184 <__hexdig_fun+0xe>
 800b17e:	3820      	subs	r0, #32
 800b180:	b2c0      	uxtb	r0, r0
 800b182:	4770      	bx	lr
 800b184:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b188:	2b05      	cmp	r3, #5
 800b18a:	d801      	bhi.n	800b190 <__hexdig_fun+0x1a>
 800b18c:	3847      	subs	r0, #71	; 0x47
 800b18e:	e7f7      	b.n	800b180 <__hexdig_fun+0xa>
 800b190:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b194:	2b05      	cmp	r3, #5
 800b196:	d801      	bhi.n	800b19c <__hexdig_fun+0x26>
 800b198:	3827      	subs	r0, #39	; 0x27
 800b19a:	e7f1      	b.n	800b180 <__hexdig_fun+0xa>
 800b19c:	2000      	movs	r0, #0
 800b19e:	4770      	bx	lr

0800b1a0 <__gethex>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	4681      	mov	r9, r0
 800b1a6:	468a      	mov	sl, r1
 800b1a8:	4617      	mov	r7, r2
 800b1aa:	680a      	ldr	r2, [r1, #0]
 800b1ac:	b085      	sub	sp, #20
 800b1ae:	f102 0b02 	add.w	fp, r2, #2
 800b1b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b1b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b1ba:	9302      	str	r3, [sp, #8]
 800b1bc:	32fe      	adds	r2, #254	; 0xfe
 800b1be:	eb02 030b 	add.w	r3, r2, fp
 800b1c2:	46d8      	mov	r8, fp
 800b1c4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b1c8:	9301      	str	r3, [sp, #4]
 800b1ca:	2830      	cmp	r0, #48	; 0x30
 800b1cc:	d0f7      	beq.n	800b1be <__gethex+0x1e>
 800b1ce:	f7ff ffd2 	bl	800b176 <__hexdig_fun>
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	d138      	bne.n	800b24a <__gethex+0xaa>
 800b1d8:	2201      	movs	r2, #1
 800b1da:	4640      	mov	r0, r8
 800b1dc:	49a7      	ldr	r1, [pc, #668]	; (800b47c <__gethex+0x2dc>)
 800b1de:	f7ff ff1d 	bl	800b01c <strncmp>
 800b1e2:	4606      	mov	r6, r0
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	d169      	bne.n	800b2bc <__gethex+0x11c>
 800b1e8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b1ec:	465d      	mov	r5, fp
 800b1ee:	f7ff ffc2 	bl	800b176 <__hexdig_fun>
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d064      	beq.n	800b2c0 <__gethex+0x120>
 800b1f6:	465a      	mov	r2, fp
 800b1f8:	7810      	ldrb	r0, [r2, #0]
 800b1fa:	4690      	mov	r8, r2
 800b1fc:	2830      	cmp	r0, #48	; 0x30
 800b1fe:	f102 0201 	add.w	r2, r2, #1
 800b202:	d0f9      	beq.n	800b1f8 <__gethex+0x58>
 800b204:	f7ff ffb7 	bl	800b176 <__hexdig_fun>
 800b208:	2301      	movs	r3, #1
 800b20a:	fab0 f480 	clz	r4, r0
 800b20e:	465e      	mov	r6, fp
 800b210:	0964      	lsrs	r4, r4, #5
 800b212:	9301      	str	r3, [sp, #4]
 800b214:	4642      	mov	r2, r8
 800b216:	4615      	mov	r5, r2
 800b218:	7828      	ldrb	r0, [r5, #0]
 800b21a:	3201      	adds	r2, #1
 800b21c:	f7ff ffab 	bl	800b176 <__hexdig_fun>
 800b220:	2800      	cmp	r0, #0
 800b222:	d1f8      	bne.n	800b216 <__gethex+0x76>
 800b224:	2201      	movs	r2, #1
 800b226:	4628      	mov	r0, r5
 800b228:	4994      	ldr	r1, [pc, #592]	; (800b47c <__gethex+0x2dc>)
 800b22a:	f7ff fef7 	bl	800b01c <strncmp>
 800b22e:	b978      	cbnz	r0, 800b250 <__gethex+0xb0>
 800b230:	b946      	cbnz	r6, 800b244 <__gethex+0xa4>
 800b232:	1c6e      	adds	r6, r5, #1
 800b234:	4632      	mov	r2, r6
 800b236:	4615      	mov	r5, r2
 800b238:	7828      	ldrb	r0, [r5, #0]
 800b23a:	3201      	adds	r2, #1
 800b23c:	f7ff ff9b 	bl	800b176 <__hexdig_fun>
 800b240:	2800      	cmp	r0, #0
 800b242:	d1f8      	bne.n	800b236 <__gethex+0x96>
 800b244:	1b73      	subs	r3, r6, r5
 800b246:	009e      	lsls	r6, r3, #2
 800b248:	e004      	b.n	800b254 <__gethex+0xb4>
 800b24a:	2400      	movs	r4, #0
 800b24c:	4626      	mov	r6, r4
 800b24e:	e7e1      	b.n	800b214 <__gethex+0x74>
 800b250:	2e00      	cmp	r6, #0
 800b252:	d1f7      	bne.n	800b244 <__gethex+0xa4>
 800b254:	782b      	ldrb	r3, [r5, #0]
 800b256:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b25a:	2b50      	cmp	r3, #80	; 0x50
 800b25c:	d13d      	bne.n	800b2da <__gethex+0x13a>
 800b25e:	786b      	ldrb	r3, [r5, #1]
 800b260:	2b2b      	cmp	r3, #43	; 0x2b
 800b262:	d02f      	beq.n	800b2c4 <__gethex+0x124>
 800b264:	2b2d      	cmp	r3, #45	; 0x2d
 800b266:	d031      	beq.n	800b2cc <__gethex+0x12c>
 800b268:	f04f 0b00 	mov.w	fp, #0
 800b26c:	1c69      	adds	r1, r5, #1
 800b26e:	7808      	ldrb	r0, [r1, #0]
 800b270:	f7ff ff81 	bl	800b176 <__hexdig_fun>
 800b274:	1e42      	subs	r2, r0, #1
 800b276:	b2d2      	uxtb	r2, r2
 800b278:	2a18      	cmp	r2, #24
 800b27a:	d82e      	bhi.n	800b2da <__gethex+0x13a>
 800b27c:	f1a0 0210 	sub.w	r2, r0, #16
 800b280:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b284:	f7ff ff77 	bl	800b176 <__hexdig_fun>
 800b288:	f100 3cff 	add.w	ip, r0, #4294967295
 800b28c:	fa5f fc8c 	uxtb.w	ip, ip
 800b290:	f1bc 0f18 	cmp.w	ip, #24
 800b294:	d91d      	bls.n	800b2d2 <__gethex+0x132>
 800b296:	f1bb 0f00 	cmp.w	fp, #0
 800b29a:	d000      	beq.n	800b29e <__gethex+0xfe>
 800b29c:	4252      	negs	r2, r2
 800b29e:	4416      	add	r6, r2
 800b2a0:	f8ca 1000 	str.w	r1, [sl]
 800b2a4:	b1dc      	cbz	r4, 800b2de <__gethex+0x13e>
 800b2a6:	9b01      	ldr	r3, [sp, #4]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	bf14      	ite	ne
 800b2ac:	f04f 0800 	movne.w	r8, #0
 800b2b0:	f04f 0806 	moveq.w	r8, #6
 800b2b4:	4640      	mov	r0, r8
 800b2b6:	b005      	add	sp, #20
 800b2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2bc:	4645      	mov	r5, r8
 800b2be:	4626      	mov	r6, r4
 800b2c0:	2401      	movs	r4, #1
 800b2c2:	e7c7      	b.n	800b254 <__gethex+0xb4>
 800b2c4:	f04f 0b00 	mov.w	fp, #0
 800b2c8:	1ca9      	adds	r1, r5, #2
 800b2ca:	e7d0      	b.n	800b26e <__gethex+0xce>
 800b2cc:	f04f 0b01 	mov.w	fp, #1
 800b2d0:	e7fa      	b.n	800b2c8 <__gethex+0x128>
 800b2d2:	230a      	movs	r3, #10
 800b2d4:	fb03 0002 	mla	r0, r3, r2, r0
 800b2d8:	e7d0      	b.n	800b27c <__gethex+0xdc>
 800b2da:	4629      	mov	r1, r5
 800b2dc:	e7e0      	b.n	800b2a0 <__gethex+0x100>
 800b2de:	4621      	mov	r1, r4
 800b2e0:	eba5 0308 	sub.w	r3, r5, r8
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	2b07      	cmp	r3, #7
 800b2e8:	dc0a      	bgt.n	800b300 <__gethex+0x160>
 800b2ea:	4648      	mov	r0, r9
 800b2ec:	f7fd ff68 	bl	80091c0 <_Balloc>
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	b940      	cbnz	r0, 800b306 <__gethex+0x166>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	21e4      	movs	r1, #228	; 0xe4
 800b2f8:	4b61      	ldr	r3, [pc, #388]	; (800b480 <__gethex+0x2e0>)
 800b2fa:	4862      	ldr	r0, [pc, #392]	; (800b484 <__gethex+0x2e4>)
 800b2fc:	f7ff feb6 	bl	800b06c <__assert_func>
 800b300:	3101      	adds	r1, #1
 800b302:	105b      	asrs	r3, r3, #1
 800b304:	e7ef      	b.n	800b2e6 <__gethex+0x146>
 800b306:	2300      	movs	r3, #0
 800b308:	469b      	mov	fp, r3
 800b30a:	f100 0a14 	add.w	sl, r0, #20
 800b30e:	f8cd a004 	str.w	sl, [sp, #4]
 800b312:	45a8      	cmp	r8, r5
 800b314:	d344      	bcc.n	800b3a0 <__gethex+0x200>
 800b316:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b31a:	4658      	mov	r0, fp
 800b31c:	f848 bb04 	str.w	fp, [r8], #4
 800b320:	eba8 080a 	sub.w	r8, r8, sl
 800b324:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800b328:	6122      	str	r2, [r4, #16]
 800b32a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800b32e:	f7fe f839 	bl	80093a4 <__hi0bits>
 800b332:	683d      	ldr	r5, [r7, #0]
 800b334:	eba8 0800 	sub.w	r8, r8, r0
 800b338:	45a8      	cmp	r8, r5
 800b33a:	dd59      	ble.n	800b3f0 <__gethex+0x250>
 800b33c:	eba8 0805 	sub.w	r8, r8, r5
 800b340:	4641      	mov	r1, r8
 800b342:	4620      	mov	r0, r4
 800b344:	f7fe fbb7 	bl	8009ab6 <__any_on>
 800b348:	4683      	mov	fp, r0
 800b34a:	b1b8      	cbz	r0, 800b37c <__gethex+0x1dc>
 800b34c:	f04f 0b01 	mov.w	fp, #1
 800b350:	f108 33ff 	add.w	r3, r8, #4294967295
 800b354:	1159      	asrs	r1, r3, #5
 800b356:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b35a:	f003 021f 	and.w	r2, r3, #31
 800b35e:	fa0b f202 	lsl.w	r2, fp, r2
 800b362:	420a      	tst	r2, r1
 800b364:	d00a      	beq.n	800b37c <__gethex+0x1dc>
 800b366:	455b      	cmp	r3, fp
 800b368:	dd06      	ble.n	800b378 <__gethex+0x1d8>
 800b36a:	4620      	mov	r0, r4
 800b36c:	f1a8 0102 	sub.w	r1, r8, #2
 800b370:	f7fe fba1 	bl	8009ab6 <__any_on>
 800b374:	2800      	cmp	r0, #0
 800b376:	d138      	bne.n	800b3ea <__gethex+0x24a>
 800b378:	f04f 0b02 	mov.w	fp, #2
 800b37c:	4641      	mov	r1, r8
 800b37e:	4620      	mov	r0, r4
 800b380:	f7ff fea6 	bl	800b0d0 <rshift>
 800b384:	4446      	add	r6, r8
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	42b3      	cmp	r3, r6
 800b38a:	da41      	bge.n	800b410 <__gethex+0x270>
 800b38c:	4621      	mov	r1, r4
 800b38e:	4648      	mov	r0, r9
 800b390:	f7fd ff56 	bl	8009240 <_Bfree>
 800b394:	2300      	movs	r3, #0
 800b396:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b398:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b39c:	6013      	str	r3, [r2, #0]
 800b39e:	e789      	b.n	800b2b4 <__gethex+0x114>
 800b3a0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b3a4:	2a2e      	cmp	r2, #46	; 0x2e
 800b3a6:	d014      	beq.n	800b3d2 <__gethex+0x232>
 800b3a8:	2b20      	cmp	r3, #32
 800b3aa:	d106      	bne.n	800b3ba <__gethex+0x21a>
 800b3ac:	9b01      	ldr	r3, [sp, #4]
 800b3ae:	f843 bb04 	str.w	fp, [r3], #4
 800b3b2:	f04f 0b00 	mov.w	fp, #0
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	465b      	mov	r3, fp
 800b3ba:	7828      	ldrb	r0, [r5, #0]
 800b3bc:	9303      	str	r3, [sp, #12]
 800b3be:	f7ff feda 	bl	800b176 <__hexdig_fun>
 800b3c2:	9b03      	ldr	r3, [sp, #12]
 800b3c4:	f000 000f 	and.w	r0, r0, #15
 800b3c8:	4098      	lsls	r0, r3
 800b3ca:	ea4b 0b00 	orr.w	fp, fp, r0
 800b3ce:	3304      	adds	r3, #4
 800b3d0:	e79f      	b.n	800b312 <__gethex+0x172>
 800b3d2:	45a8      	cmp	r8, r5
 800b3d4:	d8e8      	bhi.n	800b3a8 <__gethex+0x208>
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	4628      	mov	r0, r5
 800b3da:	4928      	ldr	r1, [pc, #160]	; (800b47c <__gethex+0x2dc>)
 800b3dc:	9303      	str	r3, [sp, #12]
 800b3de:	f7ff fe1d 	bl	800b01c <strncmp>
 800b3e2:	9b03      	ldr	r3, [sp, #12]
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	d1df      	bne.n	800b3a8 <__gethex+0x208>
 800b3e8:	e793      	b.n	800b312 <__gethex+0x172>
 800b3ea:	f04f 0b03 	mov.w	fp, #3
 800b3ee:	e7c5      	b.n	800b37c <__gethex+0x1dc>
 800b3f0:	da0b      	bge.n	800b40a <__gethex+0x26a>
 800b3f2:	eba5 0808 	sub.w	r8, r5, r8
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	4648      	mov	r0, r9
 800b3fc:	f7fe f938 	bl	8009670 <__lshift>
 800b400:	4604      	mov	r4, r0
 800b402:	eba6 0608 	sub.w	r6, r6, r8
 800b406:	f100 0a14 	add.w	sl, r0, #20
 800b40a:	f04f 0b00 	mov.w	fp, #0
 800b40e:	e7ba      	b.n	800b386 <__gethex+0x1e6>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	42b3      	cmp	r3, r6
 800b414:	dd74      	ble.n	800b500 <__gethex+0x360>
 800b416:	1b9e      	subs	r6, r3, r6
 800b418:	42b5      	cmp	r5, r6
 800b41a:	dc35      	bgt.n	800b488 <__gethex+0x2e8>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d023      	beq.n	800b46a <__gethex+0x2ca>
 800b422:	2b03      	cmp	r3, #3
 800b424:	d025      	beq.n	800b472 <__gethex+0x2d2>
 800b426:	2b01      	cmp	r3, #1
 800b428:	d115      	bne.n	800b456 <__gethex+0x2b6>
 800b42a:	42b5      	cmp	r5, r6
 800b42c:	d113      	bne.n	800b456 <__gethex+0x2b6>
 800b42e:	2d01      	cmp	r5, #1
 800b430:	d10b      	bne.n	800b44a <__gethex+0x2aa>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	9a02      	ldr	r2, [sp, #8]
 800b436:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b43a:	6013      	str	r3, [r2, #0]
 800b43c:	2301      	movs	r3, #1
 800b43e:	6123      	str	r3, [r4, #16]
 800b440:	f8ca 3000 	str.w	r3, [sl]
 800b444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b446:	601c      	str	r4, [r3, #0]
 800b448:	e734      	b.n	800b2b4 <__gethex+0x114>
 800b44a:	4620      	mov	r0, r4
 800b44c:	1e69      	subs	r1, r5, #1
 800b44e:	f7fe fb32 	bl	8009ab6 <__any_on>
 800b452:	2800      	cmp	r0, #0
 800b454:	d1ed      	bne.n	800b432 <__gethex+0x292>
 800b456:	4621      	mov	r1, r4
 800b458:	4648      	mov	r0, r9
 800b45a:	f7fd fef1 	bl	8009240 <_Bfree>
 800b45e:	2300      	movs	r3, #0
 800b460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b462:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b466:	6013      	str	r3, [r2, #0]
 800b468:	e724      	b.n	800b2b4 <__gethex+0x114>
 800b46a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1f2      	bne.n	800b456 <__gethex+0x2b6>
 800b470:	e7df      	b.n	800b432 <__gethex+0x292>
 800b472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1dc      	bne.n	800b432 <__gethex+0x292>
 800b478:	e7ed      	b.n	800b456 <__gethex+0x2b6>
 800b47a:	bf00      	nop
 800b47c:	0800d53c 	.word	0x0800d53c
 800b480:	0800d3cf 	.word	0x0800d3cf
 800b484:	0800d6e6 	.word	0x0800d6e6
 800b488:	f106 38ff 	add.w	r8, r6, #4294967295
 800b48c:	f1bb 0f00 	cmp.w	fp, #0
 800b490:	d133      	bne.n	800b4fa <__gethex+0x35a>
 800b492:	f1b8 0f00 	cmp.w	r8, #0
 800b496:	d004      	beq.n	800b4a2 <__gethex+0x302>
 800b498:	4641      	mov	r1, r8
 800b49a:	4620      	mov	r0, r4
 800b49c:	f7fe fb0b 	bl	8009ab6 <__any_on>
 800b4a0:	4683      	mov	fp, r0
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b4a8:	f008 081f 	and.w	r8, r8, #31
 800b4ac:	fa03 f308 	lsl.w	r3, r3, r8
 800b4b0:	f04f 0802 	mov.w	r8, #2
 800b4b4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b4b8:	4631      	mov	r1, r6
 800b4ba:	4213      	tst	r3, r2
 800b4bc:	4620      	mov	r0, r4
 800b4be:	bf18      	it	ne
 800b4c0:	f04b 0b02 	orrne.w	fp, fp, #2
 800b4c4:	1bad      	subs	r5, r5, r6
 800b4c6:	f7ff fe03 	bl	800b0d0 <rshift>
 800b4ca:	687e      	ldr	r6, [r7, #4]
 800b4cc:	f1bb 0f00 	cmp.w	fp, #0
 800b4d0:	d04a      	beq.n	800b568 <__gethex+0x3c8>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d016      	beq.n	800b506 <__gethex+0x366>
 800b4d8:	2b03      	cmp	r3, #3
 800b4da:	d018      	beq.n	800b50e <__gethex+0x36e>
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d109      	bne.n	800b4f4 <__gethex+0x354>
 800b4e0:	f01b 0f02 	tst.w	fp, #2
 800b4e4:	d006      	beq.n	800b4f4 <__gethex+0x354>
 800b4e6:	f8da 3000 	ldr.w	r3, [sl]
 800b4ea:	ea4b 0b03 	orr.w	fp, fp, r3
 800b4ee:	f01b 0f01 	tst.w	fp, #1
 800b4f2:	d10f      	bne.n	800b514 <__gethex+0x374>
 800b4f4:	f048 0810 	orr.w	r8, r8, #16
 800b4f8:	e036      	b.n	800b568 <__gethex+0x3c8>
 800b4fa:	f04f 0b01 	mov.w	fp, #1
 800b4fe:	e7d0      	b.n	800b4a2 <__gethex+0x302>
 800b500:	f04f 0801 	mov.w	r8, #1
 800b504:	e7e2      	b.n	800b4cc <__gethex+0x32c>
 800b506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b508:	f1c3 0301 	rsb	r3, r3, #1
 800b50c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b50e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b510:	2b00      	cmp	r3, #0
 800b512:	d0ef      	beq.n	800b4f4 <__gethex+0x354>
 800b514:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b518:	f104 0214 	add.w	r2, r4, #20
 800b51c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	2300      	movs	r3, #0
 800b524:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b528:	4694      	mov	ip, r2
 800b52a:	f852 1b04 	ldr.w	r1, [r2], #4
 800b52e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b532:	d01e      	beq.n	800b572 <__gethex+0x3d2>
 800b534:	3101      	adds	r1, #1
 800b536:	f8cc 1000 	str.w	r1, [ip]
 800b53a:	f1b8 0f02 	cmp.w	r8, #2
 800b53e:	f104 0214 	add.w	r2, r4, #20
 800b542:	d13d      	bne.n	800b5c0 <__gethex+0x420>
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	3b01      	subs	r3, #1
 800b548:	42ab      	cmp	r3, r5
 800b54a:	d10b      	bne.n	800b564 <__gethex+0x3c4>
 800b54c:	2301      	movs	r3, #1
 800b54e:	1169      	asrs	r1, r5, #5
 800b550:	f005 051f 	and.w	r5, r5, #31
 800b554:	fa03 f505 	lsl.w	r5, r3, r5
 800b558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b55c:	421d      	tst	r5, r3
 800b55e:	bf18      	it	ne
 800b560:	f04f 0801 	movne.w	r8, #1
 800b564:	f048 0820 	orr.w	r8, r8, #32
 800b568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b56a:	601c      	str	r4, [r3, #0]
 800b56c:	9b02      	ldr	r3, [sp, #8]
 800b56e:	601e      	str	r6, [r3, #0]
 800b570:	e6a0      	b.n	800b2b4 <__gethex+0x114>
 800b572:	4290      	cmp	r0, r2
 800b574:	f842 3c04 	str.w	r3, [r2, #-4]
 800b578:	d8d6      	bhi.n	800b528 <__gethex+0x388>
 800b57a:	68a2      	ldr	r2, [r4, #8]
 800b57c:	4593      	cmp	fp, r2
 800b57e:	db17      	blt.n	800b5b0 <__gethex+0x410>
 800b580:	6861      	ldr	r1, [r4, #4]
 800b582:	4648      	mov	r0, r9
 800b584:	3101      	adds	r1, #1
 800b586:	f7fd fe1b 	bl	80091c0 <_Balloc>
 800b58a:	4682      	mov	sl, r0
 800b58c:	b918      	cbnz	r0, 800b596 <__gethex+0x3f6>
 800b58e:	4602      	mov	r2, r0
 800b590:	2184      	movs	r1, #132	; 0x84
 800b592:	4b1a      	ldr	r3, [pc, #104]	; (800b5fc <__gethex+0x45c>)
 800b594:	e6b1      	b.n	800b2fa <__gethex+0x15a>
 800b596:	6922      	ldr	r2, [r4, #16]
 800b598:	f104 010c 	add.w	r1, r4, #12
 800b59c:	3202      	adds	r2, #2
 800b59e:	0092      	lsls	r2, r2, #2
 800b5a0:	300c      	adds	r0, #12
 800b5a2:	f7fc fe8e 	bl	80082c2 <memcpy>
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	4648      	mov	r0, r9
 800b5aa:	f7fd fe49 	bl	8009240 <_Bfree>
 800b5ae:	4654      	mov	r4, sl
 800b5b0:	6922      	ldr	r2, [r4, #16]
 800b5b2:	1c51      	adds	r1, r2, #1
 800b5b4:	6121      	str	r1, [r4, #16]
 800b5b6:	2101      	movs	r1, #1
 800b5b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b5bc:	6151      	str	r1, [r2, #20]
 800b5be:	e7bc      	b.n	800b53a <__gethex+0x39a>
 800b5c0:	6921      	ldr	r1, [r4, #16]
 800b5c2:	4559      	cmp	r1, fp
 800b5c4:	dd0b      	ble.n	800b5de <__gethex+0x43e>
 800b5c6:	2101      	movs	r1, #1
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f7ff fd81 	bl	800b0d0 <rshift>
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	3601      	adds	r6, #1
 800b5d2:	42b3      	cmp	r3, r6
 800b5d4:	f6ff aeda 	blt.w	800b38c <__gethex+0x1ec>
 800b5d8:	f04f 0801 	mov.w	r8, #1
 800b5dc:	e7c2      	b.n	800b564 <__gethex+0x3c4>
 800b5de:	f015 051f 	ands.w	r5, r5, #31
 800b5e2:	d0f9      	beq.n	800b5d8 <__gethex+0x438>
 800b5e4:	9b01      	ldr	r3, [sp, #4]
 800b5e6:	f1c5 0520 	rsb	r5, r5, #32
 800b5ea:	441a      	add	r2, r3
 800b5ec:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b5f0:	f7fd fed8 	bl	80093a4 <__hi0bits>
 800b5f4:	42a8      	cmp	r0, r5
 800b5f6:	dbe6      	blt.n	800b5c6 <__gethex+0x426>
 800b5f8:	e7ee      	b.n	800b5d8 <__gethex+0x438>
 800b5fa:	bf00      	nop
 800b5fc:	0800d3cf 	.word	0x0800d3cf

0800b600 <L_shift>:
 800b600:	f1c2 0208 	rsb	r2, r2, #8
 800b604:	0092      	lsls	r2, r2, #2
 800b606:	b570      	push	{r4, r5, r6, lr}
 800b608:	f1c2 0620 	rsb	r6, r2, #32
 800b60c:	6843      	ldr	r3, [r0, #4]
 800b60e:	6804      	ldr	r4, [r0, #0]
 800b610:	fa03 f506 	lsl.w	r5, r3, r6
 800b614:	432c      	orrs	r4, r5
 800b616:	40d3      	lsrs	r3, r2
 800b618:	6004      	str	r4, [r0, #0]
 800b61a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b61e:	4288      	cmp	r0, r1
 800b620:	d3f4      	bcc.n	800b60c <L_shift+0xc>
 800b622:	bd70      	pop	{r4, r5, r6, pc}

0800b624 <__match>:
 800b624:	b530      	push	{r4, r5, lr}
 800b626:	6803      	ldr	r3, [r0, #0]
 800b628:	3301      	adds	r3, #1
 800b62a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b62e:	b914      	cbnz	r4, 800b636 <__match+0x12>
 800b630:	6003      	str	r3, [r0, #0]
 800b632:	2001      	movs	r0, #1
 800b634:	bd30      	pop	{r4, r5, pc}
 800b636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b63a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b63e:	2d19      	cmp	r5, #25
 800b640:	bf98      	it	ls
 800b642:	3220      	addls	r2, #32
 800b644:	42a2      	cmp	r2, r4
 800b646:	d0f0      	beq.n	800b62a <__match+0x6>
 800b648:	2000      	movs	r0, #0
 800b64a:	e7f3      	b.n	800b634 <__match+0x10>

0800b64c <__hexnan>:
 800b64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b650:	2500      	movs	r5, #0
 800b652:	680b      	ldr	r3, [r1, #0]
 800b654:	4682      	mov	sl, r0
 800b656:	115e      	asrs	r6, r3, #5
 800b658:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b65c:	f013 031f 	ands.w	r3, r3, #31
 800b660:	bf18      	it	ne
 800b662:	3604      	addne	r6, #4
 800b664:	1f37      	subs	r7, r6, #4
 800b666:	4690      	mov	r8, r2
 800b668:	46b9      	mov	r9, r7
 800b66a:	463c      	mov	r4, r7
 800b66c:	46ab      	mov	fp, r5
 800b66e:	b087      	sub	sp, #28
 800b670:	6801      	ldr	r1, [r0, #0]
 800b672:	9301      	str	r3, [sp, #4]
 800b674:	f846 5c04 	str.w	r5, [r6, #-4]
 800b678:	9502      	str	r5, [sp, #8]
 800b67a:	784a      	ldrb	r2, [r1, #1]
 800b67c:	1c4b      	adds	r3, r1, #1
 800b67e:	9303      	str	r3, [sp, #12]
 800b680:	b342      	cbz	r2, 800b6d4 <__hexnan+0x88>
 800b682:	4610      	mov	r0, r2
 800b684:	9105      	str	r1, [sp, #20]
 800b686:	9204      	str	r2, [sp, #16]
 800b688:	f7ff fd75 	bl	800b176 <__hexdig_fun>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	d14f      	bne.n	800b730 <__hexnan+0xe4>
 800b690:	9a04      	ldr	r2, [sp, #16]
 800b692:	9905      	ldr	r1, [sp, #20]
 800b694:	2a20      	cmp	r2, #32
 800b696:	d818      	bhi.n	800b6ca <__hexnan+0x7e>
 800b698:	9b02      	ldr	r3, [sp, #8]
 800b69a:	459b      	cmp	fp, r3
 800b69c:	dd13      	ble.n	800b6c6 <__hexnan+0x7a>
 800b69e:	454c      	cmp	r4, r9
 800b6a0:	d206      	bcs.n	800b6b0 <__hexnan+0x64>
 800b6a2:	2d07      	cmp	r5, #7
 800b6a4:	dc04      	bgt.n	800b6b0 <__hexnan+0x64>
 800b6a6:	462a      	mov	r2, r5
 800b6a8:	4649      	mov	r1, r9
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f7ff ffa8 	bl	800b600 <L_shift>
 800b6b0:	4544      	cmp	r4, r8
 800b6b2:	d950      	bls.n	800b756 <__hexnan+0x10a>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f1a4 0904 	sub.w	r9, r4, #4
 800b6ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6be:	461d      	mov	r5, r3
 800b6c0:	464c      	mov	r4, r9
 800b6c2:	f8cd b008 	str.w	fp, [sp, #8]
 800b6c6:	9903      	ldr	r1, [sp, #12]
 800b6c8:	e7d7      	b.n	800b67a <__hexnan+0x2e>
 800b6ca:	2a29      	cmp	r2, #41	; 0x29
 800b6cc:	d155      	bne.n	800b77a <__hexnan+0x12e>
 800b6ce:	3102      	adds	r1, #2
 800b6d0:	f8ca 1000 	str.w	r1, [sl]
 800b6d4:	f1bb 0f00 	cmp.w	fp, #0
 800b6d8:	d04f      	beq.n	800b77a <__hexnan+0x12e>
 800b6da:	454c      	cmp	r4, r9
 800b6dc:	d206      	bcs.n	800b6ec <__hexnan+0xa0>
 800b6de:	2d07      	cmp	r5, #7
 800b6e0:	dc04      	bgt.n	800b6ec <__hexnan+0xa0>
 800b6e2:	462a      	mov	r2, r5
 800b6e4:	4649      	mov	r1, r9
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f7ff ff8a 	bl	800b600 <L_shift>
 800b6ec:	4544      	cmp	r4, r8
 800b6ee:	d934      	bls.n	800b75a <__hexnan+0x10e>
 800b6f0:	4623      	mov	r3, r4
 800b6f2:	f1a8 0204 	sub.w	r2, r8, #4
 800b6f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b6fa:	429f      	cmp	r7, r3
 800b6fc:	f842 1f04 	str.w	r1, [r2, #4]!
 800b700:	d2f9      	bcs.n	800b6f6 <__hexnan+0xaa>
 800b702:	1b3b      	subs	r3, r7, r4
 800b704:	f023 0303 	bic.w	r3, r3, #3
 800b708:	3304      	adds	r3, #4
 800b70a:	3e03      	subs	r6, #3
 800b70c:	3401      	adds	r4, #1
 800b70e:	42a6      	cmp	r6, r4
 800b710:	bf38      	it	cc
 800b712:	2304      	movcc	r3, #4
 800b714:	2200      	movs	r2, #0
 800b716:	4443      	add	r3, r8
 800b718:	f843 2b04 	str.w	r2, [r3], #4
 800b71c:	429f      	cmp	r7, r3
 800b71e:	d2fb      	bcs.n	800b718 <__hexnan+0xcc>
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	b91b      	cbnz	r3, 800b72c <__hexnan+0xe0>
 800b724:	4547      	cmp	r7, r8
 800b726:	d126      	bne.n	800b776 <__hexnan+0x12a>
 800b728:	2301      	movs	r3, #1
 800b72a:	603b      	str	r3, [r7, #0]
 800b72c:	2005      	movs	r0, #5
 800b72e:	e025      	b.n	800b77c <__hexnan+0x130>
 800b730:	3501      	adds	r5, #1
 800b732:	2d08      	cmp	r5, #8
 800b734:	f10b 0b01 	add.w	fp, fp, #1
 800b738:	dd06      	ble.n	800b748 <__hexnan+0xfc>
 800b73a:	4544      	cmp	r4, r8
 800b73c:	d9c3      	bls.n	800b6c6 <__hexnan+0x7a>
 800b73e:	2300      	movs	r3, #0
 800b740:	2501      	movs	r5, #1
 800b742:	f844 3c04 	str.w	r3, [r4, #-4]
 800b746:	3c04      	subs	r4, #4
 800b748:	6822      	ldr	r2, [r4, #0]
 800b74a:	f000 000f 	and.w	r0, r0, #15
 800b74e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b752:	6020      	str	r0, [r4, #0]
 800b754:	e7b7      	b.n	800b6c6 <__hexnan+0x7a>
 800b756:	2508      	movs	r5, #8
 800b758:	e7b5      	b.n	800b6c6 <__hexnan+0x7a>
 800b75a:	9b01      	ldr	r3, [sp, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d0df      	beq.n	800b720 <__hexnan+0xd4>
 800b760:	f04f 32ff 	mov.w	r2, #4294967295
 800b764:	f1c3 0320 	rsb	r3, r3, #32
 800b768:	40da      	lsrs	r2, r3
 800b76a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b76e:	4013      	ands	r3, r2
 800b770:	f846 3c04 	str.w	r3, [r6, #-4]
 800b774:	e7d4      	b.n	800b720 <__hexnan+0xd4>
 800b776:	3f04      	subs	r7, #4
 800b778:	e7d2      	b.n	800b720 <__hexnan+0xd4>
 800b77a:	2004      	movs	r0, #4
 800b77c:	b007      	add	sp, #28
 800b77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b782 <__ascii_mbtowc>:
 800b782:	b082      	sub	sp, #8
 800b784:	b901      	cbnz	r1, 800b788 <__ascii_mbtowc+0x6>
 800b786:	a901      	add	r1, sp, #4
 800b788:	b142      	cbz	r2, 800b79c <__ascii_mbtowc+0x1a>
 800b78a:	b14b      	cbz	r3, 800b7a0 <__ascii_mbtowc+0x1e>
 800b78c:	7813      	ldrb	r3, [r2, #0]
 800b78e:	600b      	str	r3, [r1, #0]
 800b790:	7812      	ldrb	r2, [r2, #0]
 800b792:	1e10      	subs	r0, r2, #0
 800b794:	bf18      	it	ne
 800b796:	2001      	movne	r0, #1
 800b798:	b002      	add	sp, #8
 800b79a:	4770      	bx	lr
 800b79c:	4610      	mov	r0, r2
 800b79e:	e7fb      	b.n	800b798 <__ascii_mbtowc+0x16>
 800b7a0:	f06f 0001 	mvn.w	r0, #1
 800b7a4:	e7f8      	b.n	800b798 <__ascii_mbtowc+0x16>

0800b7a6 <_realloc_r>:
 800b7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7aa:	4680      	mov	r8, r0
 800b7ac:	4614      	mov	r4, r2
 800b7ae:	460e      	mov	r6, r1
 800b7b0:	b921      	cbnz	r1, 800b7bc <_realloc_r+0x16>
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b8:	f7fd bc76 	b.w	80090a8 <_malloc_r>
 800b7bc:	b92a      	cbnz	r2, 800b7ca <_realloc_r+0x24>
 800b7be:	f7fd fc03 	bl	8008fc8 <_free_r>
 800b7c2:	4625      	mov	r5, r4
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ca:	f000 f8c6 	bl	800b95a <_malloc_usable_size_r>
 800b7ce:	4284      	cmp	r4, r0
 800b7d0:	4607      	mov	r7, r0
 800b7d2:	d802      	bhi.n	800b7da <_realloc_r+0x34>
 800b7d4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7d8:	d812      	bhi.n	800b800 <_realloc_r+0x5a>
 800b7da:	4621      	mov	r1, r4
 800b7dc:	4640      	mov	r0, r8
 800b7de:	f7fd fc63 	bl	80090a8 <_malloc_r>
 800b7e2:	4605      	mov	r5, r0
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d0ed      	beq.n	800b7c4 <_realloc_r+0x1e>
 800b7e8:	42bc      	cmp	r4, r7
 800b7ea:	4622      	mov	r2, r4
 800b7ec:	4631      	mov	r1, r6
 800b7ee:	bf28      	it	cs
 800b7f0:	463a      	movcs	r2, r7
 800b7f2:	f7fc fd66 	bl	80082c2 <memcpy>
 800b7f6:	4631      	mov	r1, r6
 800b7f8:	4640      	mov	r0, r8
 800b7fa:	f7fd fbe5 	bl	8008fc8 <_free_r>
 800b7fe:	e7e1      	b.n	800b7c4 <_realloc_r+0x1e>
 800b800:	4635      	mov	r5, r6
 800b802:	e7df      	b.n	800b7c4 <_realloc_r+0x1e>

0800b804 <__ascii_wctomb>:
 800b804:	4603      	mov	r3, r0
 800b806:	4608      	mov	r0, r1
 800b808:	b141      	cbz	r1, 800b81c <__ascii_wctomb+0x18>
 800b80a:	2aff      	cmp	r2, #255	; 0xff
 800b80c:	d904      	bls.n	800b818 <__ascii_wctomb+0x14>
 800b80e:	228a      	movs	r2, #138	; 0x8a
 800b810:	f04f 30ff 	mov.w	r0, #4294967295
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	4770      	bx	lr
 800b818:	2001      	movs	r0, #1
 800b81a:	700a      	strb	r2, [r1, #0]
 800b81c:	4770      	bx	lr
	...

0800b820 <fiprintf>:
 800b820:	b40e      	push	{r1, r2, r3}
 800b822:	b503      	push	{r0, r1, lr}
 800b824:	4601      	mov	r1, r0
 800b826:	ab03      	add	r3, sp, #12
 800b828:	4805      	ldr	r0, [pc, #20]	; (800b840 <fiprintf+0x20>)
 800b82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b82e:	6800      	ldr	r0, [r0, #0]
 800b830:	9301      	str	r3, [sp, #4]
 800b832:	f7ff f97f 	bl	800ab34 <_vfiprintf_r>
 800b836:	b002      	add	sp, #8
 800b838:	f85d eb04 	ldr.w	lr, [sp], #4
 800b83c:	b003      	add	sp, #12
 800b83e:	4770      	bx	lr
 800b840:	20000084 	.word	0x20000084

0800b844 <__swhatbuf_r>:
 800b844:	b570      	push	{r4, r5, r6, lr}
 800b846:	460c      	mov	r4, r1
 800b848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b84c:	4615      	mov	r5, r2
 800b84e:	2900      	cmp	r1, #0
 800b850:	461e      	mov	r6, r3
 800b852:	b096      	sub	sp, #88	; 0x58
 800b854:	da0c      	bge.n	800b870 <__swhatbuf_r+0x2c>
 800b856:	89a3      	ldrh	r3, [r4, #12]
 800b858:	2100      	movs	r1, #0
 800b85a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b85e:	bf0c      	ite	eq
 800b860:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b864:	2340      	movne	r3, #64	; 0x40
 800b866:	2000      	movs	r0, #0
 800b868:	6031      	str	r1, [r6, #0]
 800b86a:	602b      	str	r3, [r5, #0]
 800b86c:	b016      	add	sp, #88	; 0x58
 800b86e:	bd70      	pop	{r4, r5, r6, pc}
 800b870:	466a      	mov	r2, sp
 800b872:	f000 f849 	bl	800b908 <_fstat_r>
 800b876:	2800      	cmp	r0, #0
 800b878:	dbed      	blt.n	800b856 <__swhatbuf_r+0x12>
 800b87a:	9901      	ldr	r1, [sp, #4]
 800b87c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b880:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b884:	4259      	negs	r1, r3
 800b886:	4159      	adcs	r1, r3
 800b888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b88c:	e7eb      	b.n	800b866 <__swhatbuf_r+0x22>

0800b88e <__smakebuf_r>:
 800b88e:	898b      	ldrh	r3, [r1, #12]
 800b890:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b892:	079d      	lsls	r5, r3, #30
 800b894:	4606      	mov	r6, r0
 800b896:	460c      	mov	r4, r1
 800b898:	d507      	bpl.n	800b8aa <__smakebuf_r+0x1c>
 800b89a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b89e:	6023      	str	r3, [r4, #0]
 800b8a0:	6123      	str	r3, [r4, #16]
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	6163      	str	r3, [r4, #20]
 800b8a6:	b002      	add	sp, #8
 800b8a8:	bd70      	pop	{r4, r5, r6, pc}
 800b8aa:	466a      	mov	r2, sp
 800b8ac:	ab01      	add	r3, sp, #4
 800b8ae:	f7ff ffc9 	bl	800b844 <__swhatbuf_r>
 800b8b2:	9900      	ldr	r1, [sp, #0]
 800b8b4:	4605      	mov	r5, r0
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7fd fbf6 	bl	80090a8 <_malloc_r>
 800b8bc:	b948      	cbnz	r0, 800b8d2 <__smakebuf_r+0x44>
 800b8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8c2:	059a      	lsls	r2, r3, #22
 800b8c4:	d4ef      	bmi.n	800b8a6 <__smakebuf_r+0x18>
 800b8c6:	f023 0303 	bic.w	r3, r3, #3
 800b8ca:	f043 0302 	orr.w	r3, r3, #2
 800b8ce:	81a3      	strh	r3, [r4, #12]
 800b8d0:	e7e3      	b.n	800b89a <__smakebuf_r+0xc>
 800b8d2:	89a3      	ldrh	r3, [r4, #12]
 800b8d4:	6020      	str	r0, [r4, #0]
 800b8d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8da:	81a3      	strh	r3, [r4, #12]
 800b8dc:	9b00      	ldr	r3, [sp, #0]
 800b8de:	6120      	str	r0, [r4, #16]
 800b8e0:	6163      	str	r3, [r4, #20]
 800b8e2:	9b01      	ldr	r3, [sp, #4]
 800b8e4:	b15b      	cbz	r3, 800b8fe <__smakebuf_r+0x70>
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8ec:	f000 f81e 	bl	800b92c <_isatty_r>
 800b8f0:	b128      	cbz	r0, 800b8fe <__smakebuf_r+0x70>
 800b8f2:	89a3      	ldrh	r3, [r4, #12]
 800b8f4:	f023 0303 	bic.w	r3, r3, #3
 800b8f8:	f043 0301 	orr.w	r3, r3, #1
 800b8fc:	81a3      	strh	r3, [r4, #12]
 800b8fe:	89a3      	ldrh	r3, [r4, #12]
 800b900:	431d      	orrs	r5, r3
 800b902:	81a5      	strh	r5, [r4, #12]
 800b904:	e7cf      	b.n	800b8a6 <__smakebuf_r+0x18>
	...

0800b908 <_fstat_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	2300      	movs	r3, #0
 800b90c:	4d06      	ldr	r5, [pc, #24]	; (800b928 <_fstat_r+0x20>)
 800b90e:	4604      	mov	r4, r0
 800b910:	4608      	mov	r0, r1
 800b912:	4611      	mov	r1, r2
 800b914:	602b      	str	r3, [r5, #0]
 800b916:	f7f8 f9b2 	bl	8003c7e <_fstat>
 800b91a:	1c43      	adds	r3, r0, #1
 800b91c:	d102      	bne.n	800b924 <_fstat_r+0x1c>
 800b91e:	682b      	ldr	r3, [r5, #0]
 800b920:	b103      	cbz	r3, 800b924 <_fstat_r+0x1c>
 800b922:	6023      	str	r3, [r4, #0]
 800b924:	bd38      	pop	{r3, r4, r5, pc}
 800b926:	bf00      	nop
 800b928:	20001904 	.word	0x20001904

0800b92c <_isatty_r>:
 800b92c:	b538      	push	{r3, r4, r5, lr}
 800b92e:	2300      	movs	r3, #0
 800b930:	4d05      	ldr	r5, [pc, #20]	; (800b948 <_isatty_r+0x1c>)
 800b932:	4604      	mov	r4, r0
 800b934:	4608      	mov	r0, r1
 800b936:	602b      	str	r3, [r5, #0]
 800b938:	f7f8 f9b0 	bl	8003c9c <_isatty>
 800b93c:	1c43      	adds	r3, r0, #1
 800b93e:	d102      	bne.n	800b946 <_isatty_r+0x1a>
 800b940:	682b      	ldr	r3, [r5, #0]
 800b942:	b103      	cbz	r3, 800b946 <_isatty_r+0x1a>
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	bd38      	pop	{r3, r4, r5, pc}
 800b948:	20001904 	.word	0x20001904

0800b94c <abort>:
 800b94c:	2006      	movs	r0, #6
 800b94e:	b508      	push	{r3, lr}
 800b950:	f000 f834 	bl	800b9bc <raise>
 800b954:	2001      	movs	r0, #1
 800b956:	f7f8 f960 	bl	8003c1a <_exit>

0800b95a <_malloc_usable_size_r>:
 800b95a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b95e:	1f18      	subs	r0, r3, #4
 800b960:	2b00      	cmp	r3, #0
 800b962:	bfbc      	itt	lt
 800b964:	580b      	ldrlt	r3, [r1, r0]
 800b966:	18c0      	addlt	r0, r0, r3
 800b968:	4770      	bx	lr

0800b96a <_raise_r>:
 800b96a:	291f      	cmp	r1, #31
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4604      	mov	r4, r0
 800b970:	460d      	mov	r5, r1
 800b972:	d904      	bls.n	800b97e <_raise_r+0x14>
 800b974:	2316      	movs	r3, #22
 800b976:	6003      	str	r3, [r0, #0]
 800b978:	f04f 30ff 	mov.w	r0, #4294967295
 800b97c:	bd38      	pop	{r3, r4, r5, pc}
 800b97e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b980:	b112      	cbz	r2, 800b988 <_raise_r+0x1e>
 800b982:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b986:	b94b      	cbnz	r3, 800b99c <_raise_r+0x32>
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 f831 	bl	800b9f0 <_getpid_r>
 800b98e:	462a      	mov	r2, r5
 800b990:	4601      	mov	r1, r0
 800b992:	4620      	mov	r0, r4
 800b994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b998:	f000 b818 	b.w	800b9cc <_kill_r>
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d00a      	beq.n	800b9b6 <_raise_r+0x4c>
 800b9a0:	1c59      	adds	r1, r3, #1
 800b9a2:	d103      	bne.n	800b9ac <_raise_r+0x42>
 800b9a4:	2316      	movs	r3, #22
 800b9a6:	6003      	str	r3, [r0, #0]
 800b9a8:	2001      	movs	r0, #1
 800b9aa:	e7e7      	b.n	800b97c <_raise_r+0x12>
 800b9ac:	2400      	movs	r4, #0
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9b4:	4798      	blx	r3
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	e7e0      	b.n	800b97c <_raise_r+0x12>
	...

0800b9bc <raise>:
 800b9bc:	4b02      	ldr	r3, [pc, #8]	; (800b9c8 <raise+0xc>)
 800b9be:	4601      	mov	r1, r0
 800b9c0:	6818      	ldr	r0, [r3, #0]
 800b9c2:	f7ff bfd2 	b.w	800b96a <_raise_r>
 800b9c6:	bf00      	nop
 800b9c8:	20000084 	.word	0x20000084

0800b9cc <_kill_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	4d06      	ldr	r5, [pc, #24]	; (800b9ec <_kill_r+0x20>)
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	4608      	mov	r0, r1
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	602b      	str	r3, [r5, #0]
 800b9da:	f7f8 f90e 	bl	8003bfa <_kill>
 800b9de:	1c43      	adds	r3, r0, #1
 800b9e0:	d102      	bne.n	800b9e8 <_kill_r+0x1c>
 800b9e2:	682b      	ldr	r3, [r5, #0]
 800b9e4:	b103      	cbz	r3, 800b9e8 <_kill_r+0x1c>
 800b9e6:	6023      	str	r3, [r4, #0]
 800b9e8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ea:	bf00      	nop
 800b9ec:	20001904 	.word	0x20001904

0800b9f0 <_getpid_r>:
 800b9f0:	f7f8 b8fc 	b.w	8003bec <_getpid>

0800b9f4 <pow>:
 800b9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9f8:	4614      	mov	r4, r2
 800b9fa:	461d      	mov	r5, r3
 800b9fc:	4680      	mov	r8, r0
 800b9fe:	4689      	mov	r9, r1
 800ba00:	f000 f9e2 	bl	800bdc8 <__ieee754_pow>
 800ba04:	4622      	mov	r2, r4
 800ba06:	4606      	mov	r6, r0
 800ba08:	460f      	mov	r7, r1
 800ba0a:	462b      	mov	r3, r5
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	4629      	mov	r1, r5
 800ba10:	f7f4 fffc 	bl	8000a0c <__aeabi_dcmpun>
 800ba14:	bbc8      	cbnz	r0, 800ba8a <pow+0x96>
 800ba16:	2200      	movs	r2, #0
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4640      	mov	r0, r8
 800ba1c:	4649      	mov	r1, r9
 800ba1e:	f7f4 ffc3 	bl	80009a8 <__aeabi_dcmpeq>
 800ba22:	b1b8      	cbz	r0, 800ba54 <pow+0x60>
 800ba24:	2200      	movs	r2, #0
 800ba26:	2300      	movs	r3, #0
 800ba28:	4620      	mov	r0, r4
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	f7f4 ffbc 	bl	80009a8 <__aeabi_dcmpeq>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	d141      	bne.n	800bab8 <pow+0xc4>
 800ba34:	4620      	mov	r0, r4
 800ba36:	4629      	mov	r1, r5
 800ba38:	f000 f868 	bl	800bb0c <finite>
 800ba3c:	b328      	cbz	r0, 800ba8a <pow+0x96>
 800ba3e:	2200      	movs	r2, #0
 800ba40:	2300      	movs	r3, #0
 800ba42:	4620      	mov	r0, r4
 800ba44:	4629      	mov	r1, r5
 800ba46:	f7f4 ffb9 	bl	80009bc <__aeabi_dcmplt>
 800ba4a:	b1f0      	cbz	r0, 800ba8a <pow+0x96>
 800ba4c:	f7fc fbfe 	bl	800824c <__errno>
 800ba50:	2322      	movs	r3, #34	; 0x22
 800ba52:	e019      	b.n	800ba88 <pow+0x94>
 800ba54:	4630      	mov	r0, r6
 800ba56:	4639      	mov	r1, r7
 800ba58:	f000 f858 	bl	800bb0c <finite>
 800ba5c:	b9c8      	cbnz	r0, 800ba92 <pow+0x9e>
 800ba5e:	4640      	mov	r0, r8
 800ba60:	4649      	mov	r1, r9
 800ba62:	f000 f853 	bl	800bb0c <finite>
 800ba66:	b1a0      	cbz	r0, 800ba92 <pow+0x9e>
 800ba68:	4620      	mov	r0, r4
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	f000 f84e 	bl	800bb0c <finite>
 800ba70:	b178      	cbz	r0, 800ba92 <pow+0x9e>
 800ba72:	4632      	mov	r2, r6
 800ba74:	463b      	mov	r3, r7
 800ba76:	4630      	mov	r0, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	f7f4 ffc7 	bl	8000a0c <__aeabi_dcmpun>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d0e4      	beq.n	800ba4c <pow+0x58>
 800ba82:	f7fc fbe3 	bl	800824c <__errno>
 800ba86:	2321      	movs	r3, #33	; 0x21
 800ba88:	6003      	str	r3, [r0, #0]
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba92:	2200      	movs	r2, #0
 800ba94:	2300      	movs	r3, #0
 800ba96:	4630      	mov	r0, r6
 800ba98:	4639      	mov	r1, r7
 800ba9a:	f7f4 ff85 	bl	80009a8 <__aeabi_dcmpeq>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d0f3      	beq.n	800ba8a <pow+0x96>
 800baa2:	4640      	mov	r0, r8
 800baa4:	4649      	mov	r1, r9
 800baa6:	f000 f831 	bl	800bb0c <finite>
 800baaa:	2800      	cmp	r0, #0
 800baac:	d0ed      	beq.n	800ba8a <pow+0x96>
 800baae:	4620      	mov	r0, r4
 800bab0:	4629      	mov	r1, r5
 800bab2:	f000 f82b 	bl	800bb0c <finite>
 800bab6:	e7c8      	b.n	800ba4a <pow+0x56>
 800bab8:	2600      	movs	r6, #0
 800baba:	4f01      	ldr	r7, [pc, #4]	; (800bac0 <pow+0xcc>)
 800babc:	e7e5      	b.n	800ba8a <pow+0x96>
 800babe:	bf00      	nop
 800bac0:	3ff00000 	.word	0x3ff00000

0800bac4 <sqrt>:
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	4606      	mov	r6, r0
 800bac8:	460f      	mov	r7, r1
 800baca:	f000 f825 	bl	800bb18 <__ieee754_sqrt>
 800bace:	4632      	mov	r2, r6
 800bad0:	4604      	mov	r4, r0
 800bad2:	460d      	mov	r5, r1
 800bad4:	463b      	mov	r3, r7
 800bad6:	4630      	mov	r0, r6
 800bad8:	4639      	mov	r1, r7
 800bada:	f7f4 ff97 	bl	8000a0c <__aeabi_dcmpun>
 800bade:	b990      	cbnz	r0, 800bb06 <sqrt+0x42>
 800bae0:	2200      	movs	r2, #0
 800bae2:	2300      	movs	r3, #0
 800bae4:	4630      	mov	r0, r6
 800bae6:	4639      	mov	r1, r7
 800bae8:	f7f4 ff68 	bl	80009bc <__aeabi_dcmplt>
 800baec:	b158      	cbz	r0, 800bb06 <sqrt+0x42>
 800baee:	f7fc fbad 	bl	800824c <__errno>
 800baf2:	2321      	movs	r3, #33	; 0x21
 800baf4:	2200      	movs	r2, #0
 800baf6:	6003      	str	r3, [r0, #0]
 800baf8:	2300      	movs	r3, #0
 800bafa:	4610      	mov	r0, r2
 800bafc:	4619      	mov	r1, r3
 800bafe:	f7f4 fe15 	bl	800072c <__aeabi_ddiv>
 800bb02:	4604      	mov	r4, r0
 800bb04:	460d      	mov	r5, r1
 800bb06:	4620      	mov	r0, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb0c <finite>:
 800bb0c:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800bb10:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bb14:	0fc0      	lsrs	r0, r0, #31
 800bb16:	4770      	bx	lr

0800bb18 <__ieee754_sqrt>:
 800bb18:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800bcbc <__ieee754_sqrt+0x1a4>
 800bb1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb20:	ea3c 0c01 	bics.w	ip, ip, r1
 800bb24:	460b      	mov	r3, r1
 800bb26:	4606      	mov	r6, r0
 800bb28:	460d      	mov	r5, r1
 800bb2a:	460a      	mov	r2, r1
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	d10e      	bne.n	800bb4e <__ieee754_sqrt+0x36>
 800bb30:	4602      	mov	r2, r0
 800bb32:	f7f4 fcd1 	bl	80004d8 <__aeabi_dmul>
 800bb36:	4602      	mov	r2, r0
 800bb38:	460b      	mov	r3, r1
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	f7f4 fb15 	bl	800016c <__adddf3>
 800bb42:	4606      	mov	r6, r0
 800bb44:	460d      	mov	r5, r1
 800bb46:	4630      	mov	r0, r6
 800bb48:	4629      	mov	r1, r5
 800bb4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4e:	2900      	cmp	r1, #0
 800bb50:	dc0d      	bgt.n	800bb6e <__ieee754_sqrt+0x56>
 800bb52:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bb56:	ea5c 0c00 	orrs.w	ip, ip, r0
 800bb5a:	d0f4      	beq.n	800bb46 <__ieee754_sqrt+0x2e>
 800bb5c:	b139      	cbz	r1, 800bb6e <__ieee754_sqrt+0x56>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	f7f4 fb02 	bl	8000168 <__aeabi_dsub>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	f7f4 fde0 	bl	800072c <__aeabi_ddiv>
 800bb6c:	e7e9      	b.n	800bb42 <__ieee754_sqrt+0x2a>
 800bb6e:	1512      	asrs	r2, r2, #20
 800bb70:	f000 8089 	beq.w	800bc86 <__ieee754_sqrt+0x16e>
 800bb74:	2500      	movs	r5, #0
 800bb76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb7a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800bb7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb82:	07d2      	lsls	r2, r2, #31
 800bb84:	bf5c      	itt	pl
 800bb86:	005b      	lslpl	r3, r3, #1
 800bb88:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800bb8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bb90:	bf58      	it	pl
 800bb92:	0064      	lslpl	r4, r4, #1
 800bb94:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800bb98:	0062      	lsls	r2, r4, #1
 800bb9a:	2016      	movs	r0, #22
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800bba2:	1076      	asrs	r6, r6, #1
 800bba4:	190f      	adds	r7, r1, r4
 800bba6:	429f      	cmp	r7, r3
 800bba8:	bfde      	ittt	le
 800bbaa:	1bdb      	suble	r3, r3, r7
 800bbac:	1939      	addle	r1, r7, r4
 800bbae:	192d      	addle	r5, r5, r4
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	3801      	subs	r0, #1
 800bbb4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bbb8:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bbbc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bbc0:	d1f0      	bne.n	800bba4 <__ieee754_sqrt+0x8c>
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	2720      	movs	r7, #32
 800bbc6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800bbca:	428b      	cmp	r3, r1
 800bbcc:	eb0c 0e00 	add.w	lr, ip, r0
 800bbd0:	dc02      	bgt.n	800bbd8 <__ieee754_sqrt+0xc0>
 800bbd2:	d113      	bne.n	800bbfc <__ieee754_sqrt+0xe4>
 800bbd4:	4596      	cmp	lr, r2
 800bbd6:	d811      	bhi.n	800bbfc <__ieee754_sqrt+0xe4>
 800bbd8:	f1be 0f00 	cmp.w	lr, #0
 800bbdc:	eb0e 000c 	add.w	r0, lr, ip
 800bbe0:	da56      	bge.n	800bc90 <__ieee754_sqrt+0x178>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	db54      	blt.n	800bc90 <__ieee754_sqrt+0x178>
 800bbe6:	f101 0801 	add.w	r8, r1, #1
 800bbea:	1a5b      	subs	r3, r3, r1
 800bbec:	4641      	mov	r1, r8
 800bbee:	4596      	cmp	lr, r2
 800bbf0:	bf88      	it	hi
 800bbf2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bbf6:	eba2 020e 	sub.w	r2, r2, lr
 800bbfa:	4464      	add	r4, ip
 800bbfc:	005b      	lsls	r3, r3, #1
 800bbfe:	3f01      	subs	r7, #1
 800bc00:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bc04:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bc08:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bc0c:	d1dd      	bne.n	800bbca <__ieee754_sqrt+0xb2>
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	d01b      	beq.n	800bc4a <__ieee754_sqrt+0x132>
 800bc12:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800bcc0 <__ieee754_sqrt+0x1a8>
 800bc16:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800bcc4 <__ieee754_sqrt+0x1ac>
 800bc1a:	e9da 0100 	ldrd	r0, r1, [sl]
 800bc1e:	e9db 2300 	ldrd	r2, r3, [fp]
 800bc22:	f7f4 faa1 	bl	8000168 <__aeabi_dsub>
 800bc26:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	4640      	mov	r0, r8
 800bc30:	4649      	mov	r1, r9
 800bc32:	f7f4 fecd 	bl	80009d0 <__aeabi_dcmple>
 800bc36:	b140      	cbz	r0, 800bc4a <__ieee754_sqrt+0x132>
 800bc38:	e9da 0100 	ldrd	r0, r1, [sl]
 800bc3c:	e9db 2300 	ldrd	r2, r3, [fp]
 800bc40:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bc44:	d126      	bne.n	800bc94 <__ieee754_sqrt+0x17c>
 800bc46:	463c      	mov	r4, r7
 800bc48:	3501      	adds	r5, #1
 800bc4a:	106b      	asrs	r3, r5, #1
 800bc4c:	0864      	lsrs	r4, r4, #1
 800bc4e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bc52:	07ea      	lsls	r2, r5, #31
 800bc54:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bc58:	bf48      	it	mi
 800bc5a:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800bc5e:	4620      	mov	r0, r4
 800bc60:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800bc64:	e76d      	b.n	800bb42 <__ieee754_sqrt+0x2a>
 800bc66:	0ae3      	lsrs	r3, r4, #11
 800bc68:	3915      	subs	r1, #21
 800bc6a:	0564      	lsls	r4, r4, #21
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d0fa      	beq.n	800bc66 <__ieee754_sqrt+0x14e>
 800bc70:	02d8      	lsls	r0, r3, #11
 800bc72:	d50a      	bpl.n	800bc8a <__ieee754_sqrt+0x172>
 800bc74:	f1c2 0020 	rsb	r0, r2, #32
 800bc78:	fa24 f000 	lsr.w	r0, r4, r0
 800bc7c:	1e55      	subs	r5, r2, #1
 800bc7e:	4094      	lsls	r4, r2
 800bc80:	4303      	orrs	r3, r0
 800bc82:	1b4a      	subs	r2, r1, r5
 800bc84:	e776      	b.n	800bb74 <__ieee754_sqrt+0x5c>
 800bc86:	4611      	mov	r1, r2
 800bc88:	e7f0      	b.n	800bc6c <__ieee754_sqrt+0x154>
 800bc8a:	005b      	lsls	r3, r3, #1
 800bc8c:	3201      	adds	r2, #1
 800bc8e:	e7ef      	b.n	800bc70 <__ieee754_sqrt+0x158>
 800bc90:	4688      	mov	r8, r1
 800bc92:	e7aa      	b.n	800bbea <__ieee754_sqrt+0xd2>
 800bc94:	f7f4 fa6a 	bl	800016c <__adddf3>
 800bc98:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4640      	mov	r0, r8
 800bca2:	4649      	mov	r1, r9
 800bca4:	f7f4 fe8a 	bl	80009bc <__aeabi_dcmplt>
 800bca8:	b120      	cbz	r0, 800bcb4 <__ieee754_sqrt+0x19c>
 800bcaa:	1ca1      	adds	r1, r4, #2
 800bcac:	bf08      	it	eq
 800bcae:	3501      	addeq	r5, #1
 800bcb0:	3402      	adds	r4, #2
 800bcb2:	e7ca      	b.n	800bc4a <__ieee754_sqrt+0x132>
 800bcb4:	3401      	adds	r4, #1
 800bcb6:	f024 0401 	bic.w	r4, r4, #1
 800bcba:	e7c6      	b.n	800bc4a <__ieee754_sqrt+0x132>
 800bcbc:	7ff00000 	.word	0x7ff00000
 800bcc0:	200001f8 	.word	0x200001f8
 800bcc4:	20000200 	.word	0x20000200

0800bcc8 <floor>:
 800bcc8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800bcd4:	2e13      	cmp	r6, #19
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4607      	mov	r7, r0
 800bcda:	460c      	mov	r4, r1
 800bcdc:	4605      	mov	r5, r0
 800bcde:	dc32      	bgt.n	800bd46 <floor+0x7e>
 800bce0:	2e00      	cmp	r6, #0
 800bce2:	da14      	bge.n	800bd0e <floor+0x46>
 800bce4:	a334      	add	r3, pc, #208	; (adr r3, 800bdb8 <floor+0xf0>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 fa3f 	bl	800016c <__adddf3>
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f7f4 fe81 	bl	80009f8 <__aeabi_dcmpgt>
 800bcf6:	b138      	cbz	r0, 800bd08 <floor+0x40>
 800bcf8:	2c00      	cmp	r4, #0
 800bcfa:	da56      	bge.n	800bdaa <floor+0xe2>
 800bcfc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800bd00:	4325      	orrs	r5, r4
 800bd02:	d055      	beq.n	800bdb0 <floor+0xe8>
 800bd04:	2500      	movs	r5, #0
 800bd06:	4c2e      	ldr	r4, [pc, #184]	; (800bdc0 <floor+0xf8>)
 800bd08:	4623      	mov	r3, r4
 800bd0a:	462f      	mov	r7, r5
 800bd0c:	e025      	b.n	800bd5a <floor+0x92>
 800bd0e:	4a2d      	ldr	r2, [pc, #180]	; (800bdc4 <floor+0xfc>)
 800bd10:	fa42 f806 	asr.w	r8, r2, r6
 800bd14:	ea01 0208 	and.w	r2, r1, r8
 800bd18:	4302      	orrs	r2, r0
 800bd1a:	d01e      	beq.n	800bd5a <floor+0x92>
 800bd1c:	a326      	add	r3, pc, #152	; (adr r3, 800bdb8 <floor+0xf0>)
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	f7f4 fa23 	bl	800016c <__adddf3>
 800bd26:	2200      	movs	r2, #0
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f7f4 fe65 	bl	80009f8 <__aeabi_dcmpgt>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d0ea      	beq.n	800bd08 <floor+0x40>
 800bd32:	2c00      	cmp	r4, #0
 800bd34:	bfbe      	ittt	lt
 800bd36:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bd3a:	4133      	asrlt	r3, r6
 800bd3c:	18e4      	addlt	r4, r4, r3
 800bd3e:	2500      	movs	r5, #0
 800bd40:	ea24 0408 	bic.w	r4, r4, r8
 800bd44:	e7e0      	b.n	800bd08 <floor+0x40>
 800bd46:	2e33      	cmp	r6, #51	; 0x33
 800bd48:	dd0b      	ble.n	800bd62 <floor+0x9a>
 800bd4a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bd4e:	d104      	bne.n	800bd5a <floor+0x92>
 800bd50:	4602      	mov	r2, r0
 800bd52:	f7f4 fa0b 	bl	800016c <__adddf3>
 800bd56:	4607      	mov	r7, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd62:	f04f 38ff 	mov.w	r8, #4294967295
 800bd66:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800bd6a:	fa28 f802 	lsr.w	r8, r8, r2
 800bd6e:	ea10 0f08 	tst.w	r0, r8
 800bd72:	d0f2      	beq.n	800bd5a <floor+0x92>
 800bd74:	a310      	add	r3, pc, #64	; (adr r3, 800bdb8 <floor+0xf0>)
 800bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7a:	f7f4 f9f7 	bl	800016c <__adddf3>
 800bd7e:	2200      	movs	r2, #0
 800bd80:	2300      	movs	r3, #0
 800bd82:	f7f4 fe39 	bl	80009f8 <__aeabi_dcmpgt>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d0be      	beq.n	800bd08 <floor+0x40>
 800bd8a:	2c00      	cmp	r4, #0
 800bd8c:	da0a      	bge.n	800bda4 <floor+0xdc>
 800bd8e:	2e14      	cmp	r6, #20
 800bd90:	d101      	bne.n	800bd96 <floor+0xce>
 800bd92:	3401      	adds	r4, #1
 800bd94:	e006      	b.n	800bda4 <floor+0xdc>
 800bd96:	2301      	movs	r3, #1
 800bd98:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bd9c:	40b3      	lsls	r3, r6
 800bd9e:	441d      	add	r5, r3
 800bda0:	42af      	cmp	r7, r5
 800bda2:	d8f6      	bhi.n	800bd92 <floor+0xca>
 800bda4:	ea25 0508 	bic.w	r5, r5, r8
 800bda8:	e7ae      	b.n	800bd08 <floor+0x40>
 800bdaa:	2500      	movs	r5, #0
 800bdac:	462c      	mov	r4, r5
 800bdae:	e7ab      	b.n	800bd08 <floor+0x40>
 800bdb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bdb4:	e7a8      	b.n	800bd08 <floor+0x40>
 800bdb6:	bf00      	nop
 800bdb8:	8800759c 	.word	0x8800759c
 800bdbc:	7e37e43c 	.word	0x7e37e43c
 800bdc0:	bff00000 	.word	0xbff00000
 800bdc4:	000fffff 	.word	0x000fffff

0800bdc8 <__ieee754_pow>:
 800bdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	b093      	sub	sp, #76	; 0x4c
 800bdce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdd2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800bdd6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800bdda:	4689      	mov	r9, r1
 800bddc:	ea56 0102 	orrs.w	r1, r6, r2
 800bde0:	4680      	mov	r8, r0
 800bde2:	d111      	bne.n	800be08 <__ieee754_pow+0x40>
 800bde4:	1803      	adds	r3, r0, r0
 800bde6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800bdea:	4152      	adcs	r2, r2
 800bdec:	4299      	cmp	r1, r3
 800bdee:	4b82      	ldr	r3, [pc, #520]	; (800bff8 <__ieee754_pow+0x230>)
 800bdf0:	4193      	sbcs	r3, r2
 800bdf2:	f080 84ba 	bcs.w	800c76a <__ieee754_pow+0x9a2>
 800bdf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdfa:	4640      	mov	r0, r8
 800bdfc:	4649      	mov	r1, r9
 800bdfe:	f7f4 f9b5 	bl	800016c <__adddf3>
 800be02:	4683      	mov	fp, r0
 800be04:	468c      	mov	ip, r1
 800be06:	e06f      	b.n	800bee8 <__ieee754_pow+0x120>
 800be08:	4b7c      	ldr	r3, [pc, #496]	; (800bffc <__ieee754_pow+0x234>)
 800be0a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800be0e:	429c      	cmp	r4, r3
 800be10:	464d      	mov	r5, r9
 800be12:	4682      	mov	sl, r0
 800be14:	dc06      	bgt.n	800be24 <__ieee754_pow+0x5c>
 800be16:	d101      	bne.n	800be1c <__ieee754_pow+0x54>
 800be18:	2800      	cmp	r0, #0
 800be1a:	d1ec      	bne.n	800bdf6 <__ieee754_pow+0x2e>
 800be1c:	429e      	cmp	r6, r3
 800be1e:	dc01      	bgt.n	800be24 <__ieee754_pow+0x5c>
 800be20:	d10f      	bne.n	800be42 <__ieee754_pow+0x7a>
 800be22:	b172      	cbz	r2, 800be42 <__ieee754_pow+0x7a>
 800be24:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800be28:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800be2c:	ea55 050a 	orrs.w	r5, r5, sl
 800be30:	d1e1      	bne.n	800bdf6 <__ieee754_pow+0x2e>
 800be32:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800be36:	18db      	adds	r3, r3, r3
 800be38:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800be3c:	4152      	adcs	r2, r2
 800be3e:	429d      	cmp	r5, r3
 800be40:	e7d5      	b.n	800bdee <__ieee754_pow+0x26>
 800be42:	2d00      	cmp	r5, #0
 800be44:	da39      	bge.n	800beba <__ieee754_pow+0xf2>
 800be46:	4b6e      	ldr	r3, [pc, #440]	; (800c000 <__ieee754_pow+0x238>)
 800be48:	429e      	cmp	r6, r3
 800be4a:	dc52      	bgt.n	800bef2 <__ieee754_pow+0x12a>
 800be4c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800be50:	429e      	cmp	r6, r3
 800be52:	f340 849d 	ble.w	800c790 <__ieee754_pow+0x9c8>
 800be56:	1533      	asrs	r3, r6, #20
 800be58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800be5c:	2b14      	cmp	r3, #20
 800be5e:	dd0f      	ble.n	800be80 <__ieee754_pow+0xb8>
 800be60:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800be64:	fa22 f103 	lsr.w	r1, r2, r3
 800be68:	fa01 f303 	lsl.w	r3, r1, r3
 800be6c:	4293      	cmp	r3, r2
 800be6e:	f040 848f 	bne.w	800c790 <__ieee754_pow+0x9c8>
 800be72:	f001 0101 	and.w	r1, r1, #1
 800be76:	f1c1 0302 	rsb	r3, r1, #2
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	b182      	cbz	r2, 800bea0 <__ieee754_pow+0xd8>
 800be7e:	e05d      	b.n	800bf3c <__ieee754_pow+0x174>
 800be80:	2a00      	cmp	r2, #0
 800be82:	d159      	bne.n	800bf38 <__ieee754_pow+0x170>
 800be84:	f1c3 0314 	rsb	r3, r3, #20
 800be88:	fa46 f103 	asr.w	r1, r6, r3
 800be8c:	fa01 f303 	lsl.w	r3, r1, r3
 800be90:	42b3      	cmp	r3, r6
 800be92:	f040 847a 	bne.w	800c78a <__ieee754_pow+0x9c2>
 800be96:	f001 0101 	and.w	r1, r1, #1
 800be9a:	f1c1 0302 	rsb	r3, r1, #2
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	4b58      	ldr	r3, [pc, #352]	; (800c004 <__ieee754_pow+0x23c>)
 800bea2:	429e      	cmp	r6, r3
 800bea4:	d132      	bne.n	800bf0c <__ieee754_pow+0x144>
 800bea6:	2f00      	cmp	r7, #0
 800bea8:	f280 846b 	bge.w	800c782 <__ieee754_pow+0x9ba>
 800beac:	4642      	mov	r2, r8
 800beae:	464b      	mov	r3, r9
 800beb0:	2000      	movs	r0, #0
 800beb2:	4954      	ldr	r1, [pc, #336]	; (800c004 <__ieee754_pow+0x23c>)
 800beb4:	f7f4 fc3a 	bl	800072c <__aeabi_ddiv>
 800beb8:	e7a3      	b.n	800be02 <__ieee754_pow+0x3a>
 800beba:	2300      	movs	r3, #0
 800bebc:	9300      	str	r3, [sp, #0]
 800bebe:	2a00      	cmp	r2, #0
 800bec0:	d13c      	bne.n	800bf3c <__ieee754_pow+0x174>
 800bec2:	4b4e      	ldr	r3, [pc, #312]	; (800bffc <__ieee754_pow+0x234>)
 800bec4:	429e      	cmp	r6, r3
 800bec6:	d1eb      	bne.n	800bea0 <__ieee754_pow+0xd8>
 800bec8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800becc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bed0:	ea53 030a 	orrs.w	r3, r3, sl
 800bed4:	f000 8449 	beq.w	800c76a <__ieee754_pow+0x9a2>
 800bed8:	4b4b      	ldr	r3, [pc, #300]	; (800c008 <__ieee754_pow+0x240>)
 800beda:	429c      	cmp	r4, r3
 800bedc:	dd0b      	ble.n	800bef6 <__ieee754_pow+0x12e>
 800bede:	2f00      	cmp	r7, #0
 800bee0:	f2c0 8449 	blt.w	800c776 <__ieee754_pow+0x9ae>
 800bee4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800bee8:	4658      	mov	r0, fp
 800beea:	4661      	mov	r1, ip
 800beec:	b013      	add	sp, #76	; 0x4c
 800beee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef2:	2302      	movs	r3, #2
 800bef4:	e7e2      	b.n	800bebc <__ieee754_pow+0xf4>
 800bef6:	2f00      	cmp	r7, #0
 800bef8:	f04f 0b00 	mov.w	fp, #0
 800befc:	f04f 0c00 	mov.w	ip, #0
 800bf00:	daf2      	bge.n	800bee8 <__ieee754_pow+0x120>
 800bf02:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800bf06:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800bf0a:	e7ed      	b.n	800bee8 <__ieee754_pow+0x120>
 800bf0c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800bf10:	d106      	bne.n	800bf20 <__ieee754_pow+0x158>
 800bf12:	4642      	mov	r2, r8
 800bf14:	464b      	mov	r3, r9
 800bf16:	4640      	mov	r0, r8
 800bf18:	4649      	mov	r1, r9
 800bf1a:	f7f4 fadd 	bl	80004d8 <__aeabi_dmul>
 800bf1e:	e770      	b.n	800be02 <__ieee754_pow+0x3a>
 800bf20:	4b3a      	ldr	r3, [pc, #232]	; (800c00c <__ieee754_pow+0x244>)
 800bf22:	429f      	cmp	r7, r3
 800bf24:	d10a      	bne.n	800bf3c <__ieee754_pow+0x174>
 800bf26:	2d00      	cmp	r5, #0
 800bf28:	db08      	blt.n	800bf3c <__ieee754_pow+0x174>
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	b013      	add	sp, #76	; 0x4c
 800bf30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf34:	f7ff bdf0 	b.w	800bb18 <__ieee754_sqrt>
 800bf38:	2300      	movs	r3, #0
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	4640      	mov	r0, r8
 800bf3e:	4649      	mov	r1, r9
 800bf40:	f000 fc58 	bl	800c7f4 <fabs>
 800bf44:	4683      	mov	fp, r0
 800bf46:	468c      	mov	ip, r1
 800bf48:	f1ba 0f00 	cmp.w	sl, #0
 800bf4c:	d128      	bne.n	800bfa0 <__ieee754_pow+0x1d8>
 800bf4e:	b124      	cbz	r4, 800bf5a <__ieee754_pow+0x192>
 800bf50:	4b2c      	ldr	r3, [pc, #176]	; (800c004 <__ieee754_pow+0x23c>)
 800bf52:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d122      	bne.n	800bfa0 <__ieee754_pow+0x1d8>
 800bf5a:	2f00      	cmp	r7, #0
 800bf5c:	da07      	bge.n	800bf6e <__ieee754_pow+0x1a6>
 800bf5e:	465a      	mov	r2, fp
 800bf60:	4663      	mov	r3, ip
 800bf62:	2000      	movs	r0, #0
 800bf64:	4927      	ldr	r1, [pc, #156]	; (800c004 <__ieee754_pow+0x23c>)
 800bf66:	f7f4 fbe1 	bl	800072c <__aeabi_ddiv>
 800bf6a:	4683      	mov	fp, r0
 800bf6c:	468c      	mov	ip, r1
 800bf6e:	2d00      	cmp	r5, #0
 800bf70:	daba      	bge.n	800bee8 <__ieee754_pow+0x120>
 800bf72:	9b00      	ldr	r3, [sp, #0]
 800bf74:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bf78:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bf7c:	431c      	orrs	r4, r3
 800bf7e:	d108      	bne.n	800bf92 <__ieee754_pow+0x1ca>
 800bf80:	465a      	mov	r2, fp
 800bf82:	4663      	mov	r3, ip
 800bf84:	4658      	mov	r0, fp
 800bf86:	4661      	mov	r1, ip
 800bf88:	f7f4 f8ee 	bl	8000168 <__aeabi_dsub>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	460b      	mov	r3, r1
 800bf90:	e790      	b.n	800beb4 <__ieee754_pow+0xec>
 800bf92:	9b00      	ldr	r3, [sp, #0]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d1a7      	bne.n	800bee8 <__ieee754_pow+0x120>
 800bf98:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800bf9c:	469c      	mov	ip, r3
 800bf9e:	e7a3      	b.n	800bee8 <__ieee754_pow+0x120>
 800bfa0:	0feb      	lsrs	r3, r5, #31
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	930c      	str	r3, [sp, #48]	; 0x30
 800bfa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfa8:	9b00      	ldr	r3, [sp, #0]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	d104      	bne.n	800bfb8 <__ieee754_pow+0x1f0>
 800bfae:	4642      	mov	r2, r8
 800bfb0:	464b      	mov	r3, r9
 800bfb2:	4640      	mov	r0, r8
 800bfb4:	4649      	mov	r1, r9
 800bfb6:	e7e7      	b.n	800bf88 <__ieee754_pow+0x1c0>
 800bfb8:	4b15      	ldr	r3, [pc, #84]	; (800c010 <__ieee754_pow+0x248>)
 800bfba:	429e      	cmp	r6, r3
 800bfbc:	f340 80f6 	ble.w	800c1ac <__ieee754_pow+0x3e4>
 800bfc0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bfc4:	429e      	cmp	r6, r3
 800bfc6:	4b10      	ldr	r3, [pc, #64]	; (800c008 <__ieee754_pow+0x240>)
 800bfc8:	dd09      	ble.n	800bfde <__ieee754_pow+0x216>
 800bfca:	429c      	cmp	r4, r3
 800bfcc:	dc0c      	bgt.n	800bfe8 <__ieee754_pow+0x220>
 800bfce:	2f00      	cmp	r7, #0
 800bfd0:	da0c      	bge.n	800bfec <__ieee754_pow+0x224>
 800bfd2:	2000      	movs	r0, #0
 800bfd4:	b013      	add	sp, #76	; 0x4c
 800bfd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfda:	f000 bcb2 	b.w	800c942 <__math_oflow>
 800bfde:	429c      	cmp	r4, r3
 800bfe0:	dbf5      	blt.n	800bfce <__ieee754_pow+0x206>
 800bfe2:	4b08      	ldr	r3, [pc, #32]	; (800c004 <__ieee754_pow+0x23c>)
 800bfe4:	429c      	cmp	r4, r3
 800bfe6:	dd15      	ble.n	800c014 <__ieee754_pow+0x24c>
 800bfe8:	2f00      	cmp	r7, #0
 800bfea:	dcf2      	bgt.n	800bfd2 <__ieee754_pow+0x20a>
 800bfec:	2000      	movs	r0, #0
 800bfee:	b013      	add	sp, #76	; 0x4c
 800bff0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff4:	f000 bca0 	b.w	800c938 <__math_uflow>
 800bff8:	fff00000 	.word	0xfff00000
 800bffc:	7ff00000 	.word	0x7ff00000
 800c000:	433fffff 	.word	0x433fffff
 800c004:	3ff00000 	.word	0x3ff00000
 800c008:	3fefffff 	.word	0x3fefffff
 800c00c:	3fe00000 	.word	0x3fe00000
 800c010:	41e00000 	.word	0x41e00000
 800c014:	4661      	mov	r1, ip
 800c016:	2200      	movs	r2, #0
 800c018:	4658      	mov	r0, fp
 800c01a:	4b5f      	ldr	r3, [pc, #380]	; (800c198 <__ieee754_pow+0x3d0>)
 800c01c:	f7f4 f8a4 	bl	8000168 <__aeabi_dsub>
 800c020:	a355      	add	r3, pc, #340	; (adr r3, 800c178 <__ieee754_pow+0x3b0>)
 800c022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c026:	4604      	mov	r4, r0
 800c028:	460d      	mov	r5, r1
 800c02a:	f7f4 fa55 	bl	80004d8 <__aeabi_dmul>
 800c02e:	a354      	add	r3, pc, #336	; (adr r3, 800c180 <__ieee754_pow+0x3b8>)
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	4606      	mov	r6, r0
 800c036:	460f      	mov	r7, r1
 800c038:	4620      	mov	r0, r4
 800c03a:	4629      	mov	r1, r5
 800c03c:	f7f4 fa4c 	bl	80004d8 <__aeabi_dmul>
 800c040:	2200      	movs	r2, #0
 800c042:	4682      	mov	sl, r0
 800c044:	468b      	mov	fp, r1
 800c046:	4620      	mov	r0, r4
 800c048:	4629      	mov	r1, r5
 800c04a:	4b54      	ldr	r3, [pc, #336]	; (800c19c <__ieee754_pow+0x3d4>)
 800c04c:	f7f4 fa44 	bl	80004d8 <__aeabi_dmul>
 800c050:	4602      	mov	r2, r0
 800c052:	460b      	mov	r3, r1
 800c054:	a14c      	add	r1, pc, #304	; (adr r1, 800c188 <__ieee754_pow+0x3c0>)
 800c056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c05a:	f7f4 f885 	bl	8000168 <__aeabi_dsub>
 800c05e:	4622      	mov	r2, r4
 800c060:	462b      	mov	r3, r5
 800c062:	f7f4 fa39 	bl	80004d8 <__aeabi_dmul>
 800c066:	4602      	mov	r2, r0
 800c068:	460b      	mov	r3, r1
 800c06a:	2000      	movs	r0, #0
 800c06c:	494c      	ldr	r1, [pc, #304]	; (800c1a0 <__ieee754_pow+0x3d8>)
 800c06e:	f7f4 f87b 	bl	8000168 <__aeabi_dsub>
 800c072:	4622      	mov	r2, r4
 800c074:	462b      	mov	r3, r5
 800c076:	4680      	mov	r8, r0
 800c078:	4689      	mov	r9, r1
 800c07a:	4620      	mov	r0, r4
 800c07c:	4629      	mov	r1, r5
 800c07e:	f7f4 fa2b 	bl	80004d8 <__aeabi_dmul>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	4640      	mov	r0, r8
 800c088:	4649      	mov	r1, r9
 800c08a:	f7f4 fa25 	bl	80004d8 <__aeabi_dmul>
 800c08e:	a340      	add	r3, pc, #256	; (adr r3, 800c190 <__ieee754_pow+0x3c8>)
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	f7f4 fa20 	bl	80004d8 <__aeabi_dmul>
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	4650      	mov	r0, sl
 800c09e:	4659      	mov	r1, fp
 800c0a0:	f7f4 f862 	bl	8000168 <__aeabi_dsub>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	460d      	mov	r5, r1
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	4639      	mov	r1, r7
 800c0b0:	f7f4 f85c 	bl	800016c <__adddf3>
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	4632      	mov	r2, r6
 800c0b8:	463b      	mov	r3, r7
 800c0ba:	4682      	mov	sl, r0
 800c0bc:	468b      	mov	fp, r1
 800c0be:	f7f4 f853 	bl	8000168 <__aeabi_dsub>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	f7f4 f84d 	bl	8000168 <__aeabi_dsub>
 800c0ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c0d2:	9b00      	ldr	r3, [sp, #0]
 800c0d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0d6:	3b01      	subs	r3, #1
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	f04f 0600 	mov.w	r6, #0
 800c0de:	f04f 0200 	mov.w	r2, #0
 800c0e2:	bf0c      	ite	eq
 800c0e4:	4b2f      	ldreq	r3, [pc, #188]	; (800c1a4 <__ieee754_pow+0x3dc>)
 800c0e6:	4b2c      	ldrne	r3, [pc, #176]	; (800c198 <__ieee754_pow+0x3d0>)
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	460d      	mov	r5, r1
 800c0ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0f0:	e9cd 2300 	strd	r2, r3, [sp]
 800c0f4:	4632      	mov	r2, r6
 800c0f6:	463b      	mov	r3, r7
 800c0f8:	f7f4 f836 	bl	8000168 <__aeabi_dsub>
 800c0fc:	4652      	mov	r2, sl
 800c0fe:	465b      	mov	r3, fp
 800c100:	f7f4 f9ea 	bl	80004d8 <__aeabi_dmul>
 800c104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c108:	4680      	mov	r8, r0
 800c10a:	4689      	mov	r9, r1
 800c10c:	4620      	mov	r0, r4
 800c10e:	4629      	mov	r1, r5
 800c110:	f7f4 f9e2 	bl	80004d8 <__aeabi_dmul>
 800c114:	4602      	mov	r2, r0
 800c116:	460b      	mov	r3, r1
 800c118:	4640      	mov	r0, r8
 800c11a:	4649      	mov	r1, r9
 800c11c:	f7f4 f826 	bl	800016c <__adddf3>
 800c120:	4632      	mov	r2, r6
 800c122:	463b      	mov	r3, r7
 800c124:	4680      	mov	r8, r0
 800c126:	4689      	mov	r9, r1
 800c128:	4650      	mov	r0, sl
 800c12a:	4659      	mov	r1, fp
 800c12c:	f7f4 f9d4 	bl	80004d8 <__aeabi_dmul>
 800c130:	4604      	mov	r4, r0
 800c132:	460d      	mov	r5, r1
 800c134:	460b      	mov	r3, r1
 800c136:	4602      	mov	r2, r0
 800c138:	4649      	mov	r1, r9
 800c13a:	4640      	mov	r0, r8
 800c13c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c140:	f7f4 f814 	bl	800016c <__adddf3>
 800c144:	4b18      	ldr	r3, [pc, #96]	; (800c1a8 <__ieee754_pow+0x3e0>)
 800c146:	4682      	mov	sl, r0
 800c148:	4299      	cmp	r1, r3
 800c14a:	460f      	mov	r7, r1
 800c14c:	460e      	mov	r6, r1
 800c14e:	f340 82e7 	ble.w	800c720 <__ieee754_pow+0x958>
 800c152:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c156:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c15a:	4303      	orrs	r3, r0
 800c15c:	f000 81e2 	beq.w	800c524 <__ieee754_pow+0x75c>
 800c160:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c164:	2200      	movs	r2, #0
 800c166:	2300      	movs	r3, #0
 800c168:	f7f4 fc28 	bl	80009bc <__aeabi_dcmplt>
 800c16c:	3800      	subs	r0, #0
 800c16e:	bf18      	it	ne
 800c170:	2001      	movne	r0, #1
 800c172:	e72f      	b.n	800bfd4 <__ieee754_pow+0x20c>
 800c174:	f3af 8000 	nop.w
 800c178:	60000000 	.word	0x60000000
 800c17c:	3ff71547 	.word	0x3ff71547
 800c180:	f85ddf44 	.word	0xf85ddf44
 800c184:	3e54ae0b 	.word	0x3e54ae0b
 800c188:	55555555 	.word	0x55555555
 800c18c:	3fd55555 	.word	0x3fd55555
 800c190:	652b82fe 	.word	0x652b82fe
 800c194:	3ff71547 	.word	0x3ff71547
 800c198:	3ff00000 	.word	0x3ff00000
 800c19c:	3fd00000 	.word	0x3fd00000
 800c1a0:	3fe00000 	.word	0x3fe00000
 800c1a4:	bff00000 	.word	0xbff00000
 800c1a8:	408fffff 	.word	0x408fffff
 800c1ac:	4bd4      	ldr	r3, [pc, #848]	; (800c500 <__ieee754_pow+0x738>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	402b      	ands	r3, r5
 800c1b2:	b943      	cbnz	r3, 800c1c6 <__ieee754_pow+0x3fe>
 800c1b4:	4658      	mov	r0, fp
 800c1b6:	4661      	mov	r1, ip
 800c1b8:	4bd2      	ldr	r3, [pc, #840]	; (800c504 <__ieee754_pow+0x73c>)
 800c1ba:	f7f4 f98d 	bl	80004d8 <__aeabi_dmul>
 800c1be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c1c2:	4683      	mov	fp, r0
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	1523      	asrs	r3, r4, #20
 800c1c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c1cc:	4413      	add	r3, r2
 800c1ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1d0:	4bcd      	ldr	r3, [pc, #820]	; (800c508 <__ieee754_pow+0x740>)
 800c1d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c1d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c1da:	429c      	cmp	r4, r3
 800c1dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c1e0:	dd08      	ble.n	800c1f4 <__ieee754_pow+0x42c>
 800c1e2:	4bca      	ldr	r3, [pc, #808]	; (800c50c <__ieee754_pow+0x744>)
 800c1e4:	429c      	cmp	r4, r3
 800c1e6:	f340 8164 	ble.w	800c4b2 <__ieee754_pow+0x6ea>
 800c1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ec:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1f4:	2600      	movs	r6, #0
 800c1f6:	00f3      	lsls	r3, r6, #3
 800c1f8:	930d      	str	r3, [sp, #52]	; 0x34
 800c1fa:	4bc5      	ldr	r3, [pc, #788]	; (800c510 <__ieee754_pow+0x748>)
 800c1fc:	4658      	mov	r0, fp
 800c1fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c202:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c206:	4629      	mov	r1, r5
 800c208:	461a      	mov	r2, r3
 800c20a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c20e:	4623      	mov	r3, r4
 800c210:	f7f3 ffaa 	bl	8000168 <__aeabi_dsub>
 800c214:	46da      	mov	sl, fp
 800c216:	462b      	mov	r3, r5
 800c218:	4652      	mov	r2, sl
 800c21a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c21e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c222:	f7f3 ffa3 	bl	800016c <__adddf3>
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	2000      	movs	r0, #0
 800c22c:	49b9      	ldr	r1, [pc, #740]	; (800c514 <__ieee754_pow+0x74c>)
 800c22e:	f7f4 fa7d 	bl	800072c <__aeabi_ddiv>
 800c232:	4602      	mov	r2, r0
 800c234:	460b      	mov	r3, r1
 800c236:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c23a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c23e:	f7f4 f94b 	bl	80004d8 <__aeabi_dmul>
 800c242:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c246:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c24a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c24e:	2300      	movs	r3, #0
 800c250:	2200      	movs	r2, #0
 800c252:	46ab      	mov	fp, r5
 800c254:	106d      	asrs	r5, r5, #1
 800c256:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c25a:	9304      	str	r3, [sp, #16]
 800c25c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c260:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c264:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800c268:	4640      	mov	r0, r8
 800c26a:	4649      	mov	r1, r9
 800c26c:	4614      	mov	r4, r2
 800c26e:	461d      	mov	r5, r3
 800c270:	f7f4 f932 	bl	80004d8 <__aeabi_dmul>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c27c:	f7f3 ff74 	bl	8000168 <__aeabi_dsub>
 800c280:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c284:	4606      	mov	r6, r0
 800c286:	460f      	mov	r7, r1
 800c288:	4620      	mov	r0, r4
 800c28a:	4629      	mov	r1, r5
 800c28c:	f7f3 ff6c 	bl	8000168 <__aeabi_dsub>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	4650      	mov	r0, sl
 800c296:	4659      	mov	r1, fp
 800c298:	f7f3 ff66 	bl	8000168 <__aeabi_dsub>
 800c29c:	4642      	mov	r2, r8
 800c29e:	464b      	mov	r3, r9
 800c2a0:	f7f4 f91a 	bl	80004d8 <__aeabi_dmul>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	4639      	mov	r1, r7
 800c2ac:	f7f3 ff5c 	bl	8000168 <__aeabi_dsub>
 800c2b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c2b4:	f7f4 f910 	bl	80004d8 <__aeabi_dmul>
 800c2b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2bc:	4682      	mov	sl, r0
 800c2be:	468b      	mov	fp, r1
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	f7f4 f908 	bl	80004d8 <__aeabi_dmul>
 800c2c8:	a37b      	add	r3, pc, #492	; (adr r3, 800c4b8 <__ieee754_pow+0x6f0>)
 800c2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	460d      	mov	r5, r1
 800c2d2:	f7f4 f901 	bl	80004d8 <__aeabi_dmul>
 800c2d6:	a37a      	add	r3, pc, #488	; (adr r3, 800c4c0 <__ieee754_pow+0x6f8>)
 800c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2dc:	f7f3 ff46 	bl	800016c <__adddf3>
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	462b      	mov	r3, r5
 800c2e4:	f7f4 f8f8 	bl	80004d8 <__aeabi_dmul>
 800c2e8:	a377      	add	r3, pc, #476	; (adr r3, 800c4c8 <__ieee754_pow+0x700>)
 800c2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ee:	f7f3 ff3d 	bl	800016c <__adddf3>
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	462b      	mov	r3, r5
 800c2f6:	f7f4 f8ef 	bl	80004d8 <__aeabi_dmul>
 800c2fa:	a375      	add	r3, pc, #468	; (adr r3, 800c4d0 <__ieee754_pow+0x708>)
 800c2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c300:	f7f3 ff34 	bl	800016c <__adddf3>
 800c304:	4622      	mov	r2, r4
 800c306:	462b      	mov	r3, r5
 800c308:	f7f4 f8e6 	bl	80004d8 <__aeabi_dmul>
 800c30c:	a372      	add	r3, pc, #456	; (adr r3, 800c4d8 <__ieee754_pow+0x710>)
 800c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c312:	f7f3 ff2b 	bl	800016c <__adddf3>
 800c316:	4622      	mov	r2, r4
 800c318:	462b      	mov	r3, r5
 800c31a:	f7f4 f8dd 	bl	80004d8 <__aeabi_dmul>
 800c31e:	a370      	add	r3, pc, #448	; (adr r3, 800c4e0 <__ieee754_pow+0x718>)
 800c320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c324:	f7f3 ff22 	bl	800016c <__adddf3>
 800c328:	4622      	mov	r2, r4
 800c32a:	4606      	mov	r6, r0
 800c32c:	460f      	mov	r7, r1
 800c32e:	462b      	mov	r3, r5
 800c330:	4620      	mov	r0, r4
 800c332:	4629      	mov	r1, r5
 800c334:	f7f4 f8d0 	bl	80004d8 <__aeabi_dmul>
 800c338:	4602      	mov	r2, r0
 800c33a:	460b      	mov	r3, r1
 800c33c:	4630      	mov	r0, r6
 800c33e:	4639      	mov	r1, r7
 800c340:	f7f4 f8ca 	bl	80004d8 <__aeabi_dmul>
 800c344:	4604      	mov	r4, r0
 800c346:	460d      	mov	r5, r1
 800c348:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c34c:	4642      	mov	r2, r8
 800c34e:	464b      	mov	r3, r9
 800c350:	f7f3 ff0c 	bl	800016c <__adddf3>
 800c354:	4652      	mov	r2, sl
 800c356:	465b      	mov	r3, fp
 800c358:	f7f4 f8be 	bl	80004d8 <__aeabi_dmul>
 800c35c:	4622      	mov	r2, r4
 800c35e:	462b      	mov	r3, r5
 800c360:	f7f3 ff04 	bl	800016c <__adddf3>
 800c364:	4642      	mov	r2, r8
 800c366:	4606      	mov	r6, r0
 800c368:	460f      	mov	r7, r1
 800c36a:	464b      	mov	r3, r9
 800c36c:	4640      	mov	r0, r8
 800c36e:	4649      	mov	r1, r9
 800c370:	f7f4 f8b2 	bl	80004d8 <__aeabi_dmul>
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c37c:	2200      	movs	r2, #0
 800c37e:	4b66      	ldr	r3, [pc, #408]	; (800c518 <__ieee754_pow+0x750>)
 800c380:	f7f3 fef4 	bl	800016c <__adddf3>
 800c384:	4632      	mov	r2, r6
 800c386:	463b      	mov	r3, r7
 800c388:	f7f3 fef0 	bl	800016c <__adddf3>
 800c38c:	2400      	movs	r4, #0
 800c38e:	460d      	mov	r5, r1
 800c390:	4622      	mov	r2, r4
 800c392:	460b      	mov	r3, r1
 800c394:	4640      	mov	r0, r8
 800c396:	4649      	mov	r1, r9
 800c398:	f7f4 f89e 	bl	80004d8 <__aeabi_dmul>
 800c39c:	2200      	movs	r2, #0
 800c39e:	4680      	mov	r8, r0
 800c3a0:	4689      	mov	r9, r1
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	4b5c      	ldr	r3, [pc, #368]	; (800c518 <__ieee754_pow+0x750>)
 800c3a8:	f7f3 fede 	bl	8000168 <__aeabi_dsub>
 800c3ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c3b0:	f7f3 feda 	bl	8000168 <__aeabi_dsub>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	f7f3 fed4 	bl	8000168 <__aeabi_dsub>
 800c3c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c3c4:	f7f4 f888 	bl	80004d8 <__aeabi_dmul>
 800c3c8:	4622      	mov	r2, r4
 800c3ca:	4606      	mov	r6, r0
 800c3cc:	460f      	mov	r7, r1
 800c3ce:	462b      	mov	r3, r5
 800c3d0:	4650      	mov	r0, sl
 800c3d2:	4659      	mov	r1, fp
 800c3d4:	f7f4 f880 	bl	80004d8 <__aeabi_dmul>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	460b      	mov	r3, r1
 800c3dc:	4630      	mov	r0, r6
 800c3de:	4639      	mov	r1, r7
 800c3e0:	f7f3 fec4 	bl	800016c <__adddf3>
 800c3e4:	2400      	movs	r4, #0
 800c3e6:	4606      	mov	r6, r0
 800c3e8:	460f      	mov	r7, r1
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	4640      	mov	r0, r8
 800c3f0:	4649      	mov	r1, r9
 800c3f2:	f7f3 febb 	bl	800016c <__adddf3>
 800c3f6:	a33c      	add	r3, pc, #240	; (adr r3, 800c4e8 <__ieee754_pow+0x720>)
 800c3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	460d      	mov	r5, r1
 800c400:	f7f4 f86a 	bl	80004d8 <__aeabi_dmul>
 800c404:	4642      	mov	r2, r8
 800c406:	464b      	mov	r3, r9
 800c408:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c40c:	4620      	mov	r0, r4
 800c40e:	4629      	mov	r1, r5
 800c410:	f7f3 feaa 	bl	8000168 <__aeabi_dsub>
 800c414:	4602      	mov	r2, r0
 800c416:	460b      	mov	r3, r1
 800c418:	4630      	mov	r0, r6
 800c41a:	4639      	mov	r1, r7
 800c41c:	f7f3 fea4 	bl	8000168 <__aeabi_dsub>
 800c420:	a333      	add	r3, pc, #204	; (adr r3, 800c4f0 <__ieee754_pow+0x728>)
 800c422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c426:	f7f4 f857 	bl	80004d8 <__aeabi_dmul>
 800c42a:	a333      	add	r3, pc, #204	; (adr r3, 800c4f8 <__ieee754_pow+0x730>)
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	4606      	mov	r6, r0
 800c432:	460f      	mov	r7, r1
 800c434:	4620      	mov	r0, r4
 800c436:	4629      	mov	r1, r5
 800c438:	f7f4 f84e 	bl	80004d8 <__aeabi_dmul>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	4630      	mov	r0, r6
 800c442:	4639      	mov	r1, r7
 800c444:	f7f3 fe92 	bl	800016c <__adddf3>
 800c448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c44a:	4b34      	ldr	r3, [pc, #208]	; (800c51c <__ieee754_pow+0x754>)
 800c44c:	4413      	add	r3, r2
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	f7f3 fe8b 	bl	800016c <__adddf3>
 800c456:	4680      	mov	r8, r0
 800c458:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c45a:	4689      	mov	r9, r1
 800c45c:	f7f3 ffd2 	bl	8000404 <__aeabi_i2d>
 800c460:	4604      	mov	r4, r0
 800c462:	460d      	mov	r5, r1
 800c464:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c46a:	4b2d      	ldr	r3, [pc, #180]	; (800c520 <__ieee754_pow+0x758>)
 800c46c:	4413      	add	r3, r2
 800c46e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c472:	4642      	mov	r2, r8
 800c474:	464b      	mov	r3, r9
 800c476:	f7f3 fe79 	bl	800016c <__adddf3>
 800c47a:	4632      	mov	r2, r6
 800c47c:	463b      	mov	r3, r7
 800c47e:	f7f3 fe75 	bl	800016c <__adddf3>
 800c482:	4622      	mov	r2, r4
 800c484:	462b      	mov	r3, r5
 800c486:	f7f3 fe71 	bl	800016c <__adddf3>
 800c48a:	2000      	movs	r0, #0
 800c48c:	4622      	mov	r2, r4
 800c48e:	462b      	mov	r3, r5
 800c490:	4682      	mov	sl, r0
 800c492:	468b      	mov	fp, r1
 800c494:	f7f3 fe68 	bl	8000168 <__aeabi_dsub>
 800c498:	4632      	mov	r2, r6
 800c49a:	463b      	mov	r3, r7
 800c49c:	f7f3 fe64 	bl	8000168 <__aeabi_dsub>
 800c4a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c4a4:	f7f3 fe60 	bl	8000168 <__aeabi_dsub>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	4640      	mov	r0, r8
 800c4ae:	4649      	mov	r1, r9
 800c4b0:	e60b      	b.n	800c0ca <__ieee754_pow+0x302>
 800c4b2:	2601      	movs	r6, #1
 800c4b4:	e69f      	b.n	800c1f6 <__ieee754_pow+0x42e>
 800c4b6:	bf00      	nop
 800c4b8:	4a454eef 	.word	0x4a454eef
 800c4bc:	3fca7e28 	.word	0x3fca7e28
 800c4c0:	93c9db65 	.word	0x93c9db65
 800c4c4:	3fcd864a 	.word	0x3fcd864a
 800c4c8:	a91d4101 	.word	0xa91d4101
 800c4cc:	3fd17460 	.word	0x3fd17460
 800c4d0:	518f264d 	.word	0x518f264d
 800c4d4:	3fd55555 	.word	0x3fd55555
 800c4d8:	db6fabff 	.word	0xdb6fabff
 800c4dc:	3fdb6db6 	.word	0x3fdb6db6
 800c4e0:	33333303 	.word	0x33333303
 800c4e4:	3fe33333 	.word	0x3fe33333
 800c4e8:	e0000000 	.word	0xe0000000
 800c4ec:	3feec709 	.word	0x3feec709
 800c4f0:	dc3a03fd 	.word	0xdc3a03fd
 800c4f4:	3feec709 	.word	0x3feec709
 800c4f8:	145b01f5 	.word	0x145b01f5
 800c4fc:	be3e2fe0 	.word	0xbe3e2fe0
 800c500:	7ff00000 	.word	0x7ff00000
 800c504:	43400000 	.word	0x43400000
 800c508:	0003988e 	.word	0x0003988e
 800c50c:	000bb679 	.word	0x000bb679
 800c510:	0800d748 	.word	0x0800d748
 800c514:	3ff00000 	.word	0x3ff00000
 800c518:	40080000 	.word	0x40080000
 800c51c:	0800d768 	.word	0x0800d768
 800c520:	0800d758 	.word	0x0800d758
 800c524:	a39c      	add	r3, pc, #624	; (adr r3, 800c798 <__ieee754_pow+0x9d0>)
 800c526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52a:	4640      	mov	r0, r8
 800c52c:	4649      	mov	r1, r9
 800c52e:	f7f3 fe1d 	bl	800016c <__adddf3>
 800c532:	4622      	mov	r2, r4
 800c534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c538:	462b      	mov	r3, r5
 800c53a:	4650      	mov	r0, sl
 800c53c:	4639      	mov	r1, r7
 800c53e:	f7f3 fe13 	bl	8000168 <__aeabi_dsub>
 800c542:	4602      	mov	r2, r0
 800c544:	460b      	mov	r3, r1
 800c546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c54a:	f7f4 fa55 	bl	80009f8 <__aeabi_dcmpgt>
 800c54e:	2800      	cmp	r0, #0
 800c550:	f47f ae06 	bne.w	800c160 <__ieee754_pow+0x398>
 800c554:	4aa2      	ldr	r2, [pc, #648]	; (800c7e0 <__ieee754_pow+0xa18>)
 800c556:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c55a:	4293      	cmp	r3, r2
 800c55c:	f340 8100 	ble.w	800c760 <__ieee754_pow+0x998>
 800c560:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c564:	151b      	asrs	r3, r3, #20
 800c566:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c56a:	fa4a fa03 	asr.w	sl, sl, r3
 800c56e:	44b2      	add	sl, r6
 800c570:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c574:	489b      	ldr	r0, [pc, #620]	; (800c7e4 <__ieee754_pow+0xa1c>)
 800c576:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c57a:	4108      	asrs	r0, r1
 800c57c:	ea00 030a 	and.w	r3, r0, sl
 800c580:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c584:	f1c1 0114 	rsb	r1, r1, #20
 800c588:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c58c:	fa4a fa01 	asr.w	sl, sl, r1
 800c590:	2e00      	cmp	r6, #0
 800c592:	f04f 0200 	mov.w	r2, #0
 800c596:	4620      	mov	r0, r4
 800c598:	4629      	mov	r1, r5
 800c59a:	bfb8      	it	lt
 800c59c:	f1ca 0a00 	rsblt	sl, sl, #0
 800c5a0:	f7f3 fde2 	bl	8000168 <__aeabi_dsub>
 800c5a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ac:	2400      	movs	r4, #0
 800c5ae:	4642      	mov	r2, r8
 800c5b0:	464b      	mov	r3, r9
 800c5b2:	f7f3 fddb 	bl	800016c <__adddf3>
 800c5b6:	a37a      	add	r3, pc, #488	; (adr r3, 800c7a0 <__ieee754_pow+0x9d8>)
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	4620      	mov	r0, r4
 800c5be:	460d      	mov	r5, r1
 800c5c0:	f7f3 ff8a 	bl	80004d8 <__aeabi_dmul>
 800c5c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	460f      	mov	r7, r1
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	4629      	mov	r1, r5
 800c5d0:	f7f3 fdca 	bl	8000168 <__aeabi_dsub>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	4640      	mov	r0, r8
 800c5da:	4649      	mov	r1, r9
 800c5dc:	f7f3 fdc4 	bl	8000168 <__aeabi_dsub>
 800c5e0:	a371      	add	r3, pc, #452	; (adr r3, 800c7a8 <__ieee754_pow+0x9e0>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	f7f3 ff77 	bl	80004d8 <__aeabi_dmul>
 800c5ea:	a371      	add	r3, pc, #452	; (adr r3, 800c7b0 <__ieee754_pow+0x9e8>)
 800c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f0:	4680      	mov	r8, r0
 800c5f2:	4689      	mov	r9, r1
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	f7f3 ff6e 	bl	80004d8 <__aeabi_dmul>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	4640      	mov	r0, r8
 800c602:	4649      	mov	r1, r9
 800c604:	f7f3 fdb2 	bl	800016c <__adddf3>
 800c608:	4604      	mov	r4, r0
 800c60a:	460d      	mov	r5, r1
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	4630      	mov	r0, r6
 800c612:	4639      	mov	r1, r7
 800c614:	f7f3 fdaa 	bl	800016c <__adddf3>
 800c618:	4632      	mov	r2, r6
 800c61a:	463b      	mov	r3, r7
 800c61c:	4680      	mov	r8, r0
 800c61e:	4689      	mov	r9, r1
 800c620:	f7f3 fda2 	bl	8000168 <__aeabi_dsub>
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	4620      	mov	r0, r4
 800c62a:	4629      	mov	r1, r5
 800c62c:	f7f3 fd9c 	bl	8000168 <__aeabi_dsub>
 800c630:	4642      	mov	r2, r8
 800c632:	4606      	mov	r6, r0
 800c634:	460f      	mov	r7, r1
 800c636:	464b      	mov	r3, r9
 800c638:	4640      	mov	r0, r8
 800c63a:	4649      	mov	r1, r9
 800c63c:	f7f3 ff4c 	bl	80004d8 <__aeabi_dmul>
 800c640:	a35d      	add	r3, pc, #372	; (adr r3, 800c7b8 <__ieee754_pow+0x9f0>)
 800c642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c646:	4604      	mov	r4, r0
 800c648:	460d      	mov	r5, r1
 800c64a:	f7f3 ff45 	bl	80004d8 <__aeabi_dmul>
 800c64e:	a35c      	add	r3, pc, #368	; (adr r3, 800c7c0 <__ieee754_pow+0x9f8>)
 800c650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c654:	f7f3 fd88 	bl	8000168 <__aeabi_dsub>
 800c658:	4622      	mov	r2, r4
 800c65a:	462b      	mov	r3, r5
 800c65c:	f7f3 ff3c 	bl	80004d8 <__aeabi_dmul>
 800c660:	a359      	add	r3, pc, #356	; (adr r3, 800c7c8 <__ieee754_pow+0xa00>)
 800c662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c666:	f7f3 fd81 	bl	800016c <__adddf3>
 800c66a:	4622      	mov	r2, r4
 800c66c:	462b      	mov	r3, r5
 800c66e:	f7f3 ff33 	bl	80004d8 <__aeabi_dmul>
 800c672:	a357      	add	r3, pc, #348	; (adr r3, 800c7d0 <__ieee754_pow+0xa08>)
 800c674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c678:	f7f3 fd76 	bl	8000168 <__aeabi_dsub>
 800c67c:	4622      	mov	r2, r4
 800c67e:	462b      	mov	r3, r5
 800c680:	f7f3 ff2a 	bl	80004d8 <__aeabi_dmul>
 800c684:	a354      	add	r3, pc, #336	; (adr r3, 800c7d8 <__ieee754_pow+0xa10>)
 800c686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68a:	f7f3 fd6f 	bl	800016c <__adddf3>
 800c68e:	4622      	mov	r2, r4
 800c690:	462b      	mov	r3, r5
 800c692:	f7f3 ff21 	bl	80004d8 <__aeabi_dmul>
 800c696:	4602      	mov	r2, r0
 800c698:	460b      	mov	r3, r1
 800c69a:	4640      	mov	r0, r8
 800c69c:	4649      	mov	r1, r9
 800c69e:	f7f3 fd63 	bl	8000168 <__aeabi_dsub>
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	460d      	mov	r5, r1
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4640      	mov	r0, r8
 800c6ac:	4649      	mov	r1, r9
 800c6ae:	f7f3 ff13 	bl	80004d8 <__aeabi_dmul>
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6bc:	4620      	mov	r0, r4
 800c6be:	4629      	mov	r1, r5
 800c6c0:	f7f3 fd52 	bl	8000168 <__aeabi_dsub>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6cc:	f7f4 f82e 	bl	800072c <__aeabi_ddiv>
 800c6d0:	4632      	mov	r2, r6
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	463b      	mov	r3, r7
 800c6d8:	4640      	mov	r0, r8
 800c6da:	4649      	mov	r1, r9
 800c6dc:	f7f3 fefc 	bl	80004d8 <__aeabi_dmul>
 800c6e0:	4632      	mov	r2, r6
 800c6e2:	463b      	mov	r3, r7
 800c6e4:	f7f3 fd42 	bl	800016c <__adddf3>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	4629      	mov	r1, r5
 800c6f0:	f7f3 fd3a 	bl	8000168 <__aeabi_dsub>
 800c6f4:	4642      	mov	r2, r8
 800c6f6:	464b      	mov	r3, r9
 800c6f8:	f7f3 fd36 	bl	8000168 <__aeabi_dsub>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	460b      	mov	r3, r1
 800c700:	2000      	movs	r0, #0
 800c702:	4939      	ldr	r1, [pc, #228]	; (800c7e8 <__ieee754_pow+0xa20>)
 800c704:	f7f3 fd30 	bl	8000168 <__aeabi_dsub>
 800c708:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c70c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c710:	da29      	bge.n	800c766 <__ieee754_pow+0x99e>
 800c712:	4652      	mov	r2, sl
 800c714:	f000 f874 	bl	800c800 <scalbn>
 800c718:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c71c:	f7ff bbfd 	b.w	800bf1a <__ieee754_pow+0x152>
 800c720:	4b32      	ldr	r3, [pc, #200]	; (800c7ec <__ieee754_pow+0xa24>)
 800c722:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c726:	429f      	cmp	r7, r3
 800c728:	f77f af14 	ble.w	800c554 <__ieee754_pow+0x78c>
 800c72c:	4b30      	ldr	r3, [pc, #192]	; (800c7f0 <__ieee754_pow+0xa28>)
 800c72e:	440b      	add	r3, r1
 800c730:	4303      	orrs	r3, r0
 800c732:	d009      	beq.n	800c748 <__ieee754_pow+0x980>
 800c734:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c738:	2200      	movs	r2, #0
 800c73a:	2300      	movs	r3, #0
 800c73c:	f7f4 f93e 	bl	80009bc <__aeabi_dcmplt>
 800c740:	3800      	subs	r0, #0
 800c742:	bf18      	it	ne
 800c744:	2001      	movne	r0, #1
 800c746:	e452      	b.n	800bfee <__ieee754_pow+0x226>
 800c748:	4622      	mov	r2, r4
 800c74a:	462b      	mov	r3, r5
 800c74c:	f7f3 fd0c 	bl	8000168 <__aeabi_dsub>
 800c750:	4642      	mov	r2, r8
 800c752:	464b      	mov	r3, r9
 800c754:	f7f4 f946 	bl	80009e4 <__aeabi_dcmpge>
 800c758:	2800      	cmp	r0, #0
 800c75a:	f43f aefb 	beq.w	800c554 <__ieee754_pow+0x78c>
 800c75e:	e7e9      	b.n	800c734 <__ieee754_pow+0x96c>
 800c760:	f04f 0a00 	mov.w	sl, #0
 800c764:	e720      	b.n	800c5a8 <__ieee754_pow+0x7e0>
 800c766:	4621      	mov	r1, r4
 800c768:	e7d6      	b.n	800c718 <__ieee754_pow+0x950>
 800c76a:	f04f 0b00 	mov.w	fp, #0
 800c76e:	f8df c078 	ldr.w	ip, [pc, #120]	; 800c7e8 <__ieee754_pow+0xa20>
 800c772:	f7ff bbb9 	b.w	800bee8 <__ieee754_pow+0x120>
 800c776:	f04f 0b00 	mov.w	fp, #0
 800c77a:	f04f 0c00 	mov.w	ip, #0
 800c77e:	f7ff bbb3 	b.w	800bee8 <__ieee754_pow+0x120>
 800c782:	4640      	mov	r0, r8
 800c784:	4649      	mov	r1, r9
 800c786:	f7ff bb3c 	b.w	800be02 <__ieee754_pow+0x3a>
 800c78a:	9200      	str	r2, [sp, #0]
 800c78c:	f7ff bb88 	b.w	800bea0 <__ieee754_pow+0xd8>
 800c790:	2300      	movs	r3, #0
 800c792:	f7ff bb72 	b.w	800be7a <__ieee754_pow+0xb2>
 800c796:	bf00      	nop
 800c798:	652b82fe 	.word	0x652b82fe
 800c79c:	3c971547 	.word	0x3c971547
 800c7a0:	00000000 	.word	0x00000000
 800c7a4:	3fe62e43 	.word	0x3fe62e43
 800c7a8:	fefa39ef 	.word	0xfefa39ef
 800c7ac:	3fe62e42 	.word	0x3fe62e42
 800c7b0:	0ca86c39 	.word	0x0ca86c39
 800c7b4:	be205c61 	.word	0xbe205c61
 800c7b8:	72bea4d0 	.word	0x72bea4d0
 800c7bc:	3e663769 	.word	0x3e663769
 800c7c0:	c5d26bf1 	.word	0xc5d26bf1
 800c7c4:	3ebbbd41 	.word	0x3ebbbd41
 800c7c8:	af25de2c 	.word	0xaf25de2c
 800c7cc:	3f11566a 	.word	0x3f11566a
 800c7d0:	16bebd93 	.word	0x16bebd93
 800c7d4:	3f66c16c 	.word	0x3f66c16c
 800c7d8:	5555553e 	.word	0x5555553e
 800c7dc:	3fc55555 	.word	0x3fc55555
 800c7e0:	3fe00000 	.word	0x3fe00000
 800c7e4:	fff00000 	.word	0xfff00000
 800c7e8:	3ff00000 	.word	0x3ff00000
 800c7ec:	4090cbff 	.word	0x4090cbff
 800c7f0:	3f6f3400 	.word	0x3f6f3400

0800c7f4 <fabs>:
 800c7f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	4770      	bx	lr
 800c7fc:	0000      	movs	r0, r0
	...

0800c800 <scalbn>:
 800c800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c802:	4616      	mov	r6, r2
 800c804:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c808:	4604      	mov	r4, r0
 800c80a:	460d      	mov	r5, r1
 800c80c:	460b      	mov	r3, r1
 800c80e:	b992      	cbnz	r2, 800c836 <scalbn+0x36>
 800c810:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c814:	4303      	orrs	r3, r0
 800c816:	d03c      	beq.n	800c892 <scalbn+0x92>
 800c818:	4b31      	ldr	r3, [pc, #196]	; (800c8e0 <scalbn+0xe0>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	f7f3 fe5c 	bl	80004d8 <__aeabi_dmul>
 800c820:	4b30      	ldr	r3, [pc, #192]	; (800c8e4 <scalbn+0xe4>)
 800c822:	4604      	mov	r4, r0
 800c824:	429e      	cmp	r6, r3
 800c826:	460d      	mov	r5, r1
 800c828:	da0f      	bge.n	800c84a <scalbn+0x4a>
 800c82a:	a329      	add	r3, pc, #164	; (adr r3, 800c8d0 <scalbn+0xd0>)
 800c82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c830:	f7f3 fe52 	bl	80004d8 <__aeabi_dmul>
 800c834:	e006      	b.n	800c844 <scalbn+0x44>
 800c836:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c83a:	42ba      	cmp	r2, r7
 800c83c:	d109      	bne.n	800c852 <scalbn+0x52>
 800c83e:	4602      	mov	r2, r0
 800c840:	f7f3 fc94 	bl	800016c <__adddf3>
 800c844:	4604      	mov	r4, r0
 800c846:	460d      	mov	r5, r1
 800c848:	e023      	b.n	800c892 <scalbn+0x92>
 800c84a:	460b      	mov	r3, r1
 800c84c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c850:	3a36      	subs	r2, #54	; 0x36
 800c852:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c856:	428e      	cmp	r6, r1
 800c858:	dd0e      	ble.n	800c878 <scalbn+0x78>
 800c85a:	a31f      	add	r3, pc, #124	; (adr r3, 800c8d8 <scalbn+0xd8>)
 800c85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c860:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c864:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c868:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c86c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c870:	481d      	ldr	r0, [pc, #116]	; (800c8e8 <scalbn+0xe8>)
 800c872:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c876:	e7db      	b.n	800c830 <scalbn+0x30>
 800c878:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c87c:	4432      	add	r2, r6
 800c87e:	428a      	cmp	r2, r1
 800c880:	dceb      	bgt.n	800c85a <scalbn+0x5a>
 800c882:	2a00      	cmp	r2, #0
 800c884:	dd08      	ble.n	800c898 <scalbn+0x98>
 800c886:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c88a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c88e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c892:	4620      	mov	r0, r4
 800c894:	4629      	mov	r1, r5
 800c896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c898:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c89c:	da0c      	bge.n	800c8b8 <scalbn+0xb8>
 800c89e:	a30c      	add	r3, pc, #48	; (adr r3, 800c8d0 <scalbn+0xd0>)
 800c8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c8a8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c8ac:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c8b0:	480e      	ldr	r0, [pc, #56]	; (800c8ec <scalbn+0xec>)
 800c8b2:	f041 011f 	orr.w	r1, r1, #31
 800c8b6:	e7bb      	b.n	800c830 <scalbn+0x30>
 800c8b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c8bc:	3236      	adds	r2, #54	; 0x36
 800c8be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c8c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	4b08      	ldr	r3, [pc, #32]	; (800c8f0 <scalbn+0xf0>)
 800c8ce:	e7af      	b.n	800c830 <scalbn+0x30>
 800c8d0:	c2f8f359 	.word	0xc2f8f359
 800c8d4:	01a56e1f 	.word	0x01a56e1f
 800c8d8:	8800759c 	.word	0x8800759c
 800c8dc:	7e37e43c 	.word	0x7e37e43c
 800c8e0:	43500000 	.word	0x43500000
 800c8e4:	ffff3cb0 	.word	0xffff3cb0
 800c8e8:	8800759c 	.word	0x8800759c
 800c8ec:	c2f8f359 	.word	0xc2f8f359
 800c8f0:	3c900000 	.word	0x3c900000

0800c8f4 <with_errno>:
 800c8f4:	b570      	push	{r4, r5, r6, lr}
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	460d      	mov	r5, r1
 800c8fa:	4616      	mov	r6, r2
 800c8fc:	f7fb fca6 	bl	800824c <__errno>
 800c900:	4629      	mov	r1, r5
 800c902:	6006      	str	r6, [r0, #0]
 800c904:	4620      	mov	r0, r4
 800c906:	bd70      	pop	{r4, r5, r6, pc}

0800c908 <xflow>:
 800c908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c90a:	4615      	mov	r5, r2
 800c90c:	461c      	mov	r4, r3
 800c90e:	b180      	cbz	r0, 800c932 <xflow+0x2a>
 800c910:	4610      	mov	r0, r2
 800c912:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c916:	e9cd 0100 	strd	r0, r1, [sp]
 800c91a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c91e:	4628      	mov	r0, r5
 800c920:	4621      	mov	r1, r4
 800c922:	f7f3 fdd9 	bl	80004d8 <__aeabi_dmul>
 800c926:	2222      	movs	r2, #34	; 0x22
 800c928:	b003      	add	sp, #12
 800c92a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c92e:	f7ff bfe1 	b.w	800c8f4 <with_errno>
 800c932:	4610      	mov	r0, r2
 800c934:	4619      	mov	r1, r3
 800c936:	e7ee      	b.n	800c916 <xflow+0xe>

0800c938 <__math_uflow>:
 800c938:	2200      	movs	r2, #0
 800c93a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c93e:	f7ff bfe3 	b.w	800c908 <xflow>

0800c942 <__math_oflow>:
 800c942:	2200      	movs	r2, #0
 800c944:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c948:	f7ff bfde 	b.w	800c908 <xflow>

0800c94c <_init>:
 800c94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94e:	bf00      	nop
 800c950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c952:	bc08      	pop	{r3}
 800c954:	469e      	mov	lr, r3
 800c956:	4770      	bx	lr

0800c958 <_fini>:
 800c958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95a:	bf00      	nop
 800c95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c95e:	bc08      	pop	{r3}
 800c960:	469e      	mov	lr, r3
 800c962:	4770      	bx	lr
