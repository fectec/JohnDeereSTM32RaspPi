
EngineAutomaticTransmissionController_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  080084b8  080084b8  000184b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a28  08008a28  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008a28  08008a28  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a28  08008a28  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a28  08008a28  00018a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a2c  08008a2c  00018a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f0  200001d8  08008c08  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013c8  08008c08  000213c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001321e  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a7  00000000  00000000  00033462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00036510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da3  00000000  00000000  000376b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004a2b  00000000  00000000  0003845b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ad4  00000000  00000000  0003ce86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009616a  00000000  00000000  0005195a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cd4  00000000  00000000  000e7ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  000ed798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800849c 	.word	0x0800849c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800849c 	.word	0x0800849c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <USER_GPIO_Read>:
}

// Read a pin

uint8_t USER_GPIO_Read( uint8_t port, uint8_t pin )
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	460a      	mov	r2, r1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	4613      	mov	r3, r2
 8000be6:	71bb      	strb	r3, [r7, #6]
  volatile uint32_t * IDR;
  int state;

  if( port == 0 )
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d102      	bne.n	8000bf4 <USER_GPIO_Read+0x1c>
  {
      IDR = (volatile uint32_t *) (&GPIOA->IDR);
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <USER_GPIO_Read+0x70>)
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	e016      	b.n	8000c22 <USER_GPIO_Read+0x4a>
  }
  else if( port == 1 )
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d102      	bne.n	8000c00 <USER_GPIO_Read+0x28>
  {
      IDR = (volatile uint32_t *) (&GPIOB->IDR);
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <USER_GPIO_Read+0x74>)
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	e010      	b.n	8000c22 <USER_GPIO_Read+0x4a>
  }
  else if( port == 2 )
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d102      	bne.n	8000c0c <USER_GPIO_Read+0x34>
  {
      IDR = (volatile uint32_t *) (&GPIOC->IDR);
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <USER_GPIO_Read+0x78>)
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	e00a      	b.n	8000c22 <USER_GPIO_Read+0x4a>
  }
  else if( port == 3 )
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d102      	bne.n	8000c18 <USER_GPIO_Read+0x40>
  {
      IDR = (volatile uint32_t *) (&GPIOD->IDR);
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <USER_GPIO_Read+0x7c>)
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	e004      	b.n	8000c22 <USER_GPIO_Read+0x4a>
  }
  else if( port == 4 )
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d101      	bne.n	8000c22 <USER_GPIO_Read+0x4a>
  {
      IDR = (volatile uint32_t *) (&GPIOE->IDR);
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <USER_GPIO_Read+0x80>)
 8000c20:	60fb      	str	r3, [r7, #12]
  }

  state = ( ( *IDR & ( 1 << pin ) ) >> pin );
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	79ba      	ldrb	r2, [r7, #6]
 8000c28:	2101      	movs	r1, #1
 8000c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2e:	401a      	ands	r2, r3
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	fa22 f303 	lsr.w	r3, r2, r3
 8000c36:	60bb      	str	r3, [r7, #8]
  return state;
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	b2db      	uxtb	r3, r3
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40010808 	.word	0x40010808
 8000c4c:	40010c08 	.word	0x40010c08
 8000c50:	40011008 	.word	0x40011008
 8000c54:	40011408 	.word	0x40011408
 8000c58:	40011808 	.word	0x40011808

08000c5c <USER_GPIO_Write>:

// Write a pin

void USER_GPIO_Write(uint8_t port, uint8_t pin, uint8_t state)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	460b      	mov	r3, r1
 8000c68:	71bb      	strb	r3, [r7, #6]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	717b      	strb	r3, [r7, #5]
  volatile uint32_t * ODR;

  if( port == 0 ) {
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <USER_GPIO_Write+0x1e>
      ODR = (volatile uint32_t *) (&GPIOA->ODR);
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <USER_GPIO_Write+0x84>)
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	e016      	b.n	8000ca8 <USER_GPIO_Write+0x4c>
  }
  else if( port == 1 )
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d102      	bne.n	8000c86 <USER_GPIO_Write+0x2a>
  {
      ODR = (volatile uint32_t *) (&GPIOB->ODR);
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <USER_GPIO_Write+0x88>)
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	e010      	b.n	8000ca8 <USER_GPIO_Write+0x4c>
  }
  else if( port == 2 )
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d102      	bne.n	8000c92 <USER_GPIO_Write+0x36>
  {
      ODR = (volatile uint32_t *) (&GPIOC->ODR);
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <USER_GPIO_Write+0x8c>)
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	e00a      	b.n	8000ca8 <USER_GPIO_Write+0x4c>
  }
  else if( port == 3 )
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d102      	bne.n	8000c9e <USER_GPIO_Write+0x42>
  {
      ODR = (volatile uint32_t *) (&GPIOD->ODR);
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <USER_GPIO_Write+0x90>)
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	e004      	b.n	8000ca8 <USER_GPIO_Write+0x4c>
  }
  else if( port == 4 )
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d101      	bne.n	8000ca8 <USER_GPIO_Write+0x4c>
  {
      ODR = (volatile uint32_t *) (&GPIOE->ODR);
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <USER_GPIO_Write+0x94>)
 8000ca6:	60fb      	str	r3, [r7, #12]
  }

  state ? ( *ODR |= ( state << pin ) ) : ( *ODR &= ~( 1 << pin ) );
 8000ca8:	797b      	ldrb	r3, [r7, #5]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d009      	beq.n	8000cc2 <USER_GPIO_Write+0x66>
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	7979      	ldrb	r1, [r7, #5]
 8000cb4:	79ba      	ldrb	r2, [r7, #6]
 8000cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	e009      	b.n	8000cd6 <USER_GPIO_Write+0x7a>
  state ? ( *ODR |= ( state << pin ) ) : ( *ODR &= ~( 1 << pin ) );
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	79ba      	ldrb	r2, [r7, #6]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fa01 f202 	lsl.w	r2, r1, r2
 8000cce:	43d2      	mvns	r2, r2
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	601a      	str	r2, [r3, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	4001080c 	.word	0x4001080c
 8000ce4:	40010c0c 	.word	0x40010c0c
 8000ce8:	4001100c 	.word	0x4001100c
 8000cec:	4001140c 	.word	0x4001140c
 8000cf0:	4001180c 	.word	0x4001180c

08000cf4 <USER_GPIO_Toggle>:

// Toggle a pin

void USER_GPIO_Toggle(uint8_t port, uint8_t pin)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	4613      	mov	r3, r2
 8000d02:	71bb      	strb	r3, [r7, #6]
  if( USER_GPIO_Read(port, pin) ) {
 8000d04:	79ba      	ldrb	r2, [r7, #6]
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff64 	bl	8000bd8 <USER_GPIO_Read>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <USER_GPIO_Toggle+0x30>
      USER_GPIO_Write(port, pin, 0);
 8000d16:	79b9      	ldrb	r1, [r7, #6]
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff9d 	bl	8000c5c <USER_GPIO_Write>
  }
  else {
      USER_GPIO_Write(port, pin, 1);
  }
}
 8000d22:	e005      	b.n	8000d30 <USER_GPIO_Toggle+0x3c>
      USER_GPIO_Write(port, pin, 1);
 8000d24:	79b9      	ldrb	r1, [r7, #6]
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff96 	bl	8000c5c <USER_GPIO_Write>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <TIM3_IRQHandler>:
    }
  }
}

void TIM3_IRQHandler( void )
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  if( TIM3->SR & TIM_SR_UIF )      			// Wait for UIF
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <TIM3_IRQHandler+0x3c>)
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d013      	beq.n	8000d70 <TIM3_IRQHandler+0x38>
  {
    TIM3->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM3 timer
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <TIM3_IRQHandler+0x3c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <TIM3_IRQHandler+0x3c>)
 8000d4e:	f023 0301 	bic.w	r3, r3, #1
 8000d52:	6013      	str	r3, [r2, #0]
    TIM3->SR	&=	~(TIM_SR_UIF);			// Clear UIF
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <TIM3_IRQHandler+0x3c>)
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <TIM3_IRQHandler+0x3c>)
 8000d5a:	f023 0301 	bic.w	r3, r3, #1
 8000d5e:	6113      	str	r3, [r2, #16]

    USER_GPIO_Toggle( PORTC, 2 );
 8000d60:	2102      	movs	r1, #2
 8000d62:	2002      	movs	r0, #2
 8000d64:	f7ff ffc6 	bl	8000cf4 <USER_GPIO_Toggle>
    USER_GPIO_Toggle( PORTC, 3 );
 8000d68:	2103      	movs	r1, #3
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f7ff ffc2 	bl	8000cf4 <USER_GPIO_Toggle>
  }
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40000400 	.word	0x40000400

08000d78 <_write>:
 *
 * It redirects standard output stream in C to USART peripheral
 * device */

int _write( int file, char *ptr, int len )
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for( DataIdx = 0 ; DataIdx < len; DataIdx++ )
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e00f      	b.n	8000daa <_write+0x32>
  {
    while(!( USART1->SR & USART_SR_TXE ));		// Wait until USART_DR is empty
 8000d8a:	bf00      	nop
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <_write+0x48>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f9      	beq.n	8000d8c <_write+0x14>
    USART1->DR = *ptr++;				// Transmit data
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	60ba      	str	r2, [r7, #8]
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <_write+0x48>)
 8000da2:	605a      	str	r2, [r3, #4]
  for( DataIdx = 0 ; DataIdx < len; DataIdx++ )
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	3301      	adds	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	dbeb      	blt.n	8000d8a <_write+0x12>
  }

  return len;
 8000db2:	687b      	ldr	r3, [r7, #4]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	371c      	adds	r7, #28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40013800 	.word	0x40013800

08000dc4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4a06      	ldr	r2, [pc, #24]	; (8000dec <vApplicationGetIdleTaskMemory+0x28>)
 8000dd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000dda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2280      	movs	r2, #128	; 0x80
 8000de0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	200001f4 	.word	0x200001f4
 8000df0:	20000294 	.word	0x20000294

08000df4 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000df4:	b5b0      	push	{r4, r5, r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8000dfa:	f000 fb05 	bl	8001408 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */

  SystemClock_Config();
 8000dfe:	f000 f81d 	bl	8000e3c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8000e02:	f000 f887 	bl	8000f14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e06:	f000 f85b 	bl	8000ec0 <MX_USART2_UART_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <main+0x40>)
 8000e0c:	1d3c      	adds	r4, r7, #4
 8000e0e:	461d      	mov	r5, r3
 8000e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 fd47 	bl	80028b4 <osThreadCreate>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <main+0x44>)
 8000e2a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */

  osKernelStart();
 8000e2c:	f001 fd3b 	bl	80028a6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000e30:	e7fe      	b.n	8000e30 <main+0x3c>
 8000e32:	bf00      	nop
 8000e34:	080084c4 	.word	0x080084c4
 8000e38:	200004dc 	.word	0x200004dc

08000e3c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b090      	sub	sp, #64	; 0x40
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	2228      	movs	r2, #40	; 0x28
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 fea9 	bl	8004ba2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e62:	2301      	movs	r3, #1
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e66:	2310      	movs	r3, #16
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e72:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fd93 	bl	80019a8 <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e88:	f000 f8cc 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e90:	2302      	movs	r3, #2
 8000e92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 f800 	bl	8001eac <HAL_RCC_ClockConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000eb2:	f000 f8b7 	bl	8001024 <Error_Handler>
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	3740      	adds	r7, #64	; 0x40
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <MX_USART2_UART_Init>:
  * @param None
  * @retval None
  */

static void MX_USART2_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */

  huart2.Instance = USART2;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <MX_USART2_UART_Init+0x50>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000ef8:	f001 fbe0 	bl	80026bc <HAL_UART_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f02:	f000 f88f 	bl	8001024 <Error_Handler>
  }

  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000494 	.word	0x20000494
 8000f10:	40004400 	.word	0x40004400

08000f14 <MX_GPIO_Init>:
  * @param None
  * @retval None
  */

static void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f28:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <MX_GPIO_Init+0xcc>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a2c      	ldr	r2, [pc, #176]	; (8000fe0 <MX_GPIO_Init+0xcc>)
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <MX_GPIO_Init+0xcc>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0310 	and.w	r3, r3, #16
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f40:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <MX_GPIO_Init+0xcc>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a26      	ldr	r2, [pc, #152]	; (8000fe0 <MX_GPIO_Init+0xcc>)
 8000f46:	f043 0320 	orr.w	r3, r3, #32
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <MX_GPIO_Init+0xcc>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0320 	and.w	r3, r3, #32
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <MX_GPIO_Init+0xcc>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a20      	ldr	r2, [pc, #128]	; (8000fe0 <MX_GPIO_Init+0xcc>)
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <MX_GPIO_Init+0xcc>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_GPIO_Init+0xcc>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a1a      	ldr	r2, [pc, #104]	; (8000fe0 <MX_GPIO_Init+0xcc>)
 8000f76:	f043 0308 	orr.w	r3, r3, #8
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_GPIO_Init+0xcc>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0308 	and.w	r3, r3, #8
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	4815      	ldr	r0, [pc, #84]	; (8000fe4 <MX_GPIO_Init+0xd0>)
 8000f8e:	f000 fcd1 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_GPIO_Init+0xd4>)
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4811      	ldr	r0, [pc, #68]	; (8000fec <MX_GPIO_Init+0xd8>)
 8000fa8:	f000 fb40 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fac:	2320      	movs	r3, #32
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <MX_GPIO_Init+0xd0>)
 8000fc4:	f000 fb32 	bl	800162c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2105      	movs	r1, #5
 8000fcc:	2028      	movs	r0, #40	; 0x28
 8000fce:	f000 fb02 	bl	80015d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fd2:	2028      	movs	r0, #40	; 0x28
 8000fd4:	f000 fb1b 	bl	800160e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fd8:	bf00      	nop
 8000fda:	3720      	adds	r7, #32
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	10110000 	.word	0x10110000
 8000fec:	40011000 	.word	0x40011000

08000ff0 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void StartDefaultTask(void const * argument)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f001 fca7 	bl	800294c <osDelay>
 8000ffe:	e7fb      	b.n	8000ff8 <StartDefaultTask+0x8>

08001000 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */

  if (htim->Instance == TIM4) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001012:	f000 fa0f 	bl	8001434 <HAL_IncTick>
  }

  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40000800 	.word	0x40000800

08001024 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	e7fe      	b.n	800102c <Error_Handler+0x8>
	...

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_MspInit+0x68>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <HAL_MspInit+0x68>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6193      	str	r3, [r2, #24]
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_MspInit+0x68>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_MspInit+0x68>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4a11      	ldr	r2, [pc, #68]	; (8001098 <HAL_MspInit+0x68>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	61d3      	str	r3, [r2, #28]
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_MspInit+0x68>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	210f      	movs	r1, #15
 800106a:	f06f 0001 	mvn.w	r0, #1
 800106e:	f000 fab2 	bl	80015d6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_MspInit+0x6c>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_MspInit+0x6c>)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	40010000 	.word	0x40010000

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <HAL_UART_MspInit+0x70>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d123      	bne.n	8001108 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_UART_MspInit+0x74>)
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	4a13      	ldr	r2, [pc, #76]	; (8001114 <HAL_UART_MspInit+0x74>)
 80010c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ca:	61d3      	str	r3, [r2, #28]
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_UART_MspInit+0x74>)
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_UART_MspInit+0x74>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_UART_MspInit+0x74>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_UART_MspInit+0x74>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010f0:	230c      	movs	r3, #12
 80010f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4619      	mov	r1, r3
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <HAL_UART_MspInit+0x78>)
 8001104:	f000 fa92 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40004400 	.word	0x40004400
 8001114:	40021000 	.word	0x40021000
 8001118:	40010800 	.word	0x40010800

0800111c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08e      	sub	sp, #56	; 0x38
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001132:	4b34      	ldr	r3, [pc, #208]	; (8001204 <HAL_InitTick+0xe8>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a33      	ldr	r2, [pc, #204]	; (8001204 <HAL_InitTick+0xe8>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <HAL_InitTick+0xe8>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800114a:	f107 0210 	add.w	r2, r7, #16
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f001 f819 	bl	800218c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001160:	2b00      	cmp	r3, #0
 8001162:	d103      	bne.n	800116c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001164:	f000 ffea 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8001168:	6378      	str	r0, [r7, #52]	; 0x34
 800116a:	e004      	b.n	8001176 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800116c:	f000 ffe6 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8001170:	4603      	mov	r3, r0
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001178:	4a23      	ldr	r2, [pc, #140]	; (8001208 <HAL_InitTick+0xec>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	0c9b      	lsrs	r3, r3, #18
 8001180:	3b01      	subs	r3, #1
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <HAL_InitTick+0xf0>)
 8001186:	4a22      	ldr	r2, [pc, #136]	; (8001210 <HAL_InitTick+0xf4>)
 8001188:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_InitTick+0xf0>)
 800118c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001190:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001192:	4a1e      	ldr	r2, [pc, #120]	; (800120c <HAL_InitTick+0xf0>)
 8001194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001196:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_InitTick+0xf0>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_InitTick+0xf0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_InitTick+0xf0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80011aa:	4818      	ldr	r0, [pc, #96]	; (800120c <HAL_InitTick+0xf0>)
 80011ac:	f001 f83c 	bl	8002228 <HAL_TIM_Base_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d11b      	bne.n	80011f6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80011be:	4813      	ldr	r0, [pc, #76]	; (800120c <HAL_InitTick+0xf0>)
 80011c0:	f001 f88a 	bl	80022d8 <HAL_TIM_Base_Start_IT>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d111      	bne.n	80011f6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011d2:	201e      	movs	r0, #30
 80011d4:	f000 fa1b 	bl	800160e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	d808      	bhi.n	80011f0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80011de:	2200      	movs	r2, #0
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	201e      	movs	r0, #30
 80011e4:	f000 f9f7 	bl	80015d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <HAL_InitTick+0xf8>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e002      	b.n	80011f6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3738      	adds	r7, #56	; 0x38
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	431bde83 	.word	0x431bde83
 800120c:	200004e0 	.word	0x200004e0
 8001210:	40000800 	.word	0x40000800
 8001214:	20000004 	.word	0x20000004

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <UsageFault_Handler+0x4>

08001236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
	...

08001244 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <TIM4_IRQHandler+0x10>)
 800124a:	f001 f897 	bl	800237c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200004e0 	.word	0x200004e0

08001258 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800125c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001260:	f000 fb80 	bl	8001964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <_kill>:

int _kill(int pid, int sig)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001280:	f003 fd38 	bl	8004cf4 <__errno>
 8001284:	4603      	mov	r3, r0
 8001286:	2216      	movs	r2, #22
 8001288:	601a      	str	r2, [r3, #0]
  return -1;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_exit>:

void _exit (int status)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800129e:	f04f 31ff 	mov.w	r1, #4294967295
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffe7 	bl	8001276 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012a8:	e7fe      	b.n	80012a8 <_exit+0x12>

080012aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e00a      	b.n	80012d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012bc:	f3af 8000 	nop.w
 80012c0:	4601      	mov	r1, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	60ba      	str	r2, [r7, #8]
 80012c8:	b2ca      	uxtb	r2, r1
 80012ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	dbf0      	blt.n	80012bc <_read+0x12>
  }

  return len;
 80012da:	687b      	ldr	r3, [r7, #4]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130a:	605a      	str	r2, [r3, #4]
  return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <_isatty>:

int _isatty(int file)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <_sbrk+0x5c>)
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <_sbrk+0x60>)
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <_sbrk+0x64>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <_sbrk+0x68>)
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	429a      	cmp	r2, r3
 8001372:	d207      	bcs.n	8001384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001374:	f003 fcbe 	bl	8004cf4 <__errno>
 8001378:	4603      	mov	r3, r0
 800137a:	220c      	movs	r2, #12
 800137c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e009      	b.n	8001398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <_sbrk+0x64>)
 8001394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20005000 	.word	0x20005000
 80013a4:	00000400 	.word	0x00000400
 80013a8:	20000528 	.word	0x20000528
 80013ac:	200013c8 	.word	0x200013c8

080013b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013bc:	f7ff fff8 	bl	80013b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013c2:	490c      	ldr	r1, [pc, #48]	; (80013f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013c4:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a09      	ldr	r2, [pc, #36]	; (80013fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013d8:	4c09      	ldr	r4, [pc, #36]	; (8001400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e6:	f003 fc8b 	bl	8004d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ea:	f7ff fd03 	bl	8000df4 <main>
  bx lr
 80013ee:	4770      	bx	lr
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80013f8:	08008a30 	.word	0x08008a30
  ldr r2, =_sbss
 80013fc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001400:	200013c8 	.word	0x200013c8

08001404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC1_2_IRQHandler>
	...

08001408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_Init+0x28>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_Init+0x28>)
 8001412:	f043 0310 	orr.w	r3, r3, #16
 8001416:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f8d1 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141e:	200f      	movs	r0, #15
 8001420:	f7ff fe7c 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f7ff fe04 	bl	8001030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40022000 	.word	0x40022000

08001434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_IncTick+0x1c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_IncTick+0x20>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a03      	ldr	r2, [pc, #12]	; (8001454 <HAL_IncTick+0x20>)
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	20000008 	.word	0x20000008
 8001454:	2000052c 	.word	0x2000052c

08001458 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b02      	ldr	r3, [pc, #8]	; (8001468 <HAL_GetTick+0x10>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	2000052c 	.word	0x2000052c

0800146c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001488:	4013      	ands	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__NVIC_GetPriorityGrouping+0x18>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 0307 	and.w	r3, r3, #7
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	db0b      	blt.n	80014fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	4906      	ldr	r1, [pc, #24]	; (8001504 <__NVIC_EnableIRQ+0x34>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2001      	movs	r0, #1
 80014f2:	fa00 f202 	lsl.w	r2, r0, r2
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff4f 	bl	800146c <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff64 	bl	80014b4 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ffb2 	bl	800155c <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff81 	bl	8001508 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff57 	bl	80014d0 <__NVIC_EnableIRQ>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b08b      	sub	sp, #44	; 0x2c
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	e169      	b.n	8001914 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001640:	2201      	movs	r2, #1
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8158 	bne.w	800190e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a9a      	ldr	r2, [pc, #616]	; (80018cc <HAL_GPIO_Init+0x2a0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d05e      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001668:	4a98      	ldr	r2, [pc, #608]	; (80018cc <HAL_GPIO_Init+0x2a0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d875      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800166e:	4a98      	ldr	r2, [pc, #608]	; (80018d0 <HAL_GPIO_Init+0x2a4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d058      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001674:	4a96      	ldr	r2, [pc, #600]	; (80018d0 <HAL_GPIO_Init+0x2a4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d86f      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800167a:	4a96      	ldr	r2, [pc, #600]	; (80018d4 <HAL_GPIO_Init+0x2a8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d052      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001680:	4a94      	ldr	r2, [pc, #592]	; (80018d4 <HAL_GPIO_Init+0x2a8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d869      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001686:	4a94      	ldr	r2, [pc, #592]	; (80018d8 <HAL_GPIO_Init+0x2ac>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d04c      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 800168c:	4a92      	ldr	r2, [pc, #584]	; (80018d8 <HAL_GPIO_Init+0x2ac>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d863      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001692:	4a92      	ldr	r2, [pc, #584]	; (80018dc <HAL_GPIO_Init+0x2b0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d046      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001698:	4a90      	ldr	r2, [pc, #576]	; (80018dc <HAL_GPIO_Init+0x2b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d85d      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d82a      	bhi.n	80016f8 <HAL_GPIO_Init+0xcc>
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d859      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 80016a6:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <HAL_GPIO_Init+0x80>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	08001727 	.word	0x08001727
 80016b0:	08001701 	.word	0x08001701
 80016b4:	08001713 	.word	0x08001713
 80016b8:	08001755 	.word	0x08001755
 80016bc:	0800175b 	.word	0x0800175b
 80016c0:	0800175b 	.word	0x0800175b
 80016c4:	0800175b 	.word	0x0800175b
 80016c8:	0800175b 	.word	0x0800175b
 80016cc:	0800175b 	.word	0x0800175b
 80016d0:	0800175b 	.word	0x0800175b
 80016d4:	0800175b 	.word	0x0800175b
 80016d8:	0800175b 	.word	0x0800175b
 80016dc:	0800175b 	.word	0x0800175b
 80016e0:	0800175b 	.word	0x0800175b
 80016e4:	0800175b 	.word	0x0800175b
 80016e8:	0800175b 	.word	0x0800175b
 80016ec:	0800175b 	.word	0x0800175b
 80016f0:	08001709 	.word	0x08001709
 80016f4:	0800171d 	.word	0x0800171d
 80016f8:	4a79      	ldr	r2, [pc, #484]	; (80018e0 <HAL_GPIO_Init+0x2b4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fe:	e02c      	b.n	800175a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	623b      	str	r3, [r7, #32]
          break;
 8001706:	e029      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	3304      	adds	r3, #4
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	e024      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	3308      	adds	r3, #8
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e01f      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	330c      	adds	r3, #12
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e01a      	b.n	800175c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800172e:	2304      	movs	r3, #4
 8001730:	623b      	str	r3, [r7, #32]
          break;
 8001732:	e013      	b.n	800175c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800173c:	2308      	movs	r3, #8
 800173e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	611a      	str	r2, [r3, #16]
          break;
 8001746:	e009      	b.n	800175c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001748:	2308      	movs	r3, #8
 800174a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	615a      	str	r2, [r3, #20]
          break;
 8001752:	e003      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x130>
          break;
 800175a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2bff      	cmp	r3, #255	; 0xff
 8001760:	d801      	bhi.n	8001766 <HAL_GPIO_Init+0x13a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	e001      	b.n	800176a <HAL_GPIO_Init+0x13e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3304      	adds	r3, #4
 800176a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d802      	bhi.n	8001778 <HAL_GPIO_Init+0x14c>
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	e002      	b.n	800177e <HAL_GPIO_Init+0x152>
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	3b08      	subs	r3, #8
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	210f      	movs	r1, #15
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	401a      	ands	r2, r3
 8001790:	6a39      	ldr	r1, [r7, #32]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	431a      	orrs	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80b1 	beq.w	800190e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ac:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a4c      	ldr	r2, [pc, #304]	; (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b4a      	ldr	r3, [pc, #296]	; (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c4:	4a48      	ldr	r2, [pc, #288]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a40      	ldr	r2, [pc, #256]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d013      	beq.n	8001818 <HAL_GPIO_Init+0x1ec>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a3f      	ldr	r2, [pc, #252]	; (80018f0 <HAL_GPIO_Init+0x2c4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00d      	beq.n	8001814 <HAL_GPIO_Init+0x1e8>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a3e      	ldr	r2, [pc, #248]	; (80018f4 <HAL_GPIO_Init+0x2c8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d007      	beq.n	8001810 <HAL_GPIO_Init+0x1e4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a3d      	ldr	r2, [pc, #244]	; (80018f8 <HAL_GPIO_Init+0x2cc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d101      	bne.n	800180c <HAL_GPIO_Init+0x1e0>
 8001808:	2303      	movs	r3, #3
 800180a:	e006      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 800180c:	2304      	movs	r3, #4
 800180e:	e004      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001810:	2302      	movs	r3, #2
 8001812:	e002      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001818:	2300      	movs	r3, #0
 800181a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181c:	f002 0203 	and.w	r2, r2, #3
 8001820:	0092      	lsls	r2, r2, #2
 8001822:	4093      	lsls	r3, r2
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800182a:	492f      	ldr	r1, [pc, #188]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	492c      	ldr	r1, [pc, #176]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	4928      	ldr	r1, [pc, #160]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800185c:	4013      	ands	r3, r2
 800185e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	4922      	ldr	r1, [pc, #136]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	43db      	mvns	r3, r3
 8001882:	491e      	ldr	r1, [pc, #120]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001884:	4013      	ands	r3, r2
 8001886:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	4918      	ldr	r1, [pc, #96]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4914      	ldr	r1, [pc, #80]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d021      	beq.n	8001900 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
 80018c8:	e021      	b.n	800190e <HAL_GPIO_Init+0x2e2>
 80018ca:	bf00      	nop
 80018cc:	10320000 	.word	0x10320000
 80018d0:	10310000 	.word	0x10310000
 80018d4:	10220000 	.word	0x10220000
 80018d8:	10210000 	.word	0x10210000
 80018dc:	10120000 	.word	0x10120000
 80018e0:	10110000 	.word	0x10110000
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010000 	.word	0x40010000
 80018ec:	40010800 	.word	0x40010800
 80018f0:	40010c00 	.word	0x40010c00
 80018f4:	40011000 	.word	0x40011000
 80018f8:	40011400 	.word	0x40011400
 80018fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_GPIO_Init+0x304>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	43db      	mvns	r3, r3
 8001908:	4909      	ldr	r1, [pc, #36]	; (8001930 <HAL_GPIO_Init+0x304>)
 800190a:	4013      	ands	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	3301      	adds	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f ae8e 	bne.w	8001640 <HAL_GPIO_Init+0x14>
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	372c      	adds	r7, #44	; 0x2c
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001950:	e003      	b.n	800195a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	041a      	lsls	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	611a      	str	r2, [r3, #16]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f806 	bl	8001994 <HAL_GPIO_EXTI_Callback>
  }
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e272      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8087 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c8:	4b92      	ldr	r3, [pc, #584]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d00c      	beq.n	80019ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d4:	4b8f      	ldr	r3, [pc, #572]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d112      	bne.n	8001a06 <HAL_RCC_OscConfig+0x5e>
 80019e0:	4b8c      	ldr	r3, [pc, #560]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d10b      	bne.n	8001a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ee:	4b89      	ldr	r3, [pc, #548]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d06c      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x12c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d168      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e24c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x76>
 8001a10:	4b80      	ldr	r3, [pc, #512]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a7f      	ldr	r2, [pc, #508]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e02e      	b.n	8001a7c <HAL_RCC_OscConfig+0xd4>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x98>
 8001a26:	4b7b      	ldr	r3, [pc, #492]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a7a      	ldr	r2, [pc, #488]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b78      	ldr	r3, [pc, #480]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a77      	ldr	r2, [pc, #476]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e01d      	b.n	8001a7c <HAL_RCC_OscConfig+0xd4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0xbc>
 8001a4a:	4b72      	ldr	r3, [pc, #456]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a71      	ldr	r2, [pc, #452]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a6e      	ldr	r2, [pc, #440]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e00b      	b.n	8001a7c <HAL_RCC_OscConfig+0xd4>
 8001a64:	4b6b      	ldr	r3, [pc, #428]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a6a      	ldr	r2, [pc, #424]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b68      	ldr	r3, [pc, #416]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a67      	ldr	r2, [pc, #412]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fce8 	bl	8001458 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fce4 	bl	8001458 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e200      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	4b5d      	ldr	r3, [pc, #372]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0xe4>
 8001aaa:	e014      	b.n	8001ad6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fcd4 	bl	8001458 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fcd0 	bl	8001458 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e1ec      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x10c>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae2:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00b      	beq.n	8001b06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aee:	4b49      	ldr	r3, [pc, #292]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d11c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x18c>
 8001afa:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d116      	bne.n	8001b34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_RCC_OscConfig+0x176>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e1c0      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4939      	ldr	r1, [pc, #228]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	e03a      	b.n	8001baa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d020      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff fc89 	bl	8001458 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fc85 	bl	8001458 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e1a1      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4927      	ldr	r1, [pc, #156]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
 8001b7c:	e015      	b.n	8001baa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff fc68 	bl	8001458 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fc64 	bl	8001458 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e180      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d03a      	beq.n	8001c2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d019      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fc48 	bl	8001458 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fc44 	bl	8001458 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e160      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f000 fafe 	bl	80021ec <RCC_Delay>
 8001bf0:	e01c      	b.n	8001c2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fc2e 	bl	8001458 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfe:	e00f      	b.n	8001c20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c00:	f7ff fc2a 	bl	8001458 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d908      	bls.n	8001c20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e146      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	42420000 	.word	0x42420000
 8001c1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c20:	4b92      	ldr	r3, [pc, #584]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1e9      	bne.n	8001c00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80a6 	beq.w	8001d86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3e:	4b8b      	ldr	r3, [pc, #556]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10d      	bne.n	8001c66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a87      	ldr	r2, [pc, #540]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	61d3      	str	r3, [r2, #28]
 8001c56:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c62:	2301      	movs	r3, #1
 8001c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c66:	4b82      	ldr	r3, [pc, #520]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d118      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c72:	4b7f      	ldr	r3, [pc, #508]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a7e      	ldr	r2, [pc, #504]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fbeb 	bl	8001458 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c86:	f7ff fbe7 	bl	8001458 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b64      	cmp	r3, #100	; 0x64
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e103      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c98:	4b75      	ldr	r3, [pc, #468]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x312>
 8001cac:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4a6e      	ldr	r2, [pc, #440]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6213      	str	r3, [r2, #32]
 8001cb8:	e02d      	b.n	8001d16 <HAL_RCC_OscConfig+0x36e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x334>
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a69      	ldr	r2, [pc, #420]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6213      	str	r3, [r2, #32]
 8001cce:	4b67      	ldr	r3, [pc, #412]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a66      	ldr	r2, [pc, #408]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	e01c      	b.n	8001d16 <HAL_RCC_OscConfig+0x36e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d10c      	bne.n	8001cfe <HAL_RCC_OscConfig+0x356>
 8001ce4:	4b61      	ldr	r3, [pc, #388]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a60      	ldr	r2, [pc, #384]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	4b5e      	ldr	r3, [pc, #376]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a5d      	ldr	r2, [pc, #372]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6213      	str	r3, [r2, #32]
 8001cfc:	e00b      	b.n	8001d16 <HAL_RCC_OscConfig+0x36e>
 8001cfe:	4b5b      	ldr	r3, [pc, #364]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a5a      	ldr	r2, [pc, #360]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	6213      	str	r3, [r2, #32]
 8001d0a:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	f023 0304 	bic.w	r3, r3, #4
 8001d14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d015      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fb9b 	bl	8001458 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7ff fb97 	bl	8001458 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e0b1      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3c:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ee      	beq.n	8001d26 <HAL_RCC_OscConfig+0x37e>
 8001d48:	e014      	b.n	8001d74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fb85 	bl	8001458 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7ff fb81 	bl	8001458 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e09b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d68:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ee      	bne.n	8001d52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d105      	bne.n	8001d86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7a:	4b3c      	ldr	r3, [pc, #240]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a3b      	ldr	r2, [pc, #236]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8087 	beq.w	8001e9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d061      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d146      	bne.n	8001e32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da4:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <HAL_RCC_OscConfig+0x4cc>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff fb55 	bl	8001458 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff fb51 	bl	8001458 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e06d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd8:	d108      	bne.n	8001dec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	4921      	ldr	r1, [pc, #132]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a19      	ldr	r1, [r3, #32]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	491b      	ldr	r1, [pc, #108]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x4cc>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fb25 	bl	8001458 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff fb21 	bl	8001458 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e03d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x46a>
 8001e30:	e035      	b.n	8001e9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_RCC_OscConfig+0x4cc>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fb0e 	bl	8001458 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff fb0a 	bl	8001458 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e026      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x498>
 8001e5e:	e01e      	b.n	8001e9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e019      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
 8001e74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_RCC_OscConfig+0x500>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0d0      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d910      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 0207 	bic.w	r2, r3, #7
 8001ed6:	4965      	ldr	r1, [pc, #404]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b8      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f08:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	494d      	ldr	r1, [pc, #308]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d040      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e073      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06b      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4936      	ldr	r1, [pc, #216]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f9c:	f7ff fa5c 	bl	8001458 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7ff fa58 	bl	8001458 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e053      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d210      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4922      	ldr	r1, [pc, #136]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e032      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4916      	ldr	r1, [pc, #88]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	490e      	ldr	r1, [pc, #56]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203a:	f000 f821 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800203e:	4602      	mov	r2, r0
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	490a      	ldr	r1, [pc, #40]	; (8002074 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	5ccb      	ldrb	r3, [r1, r3]
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1cc>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1d0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f85e 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
 8002074:	080085d4 	.word	0x080085d4
 8002078:	20000000 	.word	0x20000000
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800209a:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_RCC_GetSysClockFreq+0x94>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x30>
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x36>
 80020ae:	e027      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_RCC_GetSysClockFreq+0x98>)
 80020b2:	613b      	str	r3, [r7, #16]
      break;
 80020b4:	e027      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	0c9b      	lsrs	r3, r3, #18
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d010      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_RCC_GetSysClockFreq+0x94>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	0c5b      	lsrs	r3, r3, #17
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a0d      	ldr	r2, [pc, #52]	; (8002118 <HAL_RCC_GetSysClockFreq+0x98>)
 80020e2:	fb03 f202 	mul.w	r2, r3, r2
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	e004      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a0c      	ldr	r2, [pc, #48]	; (8002124 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	613b      	str	r3, [r7, #16]
      break;
 80020fe:	e002      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetSysClockFreq+0x98>)
 8002102:	613b      	str	r3, [r7, #16]
      break;
 8002104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002106:	693b      	ldr	r3, [r7, #16]
}
 8002108:	4618      	mov	r0, r3
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	007a1200 	.word	0x007a1200
 800211c:	080085ec 	.word	0x080085ec
 8002120:	080085fc 	.word	0x080085fc
 8002124:	003d0900 	.word	0x003d0900

08002128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800212c:	4b02      	ldr	r3, [pc, #8]	; (8002138 <HAL_RCC_GetHCLKFreq+0x10>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	20000000 	.word	0x20000000

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002140:	f7ff fff2 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4903      	ldr	r1, [pc, #12]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	080085e4 	.word	0x080085e4

08002164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002168:	f7ff ffde 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 800216c:	4602      	mov	r2, r0
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	0adb      	lsrs	r3, r3, #11
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4903      	ldr	r1, [pc, #12]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800217a:	5ccb      	ldrb	r3, [r1, r3]
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	080085e4 	.word	0x080085e4

0800218c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	220f      	movs	r2, #15
 800219a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_RCC_GetClockConfig+0x58>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_RCC_GetClockConfig+0x58>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_GetClockConfig+0x58>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_RCC_GetClockConfig+0x58>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_GetClockConfig+0x5c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0207 	and.w	r2, r3, #7
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40022000 	.word	0x40022000

080021ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <RCC_Delay+0x34>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <RCC_Delay+0x38>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0a5b      	lsrs	r3, r3, #9
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002208:	bf00      	nop
  }
  while (Delay --);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	60fa      	str	r2, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f9      	bne.n	8002208 <RCC_Delay+0x1c>
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	20000000 	.word	0x20000000
 8002224:	10624dd3 	.word	0x10624dd3

08002228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e041      	b.n	80022be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f839 	bl	80022c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3304      	adds	r3, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f000 f9b4 	bl	80025d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d001      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e03a      	b.n	8002366 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a18      	ldr	r2, [pc, #96]	; (8002370 <HAL_TIM_Base_Start_IT+0x98>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00e      	beq.n	8002330 <HAL_TIM_Base_Start_IT+0x58>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231a:	d009      	beq.n	8002330 <HAL_TIM_Base_Start_IT+0x58>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a14      	ldr	r2, [pc, #80]	; (8002374 <HAL_TIM_Base_Start_IT+0x9c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d004      	beq.n	8002330 <HAL_TIM_Base_Start_IT+0x58>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a13      	ldr	r2, [pc, #76]	; (8002378 <HAL_TIM_Base_Start_IT+0xa0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d111      	bne.n	8002354 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b06      	cmp	r3, #6
 8002340:	d010      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0201 	orr.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002352:	e007      	b.n	8002364 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	40012c00 	.word	0x40012c00
 8002374:	40000400 	.word	0x40000400
 8002378:	40000800 	.word	0x40000800

0800237c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b02      	cmp	r3, #2
 8002390:	d122      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d11b      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0202 	mvn.w	r2, #2
 80023a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8ed 	bl	800259e <HAL_TIM_IC_CaptureCallback>
 80023c4:	e005      	b.n	80023d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8e0 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f8ef 	bl	80025b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d122      	bne.n	800242c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d11b      	bne.n	800242c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0204 	mvn.w	r2, #4
 80023fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2202      	movs	r2, #2
 8002402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8c3 	bl	800259e <HAL_TIM_IC_CaptureCallback>
 8002418:	e005      	b.n	8002426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8b6 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f8c5 	bl	80025b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b08      	cmp	r3, #8
 8002438:	d122      	bne.n	8002480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b08      	cmp	r3, #8
 8002446:	d11b      	bne.n	8002480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0208 	mvn.w	r2, #8
 8002450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2204      	movs	r2, #4
 8002456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f899 	bl	800259e <HAL_TIM_IC_CaptureCallback>
 800246c:	e005      	b.n	800247a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f88c 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f89b 	bl	80025b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b10      	cmp	r3, #16
 800248c:	d122      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b10      	cmp	r3, #16
 800249a:	d11b      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0210 	mvn.w	r2, #16
 80024a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2208      	movs	r2, #8
 80024aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f86f 	bl	800259e <HAL_TIM_IC_CaptureCallback>
 80024c0:	e005      	b.n	80024ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f862 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f871 	bl	80025b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d10e      	bne.n	8002500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d107      	bne.n	8002500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0201 	mvn.w	r2, #1
 80024f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fd80 	bl	8001000 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250a:	2b80      	cmp	r3, #128	; 0x80
 800250c:	d10e      	bne.n	800252c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002518:	2b80      	cmp	r3, #128	; 0x80
 800251a:	d107      	bne.n	800252c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f8bf 	bl	80026aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b40      	cmp	r3, #64	; 0x40
 8002538:	d10e      	bne.n	8002558 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	d107      	bne.n	8002558 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f835 	bl	80025c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b20      	cmp	r3, #32
 8002564:	d10e      	bne.n	8002584 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b20      	cmp	r3, #32
 8002572:	d107      	bne.n	8002584 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0220 	mvn.w	r2, #32
 800257c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f88a 	bl	8002698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a29      	ldr	r2, [pc, #164]	; (800268c <TIM_Base_SetConfig+0xb8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00b      	beq.n	8002604 <TIM_Base_SetConfig+0x30>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f2:	d007      	beq.n	8002604 <TIM_Base_SetConfig+0x30>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a26      	ldr	r2, [pc, #152]	; (8002690 <TIM_Base_SetConfig+0xbc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <TIM_Base_SetConfig+0x30>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a25      	ldr	r2, [pc, #148]	; (8002694 <TIM_Base_SetConfig+0xc0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d108      	bne.n	8002616 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a1c      	ldr	r2, [pc, #112]	; (800268c <TIM_Base_SetConfig+0xb8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00b      	beq.n	8002636 <TIM_Base_SetConfig+0x62>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002624:	d007      	beq.n	8002636 <TIM_Base_SetConfig+0x62>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a19      	ldr	r2, [pc, #100]	; (8002690 <TIM_Base_SetConfig+0xbc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0x62>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a18      	ldr	r2, [pc, #96]	; (8002694 <TIM_Base_SetConfig+0xc0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <TIM_Base_SetConfig+0xb8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d103      	bne.n	800267c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	615a      	str	r2, [r3, #20]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40000400 	.word	0x40000400
 8002694:	40000800 	.word	0x40000800

08002698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e042      	b.n	8002754 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe fcdc 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2224      	movs	r2, #36	; 0x24
 80026ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f82b 	bl	800275c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002796:	f023 030c 	bic.w	r3, r3, #12
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a2c      	ldr	r2, [pc, #176]	; (8002870 <UART_SetConfig+0x114>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d103      	bne.n	80027cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027c4:	f7ff fcce 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	e002      	b.n	80027d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027cc:	f7ff fcb6 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 80027d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	009a      	lsls	r2, r3, #2
 80027dc:	441a      	add	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	4a22      	ldr	r2, [pc, #136]	; (8002874 <UART_SetConfig+0x118>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	0119      	lsls	r1, r3, #4
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	441a      	add	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	fbb2 f2f3 	udiv	r2, r2, r3
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <UART_SetConfig+0x118>)
 800280a:	fba3 0302 	umull	r0, r3, r3, r2
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2064      	movs	r0, #100	; 0x64
 8002812:	fb00 f303 	mul.w	r3, r0, r3
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	3332      	adds	r3, #50	; 0x32
 800281c:	4a15      	ldr	r2, [pc, #84]	; (8002874 <UART_SetConfig+0x118>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002828:	4419      	add	r1, r3
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	009a      	lsls	r2, r3, #2
 8002834:	441a      	add	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <UART_SetConfig+0x118>)
 8002842:	fba3 0302 	umull	r0, r3, r3, r2
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2064      	movs	r0, #100	; 0x64
 800284a:	fb00 f303 	mul.w	r3, r0, r3
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	3332      	adds	r3, #50	; 0x32
 8002854:	4a07      	ldr	r2, [pc, #28]	; (8002874 <UART_SetConfig+0x118>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	f003 020f 	and.w	r2, r3, #15
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	440a      	add	r2, r1
 8002866:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40013800 	.word	0x40013800
 8002874:	51eb851f 	.word	0x51eb851f

08002878 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800288a:	2b84      	cmp	r3, #132	; 0x84
 800288c:	d005      	beq.n	800289a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800288e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4413      	add	r3, r2
 8002896:	3303      	adds	r3, #3
 8002898:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800289a:	68fb      	ldr	r3, [r7, #12]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80028aa:	f000 fae7 	bl	8002e7c <vTaskStartScheduler>
  
  return osOK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80028b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b6:	b089      	sub	sp, #36	; 0x24
 80028b8:	af04      	add	r7, sp, #16
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d020      	beq.n	8002908 <osThreadCreate+0x54>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01c      	beq.n	8002908 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685c      	ldr	r4, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691e      	ldr	r6, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ffc9 	bl	8002878 <makeFreeRtosPriority>
 80028e6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028f0:	9202      	str	r2, [sp, #8]
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	9100      	str	r1, [sp, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	4632      	mov	r2, r6
 80028fa:	4629      	mov	r1, r5
 80028fc:	4620      	mov	r0, r4
 80028fe:	f000 f8e8 	bl	8002ad2 <xTaskCreateStatic>
 8002902:	4603      	mov	r3, r0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	e01c      	b.n	8002942 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685c      	ldr	r4, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002914:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ffab 	bl	8002878 <makeFreeRtosPriority>
 8002922:	4602      	mov	r2, r0
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	9200      	str	r2, [sp, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4632      	mov	r2, r6
 8002930:	4629      	mov	r1, r5
 8002932:	4620      	mov	r0, r4
 8002934:	f000 f929 	bl	8002b8a <xTaskCreate>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d001      	beq.n	8002942 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800294c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <osDelay+0x16>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	e000      	b.n	8002964 <osDelay+0x18>
 8002962:	2301      	movs	r3, #1
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fa55 	bl	8002e14 <vTaskDelay>
  
  return osOK;
 800296a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f103 0208 	add.w	r2, r3, #8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f103 0208 	add.w	r2, r3, #8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f103 0208 	add.w	r2, r3, #8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	601a      	str	r2, [r3, #0]
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d103      	bne.n	8002a30 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e00c      	b.n	8002a4a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3308      	adds	r3, #8
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	e002      	b.n	8002a3e <vListInsert+0x2e>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d2f6      	bcs.n	8002a38 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	601a      	str	r2, [r3, #0]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6892      	ldr	r2, [r2, #8]
 8002a96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6852      	ldr	r2, [r2, #4]
 8002aa0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d103      	bne.n	8002ab4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1e5a      	subs	r2, r3, #1
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b08e      	sub	sp, #56	; 0x38
 8002ad6:	af04      	add	r7, sp, #16
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002af8:	bf00      	nop
 8002afa:	e7fe      	b.n	8002afa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10a      	bne.n	8002b18 <xTaskCreateStatic+0x46>
	__asm volatile
 8002b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b06:	f383 8811 	msr	BASEPRI, r3
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	61fb      	str	r3, [r7, #28]
}
 8002b14:	bf00      	nop
 8002b16:	e7fe      	b.n	8002b16 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b18:	23a0      	movs	r3, #160	; 0xa0
 8002b1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b20:	d00a      	beq.n	8002b38 <xTaskCreateStatic+0x66>
	__asm volatile
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	61bb      	str	r3, [r7, #24]
}
 8002b34:	bf00      	nop
 8002b36:	e7fe      	b.n	8002b36 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01e      	beq.n	8002b7c <xTaskCreateStatic+0xaa>
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01b      	beq.n	8002b7c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	2202      	movs	r2, #2
 8002b52:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b56:	2300      	movs	r3, #0
 8002b58:	9303      	str	r3, [sp, #12]
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	9302      	str	r3, [sp, #8]
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f850 	bl	8002c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b76:	f000 f8e3 	bl	8002d40 <prvAddNewTaskToReadyList>
 8002b7a:	e001      	b.n	8002b80 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b80:	697b      	ldr	r3, [r7, #20]
	}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3728      	adds	r7, #40	; 0x28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b08c      	sub	sp, #48	; 0x30
 8002b8e:	af04      	add	r7, sp, #16
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fe96 	bl	80038d0 <pvPortMalloc>
 8002ba4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00e      	beq.n	8002bca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002bac:	20a0      	movs	r0, #160	; 0xa0
 8002bae:	f000 fe8f 	bl	80038d0 <pvPortMalloc>
 8002bb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8002bc0:	e005      	b.n	8002bce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002bc2:	6978      	ldr	r0, [r7, #20]
 8002bc4:	f000 ff48 	bl	8003a58 <vPortFree>
 8002bc8:	e001      	b.n	8002bce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d017      	beq.n	8002c04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bdc:	88fa      	ldrh	r2, [r7, #6]
 8002bde:	2300      	movs	r3, #0
 8002be0:	9303      	str	r3, [sp, #12]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	9302      	str	r3, [sp, #8]
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f80e 	bl	8002c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bf8:	69f8      	ldr	r0, [r7, #28]
 8002bfa:	f000 f8a1 	bl	8002d40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	e002      	b.n	8002c0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c0a:	69bb      	ldr	r3, [r7, #24]
	}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f023 0307 	bic.w	r3, r3, #7
 8002c3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <prvInitialiseNewTask+0x48>
	__asm volatile
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	617b      	str	r3, [r7, #20]
}
 8002c58:	bf00      	nop
 8002c5a:	e7fe      	b.n	8002c5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	e012      	b.n	8002c88 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	4413      	add	r3, r2
 8002c68:	7819      	ldrb	r1, [r3, #0]
 8002c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	3334      	adds	r3, #52	; 0x34
 8002c72:	460a      	mov	r2, r1
 8002c74:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d006      	beq.n	8002c90 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3301      	adds	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b0f      	cmp	r3, #15
 8002c8c:	d9e9      	bls.n	8002c62 <prvInitialiseNewTask+0x4e>
 8002c8e:	e000      	b.n	8002c92 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002c90:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	2b06      	cmp	r3, #6
 8002c9e:	d901      	bls.n	8002ca4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ca0:	2306      	movs	r3, #6
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	3304      	adds	r3, #4
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fe79 	bl	80029b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	3318      	adds	r3, #24
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fe74 	bl	80029b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	f1c3 0207 	rsb	r2, r3, #7
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	334c      	adds	r3, #76	; 0x4c
 8002cf4:	224c      	movs	r2, #76	; 0x4c
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 ff52 	bl	8004ba2 <memset>
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <prvInitialiseNewTask+0x120>)
 8002d02:	651a      	str	r2, [r3, #80]	; 0x50
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	4a0c      	ldr	r2, [pc, #48]	; (8002d38 <prvInitialiseNewTask+0x124>)
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <prvInitialiseNewTask+0x128>)
 8002d0e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	68f9      	ldr	r1, [r7, #12]
 8002d14:	69b8      	ldr	r0, [r7, #24]
 8002d16:	f000 fc29 	bl	800356c <pxPortInitialiseStack>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d2c:	bf00      	nop
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	2000127c 	.word	0x2000127c
 8002d38:	200012e4 	.word	0x200012e4
 8002d3c:	2000134c 	.word	0x2000134c

08002d40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d48:	f000 fd00 	bl	800374c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <prvAddNewTaskToReadyList+0xb8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	4a29      	ldr	r2, [pc, #164]	; (8002df8 <prvAddNewTaskToReadyList+0xb8>)
 8002d54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d56:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <prvAddNewTaskToReadyList+0xbc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d5e:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <prvAddNewTaskToReadyList+0xbc>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d64:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <prvAddNewTaskToReadyList+0xb8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d110      	bne.n	8002d8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d6c:	f000 fad2 	bl	8003314 <prvInitialiseTaskLists>
 8002d70:	e00d      	b.n	8002d8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d72:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <prvAddNewTaskToReadyList+0xc0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <prvAddNewTaskToReadyList+0xbc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d802      	bhi.n	8002d8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d88:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <prvAddNewTaskToReadyList+0xbc>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <prvAddNewTaskToReadyList+0xc4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	4a1b      	ldr	r2, [pc, #108]	; (8002e04 <prvAddNewTaskToReadyList+0xc4>)
 8002d96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <prvAddNewTaskToReadyList+0xc8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <prvAddNewTaskToReadyList+0xc8>)
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4a15      	ldr	r2, [pc, #84]	; (8002e0c <prvAddNewTaskToReadyList+0xcc>)
 8002db8:	441a      	add	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	f7ff fe02 	bl	80029ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002dc6:	f000 fcf1 	bl	80037ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <prvAddNewTaskToReadyList+0xc0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00e      	beq.n	8002df0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <prvAddNewTaskToReadyList+0xbc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d207      	bcs.n	8002df0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <prvAddNewTaskToReadyList+0xd0>)
 8002de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000630 	.word	0x20000630
 8002dfc:	20000530 	.word	0x20000530
 8002e00:	2000063c 	.word	0x2000063c
 8002e04:	2000064c 	.word	0x2000064c
 8002e08:	20000638 	.word	0x20000638
 8002e0c:	20000534 	.word	0x20000534
 8002e10:	e000ed04 	.word	0xe000ed04

08002e14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d017      	beq.n	8002e56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e26:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <vTaskDelay+0x60>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <vTaskDelay+0x30>
	__asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	60bb      	str	r3, [r7, #8]
}
 8002e40:	bf00      	nop
 8002e42:	e7fe      	b.n	8002e42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e44:	f000 f884 	bl	8002f50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e48:	2100      	movs	r1, #0
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fb28 	bl	80034a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e50:	f000 f88c 	bl	8002f6c <xTaskResumeAll>
 8002e54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d107      	bne.n	8002e6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <vTaskDelay+0x64>)
 8002e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000658 	.word	0x20000658
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e8a:	463a      	mov	r2, r7
 8002e8c:	1d39      	adds	r1, r7, #4
 8002e8e:	f107 0308 	add.w	r3, r7, #8
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd ff96 	bl	8000dc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e98:	6839      	ldr	r1, [r7, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	9202      	str	r2, [sp, #8]
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	460a      	mov	r2, r1
 8002eaa:	4921      	ldr	r1, [pc, #132]	; (8002f30 <vTaskStartScheduler+0xb4>)
 8002eac:	4821      	ldr	r0, [pc, #132]	; (8002f34 <vTaskStartScheduler+0xb8>)
 8002eae:	f7ff fe10 	bl	8002ad2 <xTaskCreateStatic>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <vTaskStartScheduler+0xbc>)
 8002eb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002eb8:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <vTaskStartScheduler+0xbc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	e001      	b.n	8002eca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d11b      	bne.n	8002f08 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	613b      	str	r3, [r7, #16]
}
 8002ee2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002ee4:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <vTaskStartScheduler+0xc0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	334c      	adds	r3, #76	; 0x4c
 8002eea:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <vTaskStartScheduler+0xc4>)
 8002eec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <vTaskStartScheduler+0xc8>)
 8002ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <vTaskStartScheduler+0xcc>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002efc:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <vTaskStartScheduler+0xd0>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f02:	f000 fbb1 	bl	8003668 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f06:	e00e      	b.n	8002f26 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d10a      	bne.n	8002f26 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	60fb      	str	r3, [r7, #12]
}
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <vTaskStartScheduler+0xa8>
}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	080085cc 	.word	0x080085cc
 8002f34:	080032e5 	.word	0x080032e5
 8002f38:	20000654 	.word	0x20000654
 8002f3c:	20000530 	.word	0x20000530
 8002f40:	20000068 	.word	0x20000068
 8002f44:	20000650 	.word	0x20000650
 8002f48:	2000063c 	.word	0x2000063c
 8002f4c:	20000634 	.word	0x20000634

08002f50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002f54:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <vTaskSuspendAll+0x18>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	4a03      	ldr	r2, [pc, #12]	; (8002f68 <vTaskSuspendAll+0x18>)
 8002f5c:	6013      	str	r3, [r2, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000658 	.word	0x20000658

08002f6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f7a:	4b41      	ldr	r3, [pc, #260]	; (8003080 <xTaskResumeAll+0x114>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <xTaskResumeAll+0x2c>
	__asm volatile
 8002f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	603b      	str	r3, [r7, #0]
}
 8002f94:	bf00      	nop
 8002f96:	e7fe      	b.n	8002f96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f98:	f000 fbd8 	bl	800374c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f9c:	4b38      	ldr	r3, [pc, #224]	; (8003080 <xTaskResumeAll+0x114>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	4a37      	ldr	r2, [pc, #220]	; (8003080 <xTaskResumeAll+0x114>)
 8002fa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fa6:	4b36      	ldr	r3, [pc, #216]	; (8003080 <xTaskResumeAll+0x114>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d161      	bne.n	8003072 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fae:	4b35      	ldr	r3, [pc, #212]	; (8003084 <xTaskResumeAll+0x118>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d05d      	beq.n	8003072 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fb6:	e02e      	b.n	8003016 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002fb8:	4b33      	ldr	r3, [pc, #204]	; (8003088 <xTaskResumeAll+0x11c>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3318      	adds	r3, #24
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fd5b 	bl	8002a80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fd56 	bl	8002a80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	2201      	movs	r2, #1
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	; (800308c <xTaskResumeAll+0x120>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	; (800308c <xTaskResumeAll+0x120>)
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4a27      	ldr	r2, [pc, #156]	; (8003090 <xTaskResumeAll+0x124>)
 8002ff4:	441a      	add	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f7ff fce4 	bl	80029ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003006:	4b23      	ldr	r3, [pc, #140]	; (8003094 <xTaskResumeAll+0x128>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	429a      	cmp	r2, r3
 800300e:	d302      	bcc.n	8003016 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003010:	4b21      	ldr	r3, [pc, #132]	; (8003098 <xTaskResumeAll+0x12c>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <xTaskResumeAll+0x11c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1cc      	bne.n	8002fb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003024:	f000 fa18 	bl	8003458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003028:	4b1c      	ldr	r3, [pc, #112]	; (800309c <xTaskResumeAll+0x130>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d010      	beq.n	8003056 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003034:	f000 f836 	bl	80030a4 <xTaskIncrementTick>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800303e:	4b16      	ldr	r3, [pc, #88]	; (8003098 <xTaskResumeAll+0x12c>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f1      	bne.n	8003034 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <xTaskResumeAll+0x130>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <xTaskResumeAll+0x12c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800305e:	2301      	movs	r3, #1
 8003060:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <xTaskResumeAll+0x134>)
 8003064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003072:	f000 fb9b 	bl	80037ac <vPortExitCritical>

	return xAlreadyYielded;
 8003076:	68bb      	ldr	r3, [r7, #8]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000658 	.word	0x20000658
 8003084:	20000630 	.word	0x20000630
 8003088:	200005f0 	.word	0x200005f0
 800308c:	20000638 	.word	0x20000638
 8003090:	20000534 	.word	0x20000534
 8003094:	20000530 	.word	0x20000530
 8003098:	20000644 	.word	0x20000644
 800309c:	20000640 	.word	0x20000640
 80030a0:	e000ed04 	.word	0xe000ed04

080030a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ae:	4b51      	ldr	r3, [pc, #324]	; (80031f4 <xTaskIncrementTick+0x150>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f040 808d 	bne.w	80031d2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030b8:	4b4f      	ldr	r3, [pc, #316]	; (80031f8 <xTaskIncrementTick+0x154>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3301      	adds	r3, #1
 80030be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80030c0:	4a4d      	ldr	r2, [pc, #308]	; (80031f8 <xTaskIncrementTick+0x154>)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d120      	bne.n	800310e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80030cc:	4b4b      	ldr	r3, [pc, #300]	; (80031fc <xTaskIncrementTick+0x158>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <xTaskIncrementTick+0x48>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	603b      	str	r3, [r7, #0]
}
 80030e8:	bf00      	nop
 80030ea:	e7fe      	b.n	80030ea <xTaskIncrementTick+0x46>
 80030ec:	4b43      	ldr	r3, [pc, #268]	; (80031fc <xTaskIncrementTick+0x158>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4b43      	ldr	r3, [pc, #268]	; (8003200 <xTaskIncrementTick+0x15c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a41      	ldr	r2, [pc, #260]	; (80031fc <xTaskIncrementTick+0x158>)
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4a41      	ldr	r2, [pc, #260]	; (8003200 <xTaskIncrementTick+0x15c>)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b40      	ldr	r3, [pc, #256]	; (8003204 <xTaskIncrementTick+0x160>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3301      	adds	r3, #1
 8003106:	4a3f      	ldr	r2, [pc, #252]	; (8003204 <xTaskIncrementTick+0x160>)
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	f000 f9a5 	bl	8003458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800310e:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <xTaskIncrementTick+0x164>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	429a      	cmp	r2, r3
 8003116:	d34d      	bcc.n	80031b4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003118:	4b38      	ldr	r3, [pc, #224]	; (80031fc <xTaskIncrementTick+0x158>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <xTaskIncrementTick+0x82>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <xTaskIncrementTick+0x84>
 8003126:	2300      	movs	r3, #0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d004      	beq.n	8003136 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <xTaskIncrementTick+0x164>)
 800312e:	f04f 32ff 	mov.w	r2, #4294967295
 8003132:	601a      	str	r2, [r3, #0]
					break;
 8003134:	e03e      	b.n	80031b4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003136:	4b31      	ldr	r3, [pc, #196]	; (80031fc <xTaskIncrementTick+0x158>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	d203      	bcs.n	8003156 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800314e:	4a2e      	ldr	r2, [pc, #184]	; (8003208 <xTaskIncrementTick+0x164>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6013      	str	r3, [r2, #0]
						break;
 8003154:	e02e      	b.n	80031b4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	3304      	adds	r3, #4
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fc90 	bl	8002a80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	2b00      	cmp	r3, #0
 8003166:	d004      	beq.n	8003172 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	3318      	adds	r3, #24
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fc87 	bl	8002a80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	2201      	movs	r2, #1
 8003178:	409a      	lsls	r2, r3
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <xTaskIncrementTick+0x168>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	4a22      	ldr	r2, [pc, #136]	; (800320c <xTaskIncrementTick+0x168>)
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4a1f      	ldr	r2, [pc, #124]	; (8003210 <xTaskIncrementTick+0x16c>)
 8003192:	441a      	add	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	3304      	adds	r3, #4
 8003198:	4619      	mov	r1, r3
 800319a:	4610      	mov	r0, r2
 800319c:	f7ff fc15 	bl	80029ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <xTaskIncrementTick+0x170>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d3b4      	bcc.n	8003118 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80031ae:	2301      	movs	r3, #1
 80031b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031b2:	e7b1      	b.n	8003118 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031b4:	4b17      	ldr	r3, [pc, #92]	; (8003214 <xTaskIncrementTick+0x170>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ba:	4915      	ldr	r1, [pc, #84]	; (8003210 <xTaskIncrementTick+0x16c>)
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d907      	bls.n	80031dc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80031cc:	2301      	movs	r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	e004      	b.n	80031dc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80031d2:	4b11      	ldr	r3, [pc, #68]	; (8003218 <xTaskIncrementTick+0x174>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3301      	adds	r3, #1
 80031d8:	4a0f      	ldr	r2, [pc, #60]	; (8003218 <xTaskIncrementTick+0x174>)
 80031da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <xTaskIncrementTick+0x178>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80031e4:	2301      	movs	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80031e8:	697b      	ldr	r3, [r7, #20]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000658 	.word	0x20000658
 80031f8:	20000634 	.word	0x20000634
 80031fc:	200005e8 	.word	0x200005e8
 8003200:	200005ec 	.word	0x200005ec
 8003204:	20000648 	.word	0x20000648
 8003208:	20000650 	.word	0x20000650
 800320c:	20000638 	.word	0x20000638
 8003210:	20000534 	.word	0x20000534
 8003214:	20000530 	.word	0x20000530
 8003218:	20000640 	.word	0x20000640
 800321c:	20000644 	.word	0x20000644

08003220 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003226:	4b29      	ldr	r3, [pc, #164]	; (80032cc <vTaskSwitchContext+0xac>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800322e:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <vTaskSwitchContext+0xb0>)
 8003230:	2201      	movs	r2, #1
 8003232:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003234:	e044      	b.n	80032c0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003236:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <vTaskSwitchContext+0xb0>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <vTaskSwitchContext+0xb4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800324a:	7afb      	ldrb	r3, [r7, #11]
 800324c:	f1c3 031f 	rsb	r3, r3, #31
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	4921      	ldr	r1, [pc, #132]	; (80032d8 <vTaskSwitchContext+0xb8>)
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	607b      	str	r3, [r7, #4]
}
 8003278:	bf00      	nop
 800327a:	e7fe      	b.n	800327a <vTaskSwitchContext+0x5a>
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4a14      	ldr	r2, [pc, #80]	; (80032d8 <vTaskSwitchContext+0xb8>)
 8003288:	4413      	add	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	3308      	adds	r3, #8
 800329e:	429a      	cmp	r2, r3
 80032a0:	d104      	bne.n	80032ac <vTaskSwitchContext+0x8c>
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	605a      	str	r2, [r3, #4]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <vTaskSwitchContext+0xbc>)
 80032b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <vTaskSwitchContext+0xbc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	334c      	adds	r3, #76	; 0x4c
 80032bc:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <vTaskSwitchContext+0xc0>)
 80032be:	6013      	str	r3, [r2, #0]
}
 80032c0:	bf00      	nop
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000658 	.word	0x20000658
 80032d0:	20000644 	.word	0x20000644
 80032d4:	20000638 	.word	0x20000638
 80032d8:	20000534 	.word	0x20000534
 80032dc:	20000530 	.word	0x20000530
 80032e0:	20000068 	.word	0x20000068

080032e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032ec:	f000 f852 	bl	8003394 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <prvIdleTask+0x28>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d9f9      	bls.n	80032ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <prvIdleTask+0x2c>)
 80032fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003308:	e7f0      	b.n	80032ec <prvIdleTask+0x8>
 800330a:	bf00      	nop
 800330c:	20000534 	.word	0x20000534
 8003310:	e000ed04 	.word	0xe000ed04

08003314 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800331a:	2300      	movs	r3, #0
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	e00c      	b.n	800333a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4a12      	ldr	r2, [pc, #72]	; (8003374 <prvInitialiseTaskLists+0x60>)
 800332c:	4413      	add	r3, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fb20 	bl	8002974 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3301      	adds	r3, #1
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b06      	cmp	r3, #6
 800333e:	d9ef      	bls.n	8003320 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003340:	480d      	ldr	r0, [pc, #52]	; (8003378 <prvInitialiseTaskLists+0x64>)
 8003342:	f7ff fb17 	bl	8002974 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003346:	480d      	ldr	r0, [pc, #52]	; (800337c <prvInitialiseTaskLists+0x68>)
 8003348:	f7ff fb14 	bl	8002974 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800334c:	480c      	ldr	r0, [pc, #48]	; (8003380 <prvInitialiseTaskLists+0x6c>)
 800334e:	f7ff fb11 	bl	8002974 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003352:	480c      	ldr	r0, [pc, #48]	; (8003384 <prvInitialiseTaskLists+0x70>)
 8003354:	f7ff fb0e 	bl	8002974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003358:	480b      	ldr	r0, [pc, #44]	; (8003388 <prvInitialiseTaskLists+0x74>)
 800335a:	f7ff fb0b 	bl	8002974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <prvInitialiseTaskLists+0x78>)
 8003360:	4a05      	ldr	r2, [pc, #20]	; (8003378 <prvInitialiseTaskLists+0x64>)
 8003362:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <prvInitialiseTaskLists+0x7c>)
 8003366:	4a05      	ldr	r2, [pc, #20]	; (800337c <prvInitialiseTaskLists+0x68>)
 8003368:	601a      	str	r2, [r3, #0]
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000534 	.word	0x20000534
 8003378:	200005c0 	.word	0x200005c0
 800337c:	200005d4 	.word	0x200005d4
 8003380:	200005f0 	.word	0x200005f0
 8003384:	20000604 	.word	0x20000604
 8003388:	2000061c 	.word	0x2000061c
 800338c:	200005e8 	.word	0x200005e8
 8003390:	200005ec 	.word	0x200005ec

08003394 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800339a:	e019      	b.n	80033d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800339c:	f000 f9d6 	bl	800374c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <prvCheckTasksWaitingTermination+0x50>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fb67 	bl	8002a80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <prvCheckTasksWaitingTermination+0x54>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	4a0b      	ldr	r2, [pc, #44]	; (80033e8 <prvCheckTasksWaitingTermination+0x54>)
 80033ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <prvCheckTasksWaitingTermination+0x58>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <prvCheckTasksWaitingTermination+0x58>)
 80033c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80033c6:	f000 f9f1 	bl	80037ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f810 	bl	80033f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <prvCheckTasksWaitingTermination+0x58>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e1      	bne.n	800339c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000604 	.word	0x20000604
 80033e8:	20000630 	.word	0x20000630
 80033ec:	20000618 	.word	0x20000618

080033f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	334c      	adds	r3, #76	; 0x4c
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 fbed 	bl	8004bdc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003408:	2b00      	cmp	r3, #0
 800340a:	d108      	bne.n	800341e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fb21 	bl	8003a58 <vPortFree>
				vPortFree( pxTCB );
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fb1e 	bl	8003a58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800341c:	e018      	b.n	8003450 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003424:	2b01      	cmp	r3, #1
 8003426:	d103      	bne.n	8003430 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fb15 	bl	8003a58 <vPortFree>
	}
 800342e:	e00f      	b.n	8003450 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003436:	2b02      	cmp	r3, #2
 8003438:	d00a      	beq.n	8003450 <prvDeleteTCB+0x60>
	__asm volatile
 800343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	60fb      	str	r3, [r7, #12]
}
 800344c:	bf00      	nop
 800344e:	e7fe      	b.n	800344e <prvDeleteTCB+0x5e>
	}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800345e:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <prvResetNextTaskUnblockTime+0x40>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <prvResetNextTaskUnblockTime+0x14>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <prvResetNextTaskUnblockTime+0x16>
 800346c:	2300      	movs	r3, #0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d004      	beq.n	800347c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <prvResetNextTaskUnblockTime+0x44>)
 8003474:	f04f 32ff 	mov.w	r2, #4294967295
 8003478:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800347a:	e008      	b.n	800348e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <prvResetNextTaskUnblockTime+0x40>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a04      	ldr	r2, [pc, #16]	; (800349c <prvResetNextTaskUnblockTime+0x44>)
 800348c:	6013      	str	r3, [r2, #0]
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	200005e8 	.word	0x200005e8
 800349c:	20000650 	.word	0x20000650

080034a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034aa:	4b29      	ldr	r3, [pc, #164]	; (8003550 <prvAddCurrentTaskToDelayedList+0xb0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034b0:	4b28      	ldr	r3, [pc, #160]	; (8003554 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3304      	adds	r3, #4
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fae2 	bl	8002a80 <uxListRemove>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10b      	bne.n	80034da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	2201      	movs	r2, #1
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43da      	mvns	r2, r3
 80034d0:	4b21      	ldr	r3, [pc, #132]	; (8003558 <prvAddCurrentTaskToDelayedList+0xb8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4013      	ands	r3, r2
 80034d6:	4a20      	ldr	r2, [pc, #128]	; (8003558 <prvAddCurrentTaskToDelayedList+0xb8>)
 80034d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d10a      	bne.n	80034f8 <prvAddCurrentTaskToDelayedList+0x58>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034e8:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	481a      	ldr	r0, [pc, #104]	; (800355c <prvAddCurrentTaskToDelayedList+0xbc>)
 80034f2:	f7ff fa6a 	bl	80029ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034f6:	e026      	b.n	8003546 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003500:	4b14      	ldr	r3, [pc, #80]	; (8003554 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	429a      	cmp	r2, r3
 800350e:	d209      	bcs.n	8003524 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003510:	4b13      	ldr	r3, [pc, #76]	; (8003560 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3304      	adds	r3, #4
 800351a:	4619      	mov	r1, r3
 800351c:	4610      	mov	r0, r2
 800351e:	f7ff fa77 	bl	8002a10 <vListInsert>
}
 8003522:	e010      	b.n	8003546 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <prvAddCurrentTaskToDelayedList+0xb4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3304      	adds	r3, #4
 800352e:	4619      	mov	r1, r3
 8003530:	4610      	mov	r0, r2
 8003532:	f7ff fa6d 	bl	8002a10 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003536:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	d202      	bcs.n	8003546 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003540:	4a09      	ldr	r2, [pc, #36]	; (8003568 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	6013      	str	r3, [r2, #0]
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000634 	.word	0x20000634
 8003554:	20000530 	.word	0x20000530
 8003558:	20000638 	.word	0x20000638
 800355c:	2000061c 	.word	0x2000061c
 8003560:	200005ec 	.word	0x200005ec
 8003564:	200005e8 	.word	0x200005e8
 8003568:	20000650 	.word	0x20000650

0800356c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	3b04      	subs	r3, #4
 800357c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3b04      	subs	r3, #4
 800358a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f023 0201 	bic.w	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3b04      	subs	r3, #4
 800359a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800359c:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <pxPortInitialiseStack+0x54>)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3b14      	subs	r3, #20
 80035a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3b20      	subs	r3, #32
 80035b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80035b4:	68fb      	ldr	r3, [r7, #12]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	080035c5 	.word	0x080035c5

080035c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <prvTaskExitError+0x54>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d00a      	beq.n	80035ee <prvTaskExitError+0x2a>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	60fb      	str	r3, [r7, #12]
}
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <prvTaskExitError+0x28>
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	60bb      	str	r3, [r7, #8]
}
 8003600:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003602:	bf00      	nop
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0fc      	beq.n	8003604 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	2000000c 	.word	0x2000000c
 800361c:	00000000 	.word	0x00000000

08003620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <pxCurrentTCBConst2>)
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	6808      	ldr	r0, [r1, #0]
 8003626:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800362a:	f380 8809 	msr	PSP, r0
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f380 8811 	msr	BASEPRI, r0
 800363a:	f04e 0e0d 	orr.w	lr, lr, #13
 800363e:	4770      	bx	lr

08003640 <pxCurrentTCBConst2>:
 8003640:	20000530 	.word	0x20000530
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop

08003648 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003648:	4806      	ldr	r0, [pc, #24]	; (8003664 <prvPortStartFirstTask+0x1c>)
 800364a:	6800      	ldr	r0, [r0, #0]
 800364c:	6800      	ldr	r0, [r0, #0]
 800364e:	f380 8808 	msr	MSP, r0
 8003652:	b662      	cpsie	i
 8003654:	b661      	cpsie	f
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	df00      	svc	0
 8003660:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003662:	bf00      	nop
 8003664:	e000ed08 	.word	0xe000ed08

08003668 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800366e:	4b32      	ldr	r3, [pc, #200]	; (8003738 <xPortStartScheduler+0xd0>)
 8003670:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	22ff      	movs	r2, #255	; 0xff
 800367e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <xPortStartScheduler+0xd4>)
 8003694:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <xPortStartScheduler+0xd8>)
 8003698:	2207      	movs	r2, #7
 800369a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800369c:	e009      	b.n	80036b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800369e:	4b28      	ldr	r3, [pc, #160]	; (8003740 <xPortStartScheduler+0xd8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	4a26      	ldr	r2, [pc, #152]	; (8003740 <xPortStartScheduler+0xd8>)
 80036a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ba:	2b80      	cmp	r3, #128	; 0x80
 80036bc:	d0ef      	beq.n	800369e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <xPortStartScheduler+0xd8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f1c3 0307 	rsb	r3, r3, #7
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d00a      	beq.n	80036e0 <xPortStartScheduler+0x78>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	60bb      	str	r3, [r7, #8]
}
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80036e0:	4b17      	ldr	r3, [pc, #92]	; (8003740 <xPortStartScheduler+0xd8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	4a16      	ldr	r2, [pc, #88]	; (8003740 <xPortStartScheduler+0xd8>)
 80036e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <xPortStartScheduler+0xd8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036f2:	4a13      	ldr	r2, [pc, #76]	; (8003740 <xPortStartScheduler+0xd8>)
 80036f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <xPortStartScheduler+0xdc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a10      	ldr	r2, [pc, #64]	; (8003744 <xPortStartScheduler+0xdc>)
 8003704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003708:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <xPortStartScheduler+0xdc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a0d      	ldr	r2, [pc, #52]	; (8003744 <xPortStartScheduler+0xdc>)
 8003710:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003714:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003716:	f000 f8b9 	bl	800388c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <xPortStartScheduler+0xe0>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003720:	f7ff ff92 	bl	8003648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003724:	f7ff fd7c 	bl	8003220 <vTaskSwitchContext>
	prvTaskExitError();
 8003728:	f7ff ff4c 	bl	80035c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	e000e400 	.word	0xe000e400
 800373c:	2000065c 	.word	0x2000065c
 8003740:	20000660 	.word	0x20000660
 8003744:	e000ed20 	.word	0xe000ed20
 8003748:	2000000c 	.word	0x2000000c

0800374c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
	__asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	607b      	str	r3, [r7, #4]
}
 8003764:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <vPortEnterCritical+0x58>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3301      	adds	r3, #1
 800376c:	4a0d      	ldr	r2, [pc, #52]	; (80037a4 <vPortEnterCritical+0x58>)
 800376e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <vPortEnterCritical+0x58>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d10f      	bne.n	8003798 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <vPortEnterCritical+0x5c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <vPortEnterCritical+0x4c>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	603b      	str	r3, [r7, #0]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <vPortEnterCritical+0x4a>
	}
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	2000000c 	.word	0x2000000c
 80037a8:	e000ed04 	.word	0xe000ed04

080037ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <vPortExitCritical+0x4c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10a      	bne.n	80037d0 <vPortExitCritical+0x24>
	__asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	607b      	str	r3, [r7, #4]
}
 80037cc:	bf00      	nop
 80037ce:	e7fe      	b.n	80037ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <vPortExitCritical+0x4c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <vPortExitCritical+0x4c>)
 80037d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <vPortExitCritical+0x4c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d105      	bne.n	80037ee <vPortExitCritical+0x42>
 80037e2:	2300      	movs	r3, #0
 80037e4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	2000000c 	.word	0x2000000c
 80037fc:	00000000 	.word	0x00000000

08003800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003800:	f3ef 8009 	mrs	r0, PSP
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <pxCurrentTCBConst>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003810:	6010      	str	r0, [r2, #0]
 8003812:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003816:	f04f 0050 	mov.w	r0, #80	; 0x50
 800381a:	f380 8811 	msr	BASEPRI, r0
 800381e:	f7ff fcff 	bl	8003220 <vTaskSwitchContext>
 8003822:	f04f 0000 	mov.w	r0, #0
 8003826:	f380 8811 	msr	BASEPRI, r0
 800382a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	6808      	ldr	r0, [r1, #0]
 8003832:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003836:	f380 8809 	msr	PSP, r0
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	4770      	bx	lr

08003840 <pxCurrentTCBConst>:
 8003840:	20000530 	.word	0x20000530
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop

08003848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	607b      	str	r3, [r7, #4]
}
 8003860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003862:	f7ff fc1f 	bl	80030a4 <xTaskIncrementTick>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <SysTick_Handler+0x40>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	2300      	movs	r3, #0
 8003876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f383 8811 	msr	BASEPRI, r3
}
 800387e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	e000ed04 	.word	0xe000ed04

0800388c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <vPortSetupTimerInterrupt+0x30>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <vPortSetupTimerInterrupt+0x34>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <vPortSetupTimerInterrupt+0x38>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <vPortSetupTimerInterrupt+0x3c>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	4a08      	ldr	r2, [pc, #32]	; (80038cc <vPortSetupTimerInterrupt+0x40>)
 80038aa:	3b01      	subs	r3, #1
 80038ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80038ae:	4b03      	ldr	r3, [pc, #12]	; (80038bc <vPortSetupTimerInterrupt+0x30>)
 80038b0:	2207      	movs	r2, #7
 80038b2:	601a      	str	r2, [r3, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	e000e010 	.word	0xe000e010
 80038c0:	e000e018 	.word	0xe000e018
 80038c4:	20000000 	.word	0x20000000
 80038c8:	10624dd3 	.word	0x10624dd3
 80038cc:	e000e014 	.word	0xe000e014

080038d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	; 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80038dc:	f7ff fb38 	bl	8002f50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038e0:	4b58      	ldr	r3, [pc, #352]	; (8003a44 <pvPortMalloc+0x174>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80038e8:	f000 f910 	bl	8003b0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038ec:	4b56      	ldr	r3, [pc, #344]	; (8003a48 <pvPortMalloc+0x178>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f040 808e 	bne.w	8003a16 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01d      	beq.n	800393c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003900:	2208      	movs	r2, #8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	2b00      	cmp	r3, #0
 8003910:	d014      	beq.n	800393c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f023 0307 	bic.w	r3, r3, #7
 8003918:	3308      	adds	r3, #8
 800391a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <pvPortMalloc+0x6c>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	617b      	str	r3, [r7, #20]
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d069      	beq.n	8003a16 <pvPortMalloc+0x146>
 8003942:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <pvPortMalloc+0x17c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d864      	bhi.n	8003a16 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800394c:	4b40      	ldr	r3, [pc, #256]	; (8003a50 <pvPortMalloc+0x180>)
 800394e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003950:	4b3f      	ldr	r3, [pc, #252]	; (8003a50 <pvPortMalloc+0x180>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003956:	e004      	b.n	8003962 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	429a      	cmp	r2, r3
 800396a:	d903      	bls.n	8003974 <pvPortMalloc+0xa4>
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f1      	bne.n	8003958 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003974:	4b33      	ldr	r3, [pc, #204]	; (8003a44 <pvPortMalloc+0x174>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397a:	429a      	cmp	r2, r3
 800397c:	d04b      	beq.n	8003a16 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2208      	movs	r2, #8
 8003984:	4413      	add	r3, r2
 8003986:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1ad2      	subs	r2, r2, r3
 8003998:	2308      	movs	r3, #8
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	429a      	cmp	r2, r3
 800399e:	d91f      	bls.n	80039e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <pvPortMalloc+0xf8>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	613b      	str	r3, [r7, #16]
}
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	1ad2      	subs	r2, r2, r3
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039da:	69b8      	ldr	r0, [r7, #24]
 80039dc:	f000 f8f8 	bl	8003bd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <pvPortMalloc+0x17c>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	4a18      	ldr	r2, [pc, #96]	; (8003a4c <pvPortMalloc+0x17c>)
 80039ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039ee:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <pvPortMalloc+0x17c>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <pvPortMalloc+0x184>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d203      	bcs.n	8003a02 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <pvPortMalloc+0x17c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <pvPortMalloc+0x184>)
 8003a00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <pvPortMalloc+0x178>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a16:	f7ff faa9 	bl	8002f6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <pvPortMalloc+0x16a>
	__asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	60fb      	str	r3, [r7, #12]
}
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <pvPortMalloc+0x168>
	return pvReturn;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3728      	adds	r7, #40	; 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	2000126c 	.word	0x2000126c
 8003a48:	20001278 	.word	0x20001278
 8003a4c:	20001270 	.word	0x20001270
 8003a50:	20001264 	.word	0x20001264
 8003a54:	20001274 	.word	0x20001274

08003a58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d048      	beq.n	8003afc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	425b      	negs	r3, r3
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4413      	add	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <vPortFree+0xac>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <vPortFree+0x44>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	60fb      	str	r3, [r7, #12]
}
 8003a98:	bf00      	nop
 8003a9a:	e7fe      	b.n	8003a9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <vPortFree+0x62>
	__asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	60bb      	str	r3, [r7, #8]
}
 8003ab6:	bf00      	nop
 8003ab8:	e7fe      	b.n	8003ab8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <vPortFree+0xac>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d019      	beq.n	8003afc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d115      	bne.n	8003afc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <vPortFree+0xac>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	401a      	ands	r2, r3
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003ae0:	f7ff fa36 	bl	8002f50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <vPortFree+0xb0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4413      	add	r3, r2
 8003aee:	4a06      	ldr	r2, [pc, #24]	; (8003b08 <vPortFree+0xb0>)
 8003af0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003af2:	6938      	ldr	r0, [r7, #16]
 8003af4:	f000 f86c 	bl	8003bd0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003af8:	f7ff fa38 	bl	8002f6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003afc:	bf00      	nop
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20001278 	.word	0x20001278
 8003b08:	20001270 	.word	0x20001270

08003b0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b18:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <prvHeapInit+0xac>)
 8003b1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00c      	beq.n	8003b40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3307      	adds	r3, #7
 8003b2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0307 	bic.w	r3, r3, #7
 8003b32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <prvHeapInit+0xac>)
 8003b3c:	4413      	add	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b44:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <prvHeapInit+0xb0>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b4a:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <prvHeapInit+0xb0>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	4413      	add	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b58:	2208      	movs	r2, #8
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0307 	bic.w	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a15      	ldr	r2, [pc, #84]	; (8003bc0 <prvHeapInit+0xb4>)
 8003b6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b6e:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <prvHeapInit+0xb4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <prvHeapInit+0xb4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <prvHeapInit+0xb4>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <prvHeapInit+0xb8>)
 8003b9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <prvHeapInit+0xbc>)
 8003ba2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <prvHeapInit+0xc0>)
 8003ba6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003baa:	601a      	str	r2, [r3, #0]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20000664 	.word	0x20000664
 8003bbc:	20001264 	.word	0x20001264
 8003bc0:	2000126c 	.word	0x2000126c
 8003bc4:	20001274 	.word	0x20001274
 8003bc8:	20001270 	.word	0x20001270
 8003bcc:	20001278 	.word	0x20001278

08003bd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003bd8:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <prvInsertBlockIntoFreeList+0xa8>)
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	e002      	b.n	8003be4 <prvInsertBlockIntoFreeList+0x14>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d8f7      	bhi.n	8003bde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d108      	bne.n	8003c12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	441a      	add	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	441a      	add	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d118      	bne.n	8003c58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <prvInsertBlockIntoFreeList+0xac>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d00d      	beq.n	8003c4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	441a      	add	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e008      	b.n	8003c60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <prvInsertBlockIntoFreeList+0xac>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e003      	b.n	8003c60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d002      	beq.n	8003c6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	20001264 	.word	0x20001264
 8003c7c:	2000126c 	.word	0x2000126c

08003c80 <__cvt>:
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c86:	461f      	mov	r7, r3
 8003c88:	bfbb      	ittet	lt
 8003c8a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003c8e:	461f      	movlt	r7, r3
 8003c90:	2300      	movge	r3, #0
 8003c92:	232d      	movlt	r3, #45	; 0x2d
 8003c94:	b088      	sub	sp, #32
 8003c96:	4614      	mov	r4, r2
 8003c98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003c9a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003c9c:	7013      	strb	r3, [r2, #0]
 8003c9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003ca0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003ca4:	f023 0820 	bic.w	r8, r3, #32
 8003ca8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cac:	d005      	beq.n	8003cba <__cvt+0x3a>
 8003cae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003cb2:	d100      	bne.n	8003cb6 <__cvt+0x36>
 8003cb4:	3501      	adds	r5, #1
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e000      	b.n	8003cbc <__cvt+0x3c>
 8003cba:	2303      	movs	r3, #3
 8003cbc:	aa07      	add	r2, sp, #28
 8003cbe:	9204      	str	r2, [sp, #16]
 8003cc0:	aa06      	add	r2, sp, #24
 8003cc2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003cc6:	e9cd 3500 	strd	r3, r5, [sp]
 8003cca:	4622      	mov	r2, r4
 8003ccc:	463b      	mov	r3, r7
 8003cce:	f001 f8eb 	bl	8004ea8 <_dtoa_r>
 8003cd2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003cd6:	4606      	mov	r6, r0
 8003cd8:	d102      	bne.n	8003ce0 <__cvt+0x60>
 8003cda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003cdc:	07db      	lsls	r3, r3, #31
 8003cde:	d522      	bpl.n	8003d26 <__cvt+0xa6>
 8003ce0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ce4:	eb06 0905 	add.w	r9, r6, r5
 8003ce8:	d110      	bne.n	8003d0c <__cvt+0x8c>
 8003cea:	7833      	ldrb	r3, [r6, #0]
 8003cec:	2b30      	cmp	r3, #48	; 0x30
 8003cee:	d10a      	bne.n	8003d06 <__cvt+0x86>
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	4639      	mov	r1, r7
 8003cf8:	f7fc fe56 	bl	80009a8 <__aeabi_dcmpeq>
 8003cfc:	b918      	cbnz	r0, 8003d06 <__cvt+0x86>
 8003cfe:	f1c5 0501 	rsb	r5, r5, #1
 8003d02:	f8ca 5000 	str.w	r5, [sl]
 8003d06:	f8da 3000 	ldr.w	r3, [sl]
 8003d0a:	4499      	add	r9, r3
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2300      	movs	r3, #0
 8003d10:	4620      	mov	r0, r4
 8003d12:	4639      	mov	r1, r7
 8003d14:	f7fc fe48 	bl	80009a8 <__aeabi_dcmpeq>
 8003d18:	b108      	cbz	r0, 8003d1e <__cvt+0x9e>
 8003d1a:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d1e:	2230      	movs	r2, #48	; 0x30
 8003d20:	9b07      	ldr	r3, [sp, #28]
 8003d22:	454b      	cmp	r3, r9
 8003d24:	d307      	bcc.n	8003d36 <__cvt+0xb6>
 8003d26:	4630      	mov	r0, r6
 8003d28:	9b07      	ldr	r3, [sp, #28]
 8003d2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003d2c:	1b9b      	subs	r3, r3, r6
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	b008      	add	sp, #32
 8003d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d36:	1c59      	adds	r1, r3, #1
 8003d38:	9107      	str	r1, [sp, #28]
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	e7f0      	b.n	8003d20 <__cvt+0xa0>

08003d3e <__exponent>:
 8003d3e:	4603      	mov	r3, r0
 8003d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d42:	2900      	cmp	r1, #0
 8003d44:	f803 2b02 	strb.w	r2, [r3], #2
 8003d48:	bfb6      	itet	lt
 8003d4a:	222d      	movlt	r2, #45	; 0x2d
 8003d4c:	222b      	movge	r2, #43	; 0x2b
 8003d4e:	4249      	neglt	r1, r1
 8003d50:	2909      	cmp	r1, #9
 8003d52:	7042      	strb	r2, [r0, #1]
 8003d54:	dd2a      	ble.n	8003dac <__exponent+0x6e>
 8003d56:	f10d 0207 	add.w	r2, sp, #7
 8003d5a:	4617      	mov	r7, r2
 8003d5c:	260a      	movs	r6, #10
 8003d5e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003d62:	4694      	mov	ip, r2
 8003d64:	fb06 1415 	mls	r4, r6, r5, r1
 8003d68:	3430      	adds	r4, #48	; 0x30
 8003d6a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003d6e:	460c      	mov	r4, r1
 8003d70:	2c63      	cmp	r4, #99	; 0x63
 8003d72:	4629      	mov	r1, r5
 8003d74:	f102 32ff 	add.w	r2, r2, #4294967295
 8003d78:	dcf1      	bgt.n	8003d5e <__exponent+0x20>
 8003d7a:	3130      	adds	r1, #48	; 0x30
 8003d7c:	f1ac 0402 	sub.w	r4, ip, #2
 8003d80:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003d84:	4622      	mov	r2, r4
 8003d86:	1c41      	adds	r1, r0, #1
 8003d88:	42ba      	cmp	r2, r7
 8003d8a:	d30a      	bcc.n	8003da2 <__exponent+0x64>
 8003d8c:	f10d 0209 	add.w	r2, sp, #9
 8003d90:	eba2 020c 	sub.w	r2, r2, ip
 8003d94:	42bc      	cmp	r4, r7
 8003d96:	bf88      	it	hi
 8003d98:	2200      	movhi	r2, #0
 8003d9a:	4413      	add	r3, r2
 8003d9c:	1a18      	subs	r0, r3, r0
 8003d9e:	b003      	add	sp, #12
 8003da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003da6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003daa:	e7ed      	b.n	8003d88 <__exponent+0x4a>
 8003dac:	2330      	movs	r3, #48	; 0x30
 8003dae:	3130      	adds	r1, #48	; 0x30
 8003db0:	7083      	strb	r3, [r0, #2]
 8003db2:	70c1      	strb	r1, [r0, #3]
 8003db4:	1d03      	adds	r3, r0, #4
 8003db6:	e7f1      	b.n	8003d9c <__exponent+0x5e>

08003db8 <_printf_float>:
 8003db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dbc:	b091      	sub	sp, #68	; 0x44
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003dc4:	4616      	mov	r6, r2
 8003dc6:	461f      	mov	r7, r3
 8003dc8:	4605      	mov	r5, r0
 8003dca:	f000 fef3 	bl	8004bb4 <_localeconv_r>
 8003dce:	6803      	ldr	r3, [r0, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd4:	f7fc f9bc 	bl	8000150 <strlen>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	930e      	str	r3, [sp, #56]	; 0x38
 8003ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8003de0:	900a      	str	r0, [sp, #40]	; 0x28
 8003de2:	3307      	adds	r3, #7
 8003de4:	f023 0307 	bic.w	r3, r3, #7
 8003de8:	f103 0208 	add.w	r2, r3, #8
 8003dec:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003df0:	f8d4 b000 	ldr.w	fp, [r4]
 8003df4:	f8c8 2000 	str.w	r2, [r8]
 8003df8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003dfc:	4652      	mov	r2, sl
 8003dfe:	4643      	mov	r3, r8
 8003e00:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e04:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003e08:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0e:	4650      	mov	r0, sl
 8003e10:	4b9c      	ldr	r3, [pc, #624]	; (8004084 <_printf_float+0x2cc>)
 8003e12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e14:	f7fc fdfa 	bl	8000a0c <__aeabi_dcmpun>
 8003e18:	bb70      	cbnz	r0, 8003e78 <_printf_float+0xc0>
 8003e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1e:	4650      	mov	r0, sl
 8003e20:	4b98      	ldr	r3, [pc, #608]	; (8004084 <_printf_float+0x2cc>)
 8003e22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e24:	f7fc fdd4 	bl	80009d0 <__aeabi_dcmple>
 8003e28:	bb30      	cbnz	r0, 8003e78 <_printf_float+0xc0>
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	4650      	mov	r0, sl
 8003e30:	4641      	mov	r1, r8
 8003e32:	f7fc fdc3 	bl	80009bc <__aeabi_dcmplt>
 8003e36:	b110      	cbz	r0, 8003e3e <_printf_float+0x86>
 8003e38:	232d      	movs	r3, #45	; 0x2d
 8003e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e3e:	4a92      	ldr	r2, [pc, #584]	; (8004088 <_printf_float+0x2d0>)
 8003e40:	4b92      	ldr	r3, [pc, #584]	; (800408c <_printf_float+0x2d4>)
 8003e42:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003e46:	bf94      	ite	ls
 8003e48:	4690      	movls	r8, r2
 8003e4a:	4698      	movhi	r8, r3
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	f04f 0a00 	mov.w	sl, #0
 8003e52:	6123      	str	r3, [r4, #16]
 8003e54:	f02b 0304 	bic.w	r3, fp, #4
 8003e58:	6023      	str	r3, [r4, #0]
 8003e5a:	4633      	mov	r3, r6
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	4628      	mov	r0, r5
 8003e60:	9700      	str	r7, [sp, #0]
 8003e62:	aa0f      	add	r2, sp, #60	; 0x3c
 8003e64:	f000 f9d6 	bl	8004214 <_printf_common>
 8003e68:	3001      	adds	r0, #1
 8003e6a:	f040 8090 	bne.w	8003f8e <_printf_float+0x1d6>
 8003e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e72:	b011      	add	sp, #68	; 0x44
 8003e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e78:	4652      	mov	r2, sl
 8003e7a:	4643      	mov	r3, r8
 8003e7c:	4650      	mov	r0, sl
 8003e7e:	4641      	mov	r1, r8
 8003e80:	f7fc fdc4 	bl	8000a0c <__aeabi_dcmpun>
 8003e84:	b148      	cbz	r0, 8003e9a <_printf_float+0xe2>
 8003e86:	f1b8 0f00 	cmp.w	r8, #0
 8003e8a:	bfb8      	it	lt
 8003e8c:	232d      	movlt	r3, #45	; 0x2d
 8003e8e:	4a80      	ldr	r2, [pc, #512]	; (8004090 <_printf_float+0x2d8>)
 8003e90:	bfb8      	it	lt
 8003e92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003e96:	4b7f      	ldr	r3, [pc, #508]	; (8004094 <_printf_float+0x2dc>)
 8003e98:	e7d3      	b.n	8003e42 <_printf_float+0x8a>
 8003e9a:	6863      	ldr	r3, [r4, #4]
 8003e9c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	d142      	bne.n	8003f2a <_printf_float+0x172>
 8003ea4:	2306      	movs	r3, #6
 8003ea6:	6063      	str	r3, [r4, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	9206      	str	r2, [sp, #24]
 8003eac:	aa0e      	add	r2, sp, #56	; 0x38
 8003eae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003eb2:	aa0d      	add	r2, sp, #52	; 0x34
 8003eb4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003eb8:	9203      	str	r2, [sp, #12]
 8003eba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003ebe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	6863      	ldr	r3, [r4, #4]
 8003ec6:	4652      	mov	r2, sl
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	4628      	mov	r0, r5
 8003ecc:	4643      	mov	r3, r8
 8003ece:	910b      	str	r1, [sp, #44]	; 0x2c
 8003ed0:	f7ff fed6 	bl	8003c80 <__cvt>
 8003ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ed6:	4680      	mov	r8, r0
 8003ed8:	2947      	cmp	r1, #71	; 0x47
 8003eda:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003edc:	d108      	bne.n	8003ef0 <_printf_float+0x138>
 8003ede:	1cc8      	adds	r0, r1, #3
 8003ee0:	db02      	blt.n	8003ee8 <_printf_float+0x130>
 8003ee2:	6863      	ldr	r3, [r4, #4]
 8003ee4:	4299      	cmp	r1, r3
 8003ee6:	dd40      	ble.n	8003f6a <_printf_float+0x1b2>
 8003ee8:	f1a9 0902 	sub.w	r9, r9, #2
 8003eec:	fa5f f989 	uxtb.w	r9, r9
 8003ef0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003ef4:	d81f      	bhi.n	8003f36 <_printf_float+0x17e>
 8003ef6:	464a      	mov	r2, r9
 8003ef8:	3901      	subs	r1, #1
 8003efa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003efe:	910d      	str	r1, [sp, #52]	; 0x34
 8003f00:	f7ff ff1d 	bl	8003d3e <__exponent>
 8003f04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f06:	4682      	mov	sl, r0
 8003f08:	1813      	adds	r3, r2, r0
 8003f0a:	2a01      	cmp	r2, #1
 8003f0c:	6123      	str	r3, [r4, #16]
 8003f0e:	dc02      	bgt.n	8003f16 <_printf_float+0x15e>
 8003f10:	6822      	ldr	r2, [r4, #0]
 8003f12:	07d2      	lsls	r2, r2, #31
 8003f14:	d501      	bpl.n	8003f1a <_printf_float+0x162>
 8003f16:	3301      	adds	r3, #1
 8003f18:	6123      	str	r3, [r4, #16]
 8003f1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d09b      	beq.n	8003e5a <_printf_float+0xa2>
 8003f22:	232d      	movs	r3, #45	; 0x2d
 8003f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f28:	e797      	b.n	8003e5a <_printf_float+0xa2>
 8003f2a:	2947      	cmp	r1, #71	; 0x47
 8003f2c:	d1bc      	bne.n	8003ea8 <_printf_float+0xf0>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1ba      	bne.n	8003ea8 <_printf_float+0xf0>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e7b7      	b.n	8003ea6 <_printf_float+0xee>
 8003f36:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003f3a:	d118      	bne.n	8003f6e <_printf_float+0x1b6>
 8003f3c:	2900      	cmp	r1, #0
 8003f3e:	6863      	ldr	r3, [r4, #4]
 8003f40:	dd0b      	ble.n	8003f5a <_printf_float+0x1a2>
 8003f42:	6121      	str	r1, [r4, #16]
 8003f44:	b913      	cbnz	r3, 8003f4c <_printf_float+0x194>
 8003f46:	6822      	ldr	r2, [r4, #0]
 8003f48:	07d0      	lsls	r0, r2, #31
 8003f4a:	d502      	bpl.n	8003f52 <_printf_float+0x19a>
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	440b      	add	r3, r1
 8003f50:	6123      	str	r3, [r4, #16]
 8003f52:	f04f 0a00 	mov.w	sl, #0
 8003f56:	65a1      	str	r1, [r4, #88]	; 0x58
 8003f58:	e7df      	b.n	8003f1a <_printf_float+0x162>
 8003f5a:	b913      	cbnz	r3, 8003f62 <_printf_float+0x1aa>
 8003f5c:	6822      	ldr	r2, [r4, #0]
 8003f5e:	07d2      	lsls	r2, r2, #31
 8003f60:	d501      	bpl.n	8003f66 <_printf_float+0x1ae>
 8003f62:	3302      	adds	r3, #2
 8003f64:	e7f4      	b.n	8003f50 <_printf_float+0x198>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e7f2      	b.n	8003f50 <_printf_float+0x198>
 8003f6a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f70:	4299      	cmp	r1, r3
 8003f72:	db05      	blt.n	8003f80 <_printf_float+0x1c8>
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	6121      	str	r1, [r4, #16]
 8003f78:	07d8      	lsls	r0, r3, #31
 8003f7a:	d5ea      	bpl.n	8003f52 <_printf_float+0x19a>
 8003f7c:	1c4b      	adds	r3, r1, #1
 8003f7e:	e7e7      	b.n	8003f50 <_printf_float+0x198>
 8003f80:	2900      	cmp	r1, #0
 8003f82:	bfcc      	ite	gt
 8003f84:	2201      	movgt	r2, #1
 8003f86:	f1c1 0202 	rsble	r2, r1, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	e7e0      	b.n	8003f50 <_printf_float+0x198>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	055a      	lsls	r2, r3, #21
 8003f92:	d407      	bmi.n	8003fa4 <_printf_float+0x1ec>
 8003f94:	6923      	ldr	r3, [r4, #16]
 8003f96:	4642      	mov	r2, r8
 8003f98:	4631      	mov	r1, r6
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	47b8      	blx	r7
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	d12b      	bne.n	8003ffa <_printf_float+0x242>
 8003fa2:	e764      	b.n	8003e6e <_printf_float+0xb6>
 8003fa4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003fa8:	f240 80dd 	bls.w	8004166 <_printf_float+0x3ae>
 8003fac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f7fc fcf8 	bl	80009a8 <__aeabi_dcmpeq>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	d033      	beq.n	8004024 <_printf_float+0x26c>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	4a35      	ldr	r2, [pc, #212]	; (8004098 <_printf_float+0x2e0>)
 8003fc4:	47b8      	blx	r7
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	f43f af51 	beq.w	8003e6e <_printf_float+0xb6>
 8003fcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	db02      	blt.n	8003fda <_printf_float+0x222>
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	07d8      	lsls	r0, r3, #31
 8003fd8:	d50f      	bpl.n	8003ffa <_printf_float+0x242>
 8003fda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fde:	4631      	mov	r1, r6
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	47b8      	blx	r7
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	f43f af42 	beq.w	8003e6e <_printf_float+0xb6>
 8003fea:	f04f 0800 	mov.w	r8, #0
 8003fee:	f104 091a 	add.w	r9, r4, #26
 8003ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	4543      	cmp	r3, r8
 8003ff8:	dc09      	bgt.n	800400e <_printf_float+0x256>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	079b      	lsls	r3, r3, #30
 8003ffe:	f100 8104 	bmi.w	800420a <_printf_float+0x452>
 8004002:	68e0      	ldr	r0, [r4, #12]
 8004004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004006:	4298      	cmp	r0, r3
 8004008:	bfb8      	it	lt
 800400a:	4618      	movlt	r0, r3
 800400c:	e731      	b.n	8003e72 <_printf_float+0xba>
 800400e:	2301      	movs	r3, #1
 8004010:	464a      	mov	r2, r9
 8004012:	4631      	mov	r1, r6
 8004014:	4628      	mov	r0, r5
 8004016:	47b8      	blx	r7
 8004018:	3001      	adds	r0, #1
 800401a:	f43f af28 	beq.w	8003e6e <_printf_float+0xb6>
 800401e:	f108 0801 	add.w	r8, r8, #1
 8004022:	e7e6      	b.n	8003ff2 <_printf_float+0x23a>
 8004024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004026:	2b00      	cmp	r3, #0
 8004028:	dc38      	bgt.n	800409c <_printf_float+0x2e4>
 800402a:	2301      	movs	r3, #1
 800402c:	4631      	mov	r1, r6
 800402e:	4628      	mov	r0, r5
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <_printf_float+0x2e0>)
 8004032:	47b8      	blx	r7
 8004034:	3001      	adds	r0, #1
 8004036:	f43f af1a 	beq.w	8003e6e <_printf_float+0xb6>
 800403a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800403e:	4313      	orrs	r3, r2
 8004040:	d102      	bne.n	8004048 <_printf_float+0x290>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	07d9      	lsls	r1, r3, #31
 8004046:	d5d8      	bpl.n	8003ffa <_printf_float+0x242>
 8004048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800404c:	4631      	mov	r1, r6
 800404e:	4628      	mov	r0, r5
 8004050:	47b8      	blx	r7
 8004052:	3001      	adds	r0, #1
 8004054:	f43f af0b 	beq.w	8003e6e <_printf_float+0xb6>
 8004058:	f04f 0900 	mov.w	r9, #0
 800405c:	f104 0a1a 	add.w	sl, r4, #26
 8004060:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004062:	425b      	negs	r3, r3
 8004064:	454b      	cmp	r3, r9
 8004066:	dc01      	bgt.n	800406c <_printf_float+0x2b4>
 8004068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800406a:	e794      	b.n	8003f96 <_printf_float+0x1de>
 800406c:	2301      	movs	r3, #1
 800406e:	4652      	mov	r2, sl
 8004070:	4631      	mov	r1, r6
 8004072:	4628      	mov	r0, r5
 8004074:	47b8      	blx	r7
 8004076:	3001      	adds	r0, #1
 8004078:	f43f aef9 	beq.w	8003e6e <_printf_float+0xb6>
 800407c:	f109 0901 	add.w	r9, r9, #1
 8004080:	e7ee      	b.n	8004060 <_printf_float+0x2a8>
 8004082:	bf00      	nop
 8004084:	7fefffff 	.word	0x7fefffff
 8004088:	080085fe 	.word	0x080085fe
 800408c:	08008602 	.word	0x08008602
 8004090:	08008606 	.word	0x08008606
 8004094:	0800860a 	.word	0x0800860a
 8004098:	0800860e 	.word	0x0800860e
 800409c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800409e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040a0:	429a      	cmp	r2, r3
 80040a2:	bfa8      	it	ge
 80040a4:	461a      	movge	r2, r3
 80040a6:	2a00      	cmp	r2, #0
 80040a8:	4691      	mov	r9, r2
 80040aa:	dc37      	bgt.n	800411c <_printf_float+0x364>
 80040ac:	f04f 0b00 	mov.w	fp, #0
 80040b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040b4:	f104 021a 	add.w	r2, r4, #26
 80040b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80040bc:	ebaa 0309 	sub.w	r3, sl, r9
 80040c0:	455b      	cmp	r3, fp
 80040c2:	dc33      	bgt.n	800412c <_printf_float+0x374>
 80040c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80040c8:	429a      	cmp	r2, r3
 80040ca:	db3b      	blt.n	8004144 <_printf_float+0x38c>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	07da      	lsls	r2, r3, #31
 80040d0:	d438      	bmi.n	8004144 <_printf_float+0x38c>
 80040d2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80040d6:	eba2 0903 	sub.w	r9, r2, r3
 80040da:	eba2 020a 	sub.w	r2, r2, sl
 80040de:	4591      	cmp	r9, r2
 80040e0:	bfa8      	it	ge
 80040e2:	4691      	movge	r9, r2
 80040e4:	f1b9 0f00 	cmp.w	r9, #0
 80040e8:	dc34      	bgt.n	8004154 <_printf_float+0x39c>
 80040ea:	f04f 0800 	mov.w	r8, #0
 80040ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040f2:	f104 0a1a 	add.w	sl, r4, #26
 80040f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	eba3 0309 	sub.w	r3, r3, r9
 8004100:	4543      	cmp	r3, r8
 8004102:	f77f af7a 	ble.w	8003ffa <_printf_float+0x242>
 8004106:	2301      	movs	r3, #1
 8004108:	4652      	mov	r2, sl
 800410a:	4631      	mov	r1, r6
 800410c:	4628      	mov	r0, r5
 800410e:	47b8      	blx	r7
 8004110:	3001      	adds	r0, #1
 8004112:	f43f aeac 	beq.w	8003e6e <_printf_float+0xb6>
 8004116:	f108 0801 	add.w	r8, r8, #1
 800411a:	e7ec      	b.n	80040f6 <_printf_float+0x33e>
 800411c:	4613      	mov	r3, r2
 800411e:	4631      	mov	r1, r6
 8004120:	4642      	mov	r2, r8
 8004122:	4628      	mov	r0, r5
 8004124:	47b8      	blx	r7
 8004126:	3001      	adds	r0, #1
 8004128:	d1c0      	bne.n	80040ac <_printf_float+0x2f4>
 800412a:	e6a0      	b.n	8003e6e <_printf_float+0xb6>
 800412c:	2301      	movs	r3, #1
 800412e:	4631      	mov	r1, r6
 8004130:	4628      	mov	r0, r5
 8004132:	920b      	str	r2, [sp, #44]	; 0x2c
 8004134:	47b8      	blx	r7
 8004136:	3001      	adds	r0, #1
 8004138:	f43f ae99 	beq.w	8003e6e <_printf_float+0xb6>
 800413c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800413e:	f10b 0b01 	add.w	fp, fp, #1
 8004142:	e7b9      	b.n	80040b8 <_printf_float+0x300>
 8004144:	4631      	mov	r1, r6
 8004146:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800414a:	4628      	mov	r0, r5
 800414c:	47b8      	blx	r7
 800414e:	3001      	adds	r0, #1
 8004150:	d1bf      	bne.n	80040d2 <_printf_float+0x31a>
 8004152:	e68c      	b.n	8003e6e <_printf_float+0xb6>
 8004154:	464b      	mov	r3, r9
 8004156:	4631      	mov	r1, r6
 8004158:	4628      	mov	r0, r5
 800415a:	eb08 020a 	add.w	r2, r8, sl
 800415e:	47b8      	blx	r7
 8004160:	3001      	adds	r0, #1
 8004162:	d1c2      	bne.n	80040ea <_printf_float+0x332>
 8004164:	e683      	b.n	8003e6e <_printf_float+0xb6>
 8004166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004168:	2a01      	cmp	r2, #1
 800416a:	dc01      	bgt.n	8004170 <_printf_float+0x3b8>
 800416c:	07db      	lsls	r3, r3, #31
 800416e:	d539      	bpl.n	80041e4 <_printf_float+0x42c>
 8004170:	2301      	movs	r3, #1
 8004172:	4642      	mov	r2, r8
 8004174:	4631      	mov	r1, r6
 8004176:	4628      	mov	r0, r5
 8004178:	47b8      	blx	r7
 800417a:	3001      	adds	r0, #1
 800417c:	f43f ae77 	beq.w	8003e6e <_printf_float+0xb6>
 8004180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004184:	4631      	mov	r1, r6
 8004186:	4628      	mov	r0, r5
 8004188:	47b8      	blx	r7
 800418a:	3001      	adds	r0, #1
 800418c:	f43f ae6f 	beq.w	8003e6e <_printf_float+0xb6>
 8004190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004194:	2200      	movs	r2, #0
 8004196:	2300      	movs	r3, #0
 8004198:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800419c:	f7fc fc04 	bl	80009a8 <__aeabi_dcmpeq>
 80041a0:	b9d8      	cbnz	r0, 80041da <_printf_float+0x422>
 80041a2:	f109 33ff 	add.w	r3, r9, #4294967295
 80041a6:	f108 0201 	add.w	r2, r8, #1
 80041aa:	4631      	mov	r1, r6
 80041ac:	4628      	mov	r0, r5
 80041ae:	47b8      	blx	r7
 80041b0:	3001      	adds	r0, #1
 80041b2:	d10e      	bne.n	80041d2 <_printf_float+0x41a>
 80041b4:	e65b      	b.n	8003e6e <_printf_float+0xb6>
 80041b6:	2301      	movs	r3, #1
 80041b8:	464a      	mov	r2, r9
 80041ba:	4631      	mov	r1, r6
 80041bc:	4628      	mov	r0, r5
 80041be:	47b8      	blx	r7
 80041c0:	3001      	adds	r0, #1
 80041c2:	f43f ae54 	beq.w	8003e6e <_printf_float+0xb6>
 80041c6:	f108 0801 	add.w	r8, r8, #1
 80041ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041cc:	3b01      	subs	r3, #1
 80041ce:	4543      	cmp	r3, r8
 80041d0:	dcf1      	bgt.n	80041b6 <_printf_float+0x3fe>
 80041d2:	4653      	mov	r3, sl
 80041d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80041d8:	e6de      	b.n	8003f98 <_printf_float+0x1e0>
 80041da:	f04f 0800 	mov.w	r8, #0
 80041de:	f104 091a 	add.w	r9, r4, #26
 80041e2:	e7f2      	b.n	80041ca <_printf_float+0x412>
 80041e4:	2301      	movs	r3, #1
 80041e6:	4642      	mov	r2, r8
 80041e8:	e7df      	b.n	80041aa <_printf_float+0x3f2>
 80041ea:	2301      	movs	r3, #1
 80041ec:	464a      	mov	r2, r9
 80041ee:	4631      	mov	r1, r6
 80041f0:	4628      	mov	r0, r5
 80041f2:	47b8      	blx	r7
 80041f4:	3001      	adds	r0, #1
 80041f6:	f43f ae3a 	beq.w	8003e6e <_printf_float+0xb6>
 80041fa:	f108 0801 	add.w	r8, r8, #1
 80041fe:	68e3      	ldr	r3, [r4, #12]
 8004200:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004202:	1a5b      	subs	r3, r3, r1
 8004204:	4543      	cmp	r3, r8
 8004206:	dcf0      	bgt.n	80041ea <_printf_float+0x432>
 8004208:	e6fb      	b.n	8004002 <_printf_float+0x24a>
 800420a:	f04f 0800 	mov.w	r8, #0
 800420e:	f104 0919 	add.w	r9, r4, #25
 8004212:	e7f4      	b.n	80041fe <_printf_float+0x446>

08004214 <_printf_common>:
 8004214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004218:	4616      	mov	r6, r2
 800421a:	4699      	mov	r9, r3
 800421c:	688a      	ldr	r2, [r1, #8]
 800421e:	690b      	ldr	r3, [r1, #16]
 8004220:	4607      	mov	r7, r0
 8004222:	4293      	cmp	r3, r2
 8004224:	bfb8      	it	lt
 8004226:	4613      	movlt	r3, r2
 8004228:	6033      	str	r3, [r6, #0]
 800422a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800422e:	460c      	mov	r4, r1
 8004230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004234:	b10a      	cbz	r2, 800423a <_printf_common+0x26>
 8004236:	3301      	adds	r3, #1
 8004238:	6033      	str	r3, [r6, #0]
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	0699      	lsls	r1, r3, #26
 800423e:	bf42      	ittt	mi
 8004240:	6833      	ldrmi	r3, [r6, #0]
 8004242:	3302      	addmi	r3, #2
 8004244:	6033      	strmi	r3, [r6, #0]
 8004246:	6825      	ldr	r5, [r4, #0]
 8004248:	f015 0506 	ands.w	r5, r5, #6
 800424c:	d106      	bne.n	800425c <_printf_common+0x48>
 800424e:	f104 0a19 	add.w	sl, r4, #25
 8004252:	68e3      	ldr	r3, [r4, #12]
 8004254:	6832      	ldr	r2, [r6, #0]
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	42ab      	cmp	r3, r5
 800425a:	dc2b      	bgt.n	80042b4 <_printf_common+0xa0>
 800425c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004260:	1e13      	subs	r3, r2, #0
 8004262:	6822      	ldr	r2, [r4, #0]
 8004264:	bf18      	it	ne
 8004266:	2301      	movne	r3, #1
 8004268:	0692      	lsls	r2, r2, #26
 800426a:	d430      	bmi.n	80042ce <_printf_common+0xba>
 800426c:	4649      	mov	r1, r9
 800426e:	4638      	mov	r0, r7
 8004270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004274:	47c0      	blx	r8
 8004276:	3001      	adds	r0, #1
 8004278:	d023      	beq.n	80042c2 <_printf_common+0xae>
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	6922      	ldr	r2, [r4, #16]
 800427e:	f003 0306 	and.w	r3, r3, #6
 8004282:	2b04      	cmp	r3, #4
 8004284:	bf14      	ite	ne
 8004286:	2500      	movne	r5, #0
 8004288:	6833      	ldreq	r3, [r6, #0]
 800428a:	f04f 0600 	mov.w	r6, #0
 800428e:	bf08      	it	eq
 8004290:	68e5      	ldreq	r5, [r4, #12]
 8004292:	f104 041a 	add.w	r4, r4, #26
 8004296:	bf08      	it	eq
 8004298:	1aed      	subeq	r5, r5, r3
 800429a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800429e:	bf08      	it	eq
 80042a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042a4:	4293      	cmp	r3, r2
 80042a6:	bfc4      	itt	gt
 80042a8:	1a9b      	subgt	r3, r3, r2
 80042aa:	18ed      	addgt	r5, r5, r3
 80042ac:	42b5      	cmp	r5, r6
 80042ae:	d11a      	bne.n	80042e6 <_printf_common+0xd2>
 80042b0:	2000      	movs	r0, #0
 80042b2:	e008      	b.n	80042c6 <_printf_common+0xb2>
 80042b4:	2301      	movs	r3, #1
 80042b6:	4652      	mov	r2, sl
 80042b8:	4649      	mov	r1, r9
 80042ba:	4638      	mov	r0, r7
 80042bc:	47c0      	blx	r8
 80042be:	3001      	adds	r0, #1
 80042c0:	d103      	bne.n	80042ca <_printf_common+0xb6>
 80042c2:	f04f 30ff 	mov.w	r0, #4294967295
 80042c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ca:	3501      	adds	r5, #1
 80042cc:	e7c1      	b.n	8004252 <_printf_common+0x3e>
 80042ce:	2030      	movs	r0, #48	; 0x30
 80042d0:	18e1      	adds	r1, r4, r3
 80042d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042dc:	4422      	add	r2, r4
 80042de:	3302      	adds	r3, #2
 80042e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042e4:	e7c2      	b.n	800426c <_printf_common+0x58>
 80042e6:	2301      	movs	r3, #1
 80042e8:	4622      	mov	r2, r4
 80042ea:	4649      	mov	r1, r9
 80042ec:	4638      	mov	r0, r7
 80042ee:	47c0      	blx	r8
 80042f0:	3001      	adds	r0, #1
 80042f2:	d0e6      	beq.n	80042c2 <_printf_common+0xae>
 80042f4:	3601      	adds	r6, #1
 80042f6:	e7d9      	b.n	80042ac <_printf_common+0x98>

080042f8 <_printf_i>:
 80042f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042fc:	7e0f      	ldrb	r7, [r1, #24]
 80042fe:	4691      	mov	r9, r2
 8004300:	2f78      	cmp	r7, #120	; 0x78
 8004302:	4680      	mov	r8, r0
 8004304:	460c      	mov	r4, r1
 8004306:	469a      	mov	sl, r3
 8004308:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800430a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800430e:	d807      	bhi.n	8004320 <_printf_i+0x28>
 8004310:	2f62      	cmp	r7, #98	; 0x62
 8004312:	d80a      	bhi.n	800432a <_printf_i+0x32>
 8004314:	2f00      	cmp	r7, #0
 8004316:	f000 80d5 	beq.w	80044c4 <_printf_i+0x1cc>
 800431a:	2f58      	cmp	r7, #88	; 0x58
 800431c:	f000 80c1 	beq.w	80044a2 <_printf_i+0x1aa>
 8004320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004328:	e03a      	b.n	80043a0 <_printf_i+0xa8>
 800432a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800432e:	2b15      	cmp	r3, #21
 8004330:	d8f6      	bhi.n	8004320 <_printf_i+0x28>
 8004332:	a101      	add	r1, pc, #4	; (adr r1, 8004338 <_printf_i+0x40>)
 8004334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004338:	08004391 	.word	0x08004391
 800433c:	080043a5 	.word	0x080043a5
 8004340:	08004321 	.word	0x08004321
 8004344:	08004321 	.word	0x08004321
 8004348:	08004321 	.word	0x08004321
 800434c:	08004321 	.word	0x08004321
 8004350:	080043a5 	.word	0x080043a5
 8004354:	08004321 	.word	0x08004321
 8004358:	08004321 	.word	0x08004321
 800435c:	08004321 	.word	0x08004321
 8004360:	08004321 	.word	0x08004321
 8004364:	080044ab 	.word	0x080044ab
 8004368:	080043d1 	.word	0x080043d1
 800436c:	08004465 	.word	0x08004465
 8004370:	08004321 	.word	0x08004321
 8004374:	08004321 	.word	0x08004321
 8004378:	080044cd 	.word	0x080044cd
 800437c:	08004321 	.word	0x08004321
 8004380:	080043d1 	.word	0x080043d1
 8004384:	08004321 	.word	0x08004321
 8004388:	08004321 	.word	0x08004321
 800438c:	0800446d 	.word	0x0800446d
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	1d1a      	adds	r2, r3, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	602a      	str	r2, [r5, #0]
 8004398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800439c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0a0      	b.n	80044e6 <_printf_i+0x1ee>
 80043a4:	6820      	ldr	r0, [r4, #0]
 80043a6:	682b      	ldr	r3, [r5, #0]
 80043a8:	0607      	lsls	r7, r0, #24
 80043aa:	f103 0104 	add.w	r1, r3, #4
 80043ae:	6029      	str	r1, [r5, #0]
 80043b0:	d501      	bpl.n	80043b6 <_printf_i+0xbe>
 80043b2:	681e      	ldr	r6, [r3, #0]
 80043b4:	e003      	b.n	80043be <_printf_i+0xc6>
 80043b6:	0646      	lsls	r6, r0, #25
 80043b8:	d5fb      	bpl.n	80043b2 <_printf_i+0xba>
 80043ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80043be:	2e00      	cmp	r6, #0
 80043c0:	da03      	bge.n	80043ca <_printf_i+0xd2>
 80043c2:	232d      	movs	r3, #45	; 0x2d
 80043c4:	4276      	negs	r6, r6
 80043c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043ca:	230a      	movs	r3, #10
 80043cc:	4859      	ldr	r0, [pc, #356]	; (8004534 <_printf_i+0x23c>)
 80043ce:	e012      	b.n	80043f6 <_printf_i+0xfe>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	6820      	ldr	r0, [r4, #0]
 80043d4:	1d19      	adds	r1, r3, #4
 80043d6:	6029      	str	r1, [r5, #0]
 80043d8:	0605      	lsls	r5, r0, #24
 80043da:	d501      	bpl.n	80043e0 <_printf_i+0xe8>
 80043dc:	681e      	ldr	r6, [r3, #0]
 80043de:	e002      	b.n	80043e6 <_printf_i+0xee>
 80043e0:	0641      	lsls	r1, r0, #25
 80043e2:	d5fb      	bpl.n	80043dc <_printf_i+0xe4>
 80043e4:	881e      	ldrh	r6, [r3, #0]
 80043e6:	2f6f      	cmp	r7, #111	; 0x6f
 80043e8:	bf0c      	ite	eq
 80043ea:	2308      	moveq	r3, #8
 80043ec:	230a      	movne	r3, #10
 80043ee:	4851      	ldr	r0, [pc, #324]	; (8004534 <_printf_i+0x23c>)
 80043f0:	2100      	movs	r1, #0
 80043f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043f6:	6865      	ldr	r5, [r4, #4]
 80043f8:	2d00      	cmp	r5, #0
 80043fa:	bfa8      	it	ge
 80043fc:	6821      	ldrge	r1, [r4, #0]
 80043fe:	60a5      	str	r5, [r4, #8]
 8004400:	bfa4      	itt	ge
 8004402:	f021 0104 	bicge.w	r1, r1, #4
 8004406:	6021      	strge	r1, [r4, #0]
 8004408:	b90e      	cbnz	r6, 800440e <_printf_i+0x116>
 800440a:	2d00      	cmp	r5, #0
 800440c:	d04b      	beq.n	80044a6 <_printf_i+0x1ae>
 800440e:	4615      	mov	r5, r2
 8004410:	fbb6 f1f3 	udiv	r1, r6, r3
 8004414:	fb03 6711 	mls	r7, r3, r1, r6
 8004418:	5dc7      	ldrb	r7, [r0, r7]
 800441a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800441e:	4637      	mov	r7, r6
 8004420:	42bb      	cmp	r3, r7
 8004422:	460e      	mov	r6, r1
 8004424:	d9f4      	bls.n	8004410 <_printf_i+0x118>
 8004426:	2b08      	cmp	r3, #8
 8004428:	d10b      	bne.n	8004442 <_printf_i+0x14a>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	07de      	lsls	r6, r3, #31
 800442e:	d508      	bpl.n	8004442 <_printf_i+0x14a>
 8004430:	6923      	ldr	r3, [r4, #16]
 8004432:	6861      	ldr	r1, [r4, #4]
 8004434:	4299      	cmp	r1, r3
 8004436:	bfde      	ittt	le
 8004438:	2330      	movle	r3, #48	; 0x30
 800443a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800443e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004442:	1b52      	subs	r2, r2, r5
 8004444:	6122      	str	r2, [r4, #16]
 8004446:	464b      	mov	r3, r9
 8004448:	4621      	mov	r1, r4
 800444a:	4640      	mov	r0, r8
 800444c:	f8cd a000 	str.w	sl, [sp]
 8004450:	aa03      	add	r2, sp, #12
 8004452:	f7ff fedf 	bl	8004214 <_printf_common>
 8004456:	3001      	adds	r0, #1
 8004458:	d14a      	bne.n	80044f0 <_printf_i+0x1f8>
 800445a:	f04f 30ff 	mov.w	r0, #4294967295
 800445e:	b004      	add	sp, #16
 8004460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	f043 0320 	orr.w	r3, r3, #32
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	2778      	movs	r7, #120	; 0x78
 800446e:	4832      	ldr	r0, [pc, #200]	; (8004538 <_printf_i+0x240>)
 8004470:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	6829      	ldr	r1, [r5, #0]
 8004478:	061f      	lsls	r7, r3, #24
 800447a:	f851 6b04 	ldr.w	r6, [r1], #4
 800447e:	d402      	bmi.n	8004486 <_printf_i+0x18e>
 8004480:	065f      	lsls	r7, r3, #25
 8004482:	bf48      	it	mi
 8004484:	b2b6      	uxthmi	r6, r6
 8004486:	07df      	lsls	r7, r3, #31
 8004488:	bf48      	it	mi
 800448a:	f043 0320 	orrmi.w	r3, r3, #32
 800448e:	6029      	str	r1, [r5, #0]
 8004490:	bf48      	it	mi
 8004492:	6023      	strmi	r3, [r4, #0]
 8004494:	b91e      	cbnz	r6, 800449e <_printf_i+0x1a6>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	f023 0320 	bic.w	r3, r3, #32
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	2310      	movs	r3, #16
 80044a0:	e7a6      	b.n	80043f0 <_printf_i+0xf8>
 80044a2:	4824      	ldr	r0, [pc, #144]	; (8004534 <_printf_i+0x23c>)
 80044a4:	e7e4      	b.n	8004470 <_printf_i+0x178>
 80044a6:	4615      	mov	r5, r2
 80044a8:	e7bd      	b.n	8004426 <_printf_i+0x12e>
 80044aa:	682b      	ldr	r3, [r5, #0]
 80044ac:	6826      	ldr	r6, [r4, #0]
 80044ae:	1d18      	adds	r0, r3, #4
 80044b0:	6961      	ldr	r1, [r4, #20]
 80044b2:	6028      	str	r0, [r5, #0]
 80044b4:	0635      	lsls	r5, r6, #24
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	d501      	bpl.n	80044be <_printf_i+0x1c6>
 80044ba:	6019      	str	r1, [r3, #0]
 80044bc:	e002      	b.n	80044c4 <_printf_i+0x1cc>
 80044be:	0670      	lsls	r0, r6, #25
 80044c0:	d5fb      	bpl.n	80044ba <_printf_i+0x1c2>
 80044c2:	8019      	strh	r1, [r3, #0]
 80044c4:	2300      	movs	r3, #0
 80044c6:	4615      	mov	r5, r2
 80044c8:	6123      	str	r3, [r4, #16]
 80044ca:	e7bc      	b.n	8004446 <_printf_i+0x14e>
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	2100      	movs	r1, #0
 80044d0:	1d1a      	adds	r2, r3, #4
 80044d2:	602a      	str	r2, [r5, #0]
 80044d4:	681d      	ldr	r5, [r3, #0]
 80044d6:	6862      	ldr	r2, [r4, #4]
 80044d8:	4628      	mov	r0, r5
 80044da:	f000 fc38 	bl	8004d4e <memchr>
 80044de:	b108      	cbz	r0, 80044e4 <_printf_i+0x1ec>
 80044e0:	1b40      	subs	r0, r0, r5
 80044e2:	6060      	str	r0, [r4, #4]
 80044e4:	6863      	ldr	r3, [r4, #4]
 80044e6:	6123      	str	r3, [r4, #16]
 80044e8:	2300      	movs	r3, #0
 80044ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ee:	e7aa      	b.n	8004446 <_printf_i+0x14e>
 80044f0:	462a      	mov	r2, r5
 80044f2:	4649      	mov	r1, r9
 80044f4:	4640      	mov	r0, r8
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	47d0      	blx	sl
 80044fa:	3001      	adds	r0, #1
 80044fc:	d0ad      	beq.n	800445a <_printf_i+0x162>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	079b      	lsls	r3, r3, #30
 8004502:	d413      	bmi.n	800452c <_printf_i+0x234>
 8004504:	68e0      	ldr	r0, [r4, #12]
 8004506:	9b03      	ldr	r3, [sp, #12]
 8004508:	4298      	cmp	r0, r3
 800450a:	bfb8      	it	lt
 800450c:	4618      	movlt	r0, r3
 800450e:	e7a6      	b.n	800445e <_printf_i+0x166>
 8004510:	2301      	movs	r3, #1
 8004512:	4632      	mov	r2, r6
 8004514:	4649      	mov	r1, r9
 8004516:	4640      	mov	r0, r8
 8004518:	47d0      	blx	sl
 800451a:	3001      	adds	r0, #1
 800451c:	d09d      	beq.n	800445a <_printf_i+0x162>
 800451e:	3501      	adds	r5, #1
 8004520:	68e3      	ldr	r3, [r4, #12]
 8004522:	9903      	ldr	r1, [sp, #12]
 8004524:	1a5b      	subs	r3, r3, r1
 8004526:	42ab      	cmp	r3, r5
 8004528:	dcf2      	bgt.n	8004510 <_printf_i+0x218>
 800452a:	e7eb      	b.n	8004504 <_printf_i+0x20c>
 800452c:	2500      	movs	r5, #0
 800452e:	f104 0619 	add.w	r6, r4, #25
 8004532:	e7f5      	b.n	8004520 <_printf_i+0x228>
 8004534:	08008610 	.word	0x08008610
 8004538:	08008621 	.word	0x08008621

0800453c <_scanf_float>:
 800453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004540:	b087      	sub	sp, #28
 8004542:	9303      	str	r3, [sp, #12]
 8004544:	688b      	ldr	r3, [r1, #8]
 8004546:	4617      	mov	r7, r2
 8004548:	1e5a      	subs	r2, r3, #1
 800454a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800454e:	bf85      	ittet	hi
 8004550:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004554:	195b      	addhi	r3, r3, r5
 8004556:	2300      	movls	r3, #0
 8004558:	9302      	strhi	r3, [sp, #8]
 800455a:	bf88      	it	hi
 800455c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004560:	468b      	mov	fp, r1
 8004562:	f04f 0500 	mov.w	r5, #0
 8004566:	bf8c      	ite	hi
 8004568:	608b      	strhi	r3, [r1, #8]
 800456a:	9302      	strls	r3, [sp, #8]
 800456c:	680b      	ldr	r3, [r1, #0]
 800456e:	4680      	mov	r8, r0
 8004570:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004574:	f84b 3b1c 	str.w	r3, [fp], #28
 8004578:	460c      	mov	r4, r1
 800457a:	465e      	mov	r6, fp
 800457c:	46aa      	mov	sl, r5
 800457e:	46a9      	mov	r9, r5
 8004580:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004584:	9501      	str	r5, [sp, #4]
 8004586:	68a2      	ldr	r2, [r4, #8]
 8004588:	b152      	cbz	r2, 80045a0 <_scanf_float+0x64>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b4e      	cmp	r3, #78	; 0x4e
 8004590:	d864      	bhi.n	800465c <_scanf_float+0x120>
 8004592:	2b40      	cmp	r3, #64	; 0x40
 8004594:	d83c      	bhi.n	8004610 <_scanf_float+0xd4>
 8004596:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800459a:	b2c8      	uxtb	r0, r1
 800459c:	280e      	cmp	r0, #14
 800459e:	d93a      	bls.n	8004616 <_scanf_float+0xda>
 80045a0:	f1b9 0f00 	cmp.w	r9, #0
 80045a4:	d003      	beq.n	80045ae <_scanf_float+0x72>
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045b2:	f1ba 0f01 	cmp.w	sl, #1
 80045b6:	f200 8113 	bhi.w	80047e0 <_scanf_float+0x2a4>
 80045ba:	455e      	cmp	r6, fp
 80045bc:	f200 8105 	bhi.w	80047ca <_scanf_float+0x28e>
 80045c0:	2501      	movs	r5, #1
 80045c2:	4628      	mov	r0, r5
 80045c4:	b007      	add	sp, #28
 80045c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80045ce:	2a0d      	cmp	r2, #13
 80045d0:	d8e6      	bhi.n	80045a0 <_scanf_float+0x64>
 80045d2:	a101      	add	r1, pc, #4	; (adr r1, 80045d8 <_scanf_float+0x9c>)
 80045d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80045d8:	08004717 	.word	0x08004717
 80045dc:	080045a1 	.word	0x080045a1
 80045e0:	080045a1 	.word	0x080045a1
 80045e4:	080045a1 	.word	0x080045a1
 80045e8:	08004777 	.word	0x08004777
 80045ec:	0800474f 	.word	0x0800474f
 80045f0:	080045a1 	.word	0x080045a1
 80045f4:	080045a1 	.word	0x080045a1
 80045f8:	08004725 	.word	0x08004725
 80045fc:	080045a1 	.word	0x080045a1
 8004600:	080045a1 	.word	0x080045a1
 8004604:	080045a1 	.word	0x080045a1
 8004608:	080045a1 	.word	0x080045a1
 800460c:	080046dd 	.word	0x080046dd
 8004610:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004614:	e7db      	b.n	80045ce <_scanf_float+0x92>
 8004616:	290e      	cmp	r1, #14
 8004618:	d8c2      	bhi.n	80045a0 <_scanf_float+0x64>
 800461a:	a001      	add	r0, pc, #4	; (adr r0, 8004620 <_scanf_float+0xe4>)
 800461c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004620:	080046cf 	.word	0x080046cf
 8004624:	080045a1 	.word	0x080045a1
 8004628:	080046cf 	.word	0x080046cf
 800462c:	08004763 	.word	0x08004763
 8004630:	080045a1 	.word	0x080045a1
 8004634:	0800467d 	.word	0x0800467d
 8004638:	080046b9 	.word	0x080046b9
 800463c:	080046b9 	.word	0x080046b9
 8004640:	080046b9 	.word	0x080046b9
 8004644:	080046b9 	.word	0x080046b9
 8004648:	080046b9 	.word	0x080046b9
 800464c:	080046b9 	.word	0x080046b9
 8004650:	080046b9 	.word	0x080046b9
 8004654:	080046b9 	.word	0x080046b9
 8004658:	080046b9 	.word	0x080046b9
 800465c:	2b6e      	cmp	r3, #110	; 0x6e
 800465e:	d809      	bhi.n	8004674 <_scanf_float+0x138>
 8004660:	2b60      	cmp	r3, #96	; 0x60
 8004662:	d8b2      	bhi.n	80045ca <_scanf_float+0x8e>
 8004664:	2b54      	cmp	r3, #84	; 0x54
 8004666:	d077      	beq.n	8004758 <_scanf_float+0x21c>
 8004668:	2b59      	cmp	r3, #89	; 0x59
 800466a:	d199      	bne.n	80045a0 <_scanf_float+0x64>
 800466c:	2d07      	cmp	r5, #7
 800466e:	d197      	bne.n	80045a0 <_scanf_float+0x64>
 8004670:	2508      	movs	r5, #8
 8004672:	e029      	b.n	80046c8 <_scanf_float+0x18c>
 8004674:	2b74      	cmp	r3, #116	; 0x74
 8004676:	d06f      	beq.n	8004758 <_scanf_float+0x21c>
 8004678:	2b79      	cmp	r3, #121	; 0x79
 800467a:	e7f6      	b.n	800466a <_scanf_float+0x12e>
 800467c:	6821      	ldr	r1, [r4, #0]
 800467e:	05c8      	lsls	r0, r1, #23
 8004680:	d51a      	bpl.n	80046b8 <_scanf_float+0x17c>
 8004682:	9b02      	ldr	r3, [sp, #8]
 8004684:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004688:	6021      	str	r1, [r4, #0]
 800468a:	f109 0901 	add.w	r9, r9, #1
 800468e:	b11b      	cbz	r3, 8004698 <_scanf_float+0x15c>
 8004690:	3b01      	subs	r3, #1
 8004692:	3201      	adds	r2, #1
 8004694:	9302      	str	r3, [sp, #8]
 8004696:	60a2      	str	r2, [r4, #8]
 8004698:	68a3      	ldr	r3, [r4, #8]
 800469a:	3b01      	subs	r3, #1
 800469c:	60a3      	str	r3, [r4, #8]
 800469e:	6923      	ldr	r3, [r4, #16]
 80046a0:	3301      	adds	r3, #1
 80046a2:	6123      	str	r3, [r4, #16]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	f340 8084 	ble.w	80047b8 <_scanf_float+0x27c>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	603b      	str	r3, [r7, #0]
 80046b6:	e766      	b.n	8004586 <_scanf_float+0x4a>
 80046b8:	eb1a 0f05 	cmn.w	sl, r5
 80046bc:	f47f af70 	bne.w	80045a0 <_scanf_float+0x64>
 80046c0:	6822      	ldr	r2, [r4, #0]
 80046c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80046c6:	6022      	str	r2, [r4, #0]
 80046c8:	f806 3b01 	strb.w	r3, [r6], #1
 80046cc:	e7e4      	b.n	8004698 <_scanf_float+0x15c>
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	0610      	lsls	r0, r2, #24
 80046d2:	f57f af65 	bpl.w	80045a0 <_scanf_float+0x64>
 80046d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046da:	e7f4      	b.n	80046c6 <_scanf_float+0x18a>
 80046dc:	f1ba 0f00 	cmp.w	sl, #0
 80046e0:	d10e      	bne.n	8004700 <_scanf_float+0x1c4>
 80046e2:	f1b9 0f00 	cmp.w	r9, #0
 80046e6:	d10e      	bne.n	8004706 <_scanf_float+0x1ca>
 80046e8:	6822      	ldr	r2, [r4, #0]
 80046ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80046ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80046f2:	d108      	bne.n	8004706 <_scanf_float+0x1ca>
 80046f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80046f8:	f04f 0a01 	mov.w	sl, #1
 80046fc:	6022      	str	r2, [r4, #0]
 80046fe:	e7e3      	b.n	80046c8 <_scanf_float+0x18c>
 8004700:	f1ba 0f02 	cmp.w	sl, #2
 8004704:	d055      	beq.n	80047b2 <_scanf_float+0x276>
 8004706:	2d01      	cmp	r5, #1
 8004708:	d002      	beq.n	8004710 <_scanf_float+0x1d4>
 800470a:	2d04      	cmp	r5, #4
 800470c:	f47f af48 	bne.w	80045a0 <_scanf_float+0x64>
 8004710:	3501      	adds	r5, #1
 8004712:	b2ed      	uxtb	r5, r5
 8004714:	e7d8      	b.n	80046c8 <_scanf_float+0x18c>
 8004716:	f1ba 0f01 	cmp.w	sl, #1
 800471a:	f47f af41 	bne.w	80045a0 <_scanf_float+0x64>
 800471e:	f04f 0a02 	mov.w	sl, #2
 8004722:	e7d1      	b.n	80046c8 <_scanf_float+0x18c>
 8004724:	b97d      	cbnz	r5, 8004746 <_scanf_float+0x20a>
 8004726:	f1b9 0f00 	cmp.w	r9, #0
 800472a:	f47f af3c 	bne.w	80045a6 <_scanf_float+0x6a>
 800472e:	6822      	ldr	r2, [r4, #0]
 8004730:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004734:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004738:	f47f af39 	bne.w	80045ae <_scanf_float+0x72>
 800473c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004740:	2501      	movs	r5, #1
 8004742:	6022      	str	r2, [r4, #0]
 8004744:	e7c0      	b.n	80046c8 <_scanf_float+0x18c>
 8004746:	2d03      	cmp	r5, #3
 8004748:	d0e2      	beq.n	8004710 <_scanf_float+0x1d4>
 800474a:	2d05      	cmp	r5, #5
 800474c:	e7de      	b.n	800470c <_scanf_float+0x1d0>
 800474e:	2d02      	cmp	r5, #2
 8004750:	f47f af26 	bne.w	80045a0 <_scanf_float+0x64>
 8004754:	2503      	movs	r5, #3
 8004756:	e7b7      	b.n	80046c8 <_scanf_float+0x18c>
 8004758:	2d06      	cmp	r5, #6
 800475a:	f47f af21 	bne.w	80045a0 <_scanf_float+0x64>
 800475e:	2507      	movs	r5, #7
 8004760:	e7b2      	b.n	80046c8 <_scanf_float+0x18c>
 8004762:	6822      	ldr	r2, [r4, #0]
 8004764:	0591      	lsls	r1, r2, #22
 8004766:	f57f af1b 	bpl.w	80045a0 <_scanf_float+0x64>
 800476a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800476e:	6022      	str	r2, [r4, #0]
 8004770:	f8cd 9004 	str.w	r9, [sp, #4]
 8004774:	e7a8      	b.n	80046c8 <_scanf_float+0x18c>
 8004776:	6822      	ldr	r2, [r4, #0]
 8004778:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800477c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004780:	d006      	beq.n	8004790 <_scanf_float+0x254>
 8004782:	0550      	lsls	r0, r2, #21
 8004784:	f57f af0c 	bpl.w	80045a0 <_scanf_float+0x64>
 8004788:	f1b9 0f00 	cmp.w	r9, #0
 800478c:	f43f af0f 	beq.w	80045ae <_scanf_float+0x72>
 8004790:	0591      	lsls	r1, r2, #22
 8004792:	bf58      	it	pl
 8004794:	9901      	ldrpl	r1, [sp, #4]
 8004796:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800479a:	bf58      	it	pl
 800479c:	eba9 0101 	subpl.w	r1, r9, r1
 80047a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80047a4:	f04f 0900 	mov.w	r9, #0
 80047a8:	bf58      	it	pl
 80047aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80047ae:	6022      	str	r2, [r4, #0]
 80047b0:	e78a      	b.n	80046c8 <_scanf_float+0x18c>
 80047b2:	f04f 0a03 	mov.w	sl, #3
 80047b6:	e787      	b.n	80046c8 <_scanf_float+0x18c>
 80047b8:	4639      	mov	r1, r7
 80047ba:	4640      	mov	r0, r8
 80047bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047c0:	4798      	blx	r3
 80047c2:	2800      	cmp	r0, #0
 80047c4:	f43f aedf 	beq.w	8004586 <_scanf_float+0x4a>
 80047c8:	e6ea      	b.n	80045a0 <_scanf_float+0x64>
 80047ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047ce:	463a      	mov	r2, r7
 80047d0:	4640      	mov	r0, r8
 80047d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047d6:	4798      	blx	r3
 80047d8:	6923      	ldr	r3, [r4, #16]
 80047da:	3b01      	subs	r3, #1
 80047dc:	6123      	str	r3, [r4, #16]
 80047de:	e6ec      	b.n	80045ba <_scanf_float+0x7e>
 80047e0:	1e6b      	subs	r3, r5, #1
 80047e2:	2b06      	cmp	r3, #6
 80047e4:	d825      	bhi.n	8004832 <_scanf_float+0x2f6>
 80047e6:	2d02      	cmp	r5, #2
 80047e8:	d836      	bhi.n	8004858 <_scanf_float+0x31c>
 80047ea:	455e      	cmp	r6, fp
 80047ec:	f67f aee8 	bls.w	80045c0 <_scanf_float+0x84>
 80047f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047f4:	463a      	mov	r2, r7
 80047f6:	4640      	mov	r0, r8
 80047f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047fc:	4798      	blx	r3
 80047fe:	6923      	ldr	r3, [r4, #16]
 8004800:	3b01      	subs	r3, #1
 8004802:	6123      	str	r3, [r4, #16]
 8004804:	e7f1      	b.n	80047ea <_scanf_float+0x2ae>
 8004806:	9802      	ldr	r0, [sp, #8]
 8004808:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800480c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004810:	463a      	mov	r2, r7
 8004812:	9002      	str	r0, [sp, #8]
 8004814:	4640      	mov	r0, r8
 8004816:	4798      	blx	r3
 8004818:	6923      	ldr	r3, [r4, #16]
 800481a:	3b01      	subs	r3, #1
 800481c:	6123      	str	r3, [r4, #16]
 800481e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004822:	fa5f fa8a 	uxtb.w	sl, sl
 8004826:	f1ba 0f02 	cmp.w	sl, #2
 800482a:	d1ec      	bne.n	8004806 <_scanf_float+0x2ca>
 800482c:	3d03      	subs	r5, #3
 800482e:	b2ed      	uxtb	r5, r5
 8004830:	1b76      	subs	r6, r6, r5
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	05da      	lsls	r2, r3, #23
 8004836:	d52f      	bpl.n	8004898 <_scanf_float+0x35c>
 8004838:	055b      	lsls	r3, r3, #21
 800483a:	d510      	bpl.n	800485e <_scanf_float+0x322>
 800483c:	455e      	cmp	r6, fp
 800483e:	f67f aebf 	bls.w	80045c0 <_scanf_float+0x84>
 8004842:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004846:	463a      	mov	r2, r7
 8004848:	4640      	mov	r0, r8
 800484a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800484e:	4798      	blx	r3
 8004850:	6923      	ldr	r3, [r4, #16]
 8004852:	3b01      	subs	r3, #1
 8004854:	6123      	str	r3, [r4, #16]
 8004856:	e7f1      	b.n	800483c <_scanf_float+0x300>
 8004858:	46aa      	mov	sl, r5
 800485a:	9602      	str	r6, [sp, #8]
 800485c:	e7df      	b.n	800481e <_scanf_float+0x2e2>
 800485e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004862:	6923      	ldr	r3, [r4, #16]
 8004864:	2965      	cmp	r1, #101	; 0x65
 8004866:	f103 33ff 	add.w	r3, r3, #4294967295
 800486a:	f106 35ff 	add.w	r5, r6, #4294967295
 800486e:	6123      	str	r3, [r4, #16]
 8004870:	d00c      	beq.n	800488c <_scanf_float+0x350>
 8004872:	2945      	cmp	r1, #69	; 0x45
 8004874:	d00a      	beq.n	800488c <_scanf_float+0x350>
 8004876:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800487a:	463a      	mov	r2, r7
 800487c:	4640      	mov	r0, r8
 800487e:	4798      	blx	r3
 8004880:	6923      	ldr	r3, [r4, #16]
 8004882:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004886:	3b01      	subs	r3, #1
 8004888:	1eb5      	subs	r5, r6, #2
 800488a:	6123      	str	r3, [r4, #16]
 800488c:	463a      	mov	r2, r7
 800488e:	4640      	mov	r0, r8
 8004890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004894:	4798      	blx	r3
 8004896:	462e      	mov	r6, r5
 8004898:	6825      	ldr	r5, [r4, #0]
 800489a:	f015 0510 	ands.w	r5, r5, #16
 800489e:	d155      	bne.n	800494c <_scanf_float+0x410>
 80048a0:	7035      	strb	r5, [r6, #0]
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ac:	d11d      	bne.n	80048ea <_scanf_float+0x3ae>
 80048ae:	9b01      	ldr	r3, [sp, #4]
 80048b0:	454b      	cmp	r3, r9
 80048b2:	eba3 0209 	sub.w	r2, r3, r9
 80048b6:	d125      	bne.n	8004904 <_scanf_float+0x3c8>
 80048b8:	2200      	movs	r2, #0
 80048ba:	4659      	mov	r1, fp
 80048bc:	4640      	mov	r0, r8
 80048be:	f002 fc87 	bl	80071d0 <_strtod_r>
 80048c2:	9b03      	ldr	r3, [sp, #12]
 80048c4:	f8d4 c000 	ldr.w	ip, [r4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f01c 0f02 	tst.w	ip, #2
 80048ce:	4606      	mov	r6, r0
 80048d0:	460f      	mov	r7, r1
 80048d2:	f103 0204 	add.w	r2, r3, #4
 80048d6:	d020      	beq.n	800491a <_scanf_float+0x3de>
 80048d8:	9903      	ldr	r1, [sp, #12]
 80048da:	600a      	str	r2, [r1, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	e9c3 6700 	strd	r6, r7, [r3]
 80048e2:	68e3      	ldr	r3, [r4, #12]
 80048e4:	3301      	adds	r3, #1
 80048e6:	60e3      	str	r3, [r4, #12]
 80048e8:	e66b      	b.n	80045c2 <_scanf_float+0x86>
 80048ea:	9b04      	ldr	r3, [sp, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0e3      	beq.n	80048b8 <_scanf_float+0x37c>
 80048f0:	9905      	ldr	r1, [sp, #20]
 80048f2:	230a      	movs	r3, #10
 80048f4:	462a      	mov	r2, r5
 80048f6:	4640      	mov	r0, r8
 80048f8:	3101      	adds	r1, #1
 80048fa:	f002 fced 	bl	80072d8 <_strtol_r>
 80048fe:	9b04      	ldr	r3, [sp, #16]
 8004900:	9e05      	ldr	r6, [sp, #20]
 8004902:	1ac2      	subs	r2, r0, r3
 8004904:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004908:	429e      	cmp	r6, r3
 800490a:	bf28      	it	cs
 800490c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004910:	4630      	mov	r0, r6
 8004912:	490f      	ldr	r1, [pc, #60]	; (8004950 <_scanf_float+0x414>)
 8004914:	f000 f8e2 	bl	8004adc <siprintf>
 8004918:	e7ce      	b.n	80048b8 <_scanf_float+0x37c>
 800491a:	f01c 0f04 	tst.w	ip, #4
 800491e:	d1db      	bne.n	80048d8 <_scanf_float+0x39c>
 8004920:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004924:	f8cc 2000 	str.w	r2, [ip]
 8004928:	f8d3 8000 	ldr.w	r8, [r3]
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	f7fc f86c 	bl	8000a0c <__aeabi_dcmpun>
 8004934:	b128      	cbz	r0, 8004942 <_scanf_float+0x406>
 8004936:	4807      	ldr	r0, [pc, #28]	; (8004954 <_scanf_float+0x418>)
 8004938:	f000 fa26 	bl	8004d88 <nanf>
 800493c:	f8c8 0000 	str.w	r0, [r8]
 8004940:	e7cf      	b.n	80048e2 <_scanf_float+0x3a6>
 8004942:	4630      	mov	r0, r6
 8004944:	4639      	mov	r1, r7
 8004946:	f7fc f8bf 	bl	8000ac8 <__aeabi_d2f>
 800494a:	e7f7      	b.n	800493c <_scanf_float+0x400>
 800494c:	2500      	movs	r5, #0
 800494e:	e638      	b.n	80045c2 <_scanf_float+0x86>
 8004950:	08008632 	.word	0x08008632
 8004954:	080089c5 	.word	0x080089c5

08004958 <std>:
 8004958:	2300      	movs	r3, #0
 800495a:	b510      	push	{r4, lr}
 800495c:	4604      	mov	r4, r0
 800495e:	e9c0 3300 	strd	r3, r3, [r0]
 8004962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004966:	6083      	str	r3, [r0, #8]
 8004968:	8181      	strh	r1, [r0, #12]
 800496a:	6643      	str	r3, [r0, #100]	; 0x64
 800496c:	81c2      	strh	r2, [r0, #14]
 800496e:	6183      	str	r3, [r0, #24]
 8004970:	4619      	mov	r1, r3
 8004972:	2208      	movs	r2, #8
 8004974:	305c      	adds	r0, #92	; 0x5c
 8004976:	f000 f914 	bl	8004ba2 <memset>
 800497a:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <std+0x58>)
 800497c:	6224      	str	r4, [r4, #32]
 800497e:	6263      	str	r3, [r4, #36]	; 0x24
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <std+0x5c>)
 8004982:	62a3      	str	r3, [r4, #40]	; 0x28
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <std+0x60>)
 8004986:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004988:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <std+0x64>)
 800498a:	6323      	str	r3, [r4, #48]	; 0x30
 800498c:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <std+0x68>)
 800498e:	429c      	cmp	r4, r3
 8004990:	d006      	beq.n	80049a0 <std+0x48>
 8004992:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004996:	4294      	cmp	r4, r2
 8004998:	d002      	beq.n	80049a0 <std+0x48>
 800499a:	33d0      	adds	r3, #208	; 0xd0
 800499c:	429c      	cmp	r4, r3
 800499e:	d105      	bne.n	80049ac <std+0x54>
 80049a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a8:	f000 b9ce 	b.w	8004d48 <__retarget_lock_init_recursive>
 80049ac:	bd10      	pop	{r4, pc}
 80049ae:	bf00      	nop
 80049b0:	08004b1d 	.word	0x08004b1d
 80049b4:	08004b3f 	.word	0x08004b3f
 80049b8:	08004b77 	.word	0x08004b77
 80049bc:	08004b9b 	.word	0x08004b9b
 80049c0:	2000127c 	.word	0x2000127c

080049c4 <stdio_exit_handler>:
 80049c4:	4a02      	ldr	r2, [pc, #8]	; (80049d0 <stdio_exit_handler+0xc>)
 80049c6:	4903      	ldr	r1, [pc, #12]	; (80049d4 <stdio_exit_handler+0x10>)
 80049c8:	4803      	ldr	r0, [pc, #12]	; (80049d8 <stdio_exit_handler+0x14>)
 80049ca:	f000 b869 	b.w	8004aa0 <_fwalk_sglue>
 80049ce:	bf00      	nop
 80049d0:	20000010 	.word	0x20000010
 80049d4:	08007915 	.word	0x08007915
 80049d8:	2000001c 	.word	0x2000001c

080049dc <cleanup_stdio>:
 80049dc:	6841      	ldr	r1, [r0, #4]
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <cleanup_stdio+0x34>)
 80049e0:	b510      	push	{r4, lr}
 80049e2:	4299      	cmp	r1, r3
 80049e4:	4604      	mov	r4, r0
 80049e6:	d001      	beq.n	80049ec <cleanup_stdio+0x10>
 80049e8:	f002 ff94 	bl	8007914 <_fflush_r>
 80049ec:	68a1      	ldr	r1, [r4, #8]
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <cleanup_stdio+0x38>)
 80049f0:	4299      	cmp	r1, r3
 80049f2:	d002      	beq.n	80049fa <cleanup_stdio+0x1e>
 80049f4:	4620      	mov	r0, r4
 80049f6:	f002 ff8d 	bl	8007914 <_fflush_r>
 80049fa:	68e1      	ldr	r1, [r4, #12]
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <cleanup_stdio+0x3c>)
 80049fe:	4299      	cmp	r1, r3
 8004a00:	d004      	beq.n	8004a0c <cleanup_stdio+0x30>
 8004a02:	4620      	mov	r0, r4
 8004a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a08:	f002 bf84 	b.w	8007914 <_fflush_r>
 8004a0c:	bd10      	pop	{r4, pc}
 8004a0e:	bf00      	nop
 8004a10:	2000127c 	.word	0x2000127c
 8004a14:	200012e4 	.word	0x200012e4
 8004a18:	2000134c 	.word	0x2000134c

08004a1c <global_stdio_init.part.0>:
 8004a1c:	b510      	push	{r4, lr}
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <global_stdio_init.part.0+0x30>)
 8004a20:	4c0b      	ldr	r4, [pc, #44]	; (8004a50 <global_stdio_init.part.0+0x34>)
 8004a22:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <global_stdio_init.part.0+0x38>)
 8004a24:	4620      	mov	r0, r4
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	2104      	movs	r1, #4
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f7ff ff94 	bl	8004958 <std>
 8004a30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a34:	2201      	movs	r2, #1
 8004a36:	2109      	movs	r1, #9
 8004a38:	f7ff ff8e 	bl	8004958 <std>
 8004a3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a40:	2202      	movs	r2, #2
 8004a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a46:	2112      	movs	r1, #18
 8004a48:	f7ff bf86 	b.w	8004958 <std>
 8004a4c:	200013b4 	.word	0x200013b4
 8004a50:	2000127c 	.word	0x2000127c
 8004a54:	080049c5 	.word	0x080049c5

08004a58 <__sfp_lock_acquire>:
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <__sfp_lock_acquire+0x8>)
 8004a5a:	f000 b976 	b.w	8004d4a <__retarget_lock_acquire_recursive>
 8004a5e:	bf00      	nop
 8004a60:	200013bd 	.word	0x200013bd

08004a64 <__sfp_lock_release>:
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <__sfp_lock_release+0x8>)
 8004a66:	f000 b971 	b.w	8004d4c <__retarget_lock_release_recursive>
 8004a6a:	bf00      	nop
 8004a6c:	200013bd 	.word	0x200013bd

08004a70 <__sinit>:
 8004a70:	b510      	push	{r4, lr}
 8004a72:	4604      	mov	r4, r0
 8004a74:	f7ff fff0 	bl	8004a58 <__sfp_lock_acquire>
 8004a78:	6a23      	ldr	r3, [r4, #32]
 8004a7a:	b11b      	cbz	r3, 8004a84 <__sinit+0x14>
 8004a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a80:	f7ff bff0 	b.w	8004a64 <__sfp_lock_release>
 8004a84:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <__sinit+0x28>)
 8004a86:	6223      	str	r3, [r4, #32]
 8004a88:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <__sinit+0x2c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f5      	bne.n	8004a7c <__sinit+0xc>
 8004a90:	f7ff ffc4 	bl	8004a1c <global_stdio_init.part.0>
 8004a94:	e7f2      	b.n	8004a7c <__sinit+0xc>
 8004a96:	bf00      	nop
 8004a98:	080049dd 	.word	0x080049dd
 8004a9c:	200013b4 	.word	0x200013b4

08004aa0 <_fwalk_sglue>:
 8004aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa4:	4607      	mov	r7, r0
 8004aa6:	4688      	mov	r8, r1
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	2600      	movs	r6, #0
 8004aac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ab0:	f1b9 0901 	subs.w	r9, r9, #1
 8004ab4:	d505      	bpl.n	8004ac2 <_fwalk_sglue+0x22>
 8004ab6:	6824      	ldr	r4, [r4, #0]
 8004ab8:	2c00      	cmp	r4, #0
 8004aba:	d1f7      	bne.n	8004aac <_fwalk_sglue+0xc>
 8004abc:	4630      	mov	r0, r6
 8004abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac2:	89ab      	ldrh	r3, [r5, #12]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d907      	bls.n	8004ad8 <_fwalk_sglue+0x38>
 8004ac8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004acc:	3301      	adds	r3, #1
 8004ace:	d003      	beq.n	8004ad8 <_fwalk_sglue+0x38>
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	47c0      	blx	r8
 8004ad6:	4306      	orrs	r6, r0
 8004ad8:	3568      	adds	r5, #104	; 0x68
 8004ada:	e7e9      	b.n	8004ab0 <_fwalk_sglue+0x10>

08004adc <siprintf>:
 8004adc:	b40e      	push	{r1, r2, r3}
 8004ade:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ae2:	b500      	push	{lr}
 8004ae4:	b09c      	sub	sp, #112	; 0x70
 8004ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ae8:	9002      	str	r0, [sp, #8]
 8004aea:	9006      	str	r0, [sp, #24]
 8004aec:	9107      	str	r1, [sp, #28]
 8004aee:	9104      	str	r1, [sp, #16]
 8004af0:	4808      	ldr	r0, [pc, #32]	; (8004b14 <siprintf+0x38>)
 8004af2:	4909      	ldr	r1, [pc, #36]	; (8004b18 <siprintf+0x3c>)
 8004af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004af8:	9105      	str	r1, [sp, #20]
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	a902      	add	r1, sp, #8
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	f002 fc46 	bl	8007390 <_svfiprintf_r>
 8004b04:	2200      	movs	r2, #0
 8004b06:	9b02      	ldr	r3, [sp, #8]
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	b01c      	add	sp, #112	; 0x70
 8004b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b10:	b003      	add	sp, #12
 8004b12:	4770      	bx	lr
 8004b14:	20000068 	.word	0x20000068
 8004b18:	ffff0208 	.word	0xffff0208

08004b1c <__sread>:
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	460c      	mov	r4, r1
 8004b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b24:	f000 f8c2 	bl	8004cac <_read_r>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	bfab      	itete	ge
 8004b2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8004b30:	181b      	addge	r3, r3, r0
 8004b32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b36:	bfac      	ite	ge
 8004b38:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b3a:	81a3      	strhlt	r3, [r4, #12]
 8004b3c:	bd10      	pop	{r4, pc}

08004b3e <__swrite>:
 8004b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b42:	461f      	mov	r7, r3
 8004b44:	898b      	ldrh	r3, [r1, #12]
 8004b46:	4605      	mov	r5, r0
 8004b48:	05db      	lsls	r3, r3, #23
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	4616      	mov	r6, r2
 8004b4e:	d505      	bpl.n	8004b5c <__swrite+0x1e>
 8004b50:	2302      	movs	r3, #2
 8004b52:	2200      	movs	r2, #0
 8004b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b58:	f000 f896 	bl	8004c88 <_lseek_r>
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	4632      	mov	r2, r6
 8004b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b64:	81a3      	strh	r3, [r4, #12]
 8004b66:	4628      	mov	r0, r5
 8004b68:	463b      	mov	r3, r7
 8004b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b72:	f000 b8ad 	b.w	8004cd0 <_write_r>

08004b76 <__sseek>:
 8004b76:	b510      	push	{r4, lr}
 8004b78:	460c      	mov	r4, r1
 8004b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b7e:	f000 f883 	bl	8004c88 <_lseek_r>
 8004b82:	1c43      	adds	r3, r0, #1
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	bf15      	itete	ne
 8004b88:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b92:	81a3      	strheq	r3, [r4, #12]
 8004b94:	bf18      	it	ne
 8004b96:	81a3      	strhne	r3, [r4, #12]
 8004b98:	bd10      	pop	{r4, pc}

08004b9a <__sclose>:
 8004b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9e:	f000 b80d 	b.w	8004bbc <_close_r>

08004ba2 <memset>:
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	4402      	add	r2, r0
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d100      	bne.n	8004bac <memset+0xa>
 8004baa:	4770      	bx	lr
 8004bac:	f803 1b01 	strb.w	r1, [r3], #1
 8004bb0:	e7f9      	b.n	8004ba6 <memset+0x4>
	...

08004bb4 <_localeconv_r>:
 8004bb4:	4800      	ldr	r0, [pc, #0]	; (8004bb8 <_localeconv_r+0x4>)
 8004bb6:	4770      	bx	lr
 8004bb8:	2000015c 	.word	0x2000015c

08004bbc <_close_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	4d05      	ldr	r5, [pc, #20]	; (8004bd8 <_close_r+0x1c>)
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	f7fc fb8c 	bl	80012e4 <_close>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d102      	bne.n	8004bd6 <_close_r+0x1a>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	b103      	cbz	r3, 8004bd6 <_close_r+0x1a>
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	200013b8 	.word	0x200013b8

08004bdc <_reclaim_reent>:
 8004bdc:	4b29      	ldr	r3, [pc, #164]	; (8004c84 <_reclaim_reent+0xa8>)
 8004bde:	b570      	push	{r4, r5, r6, lr}
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4604      	mov	r4, r0
 8004be4:	4283      	cmp	r3, r0
 8004be6:	d04b      	beq.n	8004c80 <_reclaim_reent+0xa4>
 8004be8:	69c3      	ldr	r3, [r0, #28]
 8004bea:	b143      	cbz	r3, 8004bfe <_reclaim_reent+0x22>
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d144      	bne.n	8004c7c <_reclaim_reent+0xa0>
 8004bf2:	69e3      	ldr	r3, [r4, #28]
 8004bf4:	6819      	ldr	r1, [r3, #0]
 8004bf6:	b111      	cbz	r1, 8004bfe <_reclaim_reent+0x22>
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 ff39 	bl	8005a70 <_free_r>
 8004bfe:	6961      	ldr	r1, [r4, #20]
 8004c00:	b111      	cbz	r1, 8004c08 <_reclaim_reent+0x2c>
 8004c02:	4620      	mov	r0, r4
 8004c04:	f000 ff34 	bl	8005a70 <_free_r>
 8004c08:	69e1      	ldr	r1, [r4, #28]
 8004c0a:	b111      	cbz	r1, 8004c12 <_reclaim_reent+0x36>
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f000 ff2f 	bl	8005a70 <_free_r>
 8004c12:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004c14:	b111      	cbz	r1, 8004c1c <_reclaim_reent+0x40>
 8004c16:	4620      	mov	r0, r4
 8004c18:	f000 ff2a 	bl	8005a70 <_free_r>
 8004c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c1e:	b111      	cbz	r1, 8004c26 <_reclaim_reent+0x4a>
 8004c20:	4620      	mov	r0, r4
 8004c22:	f000 ff25 	bl	8005a70 <_free_r>
 8004c26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004c28:	b111      	cbz	r1, 8004c30 <_reclaim_reent+0x54>
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f000 ff20 	bl	8005a70 <_free_r>
 8004c30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004c32:	b111      	cbz	r1, 8004c3a <_reclaim_reent+0x5e>
 8004c34:	4620      	mov	r0, r4
 8004c36:	f000 ff1b 	bl	8005a70 <_free_r>
 8004c3a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004c3c:	b111      	cbz	r1, 8004c44 <_reclaim_reent+0x68>
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f000 ff16 	bl	8005a70 <_free_r>
 8004c44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004c46:	b111      	cbz	r1, 8004c4e <_reclaim_reent+0x72>
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f000 ff11 	bl	8005a70 <_free_r>
 8004c4e:	6a23      	ldr	r3, [r4, #32]
 8004c50:	b1b3      	cbz	r3, 8004c80 <_reclaim_reent+0xa4>
 8004c52:	4620      	mov	r0, r4
 8004c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c58:	4718      	bx	r3
 8004c5a:	5949      	ldr	r1, [r1, r5]
 8004c5c:	b941      	cbnz	r1, 8004c70 <_reclaim_reent+0x94>
 8004c5e:	3504      	adds	r5, #4
 8004c60:	69e3      	ldr	r3, [r4, #28]
 8004c62:	2d80      	cmp	r5, #128	; 0x80
 8004c64:	68d9      	ldr	r1, [r3, #12]
 8004c66:	d1f8      	bne.n	8004c5a <_reclaim_reent+0x7e>
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f000 ff01 	bl	8005a70 <_free_r>
 8004c6e:	e7c0      	b.n	8004bf2 <_reclaim_reent+0x16>
 8004c70:	680e      	ldr	r6, [r1, #0]
 8004c72:	4620      	mov	r0, r4
 8004c74:	f000 fefc 	bl	8005a70 <_free_r>
 8004c78:	4631      	mov	r1, r6
 8004c7a:	e7ef      	b.n	8004c5c <_reclaim_reent+0x80>
 8004c7c:	2500      	movs	r5, #0
 8004c7e:	e7ef      	b.n	8004c60 <_reclaim_reent+0x84>
 8004c80:	bd70      	pop	{r4, r5, r6, pc}
 8004c82:	bf00      	nop
 8004c84:	20000068 	.word	0x20000068

08004c88 <_lseek_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	4611      	mov	r1, r2
 8004c90:	2200      	movs	r2, #0
 8004c92:	4d05      	ldr	r5, [pc, #20]	; (8004ca8 <_lseek_r+0x20>)
 8004c94:	602a      	str	r2, [r5, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f7fc fb48 	bl	800132c <_lseek>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d102      	bne.n	8004ca6 <_lseek_r+0x1e>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	b103      	cbz	r3, 8004ca6 <_lseek_r+0x1e>
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}
 8004ca8:	200013b8 	.word	0x200013b8

08004cac <_read_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4d05      	ldr	r5, [pc, #20]	; (8004ccc <_read_r+0x20>)
 8004cb8:	602a      	str	r2, [r5, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f7fc faf5 	bl	80012aa <_read>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d102      	bne.n	8004cca <_read_r+0x1e>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	b103      	cbz	r3, 8004cca <_read_r+0x1e>
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	200013b8 	.word	0x200013b8

08004cd0 <_write_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	2200      	movs	r2, #0
 8004cda:	4d05      	ldr	r5, [pc, #20]	; (8004cf0 <_write_r+0x20>)
 8004cdc:	602a      	str	r2, [r5, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f7fc f84a 	bl	8000d78 <_write>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d102      	bne.n	8004cee <_write_r+0x1e>
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	b103      	cbz	r3, 8004cee <_write_r+0x1e>
 8004cec:	6023      	str	r3, [r4, #0]
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	200013b8 	.word	0x200013b8

08004cf4 <__errno>:
 8004cf4:	4b01      	ldr	r3, [pc, #4]	; (8004cfc <__errno+0x8>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000068 	.word	0x20000068

08004d00 <__libc_init_array>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	2600      	movs	r6, #0
 8004d04:	4d0c      	ldr	r5, [pc, #48]	; (8004d38 <__libc_init_array+0x38>)
 8004d06:	4c0d      	ldr	r4, [pc, #52]	; (8004d3c <__libc_init_array+0x3c>)
 8004d08:	1b64      	subs	r4, r4, r5
 8004d0a:	10a4      	asrs	r4, r4, #2
 8004d0c:	42a6      	cmp	r6, r4
 8004d0e:	d109      	bne.n	8004d24 <__libc_init_array+0x24>
 8004d10:	f003 fbc4 	bl	800849c <_init>
 8004d14:	2600      	movs	r6, #0
 8004d16:	4d0a      	ldr	r5, [pc, #40]	; (8004d40 <__libc_init_array+0x40>)
 8004d18:	4c0a      	ldr	r4, [pc, #40]	; (8004d44 <__libc_init_array+0x44>)
 8004d1a:	1b64      	subs	r4, r4, r5
 8004d1c:	10a4      	asrs	r4, r4, #2
 8004d1e:	42a6      	cmp	r6, r4
 8004d20:	d105      	bne.n	8004d2e <__libc_init_array+0x2e>
 8004d22:	bd70      	pop	{r4, r5, r6, pc}
 8004d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d28:	4798      	blx	r3
 8004d2a:	3601      	adds	r6, #1
 8004d2c:	e7ee      	b.n	8004d0c <__libc_init_array+0xc>
 8004d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d32:	4798      	blx	r3
 8004d34:	3601      	adds	r6, #1
 8004d36:	e7f2      	b.n	8004d1e <__libc_init_array+0x1e>
 8004d38:	08008a28 	.word	0x08008a28
 8004d3c:	08008a28 	.word	0x08008a28
 8004d40:	08008a28 	.word	0x08008a28
 8004d44:	08008a2c 	.word	0x08008a2c

08004d48 <__retarget_lock_init_recursive>:
 8004d48:	4770      	bx	lr

08004d4a <__retarget_lock_acquire_recursive>:
 8004d4a:	4770      	bx	lr

08004d4c <__retarget_lock_release_recursive>:
 8004d4c:	4770      	bx	lr

08004d4e <memchr>:
 8004d4e:	4603      	mov	r3, r0
 8004d50:	b510      	push	{r4, lr}
 8004d52:	b2c9      	uxtb	r1, r1
 8004d54:	4402      	add	r2, r0
 8004d56:	4293      	cmp	r3, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	d101      	bne.n	8004d60 <memchr+0x12>
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	e003      	b.n	8004d68 <memchr+0x1a>
 8004d60:	7804      	ldrb	r4, [r0, #0]
 8004d62:	3301      	adds	r3, #1
 8004d64:	428c      	cmp	r4, r1
 8004d66:	d1f6      	bne.n	8004d56 <memchr+0x8>
 8004d68:	bd10      	pop	{r4, pc}

08004d6a <memcpy>:
 8004d6a:	440a      	add	r2, r1
 8004d6c:	4291      	cmp	r1, r2
 8004d6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d72:	d100      	bne.n	8004d76 <memcpy+0xc>
 8004d74:	4770      	bx	lr
 8004d76:	b510      	push	{r4, lr}
 8004d78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d7c:	4291      	cmp	r1, r2
 8004d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d82:	d1f9      	bne.n	8004d78 <memcpy+0xe>
 8004d84:	bd10      	pop	{r4, pc}
	...

08004d88 <nanf>:
 8004d88:	4800      	ldr	r0, [pc, #0]	; (8004d8c <nanf+0x4>)
 8004d8a:	4770      	bx	lr
 8004d8c:	7fc00000 	.word	0x7fc00000

08004d90 <quorem>:
 8004d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	6903      	ldr	r3, [r0, #16]
 8004d96:	690c      	ldr	r4, [r1, #16]
 8004d98:	4607      	mov	r7, r0
 8004d9a:	42a3      	cmp	r3, r4
 8004d9c:	db7f      	blt.n	8004e9e <quorem+0x10e>
 8004d9e:	3c01      	subs	r4, #1
 8004da0:	f100 0514 	add.w	r5, r0, #20
 8004da4:	f101 0814 	add.w	r8, r1, #20
 8004da8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004db2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004db6:	3301      	adds	r3, #1
 8004db8:	429a      	cmp	r2, r3
 8004dba:	fbb2 f6f3 	udiv	r6, r2, r3
 8004dbe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004dc2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004dc6:	d331      	bcc.n	8004e2c <quorem+0x9c>
 8004dc8:	f04f 0e00 	mov.w	lr, #0
 8004dcc:	4640      	mov	r0, r8
 8004dce:	46ac      	mov	ip, r5
 8004dd0:	46f2      	mov	sl, lr
 8004dd2:	f850 2b04 	ldr.w	r2, [r0], #4
 8004dd6:	b293      	uxth	r3, r2
 8004dd8:	fb06 e303 	mla	r3, r6, r3, lr
 8004ddc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004de0:	0c1a      	lsrs	r2, r3, #16
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	fb06 220e 	mla	r2, r6, lr, r2
 8004de8:	ebaa 0303 	sub.w	r3, sl, r3
 8004dec:	f8dc a000 	ldr.w	sl, [ip]
 8004df0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004df4:	fa1f fa8a 	uxth.w	sl, sl
 8004df8:	4453      	add	r3, sl
 8004dfa:	f8dc a000 	ldr.w	sl, [ip]
 8004dfe:	b292      	uxth	r2, r2
 8004e00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e0e:	4581      	cmp	r9, r0
 8004e10:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e14:	f84c 3b04 	str.w	r3, [ip], #4
 8004e18:	d2db      	bcs.n	8004dd2 <quorem+0x42>
 8004e1a:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e1e:	b92b      	cbnz	r3, 8004e2c <quorem+0x9c>
 8004e20:	9b01      	ldr	r3, [sp, #4]
 8004e22:	3b04      	subs	r3, #4
 8004e24:	429d      	cmp	r5, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	d32d      	bcc.n	8004e86 <quorem+0xf6>
 8004e2a:	613c      	str	r4, [r7, #16]
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f001 f9df 	bl	80061f0 <__mcmp>
 8004e32:	2800      	cmp	r0, #0
 8004e34:	db23      	blt.n	8004e7e <quorem+0xee>
 8004e36:	4629      	mov	r1, r5
 8004e38:	2000      	movs	r0, #0
 8004e3a:	3601      	adds	r6, #1
 8004e3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e40:	f8d1 c000 	ldr.w	ip, [r1]
 8004e44:	b293      	uxth	r3, r2
 8004e46:	1ac3      	subs	r3, r0, r3
 8004e48:	0c12      	lsrs	r2, r2, #16
 8004e4a:	fa1f f08c 	uxth.w	r0, ip
 8004e4e:	4403      	add	r3, r0
 8004e50:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004e54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e5e:	45c1      	cmp	r9, r8
 8004e60:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e64:	f841 3b04 	str.w	r3, [r1], #4
 8004e68:	d2e8      	bcs.n	8004e3c <quorem+0xac>
 8004e6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e72:	b922      	cbnz	r2, 8004e7e <quorem+0xee>
 8004e74:	3b04      	subs	r3, #4
 8004e76:	429d      	cmp	r5, r3
 8004e78:	461a      	mov	r2, r3
 8004e7a:	d30a      	bcc.n	8004e92 <quorem+0x102>
 8004e7c:	613c      	str	r4, [r7, #16]
 8004e7e:	4630      	mov	r0, r6
 8004e80:	b003      	add	sp, #12
 8004e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	3b04      	subs	r3, #4
 8004e8a:	2a00      	cmp	r2, #0
 8004e8c:	d1cd      	bne.n	8004e2a <quorem+0x9a>
 8004e8e:	3c01      	subs	r4, #1
 8004e90:	e7c8      	b.n	8004e24 <quorem+0x94>
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	3b04      	subs	r3, #4
 8004e96:	2a00      	cmp	r2, #0
 8004e98:	d1f0      	bne.n	8004e7c <quorem+0xec>
 8004e9a:	3c01      	subs	r4, #1
 8004e9c:	e7eb      	b.n	8004e76 <quorem+0xe6>
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	e7ee      	b.n	8004e80 <quorem+0xf0>
 8004ea2:	0000      	movs	r0, r0
 8004ea4:	0000      	movs	r0, r0
	...

08004ea8 <_dtoa_r>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	4616      	mov	r6, r2
 8004eae:	461f      	mov	r7, r3
 8004eb0:	69c4      	ldr	r4, [r0, #28]
 8004eb2:	b099      	sub	sp, #100	; 0x64
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004eba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004ebe:	b974      	cbnz	r4, 8004ede <_dtoa_r+0x36>
 8004ec0:	2010      	movs	r0, #16
 8004ec2:	f000 fe1d 	bl	8005b00 <malloc>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	61e8      	str	r0, [r5, #28]
 8004eca:	b920      	cbnz	r0, 8004ed6 <_dtoa_r+0x2e>
 8004ecc:	21ef      	movs	r1, #239	; 0xef
 8004ece:	4bac      	ldr	r3, [pc, #688]	; (8005180 <_dtoa_r+0x2d8>)
 8004ed0:	48ac      	ldr	r0, [pc, #688]	; (8005184 <_dtoa_r+0x2dc>)
 8004ed2:	f002 fe1f 	bl	8007b14 <__assert_func>
 8004ed6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004eda:	6004      	str	r4, [r0, #0]
 8004edc:	60c4      	str	r4, [r0, #12]
 8004ede:	69eb      	ldr	r3, [r5, #28]
 8004ee0:	6819      	ldr	r1, [r3, #0]
 8004ee2:	b151      	cbz	r1, 8004efa <_dtoa_r+0x52>
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4093      	lsls	r3, r2
 8004eea:	604a      	str	r2, [r1, #4]
 8004eec:	608b      	str	r3, [r1, #8]
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f000 fefa 	bl	8005ce8 <_Bfree>
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	69eb      	ldr	r3, [r5, #28]
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	1e3b      	subs	r3, r7, #0
 8004efc:	bfaf      	iteee	ge
 8004efe:	2300      	movge	r3, #0
 8004f00:	2201      	movlt	r2, #1
 8004f02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f06:	9305      	strlt	r3, [sp, #20]
 8004f08:	bfa8      	it	ge
 8004f0a:	f8c8 3000 	strge.w	r3, [r8]
 8004f0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004f12:	4b9d      	ldr	r3, [pc, #628]	; (8005188 <_dtoa_r+0x2e0>)
 8004f14:	bfb8      	it	lt
 8004f16:	f8c8 2000 	strlt.w	r2, [r8]
 8004f1a:	ea33 0309 	bics.w	r3, r3, r9
 8004f1e:	d119      	bne.n	8004f54 <_dtoa_r+0xac>
 8004f20:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f2c:	4333      	orrs	r3, r6
 8004f2e:	f000 8589 	beq.w	8005a44 <_dtoa_r+0xb9c>
 8004f32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f34:	b953      	cbnz	r3, 8004f4c <_dtoa_r+0xa4>
 8004f36:	4b95      	ldr	r3, [pc, #596]	; (800518c <_dtoa_r+0x2e4>)
 8004f38:	e023      	b.n	8004f82 <_dtoa_r+0xda>
 8004f3a:	4b95      	ldr	r3, [pc, #596]	; (8005190 <_dtoa_r+0x2e8>)
 8004f3c:	9303      	str	r3, [sp, #12]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	9803      	ldr	r0, [sp, #12]
 8004f46:	b019      	add	sp, #100	; 0x64
 8004f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4c:	4b8f      	ldr	r3, [pc, #572]	; (800518c <_dtoa_r+0x2e4>)
 8004f4e:	9303      	str	r3, [sp, #12]
 8004f50:	3303      	adds	r3, #3
 8004f52:	e7f5      	b.n	8004f40 <_dtoa_r+0x98>
 8004f54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004f5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f60:	2200      	movs	r2, #0
 8004f62:	2300      	movs	r3, #0
 8004f64:	f7fb fd20 	bl	80009a8 <__aeabi_dcmpeq>
 8004f68:	4680      	mov	r8, r0
 8004f6a:	b160      	cbz	r0, 8004f86 <_dtoa_r+0xde>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8562 	beq.w	8005a3e <_dtoa_r+0xb96>
 8004f7a:	4b86      	ldr	r3, [pc, #536]	; (8005194 <_dtoa_r+0x2ec>)
 8004f7c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	9303      	str	r3, [sp, #12]
 8004f84:	e7de      	b.n	8004f44 <_dtoa_r+0x9c>
 8004f86:	ab16      	add	r3, sp, #88	; 0x58
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	ab17      	add	r3, sp, #92	; 0x5c
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	4628      	mov	r0, r5
 8004f90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f94:	f001 fa3c 	bl	8006410 <__d2b>
 8004f98:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f9c:	4682      	mov	sl, r0
 8004f9e:	2c00      	cmp	r4, #0
 8004fa0:	d07e      	beq.n	80050a0 <_dtoa_r+0x1f8>
 8004fa2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fa8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fb0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004fb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004fb8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	4b75      	ldr	r3, [pc, #468]	; (8005198 <_dtoa_r+0x2f0>)
 8004fc2:	f7fb f8d1 	bl	8000168 <__aeabi_dsub>
 8004fc6:	a368      	add	r3, pc, #416	; (adr r3, 8005168 <_dtoa_r+0x2c0>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb fa84 	bl	80004d8 <__aeabi_dmul>
 8004fd0:	a367      	add	r3, pc, #412	; (adr r3, 8005170 <_dtoa_r+0x2c8>)
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	f7fb f8c9 	bl	800016c <__adddf3>
 8004fda:	4606      	mov	r6, r0
 8004fdc:	4620      	mov	r0, r4
 8004fde:	460f      	mov	r7, r1
 8004fe0:	f7fb fa10 	bl	8000404 <__aeabi_i2d>
 8004fe4:	a364      	add	r3, pc, #400	; (adr r3, 8005178 <_dtoa_r+0x2d0>)
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	f7fb fa75 	bl	80004d8 <__aeabi_dmul>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	4639      	mov	r1, r7
 8004ff6:	f7fb f8b9 	bl	800016c <__adddf3>
 8004ffa:	4606      	mov	r6, r0
 8004ffc:	460f      	mov	r7, r1
 8004ffe:	f7fb fd1b 	bl	8000a38 <__aeabi_d2iz>
 8005002:	2200      	movs	r2, #0
 8005004:	4683      	mov	fp, r0
 8005006:	2300      	movs	r3, #0
 8005008:	4630      	mov	r0, r6
 800500a:	4639      	mov	r1, r7
 800500c:	f7fb fcd6 	bl	80009bc <__aeabi_dcmplt>
 8005010:	b148      	cbz	r0, 8005026 <_dtoa_r+0x17e>
 8005012:	4658      	mov	r0, fp
 8005014:	f7fb f9f6 	bl	8000404 <__aeabi_i2d>
 8005018:	4632      	mov	r2, r6
 800501a:	463b      	mov	r3, r7
 800501c:	f7fb fcc4 	bl	80009a8 <__aeabi_dcmpeq>
 8005020:	b908      	cbnz	r0, 8005026 <_dtoa_r+0x17e>
 8005022:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005026:	f1bb 0f16 	cmp.w	fp, #22
 800502a:	d857      	bhi.n	80050dc <_dtoa_r+0x234>
 800502c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005030:	4b5a      	ldr	r3, [pc, #360]	; (800519c <_dtoa_r+0x2f4>)
 8005032:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	f7fb fcbf 	bl	80009bc <__aeabi_dcmplt>
 800503e:	2800      	cmp	r0, #0
 8005040:	d04e      	beq.n	80050e0 <_dtoa_r+0x238>
 8005042:	2300      	movs	r3, #0
 8005044:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005048:	930f      	str	r3, [sp, #60]	; 0x3c
 800504a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800504c:	1b1b      	subs	r3, r3, r4
 800504e:	1e5a      	subs	r2, r3, #1
 8005050:	bf46      	itte	mi
 8005052:	f1c3 0901 	rsbmi	r9, r3, #1
 8005056:	2300      	movmi	r3, #0
 8005058:	f04f 0900 	movpl.w	r9, #0
 800505c:	9209      	str	r2, [sp, #36]	; 0x24
 800505e:	bf48      	it	mi
 8005060:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005062:	f1bb 0f00 	cmp.w	fp, #0
 8005066:	db3d      	blt.n	80050e4 <_dtoa_r+0x23c>
 8005068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800506a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800506e:	445b      	add	r3, fp
 8005070:	9309      	str	r3, [sp, #36]	; 0x24
 8005072:	2300      	movs	r3, #0
 8005074:	930a      	str	r3, [sp, #40]	; 0x28
 8005076:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005078:	2b09      	cmp	r3, #9
 800507a:	d867      	bhi.n	800514c <_dtoa_r+0x2a4>
 800507c:	2b05      	cmp	r3, #5
 800507e:	bfc4      	itt	gt
 8005080:	3b04      	subgt	r3, #4
 8005082:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005084:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005086:	bfc8      	it	gt
 8005088:	2400      	movgt	r4, #0
 800508a:	f1a3 0302 	sub.w	r3, r3, #2
 800508e:	bfd8      	it	le
 8005090:	2401      	movle	r4, #1
 8005092:	2b03      	cmp	r3, #3
 8005094:	f200 8086 	bhi.w	80051a4 <_dtoa_r+0x2fc>
 8005098:	e8df f003 	tbb	[pc, r3]
 800509c:	5637392c 	.word	0x5637392c
 80050a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80050a4:	441c      	add	r4, r3
 80050a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	bfc1      	itttt	gt
 80050ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80050b2:	fa09 f903 	lslgt.w	r9, r9, r3
 80050b6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80050ba:	fa26 f303 	lsrgt.w	r3, r6, r3
 80050be:	bfd6      	itet	le
 80050c0:	f1c3 0320 	rsble	r3, r3, #32
 80050c4:	ea49 0003 	orrgt.w	r0, r9, r3
 80050c8:	fa06 f003 	lslle.w	r0, r6, r3
 80050cc:	f7fb f98a 	bl	80003e4 <__aeabi_ui2d>
 80050d0:	2201      	movs	r2, #1
 80050d2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80050d6:	3c01      	subs	r4, #1
 80050d8:	9213      	str	r2, [sp, #76]	; 0x4c
 80050da:	e76f      	b.n	8004fbc <_dtoa_r+0x114>
 80050dc:	2301      	movs	r3, #1
 80050de:	e7b3      	b.n	8005048 <_dtoa_r+0x1a0>
 80050e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80050e2:	e7b2      	b.n	800504a <_dtoa_r+0x1a2>
 80050e4:	f1cb 0300 	rsb	r3, fp, #0
 80050e8:	930a      	str	r3, [sp, #40]	; 0x28
 80050ea:	2300      	movs	r3, #0
 80050ec:	eba9 090b 	sub.w	r9, r9, fp
 80050f0:	930e      	str	r3, [sp, #56]	; 0x38
 80050f2:	e7c0      	b.n	8005076 <_dtoa_r+0x1ce>
 80050f4:	2300      	movs	r3, #0
 80050f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80050f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	dc55      	bgt.n	80051aa <_dtoa_r+0x302>
 80050fe:	2301      	movs	r3, #1
 8005100:	461a      	mov	r2, r3
 8005102:	9306      	str	r3, [sp, #24]
 8005104:	9308      	str	r3, [sp, #32]
 8005106:	9223      	str	r2, [sp, #140]	; 0x8c
 8005108:	e00b      	b.n	8005122 <_dtoa_r+0x27a>
 800510a:	2301      	movs	r3, #1
 800510c:	e7f3      	b.n	80050f6 <_dtoa_r+0x24e>
 800510e:	2300      	movs	r3, #0
 8005110:	930b      	str	r3, [sp, #44]	; 0x2c
 8005112:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005114:	445b      	add	r3, fp
 8005116:	9306      	str	r3, [sp, #24]
 8005118:	3301      	adds	r3, #1
 800511a:	2b01      	cmp	r3, #1
 800511c:	9308      	str	r3, [sp, #32]
 800511e:	bfb8      	it	lt
 8005120:	2301      	movlt	r3, #1
 8005122:	2100      	movs	r1, #0
 8005124:	2204      	movs	r2, #4
 8005126:	69e8      	ldr	r0, [r5, #28]
 8005128:	f102 0614 	add.w	r6, r2, #20
 800512c:	429e      	cmp	r6, r3
 800512e:	d940      	bls.n	80051b2 <_dtoa_r+0x30a>
 8005130:	6041      	str	r1, [r0, #4]
 8005132:	4628      	mov	r0, r5
 8005134:	f000 fd98 	bl	8005c68 <_Balloc>
 8005138:	9003      	str	r0, [sp, #12]
 800513a:	2800      	cmp	r0, #0
 800513c:	d13c      	bne.n	80051b8 <_dtoa_r+0x310>
 800513e:	4602      	mov	r2, r0
 8005140:	f240 11af 	movw	r1, #431	; 0x1af
 8005144:	4b16      	ldr	r3, [pc, #88]	; (80051a0 <_dtoa_r+0x2f8>)
 8005146:	e6c3      	b.n	8004ed0 <_dtoa_r+0x28>
 8005148:	2301      	movs	r3, #1
 800514a:	e7e1      	b.n	8005110 <_dtoa_r+0x268>
 800514c:	2401      	movs	r4, #1
 800514e:	2300      	movs	r3, #0
 8005150:	940b      	str	r4, [sp, #44]	; 0x2c
 8005152:	9322      	str	r3, [sp, #136]	; 0x88
 8005154:	f04f 33ff 	mov.w	r3, #4294967295
 8005158:	2200      	movs	r2, #0
 800515a:	9306      	str	r3, [sp, #24]
 800515c:	9308      	str	r3, [sp, #32]
 800515e:	2312      	movs	r3, #18
 8005160:	e7d1      	b.n	8005106 <_dtoa_r+0x25e>
 8005162:	bf00      	nop
 8005164:	f3af 8000 	nop.w
 8005168:	636f4361 	.word	0x636f4361
 800516c:	3fd287a7 	.word	0x3fd287a7
 8005170:	8b60c8b3 	.word	0x8b60c8b3
 8005174:	3fc68a28 	.word	0x3fc68a28
 8005178:	509f79fb 	.word	0x509f79fb
 800517c:	3fd34413 	.word	0x3fd34413
 8005180:	08008644 	.word	0x08008644
 8005184:	0800865b 	.word	0x0800865b
 8005188:	7ff00000 	.word	0x7ff00000
 800518c:	08008640 	.word	0x08008640
 8005190:	08008637 	.word	0x08008637
 8005194:	0800860f 	.word	0x0800860f
 8005198:	3ff80000 	.word	0x3ff80000
 800519c:	08008748 	.word	0x08008748
 80051a0:	080086b3 	.word	0x080086b3
 80051a4:	2301      	movs	r3, #1
 80051a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80051a8:	e7d4      	b.n	8005154 <_dtoa_r+0x2ac>
 80051aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051ac:	9306      	str	r3, [sp, #24]
 80051ae:	9308      	str	r3, [sp, #32]
 80051b0:	e7b7      	b.n	8005122 <_dtoa_r+0x27a>
 80051b2:	3101      	adds	r1, #1
 80051b4:	0052      	lsls	r2, r2, #1
 80051b6:	e7b7      	b.n	8005128 <_dtoa_r+0x280>
 80051b8:	69eb      	ldr	r3, [r5, #28]
 80051ba:	9a03      	ldr	r2, [sp, #12]
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	9b08      	ldr	r3, [sp, #32]
 80051c0:	2b0e      	cmp	r3, #14
 80051c2:	f200 80a8 	bhi.w	8005316 <_dtoa_r+0x46e>
 80051c6:	2c00      	cmp	r4, #0
 80051c8:	f000 80a5 	beq.w	8005316 <_dtoa_r+0x46e>
 80051cc:	f1bb 0f00 	cmp.w	fp, #0
 80051d0:	dd34      	ble.n	800523c <_dtoa_r+0x394>
 80051d2:	4b9a      	ldr	r3, [pc, #616]	; (800543c <_dtoa_r+0x594>)
 80051d4:	f00b 020f 	and.w	r2, fp, #15
 80051d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80051e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80051e8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80051ec:	d016      	beq.n	800521c <_dtoa_r+0x374>
 80051ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051f2:	4b93      	ldr	r3, [pc, #588]	; (8005440 <_dtoa_r+0x598>)
 80051f4:	2703      	movs	r7, #3
 80051f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051fa:	f7fb fa97 	bl	800072c <__aeabi_ddiv>
 80051fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005202:	f004 040f 	and.w	r4, r4, #15
 8005206:	4e8e      	ldr	r6, [pc, #568]	; (8005440 <_dtoa_r+0x598>)
 8005208:	b954      	cbnz	r4, 8005220 <_dtoa_r+0x378>
 800520a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800520e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005212:	f7fb fa8b 	bl	800072c <__aeabi_ddiv>
 8005216:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800521a:	e029      	b.n	8005270 <_dtoa_r+0x3c8>
 800521c:	2702      	movs	r7, #2
 800521e:	e7f2      	b.n	8005206 <_dtoa_r+0x35e>
 8005220:	07e1      	lsls	r1, r4, #31
 8005222:	d508      	bpl.n	8005236 <_dtoa_r+0x38e>
 8005224:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005228:	e9d6 2300 	ldrd	r2, r3, [r6]
 800522c:	f7fb f954 	bl	80004d8 <__aeabi_dmul>
 8005230:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005234:	3701      	adds	r7, #1
 8005236:	1064      	asrs	r4, r4, #1
 8005238:	3608      	adds	r6, #8
 800523a:	e7e5      	b.n	8005208 <_dtoa_r+0x360>
 800523c:	f000 80a5 	beq.w	800538a <_dtoa_r+0x4e2>
 8005240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005244:	f1cb 0400 	rsb	r4, fp, #0
 8005248:	4b7c      	ldr	r3, [pc, #496]	; (800543c <_dtoa_r+0x594>)
 800524a:	f004 020f 	and.w	r2, r4, #15
 800524e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	f7fb f93f 	bl	80004d8 <__aeabi_dmul>
 800525a:	2702      	movs	r7, #2
 800525c:	2300      	movs	r3, #0
 800525e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005262:	4e77      	ldr	r6, [pc, #476]	; (8005440 <_dtoa_r+0x598>)
 8005264:	1124      	asrs	r4, r4, #4
 8005266:	2c00      	cmp	r4, #0
 8005268:	f040 8084 	bne.w	8005374 <_dtoa_r+0x4cc>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1d2      	bne.n	8005216 <_dtoa_r+0x36e>
 8005270:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005274:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8087 	beq.w	800538e <_dtoa_r+0x4e6>
 8005280:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005284:	2200      	movs	r2, #0
 8005286:	4b6f      	ldr	r3, [pc, #444]	; (8005444 <_dtoa_r+0x59c>)
 8005288:	f7fb fb98 	bl	80009bc <__aeabi_dcmplt>
 800528c:	2800      	cmp	r0, #0
 800528e:	d07e      	beq.n	800538e <_dtoa_r+0x4e6>
 8005290:	9b08      	ldr	r3, [sp, #32]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d07b      	beq.n	800538e <_dtoa_r+0x4e6>
 8005296:	9b06      	ldr	r3, [sp, #24]
 8005298:	2b00      	cmp	r3, #0
 800529a:	dd38      	ble.n	800530e <_dtoa_r+0x466>
 800529c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052a0:	2200      	movs	r2, #0
 80052a2:	4b69      	ldr	r3, [pc, #420]	; (8005448 <_dtoa_r+0x5a0>)
 80052a4:	f7fb f918 	bl	80004d8 <__aeabi_dmul>
 80052a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052ac:	9c06      	ldr	r4, [sp, #24]
 80052ae:	f10b 38ff 	add.w	r8, fp, #4294967295
 80052b2:	3701      	adds	r7, #1
 80052b4:	4638      	mov	r0, r7
 80052b6:	f7fb f8a5 	bl	8000404 <__aeabi_i2d>
 80052ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052be:	f7fb f90b 	bl	80004d8 <__aeabi_dmul>
 80052c2:	2200      	movs	r2, #0
 80052c4:	4b61      	ldr	r3, [pc, #388]	; (800544c <_dtoa_r+0x5a4>)
 80052c6:	f7fa ff51 	bl	800016c <__adddf3>
 80052ca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80052ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052d2:	9611      	str	r6, [sp, #68]	; 0x44
 80052d4:	2c00      	cmp	r4, #0
 80052d6:	d15d      	bne.n	8005394 <_dtoa_r+0x4ec>
 80052d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052dc:	2200      	movs	r2, #0
 80052de:	4b5c      	ldr	r3, [pc, #368]	; (8005450 <_dtoa_r+0x5a8>)
 80052e0:	f7fa ff42 	bl	8000168 <__aeabi_dsub>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052ec:	4633      	mov	r3, r6
 80052ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052f0:	f7fb fb82 	bl	80009f8 <__aeabi_dcmpgt>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	f040 8295 	bne.w	8005824 <_dtoa_r+0x97c>
 80052fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005300:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005304:	f7fb fb5a 	bl	80009bc <__aeabi_dcmplt>
 8005308:	2800      	cmp	r0, #0
 800530a:	f040 8289 	bne.w	8005820 <_dtoa_r+0x978>
 800530e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005312:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005316:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005318:	2b00      	cmp	r3, #0
 800531a:	f2c0 8151 	blt.w	80055c0 <_dtoa_r+0x718>
 800531e:	f1bb 0f0e 	cmp.w	fp, #14
 8005322:	f300 814d 	bgt.w	80055c0 <_dtoa_r+0x718>
 8005326:	4b45      	ldr	r3, [pc, #276]	; (800543c <_dtoa_r+0x594>)
 8005328:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800532c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005330:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005334:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005336:	2b00      	cmp	r3, #0
 8005338:	f280 80da 	bge.w	80054f0 <_dtoa_r+0x648>
 800533c:	9b08      	ldr	r3, [sp, #32]
 800533e:	2b00      	cmp	r3, #0
 8005340:	f300 80d6 	bgt.w	80054f0 <_dtoa_r+0x648>
 8005344:	f040 826b 	bne.w	800581e <_dtoa_r+0x976>
 8005348:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800534c:	2200      	movs	r2, #0
 800534e:	4b40      	ldr	r3, [pc, #256]	; (8005450 <_dtoa_r+0x5a8>)
 8005350:	f7fb f8c2 	bl	80004d8 <__aeabi_dmul>
 8005354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005358:	f7fb fb44 	bl	80009e4 <__aeabi_dcmpge>
 800535c:	9c08      	ldr	r4, [sp, #32]
 800535e:	4626      	mov	r6, r4
 8005360:	2800      	cmp	r0, #0
 8005362:	f040 8241 	bne.w	80057e8 <_dtoa_r+0x940>
 8005366:	2331      	movs	r3, #49	; 0x31
 8005368:	9f03      	ldr	r7, [sp, #12]
 800536a:	f10b 0b01 	add.w	fp, fp, #1
 800536e:	f807 3b01 	strb.w	r3, [r7], #1
 8005372:	e23d      	b.n	80057f0 <_dtoa_r+0x948>
 8005374:	07e2      	lsls	r2, r4, #31
 8005376:	d505      	bpl.n	8005384 <_dtoa_r+0x4dc>
 8005378:	e9d6 2300 	ldrd	r2, r3, [r6]
 800537c:	f7fb f8ac 	bl	80004d8 <__aeabi_dmul>
 8005380:	2301      	movs	r3, #1
 8005382:	3701      	adds	r7, #1
 8005384:	1064      	asrs	r4, r4, #1
 8005386:	3608      	adds	r6, #8
 8005388:	e76d      	b.n	8005266 <_dtoa_r+0x3be>
 800538a:	2702      	movs	r7, #2
 800538c:	e770      	b.n	8005270 <_dtoa_r+0x3c8>
 800538e:	46d8      	mov	r8, fp
 8005390:	9c08      	ldr	r4, [sp, #32]
 8005392:	e78f      	b.n	80052b4 <_dtoa_r+0x40c>
 8005394:	9903      	ldr	r1, [sp, #12]
 8005396:	4b29      	ldr	r3, [pc, #164]	; (800543c <_dtoa_r+0x594>)
 8005398:	4421      	add	r1, r4
 800539a:	9112      	str	r1, [sp, #72]	; 0x48
 800539c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800539e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053a2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80053a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053aa:	2900      	cmp	r1, #0
 80053ac:	d054      	beq.n	8005458 <_dtoa_r+0x5b0>
 80053ae:	2000      	movs	r0, #0
 80053b0:	4928      	ldr	r1, [pc, #160]	; (8005454 <_dtoa_r+0x5ac>)
 80053b2:	f7fb f9bb 	bl	800072c <__aeabi_ddiv>
 80053b6:	463b      	mov	r3, r7
 80053b8:	4632      	mov	r2, r6
 80053ba:	f7fa fed5 	bl	8000168 <__aeabi_dsub>
 80053be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053c2:	9f03      	ldr	r7, [sp, #12]
 80053c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053c8:	f7fb fb36 	bl	8000a38 <__aeabi_d2iz>
 80053cc:	4604      	mov	r4, r0
 80053ce:	f7fb f819 	bl	8000404 <__aeabi_i2d>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053da:	f7fa fec5 	bl	8000168 <__aeabi_dsub>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	3430      	adds	r4, #48	; 0x30
 80053e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053ec:	f807 4b01 	strb.w	r4, [r7], #1
 80053f0:	f7fb fae4 	bl	80009bc <__aeabi_dcmplt>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	d173      	bne.n	80054e0 <_dtoa_r+0x638>
 80053f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053fc:	2000      	movs	r0, #0
 80053fe:	4911      	ldr	r1, [pc, #68]	; (8005444 <_dtoa_r+0x59c>)
 8005400:	f7fa feb2 	bl	8000168 <__aeabi_dsub>
 8005404:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005408:	f7fb fad8 	bl	80009bc <__aeabi_dcmplt>
 800540c:	2800      	cmp	r0, #0
 800540e:	f040 80b6 	bne.w	800557e <_dtoa_r+0x6d6>
 8005412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005414:	429f      	cmp	r7, r3
 8005416:	f43f af7a 	beq.w	800530e <_dtoa_r+0x466>
 800541a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800541e:	2200      	movs	r2, #0
 8005420:	4b09      	ldr	r3, [pc, #36]	; (8005448 <_dtoa_r+0x5a0>)
 8005422:	f7fb f859 	bl	80004d8 <__aeabi_dmul>
 8005426:	2200      	movs	r2, #0
 8005428:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800542c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <_dtoa_r+0x5a0>)
 8005432:	f7fb f851 	bl	80004d8 <__aeabi_dmul>
 8005436:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800543a:	e7c3      	b.n	80053c4 <_dtoa_r+0x51c>
 800543c:	08008748 	.word	0x08008748
 8005440:	08008720 	.word	0x08008720
 8005444:	3ff00000 	.word	0x3ff00000
 8005448:	40240000 	.word	0x40240000
 800544c:	401c0000 	.word	0x401c0000
 8005450:	40140000 	.word	0x40140000
 8005454:	3fe00000 	.word	0x3fe00000
 8005458:	4630      	mov	r0, r6
 800545a:	4639      	mov	r1, r7
 800545c:	f7fb f83c 	bl	80004d8 <__aeabi_dmul>
 8005460:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005462:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005466:	9c03      	ldr	r4, [sp, #12]
 8005468:	9314      	str	r3, [sp, #80]	; 0x50
 800546a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800546e:	f7fb fae3 	bl	8000a38 <__aeabi_d2iz>
 8005472:	9015      	str	r0, [sp, #84]	; 0x54
 8005474:	f7fa ffc6 	bl	8000404 <__aeabi_i2d>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005480:	f7fa fe72 	bl	8000168 <__aeabi_dsub>
 8005484:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005486:	4606      	mov	r6, r0
 8005488:	3330      	adds	r3, #48	; 0x30
 800548a:	f804 3b01 	strb.w	r3, [r4], #1
 800548e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005490:	460f      	mov	r7, r1
 8005492:	429c      	cmp	r4, r3
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	d124      	bne.n	80054e4 <_dtoa_r+0x63c>
 800549a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800549e:	4baf      	ldr	r3, [pc, #700]	; (800575c <_dtoa_r+0x8b4>)
 80054a0:	f7fa fe64 	bl	800016c <__adddf3>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4630      	mov	r0, r6
 80054aa:	4639      	mov	r1, r7
 80054ac:	f7fb faa4 	bl	80009f8 <__aeabi_dcmpgt>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d163      	bne.n	800557c <_dtoa_r+0x6d4>
 80054b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054b8:	2000      	movs	r0, #0
 80054ba:	49a8      	ldr	r1, [pc, #672]	; (800575c <_dtoa_r+0x8b4>)
 80054bc:	f7fa fe54 	bl	8000168 <__aeabi_dsub>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4630      	mov	r0, r6
 80054c6:	4639      	mov	r1, r7
 80054c8:	f7fb fa78 	bl	80009bc <__aeabi_dcmplt>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	f43f af1e 	beq.w	800530e <_dtoa_r+0x466>
 80054d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80054d4:	1e7b      	subs	r3, r7, #1
 80054d6:	9314      	str	r3, [sp, #80]	; 0x50
 80054d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80054dc:	2b30      	cmp	r3, #48	; 0x30
 80054de:	d0f8      	beq.n	80054d2 <_dtoa_r+0x62a>
 80054e0:	46c3      	mov	fp, r8
 80054e2:	e03b      	b.n	800555c <_dtoa_r+0x6b4>
 80054e4:	4b9e      	ldr	r3, [pc, #632]	; (8005760 <_dtoa_r+0x8b8>)
 80054e6:	f7fa fff7 	bl	80004d8 <__aeabi_dmul>
 80054ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054ee:	e7bc      	b.n	800546a <_dtoa_r+0x5c2>
 80054f0:	9f03      	ldr	r7, [sp, #12]
 80054f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80054f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054fa:	4640      	mov	r0, r8
 80054fc:	4649      	mov	r1, r9
 80054fe:	f7fb f915 	bl	800072c <__aeabi_ddiv>
 8005502:	f7fb fa99 	bl	8000a38 <__aeabi_d2iz>
 8005506:	4604      	mov	r4, r0
 8005508:	f7fa ff7c 	bl	8000404 <__aeabi_i2d>
 800550c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005510:	f7fa ffe2 	bl	80004d8 <__aeabi_dmul>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4640      	mov	r0, r8
 800551a:	4649      	mov	r1, r9
 800551c:	f7fa fe24 	bl	8000168 <__aeabi_dsub>
 8005520:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005524:	f807 6b01 	strb.w	r6, [r7], #1
 8005528:	9e03      	ldr	r6, [sp, #12]
 800552a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800552e:	1bbe      	subs	r6, r7, r6
 8005530:	45b4      	cmp	ip, r6
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	d136      	bne.n	80055a6 <_dtoa_r+0x6fe>
 8005538:	f7fa fe18 	bl	800016c <__adddf3>
 800553c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005540:	4680      	mov	r8, r0
 8005542:	4689      	mov	r9, r1
 8005544:	f7fb fa58 	bl	80009f8 <__aeabi_dcmpgt>
 8005548:	bb58      	cbnz	r0, 80055a2 <_dtoa_r+0x6fa>
 800554a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800554e:	4640      	mov	r0, r8
 8005550:	4649      	mov	r1, r9
 8005552:	f7fb fa29 	bl	80009a8 <__aeabi_dcmpeq>
 8005556:	b108      	cbz	r0, 800555c <_dtoa_r+0x6b4>
 8005558:	07e3      	lsls	r3, r4, #31
 800555a:	d422      	bmi.n	80055a2 <_dtoa_r+0x6fa>
 800555c:	4651      	mov	r1, sl
 800555e:	4628      	mov	r0, r5
 8005560:	f000 fbc2 	bl	8005ce8 <_Bfree>
 8005564:	2300      	movs	r3, #0
 8005566:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005568:	703b      	strb	r3, [r7, #0]
 800556a:	f10b 0301 	add.w	r3, fp, #1
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005572:	2b00      	cmp	r3, #0
 8005574:	f43f ace6 	beq.w	8004f44 <_dtoa_r+0x9c>
 8005578:	601f      	str	r7, [r3, #0]
 800557a:	e4e3      	b.n	8004f44 <_dtoa_r+0x9c>
 800557c:	4627      	mov	r7, r4
 800557e:	463b      	mov	r3, r7
 8005580:	461f      	mov	r7, r3
 8005582:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005586:	2a39      	cmp	r2, #57	; 0x39
 8005588:	d107      	bne.n	800559a <_dtoa_r+0x6f2>
 800558a:	9a03      	ldr	r2, [sp, #12]
 800558c:	429a      	cmp	r2, r3
 800558e:	d1f7      	bne.n	8005580 <_dtoa_r+0x6d8>
 8005590:	2230      	movs	r2, #48	; 0x30
 8005592:	9903      	ldr	r1, [sp, #12]
 8005594:	f108 0801 	add.w	r8, r8, #1
 8005598:	700a      	strb	r2, [r1, #0]
 800559a:	781a      	ldrb	r2, [r3, #0]
 800559c:	3201      	adds	r2, #1
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	e79e      	b.n	80054e0 <_dtoa_r+0x638>
 80055a2:	46d8      	mov	r8, fp
 80055a4:	e7eb      	b.n	800557e <_dtoa_r+0x6d6>
 80055a6:	2200      	movs	r2, #0
 80055a8:	4b6d      	ldr	r3, [pc, #436]	; (8005760 <_dtoa_r+0x8b8>)
 80055aa:	f7fa ff95 	bl	80004d8 <__aeabi_dmul>
 80055ae:	2200      	movs	r2, #0
 80055b0:	2300      	movs	r3, #0
 80055b2:	4680      	mov	r8, r0
 80055b4:	4689      	mov	r9, r1
 80055b6:	f7fb f9f7 	bl	80009a8 <__aeabi_dcmpeq>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d09b      	beq.n	80054f6 <_dtoa_r+0x64e>
 80055be:	e7cd      	b.n	800555c <_dtoa_r+0x6b4>
 80055c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055c2:	2a00      	cmp	r2, #0
 80055c4:	f000 80c4 	beq.w	8005750 <_dtoa_r+0x8a8>
 80055c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80055ca:	2a01      	cmp	r2, #1
 80055cc:	f300 80a8 	bgt.w	8005720 <_dtoa_r+0x878>
 80055d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055d2:	2a00      	cmp	r2, #0
 80055d4:	f000 80a0 	beq.w	8005718 <_dtoa_r+0x870>
 80055d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055dc:	464f      	mov	r7, r9
 80055de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055e2:	2101      	movs	r1, #1
 80055e4:	441a      	add	r2, r3
 80055e6:	4628      	mov	r0, r5
 80055e8:	4499      	add	r9, r3
 80055ea:	9209      	str	r2, [sp, #36]	; 0x24
 80055ec:	f000 fc7c 	bl	8005ee8 <__i2b>
 80055f0:	4606      	mov	r6, r0
 80055f2:	b15f      	cbz	r7, 800560c <_dtoa_r+0x764>
 80055f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	dd08      	ble.n	800560c <_dtoa_r+0x764>
 80055fa:	42bb      	cmp	r3, r7
 80055fc:	bfa8      	it	ge
 80055fe:	463b      	movge	r3, r7
 8005600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005602:	eba9 0903 	sub.w	r9, r9, r3
 8005606:	1aff      	subs	r7, r7, r3
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	9309      	str	r3, [sp, #36]	; 0x24
 800560c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800560e:	b1f3      	cbz	r3, 800564e <_dtoa_r+0x7a6>
 8005610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 80a0 	beq.w	8005758 <_dtoa_r+0x8b0>
 8005618:	2c00      	cmp	r4, #0
 800561a:	dd10      	ble.n	800563e <_dtoa_r+0x796>
 800561c:	4631      	mov	r1, r6
 800561e:	4622      	mov	r2, r4
 8005620:	4628      	mov	r0, r5
 8005622:	f000 fd1f 	bl	8006064 <__pow5mult>
 8005626:	4652      	mov	r2, sl
 8005628:	4601      	mov	r1, r0
 800562a:	4606      	mov	r6, r0
 800562c:	4628      	mov	r0, r5
 800562e:	f000 fc71 	bl	8005f14 <__multiply>
 8005632:	4680      	mov	r8, r0
 8005634:	4651      	mov	r1, sl
 8005636:	4628      	mov	r0, r5
 8005638:	f000 fb56 	bl	8005ce8 <_Bfree>
 800563c:	46c2      	mov	sl, r8
 800563e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005640:	1b1a      	subs	r2, r3, r4
 8005642:	d004      	beq.n	800564e <_dtoa_r+0x7a6>
 8005644:	4651      	mov	r1, sl
 8005646:	4628      	mov	r0, r5
 8005648:	f000 fd0c 	bl	8006064 <__pow5mult>
 800564c:	4682      	mov	sl, r0
 800564e:	2101      	movs	r1, #1
 8005650:	4628      	mov	r0, r5
 8005652:	f000 fc49 	bl	8005ee8 <__i2b>
 8005656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005658:	4604      	mov	r4, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	f340 8082 	ble.w	8005764 <_dtoa_r+0x8bc>
 8005660:	461a      	mov	r2, r3
 8005662:	4601      	mov	r1, r0
 8005664:	4628      	mov	r0, r5
 8005666:	f000 fcfd 	bl	8006064 <__pow5mult>
 800566a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800566c:	4604      	mov	r4, r0
 800566e:	2b01      	cmp	r3, #1
 8005670:	dd7b      	ble.n	800576a <_dtoa_r+0x8c2>
 8005672:	f04f 0800 	mov.w	r8, #0
 8005676:	6923      	ldr	r3, [r4, #16]
 8005678:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800567c:	6918      	ldr	r0, [r3, #16]
 800567e:	f000 fbe5 	bl	8005e4c <__hi0bits>
 8005682:	f1c0 0020 	rsb	r0, r0, #32
 8005686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005688:	4418      	add	r0, r3
 800568a:	f010 001f 	ands.w	r0, r0, #31
 800568e:	f000 8092 	beq.w	80057b6 <_dtoa_r+0x90e>
 8005692:	f1c0 0320 	rsb	r3, r0, #32
 8005696:	2b04      	cmp	r3, #4
 8005698:	f340 8085 	ble.w	80057a6 <_dtoa_r+0x8fe>
 800569c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569e:	f1c0 001c 	rsb	r0, r0, #28
 80056a2:	4403      	add	r3, r0
 80056a4:	4481      	add	r9, r0
 80056a6:	4407      	add	r7, r0
 80056a8:	9309      	str	r3, [sp, #36]	; 0x24
 80056aa:	f1b9 0f00 	cmp.w	r9, #0
 80056ae:	dd05      	ble.n	80056bc <_dtoa_r+0x814>
 80056b0:	4651      	mov	r1, sl
 80056b2:	464a      	mov	r2, r9
 80056b4:	4628      	mov	r0, r5
 80056b6:	f000 fd2f 	bl	8006118 <__lshift>
 80056ba:	4682      	mov	sl, r0
 80056bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056be:	2b00      	cmp	r3, #0
 80056c0:	dd05      	ble.n	80056ce <_dtoa_r+0x826>
 80056c2:	4621      	mov	r1, r4
 80056c4:	461a      	mov	r2, r3
 80056c6:	4628      	mov	r0, r5
 80056c8:	f000 fd26 	bl	8006118 <__lshift>
 80056cc:	4604      	mov	r4, r0
 80056ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d072      	beq.n	80057ba <_dtoa_r+0x912>
 80056d4:	4621      	mov	r1, r4
 80056d6:	4650      	mov	r0, sl
 80056d8:	f000 fd8a 	bl	80061f0 <__mcmp>
 80056dc:	2800      	cmp	r0, #0
 80056de:	da6c      	bge.n	80057ba <_dtoa_r+0x912>
 80056e0:	2300      	movs	r3, #0
 80056e2:	4651      	mov	r1, sl
 80056e4:	220a      	movs	r2, #10
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 fb20 	bl	8005d2c <__multadd>
 80056ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ee:	4682      	mov	sl, r0
 80056f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 81ac 	beq.w	8005a52 <_dtoa_r+0xbaa>
 80056fa:	2300      	movs	r3, #0
 80056fc:	4631      	mov	r1, r6
 80056fe:	220a      	movs	r2, #10
 8005700:	4628      	mov	r0, r5
 8005702:	f000 fb13 	bl	8005d2c <__multadd>
 8005706:	9b06      	ldr	r3, [sp, #24]
 8005708:	4606      	mov	r6, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	f300 8093 	bgt.w	8005836 <_dtoa_r+0x98e>
 8005710:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005712:	2b02      	cmp	r3, #2
 8005714:	dc59      	bgt.n	80057ca <_dtoa_r+0x922>
 8005716:	e08e      	b.n	8005836 <_dtoa_r+0x98e>
 8005718:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800571a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800571e:	e75d      	b.n	80055dc <_dtoa_r+0x734>
 8005720:	9b08      	ldr	r3, [sp, #32]
 8005722:	1e5c      	subs	r4, r3, #1
 8005724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005726:	42a3      	cmp	r3, r4
 8005728:	bfbf      	itttt	lt
 800572a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800572c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800572e:	1ae3      	sublt	r3, r4, r3
 8005730:	18d2      	addlt	r2, r2, r3
 8005732:	bfa8      	it	ge
 8005734:	1b1c      	subge	r4, r3, r4
 8005736:	9b08      	ldr	r3, [sp, #32]
 8005738:	bfbe      	ittt	lt
 800573a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800573c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800573e:	2400      	movlt	r4, #0
 8005740:	2b00      	cmp	r3, #0
 8005742:	bfb5      	itete	lt
 8005744:	eba9 0703 	sublt.w	r7, r9, r3
 8005748:	464f      	movge	r7, r9
 800574a:	2300      	movlt	r3, #0
 800574c:	9b08      	ldrge	r3, [sp, #32]
 800574e:	e747      	b.n	80055e0 <_dtoa_r+0x738>
 8005750:	464f      	mov	r7, r9
 8005752:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005754:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005756:	e74c      	b.n	80055f2 <_dtoa_r+0x74a>
 8005758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800575a:	e773      	b.n	8005644 <_dtoa_r+0x79c>
 800575c:	3fe00000 	.word	0x3fe00000
 8005760:	40240000 	.word	0x40240000
 8005764:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005766:	2b01      	cmp	r3, #1
 8005768:	dc18      	bgt.n	800579c <_dtoa_r+0x8f4>
 800576a:	9b04      	ldr	r3, [sp, #16]
 800576c:	b9b3      	cbnz	r3, 800579c <_dtoa_r+0x8f4>
 800576e:	9b05      	ldr	r3, [sp, #20]
 8005770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005774:	b993      	cbnz	r3, 800579c <_dtoa_r+0x8f4>
 8005776:	9b05      	ldr	r3, [sp, #20]
 8005778:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800577c:	0d1b      	lsrs	r3, r3, #20
 800577e:	051b      	lsls	r3, r3, #20
 8005780:	b17b      	cbz	r3, 80057a2 <_dtoa_r+0x8fa>
 8005782:	f04f 0801 	mov.w	r8, #1
 8005786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005788:	f109 0901 	add.w	r9, r9, #1
 800578c:	3301      	adds	r3, #1
 800578e:	9309      	str	r3, [sp, #36]	; 0x24
 8005790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005792:	2b00      	cmp	r3, #0
 8005794:	f47f af6f 	bne.w	8005676 <_dtoa_r+0x7ce>
 8005798:	2001      	movs	r0, #1
 800579a:	e774      	b.n	8005686 <_dtoa_r+0x7de>
 800579c:	f04f 0800 	mov.w	r8, #0
 80057a0:	e7f6      	b.n	8005790 <_dtoa_r+0x8e8>
 80057a2:	4698      	mov	r8, r3
 80057a4:	e7f4      	b.n	8005790 <_dtoa_r+0x8e8>
 80057a6:	d080      	beq.n	80056aa <_dtoa_r+0x802>
 80057a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057aa:	331c      	adds	r3, #28
 80057ac:	441a      	add	r2, r3
 80057ae:	4499      	add	r9, r3
 80057b0:	441f      	add	r7, r3
 80057b2:	9209      	str	r2, [sp, #36]	; 0x24
 80057b4:	e779      	b.n	80056aa <_dtoa_r+0x802>
 80057b6:	4603      	mov	r3, r0
 80057b8:	e7f6      	b.n	80057a8 <_dtoa_r+0x900>
 80057ba:	9b08      	ldr	r3, [sp, #32]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	dc34      	bgt.n	800582a <_dtoa_r+0x982>
 80057c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	dd31      	ble.n	800582a <_dtoa_r+0x982>
 80057c6:	9b08      	ldr	r3, [sp, #32]
 80057c8:	9306      	str	r3, [sp, #24]
 80057ca:	9b06      	ldr	r3, [sp, #24]
 80057cc:	b963      	cbnz	r3, 80057e8 <_dtoa_r+0x940>
 80057ce:	4621      	mov	r1, r4
 80057d0:	2205      	movs	r2, #5
 80057d2:	4628      	mov	r0, r5
 80057d4:	f000 faaa 	bl	8005d2c <__multadd>
 80057d8:	4601      	mov	r1, r0
 80057da:	4604      	mov	r4, r0
 80057dc:	4650      	mov	r0, sl
 80057de:	f000 fd07 	bl	80061f0 <__mcmp>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	f73f adbf 	bgt.w	8005366 <_dtoa_r+0x4be>
 80057e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057ea:	9f03      	ldr	r7, [sp, #12]
 80057ec:	ea6f 0b03 	mvn.w	fp, r3
 80057f0:	f04f 0800 	mov.w	r8, #0
 80057f4:	4621      	mov	r1, r4
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 fa76 	bl	8005ce8 <_Bfree>
 80057fc:	2e00      	cmp	r6, #0
 80057fe:	f43f aead 	beq.w	800555c <_dtoa_r+0x6b4>
 8005802:	f1b8 0f00 	cmp.w	r8, #0
 8005806:	d005      	beq.n	8005814 <_dtoa_r+0x96c>
 8005808:	45b0      	cmp	r8, r6
 800580a:	d003      	beq.n	8005814 <_dtoa_r+0x96c>
 800580c:	4641      	mov	r1, r8
 800580e:	4628      	mov	r0, r5
 8005810:	f000 fa6a 	bl	8005ce8 <_Bfree>
 8005814:	4631      	mov	r1, r6
 8005816:	4628      	mov	r0, r5
 8005818:	f000 fa66 	bl	8005ce8 <_Bfree>
 800581c:	e69e      	b.n	800555c <_dtoa_r+0x6b4>
 800581e:	2400      	movs	r4, #0
 8005820:	4626      	mov	r6, r4
 8005822:	e7e1      	b.n	80057e8 <_dtoa_r+0x940>
 8005824:	46c3      	mov	fp, r8
 8005826:	4626      	mov	r6, r4
 8005828:	e59d      	b.n	8005366 <_dtoa_r+0x4be>
 800582a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 80c8 	beq.w	80059c2 <_dtoa_r+0xb1a>
 8005832:	9b08      	ldr	r3, [sp, #32]
 8005834:	9306      	str	r3, [sp, #24]
 8005836:	2f00      	cmp	r7, #0
 8005838:	dd05      	ble.n	8005846 <_dtoa_r+0x99e>
 800583a:	4631      	mov	r1, r6
 800583c:	463a      	mov	r2, r7
 800583e:	4628      	mov	r0, r5
 8005840:	f000 fc6a 	bl	8006118 <__lshift>
 8005844:	4606      	mov	r6, r0
 8005846:	f1b8 0f00 	cmp.w	r8, #0
 800584a:	d05b      	beq.n	8005904 <_dtoa_r+0xa5c>
 800584c:	4628      	mov	r0, r5
 800584e:	6871      	ldr	r1, [r6, #4]
 8005850:	f000 fa0a 	bl	8005c68 <_Balloc>
 8005854:	4607      	mov	r7, r0
 8005856:	b928      	cbnz	r0, 8005864 <_dtoa_r+0x9bc>
 8005858:	4602      	mov	r2, r0
 800585a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800585e:	4b81      	ldr	r3, [pc, #516]	; (8005a64 <_dtoa_r+0xbbc>)
 8005860:	f7ff bb36 	b.w	8004ed0 <_dtoa_r+0x28>
 8005864:	6932      	ldr	r2, [r6, #16]
 8005866:	f106 010c 	add.w	r1, r6, #12
 800586a:	3202      	adds	r2, #2
 800586c:	0092      	lsls	r2, r2, #2
 800586e:	300c      	adds	r0, #12
 8005870:	f7ff fa7b 	bl	8004d6a <memcpy>
 8005874:	2201      	movs	r2, #1
 8005876:	4639      	mov	r1, r7
 8005878:	4628      	mov	r0, r5
 800587a:	f000 fc4d 	bl	8006118 <__lshift>
 800587e:	46b0      	mov	r8, r6
 8005880:	4606      	mov	r6, r0
 8005882:	9b03      	ldr	r3, [sp, #12]
 8005884:	9a03      	ldr	r2, [sp, #12]
 8005886:	3301      	adds	r3, #1
 8005888:	9308      	str	r3, [sp, #32]
 800588a:	9b06      	ldr	r3, [sp, #24]
 800588c:	4413      	add	r3, r2
 800588e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005890:	9b04      	ldr	r3, [sp, #16]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	930a      	str	r3, [sp, #40]	; 0x28
 8005898:	9b08      	ldr	r3, [sp, #32]
 800589a:	4621      	mov	r1, r4
 800589c:	3b01      	subs	r3, #1
 800589e:	4650      	mov	r0, sl
 80058a0:	9304      	str	r3, [sp, #16]
 80058a2:	f7ff fa75 	bl	8004d90 <quorem>
 80058a6:	4641      	mov	r1, r8
 80058a8:	9006      	str	r0, [sp, #24]
 80058aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80058ae:	4650      	mov	r0, sl
 80058b0:	f000 fc9e 	bl	80061f0 <__mcmp>
 80058b4:	4632      	mov	r2, r6
 80058b6:	9009      	str	r0, [sp, #36]	; 0x24
 80058b8:	4621      	mov	r1, r4
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 fcb4 	bl	8006228 <__mdiff>
 80058c0:	68c2      	ldr	r2, [r0, #12]
 80058c2:	4607      	mov	r7, r0
 80058c4:	bb02      	cbnz	r2, 8005908 <_dtoa_r+0xa60>
 80058c6:	4601      	mov	r1, r0
 80058c8:	4650      	mov	r0, sl
 80058ca:	f000 fc91 	bl	80061f0 <__mcmp>
 80058ce:	4602      	mov	r2, r0
 80058d0:	4639      	mov	r1, r7
 80058d2:	4628      	mov	r0, r5
 80058d4:	920c      	str	r2, [sp, #48]	; 0x30
 80058d6:	f000 fa07 	bl	8005ce8 <_Bfree>
 80058da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058de:	9f08      	ldr	r7, [sp, #32]
 80058e0:	ea43 0102 	orr.w	r1, r3, r2
 80058e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e6:	4319      	orrs	r1, r3
 80058e8:	d110      	bne.n	800590c <_dtoa_r+0xa64>
 80058ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058ee:	d029      	beq.n	8005944 <_dtoa_r+0xa9c>
 80058f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	dd02      	ble.n	80058fc <_dtoa_r+0xa54>
 80058f6:	9b06      	ldr	r3, [sp, #24]
 80058f8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80058fc:	9b04      	ldr	r3, [sp, #16]
 80058fe:	f883 9000 	strb.w	r9, [r3]
 8005902:	e777      	b.n	80057f4 <_dtoa_r+0x94c>
 8005904:	4630      	mov	r0, r6
 8005906:	e7ba      	b.n	800587e <_dtoa_r+0x9d6>
 8005908:	2201      	movs	r2, #1
 800590a:	e7e1      	b.n	80058d0 <_dtoa_r+0xa28>
 800590c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	db04      	blt.n	800591c <_dtoa_r+0xa74>
 8005912:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005914:	430b      	orrs	r3, r1
 8005916:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005918:	430b      	orrs	r3, r1
 800591a:	d120      	bne.n	800595e <_dtoa_r+0xab6>
 800591c:	2a00      	cmp	r2, #0
 800591e:	dded      	ble.n	80058fc <_dtoa_r+0xa54>
 8005920:	4651      	mov	r1, sl
 8005922:	2201      	movs	r2, #1
 8005924:	4628      	mov	r0, r5
 8005926:	f000 fbf7 	bl	8006118 <__lshift>
 800592a:	4621      	mov	r1, r4
 800592c:	4682      	mov	sl, r0
 800592e:	f000 fc5f 	bl	80061f0 <__mcmp>
 8005932:	2800      	cmp	r0, #0
 8005934:	dc03      	bgt.n	800593e <_dtoa_r+0xa96>
 8005936:	d1e1      	bne.n	80058fc <_dtoa_r+0xa54>
 8005938:	f019 0f01 	tst.w	r9, #1
 800593c:	d0de      	beq.n	80058fc <_dtoa_r+0xa54>
 800593e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005942:	d1d8      	bne.n	80058f6 <_dtoa_r+0xa4e>
 8005944:	2339      	movs	r3, #57	; 0x39
 8005946:	9a04      	ldr	r2, [sp, #16]
 8005948:	7013      	strb	r3, [r2, #0]
 800594a:	463b      	mov	r3, r7
 800594c:	461f      	mov	r7, r3
 800594e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005952:	3b01      	subs	r3, #1
 8005954:	2a39      	cmp	r2, #57	; 0x39
 8005956:	d06b      	beq.n	8005a30 <_dtoa_r+0xb88>
 8005958:	3201      	adds	r2, #1
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e74a      	b.n	80057f4 <_dtoa_r+0x94c>
 800595e:	2a00      	cmp	r2, #0
 8005960:	dd07      	ble.n	8005972 <_dtoa_r+0xaca>
 8005962:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005966:	d0ed      	beq.n	8005944 <_dtoa_r+0xa9c>
 8005968:	9a04      	ldr	r2, [sp, #16]
 800596a:	f109 0301 	add.w	r3, r9, #1
 800596e:	7013      	strb	r3, [r2, #0]
 8005970:	e740      	b.n	80057f4 <_dtoa_r+0x94c>
 8005972:	9b08      	ldr	r3, [sp, #32]
 8005974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005976:	f803 9c01 	strb.w	r9, [r3, #-1]
 800597a:	4293      	cmp	r3, r2
 800597c:	d042      	beq.n	8005a04 <_dtoa_r+0xb5c>
 800597e:	4651      	mov	r1, sl
 8005980:	2300      	movs	r3, #0
 8005982:	220a      	movs	r2, #10
 8005984:	4628      	mov	r0, r5
 8005986:	f000 f9d1 	bl	8005d2c <__multadd>
 800598a:	45b0      	cmp	r8, r6
 800598c:	4682      	mov	sl, r0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	f04f 020a 	mov.w	r2, #10
 8005996:	4641      	mov	r1, r8
 8005998:	4628      	mov	r0, r5
 800599a:	d107      	bne.n	80059ac <_dtoa_r+0xb04>
 800599c:	f000 f9c6 	bl	8005d2c <__multadd>
 80059a0:	4680      	mov	r8, r0
 80059a2:	4606      	mov	r6, r0
 80059a4:	9b08      	ldr	r3, [sp, #32]
 80059a6:	3301      	adds	r3, #1
 80059a8:	9308      	str	r3, [sp, #32]
 80059aa:	e775      	b.n	8005898 <_dtoa_r+0x9f0>
 80059ac:	f000 f9be 	bl	8005d2c <__multadd>
 80059b0:	4631      	mov	r1, r6
 80059b2:	4680      	mov	r8, r0
 80059b4:	2300      	movs	r3, #0
 80059b6:	220a      	movs	r2, #10
 80059b8:	4628      	mov	r0, r5
 80059ba:	f000 f9b7 	bl	8005d2c <__multadd>
 80059be:	4606      	mov	r6, r0
 80059c0:	e7f0      	b.n	80059a4 <_dtoa_r+0xafc>
 80059c2:	9b08      	ldr	r3, [sp, #32]
 80059c4:	9306      	str	r3, [sp, #24]
 80059c6:	9f03      	ldr	r7, [sp, #12]
 80059c8:	4621      	mov	r1, r4
 80059ca:	4650      	mov	r0, sl
 80059cc:	f7ff f9e0 	bl	8004d90 <quorem>
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80059d6:	f807 9b01 	strb.w	r9, [r7], #1
 80059da:	1afa      	subs	r2, r7, r3
 80059dc:	9b06      	ldr	r3, [sp, #24]
 80059de:	4293      	cmp	r3, r2
 80059e0:	dd07      	ble.n	80059f2 <_dtoa_r+0xb4a>
 80059e2:	4651      	mov	r1, sl
 80059e4:	2300      	movs	r3, #0
 80059e6:	220a      	movs	r2, #10
 80059e8:	4628      	mov	r0, r5
 80059ea:	f000 f99f 	bl	8005d2c <__multadd>
 80059ee:	4682      	mov	sl, r0
 80059f0:	e7ea      	b.n	80059c8 <_dtoa_r+0xb20>
 80059f2:	9b06      	ldr	r3, [sp, #24]
 80059f4:	f04f 0800 	mov.w	r8, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bfcc      	ite	gt
 80059fc:	461f      	movgt	r7, r3
 80059fe:	2701      	movle	r7, #1
 8005a00:	9b03      	ldr	r3, [sp, #12]
 8005a02:	441f      	add	r7, r3
 8005a04:	4651      	mov	r1, sl
 8005a06:	2201      	movs	r2, #1
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f000 fb85 	bl	8006118 <__lshift>
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4682      	mov	sl, r0
 8005a12:	f000 fbed 	bl	80061f0 <__mcmp>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	dc97      	bgt.n	800594a <_dtoa_r+0xaa2>
 8005a1a:	d102      	bne.n	8005a22 <_dtoa_r+0xb7a>
 8005a1c:	f019 0f01 	tst.w	r9, #1
 8005a20:	d193      	bne.n	800594a <_dtoa_r+0xaa2>
 8005a22:	463b      	mov	r3, r7
 8005a24:	461f      	mov	r7, r3
 8005a26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a2a:	2a30      	cmp	r2, #48	; 0x30
 8005a2c:	d0fa      	beq.n	8005a24 <_dtoa_r+0xb7c>
 8005a2e:	e6e1      	b.n	80057f4 <_dtoa_r+0x94c>
 8005a30:	9a03      	ldr	r2, [sp, #12]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d18a      	bne.n	800594c <_dtoa_r+0xaa4>
 8005a36:	2331      	movs	r3, #49	; 0x31
 8005a38:	f10b 0b01 	add.w	fp, fp, #1
 8005a3c:	e797      	b.n	800596e <_dtoa_r+0xac6>
 8005a3e:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <_dtoa_r+0xbc0>)
 8005a40:	f7ff ba9f 	b.w	8004f82 <_dtoa_r+0xda>
 8005a44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f47f aa77 	bne.w	8004f3a <_dtoa_r+0x92>
 8005a4c:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <_dtoa_r+0xbc4>)
 8005a4e:	f7ff ba98 	b.w	8004f82 <_dtoa_r+0xda>
 8005a52:	9b06      	ldr	r3, [sp, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	dcb6      	bgt.n	80059c6 <_dtoa_r+0xb1e>
 8005a58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	f73f aeb5 	bgt.w	80057ca <_dtoa_r+0x922>
 8005a60:	e7b1      	b.n	80059c6 <_dtoa_r+0xb1e>
 8005a62:	bf00      	nop
 8005a64:	080086b3 	.word	0x080086b3
 8005a68:	0800860e 	.word	0x0800860e
 8005a6c:	08008637 	.word	0x08008637

08005a70 <_free_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4605      	mov	r5, r0
 8005a74:	2900      	cmp	r1, #0
 8005a76:	d040      	beq.n	8005afa <_free_r+0x8a>
 8005a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a7c:	1f0c      	subs	r4, r1, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bfb8      	it	lt
 8005a82:	18e4      	addlt	r4, r4, r3
 8005a84:	f000 f8e4 	bl	8005c50 <__malloc_lock>
 8005a88:	4a1c      	ldr	r2, [pc, #112]	; (8005afc <_free_r+0x8c>)
 8005a8a:	6813      	ldr	r3, [r2, #0]
 8005a8c:	b933      	cbnz	r3, 8005a9c <_free_r+0x2c>
 8005a8e:	6063      	str	r3, [r4, #4]
 8005a90:	6014      	str	r4, [r2, #0]
 8005a92:	4628      	mov	r0, r5
 8005a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a98:	f000 b8e0 	b.w	8005c5c <__malloc_unlock>
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	d908      	bls.n	8005ab2 <_free_r+0x42>
 8005aa0:	6820      	ldr	r0, [r4, #0]
 8005aa2:	1821      	adds	r1, r4, r0
 8005aa4:	428b      	cmp	r3, r1
 8005aa6:	bf01      	itttt	eq
 8005aa8:	6819      	ldreq	r1, [r3, #0]
 8005aaa:	685b      	ldreq	r3, [r3, #4]
 8005aac:	1809      	addeq	r1, r1, r0
 8005aae:	6021      	streq	r1, [r4, #0]
 8005ab0:	e7ed      	b.n	8005a8e <_free_r+0x1e>
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	b10b      	cbz	r3, 8005abc <_free_r+0x4c>
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	d9fa      	bls.n	8005ab2 <_free_r+0x42>
 8005abc:	6811      	ldr	r1, [r2, #0]
 8005abe:	1850      	adds	r0, r2, r1
 8005ac0:	42a0      	cmp	r0, r4
 8005ac2:	d10b      	bne.n	8005adc <_free_r+0x6c>
 8005ac4:	6820      	ldr	r0, [r4, #0]
 8005ac6:	4401      	add	r1, r0
 8005ac8:	1850      	adds	r0, r2, r1
 8005aca:	4283      	cmp	r3, r0
 8005acc:	6011      	str	r1, [r2, #0]
 8005ace:	d1e0      	bne.n	8005a92 <_free_r+0x22>
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	4408      	add	r0, r1
 8005ad6:	6010      	str	r0, [r2, #0]
 8005ad8:	6053      	str	r3, [r2, #4]
 8005ada:	e7da      	b.n	8005a92 <_free_r+0x22>
 8005adc:	d902      	bls.n	8005ae4 <_free_r+0x74>
 8005ade:	230c      	movs	r3, #12
 8005ae0:	602b      	str	r3, [r5, #0]
 8005ae2:	e7d6      	b.n	8005a92 <_free_r+0x22>
 8005ae4:	6820      	ldr	r0, [r4, #0]
 8005ae6:	1821      	adds	r1, r4, r0
 8005ae8:	428b      	cmp	r3, r1
 8005aea:	bf01      	itttt	eq
 8005aec:	6819      	ldreq	r1, [r3, #0]
 8005aee:	685b      	ldreq	r3, [r3, #4]
 8005af0:	1809      	addeq	r1, r1, r0
 8005af2:	6021      	streq	r1, [r4, #0]
 8005af4:	6063      	str	r3, [r4, #4]
 8005af6:	6054      	str	r4, [r2, #4]
 8005af8:	e7cb      	b.n	8005a92 <_free_r+0x22>
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	200013c0 	.word	0x200013c0

08005b00 <malloc>:
 8005b00:	4b02      	ldr	r3, [pc, #8]	; (8005b0c <malloc+0xc>)
 8005b02:	4601      	mov	r1, r0
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	f000 b823 	b.w	8005b50 <_malloc_r>
 8005b0a:	bf00      	nop
 8005b0c:	20000068 	.word	0x20000068

08005b10 <sbrk_aligned>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	4e0e      	ldr	r6, [pc, #56]	; (8005b4c <sbrk_aligned+0x3c>)
 8005b14:	460c      	mov	r4, r1
 8005b16:	6831      	ldr	r1, [r6, #0]
 8005b18:	4605      	mov	r5, r0
 8005b1a:	b911      	cbnz	r1, 8005b22 <sbrk_aligned+0x12>
 8005b1c:	f001 ffe4 	bl	8007ae8 <_sbrk_r>
 8005b20:	6030      	str	r0, [r6, #0]
 8005b22:	4621      	mov	r1, r4
 8005b24:	4628      	mov	r0, r5
 8005b26:	f001 ffdf 	bl	8007ae8 <_sbrk_r>
 8005b2a:	1c43      	adds	r3, r0, #1
 8005b2c:	d00a      	beq.n	8005b44 <sbrk_aligned+0x34>
 8005b2e:	1cc4      	adds	r4, r0, #3
 8005b30:	f024 0403 	bic.w	r4, r4, #3
 8005b34:	42a0      	cmp	r0, r4
 8005b36:	d007      	beq.n	8005b48 <sbrk_aligned+0x38>
 8005b38:	1a21      	subs	r1, r4, r0
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f001 ffd4 	bl	8007ae8 <_sbrk_r>
 8005b40:	3001      	adds	r0, #1
 8005b42:	d101      	bne.n	8005b48 <sbrk_aligned+0x38>
 8005b44:	f04f 34ff 	mov.w	r4, #4294967295
 8005b48:	4620      	mov	r0, r4
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	200013c4 	.word	0x200013c4

08005b50 <_malloc_r>:
 8005b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b54:	1ccd      	adds	r5, r1, #3
 8005b56:	f025 0503 	bic.w	r5, r5, #3
 8005b5a:	3508      	adds	r5, #8
 8005b5c:	2d0c      	cmp	r5, #12
 8005b5e:	bf38      	it	cc
 8005b60:	250c      	movcc	r5, #12
 8005b62:	2d00      	cmp	r5, #0
 8005b64:	4607      	mov	r7, r0
 8005b66:	db01      	blt.n	8005b6c <_malloc_r+0x1c>
 8005b68:	42a9      	cmp	r1, r5
 8005b6a:	d905      	bls.n	8005b78 <_malloc_r+0x28>
 8005b6c:	230c      	movs	r3, #12
 8005b6e:	2600      	movs	r6, #0
 8005b70:	603b      	str	r3, [r7, #0]
 8005b72:	4630      	mov	r0, r6
 8005b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c4c <_malloc_r+0xfc>
 8005b7c:	f000 f868 	bl	8005c50 <__malloc_lock>
 8005b80:	f8d8 3000 	ldr.w	r3, [r8]
 8005b84:	461c      	mov	r4, r3
 8005b86:	bb5c      	cbnz	r4, 8005be0 <_malloc_r+0x90>
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	f7ff ffc0 	bl	8005b10 <sbrk_aligned>
 8005b90:	1c43      	adds	r3, r0, #1
 8005b92:	4604      	mov	r4, r0
 8005b94:	d155      	bne.n	8005c42 <_malloc_r+0xf2>
 8005b96:	f8d8 4000 	ldr.w	r4, [r8]
 8005b9a:	4626      	mov	r6, r4
 8005b9c:	2e00      	cmp	r6, #0
 8005b9e:	d145      	bne.n	8005c2c <_malloc_r+0xdc>
 8005ba0:	2c00      	cmp	r4, #0
 8005ba2:	d048      	beq.n	8005c36 <_malloc_r+0xe6>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4638      	mov	r0, r7
 8005baa:	eb04 0903 	add.w	r9, r4, r3
 8005bae:	f001 ff9b 	bl	8007ae8 <_sbrk_r>
 8005bb2:	4581      	cmp	r9, r0
 8005bb4:	d13f      	bne.n	8005c36 <_malloc_r+0xe6>
 8005bb6:	6821      	ldr	r1, [r4, #0]
 8005bb8:	4638      	mov	r0, r7
 8005bba:	1a6d      	subs	r5, r5, r1
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	f7ff ffa7 	bl	8005b10 <sbrk_aligned>
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d037      	beq.n	8005c36 <_malloc_r+0xe6>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	442b      	add	r3, r5
 8005bca:	6023      	str	r3, [r4, #0]
 8005bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d038      	beq.n	8005c46 <_malloc_r+0xf6>
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	42a2      	cmp	r2, r4
 8005bd8:	d12b      	bne.n	8005c32 <_malloc_r+0xe2>
 8005bda:	2200      	movs	r2, #0
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	e00f      	b.n	8005c00 <_malloc_r+0xb0>
 8005be0:	6822      	ldr	r2, [r4, #0]
 8005be2:	1b52      	subs	r2, r2, r5
 8005be4:	d41f      	bmi.n	8005c26 <_malloc_r+0xd6>
 8005be6:	2a0b      	cmp	r2, #11
 8005be8:	d917      	bls.n	8005c1a <_malloc_r+0xca>
 8005bea:	1961      	adds	r1, r4, r5
 8005bec:	42a3      	cmp	r3, r4
 8005bee:	6025      	str	r5, [r4, #0]
 8005bf0:	bf18      	it	ne
 8005bf2:	6059      	strne	r1, [r3, #4]
 8005bf4:	6863      	ldr	r3, [r4, #4]
 8005bf6:	bf08      	it	eq
 8005bf8:	f8c8 1000 	streq.w	r1, [r8]
 8005bfc:	5162      	str	r2, [r4, r5]
 8005bfe:	604b      	str	r3, [r1, #4]
 8005c00:	4638      	mov	r0, r7
 8005c02:	f104 060b 	add.w	r6, r4, #11
 8005c06:	f000 f829 	bl	8005c5c <__malloc_unlock>
 8005c0a:	f026 0607 	bic.w	r6, r6, #7
 8005c0e:	1d23      	adds	r3, r4, #4
 8005c10:	1af2      	subs	r2, r6, r3
 8005c12:	d0ae      	beq.n	8005b72 <_malloc_r+0x22>
 8005c14:	1b9b      	subs	r3, r3, r6
 8005c16:	50a3      	str	r3, [r4, r2]
 8005c18:	e7ab      	b.n	8005b72 <_malloc_r+0x22>
 8005c1a:	42a3      	cmp	r3, r4
 8005c1c:	6862      	ldr	r2, [r4, #4]
 8005c1e:	d1dd      	bne.n	8005bdc <_malloc_r+0x8c>
 8005c20:	f8c8 2000 	str.w	r2, [r8]
 8005c24:	e7ec      	b.n	8005c00 <_malloc_r+0xb0>
 8005c26:	4623      	mov	r3, r4
 8005c28:	6864      	ldr	r4, [r4, #4]
 8005c2a:	e7ac      	b.n	8005b86 <_malloc_r+0x36>
 8005c2c:	4634      	mov	r4, r6
 8005c2e:	6876      	ldr	r6, [r6, #4]
 8005c30:	e7b4      	b.n	8005b9c <_malloc_r+0x4c>
 8005c32:	4613      	mov	r3, r2
 8005c34:	e7cc      	b.n	8005bd0 <_malloc_r+0x80>
 8005c36:	230c      	movs	r3, #12
 8005c38:	4638      	mov	r0, r7
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	f000 f80e 	bl	8005c5c <__malloc_unlock>
 8005c40:	e797      	b.n	8005b72 <_malloc_r+0x22>
 8005c42:	6025      	str	r5, [r4, #0]
 8005c44:	e7dc      	b.n	8005c00 <_malloc_r+0xb0>
 8005c46:	605b      	str	r3, [r3, #4]
 8005c48:	deff      	udf	#255	; 0xff
 8005c4a:	bf00      	nop
 8005c4c:	200013c0 	.word	0x200013c0

08005c50 <__malloc_lock>:
 8005c50:	4801      	ldr	r0, [pc, #4]	; (8005c58 <__malloc_lock+0x8>)
 8005c52:	f7ff b87a 	b.w	8004d4a <__retarget_lock_acquire_recursive>
 8005c56:	bf00      	nop
 8005c58:	200013bc 	.word	0x200013bc

08005c5c <__malloc_unlock>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	; (8005c64 <__malloc_unlock+0x8>)
 8005c5e:	f7ff b875 	b.w	8004d4c <__retarget_lock_release_recursive>
 8005c62:	bf00      	nop
 8005c64:	200013bc 	.word	0x200013bc

08005c68 <_Balloc>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	69c6      	ldr	r6, [r0, #28]
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	460d      	mov	r5, r1
 8005c70:	b976      	cbnz	r6, 8005c90 <_Balloc+0x28>
 8005c72:	2010      	movs	r0, #16
 8005c74:	f7ff ff44 	bl	8005b00 <malloc>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	61e0      	str	r0, [r4, #28]
 8005c7c:	b920      	cbnz	r0, 8005c88 <_Balloc+0x20>
 8005c7e:	216b      	movs	r1, #107	; 0x6b
 8005c80:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <_Balloc+0x78>)
 8005c82:	4818      	ldr	r0, [pc, #96]	; (8005ce4 <_Balloc+0x7c>)
 8005c84:	f001 ff46 	bl	8007b14 <__assert_func>
 8005c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c8c:	6006      	str	r6, [r0, #0]
 8005c8e:	60c6      	str	r6, [r0, #12]
 8005c90:	69e6      	ldr	r6, [r4, #28]
 8005c92:	68f3      	ldr	r3, [r6, #12]
 8005c94:	b183      	cbz	r3, 8005cb8 <_Balloc+0x50>
 8005c96:	69e3      	ldr	r3, [r4, #28]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c9e:	b9b8      	cbnz	r0, 8005cd0 <_Balloc+0x68>
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	fa01 f605 	lsl.w	r6, r1, r5
 8005ca6:	1d72      	adds	r2, r6, #5
 8005ca8:	4620      	mov	r0, r4
 8005caa:	0092      	lsls	r2, r2, #2
 8005cac:	f001 ff50 	bl	8007b50 <_calloc_r>
 8005cb0:	b160      	cbz	r0, 8005ccc <_Balloc+0x64>
 8005cb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cb6:	e00e      	b.n	8005cd6 <_Balloc+0x6e>
 8005cb8:	2221      	movs	r2, #33	; 0x21
 8005cba:	2104      	movs	r1, #4
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f001 ff47 	bl	8007b50 <_calloc_r>
 8005cc2:	69e3      	ldr	r3, [r4, #28]
 8005cc4:	60f0      	str	r0, [r6, #12]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e4      	bne.n	8005c96 <_Balloc+0x2e>
 8005ccc:	2000      	movs	r0, #0
 8005cce:	bd70      	pop	{r4, r5, r6, pc}
 8005cd0:	6802      	ldr	r2, [r0, #0]
 8005cd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cdc:	e7f7      	b.n	8005cce <_Balloc+0x66>
 8005cde:	bf00      	nop
 8005ce0:	08008644 	.word	0x08008644
 8005ce4:	080086c4 	.word	0x080086c4

08005ce8 <_Bfree>:
 8005ce8:	b570      	push	{r4, r5, r6, lr}
 8005cea:	69c6      	ldr	r6, [r0, #28]
 8005cec:	4605      	mov	r5, r0
 8005cee:	460c      	mov	r4, r1
 8005cf0:	b976      	cbnz	r6, 8005d10 <_Bfree+0x28>
 8005cf2:	2010      	movs	r0, #16
 8005cf4:	f7ff ff04 	bl	8005b00 <malloc>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	61e8      	str	r0, [r5, #28]
 8005cfc:	b920      	cbnz	r0, 8005d08 <_Bfree+0x20>
 8005cfe:	218f      	movs	r1, #143	; 0x8f
 8005d00:	4b08      	ldr	r3, [pc, #32]	; (8005d24 <_Bfree+0x3c>)
 8005d02:	4809      	ldr	r0, [pc, #36]	; (8005d28 <_Bfree+0x40>)
 8005d04:	f001 ff06 	bl	8007b14 <__assert_func>
 8005d08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d0c:	6006      	str	r6, [r0, #0]
 8005d0e:	60c6      	str	r6, [r0, #12]
 8005d10:	b13c      	cbz	r4, 8005d22 <_Bfree+0x3a>
 8005d12:	69eb      	ldr	r3, [r5, #28]
 8005d14:	6862      	ldr	r2, [r4, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d1c:	6021      	str	r1, [r4, #0]
 8005d1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d22:	bd70      	pop	{r4, r5, r6, pc}
 8005d24:	08008644 	.word	0x08008644
 8005d28:	080086c4 	.word	0x080086c4

08005d2c <__multadd>:
 8005d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d30:	4607      	mov	r7, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	461e      	mov	r6, r3
 8005d36:	2000      	movs	r0, #0
 8005d38:	690d      	ldr	r5, [r1, #16]
 8005d3a:	f101 0c14 	add.w	ip, r1, #20
 8005d3e:	f8dc 3000 	ldr.w	r3, [ip]
 8005d42:	3001      	adds	r0, #1
 8005d44:	b299      	uxth	r1, r3
 8005d46:	fb02 6101 	mla	r1, r2, r1, r6
 8005d4a:	0c1e      	lsrs	r6, r3, #16
 8005d4c:	0c0b      	lsrs	r3, r1, #16
 8005d4e:	fb02 3306 	mla	r3, r2, r6, r3
 8005d52:	b289      	uxth	r1, r1
 8005d54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d58:	4285      	cmp	r5, r0
 8005d5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d5e:	f84c 1b04 	str.w	r1, [ip], #4
 8005d62:	dcec      	bgt.n	8005d3e <__multadd+0x12>
 8005d64:	b30e      	cbz	r6, 8005daa <__multadd+0x7e>
 8005d66:	68a3      	ldr	r3, [r4, #8]
 8005d68:	42ab      	cmp	r3, r5
 8005d6a:	dc19      	bgt.n	8005da0 <__multadd+0x74>
 8005d6c:	6861      	ldr	r1, [r4, #4]
 8005d6e:	4638      	mov	r0, r7
 8005d70:	3101      	adds	r1, #1
 8005d72:	f7ff ff79 	bl	8005c68 <_Balloc>
 8005d76:	4680      	mov	r8, r0
 8005d78:	b928      	cbnz	r0, 8005d86 <__multadd+0x5a>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	21ba      	movs	r1, #186	; 0xba
 8005d7e:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <__multadd+0x84>)
 8005d80:	480c      	ldr	r0, [pc, #48]	; (8005db4 <__multadd+0x88>)
 8005d82:	f001 fec7 	bl	8007b14 <__assert_func>
 8005d86:	6922      	ldr	r2, [r4, #16]
 8005d88:	f104 010c 	add.w	r1, r4, #12
 8005d8c:	3202      	adds	r2, #2
 8005d8e:	0092      	lsls	r2, r2, #2
 8005d90:	300c      	adds	r0, #12
 8005d92:	f7fe ffea 	bl	8004d6a <memcpy>
 8005d96:	4621      	mov	r1, r4
 8005d98:	4638      	mov	r0, r7
 8005d9a:	f7ff ffa5 	bl	8005ce8 <_Bfree>
 8005d9e:	4644      	mov	r4, r8
 8005da0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005da4:	3501      	adds	r5, #1
 8005da6:	615e      	str	r6, [r3, #20]
 8005da8:	6125      	str	r5, [r4, #16]
 8005daa:	4620      	mov	r0, r4
 8005dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db0:	080086b3 	.word	0x080086b3
 8005db4:	080086c4 	.word	0x080086c4

08005db8 <__s2b>:
 8005db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dbc:	4615      	mov	r5, r2
 8005dbe:	2209      	movs	r2, #9
 8005dc0:	461f      	mov	r7, r3
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dca:	4606      	mov	r6, r0
 8005dcc:	2201      	movs	r2, #1
 8005dce:	2100      	movs	r1, #0
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	db09      	blt.n	8005de8 <__s2b+0x30>
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	f7ff ff47 	bl	8005c68 <_Balloc>
 8005dda:	b940      	cbnz	r0, 8005dee <__s2b+0x36>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	21d3      	movs	r1, #211	; 0xd3
 8005de0:	4b18      	ldr	r3, [pc, #96]	; (8005e44 <__s2b+0x8c>)
 8005de2:	4819      	ldr	r0, [pc, #100]	; (8005e48 <__s2b+0x90>)
 8005de4:	f001 fe96 	bl	8007b14 <__assert_func>
 8005de8:	0052      	lsls	r2, r2, #1
 8005dea:	3101      	adds	r1, #1
 8005dec:	e7f0      	b.n	8005dd0 <__s2b+0x18>
 8005dee:	9b08      	ldr	r3, [sp, #32]
 8005df0:	2d09      	cmp	r5, #9
 8005df2:	6143      	str	r3, [r0, #20]
 8005df4:	f04f 0301 	mov.w	r3, #1
 8005df8:	6103      	str	r3, [r0, #16]
 8005dfa:	dd16      	ble.n	8005e2a <__s2b+0x72>
 8005dfc:	f104 0909 	add.w	r9, r4, #9
 8005e00:	46c8      	mov	r8, r9
 8005e02:	442c      	add	r4, r5
 8005e04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e08:	4601      	mov	r1, r0
 8005e0a:	220a      	movs	r2, #10
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	3b30      	subs	r3, #48	; 0x30
 8005e10:	f7ff ff8c 	bl	8005d2c <__multadd>
 8005e14:	45a0      	cmp	r8, r4
 8005e16:	d1f5      	bne.n	8005e04 <__s2b+0x4c>
 8005e18:	f1a5 0408 	sub.w	r4, r5, #8
 8005e1c:	444c      	add	r4, r9
 8005e1e:	1b2d      	subs	r5, r5, r4
 8005e20:	1963      	adds	r3, r4, r5
 8005e22:	42bb      	cmp	r3, r7
 8005e24:	db04      	blt.n	8005e30 <__s2b+0x78>
 8005e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e2a:	2509      	movs	r5, #9
 8005e2c:	340a      	adds	r4, #10
 8005e2e:	e7f6      	b.n	8005e1e <__s2b+0x66>
 8005e30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e34:	4601      	mov	r1, r0
 8005e36:	220a      	movs	r2, #10
 8005e38:	4630      	mov	r0, r6
 8005e3a:	3b30      	subs	r3, #48	; 0x30
 8005e3c:	f7ff ff76 	bl	8005d2c <__multadd>
 8005e40:	e7ee      	b.n	8005e20 <__s2b+0x68>
 8005e42:	bf00      	nop
 8005e44:	080086b3 	.word	0x080086b3
 8005e48:	080086c4 	.word	0x080086c4

08005e4c <__hi0bits>:
 8005e4c:	0c02      	lsrs	r2, r0, #16
 8005e4e:	0412      	lsls	r2, r2, #16
 8005e50:	4603      	mov	r3, r0
 8005e52:	b9ca      	cbnz	r2, 8005e88 <__hi0bits+0x3c>
 8005e54:	0403      	lsls	r3, r0, #16
 8005e56:	2010      	movs	r0, #16
 8005e58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e5c:	bf04      	itt	eq
 8005e5e:	021b      	lsleq	r3, r3, #8
 8005e60:	3008      	addeq	r0, #8
 8005e62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e66:	bf04      	itt	eq
 8005e68:	011b      	lsleq	r3, r3, #4
 8005e6a:	3004      	addeq	r0, #4
 8005e6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e70:	bf04      	itt	eq
 8005e72:	009b      	lsleq	r3, r3, #2
 8005e74:	3002      	addeq	r0, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	db05      	blt.n	8005e86 <__hi0bits+0x3a>
 8005e7a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005e7e:	f100 0001 	add.w	r0, r0, #1
 8005e82:	bf08      	it	eq
 8005e84:	2020      	moveq	r0, #32
 8005e86:	4770      	bx	lr
 8005e88:	2000      	movs	r0, #0
 8005e8a:	e7e5      	b.n	8005e58 <__hi0bits+0xc>

08005e8c <__lo0bits>:
 8005e8c:	6803      	ldr	r3, [r0, #0]
 8005e8e:	4602      	mov	r2, r0
 8005e90:	f013 0007 	ands.w	r0, r3, #7
 8005e94:	d00b      	beq.n	8005eae <__lo0bits+0x22>
 8005e96:	07d9      	lsls	r1, r3, #31
 8005e98:	d421      	bmi.n	8005ede <__lo0bits+0x52>
 8005e9a:	0798      	lsls	r0, r3, #30
 8005e9c:	bf49      	itett	mi
 8005e9e:	085b      	lsrmi	r3, r3, #1
 8005ea0:	089b      	lsrpl	r3, r3, #2
 8005ea2:	2001      	movmi	r0, #1
 8005ea4:	6013      	strmi	r3, [r2, #0]
 8005ea6:	bf5c      	itt	pl
 8005ea8:	2002      	movpl	r0, #2
 8005eaa:	6013      	strpl	r3, [r2, #0]
 8005eac:	4770      	bx	lr
 8005eae:	b299      	uxth	r1, r3
 8005eb0:	b909      	cbnz	r1, 8005eb6 <__lo0bits+0x2a>
 8005eb2:	2010      	movs	r0, #16
 8005eb4:	0c1b      	lsrs	r3, r3, #16
 8005eb6:	b2d9      	uxtb	r1, r3
 8005eb8:	b909      	cbnz	r1, 8005ebe <__lo0bits+0x32>
 8005eba:	3008      	adds	r0, #8
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	0719      	lsls	r1, r3, #28
 8005ec0:	bf04      	itt	eq
 8005ec2:	091b      	lsreq	r3, r3, #4
 8005ec4:	3004      	addeq	r0, #4
 8005ec6:	0799      	lsls	r1, r3, #30
 8005ec8:	bf04      	itt	eq
 8005eca:	089b      	lsreq	r3, r3, #2
 8005ecc:	3002      	addeq	r0, #2
 8005ece:	07d9      	lsls	r1, r3, #31
 8005ed0:	d403      	bmi.n	8005eda <__lo0bits+0x4e>
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	f100 0001 	add.w	r0, r0, #1
 8005ed8:	d003      	beq.n	8005ee2 <__lo0bits+0x56>
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	4770      	bx	lr
 8005ede:	2000      	movs	r0, #0
 8005ee0:	4770      	bx	lr
 8005ee2:	2020      	movs	r0, #32
 8005ee4:	4770      	bx	lr
	...

08005ee8 <__i2b>:
 8005ee8:	b510      	push	{r4, lr}
 8005eea:	460c      	mov	r4, r1
 8005eec:	2101      	movs	r1, #1
 8005eee:	f7ff febb 	bl	8005c68 <_Balloc>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	b928      	cbnz	r0, 8005f02 <__i2b+0x1a>
 8005ef6:	f240 1145 	movw	r1, #325	; 0x145
 8005efa:	4b04      	ldr	r3, [pc, #16]	; (8005f0c <__i2b+0x24>)
 8005efc:	4804      	ldr	r0, [pc, #16]	; (8005f10 <__i2b+0x28>)
 8005efe:	f001 fe09 	bl	8007b14 <__assert_func>
 8005f02:	2301      	movs	r3, #1
 8005f04:	6144      	str	r4, [r0, #20]
 8005f06:	6103      	str	r3, [r0, #16]
 8005f08:	bd10      	pop	{r4, pc}
 8005f0a:	bf00      	nop
 8005f0c:	080086b3 	.word	0x080086b3
 8005f10:	080086c4 	.word	0x080086c4

08005f14 <__multiply>:
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	4691      	mov	r9, r2
 8005f1a:	690a      	ldr	r2, [r1, #16]
 8005f1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f20:	460c      	mov	r4, r1
 8005f22:	429a      	cmp	r2, r3
 8005f24:	bfbe      	ittt	lt
 8005f26:	460b      	movlt	r3, r1
 8005f28:	464c      	movlt	r4, r9
 8005f2a:	4699      	movlt	r9, r3
 8005f2c:	6927      	ldr	r7, [r4, #16]
 8005f2e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f32:	68a3      	ldr	r3, [r4, #8]
 8005f34:	6861      	ldr	r1, [r4, #4]
 8005f36:	eb07 060a 	add.w	r6, r7, sl
 8005f3a:	42b3      	cmp	r3, r6
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	bfb8      	it	lt
 8005f40:	3101      	addlt	r1, #1
 8005f42:	f7ff fe91 	bl	8005c68 <_Balloc>
 8005f46:	b930      	cbnz	r0, 8005f56 <__multiply+0x42>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f4e:	4b43      	ldr	r3, [pc, #268]	; (800605c <__multiply+0x148>)
 8005f50:	4843      	ldr	r0, [pc, #268]	; (8006060 <__multiply+0x14c>)
 8005f52:	f001 fddf 	bl	8007b14 <__assert_func>
 8005f56:	f100 0514 	add.w	r5, r0, #20
 8005f5a:	462b      	mov	r3, r5
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f62:	4543      	cmp	r3, r8
 8005f64:	d321      	bcc.n	8005faa <__multiply+0x96>
 8005f66:	f104 0314 	add.w	r3, r4, #20
 8005f6a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f6e:	f109 0314 	add.w	r3, r9, #20
 8005f72:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f76:	9202      	str	r2, [sp, #8]
 8005f78:	1b3a      	subs	r2, r7, r4
 8005f7a:	3a15      	subs	r2, #21
 8005f7c:	f022 0203 	bic.w	r2, r2, #3
 8005f80:	3204      	adds	r2, #4
 8005f82:	f104 0115 	add.w	r1, r4, #21
 8005f86:	428f      	cmp	r7, r1
 8005f88:	bf38      	it	cc
 8005f8a:	2204      	movcc	r2, #4
 8005f8c:	9201      	str	r2, [sp, #4]
 8005f8e:	9a02      	ldr	r2, [sp, #8]
 8005f90:	9303      	str	r3, [sp, #12]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d80c      	bhi.n	8005fb0 <__multiply+0x9c>
 8005f96:	2e00      	cmp	r6, #0
 8005f98:	dd03      	ble.n	8005fa2 <__multiply+0x8e>
 8005f9a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d05a      	beq.n	8006058 <__multiply+0x144>
 8005fa2:	6106      	str	r6, [r0, #16]
 8005fa4:	b005      	add	sp, #20
 8005fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005faa:	f843 2b04 	str.w	r2, [r3], #4
 8005fae:	e7d8      	b.n	8005f62 <__multiply+0x4e>
 8005fb0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005fb4:	f1ba 0f00 	cmp.w	sl, #0
 8005fb8:	d023      	beq.n	8006002 <__multiply+0xee>
 8005fba:	46a9      	mov	r9, r5
 8005fbc:	f04f 0c00 	mov.w	ip, #0
 8005fc0:	f104 0e14 	add.w	lr, r4, #20
 8005fc4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005fc8:	f8d9 1000 	ldr.w	r1, [r9]
 8005fcc:	fa1f fb82 	uxth.w	fp, r2
 8005fd0:	b289      	uxth	r1, r1
 8005fd2:	fb0a 110b 	mla	r1, sl, fp, r1
 8005fd6:	4461      	add	r1, ip
 8005fd8:	f8d9 c000 	ldr.w	ip, [r9]
 8005fdc:	0c12      	lsrs	r2, r2, #16
 8005fde:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005fe2:	fb0a c202 	mla	r2, sl, r2, ip
 8005fe6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fea:	b289      	uxth	r1, r1
 8005fec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ff0:	4577      	cmp	r7, lr
 8005ff2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ff6:	f849 1b04 	str.w	r1, [r9], #4
 8005ffa:	d8e3      	bhi.n	8005fc4 <__multiply+0xb0>
 8005ffc:	9a01      	ldr	r2, [sp, #4]
 8005ffe:	f845 c002 	str.w	ip, [r5, r2]
 8006002:	9a03      	ldr	r2, [sp, #12]
 8006004:	3304      	adds	r3, #4
 8006006:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800600a:	f1b9 0f00 	cmp.w	r9, #0
 800600e:	d021      	beq.n	8006054 <__multiply+0x140>
 8006010:	46ae      	mov	lr, r5
 8006012:	f04f 0a00 	mov.w	sl, #0
 8006016:	6829      	ldr	r1, [r5, #0]
 8006018:	f104 0c14 	add.w	ip, r4, #20
 800601c:	f8bc b000 	ldrh.w	fp, [ip]
 8006020:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006024:	b289      	uxth	r1, r1
 8006026:	fb09 220b 	mla	r2, r9, fp, r2
 800602a:	4452      	add	r2, sl
 800602c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006030:	f84e 1b04 	str.w	r1, [lr], #4
 8006034:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006038:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800603c:	f8be 1000 	ldrh.w	r1, [lr]
 8006040:	4567      	cmp	r7, ip
 8006042:	fb09 110a 	mla	r1, r9, sl, r1
 8006046:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800604a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800604e:	d8e5      	bhi.n	800601c <__multiply+0x108>
 8006050:	9a01      	ldr	r2, [sp, #4]
 8006052:	50a9      	str	r1, [r5, r2]
 8006054:	3504      	adds	r5, #4
 8006056:	e79a      	b.n	8005f8e <__multiply+0x7a>
 8006058:	3e01      	subs	r6, #1
 800605a:	e79c      	b.n	8005f96 <__multiply+0x82>
 800605c:	080086b3 	.word	0x080086b3
 8006060:	080086c4 	.word	0x080086c4

08006064 <__pow5mult>:
 8006064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006068:	4615      	mov	r5, r2
 800606a:	f012 0203 	ands.w	r2, r2, #3
 800606e:	4606      	mov	r6, r0
 8006070:	460f      	mov	r7, r1
 8006072:	d007      	beq.n	8006084 <__pow5mult+0x20>
 8006074:	4c25      	ldr	r4, [pc, #148]	; (800610c <__pow5mult+0xa8>)
 8006076:	3a01      	subs	r2, #1
 8006078:	2300      	movs	r3, #0
 800607a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800607e:	f7ff fe55 	bl	8005d2c <__multadd>
 8006082:	4607      	mov	r7, r0
 8006084:	10ad      	asrs	r5, r5, #2
 8006086:	d03d      	beq.n	8006104 <__pow5mult+0xa0>
 8006088:	69f4      	ldr	r4, [r6, #28]
 800608a:	b97c      	cbnz	r4, 80060ac <__pow5mult+0x48>
 800608c:	2010      	movs	r0, #16
 800608e:	f7ff fd37 	bl	8005b00 <malloc>
 8006092:	4602      	mov	r2, r0
 8006094:	61f0      	str	r0, [r6, #28]
 8006096:	b928      	cbnz	r0, 80060a4 <__pow5mult+0x40>
 8006098:	f240 11b3 	movw	r1, #435	; 0x1b3
 800609c:	4b1c      	ldr	r3, [pc, #112]	; (8006110 <__pow5mult+0xac>)
 800609e:	481d      	ldr	r0, [pc, #116]	; (8006114 <__pow5mult+0xb0>)
 80060a0:	f001 fd38 	bl	8007b14 <__assert_func>
 80060a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060a8:	6004      	str	r4, [r0, #0]
 80060aa:	60c4      	str	r4, [r0, #12]
 80060ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80060b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060b4:	b94c      	cbnz	r4, 80060ca <__pow5mult+0x66>
 80060b6:	f240 2171 	movw	r1, #625	; 0x271
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7ff ff14 	bl	8005ee8 <__i2b>
 80060c0:	2300      	movs	r3, #0
 80060c2:	4604      	mov	r4, r0
 80060c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80060c8:	6003      	str	r3, [r0, #0]
 80060ca:	f04f 0900 	mov.w	r9, #0
 80060ce:	07eb      	lsls	r3, r5, #31
 80060d0:	d50a      	bpl.n	80060e8 <__pow5mult+0x84>
 80060d2:	4639      	mov	r1, r7
 80060d4:	4622      	mov	r2, r4
 80060d6:	4630      	mov	r0, r6
 80060d8:	f7ff ff1c 	bl	8005f14 <__multiply>
 80060dc:	4680      	mov	r8, r0
 80060de:	4639      	mov	r1, r7
 80060e0:	4630      	mov	r0, r6
 80060e2:	f7ff fe01 	bl	8005ce8 <_Bfree>
 80060e6:	4647      	mov	r7, r8
 80060e8:	106d      	asrs	r5, r5, #1
 80060ea:	d00b      	beq.n	8006104 <__pow5mult+0xa0>
 80060ec:	6820      	ldr	r0, [r4, #0]
 80060ee:	b938      	cbnz	r0, 8006100 <__pow5mult+0x9c>
 80060f0:	4622      	mov	r2, r4
 80060f2:	4621      	mov	r1, r4
 80060f4:	4630      	mov	r0, r6
 80060f6:	f7ff ff0d 	bl	8005f14 <__multiply>
 80060fa:	6020      	str	r0, [r4, #0]
 80060fc:	f8c0 9000 	str.w	r9, [r0]
 8006100:	4604      	mov	r4, r0
 8006102:	e7e4      	b.n	80060ce <__pow5mult+0x6a>
 8006104:	4638      	mov	r0, r7
 8006106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800610a:	bf00      	nop
 800610c:	08008810 	.word	0x08008810
 8006110:	08008644 	.word	0x08008644
 8006114:	080086c4 	.word	0x080086c4

08006118 <__lshift>:
 8006118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800611c:	460c      	mov	r4, r1
 800611e:	4607      	mov	r7, r0
 8006120:	4691      	mov	r9, r2
 8006122:	6923      	ldr	r3, [r4, #16]
 8006124:	6849      	ldr	r1, [r1, #4]
 8006126:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800612a:	68a3      	ldr	r3, [r4, #8]
 800612c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006130:	f108 0601 	add.w	r6, r8, #1
 8006134:	42b3      	cmp	r3, r6
 8006136:	db0b      	blt.n	8006150 <__lshift+0x38>
 8006138:	4638      	mov	r0, r7
 800613a:	f7ff fd95 	bl	8005c68 <_Balloc>
 800613e:	4605      	mov	r5, r0
 8006140:	b948      	cbnz	r0, 8006156 <__lshift+0x3e>
 8006142:	4602      	mov	r2, r0
 8006144:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006148:	4b27      	ldr	r3, [pc, #156]	; (80061e8 <__lshift+0xd0>)
 800614a:	4828      	ldr	r0, [pc, #160]	; (80061ec <__lshift+0xd4>)
 800614c:	f001 fce2 	bl	8007b14 <__assert_func>
 8006150:	3101      	adds	r1, #1
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	e7ee      	b.n	8006134 <__lshift+0x1c>
 8006156:	2300      	movs	r3, #0
 8006158:	f100 0114 	add.w	r1, r0, #20
 800615c:	f100 0210 	add.w	r2, r0, #16
 8006160:	4618      	mov	r0, r3
 8006162:	4553      	cmp	r3, sl
 8006164:	db33      	blt.n	80061ce <__lshift+0xb6>
 8006166:	6920      	ldr	r0, [r4, #16]
 8006168:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800616c:	f104 0314 	add.w	r3, r4, #20
 8006170:	f019 091f 	ands.w	r9, r9, #31
 8006174:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006178:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800617c:	d02b      	beq.n	80061d6 <__lshift+0xbe>
 800617e:	468a      	mov	sl, r1
 8006180:	2200      	movs	r2, #0
 8006182:	f1c9 0e20 	rsb	lr, r9, #32
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	fa00 f009 	lsl.w	r0, r0, r9
 800618c:	4310      	orrs	r0, r2
 800618e:	f84a 0b04 	str.w	r0, [sl], #4
 8006192:	f853 2b04 	ldr.w	r2, [r3], #4
 8006196:	459c      	cmp	ip, r3
 8006198:	fa22 f20e 	lsr.w	r2, r2, lr
 800619c:	d8f3      	bhi.n	8006186 <__lshift+0x6e>
 800619e:	ebac 0304 	sub.w	r3, ip, r4
 80061a2:	3b15      	subs	r3, #21
 80061a4:	f023 0303 	bic.w	r3, r3, #3
 80061a8:	3304      	adds	r3, #4
 80061aa:	f104 0015 	add.w	r0, r4, #21
 80061ae:	4584      	cmp	ip, r0
 80061b0:	bf38      	it	cc
 80061b2:	2304      	movcc	r3, #4
 80061b4:	50ca      	str	r2, [r1, r3]
 80061b6:	b10a      	cbz	r2, 80061bc <__lshift+0xa4>
 80061b8:	f108 0602 	add.w	r6, r8, #2
 80061bc:	3e01      	subs	r6, #1
 80061be:	4638      	mov	r0, r7
 80061c0:	4621      	mov	r1, r4
 80061c2:	612e      	str	r6, [r5, #16]
 80061c4:	f7ff fd90 	bl	8005ce8 <_Bfree>
 80061c8:	4628      	mov	r0, r5
 80061ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80061d2:	3301      	adds	r3, #1
 80061d4:	e7c5      	b.n	8006162 <__lshift+0x4a>
 80061d6:	3904      	subs	r1, #4
 80061d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061dc:	459c      	cmp	ip, r3
 80061de:	f841 2f04 	str.w	r2, [r1, #4]!
 80061e2:	d8f9      	bhi.n	80061d8 <__lshift+0xc0>
 80061e4:	e7ea      	b.n	80061bc <__lshift+0xa4>
 80061e6:	bf00      	nop
 80061e8:	080086b3 	.word	0x080086b3
 80061ec:	080086c4 	.word	0x080086c4

080061f0 <__mcmp>:
 80061f0:	4603      	mov	r3, r0
 80061f2:	690a      	ldr	r2, [r1, #16]
 80061f4:	6900      	ldr	r0, [r0, #16]
 80061f6:	b530      	push	{r4, r5, lr}
 80061f8:	1a80      	subs	r0, r0, r2
 80061fa:	d10d      	bne.n	8006218 <__mcmp+0x28>
 80061fc:	3314      	adds	r3, #20
 80061fe:	3114      	adds	r1, #20
 8006200:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006204:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006208:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800620c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006210:	4295      	cmp	r5, r2
 8006212:	d002      	beq.n	800621a <__mcmp+0x2a>
 8006214:	d304      	bcc.n	8006220 <__mcmp+0x30>
 8006216:	2001      	movs	r0, #1
 8006218:	bd30      	pop	{r4, r5, pc}
 800621a:	42a3      	cmp	r3, r4
 800621c:	d3f4      	bcc.n	8006208 <__mcmp+0x18>
 800621e:	e7fb      	b.n	8006218 <__mcmp+0x28>
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	e7f8      	b.n	8006218 <__mcmp+0x28>
	...

08006228 <__mdiff>:
 8006228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800622c:	460d      	mov	r5, r1
 800622e:	4607      	mov	r7, r0
 8006230:	4611      	mov	r1, r2
 8006232:	4628      	mov	r0, r5
 8006234:	4614      	mov	r4, r2
 8006236:	f7ff ffdb 	bl	80061f0 <__mcmp>
 800623a:	1e06      	subs	r6, r0, #0
 800623c:	d111      	bne.n	8006262 <__mdiff+0x3a>
 800623e:	4631      	mov	r1, r6
 8006240:	4638      	mov	r0, r7
 8006242:	f7ff fd11 	bl	8005c68 <_Balloc>
 8006246:	4602      	mov	r2, r0
 8006248:	b928      	cbnz	r0, 8006256 <__mdiff+0x2e>
 800624a:	f240 2137 	movw	r1, #567	; 0x237
 800624e:	4b3a      	ldr	r3, [pc, #232]	; (8006338 <__mdiff+0x110>)
 8006250:	483a      	ldr	r0, [pc, #232]	; (800633c <__mdiff+0x114>)
 8006252:	f001 fc5f 	bl	8007b14 <__assert_func>
 8006256:	2301      	movs	r3, #1
 8006258:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800625c:	4610      	mov	r0, r2
 800625e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006262:	bfa4      	itt	ge
 8006264:	4623      	movge	r3, r4
 8006266:	462c      	movge	r4, r5
 8006268:	4638      	mov	r0, r7
 800626a:	6861      	ldr	r1, [r4, #4]
 800626c:	bfa6      	itte	ge
 800626e:	461d      	movge	r5, r3
 8006270:	2600      	movge	r6, #0
 8006272:	2601      	movlt	r6, #1
 8006274:	f7ff fcf8 	bl	8005c68 <_Balloc>
 8006278:	4602      	mov	r2, r0
 800627a:	b918      	cbnz	r0, 8006284 <__mdiff+0x5c>
 800627c:	f240 2145 	movw	r1, #581	; 0x245
 8006280:	4b2d      	ldr	r3, [pc, #180]	; (8006338 <__mdiff+0x110>)
 8006282:	e7e5      	b.n	8006250 <__mdiff+0x28>
 8006284:	f102 0814 	add.w	r8, r2, #20
 8006288:	46c2      	mov	sl, r8
 800628a:	f04f 0c00 	mov.w	ip, #0
 800628e:	6927      	ldr	r7, [r4, #16]
 8006290:	60c6      	str	r6, [r0, #12]
 8006292:	692e      	ldr	r6, [r5, #16]
 8006294:	f104 0014 	add.w	r0, r4, #20
 8006298:	f105 0914 	add.w	r9, r5, #20
 800629c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80062a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80062a4:	3410      	adds	r4, #16
 80062a6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80062aa:	f859 3b04 	ldr.w	r3, [r9], #4
 80062ae:	fa1f f18b 	uxth.w	r1, fp
 80062b2:	4461      	add	r1, ip
 80062b4:	fa1f fc83 	uxth.w	ip, r3
 80062b8:	0c1b      	lsrs	r3, r3, #16
 80062ba:	eba1 010c 	sub.w	r1, r1, ip
 80062be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80062c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80062c6:	b289      	uxth	r1, r1
 80062c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80062cc:	454e      	cmp	r6, r9
 80062ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80062d2:	f84a 1b04 	str.w	r1, [sl], #4
 80062d6:	d8e6      	bhi.n	80062a6 <__mdiff+0x7e>
 80062d8:	1b73      	subs	r3, r6, r5
 80062da:	3b15      	subs	r3, #21
 80062dc:	f023 0303 	bic.w	r3, r3, #3
 80062e0:	3515      	adds	r5, #21
 80062e2:	3304      	adds	r3, #4
 80062e4:	42ae      	cmp	r6, r5
 80062e6:	bf38      	it	cc
 80062e8:	2304      	movcc	r3, #4
 80062ea:	4418      	add	r0, r3
 80062ec:	4443      	add	r3, r8
 80062ee:	461e      	mov	r6, r3
 80062f0:	4605      	mov	r5, r0
 80062f2:	4575      	cmp	r5, lr
 80062f4:	d30e      	bcc.n	8006314 <__mdiff+0xec>
 80062f6:	f10e 0103 	add.w	r1, lr, #3
 80062fa:	1a09      	subs	r1, r1, r0
 80062fc:	f021 0103 	bic.w	r1, r1, #3
 8006300:	3803      	subs	r0, #3
 8006302:	4586      	cmp	lr, r0
 8006304:	bf38      	it	cc
 8006306:	2100      	movcc	r1, #0
 8006308:	440b      	add	r3, r1
 800630a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800630e:	b189      	cbz	r1, 8006334 <__mdiff+0x10c>
 8006310:	6117      	str	r7, [r2, #16]
 8006312:	e7a3      	b.n	800625c <__mdiff+0x34>
 8006314:	f855 8b04 	ldr.w	r8, [r5], #4
 8006318:	fa1f f188 	uxth.w	r1, r8
 800631c:	4461      	add	r1, ip
 800631e:	140c      	asrs	r4, r1, #16
 8006320:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006324:	b289      	uxth	r1, r1
 8006326:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800632a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800632e:	f846 1b04 	str.w	r1, [r6], #4
 8006332:	e7de      	b.n	80062f2 <__mdiff+0xca>
 8006334:	3f01      	subs	r7, #1
 8006336:	e7e8      	b.n	800630a <__mdiff+0xe2>
 8006338:	080086b3 	.word	0x080086b3
 800633c:	080086c4 	.word	0x080086c4

08006340 <__ulp>:
 8006340:	4b0e      	ldr	r3, [pc, #56]	; (800637c <__ulp+0x3c>)
 8006342:	400b      	ands	r3, r1
 8006344:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006348:	2b00      	cmp	r3, #0
 800634a:	dc08      	bgt.n	800635e <__ulp+0x1e>
 800634c:	425b      	negs	r3, r3
 800634e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006352:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006356:	da04      	bge.n	8006362 <__ulp+0x22>
 8006358:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800635c:	4113      	asrs	r3, r2
 800635e:	2200      	movs	r2, #0
 8006360:	e008      	b.n	8006374 <__ulp+0x34>
 8006362:	f1a2 0314 	sub.w	r3, r2, #20
 8006366:	2b1e      	cmp	r3, #30
 8006368:	bfd6      	itet	le
 800636a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800636e:	2201      	movgt	r2, #1
 8006370:	40da      	lsrle	r2, r3
 8006372:	2300      	movs	r3, #0
 8006374:	4619      	mov	r1, r3
 8006376:	4610      	mov	r0, r2
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	7ff00000 	.word	0x7ff00000

08006380 <__b2d>:
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006382:	6905      	ldr	r5, [r0, #16]
 8006384:	f100 0714 	add.w	r7, r0, #20
 8006388:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800638c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006390:	1f2e      	subs	r6, r5, #4
 8006392:	4620      	mov	r0, r4
 8006394:	f7ff fd5a 	bl	8005e4c <__hi0bits>
 8006398:	f1c0 0220 	rsb	r2, r0, #32
 800639c:	280a      	cmp	r0, #10
 800639e:	4603      	mov	r3, r0
 80063a0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800640c <__b2d+0x8c>
 80063a4:	600a      	str	r2, [r1, #0]
 80063a6:	dc12      	bgt.n	80063ce <__b2d+0x4e>
 80063a8:	f1c0 0e0b 	rsb	lr, r0, #11
 80063ac:	fa24 f20e 	lsr.w	r2, r4, lr
 80063b0:	42b7      	cmp	r7, r6
 80063b2:	ea42 010c 	orr.w	r1, r2, ip
 80063b6:	bf2c      	ite	cs
 80063b8:	2200      	movcs	r2, #0
 80063ba:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80063be:	3315      	adds	r3, #21
 80063c0:	fa04 f303 	lsl.w	r3, r4, r3
 80063c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80063c8:	431a      	orrs	r2, r3
 80063ca:	4610      	mov	r0, r2
 80063cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ce:	42b7      	cmp	r7, r6
 80063d0:	bf2e      	itee	cs
 80063d2:	2200      	movcs	r2, #0
 80063d4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80063d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80063dc:	3b0b      	subs	r3, #11
 80063de:	d012      	beq.n	8006406 <__b2d+0x86>
 80063e0:	f1c3 0520 	rsb	r5, r3, #32
 80063e4:	fa22 f105 	lsr.w	r1, r2, r5
 80063e8:	409c      	lsls	r4, r3
 80063ea:	430c      	orrs	r4, r1
 80063ec:	42be      	cmp	r6, r7
 80063ee:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80063f2:	bf94      	ite	ls
 80063f4:	2400      	movls	r4, #0
 80063f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80063fa:	409a      	lsls	r2, r3
 80063fc:	40ec      	lsrs	r4, r5
 80063fe:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006402:	4322      	orrs	r2, r4
 8006404:	e7e1      	b.n	80063ca <__b2d+0x4a>
 8006406:	ea44 010c 	orr.w	r1, r4, ip
 800640a:	e7de      	b.n	80063ca <__b2d+0x4a>
 800640c:	3ff00000 	.word	0x3ff00000

08006410 <__d2b>:
 8006410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006412:	2101      	movs	r1, #1
 8006414:	4617      	mov	r7, r2
 8006416:	461c      	mov	r4, r3
 8006418:	9e08      	ldr	r6, [sp, #32]
 800641a:	f7ff fc25 	bl	8005c68 <_Balloc>
 800641e:	4605      	mov	r5, r0
 8006420:	b930      	cbnz	r0, 8006430 <__d2b+0x20>
 8006422:	4602      	mov	r2, r0
 8006424:	f240 310f 	movw	r1, #783	; 0x30f
 8006428:	4b22      	ldr	r3, [pc, #136]	; (80064b4 <__d2b+0xa4>)
 800642a:	4823      	ldr	r0, [pc, #140]	; (80064b8 <__d2b+0xa8>)
 800642c:	f001 fb72 	bl	8007b14 <__assert_func>
 8006430:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006434:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006438:	bb24      	cbnz	r4, 8006484 <__d2b+0x74>
 800643a:	2f00      	cmp	r7, #0
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	d026      	beq.n	800648e <__d2b+0x7e>
 8006440:	4668      	mov	r0, sp
 8006442:	9700      	str	r7, [sp, #0]
 8006444:	f7ff fd22 	bl	8005e8c <__lo0bits>
 8006448:	e9dd 1200 	ldrd	r1, r2, [sp]
 800644c:	b1e8      	cbz	r0, 800648a <__d2b+0x7a>
 800644e:	f1c0 0320 	rsb	r3, r0, #32
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	430b      	orrs	r3, r1
 8006458:	40c2      	lsrs	r2, r0
 800645a:	616b      	str	r3, [r5, #20]
 800645c:	9201      	str	r2, [sp, #4]
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	bf14      	ite	ne
 8006464:	2102      	movne	r1, #2
 8006466:	2101      	moveq	r1, #1
 8006468:	61ab      	str	r3, [r5, #24]
 800646a:	6129      	str	r1, [r5, #16]
 800646c:	b1bc      	cbz	r4, 800649e <__d2b+0x8e>
 800646e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006472:	4404      	add	r4, r0
 8006474:	6034      	str	r4, [r6, #0]
 8006476:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800647a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647c:	6018      	str	r0, [r3, #0]
 800647e:	4628      	mov	r0, r5
 8006480:	b003      	add	sp, #12
 8006482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006484:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006488:	e7d7      	b.n	800643a <__d2b+0x2a>
 800648a:	6169      	str	r1, [r5, #20]
 800648c:	e7e7      	b.n	800645e <__d2b+0x4e>
 800648e:	a801      	add	r0, sp, #4
 8006490:	f7ff fcfc 	bl	8005e8c <__lo0bits>
 8006494:	9b01      	ldr	r3, [sp, #4]
 8006496:	2101      	movs	r1, #1
 8006498:	616b      	str	r3, [r5, #20]
 800649a:	3020      	adds	r0, #32
 800649c:	e7e5      	b.n	800646a <__d2b+0x5a>
 800649e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064a2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80064a6:	6030      	str	r0, [r6, #0]
 80064a8:	6918      	ldr	r0, [r3, #16]
 80064aa:	f7ff fccf 	bl	8005e4c <__hi0bits>
 80064ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064b2:	e7e2      	b.n	800647a <__d2b+0x6a>
 80064b4:	080086b3 	.word	0x080086b3
 80064b8:	080086c4 	.word	0x080086c4

080064bc <__ratio>:
 80064bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c0:	4688      	mov	r8, r1
 80064c2:	4669      	mov	r1, sp
 80064c4:	4681      	mov	r9, r0
 80064c6:	f7ff ff5b 	bl	8006380 <__b2d>
 80064ca:	460f      	mov	r7, r1
 80064cc:	4604      	mov	r4, r0
 80064ce:	460d      	mov	r5, r1
 80064d0:	4640      	mov	r0, r8
 80064d2:	a901      	add	r1, sp, #4
 80064d4:	f7ff ff54 	bl	8006380 <__b2d>
 80064d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80064e0:	468b      	mov	fp, r1
 80064e2:	eba3 0c02 	sub.w	ip, r3, r2
 80064e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80064ea:	1a9b      	subs	r3, r3, r2
 80064ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bfd5      	itete	le
 80064f4:	460a      	movle	r2, r1
 80064f6:	462a      	movgt	r2, r5
 80064f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80064fc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006500:	bfd8      	it	le
 8006502:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006506:	465b      	mov	r3, fp
 8006508:	4602      	mov	r2, r0
 800650a:	4639      	mov	r1, r7
 800650c:	4620      	mov	r0, r4
 800650e:	f7fa f90d 	bl	800072c <__aeabi_ddiv>
 8006512:	b003      	add	sp, #12
 8006514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006518 <__copybits>:
 8006518:	3901      	subs	r1, #1
 800651a:	b570      	push	{r4, r5, r6, lr}
 800651c:	1149      	asrs	r1, r1, #5
 800651e:	6914      	ldr	r4, [r2, #16]
 8006520:	3101      	adds	r1, #1
 8006522:	f102 0314 	add.w	r3, r2, #20
 8006526:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800652a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800652e:	1f05      	subs	r5, r0, #4
 8006530:	42a3      	cmp	r3, r4
 8006532:	d30c      	bcc.n	800654e <__copybits+0x36>
 8006534:	1aa3      	subs	r3, r4, r2
 8006536:	3b11      	subs	r3, #17
 8006538:	f023 0303 	bic.w	r3, r3, #3
 800653c:	3211      	adds	r2, #17
 800653e:	42a2      	cmp	r2, r4
 8006540:	bf88      	it	hi
 8006542:	2300      	movhi	r3, #0
 8006544:	4418      	add	r0, r3
 8006546:	2300      	movs	r3, #0
 8006548:	4288      	cmp	r0, r1
 800654a:	d305      	bcc.n	8006558 <__copybits+0x40>
 800654c:	bd70      	pop	{r4, r5, r6, pc}
 800654e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006552:	f845 6f04 	str.w	r6, [r5, #4]!
 8006556:	e7eb      	b.n	8006530 <__copybits+0x18>
 8006558:	f840 3b04 	str.w	r3, [r0], #4
 800655c:	e7f4      	b.n	8006548 <__copybits+0x30>

0800655e <__any_on>:
 800655e:	f100 0214 	add.w	r2, r0, #20
 8006562:	6900      	ldr	r0, [r0, #16]
 8006564:	114b      	asrs	r3, r1, #5
 8006566:	4298      	cmp	r0, r3
 8006568:	b510      	push	{r4, lr}
 800656a:	db11      	blt.n	8006590 <__any_on+0x32>
 800656c:	dd0a      	ble.n	8006584 <__any_on+0x26>
 800656e:	f011 011f 	ands.w	r1, r1, #31
 8006572:	d007      	beq.n	8006584 <__any_on+0x26>
 8006574:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006578:	fa24 f001 	lsr.w	r0, r4, r1
 800657c:	fa00 f101 	lsl.w	r1, r0, r1
 8006580:	428c      	cmp	r4, r1
 8006582:	d10b      	bne.n	800659c <__any_on+0x3e>
 8006584:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006588:	4293      	cmp	r3, r2
 800658a:	d803      	bhi.n	8006594 <__any_on+0x36>
 800658c:	2000      	movs	r0, #0
 800658e:	bd10      	pop	{r4, pc}
 8006590:	4603      	mov	r3, r0
 8006592:	e7f7      	b.n	8006584 <__any_on+0x26>
 8006594:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006598:	2900      	cmp	r1, #0
 800659a:	d0f5      	beq.n	8006588 <__any_on+0x2a>
 800659c:	2001      	movs	r0, #1
 800659e:	e7f6      	b.n	800658e <__any_on+0x30>

080065a0 <sulp>:
 80065a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a4:	460f      	mov	r7, r1
 80065a6:	4690      	mov	r8, r2
 80065a8:	f7ff feca 	bl	8006340 <__ulp>
 80065ac:	4604      	mov	r4, r0
 80065ae:	460d      	mov	r5, r1
 80065b0:	f1b8 0f00 	cmp.w	r8, #0
 80065b4:	d011      	beq.n	80065da <sulp+0x3a>
 80065b6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80065ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80065be:	2b00      	cmp	r3, #0
 80065c0:	dd0b      	ble.n	80065da <sulp+0x3a>
 80065c2:	2400      	movs	r4, #0
 80065c4:	051b      	lsls	r3, r3, #20
 80065c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80065ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80065ce:	4622      	mov	r2, r4
 80065d0:	462b      	mov	r3, r5
 80065d2:	f7f9 ff81 	bl	80004d8 <__aeabi_dmul>
 80065d6:	4604      	mov	r4, r0
 80065d8:	460d      	mov	r5, r1
 80065da:	4620      	mov	r0, r4
 80065dc:	4629      	mov	r1, r5
 80065de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e2:	0000      	movs	r0, r0
 80065e4:	0000      	movs	r0, r0
	...

080065e8 <_strtod_l>:
 80065e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ec:	b09f      	sub	sp, #124	; 0x7c
 80065ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80065f0:	2200      	movs	r2, #0
 80065f2:	4604      	mov	r4, r0
 80065f4:	921a      	str	r2, [sp, #104]	; 0x68
 80065f6:	460d      	mov	r5, r1
 80065f8:	f04f 0800 	mov.w	r8, #0
 80065fc:	f04f 0900 	mov.w	r9, #0
 8006600:	460a      	mov	r2, r1
 8006602:	9219      	str	r2, [sp, #100]	; 0x64
 8006604:	7811      	ldrb	r1, [r2, #0]
 8006606:	292b      	cmp	r1, #43	; 0x2b
 8006608:	d04a      	beq.n	80066a0 <_strtod_l+0xb8>
 800660a:	d838      	bhi.n	800667e <_strtod_l+0x96>
 800660c:	290d      	cmp	r1, #13
 800660e:	d832      	bhi.n	8006676 <_strtod_l+0x8e>
 8006610:	2908      	cmp	r1, #8
 8006612:	d832      	bhi.n	800667a <_strtod_l+0x92>
 8006614:	2900      	cmp	r1, #0
 8006616:	d03b      	beq.n	8006690 <_strtod_l+0xa8>
 8006618:	2200      	movs	r2, #0
 800661a:	920e      	str	r2, [sp, #56]	; 0x38
 800661c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800661e:	7832      	ldrb	r2, [r6, #0]
 8006620:	2a30      	cmp	r2, #48	; 0x30
 8006622:	f040 80b2 	bne.w	800678a <_strtod_l+0x1a2>
 8006626:	7872      	ldrb	r2, [r6, #1]
 8006628:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800662c:	2a58      	cmp	r2, #88	; 0x58
 800662e:	d16e      	bne.n	800670e <_strtod_l+0x126>
 8006630:	9302      	str	r3, [sp, #8]
 8006632:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006634:	4620      	mov	r0, r4
 8006636:	9301      	str	r3, [sp, #4]
 8006638:	ab1a      	add	r3, sp, #104	; 0x68
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	4a8c      	ldr	r2, [pc, #560]	; (8006870 <_strtod_l+0x288>)
 800663e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006640:	a919      	add	r1, sp, #100	; 0x64
 8006642:	f001 fb01 	bl	8007c48 <__gethex>
 8006646:	f010 070f 	ands.w	r7, r0, #15
 800664a:	4605      	mov	r5, r0
 800664c:	d005      	beq.n	800665a <_strtod_l+0x72>
 800664e:	2f06      	cmp	r7, #6
 8006650:	d128      	bne.n	80066a4 <_strtod_l+0xbc>
 8006652:	2300      	movs	r3, #0
 8006654:	3601      	adds	r6, #1
 8006656:	9619      	str	r6, [sp, #100]	; 0x64
 8006658:	930e      	str	r3, [sp, #56]	; 0x38
 800665a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800665c:	2b00      	cmp	r3, #0
 800665e:	f040 85a0 	bne.w	80071a2 <_strtod_l+0xbba>
 8006662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006664:	b1cb      	cbz	r3, 800669a <_strtod_l+0xb2>
 8006666:	4642      	mov	r2, r8
 8006668:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800666c:	4610      	mov	r0, r2
 800666e:	4619      	mov	r1, r3
 8006670:	b01f      	add	sp, #124	; 0x7c
 8006672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006676:	2920      	cmp	r1, #32
 8006678:	d1ce      	bne.n	8006618 <_strtod_l+0x30>
 800667a:	3201      	adds	r2, #1
 800667c:	e7c1      	b.n	8006602 <_strtod_l+0x1a>
 800667e:	292d      	cmp	r1, #45	; 0x2d
 8006680:	d1ca      	bne.n	8006618 <_strtod_l+0x30>
 8006682:	2101      	movs	r1, #1
 8006684:	910e      	str	r1, [sp, #56]	; 0x38
 8006686:	1c51      	adds	r1, r2, #1
 8006688:	9119      	str	r1, [sp, #100]	; 0x64
 800668a:	7852      	ldrb	r2, [r2, #1]
 800668c:	2a00      	cmp	r2, #0
 800668e:	d1c5      	bne.n	800661c <_strtod_l+0x34>
 8006690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006692:	9519      	str	r5, [sp, #100]	; 0x64
 8006694:	2b00      	cmp	r3, #0
 8006696:	f040 8582 	bne.w	800719e <_strtod_l+0xbb6>
 800669a:	4642      	mov	r2, r8
 800669c:	464b      	mov	r3, r9
 800669e:	e7e5      	b.n	800666c <_strtod_l+0x84>
 80066a0:	2100      	movs	r1, #0
 80066a2:	e7ef      	b.n	8006684 <_strtod_l+0x9c>
 80066a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80066a6:	b13a      	cbz	r2, 80066b8 <_strtod_l+0xd0>
 80066a8:	2135      	movs	r1, #53	; 0x35
 80066aa:	a81c      	add	r0, sp, #112	; 0x70
 80066ac:	f7ff ff34 	bl	8006518 <__copybits>
 80066b0:	4620      	mov	r0, r4
 80066b2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80066b4:	f7ff fb18 	bl	8005ce8 <_Bfree>
 80066b8:	3f01      	subs	r7, #1
 80066ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80066bc:	2f04      	cmp	r7, #4
 80066be:	d806      	bhi.n	80066ce <_strtod_l+0xe6>
 80066c0:	e8df f007 	tbb	[pc, r7]
 80066c4:	201d0314 	.word	0x201d0314
 80066c8:	14          	.byte	0x14
 80066c9:	00          	.byte	0x00
 80066ca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80066ce:	05e9      	lsls	r1, r5, #23
 80066d0:	bf48      	it	mi
 80066d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80066d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066da:	0d1b      	lsrs	r3, r3, #20
 80066dc:	051b      	lsls	r3, r3, #20
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1bb      	bne.n	800665a <_strtod_l+0x72>
 80066e2:	f7fe fb07 	bl	8004cf4 <__errno>
 80066e6:	2322      	movs	r3, #34	; 0x22
 80066e8:	6003      	str	r3, [r0, #0]
 80066ea:	e7b6      	b.n	800665a <_strtod_l+0x72>
 80066ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80066f0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80066f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80066f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80066fc:	e7e7      	b.n	80066ce <_strtod_l+0xe6>
 80066fe:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8006874 <_strtod_l+0x28c>
 8006702:	e7e4      	b.n	80066ce <_strtod_l+0xe6>
 8006704:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006708:	f04f 38ff 	mov.w	r8, #4294967295
 800670c:	e7df      	b.n	80066ce <_strtod_l+0xe6>
 800670e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	9219      	str	r2, [sp, #100]	; 0x64
 8006714:	785b      	ldrb	r3, [r3, #1]
 8006716:	2b30      	cmp	r3, #48	; 0x30
 8006718:	d0f9      	beq.n	800670e <_strtod_l+0x126>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d09d      	beq.n	800665a <_strtod_l+0x72>
 800671e:	2301      	movs	r3, #1
 8006720:	f04f 0a00 	mov.w	sl, #0
 8006724:	220a      	movs	r2, #10
 8006726:	46d3      	mov	fp, sl
 8006728:	9305      	str	r3, [sp, #20]
 800672a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800672c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006730:	930b      	str	r3, [sp, #44]	; 0x2c
 8006732:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006734:	7806      	ldrb	r6, [r0, #0]
 8006736:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800673a:	b2d9      	uxtb	r1, r3
 800673c:	2909      	cmp	r1, #9
 800673e:	d926      	bls.n	800678e <_strtod_l+0x1a6>
 8006740:	2201      	movs	r2, #1
 8006742:	494d      	ldr	r1, [pc, #308]	; (8006878 <_strtod_l+0x290>)
 8006744:	f001 f9be 	bl	8007ac4 <strncmp>
 8006748:	2800      	cmp	r0, #0
 800674a:	d030      	beq.n	80067ae <_strtod_l+0x1c6>
 800674c:	2000      	movs	r0, #0
 800674e:	4632      	mov	r2, r6
 8006750:	4603      	mov	r3, r0
 8006752:	465e      	mov	r6, fp
 8006754:	9008      	str	r0, [sp, #32]
 8006756:	2a65      	cmp	r2, #101	; 0x65
 8006758:	d001      	beq.n	800675e <_strtod_l+0x176>
 800675a:	2a45      	cmp	r2, #69	; 0x45
 800675c:	d113      	bne.n	8006786 <_strtod_l+0x19e>
 800675e:	b91e      	cbnz	r6, 8006768 <_strtod_l+0x180>
 8006760:	9a05      	ldr	r2, [sp, #20]
 8006762:	4302      	orrs	r2, r0
 8006764:	d094      	beq.n	8006690 <_strtod_l+0xa8>
 8006766:	2600      	movs	r6, #0
 8006768:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800676a:	1c6a      	adds	r2, r5, #1
 800676c:	9219      	str	r2, [sp, #100]	; 0x64
 800676e:	786a      	ldrb	r2, [r5, #1]
 8006770:	2a2b      	cmp	r2, #43	; 0x2b
 8006772:	d074      	beq.n	800685e <_strtod_l+0x276>
 8006774:	2a2d      	cmp	r2, #45	; 0x2d
 8006776:	d078      	beq.n	800686a <_strtod_l+0x282>
 8006778:	f04f 0c00 	mov.w	ip, #0
 800677c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006780:	2909      	cmp	r1, #9
 8006782:	d97f      	bls.n	8006884 <_strtod_l+0x29c>
 8006784:	9519      	str	r5, [sp, #100]	; 0x64
 8006786:	2700      	movs	r7, #0
 8006788:	e09e      	b.n	80068c8 <_strtod_l+0x2e0>
 800678a:	2300      	movs	r3, #0
 800678c:	e7c8      	b.n	8006720 <_strtod_l+0x138>
 800678e:	f1bb 0f08 	cmp.w	fp, #8
 8006792:	bfd8      	it	le
 8006794:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006796:	f100 0001 	add.w	r0, r0, #1
 800679a:	bfd6      	itet	le
 800679c:	fb02 3301 	mlale	r3, r2, r1, r3
 80067a0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80067a4:	930a      	strle	r3, [sp, #40]	; 0x28
 80067a6:	f10b 0b01 	add.w	fp, fp, #1
 80067aa:	9019      	str	r0, [sp, #100]	; 0x64
 80067ac:	e7c1      	b.n	8006732 <_strtod_l+0x14a>
 80067ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	9219      	str	r2, [sp, #100]	; 0x64
 80067b4:	785a      	ldrb	r2, [r3, #1]
 80067b6:	f1bb 0f00 	cmp.w	fp, #0
 80067ba:	d037      	beq.n	800682c <_strtod_l+0x244>
 80067bc:	465e      	mov	r6, fp
 80067be:	9008      	str	r0, [sp, #32]
 80067c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80067c4:	2b09      	cmp	r3, #9
 80067c6:	d912      	bls.n	80067ee <_strtod_l+0x206>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e7c4      	b.n	8006756 <_strtod_l+0x16e>
 80067cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067ce:	3001      	adds	r0, #1
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	9219      	str	r2, [sp, #100]	; 0x64
 80067d4:	785a      	ldrb	r2, [r3, #1]
 80067d6:	2a30      	cmp	r2, #48	; 0x30
 80067d8:	d0f8      	beq.n	80067cc <_strtod_l+0x1e4>
 80067da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80067de:	2b08      	cmp	r3, #8
 80067e0:	f200 84e4 	bhi.w	80071ac <_strtod_l+0xbc4>
 80067e4:	9008      	str	r0, [sp, #32]
 80067e6:	2000      	movs	r0, #0
 80067e8:	4606      	mov	r6, r0
 80067ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80067ee:	3a30      	subs	r2, #48	; 0x30
 80067f0:	f100 0301 	add.w	r3, r0, #1
 80067f4:	d014      	beq.n	8006820 <_strtod_l+0x238>
 80067f6:	9908      	ldr	r1, [sp, #32]
 80067f8:	eb00 0c06 	add.w	ip, r0, r6
 80067fc:	4419      	add	r1, r3
 80067fe:	9108      	str	r1, [sp, #32]
 8006800:	4633      	mov	r3, r6
 8006802:	210a      	movs	r1, #10
 8006804:	4563      	cmp	r3, ip
 8006806:	d113      	bne.n	8006830 <_strtod_l+0x248>
 8006808:	1833      	adds	r3, r6, r0
 800680a:	2b08      	cmp	r3, #8
 800680c:	f106 0601 	add.w	r6, r6, #1
 8006810:	4406      	add	r6, r0
 8006812:	dc1a      	bgt.n	800684a <_strtod_l+0x262>
 8006814:	230a      	movs	r3, #10
 8006816:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006818:	fb03 2301 	mla	r3, r3, r1, r2
 800681c:	930a      	str	r3, [sp, #40]	; 0x28
 800681e:	2300      	movs	r3, #0
 8006820:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006822:	4618      	mov	r0, r3
 8006824:	1c51      	adds	r1, r2, #1
 8006826:	9119      	str	r1, [sp, #100]	; 0x64
 8006828:	7852      	ldrb	r2, [r2, #1]
 800682a:	e7c9      	b.n	80067c0 <_strtod_l+0x1d8>
 800682c:	4658      	mov	r0, fp
 800682e:	e7d2      	b.n	80067d6 <_strtod_l+0x1ee>
 8006830:	2b08      	cmp	r3, #8
 8006832:	f103 0301 	add.w	r3, r3, #1
 8006836:	dc03      	bgt.n	8006840 <_strtod_l+0x258>
 8006838:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800683a:	434f      	muls	r7, r1
 800683c:	970a      	str	r7, [sp, #40]	; 0x28
 800683e:	e7e1      	b.n	8006804 <_strtod_l+0x21c>
 8006840:	2b10      	cmp	r3, #16
 8006842:	bfd8      	it	le
 8006844:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006848:	e7dc      	b.n	8006804 <_strtod_l+0x21c>
 800684a:	2e10      	cmp	r6, #16
 800684c:	bfdc      	itt	le
 800684e:	230a      	movle	r3, #10
 8006850:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006854:	e7e3      	b.n	800681e <_strtod_l+0x236>
 8006856:	2300      	movs	r3, #0
 8006858:	9308      	str	r3, [sp, #32]
 800685a:	2301      	movs	r3, #1
 800685c:	e780      	b.n	8006760 <_strtod_l+0x178>
 800685e:	f04f 0c00 	mov.w	ip, #0
 8006862:	1caa      	adds	r2, r5, #2
 8006864:	9219      	str	r2, [sp, #100]	; 0x64
 8006866:	78aa      	ldrb	r2, [r5, #2]
 8006868:	e788      	b.n	800677c <_strtod_l+0x194>
 800686a:	f04f 0c01 	mov.w	ip, #1
 800686e:	e7f8      	b.n	8006862 <_strtod_l+0x27a>
 8006870:	08008820 	.word	0x08008820
 8006874:	7ff00000 	.word	0x7ff00000
 8006878:	0800881c 	.word	0x0800881c
 800687c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800687e:	1c51      	adds	r1, r2, #1
 8006880:	9119      	str	r1, [sp, #100]	; 0x64
 8006882:	7852      	ldrb	r2, [r2, #1]
 8006884:	2a30      	cmp	r2, #48	; 0x30
 8006886:	d0f9      	beq.n	800687c <_strtod_l+0x294>
 8006888:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800688c:	2908      	cmp	r1, #8
 800688e:	f63f af7a 	bhi.w	8006786 <_strtod_l+0x19e>
 8006892:	3a30      	subs	r2, #48	; 0x30
 8006894:	9209      	str	r2, [sp, #36]	; 0x24
 8006896:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006898:	920c      	str	r2, [sp, #48]	; 0x30
 800689a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800689c:	1c57      	adds	r7, r2, #1
 800689e:	9719      	str	r7, [sp, #100]	; 0x64
 80068a0:	7852      	ldrb	r2, [r2, #1]
 80068a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80068a6:	f1be 0f09 	cmp.w	lr, #9
 80068aa:	d938      	bls.n	800691e <_strtod_l+0x336>
 80068ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068ae:	1a7f      	subs	r7, r7, r1
 80068b0:	2f08      	cmp	r7, #8
 80068b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80068b6:	dc03      	bgt.n	80068c0 <_strtod_l+0x2d8>
 80068b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ba:	428f      	cmp	r7, r1
 80068bc:	bfa8      	it	ge
 80068be:	460f      	movge	r7, r1
 80068c0:	f1bc 0f00 	cmp.w	ip, #0
 80068c4:	d000      	beq.n	80068c8 <_strtod_l+0x2e0>
 80068c6:	427f      	negs	r7, r7
 80068c8:	2e00      	cmp	r6, #0
 80068ca:	d14f      	bne.n	800696c <_strtod_l+0x384>
 80068cc:	9905      	ldr	r1, [sp, #20]
 80068ce:	4301      	orrs	r1, r0
 80068d0:	f47f aec3 	bne.w	800665a <_strtod_l+0x72>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f47f aedb 	bne.w	8006690 <_strtod_l+0xa8>
 80068da:	2a69      	cmp	r2, #105	; 0x69
 80068dc:	d029      	beq.n	8006932 <_strtod_l+0x34a>
 80068de:	dc26      	bgt.n	800692e <_strtod_l+0x346>
 80068e0:	2a49      	cmp	r2, #73	; 0x49
 80068e2:	d026      	beq.n	8006932 <_strtod_l+0x34a>
 80068e4:	2a4e      	cmp	r2, #78	; 0x4e
 80068e6:	f47f aed3 	bne.w	8006690 <_strtod_l+0xa8>
 80068ea:	499a      	ldr	r1, [pc, #616]	; (8006b54 <_strtod_l+0x56c>)
 80068ec:	a819      	add	r0, sp, #100	; 0x64
 80068ee:	f001 fbed 	bl	80080cc <__match>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f43f aecc 	beq.w	8006690 <_strtod_l+0xa8>
 80068f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b28      	cmp	r3, #40	; 0x28
 80068fe:	d12f      	bne.n	8006960 <_strtod_l+0x378>
 8006900:	4995      	ldr	r1, [pc, #596]	; (8006b58 <_strtod_l+0x570>)
 8006902:	aa1c      	add	r2, sp, #112	; 0x70
 8006904:	a819      	add	r0, sp, #100	; 0x64
 8006906:	f001 fbf5 	bl	80080f4 <__hexnan>
 800690a:	2805      	cmp	r0, #5
 800690c:	d128      	bne.n	8006960 <_strtod_l+0x378>
 800690e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006910:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006914:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006918:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800691c:	e69d      	b.n	800665a <_strtod_l+0x72>
 800691e:	210a      	movs	r1, #10
 8006920:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006922:	fb01 2107 	mla	r1, r1, r7, r2
 8006926:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800692a:	9209      	str	r2, [sp, #36]	; 0x24
 800692c:	e7b5      	b.n	800689a <_strtod_l+0x2b2>
 800692e:	2a6e      	cmp	r2, #110	; 0x6e
 8006930:	e7d9      	b.n	80068e6 <_strtod_l+0x2fe>
 8006932:	498a      	ldr	r1, [pc, #552]	; (8006b5c <_strtod_l+0x574>)
 8006934:	a819      	add	r0, sp, #100	; 0x64
 8006936:	f001 fbc9 	bl	80080cc <__match>
 800693a:	2800      	cmp	r0, #0
 800693c:	f43f aea8 	beq.w	8006690 <_strtod_l+0xa8>
 8006940:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006942:	4987      	ldr	r1, [pc, #540]	; (8006b60 <_strtod_l+0x578>)
 8006944:	3b01      	subs	r3, #1
 8006946:	a819      	add	r0, sp, #100	; 0x64
 8006948:	9319      	str	r3, [sp, #100]	; 0x64
 800694a:	f001 fbbf 	bl	80080cc <__match>
 800694e:	b910      	cbnz	r0, 8006956 <_strtod_l+0x36e>
 8006950:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006952:	3301      	adds	r3, #1
 8006954:	9319      	str	r3, [sp, #100]	; 0x64
 8006956:	f04f 0800 	mov.w	r8, #0
 800695a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006b64 <_strtod_l+0x57c>
 800695e:	e67c      	b.n	800665a <_strtod_l+0x72>
 8006960:	4881      	ldr	r0, [pc, #516]	; (8006b68 <_strtod_l+0x580>)
 8006962:	f001 f8d1 	bl	8007b08 <nan>
 8006966:	4680      	mov	r8, r0
 8006968:	4689      	mov	r9, r1
 800696a:	e676      	b.n	800665a <_strtod_l+0x72>
 800696c:	9b08      	ldr	r3, [sp, #32]
 800696e:	f1bb 0f00 	cmp.w	fp, #0
 8006972:	bf08      	it	eq
 8006974:	46b3      	moveq	fp, r6
 8006976:	1afb      	subs	r3, r7, r3
 8006978:	2e10      	cmp	r6, #16
 800697a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800697c:	4635      	mov	r5, r6
 800697e:	9309      	str	r3, [sp, #36]	; 0x24
 8006980:	bfa8      	it	ge
 8006982:	2510      	movge	r5, #16
 8006984:	f7f9 fd2e 	bl	80003e4 <__aeabi_ui2d>
 8006988:	2e09      	cmp	r6, #9
 800698a:	4680      	mov	r8, r0
 800698c:	4689      	mov	r9, r1
 800698e:	dd13      	ble.n	80069b8 <_strtod_l+0x3d0>
 8006990:	4b76      	ldr	r3, [pc, #472]	; (8006b6c <_strtod_l+0x584>)
 8006992:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006996:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800699a:	f7f9 fd9d 	bl	80004d8 <__aeabi_dmul>
 800699e:	4680      	mov	r8, r0
 80069a0:	4650      	mov	r0, sl
 80069a2:	4689      	mov	r9, r1
 80069a4:	f7f9 fd1e 	bl	80003e4 <__aeabi_ui2d>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4640      	mov	r0, r8
 80069ae:	4649      	mov	r1, r9
 80069b0:	f7f9 fbdc 	bl	800016c <__adddf3>
 80069b4:	4680      	mov	r8, r0
 80069b6:	4689      	mov	r9, r1
 80069b8:	2e0f      	cmp	r6, #15
 80069ba:	dc36      	bgt.n	8006a2a <_strtod_l+0x442>
 80069bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f43f ae4b 	beq.w	800665a <_strtod_l+0x72>
 80069c4:	dd22      	ble.n	8006a0c <_strtod_l+0x424>
 80069c6:	2b16      	cmp	r3, #22
 80069c8:	dc09      	bgt.n	80069de <_strtod_l+0x3f6>
 80069ca:	4968      	ldr	r1, [pc, #416]	; (8006b6c <_strtod_l+0x584>)
 80069cc:	4642      	mov	r2, r8
 80069ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069d2:	464b      	mov	r3, r9
 80069d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069d8:	f7f9 fd7e 	bl	80004d8 <__aeabi_dmul>
 80069dc:	e7c3      	b.n	8006966 <_strtod_l+0x37e>
 80069de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069e0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80069e4:	4293      	cmp	r3, r2
 80069e6:	db20      	blt.n	8006a2a <_strtod_l+0x442>
 80069e8:	4c60      	ldr	r4, [pc, #384]	; (8006b6c <_strtod_l+0x584>)
 80069ea:	f1c6 060f 	rsb	r6, r6, #15
 80069ee:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80069f2:	4642      	mov	r2, r8
 80069f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069f8:	464b      	mov	r3, r9
 80069fa:	f7f9 fd6d 	bl	80004d8 <__aeabi_dmul>
 80069fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a00:	1b9e      	subs	r6, r3, r6
 8006a02:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006a06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a0a:	e7e5      	b.n	80069d8 <_strtod_l+0x3f0>
 8006a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0e:	3316      	adds	r3, #22
 8006a10:	db0b      	blt.n	8006a2a <_strtod_l+0x442>
 8006a12:	9b08      	ldr	r3, [sp, #32]
 8006a14:	4640      	mov	r0, r8
 8006a16:	1bdf      	subs	r7, r3, r7
 8006a18:	4b54      	ldr	r3, [pc, #336]	; (8006b6c <_strtod_l+0x584>)
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a24:	f7f9 fe82 	bl	800072c <__aeabi_ddiv>
 8006a28:	e79d      	b.n	8006966 <_strtod_l+0x37e>
 8006a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2c:	1b75      	subs	r5, r6, r5
 8006a2e:	441d      	add	r5, r3
 8006a30:	2d00      	cmp	r5, #0
 8006a32:	dd70      	ble.n	8006b16 <_strtod_l+0x52e>
 8006a34:	f015 030f 	ands.w	r3, r5, #15
 8006a38:	d00a      	beq.n	8006a50 <_strtod_l+0x468>
 8006a3a:	494c      	ldr	r1, [pc, #304]	; (8006b6c <_strtod_l+0x584>)
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a46:	464b      	mov	r3, r9
 8006a48:	f7f9 fd46 	bl	80004d8 <__aeabi_dmul>
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	4689      	mov	r9, r1
 8006a50:	f035 050f 	bics.w	r5, r5, #15
 8006a54:	d04d      	beq.n	8006af2 <_strtod_l+0x50a>
 8006a56:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006a5a:	dd22      	ble.n	8006aa2 <_strtod_l+0x4ba>
 8006a5c:	2600      	movs	r6, #0
 8006a5e:	46b3      	mov	fp, r6
 8006a60:	960b      	str	r6, [sp, #44]	; 0x2c
 8006a62:	9608      	str	r6, [sp, #32]
 8006a64:	2322      	movs	r3, #34	; 0x22
 8006a66:	f04f 0800 	mov.w	r8, #0
 8006a6a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006b64 <_strtod_l+0x57c>
 8006a6e:	6023      	str	r3, [r4, #0]
 8006a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f43f adf1 	beq.w	800665a <_strtod_l+0x72>
 8006a78:	4620      	mov	r0, r4
 8006a7a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a7c:	f7ff f934 	bl	8005ce8 <_Bfree>
 8006a80:	4620      	mov	r0, r4
 8006a82:	9908      	ldr	r1, [sp, #32]
 8006a84:	f7ff f930 	bl	8005ce8 <_Bfree>
 8006a88:	4659      	mov	r1, fp
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7ff f92c 	bl	8005ce8 <_Bfree>
 8006a90:	4620      	mov	r0, r4
 8006a92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a94:	f7ff f928 	bl	8005ce8 <_Bfree>
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f7ff f924 	bl	8005ce8 <_Bfree>
 8006aa0:	e5db      	b.n	800665a <_strtod_l+0x72>
 8006aa2:	4b33      	ldr	r3, [pc, #204]	; (8006b70 <_strtod_l+0x588>)
 8006aa4:	4640      	mov	r0, r8
 8006aa6:	9305      	str	r3, [sp, #20]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4649      	mov	r1, r9
 8006aac:	469a      	mov	sl, r3
 8006aae:	112d      	asrs	r5, r5, #4
 8006ab0:	2d01      	cmp	r5, #1
 8006ab2:	dc21      	bgt.n	8006af8 <_strtod_l+0x510>
 8006ab4:	b10b      	cbz	r3, 8006aba <_strtod_l+0x4d2>
 8006ab6:	4680      	mov	r8, r0
 8006ab8:	4689      	mov	r9, r1
 8006aba:	492d      	ldr	r1, [pc, #180]	; (8006b70 <_strtod_l+0x588>)
 8006abc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006ac0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006ac4:	4642      	mov	r2, r8
 8006ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aca:	464b      	mov	r3, r9
 8006acc:	f7f9 fd04 	bl	80004d8 <__aeabi_dmul>
 8006ad0:	4b24      	ldr	r3, [pc, #144]	; (8006b64 <_strtod_l+0x57c>)
 8006ad2:	460a      	mov	r2, r1
 8006ad4:	400b      	ands	r3, r1
 8006ad6:	4927      	ldr	r1, [pc, #156]	; (8006b74 <_strtod_l+0x58c>)
 8006ad8:	4680      	mov	r8, r0
 8006ada:	428b      	cmp	r3, r1
 8006adc:	d8be      	bhi.n	8006a5c <_strtod_l+0x474>
 8006ade:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006ae2:	428b      	cmp	r3, r1
 8006ae4:	bf86      	itte	hi
 8006ae6:	f04f 38ff 	movhi.w	r8, #4294967295
 8006aea:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006b78 <_strtod_l+0x590>
 8006aee:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006af2:	2300      	movs	r3, #0
 8006af4:	9305      	str	r3, [sp, #20]
 8006af6:	e07b      	b.n	8006bf0 <_strtod_l+0x608>
 8006af8:	07ea      	lsls	r2, r5, #31
 8006afa:	d505      	bpl.n	8006b08 <_strtod_l+0x520>
 8006afc:	9b05      	ldr	r3, [sp, #20]
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f7f9 fce9 	bl	80004d8 <__aeabi_dmul>
 8006b06:	2301      	movs	r3, #1
 8006b08:	9a05      	ldr	r2, [sp, #20]
 8006b0a:	f10a 0a01 	add.w	sl, sl, #1
 8006b0e:	3208      	adds	r2, #8
 8006b10:	106d      	asrs	r5, r5, #1
 8006b12:	9205      	str	r2, [sp, #20]
 8006b14:	e7cc      	b.n	8006ab0 <_strtod_l+0x4c8>
 8006b16:	d0ec      	beq.n	8006af2 <_strtod_l+0x50a>
 8006b18:	426d      	negs	r5, r5
 8006b1a:	f015 020f 	ands.w	r2, r5, #15
 8006b1e:	d00a      	beq.n	8006b36 <_strtod_l+0x54e>
 8006b20:	4b12      	ldr	r3, [pc, #72]	; (8006b6c <_strtod_l+0x584>)
 8006b22:	4640      	mov	r0, r8
 8006b24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b28:	4649      	mov	r1, r9
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f7f9 fdfd 	bl	800072c <__aeabi_ddiv>
 8006b32:	4680      	mov	r8, r0
 8006b34:	4689      	mov	r9, r1
 8006b36:	112d      	asrs	r5, r5, #4
 8006b38:	d0db      	beq.n	8006af2 <_strtod_l+0x50a>
 8006b3a:	2d1f      	cmp	r5, #31
 8006b3c:	dd1e      	ble.n	8006b7c <_strtod_l+0x594>
 8006b3e:	2600      	movs	r6, #0
 8006b40:	46b3      	mov	fp, r6
 8006b42:	960b      	str	r6, [sp, #44]	; 0x2c
 8006b44:	9608      	str	r6, [sp, #32]
 8006b46:	2322      	movs	r3, #34	; 0x22
 8006b48:	f04f 0800 	mov.w	r8, #0
 8006b4c:	f04f 0900 	mov.w	r9, #0
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	e78d      	b.n	8006a70 <_strtod_l+0x488>
 8006b54:	0800860b 	.word	0x0800860b
 8006b58:	08008834 	.word	0x08008834
 8006b5c:	08008603 	.word	0x08008603
 8006b60:	0800863a 	.word	0x0800863a
 8006b64:	7ff00000 	.word	0x7ff00000
 8006b68:	080089c5 	.word	0x080089c5
 8006b6c:	08008748 	.word	0x08008748
 8006b70:	08008720 	.word	0x08008720
 8006b74:	7ca00000 	.word	0x7ca00000
 8006b78:	7fefffff 	.word	0x7fefffff
 8006b7c:	f015 0310 	ands.w	r3, r5, #16
 8006b80:	bf18      	it	ne
 8006b82:	236a      	movne	r3, #106	; 0x6a
 8006b84:	4640      	mov	r0, r8
 8006b86:	9305      	str	r3, [sp, #20]
 8006b88:	4649      	mov	r1, r9
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006e58 <_strtod_l+0x870>
 8006b90:	07ea      	lsls	r2, r5, #31
 8006b92:	d504      	bpl.n	8006b9e <_strtod_l+0x5b6>
 8006b94:	e9da 2300 	ldrd	r2, r3, [sl]
 8006b98:	f7f9 fc9e 	bl	80004d8 <__aeabi_dmul>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	106d      	asrs	r5, r5, #1
 8006ba0:	f10a 0a08 	add.w	sl, sl, #8
 8006ba4:	d1f4      	bne.n	8006b90 <_strtod_l+0x5a8>
 8006ba6:	b10b      	cbz	r3, 8006bac <_strtod_l+0x5c4>
 8006ba8:	4680      	mov	r8, r0
 8006baa:	4689      	mov	r9, r1
 8006bac:	9b05      	ldr	r3, [sp, #20]
 8006bae:	b1bb      	cbz	r3, 8006be0 <_strtod_l+0x5f8>
 8006bb0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006bb4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	4649      	mov	r1, r9
 8006bbc:	dd10      	ble.n	8006be0 <_strtod_l+0x5f8>
 8006bbe:	2b1f      	cmp	r3, #31
 8006bc0:	f340 8128 	ble.w	8006e14 <_strtod_l+0x82c>
 8006bc4:	2b34      	cmp	r3, #52	; 0x34
 8006bc6:	bfd8      	it	le
 8006bc8:	f04f 33ff 	movle.w	r3, #4294967295
 8006bcc:	f04f 0800 	mov.w	r8, #0
 8006bd0:	bfcf      	iteee	gt
 8006bd2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006bd6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006bda:	4093      	lslle	r3, r2
 8006bdc:	ea03 0901 	andle.w	r9, r3, r1
 8006be0:	2200      	movs	r2, #0
 8006be2:	2300      	movs	r3, #0
 8006be4:	4640      	mov	r0, r8
 8006be6:	4649      	mov	r1, r9
 8006be8:	f7f9 fede 	bl	80009a8 <__aeabi_dcmpeq>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d1a6      	bne.n	8006b3e <_strtod_l+0x556>
 8006bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf2:	465a      	mov	r2, fp
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	4633      	mov	r3, r6
 8006bfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bfc:	f7ff f8dc 	bl	8005db8 <__s2b>
 8006c00:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f43f af2a 	beq.w	8006a5c <_strtod_l+0x474>
 8006c08:	2600      	movs	r6, #0
 8006c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c0c:	9b08      	ldr	r3, [sp, #32]
 8006c0e:	2a00      	cmp	r2, #0
 8006c10:	eba3 0307 	sub.w	r3, r3, r7
 8006c14:	bfa8      	it	ge
 8006c16:	2300      	movge	r3, #0
 8006c18:	46b3      	mov	fp, r6
 8006c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8006c1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006c20:	9316      	str	r3, [sp, #88]	; 0x58
 8006c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c24:	4620      	mov	r0, r4
 8006c26:	6859      	ldr	r1, [r3, #4]
 8006c28:	f7ff f81e 	bl	8005c68 <_Balloc>
 8006c2c:	9008      	str	r0, [sp, #32]
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f43f af18 	beq.w	8006a64 <_strtod_l+0x47c>
 8006c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c36:	300c      	adds	r0, #12
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	f103 010c 	add.w	r1, r3, #12
 8006c3e:	3202      	adds	r2, #2
 8006c40:	0092      	lsls	r2, r2, #2
 8006c42:	f7fe f892 	bl	8004d6a <memcpy>
 8006c46:	ab1c      	add	r3, sp, #112	; 0x70
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	ab1b      	add	r3, sp, #108	; 0x6c
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	4642      	mov	r2, r8
 8006c50:	464b      	mov	r3, r9
 8006c52:	4620      	mov	r0, r4
 8006c54:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006c58:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006c5c:	f7ff fbd8 	bl	8006410 <__d2b>
 8006c60:	901a      	str	r0, [sp, #104]	; 0x68
 8006c62:	2800      	cmp	r0, #0
 8006c64:	f43f aefe 	beq.w	8006a64 <_strtod_l+0x47c>
 8006c68:	2101      	movs	r1, #1
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f7ff f93c 	bl	8005ee8 <__i2b>
 8006c70:	4683      	mov	fp, r0
 8006c72:	2800      	cmp	r0, #0
 8006c74:	f43f aef6 	beq.w	8006a64 <_strtod_l+0x47c>
 8006c78:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006c7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c7c:	2f00      	cmp	r7, #0
 8006c7e:	bfab      	itete	ge
 8006c80:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006c82:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006c84:	eb07 0a03 	addge.w	sl, r7, r3
 8006c88:	1bdd      	sublt	r5, r3, r7
 8006c8a:	9b05      	ldr	r3, [sp, #20]
 8006c8c:	bfa8      	it	ge
 8006c8e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006c90:	eba7 0703 	sub.w	r7, r7, r3
 8006c94:	4417      	add	r7, r2
 8006c96:	4b71      	ldr	r3, [pc, #452]	; (8006e5c <_strtod_l+0x874>)
 8006c98:	f107 37ff 	add.w	r7, r7, #4294967295
 8006c9c:	bfb8      	it	lt
 8006c9e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006ca2:	429f      	cmp	r7, r3
 8006ca4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006ca8:	f280 80c7 	bge.w	8006e3a <_strtod_l+0x852>
 8006cac:	1bdb      	subs	r3, r3, r7
 8006cae:	2b1f      	cmp	r3, #31
 8006cb0:	f04f 0101 	mov.w	r1, #1
 8006cb4:	eba2 0203 	sub.w	r2, r2, r3
 8006cb8:	f300 80b3 	bgt.w	8006e22 <_strtod_l+0x83a>
 8006cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	9310      	str	r3, [sp, #64]	; 0x40
 8006cc6:	eb0a 0702 	add.w	r7, sl, r2
 8006cca:	9b05      	ldr	r3, [sp, #20]
 8006ccc:	45ba      	cmp	sl, r7
 8006cce:	4415      	add	r5, r2
 8006cd0:	441d      	add	r5, r3
 8006cd2:	4653      	mov	r3, sl
 8006cd4:	bfa8      	it	ge
 8006cd6:	463b      	movge	r3, r7
 8006cd8:	42ab      	cmp	r3, r5
 8006cda:	bfa8      	it	ge
 8006cdc:	462b      	movge	r3, r5
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	bfc2      	ittt	gt
 8006ce2:	1aff      	subgt	r7, r7, r3
 8006ce4:	1aed      	subgt	r5, r5, r3
 8006ce6:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006cea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dd17      	ble.n	8006d20 <_strtod_l+0x738>
 8006cf0:	4659      	mov	r1, fp
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f7ff f9b5 	bl	8006064 <__pow5mult>
 8006cfa:	4683      	mov	fp, r0
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	f43f aeb1 	beq.w	8006a64 <_strtod_l+0x47c>
 8006d02:	4601      	mov	r1, r0
 8006d04:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006d06:	4620      	mov	r0, r4
 8006d08:	f7ff f904 	bl	8005f14 <__multiply>
 8006d0c:	900a      	str	r0, [sp, #40]	; 0x28
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f43f aea8 	beq.w	8006a64 <_strtod_l+0x47c>
 8006d14:	4620      	mov	r0, r4
 8006d16:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d18:	f7fe ffe6 	bl	8005ce8 <_Bfree>
 8006d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d20:	2f00      	cmp	r7, #0
 8006d22:	f300 808f 	bgt.w	8006e44 <_strtod_l+0x85c>
 8006d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	dd08      	ble.n	8006d3e <_strtod_l+0x756>
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d30:	9908      	ldr	r1, [sp, #32]
 8006d32:	f7ff f997 	bl	8006064 <__pow5mult>
 8006d36:	9008      	str	r0, [sp, #32]
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	f43f ae93 	beq.w	8006a64 <_strtod_l+0x47c>
 8006d3e:	2d00      	cmp	r5, #0
 8006d40:	dd08      	ble.n	8006d54 <_strtod_l+0x76c>
 8006d42:	462a      	mov	r2, r5
 8006d44:	4620      	mov	r0, r4
 8006d46:	9908      	ldr	r1, [sp, #32]
 8006d48:	f7ff f9e6 	bl	8006118 <__lshift>
 8006d4c:	9008      	str	r0, [sp, #32]
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	f43f ae88 	beq.w	8006a64 <_strtod_l+0x47c>
 8006d54:	f1ba 0f00 	cmp.w	sl, #0
 8006d58:	dd08      	ble.n	8006d6c <_strtod_l+0x784>
 8006d5a:	4659      	mov	r1, fp
 8006d5c:	4652      	mov	r2, sl
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f7ff f9da 	bl	8006118 <__lshift>
 8006d64:	4683      	mov	fp, r0
 8006d66:	2800      	cmp	r0, #0
 8006d68:	f43f ae7c 	beq.w	8006a64 <_strtod_l+0x47c>
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	9a08      	ldr	r2, [sp, #32]
 8006d70:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d72:	f7ff fa59 	bl	8006228 <__mdiff>
 8006d76:	4606      	mov	r6, r0
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	f43f ae73 	beq.w	8006a64 <_strtod_l+0x47c>
 8006d7e:	2500      	movs	r5, #0
 8006d80:	68c3      	ldr	r3, [r0, #12]
 8006d82:	4659      	mov	r1, fp
 8006d84:	60c5      	str	r5, [r0, #12]
 8006d86:	930a      	str	r3, [sp, #40]	; 0x28
 8006d88:	f7ff fa32 	bl	80061f0 <__mcmp>
 8006d8c:	42a8      	cmp	r0, r5
 8006d8e:	da6b      	bge.n	8006e68 <_strtod_l+0x880>
 8006d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d92:	ea53 0308 	orrs.w	r3, r3, r8
 8006d96:	f040 808f 	bne.w	8006eb8 <_strtod_l+0x8d0>
 8006d9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f040 808a 	bne.w	8006eb8 <_strtod_l+0x8d0>
 8006da4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006da8:	0d1b      	lsrs	r3, r3, #20
 8006daa:	051b      	lsls	r3, r3, #20
 8006dac:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006db0:	f240 8082 	bls.w	8006eb8 <_strtod_l+0x8d0>
 8006db4:	6973      	ldr	r3, [r6, #20]
 8006db6:	b913      	cbnz	r3, 8006dbe <_strtod_l+0x7d6>
 8006db8:	6933      	ldr	r3, [r6, #16]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	dd7c      	ble.n	8006eb8 <_strtod_l+0x8d0>
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f7ff f9a8 	bl	8006118 <__lshift>
 8006dc8:	4659      	mov	r1, fp
 8006dca:	4606      	mov	r6, r0
 8006dcc:	f7ff fa10 	bl	80061f0 <__mcmp>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	dd71      	ble.n	8006eb8 <_strtod_l+0x8d0>
 8006dd4:	9905      	ldr	r1, [sp, #20]
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	4a21      	ldr	r2, [pc, #132]	; (8006e60 <_strtod_l+0x878>)
 8006dda:	2900      	cmp	r1, #0
 8006ddc:	f000 808d 	beq.w	8006efa <_strtod_l+0x912>
 8006de0:	ea02 0109 	and.w	r1, r2, r9
 8006de4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006de8:	f300 8087 	bgt.w	8006efa <_strtod_l+0x912>
 8006dec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006df0:	f77f aea9 	ble.w	8006b46 <_strtod_l+0x55e>
 8006df4:	4640      	mov	r0, r8
 8006df6:	4649      	mov	r1, r9
 8006df8:	4b1a      	ldr	r3, [pc, #104]	; (8006e64 <_strtod_l+0x87c>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f7f9 fb6c 	bl	80004d8 <__aeabi_dmul>
 8006e00:	4b17      	ldr	r3, [pc, #92]	; (8006e60 <_strtod_l+0x878>)
 8006e02:	4680      	mov	r8, r0
 8006e04:	400b      	ands	r3, r1
 8006e06:	4689      	mov	r9, r1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f47f ae35 	bne.w	8006a78 <_strtod_l+0x490>
 8006e0e:	2322      	movs	r3, #34	; 0x22
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	e631      	b.n	8006a78 <_strtod_l+0x490>
 8006e14:	f04f 32ff 	mov.w	r2, #4294967295
 8006e18:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1c:	ea03 0808 	and.w	r8, r3, r8
 8006e20:	e6de      	b.n	8006be0 <_strtod_l+0x5f8>
 8006e22:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006e26:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006e2a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006e2e:	37e2      	adds	r7, #226	; 0xe2
 8006e30:	fa01 f307 	lsl.w	r3, r1, r7
 8006e34:	9310      	str	r3, [sp, #64]	; 0x40
 8006e36:	9113      	str	r1, [sp, #76]	; 0x4c
 8006e38:	e745      	b.n	8006cc6 <_strtod_l+0x6de>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	9310      	str	r3, [sp, #64]	; 0x40
 8006e3e:	2301      	movs	r3, #1
 8006e40:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e42:	e740      	b.n	8006cc6 <_strtod_l+0x6de>
 8006e44:	463a      	mov	r2, r7
 8006e46:	4620      	mov	r0, r4
 8006e48:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e4a:	f7ff f965 	bl	8006118 <__lshift>
 8006e4e:	901a      	str	r0, [sp, #104]	; 0x68
 8006e50:	2800      	cmp	r0, #0
 8006e52:	f47f af68 	bne.w	8006d26 <_strtod_l+0x73e>
 8006e56:	e605      	b.n	8006a64 <_strtod_l+0x47c>
 8006e58:	08008848 	.word	0x08008848
 8006e5c:	fffffc02 	.word	0xfffffc02
 8006e60:	7ff00000 	.word	0x7ff00000
 8006e64:	39500000 	.word	0x39500000
 8006e68:	46ca      	mov	sl, r9
 8006e6a:	d165      	bne.n	8006f38 <_strtod_l+0x950>
 8006e6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e72:	b352      	cbz	r2, 8006eca <_strtod_l+0x8e2>
 8006e74:	4a9e      	ldr	r2, [pc, #632]	; (80070f0 <_strtod_l+0xb08>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d12a      	bne.n	8006ed0 <_strtod_l+0x8e8>
 8006e7a:	9b05      	ldr	r3, [sp, #20]
 8006e7c:	4641      	mov	r1, r8
 8006e7e:	b1fb      	cbz	r3, 8006ec0 <_strtod_l+0x8d8>
 8006e80:	4b9c      	ldr	r3, [pc, #624]	; (80070f4 <_strtod_l+0xb0c>)
 8006e82:	f04f 32ff 	mov.w	r2, #4294967295
 8006e86:	ea09 0303 	and.w	r3, r9, r3
 8006e8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e8e:	d81a      	bhi.n	8006ec6 <_strtod_l+0x8de>
 8006e90:	0d1b      	lsrs	r3, r3, #20
 8006e92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e96:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9a:	4299      	cmp	r1, r3
 8006e9c:	d118      	bne.n	8006ed0 <_strtod_l+0x8e8>
 8006e9e:	4b96      	ldr	r3, [pc, #600]	; (80070f8 <_strtod_l+0xb10>)
 8006ea0:	459a      	cmp	sl, r3
 8006ea2:	d102      	bne.n	8006eaa <_strtod_l+0x8c2>
 8006ea4:	3101      	adds	r1, #1
 8006ea6:	f43f addd 	beq.w	8006a64 <_strtod_l+0x47c>
 8006eaa:	f04f 0800 	mov.w	r8, #0
 8006eae:	4b91      	ldr	r3, [pc, #580]	; (80070f4 <_strtod_l+0xb0c>)
 8006eb0:	ea0a 0303 	and.w	r3, sl, r3
 8006eb4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006eb8:	9b05      	ldr	r3, [sp, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d19a      	bne.n	8006df4 <_strtod_l+0x80c>
 8006ebe:	e5db      	b.n	8006a78 <_strtod_l+0x490>
 8006ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec4:	e7e9      	b.n	8006e9a <_strtod_l+0x8b2>
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	e7e7      	b.n	8006e9a <_strtod_l+0x8b2>
 8006eca:	ea53 0308 	orrs.w	r3, r3, r8
 8006ece:	d081      	beq.n	8006dd4 <_strtod_l+0x7ec>
 8006ed0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ed2:	b1e3      	cbz	r3, 8006f0e <_strtod_l+0x926>
 8006ed4:	ea13 0f0a 	tst.w	r3, sl
 8006ed8:	d0ee      	beq.n	8006eb8 <_strtod_l+0x8d0>
 8006eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006edc:	4640      	mov	r0, r8
 8006ede:	4649      	mov	r1, r9
 8006ee0:	9a05      	ldr	r2, [sp, #20]
 8006ee2:	b1c3      	cbz	r3, 8006f16 <_strtod_l+0x92e>
 8006ee4:	f7ff fb5c 	bl	80065a0 <sulp>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006eee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ef0:	f7f9 f93c 	bl	800016c <__adddf3>
 8006ef4:	4680      	mov	r8, r0
 8006ef6:	4689      	mov	r9, r1
 8006ef8:	e7de      	b.n	8006eb8 <_strtod_l+0x8d0>
 8006efa:	4013      	ands	r3, r2
 8006efc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006f00:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006f04:	f04f 38ff 	mov.w	r8, #4294967295
 8006f08:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006f0c:	e7d4      	b.n	8006eb8 <_strtod_l+0x8d0>
 8006f0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f10:	ea13 0f08 	tst.w	r3, r8
 8006f14:	e7e0      	b.n	8006ed8 <_strtod_l+0x8f0>
 8006f16:	f7ff fb43 	bl	80065a0 <sulp>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f22:	f7f9 f921 	bl	8000168 <__aeabi_dsub>
 8006f26:	2200      	movs	r2, #0
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4680      	mov	r8, r0
 8006f2c:	4689      	mov	r9, r1
 8006f2e:	f7f9 fd3b 	bl	80009a8 <__aeabi_dcmpeq>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d0c0      	beq.n	8006eb8 <_strtod_l+0x8d0>
 8006f36:	e606      	b.n	8006b46 <_strtod_l+0x55e>
 8006f38:	4659      	mov	r1, fp
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f7ff fabe 	bl	80064bc <__ratio>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f4e:	f7f9 fd3f 	bl	80009d0 <__aeabi_dcmple>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d06f      	beq.n	8007036 <_strtod_l+0xa4e>
 8006f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d17c      	bne.n	8007056 <_strtod_l+0xa6e>
 8006f5c:	f1b8 0f00 	cmp.w	r8, #0
 8006f60:	d159      	bne.n	8007016 <_strtod_l+0xa2e>
 8006f62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d17b      	bne.n	8007062 <_strtod_l+0xa7a>
 8006f6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f6e:	2200      	movs	r2, #0
 8006f70:	4b62      	ldr	r3, [pc, #392]	; (80070fc <_strtod_l+0xb14>)
 8006f72:	f7f9 fd23 	bl	80009bc <__aeabi_dcmplt>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d15a      	bne.n	8007030 <_strtod_l+0xa48>
 8006f7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4b5f      	ldr	r3, [pc, #380]	; (8007100 <_strtod_l+0xb18>)
 8006f82:	f7f9 faa9 	bl	80004d8 <__aeabi_dmul>
 8006f86:	4605      	mov	r5, r0
 8006f88:	460f      	mov	r7, r1
 8006f8a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006f8e:	9506      	str	r5, [sp, #24]
 8006f90:	9307      	str	r3, [sp, #28]
 8006f92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f96:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f9a:	4b56      	ldr	r3, [pc, #344]	; (80070f4 <_strtod_l+0xb0c>)
 8006f9c:	4a55      	ldr	r2, [pc, #340]	; (80070f4 <_strtod_l+0xb0c>)
 8006f9e:	ea0a 0303 	and.w	r3, sl, r3
 8006fa2:	9313      	str	r3, [sp, #76]	; 0x4c
 8006fa4:	4b57      	ldr	r3, [pc, #348]	; (8007104 <_strtod_l+0xb1c>)
 8006fa6:	ea0a 0202 	and.w	r2, sl, r2
 8006faa:	429a      	cmp	r2, r3
 8006fac:	f040 80b0 	bne.w	8007110 <_strtod_l+0xb28>
 8006fb0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	f7ff f9c2 	bl	8006340 <__ulp>
 8006fbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fc0:	f7f9 fa8a 	bl	80004d8 <__aeabi_dmul>
 8006fc4:	4642      	mov	r2, r8
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	f7f9 f8d0 	bl	800016c <__adddf3>
 8006fcc:	f8df a124 	ldr.w	sl, [pc, #292]	; 80070f4 <_strtod_l+0xb0c>
 8006fd0:	4a4d      	ldr	r2, [pc, #308]	; (8007108 <_strtod_l+0xb20>)
 8006fd2:	ea01 0a0a 	and.w	sl, r1, sl
 8006fd6:	4592      	cmp	sl, r2
 8006fd8:	4680      	mov	r8, r0
 8006fda:	d948      	bls.n	800706e <_strtod_l+0xa86>
 8006fdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fde:	4b46      	ldr	r3, [pc, #280]	; (80070f8 <_strtod_l+0xb10>)
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d103      	bne.n	8006fec <_strtod_l+0xa04>
 8006fe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	f43f ad3c 	beq.w	8006a64 <_strtod_l+0x47c>
 8006fec:	f04f 38ff 	mov.w	r8, #4294967295
 8006ff0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80070f8 <_strtod_l+0xb10>
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ff8:	f7fe fe76 	bl	8005ce8 <_Bfree>
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	9908      	ldr	r1, [sp, #32]
 8007000:	f7fe fe72 	bl	8005ce8 <_Bfree>
 8007004:	4659      	mov	r1, fp
 8007006:	4620      	mov	r0, r4
 8007008:	f7fe fe6e 	bl	8005ce8 <_Bfree>
 800700c:	4631      	mov	r1, r6
 800700e:	4620      	mov	r0, r4
 8007010:	f7fe fe6a 	bl	8005ce8 <_Bfree>
 8007014:	e605      	b.n	8006c22 <_strtod_l+0x63a>
 8007016:	f1b8 0f01 	cmp.w	r8, #1
 800701a:	d103      	bne.n	8007024 <_strtod_l+0xa3c>
 800701c:	f1b9 0f00 	cmp.w	r9, #0
 8007020:	f43f ad91 	beq.w	8006b46 <_strtod_l+0x55e>
 8007024:	2200      	movs	r2, #0
 8007026:	4b39      	ldr	r3, [pc, #228]	; (800710c <_strtod_l+0xb24>)
 8007028:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800702a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800702e:	e016      	b.n	800705e <_strtod_l+0xa76>
 8007030:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007032:	4f33      	ldr	r7, [pc, #204]	; (8007100 <_strtod_l+0xb18>)
 8007034:	e7a9      	b.n	8006f8a <_strtod_l+0x9a2>
 8007036:	4b32      	ldr	r3, [pc, #200]	; (8007100 <_strtod_l+0xb18>)
 8007038:	2200      	movs	r2, #0
 800703a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800703e:	f7f9 fa4b 	bl	80004d8 <__aeabi_dmul>
 8007042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007044:	4605      	mov	r5, r0
 8007046:	460f      	mov	r7, r1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d09e      	beq.n	8006f8a <_strtod_l+0x9a2>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007054:	e79d      	b.n	8006f92 <_strtod_l+0x9aa>
 8007056:	2200      	movs	r2, #0
 8007058:	4b28      	ldr	r3, [pc, #160]	; (80070fc <_strtod_l+0xb14>)
 800705a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800705e:	4f27      	ldr	r7, [pc, #156]	; (80070fc <_strtod_l+0xb14>)
 8007060:	e797      	b.n	8006f92 <_strtod_l+0x9aa>
 8007062:	2200      	movs	r2, #0
 8007064:	4b29      	ldr	r3, [pc, #164]	; (800710c <_strtod_l+0xb24>)
 8007066:	4645      	mov	r5, r8
 8007068:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800706c:	e7f7      	b.n	800705e <_strtod_l+0xa76>
 800706e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007072:	9b05      	ldr	r3, [sp, #20]
 8007074:	46ca      	mov	sl, r9
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1bc      	bne.n	8006ff4 <_strtod_l+0xa0c>
 800707a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800707e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007080:	0d1b      	lsrs	r3, r3, #20
 8007082:	051b      	lsls	r3, r3, #20
 8007084:	429a      	cmp	r2, r3
 8007086:	d1b5      	bne.n	8006ff4 <_strtod_l+0xa0c>
 8007088:	4628      	mov	r0, r5
 800708a:	4639      	mov	r1, r7
 800708c:	f7f9 fd6c 	bl	8000b68 <__aeabi_d2lz>
 8007090:	f7f9 f9f4 	bl	800047c <__aeabi_l2d>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4628      	mov	r0, r5
 800709a:	4639      	mov	r1, r7
 800709c:	f7f9 f864 	bl	8000168 <__aeabi_dsub>
 80070a0:	460b      	mov	r3, r1
 80070a2:	4602      	mov	r2, r0
 80070a4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80070a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80070ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ae:	ea4a 0a08 	orr.w	sl, sl, r8
 80070b2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80070b6:	d06c      	beq.n	8007192 <_strtod_l+0xbaa>
 80070b8:	a309      	add	r3, pc, #36	; (adr r3, 80070e0 <_strtod_l+0xaf8>)
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	f7f9 fc7d 	bl	80009bc <__aeabi_dcmplt>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	f47f acd8 	bne.w	8006a78 <_strtod_l+0x490>
 80070c8:	a307      	add	r3, pc, #28	; (adr r3, 80070e8 <_strtod_l+0xb00>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070d2:	f7f9 fc91 	bl	80009f8 <__aeabi_dcmpgt>
 80070d6:	2800      	cmp	r0, #0
 80070d8:	d08c      	beq.n	8006ff4 <_strtod_l+0xa0c>
 80070da:	e4cd      	b.n	8006a78 <_strtod_l+0x490>
 80070dc:	f3af 8000 	nop.w
 80070e0:	94a03595 	.word	0x94a03595
 80070e4:	3fdfffff 	.word	0x3fdfffff
 80070e8:	35afe535 	.word	0x35afe535
 80070ec:	3fe00000 	.word	0x3fe00000
 80070f0:	000fffff 	.word	0x000fffff
 80070f4:	7ff00000 	.word	0x7ff00000
 80070f8:	7fefffff 	.word	0x7fefffff
 80070fc:	3ff00000 	.word	0x3ff00000
 8007100:	3fe00000 	.word	0x3fe00000
 8007104:	7fe00000 	.word	0x7fe00000
 8007108:	7c9fffff 	.word	0x7c9fffff
 800710c:	bff00000 	.word	0xbff00000
 8007110:	9b05      	ldr	r3, [sp, #20]
 8007112:	b333      	cbz	r3, 8007162 <_strtod_l+0xb7a>
 8007114:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007116:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800711a:	d822      	bhi.n	8007162 <_strtod_l+0xb7a>
 800711c:	a328      	add	r3, pc, #160	; (adr r3, 80071c0 <_strtod_l+0xbd8>)
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	4628      	mov	r0, r5
 8007124:	4639      	mov	r1, r7
 8007126:	f7f9 fc53 	bl	80009d0 <__aeabi_dcmple>
 800712a:	b1a0      	cbz	r0, 8007156 <_strtod_l+0xb6e>
 800712c:	4639      	mov	r1, r7
 800712e:	4628      	mov	r0, r5
 8007130:	f7f9 fcaa 	bl	8000a88 <__aeabi_d2uiz>
 8007134:	2801      	cmp	r0, #1
 8007136:	bf38      	it	cc
 8007138:	2001      	movcc	r0, #1
 800713a:	f7f9 f953 	bl	80003e4 <__aeabi_ui2d>
 800713e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007140:	4605      	mov	r5, r0
 8007142:	460f      	mov	r7, r1
 8007144:	bb03      	cbnz	r3, 8007188 <_strtod_l+0xba0>
 8007146:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800714a:	9014      	str	r0, [sp, #80]	; 0x50
 800714c:	9315      	str	r3, [sp, #84]	; 0x54
 800714e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007152:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007156:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007158:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800715a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800715e:	1a9b      	subs	r3, r3, r2
 8007160:	9311      	str	r3, [sp, #68]	; 0x44
 8007162:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007164:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007166:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800716a:	f7ff f8e9 	bl	8006340 <__ulp>
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	4640      	mov	r0, r8
 8007174:	4649      	mov	r1, r9
 8007176:	f7f9 f9af 	bl	80004d8 <__aeabi_dmul>
 800717a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800717c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800717e:	f7f8 fff5 	bl	800016c <__adddf3>
 8007182:	4680      	mov	r8, r0
 8007184:	4689      	mov	r9, r1
 8007186:	e774      	b.n	8007072 <_strtod_l+0xa8a>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007190:	e7dd      	b.n	800714e <_strtod_l+0xb66>
 8007192:	a30d      	add	r3, pc, #52	; (adr r3, 80071c8 <_strtod_l+0xbe0>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	f7f9 fc10 	bl	80009bc <__aeabi_dcmplt>
 800719c:	e79b      	b.n	80070d6 <_strtod_l+0xaee>
 800719e:	2300      	movs	r3, #0
 80071a0:	930e      	str	r3, [sp, #56]	; 0x38
 80071a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071a6:	6013      	str	r3, [r2, #0]
 80071a8:	f7ff ba5b 	b.w	8006662 <_strtod_l+0x7a>
 80071ac:	2a65      	cmp	r2, #101	; 0x65
 80071ae:	f43f ab52 	beq.w	8006856 <_strtod_l+0x26e>
 80071b2:	2a45      	cmp	r2, #69	; 0x45
 80071b4:	f43f ab4f 	beq.w	8006856 <_strtod_l+0x26e>
 80071b8:	2301      	movs	r3, #1
 80071ba:	f7ff bb87 	b.w	80068cc <_strtod_l+0x2e4>
 80071be:	bf00      	nop
 80071c0:	ffc00000 	.word	0xffc00000
 80071c4:	41dfffff 	.word	0x41dfffff
 80071c8:	94a03595 	.word	0x94a03595
 80071cc:	3fcfffff 	.word	0x3fcfffff

080071d0 <_strtod_r>:
 80071d0:	4b01      	ldr	r3, [pc, #4]	; (80071d8 <_strtod_r+0x8>)
 80071d2:	f7ff ba09 	b.w	80065e8 <_strtod_l>
 80071d6:	bf00      	nop
 80071d8:	2000006c 	.word	0x2000006c

080071dc <_strtol_l.constprop.0>:
 80071dc:	2b01      	cmp	r3, #1
 80071de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e2:	4686      	mov	lr, r0
 80071e4:	4690      	mov	r8, r2
 80071e6:	d001      	beq.n	80071ec <_strtol_l.constprop.0+0x10>
 80071e8:	2b24      	cmp	r3, #36	; 0x24
 80071ea:	d906      	bls.n	80071fa <_strtol_l.constprop.0+0x1e>
 80071ec:	f7fd fd82 	bl	8004cf4 <__errno>
 80071f0:	2316      	movs	r3, #22
 80071f2:	6003      	str	r3, [r0, #0]
 80071f4:	2000      	movs	r0, #0
 80071f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fa:	460d      	mov	r5, r1
 80071fc:	4835      	ldr	r0, [pc, #212]	; (80072d4 <_strtol_l.constprop.0+0xf8>)
 80071fe:	462a      	mov	r2, r5
 8007200:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007204:	5d06      	ldrb	r6, [r0, r4]
 8007206:	f016 0608 	ands.w	r6, r6, #8
 800720a:	d1f8      	bne.n	80071fe <_strtol_l.constprop.0+0x22>
 800720c:	2c2d      	cmp	r4, #45	; 0x2d
 800720e:	d12e      	bne.n	800726e <_strtol_l.constprop.0+0x92>
 8007210:	2601      	movs	r6, #1
 8007212:	782c      	ldrb	r4, [r5, #0]
 8007214:	1c95      	adds	r5, r2, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d057      	beq.n	80072ca <_strtol_l.constprop.0+0xee>
 800721a:	2b10      	cmp	r3, #16
 800721c:	d109      	bne.n	8007232 <_strtol_l.constprop.0+0x56>
 800721e:	2c30      	cmp	r4, #48	; 0x30
 8007220:	d107      	bne.n	8007232 <_strtol_l.constprop.0+0x56>
 8007222:	782a      	ldrb	r2, [r5, #0]
 8007224:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007228:	2a58      	cmp	r2, #88	; 0x58
 800722a:	d149      	bne.n	80072c0 <_strtol_l.constprop.0+0xe4>
 800722c:	2310      	movs	r3, #16
 800722e:	786c      	ldrb	r4, [r5, #1]
 8007230:	3502      	adds	r5, #2
 8007232:	2200      	movs	r2, #0
 8007234:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007238:	f10c 3cff 	add.w	ip, ip, #4294967295
 800723c:	fbbc f9f3 	udiv	r9, ip, r3
 8007240:	4610      	mov	r0, r2
 8007242:	fb03 ca19 	mls	sl, r3, r9, ip
 8007246:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800724a:	2f09      	cmp	r7, #9
 800724c:	d814      	bhi.n	8007278 <_strtol_l.constprop.0+0x9c>
 800724e:	463c      	mov	r4, r7
 8007250:	42a3      	cmp	r3, r4
 8007252:	dd20      	ble.n	8007296 <_strtol_l.constprop.0+0xba>
 8007254:	1c57      	adds	r7, r2, #1
 8007256:	d007      	beq.n	8007268 <_strtol_l.constprop.0+0x8c>
 8007258:	4581      	cmp	r9, r0
 800725a:	d319      	bcc.n	8007290 <_strtol_l.constprop.0+0xb4>
 800725c:	d101      	bne.n	8007262 <_strtol_l.constprop.0+0x86>
 800725e:	45a2      	cmp	sl, r4
 8007260:	db16      	blt.n	8007290 <_strtol_l.constprop.0+0xb4>
 8007262:	2201      	movs	r2, #1
 8007264:	fb00 4003 	mla	r0, r0, r3, r4
 8007268:	f815 4b01 	ldrb.w	r4, [r5], #1
 800726c:	e7eb      	b.n	8007246 <_strtol_l.constprop.0+0x6a>
 800726e:	2c2b      	cmp	r4, #43	; 0x2b
 8007270:	bf04      	itt	eq
 8007272:	782c      	ldrbeq	r4, [r5, #0]
 8007274:	1c95      	addeq	r5, r2, #2
 8007276:	e7ce      	b.n	8007216 <_strtol_l.constprop.0+0x3a>
 8007278:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800727c:	2f19      	cmp	r7, #25
 800727e:	d801      	bhi.n	8007284 <_strtol_l.constprop.0+0xa8>
 8007280:	3c37      	subs	r4, #55	; 0x37
 8007282:	e7e5      	b.n	8007250 <_strtol_l.constprop.0+0x74>
 8007284:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007288:	2f19      	cmp	r7, #25
 800728a:	d804      	bhi.n	8007296 <_strtol_l.constprop.0+0xba>
 800728c:	3c57      	subs	r4, #87	; 0x57
 800728e:	e7df      	b.n	8007250 <_strtol_l.constprop.0+0x74>
 8007290:	f04f 32ff 	mov.w	r2, #4294967295
 8007294:	e7e8      	b.n	8007268 <_strtol_l.constprop.0+0x8c>
 8007296:	1c53      	adds	r3, r2, #1
 8007298:	d108      	bne.n	80072ac <_strtol_l.constprop.0+0xd0>
 800729a:	2322      	movs	r3, #34	; 0x22
 800729c:	4660      	mov	r0, ip
 800729e:	f8ce 3000 	str.w	r3, [lr]
 80072a2:	f1b8 0f00 	cmp.w	r8, #0
 80072a6:	d0a6      	beq.n	80071f6 <_strtol_l.constprop.0+0x1a>
 80072a8:	1e69      	subs	r1, r5, #1
 80072aa:	e006      	b.n	80072ba <_strtol_l.constprop.0+0xde>
 80072ac:	b106      	cbz	r6, 80072b0 <_strtol_l.constprop.0+0xd4>
 80072ae:	4240      	negs	r0, r0
 80072b0:	f1b8 0f00 	cmp.w	r8, #0
 80072b4:	d09f      	beq.n	80071f6 <_strtol_l.constprop.0+0x1a>
 80072b6:	2a00      	cmp	r2, #0
 80072b8:	d1f6      	bne.n	80072a8 <_strtol_l.constprop.0+0xcc>
 80072ba:	f8c8 1000 	str.w	r1, [r8]
 80072be:	e79a      	b.n	80071f6 <_strtol_l.constprop.0+0x1a>
 80072c0:	2430      	movs	r4, #48	; 0x30
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1b5      	bne.n	8007232 <_strtol_l.constprop.0+0x56>
 80072c6:	2308      	movs	r3, #8
 80072c8:	e7b3      	b.n	8007232 <_strtol_l.constprop.0+0x56>
 80072ca:	2c30      	cmp	r4, #48	; 0x30
 80072cc:	d0a9      	beq.n	8007222 <_strtol_l.constprop.0+0x46>
 80072ce:	230a      	movs	r3, #10
 80072d0:	e7af      	b.n	8007232 <_strtol_l.constprop.0+0x56>
 80072d2:	bf00      	nop
 80072d4:	08008871 	.word	0x08008871

080072d8 <_strtol_r>:
 80072d8:	f7ff bf80 	b.w	80071dc <_strtol_l.constprop.0>

080072dc <__ssputs_r>:
 80072dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e0:	461f      	mov	r7, r3
 80072e2:	688e      	ldr	r6, [r1, #8]
 80072e4:	4682      	mov	sl, r0
 80072e6:	42be      	cmp	r6, r7
 80072e8:	460c      	mov	r4, r1
 80072ea:	4690      	mov	r8, r2
 80072ec:	680b      	ldr	r3, [r1, #0]
 80072ee:	d82c      	bhi.n	800734a <__ssputs_r+0x6e>
 80072f0:	898a      	ldrh	r2, [r1, #12]
 80072f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072f6:	d026      	beq.n	8007346 <__ssputs_r+0x6a>
 80072f8:	6965      	ldr	r5, [r4, #20]
 80072fa:	6909      	ldr	r1, [r1, #16]
 80072fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007300:	eba3 0901 	sub.w	r9, r3, r1
 8007304:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007308:	1c7b      	adds	r3, r7, #1
 800730a:	444b      	add	r3, r9
 800730c:	106d      	asrs	r5, r5, #1
 800730e:	429d      	cmp	r5, r3
 8007310:	bf38      	it	cc
 8007312:	461d      	movcc	r5, r3
 8007314:	0553      	lsls	r3, r2, #21
 8007316:	d527      	bpl.n	8007368 <__ssputs_r+0x8c>
 8007318:	4629      	mov	r1, r5
 800731a:	f7fe fc19 	bl	8005b50 <_malloc_r>
 800731e:	4606      	mov	r6, r0
 8007320:	b360      	cbz	r0, 800737c <__ssputs_r+0xa0>
 8007322:	464a      	mov	r2, r9
 8007324:	6921      	ldr	r1, [r4, #16]
 8007326:	f7fd fd20 	bl	8004d6a <memcpy>
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007334:	81a3      	strh	r3, [r4, #12]
 8007336:	6126      	str	r6, [r4, #16]
 8007338:	444e      	add	r6, r9
 800733a:	6026      	str	r6, [r4, #0]
 800733c:	463e      	mov	r6, r7
 800733e:	6165      	str	r5, [r4, #20]
 8007340:	eba5 0509 	sub.w	r5, r5, r9
 8007344:	60a5      	str	r5, [r4, #8]
 8007346:	42be      	cmp	r6, r7
 8007348:	d900      	bls.n	800734c <__ssputs_r+0x70>
 800734a:	463e      	mov	r6, r7
 800734c:	4632      	mov	r2, r6
 800734e:	4641      	mov	r1, r8
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	f000 fb9d 	bl	8007a90 <memmove>
 8007356:	2000      	movs	r0, #0
 8007358:	68a3      	ldr	r3, [r4, #8]
 800735a:	1b9b      	subs	r3, r3, r6
 800735c:	60a3      	str	r3, [r4, #8]
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	4433      	add	r3, r6
 8007362:	6023      	str	r3, [r4, #0]
 8007364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007368:	462a      	mov	r2, r5
 800736a:	f000 ff70 	bl	800824e <_realloc_r>
 800736e:	4606      	mov	r6, r0
 8007370:	2800      	cmp	r0, #0
 8007372:	d1e0      	bne.n	8007336 <__ssputs_r+0x5a>
 8007374:	4650      	mov	r0, sl
 8007376:	6921      	ldr	r1, [r4, #16]
 8007378:	f7fe fb7a 	bl	8005a70 <_free_r>
 800737c:	230c      	movs	r3, #12
 800737e:	f8ca 3000 	str.w	r3, [sl]
 8007382:	89a3      	ldrh	r3, [r4, #12]
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800738c:	81a3      	strh	r3, [r4, #12]
 800738e:	e7e9      	b.n	8007364 <__ssputs_r+0x88>

08007390 <_svfiprintf_r>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	4698      	mov	r8, r3
 8007396:	898b      	ldrh	r3, [r1, #12]
 8007398:	4607      	mov	r7, r0
 800739a:	061b      	lsls	r3, r3, #24
 800739c:	460d      	mov	r5, r1
 800739e:	4614      	mov	r4, r2
 80073a0:	b09d      	sub	sp, #116	; 0x74
 80073a2:	d50e      	bpl.n	80073c2 <_svfiprintf_r+0x32>
 80073a4:	690b      	ldr	r3, [r1, #16]
 80073a6:	b963      	cbnz	r3, 80073c2 <_svfiprintf_r+0x32>
 80073a8:	2140      	movs	r1, #64	; 0x40
 80073aa:	f7fe fbd1 	bl	8005b50 <_malloc_r>
 80073ae:	6028      	str	r0, [r5, #0]
 80073b0:	6128      	str	r0, [r5, #16]
 80073b2:	b920      	cbnz	r0, 80073be <_svfiprintf_r+0x2e>
 80073b4:	230c      	movs	r3, #12
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	f04f 30ff 	mov.w	r0, #4294967295
 80073bc:	e0d0      	b.n	8007560 <_svfiprintf_r+0x1d0>
 80073be:	2340      	movs	r3, #64	; 0x40
 80073c0:	616b      	str	r3, [r5, #20]
 80073c2:	2300      	movs	r3, #0
 80073c4:	9309      	str	r3, [sp, #36]	; 0x24
 80073c6:	2320      	movs	r3, #32
 80073c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073cc:	2330      	movs	r3, #48	; 0x30
 80073ce:	f04f 0901 	mov.w	r9, #1
 80073d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80073d6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007578 <_svfiprintf_r+0x1e8>
 80073da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073de:	4623      	mov	r3, r4
 80073e0:	469a      	mov	sl, r3
 80073e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073e6:	b10a      	cbz	r2, 80073ec <_svfiprintf_r+0x5c>
 80073e8:	2a25      	cmp	r2, #37	; 0x25
 80073ea:	d1f9      	bne.n	80073e0 <_svfiprintf_r+0x50>
 80073ec:	ebba 0b04 	subs.w	fp, sl, r4
 80073f0:	d00b      	beq.n	800740a <_svfiprintf_r+0x7a>
 80073f2:	465b      	mov	r3, fp
 80073f4:	4622      	mov	r2, r4
 80073f6:	4629      	mov	r1, r5
 80073f8:	4638      	mov	r0, r7
 80073fa:	f7ff ff6f 	bl	80072dc <__ssputs_r>
 80073fe:	3001      	adds	r0, #1
 8007400:	f000 80a9 	beq.w	8007556 <_svfiprintf_r+0x1c6>
 8007404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007406:	445a      	add	r2, fp
 8007408:	9209      	str	r2, [sp, #36]	; 0x24
 800740a:	f89a 3000 	ldrb.w	r3, [sl]
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 80a1 	beq.w	8007556 <_svfiprintf_r+0x1c6>
 8007414:	2300      	movs	r3, #0
 8007416:	f04f 32ff 	mov.w	r2, #4294967295
 800741a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800741e:	f10a 0a01 	add.w	sl, sl, #1
 8007422:	9304      	str	r3, [sp, #16]
 8007424:	9307      	str	r3, [sp, #28]
 8007426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800742a:	931a      	str	r3, [sp, #104]	; 0x68
 800742c:	4654      	mov	r4, sl
 800742e:	2205      	movs	r2, #5
 8007430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007434:	4850      	ldr	r0, [pc, #320]	; (8007578 <_svfiprintf_r+0x1e8>)
 8007436:	f7fd fc8a 	bl	8004d4e <memchr>
 800743a:	9a04      	ldr	r2, [sp, #16]
 800743c:	b9d8      	cbnz	r0, 8007476 <_svfiprintf_r+0xe6>
 800743e:	06d0      	lsls	r0, r2, #27
 8007440:	bf44      	itt	mi
 8007442:	2320      	movmi	r3, #32
 8007444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007448:	0711      	lsls	r1, r2, #28
 800744a:	bf44      	itt	mi
 800744c:	232b      	movmi	r3, #43	; 0x2b
 800744e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007452:	f89a 3000 	ldrb.w	r3, [sl]
 8007456:	2b2a      	cmp	r3, #42	; 0x2a
 8007458:	d015      	beq.n	8007486 <_svfiprintf_r+0xf6>
 800745a:	4654      	mov	r4, sl
 800745c:	2000      	movs	r0, #0
 800745e:	f04f 0c0a 	mov.w	ip, #10
 8007462:	9a07      	ldr	r2, [sp, #28]
 8007464:	4621      	mov	r1, r4
 8007466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800746a:	3b30      	subs	r3, #48	; 0x30
 800746c:	2b09      	cmp	r3, #9
 800746e:	d94d      	bls.n	800750c <_svfiprintf_r+0x17c>
 8007470:	b1b0      	cbz	r0, 80074a0 <_svfiprintf_r+0x110>
 8007472:	9207      	str	r2, [sp, #28]
 8007474:	e014      	b.n	80074a0 <_svfiprintf_r+0x110>
 8007476:	eba0 0308 	sub.w	r3, r0, r8
 800747a:	fa09 f303 	lsl.w	r3, r9, r3
 800747e:	4313      	orrs	r3, r2
 8007480:	46a2      	mov	sl, r4
 8007482:	9304      	str	r3, [sp, #16]
 8007484:	e7d2      	b.n	800742c <_svfiprintf_r+0x9c>
 8007486:	9b03      	ldr	r3, [sp, #12]
 8007488:	1d19      	adds	r1, r3, #4
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	9103      	str	r1, [sp, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	bfbb      	ittet	lt
 8007492:	425b      	neglt	r3, r3
 8007494:	f042 0202 	orrlt.w	r2, r2, #2
 8007498:	9307      	strge	r3, [sp, #28]
 800749a:	9307      	strlt	r3, [sp, #28]
 800749c:	bfb8      	it	lt
 800749e:	9204      	strlt	r2, [sp, #16]
 80074a0:	7823      	ldrb	r3, [r4, #0]
 80074a2:	2b2e      	cmp	r3, #46	; 0x2e
 80074a4:	d10c      	bne.n	80074c0 <_svfiprintf_r+0x130>
 80074a6:	7863      	ldrb	r3, [r4, #1]
 80074a8:	2b2a      	cmp	r3, #42	; 0x2a
 80074aa:	d134      	bne.n	8007516 <_svfiprintf_r+0x186>
 80074ac:	9b03      	ldr	r3, [sp, #12]
 80074ae:	3402      	adds	r4, #2
 80074b0:	1d1a      	adds	r2, r3, #4
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	9203      	str	r2, [sp, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	bfb8      	it	lt
 80074ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80074be:	9305      	str	r3, [sp, #20]
 80074c0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800757c <_svfiprintf_r+0x1ec>
 80074c4:	2203      	movs	r2, #3
 80074c6:	4650      	mov	r0, sl
 80074c8:	7821      	ldrb	r1, [r4, #0]
 80074ca:	f7fd fc40 	bl	8004d4e <memchr>
 80074ce:	b138      	cbz	r0, 80074e0 <_svfiprintf_r+0x150>
 80074d0:	2240      	movs	r2, #64	; 0x40
 80074d2:	9b04      	ldr	r3, [sp, #16]
 80074d4:	eba0 000a 	sub.w	r0, r0, sl
 80074d8:	4082      	lsls	r2, r0
 80074da:	4313      	orrs	r3, r2
 80074dc:	3401      	adds	r4, #1
 80074de:	9304      	str	r3, [sp, #16]
 80074e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e4:	2206      	movs	r2, #6
 80074e6:	4826      	ldr	r0, [pc, #152]	; (8007580 <_svfiprintf_r+0x1f0>)
 80074e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074ec:	f7fd fc2f 	bl	8004d4e <memchr>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d038      	beq.n	8007566 <_svfiprintf_r+0x1d6>
 80074f4:	4b23      	ldr	r3, [pc, #140]	; (8007584 <_svfiprintf_r+0x1f4>)
 80074f6:	bb1b      	cbnz	r3, 8007540 <_svfiprintf_r+0x1b0>
 80074f8:	9b03      	ldr	r3, [sp, #12]
 80074fa:	3307      	adds	r3, #7
 80074fc:	f023 0307 	bic.w	r3, r3, #7
 8007500:	3308      	adds	r3, #8
 8007502:	9303      	str	r3, [sp, #12]
 8007504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007506:	4433      	add	r3, r6
 8007508:	9309      	str	r3, [sp, #36]	; 0x24
 800750a:	e768      	b.n	80073de <_svfiprintf_r+0x4e>
 800750c:	460c      	mov	r4, r1
 800750e:	2001      	movs	r0, #1
 8007510:	fb0c 3202 	mla	r2, ip, r2, r3
 8007514:	e7a6      	b.n	8007464 <_svfiprintf_r+0xd4>
 8007516:	2300      	movs	r3, #0
 8007518:	f04f 0c0a 	mov.w	ip, #10
 800751c:	4619      	mov	r1, r3
 800751e:	3401      	adds	r4, #1
 8007520:	9305      	str	r3, [sp, #20]
 8007522:	4620      	mov	r0, r4
 8007524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007528:	3a30      	subs	r2, #48	; 0x30
 800752a:	2a09      	cmp	r2, #9
 800752c:	d903      	bls.n	8007536 <_svfiprintf_r+0x1a6>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d0c6      	beq.n	80074c0 <_svfiprintf_r+0x130>
 8007532:	9105      	str	r1, [sp, #20]
 8007534:	e7c4      	b.n	80074c0 <_svfiprintf_r+0x130>
 8007536:	4604      	mov	r4, r0
 8007538:	2301      	movs	r3, #1
 800753a:	fb0c 2101 	mla	r1, ip, r1, r2
 800753e:	e7f0      	b.n	8007522 <_svfiprintf_r+0x192>
 8007540:	ab03      	add	r3, sp, #12
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	462a      	mov	r2, r5
 8007546:	4638      	mov	r0, r7
 8007548:	4b0f      	ldr	r3, [pc, #60]	; (8007588 <_svfiprintf_r+0x1f8>)
 800754a:	a904      	add	r1, sp, #16
 800754c:	f7fc fc34 	bl	8003db8 <_printf_float>
 8007550:	1c42      	adds	r2, r0, #1
 8007552:	4606      	mov	r6, r0
 8007554:	d1d6      	bne.n	8007504 <_svfiprintf_r+0x174>
 8007556:	89ab      	ldrh	r3, [r5, #12]
 8007558:	065b      	lsls	r3, r3, #25
 800755a:	f53f af2d 	bmi.w	80073b8 <_svfiprintf_r+0x28>
 800755e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007560:	b01d      	add	sp, #116	; 0x74
 8007562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007566:	ab03      	add	r3, sp, #12
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	462a      	mov	r2, r5
 800756c:	4638      	mov	r0, r7
 800756e:	4b06      	ldr	r3, [pc, #24]	; (8007588 <_svfiprintf_r+0x1f8>)
 8007570:	a904      	add	r1, sp, #16
 8007572:	f7fc fec1 	bl	80042f8 <_printf_i>
 8007576:	e7eb      	b.n	8007550 <_svfiprintf_r+0x1c0>
 8007578:	08008971 	.word	0x08008971
 800757c:	08008977 	.word	0x08008977
 8007580:	0800897b 	.word	0x0800897b
 8007584:	08003db9 	.word	0x08003db9
 8007588:	080072dd 	.word	0x080072dd

0800758c <__sfputc_r>:
 800758c:	6893      	ldr	r3, [r2, #8]
 800758e:	b410      	push	{r4}
 8007590:	3b01      	subs	r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	6093      	str	r3, [r2, #8]
 8007596:	da07      	bge.n	80075a8 <__sfputc_r+0x1c>
 8007598:	6994      	ldr	r4, [r2, #24]
 800759a:	42a3      	cmp	r3, r4
 800759c:	db01      	blt.n	80075a2 <__sfputc_r+0x16>
 800759e:	290a      	cmp	r1, #10
 80075a0:	d102      	bne.n	80075a8 <__sfputc_r+0x1c>
 80075a2:	bc10      	pop	{r4}
 80075a4:	f000 b9de 	b.w	8007964 <__swbuf_r>
 80075a8:	6813      	ldr	r3, [r2, #0]
 80075aa:	1c58      	adds	r0, r3, #1
 80075ac:	6010      	str	r0, [r2, #0]
 80075ae:	7019      	strb	r1, [r3, #0]
 80075b0:	4608      	mov	r0, r1
 80075b2:	bc10      	pop	{r4}
 80075b4:	4770      	bx	lr

080075b6 <__sfputs_r>:
 80075b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b8:	4606      	mov	r6, r0
 80075ba:	460f      	mov	r7, r1
 80075bc:	4614      	mov	r4, r2
 80075be:	18d5      	adds	r5, r2, r3
 80075c0:	42ac      	cmp	r4, r5
 80075c2:	d101      	bne.n	80075c8 <__sfputs_r+0x12>
 80075c4:	2000      	movs	r0, #0
 80075c6:	e007      	b.n	80075d8 <__sfputs_r+0x22>
 80075c8:	463a      	mov	r2, r7
 80075ca:	4630      	mov	r0, r6
 80075cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d0:	f7ff ffdc 	bl	800758c <__sfputc_r>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d1f3      	bne.n	80075c0 <__sfputs_r+0xa>
 80075d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075dc <_vfiprintf_r>:
 80075dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e0:	460d      	mov	r5, r1
 80075e2:	4614      	mov	r4, r2
 80075e4:	4698      	mov	r8, r3
 80075e6:	4606      	mov	r6, r0
 80075e8:	b09d      	sub	sp, #116	; 0x74
 80075ea:	b118      	cbz	r0, 80075f4 <_vfiprintf_r+0x18>
 80075ec:	6a03      	ldr	r3, [r0, #32]
 80075ee:	b90b      	cbnz	r3, 80075f4 <_vfiprintf_r+0x18>
 80075f0:	f7fd fa3e 	bl	8004a70 <__sinit>
 80075f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075f6:	07d9      	lsls	r1, r3, #31
 80075f8:	d405      	bmi.n	8007606 <_vfiprintf_r+0x2a>
 80075fa:	89ab      	ldrh	r3, [r5, #12]
 80075fc:	059a      	lsls	r2, r3, #22
 80075fe:	d402      	bmi.n	8007606 <_vfiprintf_r+0x2a>
 8007600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007602:	f7fd fba2 	bl	8004d4a <__retarget_lock_acquire_recursive>
 8007606:	89ab      	ldrh	r3, [r5, #12]
 8007608:	071b      	lsls	r3, r3, #28
 800760a:	d501      	bpl.n	8007610 <_vfiprintf_r+0x34>
 800760c:	692b      	ldr	r3, [r5, #16]
 800760e:	b99b      	cbnz	r3, 8007638 <_vfiprintf_r+0x5c>
 8007610:	4629      	mov	r1, r5
 8007612:	4630      	mov	r0, r6
 8007614:	f000 f9e4 	bl	80079e0 <__swsetup_r>
 8007618:	b170      	cbz	r0, 8007638 <_vfiprintf_r+0x5c>
 800761a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800761c:	07dc      	lsls	r4, r3, #31
 800761e:	d504      	bpl.n	800762a <_vfiprintf_r+0x4e>
 8007620:	f04f 30ff 	mov.w	r0, #4294967295
 8007624:	b01d      	add	sp, #116	; 0x74
 8007626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762a:	89ab      	ldrh	r3, [r5, #12]
 800762c:	0598      	lsls	r0, r3, #22
 800762e:	d4f7      	bmi.n	8007620 <_vfiprintf_r+0x44>
 8007630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007632:	f7fd fb8b 	bl	8004d4c <__retarget_lock_release_recursive>
 8007636:	e7f3      	b.n	8007620 <_vfiprintf_r+0x44>
 8007638:	2300      	movs	r3, #0
 800763a:	9309      	str	r3, [sp, #36]	; 0x24
 800763c:	2320      	movs	r3, #32
 800763e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007642:	2330      	movs	r3, #48	; 0x30
 8007644:	f04f 0901 	mov.w	r9, #1
 8007648:	f8cd 800c 	str.w	r8, [sp, #12]
 800764c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80077fc <_vfiprintf_r+0x220>
 8007650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007654:	4623      	mov	r3, r4
 8007656:	469a      	mov	sl, r3
 8007658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800765c:	b10a      	cbz	r2, 8007662 <_vfiprintf_r+0x86>
 800765e:	2a25      	cmp	r2, #37	; 0x25
 8007660:	d1f9      	bne.n	8007656 <_vfiprintf_r+0x7a>
 8007662:	ebba 0b04 	subs.w	fp, sl, r4
 8007666:	d00b      	beq.n	8007680 <_vfiprintf_r+0xa4>
 8007668:	465b      	mov	r3, fp
 800766a:	4622      	mov	r2, r4
 800766c:	4629      	mov	r1, r5
 800766e:	4630      	mov	r0, r6
 8007670:	f7ff ffa1 	bl	80075b6 <__sfputs_r>
 8007674:	3001      	adds	r0, #1
 8007676:	f000 80a9 	beq.w	80077cc <_vfiprintf_r+0x1f0>
 800767a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800767c:	445a      	add	r2, fp
 800767e:	9209      	str	r2, [sp, #36]	; 0x24
 8007680:	f89a 3000 	ldrb.w	r3, [sl]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 80a1 	beq.w	80077cc <_vfiprintf_r+0x1f0>
 800768a:	2300      	movs	r3, #0
 800768c:	f04f 32ff 	mov.w	r2, #4294967295
 8007690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007694:	f10a 0a01 	add.w	sl, sl, #1
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	9307      	str	r3, [sp, #28]
 800769c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076a0:	931a      	str	r3, [sp, #104]	; 0x68
 80076a2:	4654      	mov	r4, sl
 80076a4:	2205      	movs	r2, #5
 80076a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076aa:	4854      	ldr	r0, [pc, #336]	; (80077fc <_vfiprintf_r+0x220>)
 80076ac:	f7fd fb4f 	bl	8004d4e <memchr>
 80076b0:	9a04      	ldr	r2, [sp, #16]
 80076b2:	b9d8      	cbnz	r0, 80076ec <_vfiprintf_r+0x110>
 80076b4:	06d1      	lsls	r1, r2, #27
 80076b6:	bf44      	itt	mi
 80076b8:	2320      	movmi	r3, #32
 80076ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076be:	0713      	lsls	r3, r2, #28
 80076c0:	bf44      	itt	mi
 80076c2:	232b      	movmi	r3, #43	; 0x2b
 80076c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076c8:	f89a 3000 	ldrb.w	r3, [sl]
 80076cc:	2b2a      	cmp	r3, #42	; 0x2a
 80076ce:	d015      	beq.n	80076fc <_vfiprintf_r+0x120>
 80076d0:	4654      	mov	r4, sl
 80076d2:	2000      	movs	r0, #0
 80076d4:	f04f 0c0a 	mov.w	ip, #10
 80076d8:	9a07      	ldr	r2, [sp, #28]
 80076da:	4621      	mov	r1, r4
 80076dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076e0:	3b30      	subs	r3, #48	; 0x30
 80076e2:	2b09      	cmp	r3, #9
 80076e4:	d94d      	bls.n	8007782 <_vfiprintf_r+0x1a6>
 80076e6:	b1b0      	cbz	r0, 8007716 <_vfiprintf_r+0x13a>
 80076e8:	9207      	str	r2, [sp, #28]
 80076ea:	e014      	b.n	8007716 <_vfiprintf_r+0x13a>
 80076ec:	eba0 0308 	sub.w	r3, r0, r8
 80076f0:	fa09 f303 	lsl.w	r3, r9, r3
 80076f4:	4313      	orrs	r3, r2
 80076f6:	46a2      	mov	sl, r4
 80076f8:	9304      	str	r3, [sp, #16]
 80076fa:	e7d2      	b.n	80076a2 <_vfiprintf_r+0xc6>
 80076fc:	9b03      	ldr	r3, [sp, #12]
 80076fe:	1d19      	adds	r1, r3, #4
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	9103      	str	r1, [sp, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	bfbb      	ittet	lt
 8007708:	425b      	neglt	r3, r3
 800770a:	f042 0202 	orrlt.w	r2, r2, #2
 800770e:	9307      	strge	r3, [sp, #28]
 8007710:	9307      	strlt	r3, [sp, #28]
 8007712:	bfb8      	it	lt
 8007714:	9204      	strlt	r2, [sp, #16]
 8007716:	7823      	ldrb	r3, [r4, #0]
 8007718:	2b2e      	cmp	r3, #46	; 0x2e
 800771a:	d10c      	bne.n	8007736 <_vfiprintf_r+0x15a>
 800771c:	7863      	ldrb	r3, [r4, #1]
 800771e:	2b2a      	cmp	r3, #42	; 0x2a
 8007720:	d134      	bne.n	800778c <_vfiprintf_r+0x1b0>
 8007722:	9b03      	ldr	r3, [sp, #12]
 8007724:	3402      	adds	r4, #2
 8007726:	1d1a      	adds	r2, r3, #4
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	9203      	str	r2, [sp, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	bfb8      	it	lt
 8007730:	f04f 33ff 	movlt.w	r3, #4294967295
 8007734:	9305      	str	r3, [sp, #20]
 8007736:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007800 <_vfiprintf_r+0x224>
 800773a:	2203      	movs	r2, #3
 800773c:	4650      	mov	r0, sl
 800773e:	7821      	ldrb	r1, [r4, #0]
 8007740:	f7fd fb05 	bl	8004d4e <memchr>
 8007744:	b138      	cbz	r0, 8007756 <_vfiprintf_r+0x17a>
 8007746:	2240      	movs	r2, #64	; 0x40
 8007748:	9b04      	ldr	r3, [sp, #16]
 800774a:	eba0 000a 	sub.w	r0, r0, sl
 800774e:	4082      	lsls	r2, r0
 8007750:	4313      	orrs	r3, r2
 8007752:	3401      	adds	r4, #1
 8007754:	9304      	str	r3, [sp, #16]
 8007756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800775a:	2206      	movs	r2, #6
 800775c:	4829      	ldr	r0, [pc, #164]	; (8007804 <_vfiprintf_r+0x228>)
 800775e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007762:	f7fd faf4 	bl	8004d4e <memchr>
 8007766:	2800      	cmp	r0, #0
 8007768:	d03f      	beq.n	80077ea <_vfiprintf_r+0x20e>
 800776a:	4b27      	ldr	r3, [pc, #156]	; (8007808 <_vfiprintf_r+0x22c>)
 800776c:	bb1b      	cbnz	r3, 80077b6 <_vfiprintf_r+0x1da>
 800776e:	9b03      	ldr	r3, [sp, #12]
 8007770:	3307      	adds	r3, #7
 8007772:	f023 0307 	bic.w	r3, r3, #7
 8007776:	3308      	adds	r3, #8
 8007778:	9303      	str	r3, [sp, #12]
 800777a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777c:	443b      	add	r3, r7
 800777e:	9309      	str	r3, [sp, #36]	; 0x24
 8007780:	e768      	b.n	8007654 <_vfiprintf_r+0x78>
 8007782:	460c      	mov	r4, r1
 8007784:	2001      	movs	r0, #1
 8007786:	fb0c 3202 	mla	r2, ip, r2, r3
 800778a:	e7a6      	b.n	80076da <_vfiprintf_r+0xfe>
 800778c:	2300      	movs	r3, #0
 800778e:	f04f 0c0a 	mov.w	ip, #10
 8007792:	4619      	mov	r1, r3
 8007794:	3401      	adds	r4, #1
 8007796:	9305      	str	r3, [sp, #20]
 8007798:	4620      	mov	r0, r4
 800779a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800779e:	3a30      	subs	r2, #48	; 0x30
 80077a0:	2a09      	cmp	r2, #9
 80077a2:	d903      	bls.n	80077ac <_vfiprintf_r+0x1d0>
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0c6      	beq.n	8007736 <_vfiprintf_r+0x15a>
 80077a8:	9105      	str	r1, [sp, #20]
 80077aa:	e7c4      	b.n	8007736 <_vfiprintf_r+0x15a>
 80077ac:	4604      	mov	r4, r0
 80077ae:	2301      	movs	r3, #1
 80077b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80077b4:	e7f0      	b.n	8007798 <_vfiprintf_r+0x1bc>
 80077b6:	ab03      	add	r3, sp, #12
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	462a      	mov	r2, r5
 80077bc:	4630      	mov	r0, r6
 80077be:	4b13      	ldr	r3, [pc, #76]	; (800780c <_vfiprintf_r+0x230>)
 80077c0:	a904      	add	r1, sp, #16
 80077c2:	f7fc faf9 	bl	8003db8 <_printf_float>
 80077c6:	4607      	mov	r7, r0
 80077c8:	1c78      	adds	r0, r7, #1
 80077ca:	d1d6      	bne.n	800777a <_vfiprintf_r+0x19e>
 80077cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077ce:	07d9      	lsls	r1, r3, #31
 80077d0:	d405      	bmi.n	80077de <_vfiprintf_r+0x202>
 80077d2:	89ab      	ldrh	r3, [r5, #12]
 80077d4:	059a      	lsls	r2, r3, #22
 80077d6:	d402      	bmi.n	80077de <_vfiprintf_r+0x202>
 80077d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077da:	f7fd fab7 	bl	8004d4c <__retarget_lock_release_recursive>
 80077de:	89ab      	ldrh	r3, [r5, #12]
 80077e0:	065b      	lsls	r3, r3, #25
 80077e2:	f53f af1d 	bmi.w	8007620 <_vfiprintf_r+0x44>
 80077e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077e8:	e71c      	b.n	8007624 <_vfiprintf_r+0x48>
 80077ea:	ab03      	add	r3, sp, #12
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	462a      	mov	r2, r5
 80077f0:	4630      	mov	r0, r6
 80077f2:	4b06      	ldr	r3, [pc, #24]	; (800780c <_vfiprintf_r+0x230>)
 80077f4:	a904      	add	r1, sp, #16
 80077f6:	f7fc fd7f 	bl	80042f8 <_printf_i>
 80077fa:	e7e4      	b.n	80077c6 <_vfiprintf_r+0x1ea>
 80077fc:	08008971 	.word	0x08008971
 8007800:	08008977 	.word	0x08008977
 8007804:	0800897b 	.word	0x0800897b
 8007808:	08003db9 	.word	0x08003db9
 800780c:	080075b7 	.word	0x080075b7

08007810 <__sflush_r>:
 8007810:	898a      	ldrh	r2, [r1, #12]
 8007812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007814:	4605      	mov	r5, r0
 8007816:	0710      	lsls	r0, r2, #28
 8007818:	460c      	mov	r4, r1
 800781a:	d457      	bmi.n	80078cc <__sflush_r+0xbc>
 800781c:	684b      	ldr	r3, [r1, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	dc04      	bgt.n	800782c <__sflush_r+0x1c>
 8007822:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	dc01      	bgt.n	800782c <__sflush_r+0x1c>
 8007828:	2000      	movs	r0, #0
 800782a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800782c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800782e:	2e00      	cmp	r6, #0
 8007830:	d0fa      	beq.n	8007828 <__sflush_r+0x18>
 8007832:	2300      	movs	r3, #0
 8007834:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007838:	682f      	ldr	r7, [r5, #0]
 800783a:	6a21      	ldr	r1, [r4, #32]
 800783c:	602b      	str	r3, [r5, #0]
 800783e:	d032      	beq.n	80078a6 <__sflush_r+0x96>
 8007840:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	075a      	lsls	r2, r3, #29
 8007846:	d505      	bpl.n	8007854 <__sflush_r+0x44>
 8007848:	6863      	ldr	r3, [r4, #4]
 800784a:	1ac0      	subs	r0, r0, r3
 800784c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800784e:	b10b      	cbz	r3, 8007854 <__sflush_r+0x44>
 8007850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007852:	1ac0      	subs	r0, r0, r3
 8007854:	2300      	movs	r3, #0
 8007856:	4602      	mov	r2, r0
 8007858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800785a:	4628      	mov	r0, r5
 800785c:	6a21      	ldr	r1, [r4, #32]
 800785e:	47b0      	blx	r6
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	89a3      	ldrh	r3, [r4, #12]
 8007864:	d106      	bne.n	8007874 <__sflush_r+0x64>
 8007866:	6829      	ldr	r1, [r5, #0]
 8007868:	291d      	cmp	r1, #29
 800786a:	d82b      	bhi.n	80078c4 <__sflush_r+0xb4>
 800786c:	4a28      	ldr	r2, [pc, #160]	; (8007910 <__sflush_r+0x100>)
 800786e:	410a      	asrs	r2, r1
 8007870:	07d6      	lsls	r6, r2, #31
 8007872:	d427      	bmi.n	80078c4 <__sflush_r+0xb4>
 8007874:	2200      	movs	r2, #0
 8007876:	6062      	str	r2, [r4, #4]
 8007878:	6922      	ldr	r2, [r4, #16]
 800787a:	04d9      	lsls	r1, r3, #19
 800787c:	6022      	str	r2, [r4, #0]
 800787e:	d504      	bpl.n	800788a <__sflush_r+0x7a>
 8007880:	1c42      	adds	r2, r0, #1
 8007882:	d101      	bne.n	8007888 <__sflush_r+0x78>
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	b903      	cbnz	r3, 800788a <__sflush_r+0x7a>
 8007888:	6560      	str	r0, [r4, #84]	; 0x54
 800788a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800788c:	602f      	str	r7, [r5, #0]
 800788e:	2900      	cmp	r1, #0
 8007890:	d0ca      	beq.n	8007828 <__sflush_r+0x18>
 8007892:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007896:	4299      	cmp	r1, r3
 8007898:	d002      	beq.n	80078a0 <__sflush_r+0x90>
 800789a:	4628      	mov	r0, r5
 800789c:	f7fe f8e8 	bl	8005a70 <_free_r>
 80078a0:	2000      	movs	r0, #0
 80078a2:	6360      	str	r0, [r4, #52]	; 0x34
 80078a4:	e7c1      	b.n	800782a <__sflush_r+0x1a>
 80078a6:	2301      	movs	r3, #1
 80078a8:	4628      	mov	r0, r5
 80078aa:	47b0      	blx	r6
 80078ac:	1c41      	adds	r1, r0, #1
 80078ae:	d1c8      	bne.n	8007842 <__sflush_r+0x32>
 80078b0:	682b      	ldr	r3, [r5, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0c5      	beq.n	8007842 <__sflush_r+0x32>
 80078b6:	2b1d      	cmp	r3, #29
 80078b8:	d001      	beq.n	80078be <__sflush_r+0xae>
 80078ba:	2b16      	cmp	r3, #22
 80078bc:	d101      	bne.n	80078c2 <__sflush_r+0xb2>
 80078be:	602f      	str	r7, [r5, #0]
 80078c0:	e7b2      	b.n	8007828 <__sflush_r+0x18>
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c8:	81a3      	strh	r3, [r4, #12]
 80078ca:	e7ae      	b.n	800782a <__sflush_r+0x1a>
 80078cc:	690f      	ldr	r7, [r1, #16]
 80078ce:	2f00      	cmp	r7, #0
 80078d0:	d0aa      	beq.n	8007828 <__sflush_r+0x18>
 80078d2:	0793      	lsls	r3, r2, #30
 80078d4:	bf18      	it	ne
 80078d6:	2300      	movne	r3, #0
 80078d8:	680e      	ldr	r6, [r1, #0]
 80078da:	bf08      	it	eq
 80078dc:	694b      	ldreq	r3, [r1, #20]
 80078de:	1bf6      	subs	r6, r6, r7
 80078e0:	600f      	str	r7, [r1, #0]
 80078e2:	608b      	str	r3, [r1, #8]
 80078e4:	2e00      	cmp	r6, #0
 80078e6:	dd9f      	ble.n	8007828 <__sflush_r+0x18>
 80078e8:	4633      	mov	r3, r6
 80078ea:	463a      	mov	r2, r7
 80078ec:	4628      	mov	r0, r5
 80078ee:	6a21      	ldr	r1, [r4, #32]
 80078f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80078f4:	47e0      	blx	ip
 80078f6:	2800      	cmp	r0, #0
 80078f8:	dc06      	bgt.n	8007908 <__sflush_r+0xf8>
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007904:	81a3      	strh	r3, [r4, #12]
 8007906:	e790      	b.n	800782a <__sflush_r+0x1a>
 8007908:	4407      	add	r7, r0
 800790a:	1a36      	subs	r6, r6, r0
 800790c:	e7ea      	b.n	80078e4 <__sflush_r+0xd4>
 800790e:	bf00      	nop
 8007910:	dfbffffe 	.word	0xdfbffffe

08007914 <_fflush_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	690b      	ldr	r3, [r1, #16]
 8007918:	4605      	mov	r5, r0
 800791a:	460c      	mov	r4, r1
 800791c:	b913      	cbnz	r3, 8007924 <_fflush_r+0x10>
 800791e:	2500      	movs	r5, #0
 8007920:	4628      	mov	r0, r5
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	b118      	cbz	r0, 800792e <_fflush_r+0x1a>
 8007926:	6a03      	ldr	r3, [r0, #32]
 8007928:	b90b      	cbnz	r3, 800792e <_fflush_r+0x1a>
 800792a:	f7fd f8a1 	bl	8004a70 <__sinit>
 800792e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0f3      	beq.n	800791e <_fflush_r+0xa>
 8007936:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007938:	07d0      	lsls	r0, r2, #31
 800793a:	d404      	bmi.n	8007946 <_fflush_r+0x32>
 800793c:	0599      	lsls	r1, r3, #22
 800793e:	d402      	bmi.n	8007946 <_fflush_r+0x32>
 8007940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007942:	f7fd fa02 	bl	8004d4a <__retarget_lock_acquire_recursive>
 8007946:	4628      	mov	r0, r5
 8007948:	4621      	mov	r1, r4
 800794a:	f7ff ff61 	bl	8007810 <__sflush_r>
 800794e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007950:	4605      	mov	r5, r0
 8007952:	07da      	lsls	r2, r3, #31
 8007954:	d4e4      	bmi.n	8007920 <_fflush_r+0xc>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	059b      	lsls	r3, r3, #22
 800795a:	d4e1      	bmi.n	8007920 <_fflush_r+0xc>
 800795c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800795e:	f7fd f9f5 	bl	8004d4c <__retarget_lock_release_recursive>
 8007962:	e7dd      	b.n	8007920 <_fflush_r+0xc>

08007964 <__swbuf_r>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	460e      	mov	r6, r1
 8007968:	4614      	mov	r4, r2
 800796a:	4605      	mov	r5, r0
 800796c:	b118      	cbz	r0, 8007976 <__swbuf_r+0x12>
 800796e:	6a03      	ldr	r3, [r0, #32]
 8007970:	b90b      	cbnz	r3, 8007976 <__swbuf_r+0x12>
 8007972:	f7fd f87d 	bl	8004a70 <__sinit>
 8007976:	69a3      	ldr	r3, [r4, #24]
 8007978:	60a3      	str	r3, [r4, #8]
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	071a      	lsls	r2, r3, #28
 800797e:	d525      	bpl.n	80079cc <__swbuf_r+0x68>
 8007980:	6923      	ldr	r3, [r4, #16]
 8007982:	b31b      	cbz	r3, 80079cc <__swbuf_r+0x68>
 8007984:	6823      	ldr	r3, [r4, #0]
 8007986:	6922      	ldr	r2, [r4, #16]
 8007988:	b2f6      	uxtb	r6, r6
 800798a:	1a98      	subs	r0, r3, r2
 800798c:	6963      	ldr	r3, [r4, #20]
 800798e:	4637      	mov	r7, r6
 8007990:	4283      	cmp	r3, r0
 8007992:	dc04      	bgt.n	800799e <__swbuf_r+0x3a>
 8007994:	4621      	mov	r1, r4
 8007996:	4628      	mov	r0, r5
 8007998:	f7ff ffbc 	bl	8007914 <_fflush_r>
 800799c:	b9e0      	cbnz	r0, 80079d8 <__swbuf_r+0x74>
 800799e:	68a3      	ldr	r3, [r4, #8]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	60a3      	str	r3, [r4, #8]
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	6022      	str	r2, [r4, #0]
 80079aa:	701e      	strb	r6, [r3, #0]
 80079ac:	6962      	ldr	r2, [r4, #20]
 80079ae:	1c43      	adds	r3, r0, #1
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d004      	beq.n	80079be <__swbuf_r+0x5a>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	07db      	lsls	r3, r3, #31
 80079b8:	d506      	bpl.n	80079c8 <__swbuf_r+0x64>
 80079ba:	2e0a      	cmp	r6, #10
 80079bc:	d104      	bne.n	80079c8 <__swbuf_r+0x64>
 80079be:	4621      	mov	r1, r4
 80079c0:	4628      	mov	r0, r5
 80079c2:	f7ff ffa7 	bl	8007914 <_fflush_r>
 80079c6:	b938      	cbnz	r0, 80079d8 <__swbuf_r+0x74>
 80079c8:	4638      	mov	r0, r7
 80079ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079cc:	4621      	mov	r1, r4
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 f806 	bl	80079e0 <__swsetup_r>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d0d5      	beq.n	8007984 <__swbuf_r+0x20>
 80079d8:	f04f 37ff 	mov.w	r7, #4294967295
 80079dc:	e7f4      	b.n	80079c8 <__swbuf_r+0x64>
	...

080079e0 <__swsetup_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4b2a      	ldr	r3, [pc, #168]	; (8007a8c <__swsetup_r+0xac>)
 80079e4:	4605      	mov	r5, r0
 80079e6:	6818      	ldr	r0, [r3, #0]
 80079e8:	460c      	mov	r4, r1
 80079ea:	b118      	cbz	r0, 80079f4 <__swsetup_r+0x14>
 80079ec:	6a03      	ldr	r3, [r0, #32]
 80079ee:	b90b      	cbnz	r3, 80079f4 <__swsetup_r+0x14>
 80079f0:	f7fd f83e 	bl	8004a70 <__sinit>
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079fa:	0718      	lsls	r0, r3, #28
 80079fc:	d422      	bmi.n	8007a44 <__swsetup_r+0x64>
 80079fe:	06d9      	lsls	r1, r3, #27
 8007a00:	d407      	bmi.n	8007a12 <__swsetup_r+0x32>
 8007a02:	2309      	movs	r3, #9
 8007a04:	602b      	str	r3, [r5, #0]
 8007a06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	e034      	b.n	8007a7c <__swsetup_r+0x9c>
 8007a12:	0758      	lsls	r0, r3, #29
 8007a14:	d512      	bpl.n	8007a3c <__swsetup_r+0x5c>
 8007a16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a18:	b141      	cbz	r1, 8007a2c <__swsetup_r+0x4c>
 8007a1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a1e:	4299      	cmp	r1, r3
 8007a20:	d002      	beq.n	8007a28 <__swsetup_r+0x48>
 8007a22:	4628      	mov	r0, r5
 8007a24:	f7fe f824 	bl	8005a70 <_free_r>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	6363      	str	r3, [r4, #52]	; 0x34
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	2300      	movs	r3, #0
 8007a36:	6063      	str	r3, [r4, #4]
 8007a38:	6923      	ldr	r3, [r4, #16]
 8007a3a:	6023      	str	r3, [r4, #0]
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	f043 0308 	orr.w	r3, r3, #8
 8007a42:	81a3      	strh	r3, [r4, #12]
 8007a44:	6923      	ldr	r3, [r4, #16]
 8007a46:	b94b      	cbnz	r3, 8007a5c <__swsetup_r+0x7c>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a52:	d003      	beq.n	8007a5c <__swsetup_r+0x7c>
 8007a54:	4621      	mov	r1, r4
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 fc6d 	bl	8008336 <__smakebuf_r>
 8007a5c:	89a0      	ldrh	r0, [r4, #12]
 8007a5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a62:	f010 0301 	ands.w	r3, r0, #1
 8007a66:	d00a      	beq.n	8007a7e <__swsetup_r+0x9e>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60a3      	str	r3, [r4, #8]
 8007a6c:	6963      	ldr	r3, [r4, #20]
 8007a6e:	425b      	negs	r3, r3
 8007a70:	61a3      	str	r3, [r4, #24]
 8007a72:	6923      	ldr	r3, [r4, #16]
 8007a74:	b943      	cbnz	r3, 8007a88 <__swsetup_r+0xa8>
 8007a76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a7a:	d1c4      	bne.n	8007a06 <__swsetup_r+0x26>
 8007a7c:	bd38      	pop	{r3, r4, r5, pc}
 8007a7e:	0781      	lsls	r1, r0, #30
 8007a80:	bf58      	it	pl
 8007a82:	6963      	ldrpl	r3, [r4, #20]
 8007a84:	60a3      	str	r3, [r4, #8]
 8007a86:	e7f4      	b.n	8007a72 <__swsetup_r+0x92>
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e7f7      	b.n	8007a7c <__swsetup_r+0x9c>
 8007a8c:	20000068 	.word	0x20000068

08007a90 <memmove>:
 8007a90:	4288      	cmp	r0, r1
 8007a92:	b510      	push	{r4, lr}
 8007a94:	eb01 0402 	add.w	r4, r1, r2
 8007a98:	d902      	bls.n	8007aa0 <memmove+0x10>
 8007a9a:	4284      	cmp	r4, r0
 8007a9c:	4623      	mov	r3, r4
 8007a9e:	d807      	bhi.n	8007ab0 <memmove+0x20>
 8007aa0:	1e43      	subs	r3, r0, #1
 8007aa2:	42a1      	cmp	r1, r4
 8007aa4:	d008      	beq.n	8007ab8 <memmove+0x28>
 8007aa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aae:	e7f8      	b.n	8007aa2 <memmove+0x12>
 8007ab0:	4601      	mov	r1, r0
 8007ab2:	4402      	add	r2, r0
 8007ab4:	428a      	cmp	r2, r1
 8007ab6:	d100      	bne.n	8007aba <memmove+0x2a>
 8007ab8:	bd10      	pop	{r4, pc}
 8007aba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007abe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ac2:	e7f7      	b.n	8007ab4 <memmove+0x24>

08007ac4 <strncmp>:
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	b16a      	cbz	r2, 8007ae4 <strncmp+0x20>
 8007ac8:	3901      	subs	r1, #1
 8007aca:	1884      	adds	r4, r0, r2
 8007acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ad0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d103      	bne.n	8007ae0 <strncmp+0x1c>
 8007ad8:	42a0      	cmp	r0, r4
 8007ada:	d001      	beq.n	8007ae0 <strncmp+0x1c>
 8007adc:	2a00      	cmp	r2, #0
 8007ade:	d1f5      	bne.n	8007acc <strncmp+0x8>
 8007ae0:	1ad0      	subs	r0, r2, r3
 8007ae2:	bd10      	pop	{r4, pc}
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	e7fc      	b.n	8007ae2 <strncmp+0x1e>

08007ae8 <_sbrk_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	2300      	movs	r3, #0
 8007aec:	4d05      	ldr	r5, [pc, #20]	; (8007b04 <_sbrk_r+0x1c>)
 8007aee:	4604      	mov	r4, r0
 8007af0:	4608      	mov	r0, r1
 8007af2:	602b      	str	r3, [r5, #0]
 8007af4:	f7f9 fc26 	bl	8001344 <_sbrk>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_sbrk_r+0x1a>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_sbrk_r+0x1a>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	200013b8 	.word	0x200013b8

08007b08 <nan>:
 8007b08:	2000      	movs	r0, #0
 8007b0a:	4901      	ldr	r1, [pc, #4]	; (8007b10 <nan+0x8>)
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	7ff80000 	.word	0x7ff80000

08007b14 <__assert_func>:
 8007b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b16:	4614      	mov	r4, r2
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <__assert_func+0x2c>)
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68d8      	ldr	r0, [r3, #12]
 8007b22:	b14c      	cbz	r4, 8007b38 <__assert_func+0x24>
 8007b24:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <__assert_func+0x30>)
 8007b26:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b2a:	9100      	str	r1, [sp, #0]
 8007b2c:	462b      	mov	r3, r5
 8007b2e:	4906      	ldr	r1, [pc, #24]	; (8007b48 <__assert_func+0x34>)
 8007b30:	f000 fbca 	bl	80082c8 <fiprintf>
 8007b34:	f000 fc5e 	bl	80083f4 <abort>
 8007b38:	4b04      	ldr	r3, [pc, #16]	; (8007b4c <__assert_func+0x38>)
 8007b3a:	461c      	mov	r4, r3
 8007b3c:	e7f3      	b.n	8007b26 <__assert_func+0x12>
 8007b3e:	bf00      	nop
 8007b40:	20000068 	.word	0x20000068
 8007b44:	0800898a 	.word	0x0800898a
 8007b48:	08008997 	.word	0x08008997
 8007b4c:	080089c5 	.word	0x080089c5

08007b50 <_calloc_r>:
 8007b50:	b570      	push	{r4, r5, r6, lr}
 8007b52:	fba1 5402 	umull	r5, r4, r1, r2
 8007b56:	b934      	cbnz	r4, 8007b66 <_calloc_r+0x16>
 8007b58:	4629      	mov	r1, r5
 8007b5a:	f7fd fff9 	bl	8005b50 <_malloc_r>
 8007b5e:	4606      	mov	r6, r0
 8007b60:	b928      	cbnz	r0, 8007b6e <_calloc_r+0x1e>
 8007b62:	4630      	mov	r0, r6
 8007b64:	bd70      	pop	{r4, r5, r6, pc}
 8007b66:	220c      	movs	r2, #12
 8007b68:	2600      	movs	r6, #0
 8007b6a:	6002      	str	r2, [r0, #0]
 8007b6c:	e7f9      	b.n	8007b62 <_calloc_r+0x12>
 8007b6e:	462a      	mov	r2, r5
 8007b70:	4621      	mov	r1, r4
 8007b72:	f7fd f816 	bl	8004ba2 <memset>
 8007b76:	e7f4      	b.n	8007b62 <_calloc_r+0x12>

08007b78 <rshift>:
 8007b78:	6903      	ldr	r3, [r0, #16]
 8007b7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b82:	f100 0414 	add.w	r4, r0, #20
 8007b86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b8a:	dd46      	ble.n	8007c1a <rshift+0xa2>
 8007b8c:	f011 011f 	ands.w	r1, r1, #31
 8007b90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007b98:	d10c      	bne.n	8007bb4 <rshift+0x3c>
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	f100 0710 	add.w	r7, r0, #16
 8007ba0:	42b1      	cmp	r1, r6
 8007ba2:	d335      	bcc.n	8007c10 <rshift+0x98>
 8007ba4:	1a9b      	subs	r3, r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	1eea      	subs	r2, r5, #3
 8007baa:	4296      	cmp	r6, r2
 8007bac:	bf38      	it	cc
 8007bae:	2300      	movcc	r3, #0
 8007bb0:	4423      	add	r3, r4
 8007bb2:	e015      	b.n	8007be0 <rshift+0x68>
 8007bb4:	46a1      	mov	r9, r4
 8007bb6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bba:	f1c1 0820 	rsb	r8, r1, #32
 8007bbe:	40cf      	lsrs	r7, r1
 8007bc0:	f105 0e04 	add.w	lr, r5, #4
 8007bc4:	4576      	cmp	r6, lr
 8007bc6:	46f4      	mov	ip, lr
 8007bc8:	d816      	bhi.n	8007bf8 <rshift+0x80>
 8007bca:	1a9a      	subs	r2, r3, r2
 8007bcc:	0092      	lsls	r2, r2, #2
 8007bce:	3a04      	subs	r2, #4
 8007bd0:	3501      	adds	r5, #1
 8007bd2:	42ae      	cmp	r6, r5
 8007bd4:	bf38      	it	cc
 8007bd6:	2200      	movcc	r2, #0
 8007bd8:	18a3      	adds	r3, r4, r2
 8007bda:	50a7      	str	r7, [r4, r2]
 8007bdc:	b107      	cbz	r7, 8007be0 <rshift+0x68>
 8007bde:	3304      	adds	r3, #4
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	eba3 0204 	sub.w	r2, r3, r4
 8007be6:	bf08      	it	eq
 8007be8:	2300      	moveq	r3, #0
 8007bea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007bee:	6102      	str	r2, [r0, #16]
 8007bf0:	bf08      	it	eq
 8007bf2:	6143      	streq	r3, [r0, #20]
 8007bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bf8:	f8dc c000 	ldr.w	ip, [ip]
 8007bfc:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c00:	ea4c 0707 	orr.w	r7, ip, r7
 8007c04:	f849 7b04 	str.w	r7, [r9], #4
 8007c08:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c0c:	40cf      	lsrs	r7, r1
 8007c0e:	e7d9      	b.n	8007bc4 <rshift+0x4c>
 8007c10:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c14:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c18:	e7c2      	b.n	8007ba0 <rshift+0x28>
 8007c1a:	4623      	mov	r3, r4
 8007c1c:	e7e0      	b.n	8007be0 <rshift+0x68>

08007c1e <__hexdig_fun>:
 8007c1e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007c22:	2b09      	cmp	r3, #9
 8007c24:	d802      	bhi.n	8007c2c <__hexdig_fun+0xe>
 8007c26:	3820      	subs	r0, #32
 8007c28:	b2c0      	uxtb	r0, r0
 8007c2a:	4770      	bx	lr
 8007c2c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007c30:	2b05      	cmp	r3, #5
 8007c32:	d801      	bhi.n	8007c38 <__hexdig_fun+0x1a>
 8007c34:	3847      	subs	r0, #71	; 0x47
 8007c36:	e7f7      	b.n	8007c28 <__hexdig_fun+0xa>
 8007c38:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007c3c:	2b05      	cmp	r3, #5
 8007c3e:	d801      	bhi.n	8007c44 <__hexdig_fun+0x26>
 8007c40:	3827      	subs	r0, #39	; 0x27
 8007c42:	e7f1      	b.n	8007c28 <__hexdig_fun+0xa>
 8007c44:	2000      	movs	r0, #0
 8007c46:	4770      	bx	lr

08007c48 <__gethex>:
 8007c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4c:	4681      	mov	r9, r0
 8007c4e:	468a      	mov	sl, r1
 8007c50:	4617      	mov	r7, r2
 8007c52:	680a      	ldr	r2, [r1, #0]
 8007c54:	b085      	sub	sp, #20
 8007c56:	f102 0b02 	add.w	fp, r2, #2
 8007c5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007c5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007c62:	9302      	str	r3, [sp, #8]
 8007c64:	32fe      	adds	r2, #254	; 0xfe
 8007c66:	eb02 030b 	add.w	r3, r2, fp
 8007c6a:	46d8      	mov	r8, fp
 8007c6c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	2830      	cmp	r0, #48	; 0x30
 8007c74:	d0f7      	beq.n	8007c66 <__gethex+0x1e>
 8007c76:	f7ff ffd2 	bl	8007c1e <__hexdig_fun>
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	d138      	bne.n	8007cf2 <__gethex+0xaa>
 8007c80:	2201      	movs	r2, #1
 8007c82:	4640      	mov	r0, r8
 8007c84:	49a7      	ldr	r1, [pc, #668]	; (8007f24 <__gethex+0x2dc>)
 8007c86:	f7ff ff1d 	bl	8007ac4 <strncmp>
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d169      	bne.n	8007d64 <__gethex+0x11c>
 8007c90:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007c94:	465d      	mov	r5, fp
 8007c96:	f7ff ffc2 	bl	8007c1e <__hexdig_fun>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d064      	beq.n	8007d68 <__gethex+0x120>
 8007c9e:	465a      	mov	r2, fp
 8007ca0:	7810      	ldrb	r0, [r2, #0]
 8007ca2:	4690      	mov	r8, r2
 8007ca4:	2830      	cmp	r0, #48	; 0x30
 8007ca6:	f102 0201 	add.w	r2, r2, #1
 8007caa:	d0f9      	beq.n	8007ca0 <__gethex+0x58>
 8007cac:	f7ff ffb7 	bl	8007c1e <__hexdig_fun>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	fab0 f480 	clz	r4, r0
 8007cb6:	465e      	mov	r6, fp
 8007cb8:	0964      	lsrs	r4, r4, #5
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	4642      	mov	r2, r8
 8007cbe:	4615      	mov	r5, r2
 8007cc0:	7828      	ldrb	r0, [r5, #0]
 8007cc2:	3201      	adds	r2, #1
 8007cc4:	f7ff ffab 	bl	8007c1e <__hexdig_fun>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d1f8      	bne.n	8007cbe <__gethex+0x76>
 8007ccc:	2201      	movs	r2, #1
 8007cce:	4628      	mov	r0, r5
 8007cd0:	4994      	ldr	r1, [pc, #592]	; (8007f24 <__gethex+0x2dc>)
 8007cd2:	f7ff fef7 	bl	8007ac4 <strncmp>
 8007cd6:	b978      	cbnz	r0, 8007cf8 <__gethex+0xb0>
 8007cd8:	b946      	cbnz	r6, 8007cec <__gethex+0xa4>
 8007cda:	1c6e      	adds	r6, r5, #1
 8007cdc:	4632      	mov	r2, r6
 8007cde:	4615      	mov	r5, r2
 8007ce0:	7828      	ldrb	r0, [r5, #0]
 8007ce2:	3201      	adds	r2, #1
 8007ce4:	f7ff ff9b 	bl	8007c1e <__hexdig_fun>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d1f8      	bne.n	8007cde <__gethex+0x96>
 8007cec:	1b73      	subs	r3, r6, r5
 8007cee:	009e      	lsls	r6, r3, #2
 8007cf0:	e004      	b.n	8007cfc <__gethex+0xb4>
 8007cf2:	2400      	movs	r4, #0
 8007cf4:	4626      	mov	r6, r4
 8007cf6:	e7e1      	b.n	8007cbc <__gethex+0x74>
 8007cf8:	2e00      	cmp	r6, #0
 8007cfa:	d1f7      	bne.n	8007cec <__gethex+0xa4>
 8007cfc:	782b      	ldrb	r3, [r5, #0]
 8007cfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d02:	2b50      	cmp	r3, #80	; 0x50
 8007d04:	d13d      	bne.n	8007d82 <__gethex+0x13a>
 8007d06:	786b      	ldrb	r3, [r5, #1]
 8007d08:	2b2b      	cmp	r3, #43	; 0x2b
 8007d0a:	d02f      	beq.n	8007d6c <__gethex+0x124>
 8007d0c:	2b2d      	cmp	r3, #45	; 0x2d
 8007d0e:	d031      	beq.n	8007d74 <__gethex+0x12c>
 8007d10:	f04f 0b00 	mov.w	fp, #0
 8007d14:	1c69      	adds	r1, r5, #1
 8007d16:	7808      	ldrb	r0, [r1, #0]
 8007d18:	f7ff ff81 	bl	8007c1e <__hexdig_fun>
 8007d1c:	1e42      	subs	r2, r0, #1
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	2a18      	cmp	r2, #24
 8007d22:	d82e      	bhi.n	8007d82 <__gethex+0x13a>
 8007d24:	f1a0 0210 	sub.w	r2, r0, #16
 8007d28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d2c:	f7ff ff77 	bl	8007c1e <__hexdig_fun>
 8007d30:	f100 3cff 	add.w	ip, r0, #4294967295
 8007d34:	fa5f fc8c 	uxtb.w	ip, ip
 8007d38:	f1bc 0f18 	cmp.w	ip, #24
 8007d3c:	d91d      	bls.n	8007d7a <__gethex+0x132>
 8007d3e:	f1bb 0f00 	cmp.w	fp, #0
 8007d42:	d000      	beq.n	8007d46 <__gethex+0xfe>
 8007d44:	4252      	negs	r2, r2
 8007d46:	4416      	add	r6, r2
 8007d48:	f8ca 1000 	str.w	r1, [sl]
 8007d4c:	b1dc      	cbz	r4, 8007d86 <__gethex+0x13e>
 8007d4e:	9b01      	ldr	r3, [sp, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bf14      	ite	ne
 8007d54:	f04f 0800 	movne.w	r8, #0
 8007d58:	f04f 0806 	moveq.w	r8, #6
 8007d5c:	4640      	mov	r0, r8
 8007d5e:	b005      	add	sp, #20
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d64:	4645      	mov	r5, r8
 8007d66:	4626      	mov	r6, r4
 8007d68:	2401      	movs	r4, #1
 8007d6a:	e7c7      	b.n	8007cfc <__gethex+0xb4>
 8007d6c:	f04f 0b00 	mov.w	fp, #0
 8007d70:	1ca9      	adds	r1, r5, #2
 8007d72:	e7d0      	b.n	8007d16 <__gethex+0xce>
 8007d74:	f04f 0b01 	mov.w	fp, #1
 8007d78:	e7fa      	b.n	8007d70 <__gethex+0x128>
 8007d7a:	230a      	movs	r3, #10
 8007d7c:	fb03 0002 	mla	r0, r3, r2, r0
 8007d80:	e7d0      	b.n	8007d24 <__gethex+0xdc>
 8007d82:	4629      	mov	r1, r5
 8007d84:	e7e0      	b.n	8007d48 <__gethex+0x100>
 8007d86:	4621      	mov	r1, r4
 8007d88:	eba5 0308 	sub.w	r3, r5, r8
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	2b07      	cmp	r3, #7
 8007d90:	dc0a      	bgt.n	8007da8 <__gethex+0x160>
 8007d92:	4648      	mov	r0, r9
 8007d94:	f7fd ff68 	bl	8005c68 <_Balloc>
 8007d98:	4604      	mov	r4, r0
 8007d9a:	b940      	cbnz	r0, 8007dae <__gethex+0x166>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	21e4      	movs	r1, #228	; 0xe4
 8007da0:	4b61      	ldr	r3, [pc, #388]	; (8007f28 <__gethex+0x2e0>)
 8007da2:	4862      	ldr	r0, [pc, #392]	; (8007f2c <__gethex+0x2e4>)
 8007da4:	f7ff feb6 	bl	8007b14 <__assert_func>
 8007da8:	3101      	adds	r1, #1
 8007daa:	105b      	asrs	r3, r3, #1
 8007dac:	e7ef      	b.n	8007d8e <__gethex+0x146>
 8007dae:	2300      	movs	r3, #0
 8007db0:	469b      	mov	fp, r3
 8007db2:	f100 0a14 	add.w	sl, r0, #20
 8007db6:	f8cd a004 	str.w	sl, [sp, #4]
 8007dba:	45a8      	cmp	r8, r5
 8007dbc:	d344      	bcc.n	8007e48 <__gethex+0x200>
 8007dbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007dc2:	4658      	mov	r0, fp
 8007dc4:	f848 bb04 	str.w	fp, [r8], #4
 8007dc8:	eba8 080a 	sub.w	r8, r8, sl
 8007dcc:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8007dd0:	6122      	str	r2, [r4, #16]
 8007dd2:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007dd6:	f7fe f839 	bl	8005e4c <__hi0bits>
 8007dda:	683d      	ldr	r5, [r7, #0]
 8007ddc:	eba8 0800 	sub.w	r8, r8, r0
 8007de0:	45a8      	cmp	r8, r5
 8007de2:	dd59      	ble.n	8007e98 <__gethex+0x250>
 8007de4:	eba8 0805 	sub.w	r8, r8, r5
 8007de8:	4641      	mov	r1, r8
 8007dea:	4620      	mov	r0, r4
 8007dec:	f7fe fbb7 	bl	800655e <__any_on>
 8007df0:	4683      	mov	fp, r0
 8007df2:	b1b8      	cbz	r0, 8007e24 <__gethex+0x1dc>
 8007df4:	f04f 0b01 	mov.w	fp, #1
 8007df8:	f108 33ff 	add.w	r3, r8, #4294967295
 8007dfc:	1159      	asrs	r1, r3, #5
 8007dfe:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007e02:	f003 021f 	and.w	r2, r3, #31
 8007e06:	fa0b f202 	lsl.w	r2, fp, r2
 8007e0a:	420a      	tst	r2, r1
 8007e0c:	d00a      	beq.n	8007e24 <__gethex+0x1dc>
 8007e0e:	455b      	cmp	r3, fp
 8007e10:	dd06      	ble.n	8007e20 <__gethex+0x1d8>
 8007e12:	4620      	mov	r0, r4
 8007e14:	f1a8 0102 	sub.w	r1, r8, #2
 8007e18:	f7fe fba1 	bl	800655e <__any_on>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d138      	bne.n	8007e92 <__gethex+0x24a>
 8007e20:	f04f 0b02 	mov.w	fp, #2
 8007e24:	4641      	mov	r1, r8
 8007e26:	4620      	mov	r0, r4
 8007e28:	f7ff fea6 	bl	8007b78 <rshift>
 8007e2c:	4446      	add	r6, r8
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	42b3      	cmp	r3, r6
 8007e32:	da41      	bge.n	8007eb8 <__gethex+0x270>
 8007e34:	4621      	mov	r1, r4
 8007e36:	4648      	mov	r0, r9
 8007e38:	f7fd ff56 	bl	8005ce8 <_Bfree>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e40:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	e789      	b.n	8007d5c <__gethex+0x114>
 8007e48:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007e4c:	2a2e      	cmp	r2, #46	; 0x2e
 8007e4e:	d014      	beq.n	8007e7a <__gethex+0x232>
 8007e50:	2b20      	cmp	r3, #32
 8007e52:	d106      	bne.n	8007e62 <__gethex+0x21a>
 8007e54:	9b01      	ldr	r3, [sp, #4]
 8007e56:	f843 bb04 	str.w	fp, [r3], #4
 8007e5a:	f04f 0b00 	mov.w	fp, #0
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	465b      	mov	r3, fp
 8007e62:	7828      	ldrb	r0, [r5, #0]
 8007e64:	9303      	str	r3, [sp, #12]
 8007e66:	f7ff feda 	bl	8007c1e <__hexdig_fun>
 8007e6a:	9b03      	ldr	r3, [sp, #12]
 8007e6c:	f000 000f 	and.w	r0, r0, #15
 8007e70:	4098      	lsls	r0, r3
 8007e72:	ea4b 0b00 	orr.w	fp, fp, r0
 8007e76:	3304      	adds	r3, #4
 8007e78:	e79f      	b.n	8007dba <__gethex+0x172>
 8007e7a:	45a8      	cmp	r8, r5
 8007e7c:	d8e8      	bhi.n	8007e50 <__gethex+0x208>
 8007e7e:	2201      	movs	r2, #1
 8007e80:	4628      	mov	r0, r5
 8007e82:	4928      	ldr	r1, [pc, #160]	; (8007f24 <__gethex+0x2dc>)
 8007e84:	9303      	str	r3, [sp, #12]
 8007e86:	f7ff fe1d 	bl	8007ac4 <strncmp>
 8007e8a:	9b03      	ldr	r3, [sp, #12]
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d1df      	bne.n	8007e50 <__gethex+0x208>
 8007e90:	e793      	b.n	8007dba <__gethex+0x172>
 8007e92:	f04f 0b03 	mov.w	fp, #3
 8007e96:	e7c5      	b.n	8007e24 <__gethex+0x1dc>
 8007e98:	da0b      	bge.n	8007eb2 <__gethex+0x26a>
 8007e9a:	eba5 0808 	sub.w	r8, r5, r8
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	4648      	mov	r0, r9
 8007ea4:	f7fe f938 	bl	8006118 <__lshift>
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	eba6 0608 	sub.w	r6, r6, r8
 8007eae:	f100 0a14 	add.w	sl, r0, #20
 8007eb2:	f04f 0b00 	mov.w	fp, #0
 8007eb6:	e7ba      	b.n	8007e2e <__gethex+0x1e6>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	42b3      	cmp	r3, r6
 8007ebc:	dd74      	ble.n	8007fa8 <__gethex+0x360>
 8007ebe:	1b9e      	subs	r6, r3, r6
 8007ec0:	42b5      	cmp	r5, r6
 8007ec2:	dc35      	bgt.n	8007f30 <__gethex+0x2e8>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d023      	beq.n	8007f12 <__gethex+0x2ca>
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d025      	beq.n	8007f1a <__gethex+0x2d2>
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d115      	bne.n	8007efe <__gethex+0x2b6>
 8007ed2:	42b5      	cmp	r5, r6
 8007ed4:	d113      	bne.n	8007efe <__gethex+0x2b6>
 8007ed6:	2d01      	cmp	r5, #1
 8007ed8:	d10b      	bne.n	8007ef2 <__gethex+0x2aa>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	9a02      	ldr	r2, [sp, #8]
 8007ede:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	6123      	str	r3, [r4, #16]
 8007ee8:	f8ca 3000 	str.w	r3, [sl]
 8007eec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eee:	601c      	str	r4, [r3, #0]
 8007ef0:	e734      	b.n	8007d5c <__gethex+0x114>
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	1e69      	subs	r1, r5, #1
 8007ef6:	f7fe fb32 	bl	800655e <__any_on>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d1ed      	bne.n	8007eda <__gethex+0x292>
 8007efe:	4621      	mov	r1, r4
 8007f00:	4648      	mov	r0, r9
 8007f02:	f7fd fef1 	bl	8005ce8 <_Bfree>
 8007f06:	2300      	movs	r3, #0
 8007f08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f0a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007f0e:	6013      	str	r3, [r2, #0]
 8007f10:	e724      	b.n	8007d5c <__gethex+0x114>
 8007f12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1f2      	bne.n	8007efe <__gethex+0x2b6>
 8007f18:	e7df      	b.n	8007eda <__gethex+0x292>
 8007f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1dc      	bne.n	8007eda <__gethex+0x292>
 8007f20:	e7ed      	b.n	8007efe <__gethex+0x2b6>
 8007f22:	bf00      	nop
 8007f24:	0800881c 	.word	0x0800881c
 8007f28:	080086b3 	.word	0x080086b3
 8007f2c:	080089c6 	.word	0x080089c6
 8007f30:	f106 38ff 	add.w	r8, r6, #4294967295
 8007f34:	f1bb 0f00 	cmp.w	fp, #0
 8007f38:	d133      	bne.n	8007fa2 <__gethex+0x35a>
 8007f3a:	f1b8 0f00 	cmp.w	r8, #0
 8007f3e:	d004      	beq.n	8007f4a <__gethex+0x302>
 8007f40:	4641      	mov	r1, r8
 8007f42:	4620      	mov	r0, r4
 8007f44:	f7fe fb0b 	bl	800655e <__any_on>
 8007f48:	4683      	mov	fp, r0
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007f50:	f008 081f 	and.w	r8, r8, #31
 8007f54:	fa03 f308 	lsl.w	r3, r3, r8
 8007f58:	f04f 0802 	mov.w	r8, #2
 8007f5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007f60:	4631      	mov	r1, r6
 8007f62:	4213      	tst	r3, r2
 8007f64:	4620      	mov	r0, r4
 8007f66:	bf18      	it	ne
 8007f68:	f04b 0b02 	orrne.w	fp, fp, #2
 8007f6c:	1bad      	subs	r5, r5, r6
 8007f6e:	f7ff fe03 	bl	8007b78 <rshift>
 8007f72:	687e      	ldr	r6, [r7, #4]
 8007f74:	f1bb 0f00 	cmp.w	fp, #0
 8007f78:	d04a      	beq.n	8008010 <__gethex+0x3c8>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d016      	beq.n	8007fae <__gethex+0x366>
 8007f80:	2b03      	cmp	r3, #3
 8007f82:	d018      	beq.n	8007fb6 <__gethex+0x36e>
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d109      	bne.n	8007f9c <__gethex+0x354>
 8007f88:	f01b 0f02 	tst.w	fp, #2
 8007f8c:	d006      	beq.n	8007f9c <__gethex+0x354>
 8007f8e:	f8da 3000 	ldr.w	r3, [sl]
 8007f92:	ea4b 0b03 	orr.w	fp, fp, r3
 8007f96:	f01b 0f01 	tst.w	fp, #1
 8007f9a:	d10f      	bne.n	8007fbc <__gethex+0x374>
 8007f9c:	f048 0810 	orr.w	r8, r8, #16
 8007fa0:	e036      	b.n	8008010 <__gethex+0x3c8>
 8007fa2:	f04f 0b01 	mov.w	fp, #1
 8007fa6:	e7d0      	b.n	8007f4a <__gethex+0x302>
 8007fa8:	f04f 0801 	mov.w	r8, #1
 8007fac:	e7e2      	b.n	8007f74 <__gethex+0x32c>
 8007fae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fb0:	f1c3 0301 	rsb	r3, r3, #1
 8007fb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d0ef      	beq.n	8007f9c <__gethex+0x354>
 8007fbc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007fc0:	f104 0214 	add.w	r2, r4, #20
 8007fc4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007fd0:	4694      	mov	ip, r2
 8007fd2:	f852 1b04 	ldr.w	r1, [r2], #4
 8007fd6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007fda:	d01e      	beq.n	800801a <__gethex+0x3d2>
 8007fdc:	3101      	adds	r1, #1
 8007fde:	f8cc 1000 	str.w	r1, [ip]
 8007fe2:	f1b8 0f02 	cmp.w	r8, #2
 8007fe6:	f104 0214 	add.w	r2, r4, #20
 8007fea:	d13d      	bne.n	8008068 <__gethex+0x420>
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	42ab      	cmp	r3, r5
 8007ff2:	d10b      	bne.n	800800c <__gethex+0x3c4>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	1169      	asrs	r1, r5, #5
 8007ff8:	f005 051f 	and.w	r5, r5, #31
 8007ffc:	fa03 f505 	lsl.w	r5, r3, r5
 8008000:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008004:	421d      	tst	r5, r3
 8008006:	bf18      	it	ne
 8008008:	f04f 0801 	movne.w	r8, #1
 800800c:	f048 0820 	orr.w	r8, r8, #32
 8008010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008012:	601c      	str	r4, [r3, #0]
 8008014:	9b02      	ldr	r3, [sp, #8]
 8008016:	601e      	str	r6, [r3, #0]
 8008018:	e6a0      	b.n	8007d5c <__gethex+0x114>
 800801a:	4290      	cmp	r0, r2
 800801c:	f842 3c04 	str.w	r3, [r2, #-4]
 8008020:	d8d6      	bhi.n	8007fd0 <__gethex+0x388>
 8008022:	68a2      	ldr	r2, [r4, #8]
 8008024:	4593      	cmp	fp, r2
 8008026:	db17      	blt.n	8008058 <__gethex+0x410>
 8008028:	6861      	ldr	r1, [r4, #4]
 800802a:	4648      	mov	r0, r9
 800802c:	3101      	adds	r1, #1
 800802e:	f7fd fe1b 	bl	8005c68 <_Balloc>
 8008032:	4682      	mov	sl, r0
 8008034:	b918      	cbnz	r0, 800803e <__gethex+0x3f6>
 8008036:	4602      	mov	r2, r0
 8008038:	2184      	movs	r1, #132	; 0x84
 800803a:	4b1a      	ldr	r3, [pc, #104]	; (80080a4 <__gethex+0x45c>)
 800803c:	e6b1      	b.n	8007da2 <__gethex+0x15a>
 800803e:	6922      	ldr	r2, [r4, #16]
 8008040:	f104 010c 	add.w	r1, r4, #12
 8008044:	3202      	adds	r2, #2
 8008046:	0092      	lsls	r2, r2, #2
 8008048:	300c      	adds	r0, #12
 800804a:	f7fc fe8e 	bl	8004d6a <memcpy>
 800804e:	4621      	mov	r1, r4
 8008050:	4648      	mov	r0, r9
 8008052:	f7fd fe49 	bl	8005ce8 <_Bfree>
 8008056:	4654      	mov	r4, sl
 8008058:	6922      	ldr	r2, [r4, #16]
 800805a:	1c51      	adds	r1, r2, #1
 800805c:	6121      	str	r1, [r4, #16]
 800805e:	2101      	movs	r1, #1
 8008060:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008064:	6151      	str	r1, [r2, #20]
 8008066:	e7bc      	b.n	8007fe2 <__gethex+0x39a>
 8008068:	6921      	ldr	r1, [r4, #16]
 800806a:	4559      	cmp	r1, fp
 800806c:	dd0b      	ble.n	8008086 <__gethex+0x43e>
 800806e:	2101      	movs	r1, #1
 8008070:	4620      	mov	r0, r4
 8008072:	f7ff fd81 	bl	8007b78 <rshift>
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	3601      	adds	r6, #1
 800807a:	42b3      	cmp	r3, r6
 800807c:	f6ff aeda 	blt.w	8007e34 <__gethex+0x1ec>
 8008080:	f04f 0801 	mov.w	r8, #1
 8008084:	e7c2      	b.n	800800c <__gethex+0x3c4>
 8008086:	f015 051f 	ands.w	r5, r5, #31
 800808a:	d0f9      	beq.n	8008080 <__gethex+0x438>
 800808c:	9b01      	ldr	r3, [sp, #4]
 800808e:	f1c5 0520 	rsb	r5, r5, #32
 8008092:	441a      	add	r2, r3
 8008094:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008098:	f7fd fed8 	bl	8005e4c <__hi0bits>
 800809c:	42a8      	cmp	r0, r5
 800809e:	dbe6      	blt.n	800806e <__gethex+0x426>
 80080a0:	e7ee      	b.n	8008080 <__gethex+0x438>
 80080a2:	bf00      	nop
 80080a4:	080086b3 	.word	0x080086b3

080080a8 <L_shift>:
 80080a8:	f1c2 0208 	rsb	r2, r2, #8
 80080ac:	0092      	lsls	r2, r2, #2
 80080ae:	b570      	push	{r4, r5, r6, lr}
 80080b0:	f1c2 0620 	rsb	r6, r2, #32
 80080b4:	6843      	ldr	r3, [r0, #4]
 80080b6:	6804      	ldr	r4, [r0, #0]
 80080b8:	fa03 f506 	lsl.w	r5, r3, r6
 80080bc:	432c      	orrs	r4, r5
 80080be:	40d3      	lsrs	r3, r2
 80080c0:	6004      	str	r4, [r0, #0]
 80080c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80080c6:	4288      	cmp	r0, r1
 80080c8:	d3f4      	bcc.n	80080b4 <L_shift+0xc>
 80080ca:	bd70      	pop	{r4, r5, r6, pc}

080080cc <__match>:
 80080cc:	b530      	push	{r4, r5, lr}
 80080ce:	6803      	ldr	r3, [r0, #0]
 80080d0:	3301      	adds	r3, #1
 80080d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080d6:	b914      	cbnz	r4, 80080de <__match+0x12>
 80080d8:	6003      	str	r3, [r0, #0]
 80080da:	2001      	movs	r0, #1
 80080dc:	bd30      	pop	{r4, r5, pc}
 80080de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80080e6:	2d19      	cmp	r5, #25
 80080e8:	bf98      	it	ls
 80080ea:	3220      	addls	r2, #32
 80080ec:	42a2      	cmp	r2, r4
 80080ee:	d0f0      	beq.n	80080d2 <__match+0x6>
 80080f0:	2000      	movs	r0, #0
 80080f2:	e7f3      	b.n	80080dc <__match+0x10>

080080f4 <__hexnan>:
 80080f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f8:	2500      	movs	r5, #0
 80080fa:	680b      	ldr	r3, [r1, #0]
 80080fc:	4682      	mov	sl, r0
 80080fe:	115e      	asrs	r6, r3, #5
 8008100:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008104:	f013 031f 	ands.w	r3, r3, #31
 8008108:	bf18      	it	ne
 800810a:	3604      	addne	r6, #4
 800810c:	1f37      	subs	r7, r6, #4
 800810e:	4690      	mov	r8, r2
 8008110:	46b9      	mov	r9, r7
 8008112:	463c      	mov	r4, r7
 8008114:	46ab      	mov	fp, r5
 8008116:	b087      	sub	sp, #28
 8008118:	6801      	ldr	r1, [r0, #0]
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008120:	9502      	str	r5, [sp, #8]
 8008122:	784a      	ldrb	r2, [r1, #1]
 8008124:	1c4b      	adds	r3, r1, #1
 8008126:	9303      	str	r3, [sp, #12]
 8008128:	b342      	cbz	r2, 800817c <__hexnan+0x88>
 800812a:	4610      	mov	r0, r2
 800812c:	9105      	str	r1, [sp, #20]
 800812e:	9204      	str	r2, [sp, #16]
 8008130:	f7ff fd75 	bl	8007c1e <__hexdig_fun>
 8008134:	2800      	cmp	r0, #0
 8008136:	d14f      	bne.n	80081d8 <__hexnan+0xe4>
 8008138:	9a04      	ldr	r2, [sp, #16]
 800813a:	9905      	ldr	r1, [sp, #20]
 800813c:	2a20      	cmp	r2, #32
 800813e:	d818      	bhi.n	8008172 <__hexnan+0x7e>
 8008140:	9b02      	ldr	r3, [sp, #8]
 8008142:	459b      	cmp	fp, r3
 8008144:	dd13      	ble.n	800816e <__hexnan+0x7a>
 8008146:	454c      	cmp	r4, r9
 8008148:	d206      	bcs.n	8008158 <__hexnan+0x64>
 800814a:	2d07      	cmp	r5, #7
 800814c:	dc04      	bgt.n	8008158 <__hexnan+0x64>
 800814e:	462a      	mov	r2, r5
 8008150:	4649      	mov	r1, r9
 8008152:	4620      	mov	r0, r4
 8008154:	f7ff ffa8 	bl	80080a8 <L_shift>
 8008158:	4544      	cmp	r4, r8
 800815a:	d950      	bls.n	80081fe <__hexnan+0x10a>
 800815c:	2300      	movs	r3, #0
 800815e:	f1a4 0904 	sub.w	r9, r4, #4
 8008162:	f844 3c04 	str.w	r3, [r4, #-4]
 8008166:	461d      	mov	r5, r3
 8008168:	464c      	mov	r4, r9
 800816a:	f8cd b008 	str.w	fp, [sp, #8]
 800816e:	9903      	ldr	r1, [sp, #12]
 8008170:	e7d7      	b.n	8008122 <__hexnan+0x2e>
 8008172:	2a29      	cmp	r2, #41	; 0x29
 8008174:	d155      	bne.n	8008222 <__hexnan+0x12e>
 8008176:	3102      	adds	r1, #2
 8008178:	f8ca 1000 	str.w	r1, [sl]
 800817c:	f1bb 0f00 	cmp.w	fp, #0
 8008180:	d04f      	beq.n	8008222 <__hexnan+0x12e>
 8008182:	454c      	cmp	r4, r9
 8008184:	d206      	bcs.n	8008194 <__hexnan+0xa0>
 8008186:	2d07      	cmp	r5, #7
 8008188:	dc04      	bgt.n	8008194 <__hexnan+0xa0>
 800818a:	462a      	mov	r2, r5
 800818c:	4649      	mov	r1, r9
 800818e:	4620      	mov	r0, r4
 8008190:	f7ff ff8a 	bl	80080a8 <L_shift>
 8008194:	4544      	cmp	r4, r8
 8008196:	d934      	bls.n	8008202 <__hexnan+0x10e>
 8008198:	4623      	mov	r3, r4
 800819a:	f1a8 0204 	sub.w	r2, r8, #4
 800819e:	f853 1b04 	ldr.w	r1, [r3], #4
 80081a2:	429f      	cmp	r7, r3
 80081a4:	f842 1f04 	str.w	r1, [r2, #4]!
 80081a8:	d2f9      	bcs.n	800819e <__hexnan+0xaa>
 80081aa:	1b3b      	subs	r3, r7, r4
 80081ac:	f023 0303 	bic.w	r3, r3, #3
 80081b0:	3304      	adds	r3, #4
 80081b2:	3e03      	subs	r6, #3
 80081b4:	3401      	adds	r4, #1
 80081b6:	42a6      	cmp	r6, r4
 80081b8:	bf38      	it	cc
 80081ba:	2304      	movcc	r3, #4
 80081bc:	2200      	movs	r2, #0
 80081be:	4443      	add	r3, r8
 80081c0:	f843 2b04 	str.w	r2, [r3], #4
 80081c4:	429f      	cmp	r7, r3
 80081c6:	d2fb      	bcs.n	80081c0 <__hexnan+0xcc>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	b91b      	cbnz	r3, 80081d4 <__hexnan+0xe0>
 80081cc:	4547      	cmp	r7, r8
 80081ce:	d126      	bne.n	800821e <__hexnan+0x12a>
 80081d0:	2301      	movs	r3, #1
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	2005      	movs	r0, #5
 80081d6:	e025      	b.n	8008224 <__hexnan+0x130>
 80081d8:	3501      	adds	r5, #1
 80081da:	2d08      	cmp	r5, #8
 80081dc:	f10b 0b01 	add.w	fp, fp, #1
 80081e0:	dd06      	ble.n	80081f0 <__hexnan+0xfc>
 80081e2:	4544      	cmp	r4, r8
 80081e4:	d9c3      	bls.n	800816e <__hexnan+0x7a>
 80081e6:	2300      	movs	r3, #0
 80081e8:	2501      	movs	r5, #1
 80081ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80081ee:	3c04      	subs	r4, #4
 80081f0:	6822      	ldr	r2, [r4, #0]
 80081f2:	f000 000f 	and.w	r0, r0, #15
 80081f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80081fa:	6020      	str	r0, [r4, #0]
 80081fc:	e7b7      	b.n	800816e <__hexnan+0x7a>
 80081fe:	2508      	movs	r5, #8
 8008200:	e7b5      	b.n	800816e <__hexnan+0x7a>
 8008202:	9b01      	ldr	r3, [sp, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0df      	beq.n	80081c8 <__hexnan+0xd4>
 8008208:	f04f 32ff 	mov.w	r2, #4294967295
 800820c:	f1c3 0320 	rsb	r3, r3, #32
 8008210:	40da      	lsrs	r2, r3
 8008212:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008216:	4013      	ands	r3, r2
 8008218:	f846 3c04 	str.w	r3, [r6, #-4]
 800821c:	e7d4      	b.n	80081c8 <__hexnan+0xd4>
 800821e:	3f04      	subs	r7, #4
 8008220:	e7d2      	b.n	80081c8 <__hexnan+0xd4>
 8008222:	2004      	movs	r0, #4
 8008224:	b007      	add	sp, #28
 8008226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800822a <__ascii_mbtowc>:
 800822a:	b082      	sub	sp, #8
 800822c:	b901      	cbnz	r1, 8008230 <__ascii_mbtowc+0x6>
 800822e:	a901      	add	r1, sp, #4
 8008230:	b142      	cbz	r2, 8008244 <__ascii_mbtowc+0x1a>
 8008232:	b14b      	cbz	r3, 8008248 <__ascii_mbtowc+0x1e>
 8008234:	7813      	ldrb	r3, [r2, #0]
 8008236:	600b      	str	r3, [r1, #0]
 8008238:	7812      	ldrb	r2, [r2, #0]
 800823a:	1e10      	subs	r0, r2, #0
 800823c:	bf18      	it	ne
 800823e:	2001      	movne	r0, #1
 8008240:	b002      	add	sp, #8
 8008242:	4770      	bx	lr
 8008244:	4610      	mov	r0, r2
 8008246:	e7fb      	b.n	8008240 <__ascii_mbtowc+0x16>
 8008248:	f06f 0001 	mvn.w	r0, #1
 800824c:	e7f8      	b.n	8008240 <__ascii_mbtowc+0x16>

0800824e <_realloc_r>:
 800824e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008252:	4680      	mov	r8, r0
 8008254:	4614      	mov	r4, r2
 8008256:	460e      	mov	r6, r1
 8008258:	b921      	cbnz	r1, 8008264 <_realloc_r+0x16>
 800825a:	4611      	mov	r1, r2
 800825c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008260:	f7fd bc76 	b.w	8005b50 <_malloc_r>
 8008264:	b92a      	cbnz	r2, 8008272 <_realloc_r+0x24>
 8008266:	f7fd fc03 	bl	8005a70 <_free_r>
 800826a:	4625      	mov	r5, r4
 800826c:	4628      	mov	r0, r5
 800826e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008272:	f000 f8c6 	bl	8008402 <_malloc_usable_size_r>
 8008276:	4284      	cmp	r4, r0
 8008278:	4607      	mov	r7, r0
 800827a:	d802      	bhi.n	8008282 <_realloc_r+0x34>
 800827c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008280:	d812      	bhi.n	80082a8 <_realloc_r+0x5a>
 8008282:	4621      	mov	r1, r4
 8008284:	4640      	mov	r0, r8
 8008286:	f7fd fc63 	bl	8005b50 <_malloc_r>
 800828a:	4605      	mov	r5, r0
 800828c:	2800      	cmp	r0, #0
 800828e:	d0ed      	beq.n	800826c <_realloc_r+0x1e>
 8008290:	42bc      	cmp	r4, r7
 8008292:	4622      	mov	r2, r4
 8008294:	4631      	mov	r1, r6
 8008296:	bf28      	it	cs
 8008298:	463a      	movcs	r2, r7
 800829a:	f7fc fd66 	bl	8004d6a <memcpy>
 800829e:	4631      	mov	r1, r6
 80082a0:	4640      	mov	r0, r8
 80082a2:	f7fd fbe5 	bl	8005a70 <_free_r>
 80082a6:	e7e1      	b.n	800826c <_realloc_r+0x1e>
 80082a8:	4635      	mov	r5, r6
 80082aa:	e7df      	b.n	800826c <_realloc_r+0x1e>

080082ac <__ascii_wctomb>:
 80082ac:	4603      	mov	r3, r0
 80082ae:	4608      	mov	r0, r1
 80082b0:	b141      	cbz	r1, 80082c4 <__ascii_wctomb+0x18>
 80082b2:	2aff      	cmp	r2, #255	; 0xff
 80082b4:	d904      	bls.n	80082c0 <__ascii_wctomb+0x14>
 80082b6:	228a      	movs	r2, #138	; 0x8a
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	4770      	bx	lr
 80082c0:	2001      	movs	r0, #1
 80082c2:	700a      	strb	r2, [r1, #0]
 80082c4:	4770      	bx	lr
	...

080082c8 <fiprintf>:
 80082c8:	b40e      	push	{r1, r2, r3}
 80082ca:	b503      	push	{r0, r1, lr}
 80082cc:	4601      	mov	r1, r0
 80082ce:	ab03      	add	r3, sp, #12
 80082d0:	4805      	ldr	r0, [pc, #20]	; (80082e8 <fiprintf+0x20>)
 80082d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082d6:	6800      	ldr	r0, [r0, #0]
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	f7ff f97f 	bl	80075dc <_vfiprintf_r>
 80082de:	b002      	add	sp, #8
 80082e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e4:	b003      	add	sp, #12
 80082e6:	4770      	bx	lr
 80082e8:	20000068 	.word	0x20000068

080082ec <__swhatbuf_r>:
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	460c      	mov	r4, r1
 80082f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f4:	4615      	mov	r5, r2
 80082f6:	2900      	cmp	r1, #0
 80082f8:	461e      	mov	r6, r3
 80082fa:	b096      	sub	sp, #88	; 0x58
 80082fc:	da0c      	bge.n	8008318 <__swhatbuf_r+0x2c>
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	2100      	movs	r1, #0
 8008302:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008306:	bf0c      	ite	eq
 8008308:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800830c:	2340      	movne	r3, #64	; 0x40
 800830e:	2000      	movs	r0, #0
 8008310:	6031      	str	r1, [r6, #0]
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	b016      	add	sp, #88	; 0x58
 8008316:	bd70      	pop	{r4, r5, r6, pc}
 8008318:	466a      	mov	r2, sp
 800831a:	f000 f849 	bl	80083b0 <_fstat_r>
 800831e:	2800      	cmp	r0, #0
 8008320:	dbed      	blt.n	80082fe <__swhatbuf_r+0x12>
 8008322:	9901      	ldr	r1, [sp, #4]
 8008324:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008328:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800832c:	4259      	negs	r1, r3
 800832e:	4159      	adcs	r1, r3
 8008330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008334:	e7eb      	b.n	800830e <__swhatbuf_r+0x22>

08008336 <__smakebuf_r>:
 8008336:	898b      	ldrh	r3, [r1, #12]
 8008338:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800833a:	079d      	lsls	r5, r3, #30
 800833c:	4606      	mov	r6, r0
 800833e:	460c      	mov	r4, r1
 8008340:	d507      	bpl.n	8008352 <__smakebuf_r+0x1c>
 8008342:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	2301      	movs	r3, #1
 800834c:	6163      	str	r3, [r4, #20]
 800834e:	b002      	add	sp, #8
 8008350:	bd70      	pop	{r4, r5, r6, pc}
 8008352:	466a      	mov	r2, sp
 8008354:	ab01      	add	r3, sp, #4
 8008356:	f7ff ffc9 	bl	80082ec <__swhatbuf_r>
 800835a:	9900      	ldr	r1, [sp, #0]
 800835c:	4605      	mov	r5, r0
 800835e:	4630      	mov	r0, r6
 8008360:	f7fd fbf6 	bl	8005b50 <_malloc_r>
 8008364:	b948      	cbnz	r0, 800837a <__smakebuf_r+0x44>
 8008366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800836a:	059a      	lsls	r2, r3, #22
 800836c:	d4ef      	bmi.n	800834e <__smakebuf_r+0x18>
 800836e:	f023 0303 	bic.w	r3, r3, #3
 8008372:	f043 0302 	orr.w	r3, r3, #2
 8008376:	81a3      	strh	r3, [r4, #12]
 8008378:	e7e3      	b.n	8008342 <__smakebuf_r+0xc>
 800837a:	89a3      	ldrh	r3, [r4, #12]
 800837c:	6020      	str	r0, [r4, #0]
 800837e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008382:	81a3      	strh	r3, [r4, #12]
 8008384:	9b00      	ldr	r3, [sp, #0]
 8008386:	6120      	str	r0, [r4, #16]
 8008388:	6163      	str	r3, [r4, #20]
 800838a:	9b01      	ldr	r3, [sp, #4]
 800838c:	b15b      	cbz	r3, 80083a6 <__smakebuf_r+0x70>
 800838e:	4630      	mov	r0, r6
 8008390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008394:	f000 f81e 	bl	80083d4 <_isatty_r>
 8008398:	b128      	cbz	r0, 80083a6 <__smakebuf_r+0x70>
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f023 0303 	bic.w	r3, r3, #3
 80083a0:	f043 0301 	orr.w	r3, r3, #1
 80083a4:	81a3      	strh	r3, [r4, #12]
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	431d      	orrs	r5, r3
 80083aa:	81a5      	strh	r5, [r4, #12]
 80083ac:	e7cf      	b.n	800834e <__smakebuf_r+0x18>
	...

080083b0 <_fstat_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	2300      	movs	r3, #0
 80083b4:	4d06      	ldr	r5, [pc, #24]	; (80083d0 <_fstat_r+0x20>)
 80083b6:	4604      	mov	r4, r0
 80083b8:	4608      	mov	r0, r1
 80083ba:	4611      	mov	r1, r2
 80083bc:	602b      	str	r3, [r5, #0]
 80083be:	f7f8 ff9c 	bl	80012fa <_fstat>
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	d102      	bne.n	80083cc <_fstat_r+0x1c>
 80083c6:	682b      	ldr	r3, [r5, #0]
 80083c8:	b103      	cbz	r3, 80083cc <_fstat_r+0x1c>
 80083ca:	6023      	str	r3, [r4, #0]
 80083cc:	bd38      	pop	{r3, r4, r5, pc}
 80083ce:	bf00      	nop
 80083d0:	200013b8 	.word	0x200013b8

080083d4 <_isatty_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	2300      	movs	r3, #0
 80083d8:	4d05      	ldr	r5, [pc, #20]	; (80083f0 <_isatty_r+0x1c>)
 80083da:	4604      	mov	r4, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	602b      	str	r3, [r5, #0]
 80083e0:	f7f8 ff9a 	bl	8001318 <_isatty>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_isatty_r+0x1a>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_isatty_r+0x1a>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	200013b8 	.word	0x200013b8

080083f4 <abort>:
 80083f4:	2006      	movs	r0, #6
 80083f6:	b508      	push	{r3, lr}
 80083f8:	f000 f834 	bl	8008464 <raise>
 80083fc:	2001      	movs	r0, #1
 80083fe:	f7f8 ff4a 	bl	8001296 <_exit>

08008402 <_malloc_usable_size_r>:
 8008402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008406:	1f18      	subs	r0, r3, #4
 8008408:	2b00      	cmp	r3, #0
 800840a:	bfbc      	itt	lt
 800840c:	580b      	ldrlt	r3, [r1, r0]
 800840e:	18c0      	addlt	r0, r0, r3
 8008410:	4770      	bx	lr

08008412 <_raise_r>:
 8008412:	291f      	cmp	r1, #31
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4604      	mov	r4, r0
 8008418:	460d      	mov	r5, r1
 800841a:	d904      	bls.n	8008426 <_raise_r+0x14>
 800841c:	2316      	movs	r3, #22
 800841e:	6003      	str	r3, [r0, #0]
 8008420:	f04f 30ff 	mov.w	r0, #4294967295
 8008424:	bd38      	pop	{r3, r4, r5, pc}
 8008426:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008428:	b112      	cbz	r2, 8008430 <_raise_r+0x1e>
 800842a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800842e:	b94b      	cbnz	r3, 8008444 <_raise_r+0x32>
 8008430:	4620      	mov	r0, r4
 8008432:	f000 f831 	bl	8008498 <_getpid_r>
 8008436:	462a      	mov	r2, r5
 8008438:	4601      	mov	r1, r0
 800843a:	4620      	mov	r0, r4
 800843c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008440:	f000 b818 	b.w	8008474 <_kill_r>
 8008444:	2b01      	cmp	r3, #1
 8008446:	d00a      	beq.n	800845e <_raise_r+0x4c>
 8008448:	1c59      	adds	r1, r3, #1
 800844a:	d103      	bne.n	8008454 <_raise_r+0x42>
 800844c:	2316      	movs	r3, #22
 800844e:	6003      	str	r3, [r0, #0]
 8008450:	2001      	movs	r0, #1
 8008452:	e7e7      	b.n	8008424 <_raise_r+0x12>
 8008454:	2400      	movs	r4, #0
 8008456:	4628      	mov	r0, r5
 8008458:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800845c:	4798      	blx	r3
 800845e:	2000      	movs	r0, #0
 8008460:	e7e0      	b.n	8008424 <_raise_r+0x12>
	...

08008464 <raise>:
 8008464:	4b02      	ldr	r3, [pc, #8]	; (8008470 <raise+0xc>)
 8008466:	4601      	mov	r1, r0
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f7ff bfd2 	b.w	8008412 <_raise_r>
 800846e:	bf00      	nop
 8008470:	20000068 	.word	0x20000068

08008474 <_kill_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	2300      	movs	r3, #0
 8008478:	4d06      	ldr	r5, [pc, #24]	; (8008494 <_kill_r+0x20>)
 800847a:	4604      	mov	r4, r0
 800847c:	4608      	mov	r0, r1
 800847e:	4611      	mov	r1, r2
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	f7f8 fef8 	bl	8001276 <_kill>
 8008486:	1c43      	adds	r3, r0, #1
 8008488:	d102      	bne.n	8008490 <_kill_r+0x1c>
 800848a:	682b      	ldr	r3, [r5, #0]
 800848c:	b103      	cbz	r3, 8008490 <_kill_r+0x1c>
 800848e:	6023      	str	r3, [r4, #0]
 8008490:	bd38      	pop	{r3, r4, r5, pc}
 8008492:	bf00      	nop
 8008494:	200013b8 	.word	0x200013b8

08008498 <_getpid_r>:
 8008498:	f7f8 bee6 	b.w	8001268 <_getpid>

0800849c <_init>:
 800849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849e:	bf00      	nop
 80084a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a2:	bc08      	pop	{r3}
 80084a4:	469e      	mov	lr, r3
 80084a6:	4770      	bx	lr

080084a8 <_fini>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr
