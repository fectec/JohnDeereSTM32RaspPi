
EngineAutomaticTransmissionController_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b884  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001100  0800b998  0800b998  0001b998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca98  0800ca98  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800ca98  0800ca98  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ca98  0800ca98  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca98  0800ca98  0001ca98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca9c  0800ca9c  0001ca9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800caa0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000164c  20000208  0800cca8  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001854  0800cca8  00021854  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001335d  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cd0  00000000  00000000  000335d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  000372a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df9  00000000  00000000  00038548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c4d3  00000000  00000000  00039341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017efc  00000000  00000000  00055814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096779  00000000  00000000  0006d710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006178  00000000  00000000  00103e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  0010a004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b97c 	.word	0x0800b97c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800b97c 	.word	0x0800b97c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4605      	mov	r5, r0
 8001074:	460c      	mov	r4, r1
 8001076:	2200      	movs	r2, #0
 8001078:	2300      	movs	r3, #0
 800107a:	4628      	mov	r0, r5
 800107c:	4621      	mov	r1, r4
 800107e:	f7ff fc9d 	bl	80009bc <__aeabi_dcmplt>
 8001082:	b928      	cbnz	r0, 8001090 <__aeabi_d2lz+0x20>
 8001084:	4628      	mov	r0, r5
 8001086:	4621      	mov	r1, r4
 8001088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800108c:	f000 b80a 	b.w	80010a4 <__aeabi_d2ulz>
 8001090:	4628      	mov	r0, r5
 8001092:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001096:	f000 f805 	bl	80010a4 <__aeabi_d2ulz>
 800109a:	4240      	negs	r0, r0
 800109c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop

080010a4 <__aeabi_d2ulz>:
 80010a4:	b5d0      	push	{r4, r6, r7, lr}
 80010a6:	2200      	movs	r2, #0
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <__aeabi_d2ulz+0x34>)
 80010aa:	4606      	mov	r6, r0
 80010ac:	460f      	mov	r7, r1
 80010ae:	f7ff fa13 	bl	80004d8 <__aeabi_dmul>
 80010b2:	f7ff fce9 	bl	8000a88 <__aeabi_d2uiz>
 80010b6:	4604      	mov	r4, r0
 80010b8:	f7ff f994 	bl	80003e4 <__aeabi_ui2d>
 80010bc:	2200      	movs	r2, #0
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <__aeabi_d2ulz+0x38>)
 80010c0:	f7ff fa0a 	bl	80004d8 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4630      	mov	r0, r6
 80010ca:	4639      	mov	r1, r7
 80010cc:	f7ff f84c 	bl	8000168 <__aeabi_dsub>
 80010d0:	f7ff fcda 	bl	8000a88 <__aeabi_d2uiz>
 80010d4:	4621      	mov	r1, r4
 80010d6:	bdd0      	pop	{r4, r6, r7, pc}
 80010d8:	3df00000 	.word	0x3df00000
 80010dc:	41f00000 	.word	0x41f00000

080010e0 <USER_ADC_Init>:
#include "GPIO.h"

// Initialize ADC

void USER_ADC_Init( uint8_t ADC )
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  RCC->CFGR	|=	RCC_CFGR_ADCPRE;       		// Adjust ADC input clock
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <USER_ADC_Init+0xb8>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4a2a      	ldr	r2, [pc, #168]	; (8001198 <USER_ADC_Init+0xb8>)
 80010f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010f4:	6053      	str	r3, [r2, #4]
  USER_GPIO_Define(PORTA, 0, INP, INP_AN);		// Pin PA0 as analog input
 80010f6:	2300      	movs	r3, #0
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 fff1 	bl	80020e4 <USER_GPIO_Define>

  if( ADC == 0 )
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d142      	bne.n	800118e <USER_ADC_Init+0xae>
  {
    RCC->APB2ENR	|=	RCC_APB2ENR_ADC1EN;	// ADC1 clock enable
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <USER_ADC_Init+0xb8>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a22      	ldr	r2, [pc, #136]	; (8001198 <USER_ADC_Init+0xb8>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001112:	6193      	str	r3, [r2, #24]

    ADC1->CR1		&=	~(ADC_CR1_DUALMOD);	// Step 1 - Select independent mode
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <USER_ADC_Init+0xbc>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a20      	ldr	r2, [pc, #128]	; (800119c <USER_ADC_Init+0xbc>)
 800111a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800111e:	6053      	str	r3, [r2, #4]
    ADC1->CR2		|=	ADC_CR2_CONT;		// Step 2 - Select conversion mode
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <USER_ADC_Init+0xbc>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <USER_ADC_Init+0xbc>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	6093      	str	r3, [r2, #8]
    ADC1->CR2		&= 	~(ADC_CR2_ALIGN);	//	and format for ADC result
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <USER_ADC_Init+0xbc>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a1a      	ldr	r2, [pc, #104]	; (800119c <USER_ADC_Init+0xbc>)
 8001132:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001136:	6093      	str	r3, [r2, #8]
    ADC1->SMPR2		&= 	~(ADC_SMPR2_SMP0);	// Step 3 - Select the sample time for the
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <USER_ADC_Init+0xbc>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <USER_ADC_Init+0xbc>)
 800113e:	f023 0307 	bic.w	r3, r3, #7
 8001142:	6113      	str	r3, [r2, #16]
							//	ADC channel
    ADC1->SQR1		&= 	~(ADC_SQR1_L);		// Step 4 - Select the sequence and number of
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <USER_ADC_Init+0xbc>)
 8001146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <USER_ADC_Init+0xbc>)
 800114a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800114e:	62d3      	str	r3, [r2, #44]	; 0x2c
							//	conversions for the ADC regular channels
    ADC1->SQR3		&= 	~(ADC_SQR3_SQ1);	// Step 5 - Select the channel for the first ADC
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <USER_ADC_Init+0xbc>)
 8001152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001154:	4a11      	ldr	r2, [pc, #68]	; (800119c <USER_ADC_Init+0xbc>)
 8001156:	f023 031f 	bic.w	r3, r3, #31
 800115a:	6353      	str	r3, [r2, #52]	; 0x34
							//	conversion
    ADC1->CR2		|=	ADC_CR2_ADON;		// Step 6 - Enable the ADC module
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <USER_ADC_Init+0xbc>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <USER_ADC_Init+0xbc>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6093      	str	r3, [r2, #8]
    ADC1->CR2		|=	ADC_CR2_CAL;		// Step 7 - Perform a calibration after
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <USER_ADC_Init+0xbc>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4a0b      	ldr	r2, [pc, #44]	; (800119c <USER_ADC_Init+0xbc>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6093      	str	r3, [r2, #8]
							// 	each power-up
    while ( ADC1->CR2 & ADC_CR2_CAL );			// Step 8 - Wait until the bit is reset by
 8001174:	bf00      	nop
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <USER_ADC_Init+0xbc>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f9      	bne.n	8001176 <USER_ADC_Init+0x96>
							//	hardware after calibration is complete
    ADC1->CR2		|=	ADC_CR2_ADON;		// Step 9 - Start conversion
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <USER_ADC_Init+0xbc>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <USER_ADC_Init+0xbc>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6093      	str	r3, [r2, #8]
  }
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	40012400 	.word	0x40012400

080011a0 <USER_ADC_Convert>:

// Convert Analog value to Digital using ADC

uint16_t USER_ADC_Convert( uint8_t ADC )
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if( ADC == 0 )
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10a      	bne.n	80011c6 <USER_ADC_Convert+0x26>
  {
    while( !( ADC1->SR & ADC_SR_EOC ) );		// Wait for end of conversion
 80011b0:	bf00      	nop
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <USER_ADC_Convert+0x34>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f9      	beq.n	80011b2 <USER_ADC_Convert+0x12>
    return ADC1->DR;
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <USER_ADC_Convert+0x34>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	e000      	b.n	80011c8 <USER_ADC_Convert+0x28>
  }

  return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40012400 	.word	0x40012400

080011d8 <scaleVoltageValue>:

// Scale ADC read voltage value to a range of 0 to 100

float scaleVoltageValue( float voltageValue, float min, float max )
{ 
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  float normalizedVoltageValue = (voltageValue - min) / (max - min) * 100;
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f7ff fcc2 	bl	8000b70 <__aeabi_fsub>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461c      	mov	r4, r3
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fcbc 	bl	8000b70 <__aeabi_fsub>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4619      	mov	r1, r3
 80011fc:	4620      	mov	r0, r4
 80011fe:	f7ff fe75 	bl	8000eec <__aeabi_fdiv>
 8001202:	4603      	mov	r3, r0
 8001204:	4905      	ldr	r1, [pc, #20]	; (800121c <scaleVoltageValue+0x44>)
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fdbc 	bl	8000d84 <__aeabi_fmul>
 800120c:	4603      	mov	r3, r0
 800120e:	617b      	str	r3, [r7, #20]
  return normalizedVoltageValue;
 8001210:	697b      	ldr	r3, [r7, #20]
}
 8001212:	4618      	mov	r0, r3
 8001214:	371c      	adds	r7, #28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}
 800121a:	bf00      	nop
 800121c:	42c80000 	.word	0x42c80000

08001220 <look2_binlxpw>:
/* Forward declaration for local functions */
static void EngTrModel_gear_state(const int32_T *sfEvent);
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b092      	sub	sp, #72	; 0x48
 8001224:	af00      	add	r7, sp, #0
 8001226:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800122a:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 800122e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001238:	f7ff fbca 	bl	80009d0 <__aeabi_dcmple>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d020      	beq.n	8001284 <look2_binlxpw+0x64>
    iLeft = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8001246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001250:	f7fe ff8a 	bl	8000168 <__aeabi_dsub>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4614      	mov	r4, r2
 800125a:	461d      	mov	r5, r3
 800125c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800125e:	3308      	adds	r3, #8
 8001260:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7fe ff7d 	bl	8000168 <__aeabi_dsub>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4620      	mov	r0, r4
 8001274:	4629      	mov	r1, r5
 8001276:	f7ff fa59 	bl	800072c <__aeabi_ddiv>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001282:	e08e      	b.n	80013a2 <look2_binlxpw+0x182>
  } else if (u0 < bp0[maxIndex[0U]]) {
 8001284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800128c:	4413      	add	r3, r2
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001296:	f7ff fb91 	bl	80009bc <__aeabi_dcmplt>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d04d      	beq.n	800133c <look2_binlxpw+0x11c>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 80012a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[0U];
 80012ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 80012b2:	e016      	b.n	80012e2 <look2_binlxpw+0xc2>
      if (u0 < bp0[bpIdx]) {
 80012b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012ba:	4413      	add	r3, r2
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012c4:	f7ff fb7a 	bl	80009bc <__aeabi_dcmplt>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <look2_binlxpw+0xb4>
        iRght = bpIdx;
 80012ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012d2:	e001      	b.n	80012d8 <look2_binlxpw+0xb8>
      } else {
        iLeft = bpIdx;
 80012d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80012d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012dc:	4413      	add	r3, r2
 80012de:	085b      	lsrs	r3, r3, #1
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 80012e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d8e3      	bhi.n	80012b4 <look2_binlxpw+0x94>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 80012ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012f2:	4413      	add	r3, r2
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012fc:	f7fe ff34 	bl	8000168 <__aeabi_dsub>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4614      	mov	r4, r2
 8001306:	461d      	mov	r5, r3
 8001308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130a:	3301      	adds	r3, #1
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001310:	4413      	add	r3, r2
 8001312:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800131c:	4413      	add	r3, r2
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7fe ff21 	bl	8000168 <__aeabi_dsub>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4620      	mov	r0, r4
 800132c:	4629      	mov	r1, r5
 800132e:	f7ff f9fd 	bl	800072c <__aeabi_ddiv>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800133a:	e032      	b.n	80013a2 <look2_binlxpw+0x182>
  } else {
    iLeft = maxIndex[0U] - 1U;
 800133c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3b01      	subs	r3, #1
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 8001344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800134c:	3b01      	subs	r3, #1
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001352:	4413      	add	r3, r2
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800135c:	f7fe ff04 	bl	8000168 <__aeabi_dsub>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4614      	mov	r4, r2
 8001366:	461d      	mov	r5, r3
 8001368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001370:	4413      	add	r3, r2
 8001372:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001376:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800137e:	3b01      	subs	r3, #1
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001384:	4413      	add	r3, r2
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7fe feed 	bl	8000168 <__aeabi_dsub>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4620      	mov	r0, r4
 8001394:	4629      	mov	r1, r5
 8001396:	f7ff f9c9 	bl	800072c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 80013a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 80013aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ac:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 80013ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013b8:	f7ff fb0a 	bl	80009d0 <__aeabi_dcmple>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d020      	beq.n	8001404 <look2_binlxpw+0x1e4>
    iLeft = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 80013c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013d0:	f7fe feca 	bl	8000168 <__aeabi_dsub>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4614      	mov	r4, r2
 80013da:	461d      	mov	r5, r3
 80013dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013de:	3308      	adds	r3, #8
 80013e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7fe febd 	bl	8000168 <__aeabi_dsub>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4620      	mov	r0, r4
 80013f4:	4629      	mov	r1, r5
 80013f6:	f7ff f999 	bl	800072c <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001402:	e095      	b.n	8001530 <look2_binlxpw+0x310>
  } else if (u1 < bp1[maxIndex[1U]]) {
 8001404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001406:	3304      	adds	r3, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800140e:	4413      	add	r3, r2
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001418:	f7ff fad0 	bl	80009bc <__aeabi_dcmplt>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d04f      	beq.n	80014c2 <look2_binlxpw+0x2a2>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 8001422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001424:	3304      	adds	r3, #4
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	085b      	lsrs	r3, r3, #1
 800142a:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[1U];
 8001430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001432:	3304      	adds	r3, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 8001438:	e016      	b.n	8001468 <look2_binlxpw+0x248>
      if (u1 < bp1[bpIdx]) {
 800143a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001440:	4413      	add	r3, r2
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800144a:	f7ff fab7 	bl	80009bc <__aeabi_dcmplt>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <look2_binlxpw+0x23a>
        iRght = bpIdx;
 8001454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001458:	e001      	b.n	800145e <look2_binlxpw+0x23e>
      } else {
        iLeft = bpIdx;
 800145a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 800145e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001462:	4413      	add	r3, r2
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 8001468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800146a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d8e3      	bhi.n	800143a <look2_binlxpw+0x21a>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 8001472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001478:	4413      	add	r3, r2
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001482:	f7fe fe71 	bl	8000168 <__aeabi_dsub>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4614      	mov	r4, r2
 800148c:	461d      	mov	r5, r3
 800148e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001490:	3301      	adds	r3, #1
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001496:	4413      	add	r3, r2
 8001498:	e9d3 0100 	ldrd	r0, r1, [r3]
 800149c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014a2:	4413      	add	r3, r2
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7fe fe5e 	bl	8000168 <__aeabi_dsub>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7ff f93a 	bl	800072c <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80014c0:	e036      	b.n	8001530 <look2_binlxpw+0x310>
  } else {
    iLeft = maxIndex[1U] - 1U;
 80014c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014c4:	3304      	adds	r3, #4
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 80014cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ce:	3304      	adds	r3, #4
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80014d6:	3b01      	subs	r3, #1
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014dc:	4413      	add	r3, r2
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014e6:	f7fe fe3f 	bl	8000168 <__aeabi_dsub>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4614      	mov	r4, r2
 80014f0:	461d      	mov	r5, r3
 80014f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014f4:	3304      	adds	r3, #4
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014fc:	4413      	add	r3, r2
 80014fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001504:	3304      	adds	r3, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800150c:	3b01      	subs	r3, #1
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001512:	4413      	add	r3, r2
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7fe fe26 	bl	8000168 <__aeabi_dsub>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4620      	mov	r0, r4
 8001522:	4629      	mov	r1, r5
 8001524:	f7ff f902 	bl	800072c <__aeabi_ddiv>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 8001530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001532:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001534:	fb03 f202 	mul.w	r2, r3, r2
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	4413      	add	r3, r2
 800153c:	63bb      	str	r3, [r7, #56]	; 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 800153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001540:	3301      	adds	r3, #1
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001546:	4413      	add	r3, r2
 8001548:	e9d3 0100 	ldrd	r0, r1, [r3]
 800154c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001552:	4413      	add	r3, r2
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7fe fe06 	bl	8000168 <__aeabi_dsub>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001568:	f7fe ffb6 	bl	80004d8 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800157a:	4413      	add	r3, r2
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7fe fdf4 	bl	800016c <__adddf3>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  bpIdx += stride;
 800158c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800158e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001590:	4413      	add	r3, r2
 8001592:	63bb      	str	r3, [r7, #56]	; 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 8001594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001596:	3301      	adds	r3, #1
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800159c:	4413      	add	r3, r2
 800159e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015a8:	4413      	add	r3, r2
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7fe fddb 	bl	8000168 <__aeabi_dsub>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015be:	f7fe ff8b 	bl	80004d8 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015d0:	4413      	add	r3, r2
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7fe fdc9 	bl	800016c <__adddf3>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015e6:	f7fe fdbf 	bl	8000168 <__aeabi_dsub>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
          yL_1d) * frac + yL_1d;
 80015f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015f6:	f7fe ff6f 	bl	80004d8 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001606:	f7fe fdb1 	bl	800016c <__adddf3>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
}
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	3748      	adds	r7, #72	; 0x48
 8001614:	46bd      	mov	sp, r7
 8001616:	bdb0      	pop	{r4, r5, r7, pc}

08001618 <look1_binlxpw>:

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001630:	f7ff f9ce 	bl	80009d0 <__aeabi_dcmple>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d020      	beq.n	800167c <look1_binlxpw+0x64>
    iLeft = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001648:	f7fe fd8e 	bl	8000168 <__aeabi_dsub>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4614      	mov	r4, r2
 8001652:	461d      	mov	r5, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3308      	adds	r3, #8
 8001658:	e9d3 0100 	ldrd	r0, r1, [r3]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7fe fd81 	bl	8000168 <__aeabi_dsub>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	f7ff f85d 	bl	800072c <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800167a:	e087      	b.n	800178c <look1_binlxpw+0x174>
  } else if (u0 < bp0[maxIndex]) {
 800167c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800168c:	f7ff f996 	bl	80009bc <__aeabi_dcmplt>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d04b      	beq.n	800172e <look1_binlxpw+0x116>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 8001696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 80016a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016a2:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 80016a4:	e016      	b.n	80016d4 <look1_binlxpw+0xbc>
      if (u0 < bp0[bpIdx]) {
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016b6:	f7ff f981 	bl	80009bc <__aeabi_dcmplt>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <look1_binlxpw+0xae>
        iRght = bpIdx;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	e001      	b.n	80016ca <look1_binlxpw+0xb2>
      } else {
        iLeft = bpIdx;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	4413      	add	r3, r2
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
    while (iRght - iLeft > 1U) {
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d8e3      	bhi.n	80016a6 <look1_binlxpw+0x8e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ee:	f7fe fd3b 	bl	8000168 <__aeabi_dsub>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4614      	mov	r4, r2
 80016f8:	461d      	mov	r5, r3
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	3301      	adds	r3, #1
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe fd28 	bl	8000168 <__aeabi_dsub>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4620      	mov	r0, r4
 800171e:	4629      	mov	r1, r5
 8001720:	f7ff f804 	bl	800072c <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800172c:	e02e      	b.n	800178c <look1_binlxpw+0x174>
  } else {
    iLeft = maxIndex - 1U;
 800172e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001730:	3b01      	subs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8001734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001736:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800173a:	3b01      	subs	r3, #1
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800174a:	f7fe fd0d 	bl	8000168 <__aeabi_dsub>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4614      	mov	r4, r2
 8001754:	461d      	mov	r5, r3
 8001756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001764:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001768:	3b01      	subs	r3, #1
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe fcf8 	bl	8000168 <__aeabi_dsub>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe ffd4 	bl	800072c <__aeabi_ddiv>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	3301      	adds	r3, #1
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
 8001796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	4413      	add	r3, r2
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7fe fcdf 	bl	8000168 <__aeabi_dsub>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017b6:	f7fe fe8f 	bl	80004d8 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	4413      	add	r3, r2
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe fccd 	bl	800016c <__adddf3>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
}
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bdb0      	pop	{r4, r5, r7, pc}

080017e0 <EngTrModel_gear_state>:

/* Function for Chart: '<Root>/ShiftLogic' */
static void EngTrModel_gear_state(const int32_T *sfEvent)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  switch (EngTrModel_DW.is_gear_state) {
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 80017ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ee:	3b01      	subs	r3, #1
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d86c      	bhi.n	80018ce <EngTrModel_gear_state+0xee>
 80017f4:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <EngTrModel_gear_state+0x1c>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	0800180d 	.word	0x0800180d
 8001800:	0800182d 	.word	0x0800182d
 8001804:	0800184b 	.word	0x0800184b
 8001808:	08001885 	.word	0x08001885
   case EngTrModel_IN_first:
    if (*sfEvent == EngTrModel_event_UP) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d155      	bne.n	80018c0 <EngTrModel_gear_state+0xe0>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 8001816:	2203      	movs	r2, #3
 8001818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 800181c:	492f      	ldr	r1, [pc, #188]	; (80018dc <EngTrModel_gear_state+0xfc>)
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001826:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 800182a:	e049      	b.n	80018c0 <EngTrModel_gear_state+0xe0>

   case EngTrModel_IN_fourth:
    if (*sfEvent == EngTrModel_event_DOWN) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d147      	bne.n	80018c4 <EngTrModel_gear_state+0xe4>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 8001834:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 8001836:	2204      	movs	r2, #4
 8001838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 800183c:	4927      	ldr	r1, [pc, #156]	; (80018dc <EngTrModel_gear_state+0xfc>)
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <EngTrModel_gear_state+0x100>)
 8001844:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 8001848:	e03c      	b.n	80018c4 <EngTrModel_gear_state+0xe4>

   case EngTrModel_IN_second:
    switch (*sfEvent) {
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00c      	beq.n	800186c <EngTrModel_gear_state+0x8c>
 8001852:	2b01      	cmp	r3, #1
 8001854:	d138      	bne.n	80018c8 <EngTrModel_gear_state+0xe8>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 8001858:	2204      	movs	r2, #4
 800185a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 800185e:	491f      	ldr	r1, [pc, #124]	; (80018dc <EngTrModel_gear_state+0xfc>)
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <EngTrModel_gear_state+0x100>)
 8001866:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 800186a:	e00a      	b.n	8001882 <EngTrModel_gear_state+0xa2>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 1.0;
 8001874:	4919      	ldr	r1, [pc, #100]	; (80018dc <EngTrModel_gear_state+0xfc>)
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <EngTrModel_gear_state+0x104>)
 800187c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 8001880:	bf00      	nop
    }
    break;
 8001882:	e021      	b.n	80018c8 <EngTrModel_gear_state+0xe8>

   case EngTrModel_IN_third:
    switch (*sfEvent) {
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00c      	beq.n	80018a6 <EngTrModel_gear_state+0xc6>
 800188c:	2b01      	cmp	r3, #1
 800188e:	d11d      	bne.n	80018cc <EngTrModel_gear_state+0xec>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_fourth;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 8001892:	2202      	movs	r2, #2
 8001894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 4.0;
 8001898:	4910      	ldr	r1, [pc, #64]	; (80018dc <EngTrModel_gear_state+0xfc>)
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <EngTrModel_gear_state+0x108>)
 80018a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80018a4:	e00b      	b.n	80018be <EngTrModel_gear_state+0xde>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <EngTrModel_gear_state+0xf8>)
 80018a8:	2203      	movs	r2, #3
 80018aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 80018ae:	490b      	ldr	r1, [pc, #44]	; (80018dc <EngTrModel_gear_state+0xfc>)
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018b8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80018bc:	bf00      	nop
    }
    break;
 80018be:	e005      	b.n	80018cc <EngTrModel_gear_state+0xec>
    break;
 80018c0:	bf00      	nop
 80018c2:	e004      	b.n	80018ce <EngTrModel_gear_state+0xee>
    break;
 80018c4:	bf00      	nop
 80018c6:	e002      	b.n	80018ce <EngTrModel_gear_state+0xee>
    break;
 80018c8:	bf00      	nop
 80018ca:	e000      	b.n	80018ce <EngTrModel_gear_state+0xee>
    break;
 80018cc:	bf00      	nop
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000258 	.word	0x20000258
 80018dc:	20000228 	.word	0x20000228
 80018e0:	40080000 	.word	0x40080000
 80018e4:	3ff00000 	.word	0x3ff00000
 80018e8:	40100000 	.word	0x40100000

080018ec <rt_powd_snf>:

real_T rt_powd_snf(real_T u0, real_T u1)
{
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80018f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  real_T y;
  real_T tmp;
  real_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 80018fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018fe:	f002 fbcd 	bl	800409c <rtIsNaN>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d106      	bne.n	8001916 <rt_powd_snf+0x2a>
 8001908:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800190c:	f002 fbc6 	bl	800409c <rtIsNaN>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <rt_powd_snf+0x36>
    y = (rtNaN);
 8001916:	4b7e      	ldr	r3, [pc, #504]	; (8001b10 <rt_powd_snf+0x224>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001920:	e0ef      	b.n	8001b02 <rt_powd_snf+0x216>
  } else {
    tmp = fabs(u0);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001932:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp_0 = fabs(u1);
 8001936:	68bc      	ldr	r4, [r7, #8]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800193e:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 8001942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001946:	f002 fb85 	bl	8004054 <rtIsInf>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d049      	beq.n	80019e4 <rt_powd_snf+0xf8>
      if (tmp == 1.0) {
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4b6f      	ldr	r3, [pc, #444]	; (8001b14 <rt_powd_snf+0x228>)
 8001956:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800195a:	f7ff f825 	bl	80009a8 <__aeabi_dcmpeq>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <rt_powd_snf+0x84>
        y = 1.0;
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <rt_powd_snf+0x228>)
 800196a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800196e:	e0c8      	b.n	8001b02 <rt_powd_snf+0x216>
      } else if (tmp > 1.0) {
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <rt_powd_snf+0x228>)
 8001976:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800197a:	f7ff f83d 	bl	80009f8 <__aeabi_dcmpgt>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d017      	beq.n	80019b4 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001990:	f7ff f832 	bl	80009f8 <__aeabi_dcmpgt>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <rt_powd_snf+0xba>
          y = (rtInf);
 800199a:	4b5f      	ldr	r3, [pc, #380]	; (8001b18 <rt_powd_snf+0x22c>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019a4:	e0ad      	b.n	8001b02 <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019b2:	e0a6      	b.n	8001b02 <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019c0:	f7ff f81a 	bl	80009f8 <__aeabi_dcmpgt>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <rt_powd_snf+0xec>
        y = 0.0;
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019d6:	e094      	b.n	8001b02 <rt_powd_snf+0x216>
      } else {
        y = (rtInf);
 80019d8:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <rt_powd_snf+0x22c>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019e2:	e08e      	b.n	8001b02 <rt_powd_snf+0x216>
      }
    } else if (tmp_0 == 0.0) {
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019f0:	f7fe ffda 	bl	80009a8 <__aeabi_dcmpeq>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <rt_powd_snf+0x11a>
      y = 1.0;
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	4b45      	ldr	r3, [pc, #276]	; (8001b14 <rt_powd_snf+0x228>)
 8001a00:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a04:	e07d      	b.n	8001b02 <rt_powd_snf+0x216>
    } else if (tmp_0 == 1.0) {
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b42      	ldr	r3, [pc, #264]	; (8001b14 <rt_powd_snf+0x228>)
 8001a0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a10:	f7fe ffca 	bl	80009a8 <__aeabi_dcmpeq>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01b      	beq.n	8001a52 <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a26:	f7fe ffe7 	bl	80009f8 <__aeabi_dcmpgt>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <rt_powd_snf+0x14e>
        y = u0;
 8001a30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a34:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a38:	e063      	b.n	8001b02 <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8001a3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a3e:	f04f 0000 	mov.w	r0, #0
 8001a42:	4934      	ldr	r1, [pc, #208]	; (8001b14 <rt_powd_snf+0x228>)
 8001a44:	f7fe fe72 	bl	800072c <__aeabi_ddiv>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a50:	e057      	b.n	8001b02 <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a5e:	f7fe ffa3 	bl	80009a8 <__aeabi_dcmpeq>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00a      	beq.n	8001a7e <rt_powd_snf+0x192>
      y = u0 * u0;
 8001a68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a70:	f7fe fd32 	bl	80004d8 <__aeabi_dmul>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a7c:	e041      	b.n	8001b02 <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <rt_powd_snf+0x230>)
 8001a84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a88:	f7fe ff8e 	bl	80009a8 <__aeabi_dcmpeq>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d011      	beq.n	8001ab6 <rt_powd_snf+0x1ca>
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a9e:	f7fe ffa1 	bl	80009e4 <__aeabi_dcmpge>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001aa8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aac:	f009 f822 	bl	800aaf4 <sqrt>
 8001ab0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001ab4:	e025      	b.n	8001b02 <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ac2:	f7fe ff7b 	bl	80009bc <__aeabi_dcmplt>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d012      	beq.n	8001af2 <rt_powd_snf+0x206>
 8001acc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ad0:	f009 f912 	bl	800acf8 <floor>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001adc:	f7fe ff8c 	bl	80009f8 <__aeabi_dcmpgt>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <rt_powd_snf+0x206>
      y = (rtNaN);
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <rt_powd_snf+0x224>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001af0:	e007      	b.n	8001b02 <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8001af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001af6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001afa:	f008 ff93 	bl	800aa24 <pow>
 8001afe:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    }
  }

  return y;
 8001b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	3730      	adds	r7, #48	; 0x30
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b10:	20000958 	.word	0x20000958
 8001b14:	3ff00000 	.word	0x3ff00000
 8001b18:	20000948 	.word	0x20000948
 8001b1c:	3fe00000 	.word	0x3fe00000

08001b20 <EngTrModel_step>:

/* Model step function */
void EngTrModel_step(void)
{
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b08c      	sub	sp, #48	; 0x30
 8001b24:	af06      	add	r7, sp, #24
  int32_T sfEvent;
  real_T InterpDown;
  real_T InterpUp;

  /* DiscreteIntegrator: '<S1>/Discrete-Time Integrator' */
  EngTrModel_B.EngineRPM = EngTrModel_DW.DiscreteTimeIntegrator_DSTATE;
 8001b26:	4b8c      	ldr	r3, [pc, #560]	; (8001d58 <EngTrModel_step+0x238>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	498b      	ldr	r1, [pc, #556]	; (8001d5c <EngTrModel_step+0x23c>)
 8001b2e:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/EngineSpeed' */
  EngTrModel_Y.EngineSpeed = EngTrModel_B.EngineRPM;
 8001b32:	4b8a      	ldr	r3, [pc, #552]	; (8001d5c <EngTrModel_step+0x23c>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	4989      	ldr	r1, [pc, #548]	; (8001d60 <EngTrModel_step+0x240>)
 8001b3a:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S8>/ToLinearSpeed'
   */
  /* Unit Conversion - from: ft/min to: mph
     Expression: output = (0.0113636*input) + (0) */
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001b3e:	4b86      	ldr	r3, [pc, #536]	; (8001d58 <EngTrModel_step+0x238>)
 8001b40:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 8001b44:	a380      	add	r3, pc, #512	; (adr r3, 8001d48 <EngTrModel_step+0x228>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fcc5 	bl	80004d8 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001b56:	a37e      	add	r3, pc, #504	; (adr r3, 8001d50 <EngTrModel_step+0x230>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fcbc 	bl	80004d8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 8001b64:	497d      	ldr	r1, [pc, #500]	; (8001d5c <EngTrModel_step+0x23c>)
 8001b66:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Chart: '<Root>/ShiftLogic' */
  sfEvent = EngTrModel_CALL_EVENT;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	607b      	str	r3, [r7, #4]
  if (EngTrModel_DW.temporalCounter_i1 < MAX_uint32_T) {
 8001b70:	4b79      	ldr	r3, [pc, #484]	; (8001d58 <EngTrModel_step+0x238>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d004      	beq.n	8001b84 <EngTrModel_step+0x64>
    EngTrModel_DW.temporalCounter_i1++;
 8001b7a:	4b77      	ldr	r3, [pc, #476]	; (8001d58 <EngTrModel_step+0x238>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	4a75      	ldr	r2, [pc, #468]	; (8001d58 <EngTrModel_step+0x238>)
 8001b82:	61d3      	str	r3, [r2, #28]
  }

  if (EngTrModel_DW.is_active_c1_EngTrModel == 0U) {
 8001b84:	4b74      	ldr	r3, [pc, #464]	; (8001d58 <EngTrModel_step+0x238>)
 8001b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d11a      	bne.n	8001bc4 <EngTrModel_step+0xa4>
    EngTrModel_DW.is_active_c1_EngTrModel = 1U;
 8001b8e:	4b72      	ldr	r3, [pc, #456]	; (8001d58 <EngTrModel_step+0x238>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2020 	strb.w	r2, [r3, #32]
    EngTrModel_DW.is_active_gear_state = 1U;
 8001b96:	4b70      	ldr	r3, [pc, #448]	; (8001d58 <EngTrModel_step+0x238>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 8001b9e:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <EngTrModel_step+0x238>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    EngTrModel_B.Gear = 1.0;
 8001ba6:	496d      	ldr	r1, [pc, #436]	; (8001d5c <EngTrModel_step+0x23c>)
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <EngTrModel_step+0x244>)
 8001bae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    EngTrModel_DW.is_active_selection_state = 1U;
 8001bb2:	4b69      	ldr	r3, [pc, #420]	; (8001d58 <EngTrModel_step+0x238>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001bba:	4b67      	ldr	r3, [pc, #412]	; (8001d58 <EngTrModel_step+0x238>)
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001bc2:	e0e4      	b.n	8001d8e <EngTrModel_step+0x26e>
  } else {
    if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001bc4:	4b64      	ldr	r3, [pc, #400]	; (8001d58 <EngTrModel_step+0x238>)
 8001bc6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <EngTrModel_step+0xb6>
      EngTrModel_gear_state(&sfEvent);
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fe05 	bl	80017e0 <EngTrModel_gear_state>
    }

    if (EngTrModel_DW.is_active_selection_state != 0U) {
 8001bd6:	4b60      	ldr	r3, [pc, #384]	; (8001d58 <EngTrModel_step+0x238>)
 8001bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80d6 	beq.w	8001d8e <EngTrModel_step+0x26e>
      /* Outputs for Function Call SubSystem: '<S2>/ComputeThreshold' */
      /* Lookup_n-D: '<S5>/InterpDown' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpDown = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001be2:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <EngTrModel_step+0x248>)
 8001be4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001be8:	4b5c      	ldr	r3, [pc, #368]	; (8001d5c <EngTrModel_step+0x23c>)
 8001bea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001bee:	2406      	movs	r4, #6
 8001bf0:	9404      	str	r4, [sp, #16]
 8001bf2:	4c5e      	ldr	r4, [pc, #376]	; (8001d6c <EngTrModel_step+0x24c>)
 8001bf4:	9403      	str	r4, [sp, #12]
 8001bf6:	4c5e      	ldr	r4, [pc, #376]	; (8001d70 <EngTrModel_step+0x250>)
 8001bf8:	9402      	str	r4, [sp, #8]
 8001bfa:	4c5e      	ldr	r4, [pc, #376]	; (8001d74 <EngTrModel_step+0x254>)
 8001bfc:	9401      	str	r4, [sp, #4]
 8001bfe:	4c5e      	ldr	r4, [pc, #376]	; (8001d78 <EngTrModel_step+0x258>)
 8001c00:	9400      	str	r4, [sp, #0]
 8001c02:	f7ff fb0d 	bl	8001220 <look2_binlxpw>
 8001c06:	e9c7 0104 	strd	r0, r1, [r7, #16]
        EngTrModel_ConstP.InterpDown_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* Lookup_n-D: '<S5>/InterpUp' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpUp = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001c0a:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <EngTrModel_step+0x248>)
 8001c0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c10:	4b52      	ldr	r3, [pc, #328]	; (8001d5c <EngTrModel_step+0x23c>)
 8001c12:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c16:	2406      	movs	r4, #6
 8001c18:	9404      	str	r4, [sp, #16]
 8001c1a:	4c54      	ldr	r4, [pc, #336]	; (8001d6c <EngTrModel_step+0x24c>)
 8001c1c:	9403      	str	r4, [sp, #12]
 8001c1e:	4c57      	ldr	r4, [pc, #348]	; (8001d7c <EngTrModel_step+0x25c>)
 8001c20:	9402      	str	r4, [sp, #8]
 8001c22:	4c54      	ldr	r4, [pc, #336]	; (8001d74 <EngTrModel_step+0x254>)
 8001c24:	9401      	str	r4, [sp, #4]
 8001c26:	4c56      	ldr	r4, [pc, #344]	; (8001d80 <EngTrModel_step+0x260>)
 8001c28:	9400      	str	r4, [sp, #0]
 8001c2a:	f7ff faf9 	bl	8001220 <look2_binlxpw>
 8001c2e:	e9c7 0102 	strd	r0, r1, [r7, #8]
        EngTrModel_ConstP.InterpUp_bp01Data, EngTrModel_ConstP.pooled2,
        EngTrModel_ConstP.InterpUp_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* End of Outputs for SubSystem: '<S2>/ComputeThreshold' */
      switch (EngTrModel_DW.is_selection_state) {
 8001c32:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <EngTrModel_step+0x238>)
 8001c34:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d05a      	beq.n	8001cf2 <EngTrModel_step+0x1d2>
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	f300 80a6 	bgt.w	8001d8e <EngTrModel_step+0x26e>
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d002      	beq.n	8001c4c <EngTrModel_step+0x12c>
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d02e      	beq.n	8001ca8 <EngTrModel_step+0x188>
 8001c4a:	e0a0      	b.n	8001d8e <EngTrModel_step+0x26e>
       case EngTrModel_IN_downshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <EngTrModel_step+0x238>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d919      	bls.n	8001c88 <EngTrModel_step+0x168>
            (EngTrModel_B.VehicleSpeed <= InterpDown)) {
 8001c54:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <EngTrModel_step+0x23c>)
 8001c56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001c5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c5e:	f7fe fec1 	bl	80009e4 <__aeabi_dcmpge>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00f      	beq.n	8001c88 <EngTrModel_step+0x168>
          sfEvent = EngTrModel_event_DOWN;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001c6c:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <EngTrModel_step+0x238>)
 8001c6e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <EngTrModel_step+0x15e>
            EngTrModel_gear_state(&sfEvent);
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fdb1 	bl	80017e0 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001c7e:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <EngTrModel_step+0x238>)
 8001c80:	2202      	movs	r2, #2
 8001c82:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001c86:	e082      	b.n	8001d8e <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
 8001c88:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <EngTrModel_step+0x23c>)
 8001c8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c92:	f7fe fe93 	bl	80009bc <__aeabi_dcmplt>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d100      	bne.n	8001c9e <EngTrModel_step+0x17e>
        break;
 8001c9c:	e077      	b.n	8001d8e <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <EngTrModel_step+0x238>)
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001ca6:	e072      	b.n	8001d8e <EngTrModel_step+0x26e>

       case EngTrModel_IN_steady_state:
        if (EngTrModel_B.VehicleSpeed > InterpUp) {
 8001ca8:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <EngTrModel_step+0x23c>)
 8001caa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cb2:	f7fe fe83 	bl	80009bc <__aeabi_dcmplt>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <EngTrModel_step+0x1ac>
          EngTrModel_DW.is_selection_state = EngTrModel_IN_upshifting;
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <EngTrModel_step+0x238>)
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          EngTrModel_DW.temporalCounter_i1 = 0U;
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <EngTrModel_step+0x238>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
            EngTrModel_DW.temporalCounter_i1 = 0U;
          }
        }
        break;
 8001cca:	e060      	b.n	8001d8e <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
 8001ccc:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <EngTrModel_step+0x23c>)
 8001cce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cd6:	f7fe fe8f 	bl	80009f8 <__aeabi_dcmpgt>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d100      	bne.n	8001ce2 <EngTrModel_step+0x1c2>
        break;
 8001ce0:	e055      	b.n	8001d8e <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <EngTrModel_step+0x238>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            EngTrModel_DW.temporalCounter_i1 = 0U;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <EngTrModel_step+0x238>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	61da      	str	r2, [r3, #28]
        break;
 8001cf0:	e04d      	b.n	8001d8e <EngTrModel_step+0x26e>

       case EngTrModel_IN_upshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <EngTrModel_step+0x238>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d919      	bls.n	8001d2e <EngTrModel_step+0x20e>
            (EngTrModel_B.VehicleSpeed >= InterpUp)) {
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <EngTrModel_step+0x23c>)
 8001cfc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001d00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d04:	f7fe fe64 	bl	80009d0 <__aeabi_dcmple>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00f      	beq.n	8001d2e <EngTrModel_step+0x20e>
          sfEvent = EngTrModel_event_UP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <EngTrModel_step+0x238>)
 8001d14:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <EngTrModel_step+0x204>
            EngTrModel_gear_state(&sfEvent);
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fd5e 	bl	80017e0 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <EngTrModel_step+0x238>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001d2c:	e02e      	b.n	8001d8c <EngTrModel_step+0x26c>
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <EngTrModel_step+0x23c>)
 8001d30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d38:	f7fe fe5e 	bl	80009f8 <__aeabi_dcmpgt>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d120      	bne.n	8001d84 <EngTrModel_step+0x264>
        break;
 8001d42:	e023      	b.n	8001d8c <EngTrModel_step+0x26c>
 8001d44:	f3af 8000 	nop.w
 8001d48:	54442d18 	.word	0x54442d18
 8001d4c:	401921fb 	.word	0x401921fb
 8001d50:	745d1746 	.word	0x745d1746
 8001d54:	3f8745d1 	.word	0x3f8745d1
 8001d58:	20000258 	.word	0x20000258
 8001d5c:	20000228 	.word	0x20000228
 8001d60:	20000290 	.word	0x20000290
 8001d64:	3ff00000 	.word	0x3ff00000
 8001d68:	20000280 	.word	0x20000280
 8001d6c:	0800c408 	.word	0x0800c408
 8001d70:	0800bbd8 	.word	0x0800bbd8
 8001d74:	0800bcc8 	.word	0x0800bcc8
 8001d78:	0800bc98 	.word	0x0800bc98
 8001d7c:	0800bce8 	.word	0x0800bce8
 8001d80:	0800bda8 	.word	0x0800bda8
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001d84:	4b84      	ldr	r3, [pc, #528]	; (8001f98 <EngTrModel_step+0x478>)
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001d8c:	bf00      	nop
  }

  /* End of Chart: '<Root>/ShiftLogic' */

  /* Lookup_n-D: '<S7>/Table' */
  InterpDown = look1_binlxpw(EngTrModel_B.Gear, EngTrModel_ConstP.pooled2,
 8001d8e:	4b83      	ldr	r3, [pc, #524]	; (8001f9c <EngTrModel_step+0x47c>)
 8001d90:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001d94:	2303      	movs	r3, #3
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4b81      	ldr	r3, [pc, #516]	; (8001fa0 <EngTrModel_step+0x480>)
 8001d9a:	4a82      	ldr	r2, [pc, #520]	; (8001fa4 <EngTrModel_step+0x484>)
 8001d9c:	f7ff fc3c 	bl	8001618 <look1_binlxpw>
 8001da0:	e9c7 0104 	strd	r0, r1, [r7, #16]
    EngTrModel_ConstP.Table_tableData, 3U);

  /* Gain: '<S4>/FinalDriveRatio2' incorporates:
   *  DiscreteIntegrator: '<S4>/WheelSpeed'
   */
  EngTrModel_B.TransmissionRPM = 3.23 * EngTrModel_DW.WheelSpeed_DSTATE;
 8001da4:	4b7c      	ldr	r3, [pc, #496]	; (8001f98 <EngTrModel_step+0x478>)
 8001da6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001daa:	a375      	add	r3, pc, #468	; (adr r3, 8001f80 <EngTrModel_step+0x460>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fb92 	bl	80004d8 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4978      	ldr	r1, [pc, #480]	; (8001f9c <EngTrModel_step+0x47c>)
 8001dba:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Product: '<S6>/SpeedRatio' incorporates:
   *  Product: '<S7>/Product1'
   */
  if( EngTrModel_B.EngineRPM != 0)
 8001dbe:	4b77      	ldr	r3, [pc, #476]	; (8001f9c <EngTrModel_step+0x47c>)
 8001dc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	f7fe fdec 	bl	80009a8 <__aeabi_dcmpeq>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d114      	bne.n	8001e00 <EngTrModel_step+0x2e0>
    InterpUp = InterpDown * EngTrModel_B.TransmissionRPM / EngTrModel_B.EngineRPM;
 8001dd6:	4b71      	ldr	r3, [pc, #452]	; (8001f9c <EngTrModel_step+0x47c>)
 8001dd8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ddc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001de0:	f7fe fb7a 	bl	80004d8 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	4b6b      	ldr	r3, [pc, #428]	; (8001f9c <EngTrModel_step+0x47c>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fc9b 	bl	800072c <__aeabi_ddiv>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001dfe:	e005      	b.n	8001e0c <EngTrModel_step+0x2ec>
  else
    InterpUp = 0.0;
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Fcn: '<S6>/Impeller' incorporates:
   *  Lookup_n-D: '<S6>/FactorK'
   *  Product: '<S6>/Quotient'
   */
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001e0c:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <EngTrModel_step+0x47c>)
 8001e0e:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001e12:	2314      	movs	r3, #20
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	4b64      	ldr	r3, [pc, #400]	; (8001fa8 <EngTrModel_step+0x488>)
 8001e18:	4a64      	ldr	r2, [pc, #400]	; (8001fac <EngTrModel_step+0x48c>)
 8001e1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e1e:	f7ff fbfb 	bl	8001618 <look1_binlxpw>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001e26:	4620      	mov	r0, r4
 8001e28:	4629      	mov	r1, r5
 8001e2a:	f7fe fc7f 	bl	800072c <__aeabi_ddiv>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e3e:	f7ff fd55 	bl	80018ec <rt_powd_snf>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4955      	ldr	r1, [pc, #340]	; (8001f9c <EngTrModel_step+0x47c>)
 8001e48:	e9c1 2306 	strd	r2, r3, [r1, #24]
                  EngTrModel_ConstP.FactorK_tableData, 20U), 2.0);

  /* Lookup_n-D: '<S6>/TorqueRatio' */
  InterpUp = look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001e4c:	2314      	movs	r3, #20
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	4b57      	ldr	r3, [pc, #348]	; (8001fb0 <EngTrModel_step+0x490>)
 8001e52:	4a56      	ldr	r2, [pc, #344]	; (8001fac <EngTrModel_step+0x48c>)
 8001e54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e58:	f7ff fbde 	bl	8001618 <look1_binlxpw>
 8001e5c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    EngTrModel_ConstP.TorqueRatio_tableData, 20U);

  /* Product: '<S7>/Product' incorporates:
   *  Product: '<S6>/Turbine'
   */
  EngTrModel_B.OutputTorque = EngTrModel_B.ImpellerTorque * InterpUp *
 8001e60:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <EngTrModel_step+0x47c>)
 8001e62:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001e66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e6a:	f7fe fb35 	bl	80004d8 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e7a:	f7fe fb2d 	bl	80004d8 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4946      	ldr	r1, [pc, #280]	; (8001f9c <EngTrModel_step+0x47c>)
 8001e84:	e9c1 2308 	strd	r2, r3, [r1, #32]
    InterpDown;

  /* Outport: '<Root>/Gear' */
  EngTrModel_Y.Gear = EngTrModel_B.Gear;
 8001e88:	4b44      	ldr	r3, [pc, #272]	; (8001f9c <EngTrModel_step+0x47c>)
 8001e8a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e8e:	4949      	ldr	r1, [pc, #292]	; (8001fb4 <EngTrModel_step+0x494>)
 8001e90:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Outport: '<Root>/VehicleSpeed' */
  EngTrModel_Y.VehicleSpeed = EngTrModel_B.VehicleSpeed;
 8001e94:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <EngTrModel_step+0x47c>)
 8001e96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e9a:	4946      	ldr	r1, [pc, #280]	; (8001fb4 <EngTrModel_step+0x494>)
 8001e9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
   *  Gain: '<S1>/EnginePlusImpellerInertia'
   *  Inport: '<Root>/Throttle'
   *  Lookup_n-D: '<S1>/EngineTorque'
   *  Sum: '<S1>/Sum'
   */
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001ea0:	4b45      	ldr	r3, [pc, #276]	; (8001fb8 <EngTrModel_step+0x498>)
 8001ea2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ea6:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <EngTrModel_step+0x47c>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	240a      	movs	r4, #10
 8001eae:	9404      	str	r4, [sp, #16]
 8001eb0:	4c42      	ldr	r4, [pc, #264]	; (8001fbc <EngTrModel_step+0x49c>)
 8001eb2:	9403      	str	r4, [sp, #12]
 8001eb4:	4c42      	ldr	r4, [pc, #264]	; (8001fc0 <EngTrModel_step+0x4a0>)
 8001eb6:	9402      	str	r4, [sp, #8]
 8001eb8:	4c42      	ldr	r4, [pc, #264]	; (8001fc4 <EngTrModel_step+0x4a4>)
 8001eba:	9401      	str	r4, [sp, #4]
 8001ebc:	4c42      	ldr	r4, [pc, #264]	; (8001fc8 <EngTrModel_step+0x4a8>)
 8001ebe:	9400      	str	r4, [sp, #0]
 8001ec0:	f7ff f9ae 	bl	8001220 <look2_binlxpw>
    (EngTrModel_U.Throttle, EngTrModel_B.EngineRPM,
     EngTrModel_ConstP.EngineTorque_bp01Data,
     EngTrModel_ConstP.EngineTorque_bp02Data,
     EngTrModel_ConstP.EngineTorque_tableData,
     EngTrModel_ConstP.EngineTorque_maxIndex, 10U) - EngTrModel_B.ImpellerTorque)
 8001ec4:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <EngTrModel_step+0x47c>)
 8001ec6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001eca:	f7fe f94d 	bl	8000168 <__aeabi_dsub>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
    * 45.472138452209627 * 0.04;
 8001ed6:	a32c      	add	r3, pc, #176	; (adr r3, 8001f88 <EngTrModel_step+0x468>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fafc 	bl	80004d8 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	a329      	add	r3, pc, #164	; (adr r3, 8001f90 <EngTrModel_step+0x470>)
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	f7fe faf3 	bl	80004d8 <__aeabi_dmul>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001efa:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <EngTrModel_step+0x478>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe f934 	bl	800016c <__adddf3>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4923      	ldr	r1, [pc, #140]	; (8001f98 <EngTrModel_step+0x478>)
 8001f0a:	e9c1 2300 	strd	r2, r3, [r1]

  /* Signum: '<S4>/Sign' */
  if (EngTrModel_B.VehicleSpeed < 0.0) {
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <EngTrModel_step+0x47c>)
 8001f10:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	f7fe fd4e 	bl	80009bc <__aeabi_dcmplt>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <EngTrModel_step+0x412>
    InterpDown = -1.0;
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <EngTrModel_step+0x4ac>)
 8001f2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f30:	e055      	b.n	8001fde <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed > 0.0) {
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <EngTrModel_step+0x47c>)
 8001f34:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	f7fe fd5a 	bl	80009f8 <__aeabi_dcmpgt>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <EngTrModel_step+0x436>
    InterpDown = 1.0;
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <EngTrModel_step+0x4b0>)
 8001f50:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f54:	e043      	b.n	8001fde <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed == 0.0) {
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <EngTrModel_step+0x47c>)
 8001f58:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	f7fe fd20 	bl	80009a8 <__aeabi_dcmpeq>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d032      	beq.n	8001fd4 <EngTrModel_step+0x4b4>
    InterpDown = 0.0;
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f7a:	e030      	b.n	8001fde <EngTrModel_step+0x4be>
 8001f7c:	f3af 8000 	nop.w
 8001f80:	3d70a3d7 	.word	0x3d70a3d7
 8001f84:	4009d70a 	.word	0x4009d70a
 8001f88:	0865b653 	.word	0x0865b653
 8001f8c:	4046bc6f 	.word	0x4046bc6f
 8001f90:	47ae147b 	.word	0x47ae147b
 8001f94:	3fa47ae1 	.word	0x3fa47ae1
 8001f98:	20000258 	.word	0x20000258
 8001f9c:	20000228 	.word	0x20000228
 8001fa0:	0800c1f0 	.word	0x0800c1f0
 8001fa4:	0800bcc8 	.word	0x0800bcc8
 8001fa8:	0800c210 	.word	0x0800c210
 8001fac:	0800c2b8 	.word	0x0800c2b8
 8001fb0:	0800c360 	.word	0x0800c360
 8001fb4:	20000290 	.word	0x20000290
 8001fb8:	20000280 	.word	0x20000280
 8001fbc:	0800c410 	.word	0x0800c410
 8001fc0:	0800bdd8 	.word	0x0800bdd8
 8001fc4:	0800c198 	.word	0x0800c198
 8001fc8:	0800c148 	.word	0x0800c148
 8001fcc:	bff00000 	.word	0xbff00000
 8001fd0:	3ff00000 	.word	0x3ff00000
  } else {
    InterpDown = (rtNaN);
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <EngTrModel_step+0x5a0>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	e9c7 2304 	strd	r2, r3, [r7, #16]
   *  Inport: '<Root>/Brake'
   *  Product: '<S4>/SignedLoad'
   *  Sum: '<S4>/Sum'
   *  Sum: '<S4>/Sum1'
   */
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001fde:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <EngTrModel_step+0x5a4>)
 8001fe0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001fe4:	a32e      	add	r3, pc, #184	; (adr r3, 80020a0 <EngTrModel_step+0x580>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f7fe fa75 	bl	80004d8 <__aeabi_dmul>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4614      	mov	r4, r2
 8001ff4:	461d      	mov	r5, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001ff6:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <EngTrModel_step+0x5a4>)
 8001ff8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002004:	f7ff fc72 	bl	80018ec <rt_powd_snf>
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8002008:	a327      	add	r3, pc, #156	; (adr r3, 80020a8 <EngTrModel_step+0x588>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	f7fe fa63 	bl	80004d8 <__aeabi_dmul>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <EngTrModel_step+0x5a8>)
 8002020:	f7fe f8a4 	bl	800016c <__adddf3>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <EngTrModel_step+0x5ac>)
 800202e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8002032:	f7fe f89b 	bl	800016c <__adddf3>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 800203e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002042:	f7fe fa49 	bl	80004d8 <__aeabi_dmul>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 800204a:	4620      	mov	r0, r4
 800204c:	4629      	mov	r1, r5
 800204e:	f7fe f88b 	bl	8000168 <__aeabi_dsub>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 800205a:	a315      	add	r3, pc, #84	; (adr r3, 80020b0 <EngTrModel_step+0x590>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe fa3a 	bl	80004d8 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	a312      	add	r3, pc, #72	; (adr r3, 80020b8 <EngTrModel_step+0x598>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe fa31 	bl	80004d8 <__aeabi_dmul>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <EngTrModel_step+0x5b0>)
 8002080:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002084:	f7fe f872 	bl	800016c <__adddf3>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4910      	ldr	r1, [pc, #64]	; (80020d0 <EngTrModel_step+0x5b0>)
 800208e:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bdb0      	pop	{r4, r5, r7, pc}
 800209a:	bf00      	nop
 800209c:	f3af 8000 	nop.w
 80020a0:	3d70a3d7 	.word	0x3d70a3d7
 80020a4:	4009d70a 	.word	0x4009d70a
 80020a8:	47ae147b 	.word	0x47ae147b
 80020ac:	3f947ae1 	.word	0x3f947ae1
 80020b0:	b3bfa695 	.word	0xb3bfa695
 80020b4:	3fb52ad1 	.word	0x3fb52ad1
 80020b8:	47ae147b 	.word	0x47ae147b
 80020bc:	3fa47ae1 	.word	0x3fa47ae1
 80020c0:	20000958 	.word	0x20000958
 80020c4:	20000228 	.word	0x20000228
 80020c8:	40440000 	.word	0x40440000
 80020cc:	20000280 	.word	0x20000280
 80020d0:	20000258 	.word	0x20000258

080020d4 <EngTrModel_initialize>:

/* Model initialize function */
void EngTrModel_initialize(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 80020d8:	2008      	movs	r0, #8
 80020da:	f001 ff83 	bl	8003fe4 <rt_InitInfAndNaN>
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <USER_GPIO_Define>:
#include "main.h"

// Define a pin

void USER_GPIO_Define( uint8_t port, uint8_t pin, uint8_t direction, uint8_t option )
{
 80020e4:	b490      	push	{r4, r7}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4604      	mov	r4, r0
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	4603      	mov	r3, r0
 80020f8:	71bb      	strb	r3, [r7, #6]
 80020fa:	460b      	mov	r3, r1
 80020fc:	717b      	strb	r3, [r7, #5]
 80020fe:	4613      	mov	r3, r2
 8002100:	713b      	strb	r3, [r7, #4]
  volatile uint32_t * CR;
  uint8_t actual_pin = pin;
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	72fb      	strb	r3, [r7, #11]
  uint8_t offset = 0x00;
 8002106:	2300      	movs	r3, #0
 8002108:	72bb      	strb	r3, [r7, #10]

  if( pin > 7 ) {
 800210a:	79bb      	ldrb	r3, [r7, #6]
 800210c:	2b07      	cmp	r3, #7
 800210e:	d904      	bls.n	800211a <USER_GPIO_Define+0x36>
      actual_pin -= 8;
 8002110:	7afb      	ldrb	r3, [r7, #11]
 8002112:	3b08      	subs	r3, #8
 8002114:	72fb      	strb	r3, [r7, #11]
      offset = 0x01;
 8002116:	2301      	movs	r3, #1
 8002118:	72bb      	strb	r3, [r7, #10]
  }

  if( port == 0 )
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <USER_GPIO_Define+0x58>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPAEN;			// IO port A clock enable
 8002120:	4b42      	ldr	r3, [pc, #264]	; (800222c <USER_GPIO_Define+0x148>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	4a41      	ldr	r2, [pc, #260]	; (800222c <USER_GPIO_Define+0x148>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOA->CRL + offset);
 800212c:	7abb      	ldrb	r3, [r7, #10]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002134:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e042      	b.n	80021c2 <USER_GPIO_Define+0xde>
  }
  else if( port == 1 )
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10d      	bne.n	800215e <USER_GPIO_Define+0x7a>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPBEN;			// IO port B clock enable
 8002142:	4b3a      	ldr	r3, [pc, #232]	; (800222c <USER_GPIO_Define+0x148>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	4a39      	ldr	r2, [pc, #228]	; (800222c <USER_GPIO_Define+0x148>)
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOB->CRL + offset);
 800214e:	7abb      	ldrb	r3, [r7, #10]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002156:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	e031      	b.n	80021c2 <USER_GPIO_Define+0xde>
  }
  else if ( port == 2 )
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d10d      	bne.n	8002180 <USER_GPIO_Define+0x9c>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPCEN;			// IO port C clock enable
 8002164:	4b31      	ldr	r3, [pc, #196]	; (800222c <USER_GPIO_Define+0x148>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a30      	ldr	r2, [pc, #192]	; (800222c <USER_GPIO_Define+0x148>)
 800216a:	f043 0310 	orr.w	r3, r3, #16
 800216e:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOC->CRL + offset);
 8002170:	7abb      	ldrb	r3, [r7, #10]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002178:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e020      	b.n	80021c2 <USER_GPIO_Define+0xde>
  }
  else if ( port == 3 )
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d10d      	bne.n	80021a2 <USER_GPIO_Define+0xbe>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPDEN;			// IO port D clock enable
 8002186:	4b29      	ldr	r3, [pc, #164]	; (800222c <USER_GPIO_Define+0x148>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	4a28      	ldr	r2, [pc, #160]	; (800222c <USER_GPIO_Define+0x148>)
 800218c:	f043 0320 	orr.w	r3, r3, #32
 8002190:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOD->CRL + offset);
 8002192:	7abb      	ldrb	r3, [r7, #10]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800219a:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e00f      	b.n	80021c2 <USER_GPIO_Define+0xde>
  }
  else if( port == 4 )
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d10c      	bne.n	80021c2 <USER_GPIO_Define+0xde>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPEEN;			// IO port E clock enable
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <USER_GPIO_Define+0x148>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	4a1f      	ldr	r2, [pc, #124]	; (800222c <USER_GPIO_Define+0x148>)
 80021ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b2:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOE->CRL + offset);
 80021b4:	7abb      	ldrb	r3, [r7, #10]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021bc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  if( ( direction == 1 || direction == 2 || direction == 3 ) && ( option == 2 || option == 3 ) )
 80021c2:	797b      	ldrb	r3, [r7, #5]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d005      	beq.n	80021d4 <USER_GPIO_Define+0xf0>
 80021c8:	797b      	ldrb	r3, [r7, #5]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d002      	beq.n	80021d4 <USER_GPIO_Define+0xf0>
 80021ce:	797b      	ldrb	r3, [r7, #5]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d10b      	bne.n	80021ec <USER_GPIO_Define+0x108>
 80021d4:	793b      	ldrb	r3, [r7, #4]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d002      	beq.n	80021e0 <USER_GPIO_Define+0xfc>
 80021da:	793b      	ldrb	r3, [r7, #4]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d105      	bne.n	80021ec <USER_GPIO_Define+0x108>
  {
      RCC->APB2ENR	|=	RCC_APB2ENR_AFIOEN;		// Alternate function I/O clock enable
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <USER_GPIO_Define+0x148>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <USER_GPIO_Define+0x148>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6193      	str	r3, [r2, #24]
  }

  *CR	&=	~( 0xF << (actual_pin * 4) );			// Reset the target pin
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	7afa      	ldrb	r2, [r7, #11]
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	210f      	movs	r1, #15
 80021f6:	fa01 f202 	lsl.w	r2, r1, r2
 80021fa:	43d2      	mvns	r2, r2
 80021fc:	401a      	ands	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	601a      	str	r2, [r3, #0]
  *CR	|=	( direction << (actual_pin * 4) )		// Set up the direction and the option for the pin
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	7979      	ldrb	r1, [r7, #5]
 8002208:	7afa      	ldrb	r2, [r7, #11]
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	4091      	lsls	r1, r2
	|	( option << (actual_pin * 4 + 2) );
 800220e:	7938      	ldrb	r0, [r7, #4]
 8002210:	7afa      	ldrb	r2, [r7, #11]
 8002212:	0092      	lsls	r2, r2, #2
 8002214:	3202      	adds	r2, #2
 8002216:	fa00 f202 	lsl.w	r2, r0, r2
 800221a:	430a      	orrs	r2, r1
  *CR	|=	( direction << (actual_pin * 4) )		// Set up the direction and the option for the pin
 800221c:	431a      	orrs	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bc90      	pop	{r4, r7}
 800222a:	4770      	bx	lr
 800222c:	40021000 	.word	0x40021000

08002230 <USER_GPIO_Read>:

// Read a pin

uint8_t USER_GPIO_Read( uint8_t port, uint8_t pin )
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	460a      	mov	r2, r1
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	4613      	mov	r3, r2
 800223e:	71bb      	strb	r3, [r7, #6]
  volatile uint32_t * IDR;
  int state;

  if( port == 0 )
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <USER_GPIO_Read+0x1c>
  {
      IDR = (volatile uint32_t *) (&GPIOA->IDR);
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <USER_GPIO_Read+0x70>)
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e016      	b.n	800227a <USER_GPIO_Read+0x4a>
  }
  else if( port == 1 )
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <USER_GPIO_Read+0x28>
  {
      IDR = (volatile uint32_t *) (&GPIOB->IDR);
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <USER_GPIO_Read+0x74>)
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	e010      	b.n	800227a <USER_GPIO_Read+0x4a>
  }
  else if( port == 2 )
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d102      	bne.n	8002264 <USER_GPIO_Read+0x34>
  {
      IDR = (volatile uint32_t *) (&GPIOC->IDR);
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <USER_GPIO_Read+0x78>)
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e00a      	b.n	800227a <USER_GPIO_Read+0x4a>
  }
  else if( port == 3 )
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d102      	bne.n	8002270 <USER_GPIO_Read+0x40>
  {
      IDR = (volatile uint32_t *) (&GPIOD->IDR);
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <USER_GPIO_Read+0x7c>)
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	e004      	b.n	800227a <USER_GPIO_Read+0x4a>
  }
  else if( port == 4 )
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	2b04      	cmp	r3, #4
 8002274:	d101      	bne.n	800227a <USER_GPIO_Read+0x4a>
  {
      IDR = (volatile uint32_t *) (&GPIOE->IDR);
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <USER_GPIO_Read+0x80>)
 8002278:	60fb      	str	r3, [r7, #12]
  }

  state = ( ( *IDR & ( 1 << pin ) ) >> pin );
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	79ba      	ldrb	r2, [r7, #6]
 8002280:	2101      	movs	r1, #1
 8002282:	fa01 f202 	lsl.w	r2, r1, r2
 8002286:	401a      	ands	r2, r3
 8002288:	79bb      	ldrb	r3, [r7, #6]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	60bb      	str	r3, [r7, #8]
  return state;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	b2db      	uxtb	r3, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40010808 	.word	0x40010808
 80022a4:	40010c08 	.word	0x40010c08
 80022a8:	40011008 	.word	0x40011008
 80022ac:	40011408 	.word	0x40011408
 80022b0:	40011808 	.word	0x40011808

080022b4 <USER_GPIO_Write>:

// Write a pin

void USER_GPIO_Write(uint8_t port, uint8_t pin, uint8_t state)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
 80022be:	460b      	mov	r3, r1
 80022c0:	71bb      	strb	r3, [r7, #6]
 80022c2:	4613      	mov	r3, r2
 80022c4:	717b      	strb	r3, [r7, #5]
  volatile uint32_t * ODR;

  if( port == 0 ) {
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <USER_GPIO_Write+0x1e>
      ODR = (volatile uint32_t *) (&GPIOA->ODR);
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <USER_GPIO_Write+0x84>)
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e016      	b.n	8002300 <USER_GPIO_Write+0x4c>
  }
  else if( port == 1 )
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d102      	bne.n	80022de <USER_GPIO_Write+0x2a>
  {
      ODR = (volatile uint32_t *) (&GPIOB->ODR);
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <USER_GPIO_Write+0x88>)
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	e010      	b.n	8002300 <USER_GPIO_Write+0x4c>
  }
  else if( port == 2 )
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d102      	bne.n	80022ea <USER_GPIO_Write+0x36>
  {
      ODR = (volatile uint32_t *) (&GPIOC->ODR);
 80022e4:	4b16      	ldr	r3, [pc, #88]	; (8002340 <USER_GPIO_Write+0x8c>)
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e00a      	b.n	8002300 <USER_GPIO_Write+0x4c>
  }
  else if( port == 3 )
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d102      	bne.n	80022f6 <USER_GPIO_Write+0x42>
  {
      ODR = (volatile uint32_t *) (&GPIOD->ODR);
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <USER_GPIO_Write+0x90>)
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e004      	b.n	8002300 <USER_GPIO_Write+0x4c>
  }
  else if( port == 4 )
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d101      	bne.n	8002300 <USER_GPIO_Write+0x4c>
  {
      ODR = (volatile uint32_t *) (&GPIOE->ODR);
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <USER_GPIO_Write+0x94>)
 80022fe:	60fb      	str	r3, [r7, #12]
  }

  state ? ( *ODR |= ( state << pin ) ) : ( *ODR &= ~( 1 << pin ) );
 8002300:	797b      	ldrb	r3, [r7, #5]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <USER_GPIO_Write+0x66>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	7979      	ldrb	r1, [r7, #5]
 800230c:	79ba      	ldrb	r2, [r7, #6]
 800230e:	fa01 f202 	lsl.w	r2, r1, r2
 8002312:	431a      	orrs	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	e009      	b.n	800232e <USER_GPIO_Write+0x7a>
  state ? ( *ODR |= ( state << pin ) ) : ( *ODR &= ~( 1 << pin ) );
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	79ba      	ldrb	r2, [r7, #6]
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	43d2      	mvns	r2, r2
 8002328:	401a      	ands	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	601a      	str	r2, [r3, #0]
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	4001080c 	.word	0x4001080c
 800233c:	40010c0c 	.word	0x40010c0c
 8002340:	4001100c 	.word	0x4001100c
 8002344:	4001140c 	.word	0x4001140c
 8002348:	4001180c 	.word	0x4001180c

0800234c <USER_GPIO_Toggle>:

// Toggle a pin

void USER_GPIO_Toggle(uint8_t port, uint8_t pin)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	460a      	mov	r2, r1
 8002356:	71fb      	strb	r3, [r7, #7]
 8002358:	4613      	mov	r3, r2
 800235a:	71bb      	strb	r3, [r7, #6]
  if( USER_GPIO_Read(port, pin) ) {
 800235c:	79ba      	ldrb	r2, [r7, #6]
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff64 	bl	8002230 <USER_GPIO_Read>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <USER_GPIO_Toggle+0x30>
      USER_GPIO_Write(port, pin, 0);
 800236e:	79b9      	ldrb	r1, [r7, #6]
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	2200      	movs	r2, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff9d 	bl	80022b4 <USER_GPIO_Write>
  }
  else {
      USER_GPIO_Write(port, pin, 1);
  }
}
 800237a:	e005      	b.n	8002388 <USER_GPIO_Toggle+0x3c>
      USER_GPIO_Write(port, pin, 1);
 800237c:	79b9      	ldrb	r1, [r7, #6]
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	2201      	movs	r2, #1
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff96 	bl	80022b4 <USER_GPIO_Write>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <USER_I2C_Init>:
#include "GPIO.h"

// Initialize I2C

void USER_I2C_Init( uint8_t I2C, uint8_t speed_mode )
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	460a      	mov	r2, r1
 800239a:	71fb      	strb	r3, [r7, #7]
 800239c:	4613      	mov	r3, r2
 800239e:	71bb      	strb	r3, [r7, #6]
  if( I2C == 0 )
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d12d      	bne.n	8002402 <USER_I2C_Init+0x72>
  {
      RCC->APB1ENR 	|=	RCC_APB1ENR_I2C1EN;	// I2C1 clock enable
 80023a6:	4b31      	ldr	r3, [pc, #196]	; (800246c <USER_I2C_Init+0xdc>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4a30      	ldr	r2, [pc, #192]	; (800246c <USER_I2C_Init+0xdc>)
 80023ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023b0:	61d3      	str	r3, [r2, #28]

      USER_GPIO_Define( PORTB, 6, OUT_50, OUT_AF_OD );	// PB6 I2C1_SCL
 80023b2:	2303      	movs	r3, #3
 80023b4:	2203      	movs	r2, #3
 80023b6:	2106      	movs	r1, #6
 80023b8:	2001      	movs	r0, #1
 80023ba:	f7ff fe93 	bl	80020e4 <USER_GPIO_Define>
      USER_GPIO_Define( PORTB, 7, OUT_50, OUT_AF_OD );	// PB7 I2C1_SDA
 80023be:	2303      	movs	r3, #3
 80023c0:	2203      	movs	r2, #3
 80023c2:	2107      	movs	r1, #7
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7ff fe8d 	bl	80020e4 <USER_GPIO_Define>

      I2C1->CR1		|=	I2C_CR1_SWRST;		// Software reset
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <USER_I2C_Init+0xe0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a28      	ldr	r2, [pc, #160]	; (8002470 <USER_I2C_Init+0xe0>)
 80023d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d4:	6013      	str	r3, [r2, #0]
      I2C1->CR1		&=	~I2C_CR1_SWRST;
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <USER_I2C_Init+0xe0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a25      	ldr	r2, [pc, #148]	; (8002470 <USER_I2C_Init+0xe0>)
 80023dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023e0:	6013      	str	r3, [r2, #0]

      I2C1->CR2		=	I2C_CR2_FREQ;		// Peripheral clock frequency of 8 MHz
 80023e2:	4b23      	ldr	r3, [pc, #140]	; (8002470 <USER_I2C_Init+0xe0>)
 80023e4:	223f      	movs	r2, #63	; 0x3f
 80023e6:	605a      	str	r2, [r3, #4]

      I2C1->CCR		=	speed_mode;		// Clock control register in Fm/Sm mode
 80023e8:	4a21      	ldr	r2, [pc, #132]	; (8002470 <USER_I2C_Init+0xe0>)
 80023ea:	79bb      	ldrb	r3, [r7, #6]
 80023ec:	61d3      	str	r3, [r2, #28]
      I2C1->TRISE	=	I2C_TRISE_TRISE;	// Maximum rise time in Fm/Sm mode (Master mode)
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <USER_I2C_Init+0xe0>)
 80023f0:	223f      	movs	r2, #63	; 0x3f
 80023f2:	621a      	str	r2, [r3, #32]

      I2C1->CR1		|=	I2C_CR1_PE;		// Peripheral enable
 80023f4:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <USER_I2C_Init+0xe0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1d      	ldr	r2, [pc, #116]	; (8002470 <USER_I2C_Init+0xe0>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6013      	str	r3, [r2, #0]
      I2C2->TRISE	=	I2C_TRISE_TRISE;

      I2C2->CR1		|=	I2C_CR1_PE;
  }

}
 8002400:	e02f      	b.n	8002462 <USER_I2C_Init+0xd2>
  else if( I2C == 1 )
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d12c      	bne.n	8002462 <USER_I2C_Init+0xd2>
      RCC->APB1ENR 	|=	RCC_APB1ENR_I2C2EN;	// I2C2 clock enable
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <USER_I2C_Init+0xdc>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	4a17      	ldr	r2, [pc, #92]	; (800246c <USER_I2C_Init+0xdc>)
 800240e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002412:	61d3      	str	r3, [r2, #28]
      USER_GPIO_Define( PORTB, 10, OUT_50, OUT_AF_OD );	// PB10 I2C2_SCL
 8002414:	2303      	movs	r3, #3
 8002416:	2203      	movs	r2, #3
 8002418:	210a      	movs	r1, #10
 800241a:	2001      	movs	r0, #1
 800241c:	f7ff fe62 	bl	80020e4 <USER_GPIO_Define>
      USER_GPIO_Define( PORTB, 11, OUT_50, OUT_AF_OD );	// PB11 I2C2_SDA
 8002420:	2303      	movs	r3, #3
 8002422:	2203      	movs	r2, #3
 8002424:	210b      	movs	r1, #11
 8002426:	2001      	movs	r0, #1
 8002428:	f7ff fe5c 	bl	80020e4 <USER_GPIO_Define>
      I2C2->CR1		|=	I2C_CR1_SWRST;
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <USER_I2C_Init+0xe4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a10      	ldr	r2, [pc, #64]	; (8002474 <USER_I2C_Init+0xe4>)
 8002432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002436:	6013      	str	r3, [r2, #0]
      I2C2->CR1		&=	~I2C_CR1_SWRST;
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <USER_I2C_Init+0xe4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <USER_I2C_Init+0xe4>)
 800243e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002442:	6013      	str	r3, [r2, #0]
      I2C2->CR2		=	I2C_CR2_FREQ;
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <USER_I2C_Init+0xe4>)
 8002446:	223f      	movs	r2, #63	; 0x3f
 8002448:	605a      	str	r2, [r3, #4]
      I2C2->CCR		=	speed_mode;
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <USER_I2C_Init+0xe4>)
 800244c:	79bb      	ldrb	r3, [r7, #6]
 800244e:	61d3      	str	r3, [r2, #28]
      I2C2->TRISE	=	I2C_TRISE_TRISE;
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <USER_I2C_Init+0xe4>)
 8002452:	223f      	movs	r2, #63	; 0x3f
 8002454:	621a      	str	r2, [r3, #32]
      I2C2->CR1		|=	I2C_CR1_PE;
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <USER_I2C_Init+0xe4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a06      	ldr	r2, [pc, #24]	; (8002474 <USER_I2C_Init+0xe4>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6013      	str	r3, [r2, #0]
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	40005400 	.word	0x40005400
 8002474:	40005800 	.word	0x40005800

08002478 <USER_I2C_Start>:

// Start I2C

void USER_I2C_Start( uint8_t I2C )
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]

  if( I2C == 0 )
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10d      	bne.n	80024a4 <USER_I2C_Start+0x2c>
  {
      I2C1->CR1		|=	I2C_CR1_START;		// Start generation
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <USER_I2C_Start+0x58>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <USER_I2C_Start+0x58>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002492:	6013      	str	r3, [r2, #0]
      while (! ( I2C1->SR1 & I2C_SR1_SB) );		// Set when a Start condition generated
 8002494:	bf00      	nop
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <USER_I2C_Start+0x58>)
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f9      	beq.n	8002496 <USER_I2C_Start+0x1e>
  {
      I2C2->CR1		|=	I2C_CR1_START;
      while (! ( I2C2->SR1 & I2C_SR1_SB ) );
  }

}
 80024a2:	e00f      	b.n	80024c4 <USER_I2C_Start+0x4c>
  else if ( I2C == 1 )
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d10c      	bne.n	80024c4 <USER_I2C_Start+0x4c>
      I2C2->CR1		|=	I2C_CR1_START;
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <USER_I2C_Start+0x5c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <USER_I2C_Start+0x5c>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b4:	6013      	str	r3, [r2, #0]
      while (! ( I2C2->SR1 & I2C_SR1_SB ) );
 80024b6:	bf00      	nop
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <USER_I2C_Start+0x5c>)
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f9      	beq.n	80024b8 <USER_I2C_Start+0x40>
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40005400 	.word	0x40005400
 80024d4:	40005800 	.word	0x40005800

080024d8 <USER_I2C_Address>:

// Send the address + R or W via I2C

void USER_I2C_Address( uint8_t I2C, uint8_t address, uint8_t RW )
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
 80024e2:	460b      	mov	r3, r1
 80024e4:	71bb      	strb	r3, [r7, #6]
 80024e6:	4613      	mov	r3, r2
 80024e8:	717b      	strb	r3, [r7, #5]
  volatile uint16_t tmp;

  if( I2C == 0 )
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d122      	bne.n	8002536 <USER_I2C_Address+0x5e>
  {
      I2C1->DR = ( address | RW );
 80024f0:	79ba      	ldrb	r2, [r7, #6]
 80024f2:	797b      	ldrb	r3, [r7, #5]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	4b26      	ldr	r3, [pc, #152]	; (8002594 <USER_I2C_Address+0xbc>)
 80024fa:	611a      	str	r2, [r3, #16]

      while( !( I2C1->SR1 & I2C_SR1_ADDR ) );		// ADDR flag is zero while address is mismatched or not received
 80024fc:	bf00      	nop
 80024fe:	4b25      	ldr	r3, [pc, #148]	; (8002594 <USER_I2C_Address+0xbc>)
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f9      	beq.n	80024fe <USER_I2C_Address+0x26>
      while ( I2C1->SR1 & I2C_SR1_ADDR )		// ADDR flag is set when received address matched
 800250a:	e00d      	b.n	8002528 <USER_I2C_Address+0x50>
      {
	  tmp = I2C1->SR1;				// Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag
 800250c:	4b21      	ldr	r3, [pc, #132]	; (8002594 <USER_I2C_Address+0xbc>)
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	b29b      	uxth	r3, r3
 8002512:	81fb      	strh	r3, [r7, #14]
	  tmp = I2C1->SR2;
 8002514:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <USER_I2C_Address+0xbc>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	b29b      	uxth	r3, r3
 800251a:	81fb      	strh	r3, [r7, #14]

	  if( !( I2C1->SR1 & I2C_SR1_ADDR ) )
 800251c:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <USER_I2C_Address+0xbc>)
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d02c      	beq.n	8002582 <USER_I2C_Address+0xaa>
      while ( I2C1->SR1 & I2C_SR1_ADDR )		// ADDR flag is set when received address matched
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <USER_I2C_Address+0xbc>)
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1eb      	bne.n	800250c <USER_I2C_Address+0x34>
	      break;
	  }
      }
  }

}
 8002534:	e028      	b.n	8002588 <USER_I2C_Address+0xb0>
  else if ( I2C == 1 )
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d125      	bne.n	8002588 <USER_I2C_Address+0xb0>
      I2C2->DR = ( address | RW );
 800253c:	79ba      	ldrb	r2, [r7, #6]
 800253e:	797b      	ldrb	r3, [r7, #5]
 8002540:	4313      	orrs	r3, r2
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <USER_I2C_Address+0xc0>)
 8002546:	611a      	str	r2, [r3, #16]
      while( !( I2C2->SR1 & I2C_SR1_ADDR ) );
 8002548:	bf00      	nop
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <USER_I2C_Address+0xc0>)
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f9      	beq.n	800254a <USER_I2C_Address+0x72>
      while ( I2C2->SR1 & I2C_SR1_ADDR )
 8002556:	e00d      	b.n	8002574 <USER_I2C_Address+0x9c>
	  tmp = I2C2->SR1;
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <USER_I2C_Address+0xc0>)
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	b29b      	uxth	r3, r3
 800255e:	81fb      	strh	r3, [r7, #14]
	  tmp = I2C2->SR2;
 8002560:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <USER_I2C_Address+0xc0>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	b29b      	uxth	r3, r3
 8002566:	81fb      	strh	r3, [r7, #14]
	  if( !( I2C2->SR1 & I2C_SR1_ADDR ) )
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <USER_I2C_Address+0xc0>)
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <USER_I2C_Address+0xae>
      while ( I2C2->SR1 & I2C_SR1_ADDR )
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <USER_I2C_Address+0xc0>)
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1eb      	bne.n	8002558 <USER_I2C_Address+0x80>
}
 8002580:	e002      	b.n	8002588 <USER_I2C_Address+0xb0>
	      break;
 8002582:	bf00      	nop
 8002584:	e000      	b.n	8002588 <USER_I2C_Address+0xb0>
	      break;
 8002586:	bf00      	nop
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40005400 	.word	0x40005400
 8002598:	40005800 	.word	0x40005800

0800259c <USER_I2C_Data>:

// Send data via I2C

void USER_I2C_Data( uint8_t I2C, uint8_t data )
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	460a      	mov	r2, r1
 80025a6:	71fb      	strb	r3, [r7, #7]
 80025a8:	4613      	mov	r3, r2
 80025aa:	71bb      	strb	r3, [r7, #6]

  if( I2C == 0 )
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d111      	bne.n	80025d6 <USER_I2C_Data+0x3a>
  {
      while( !( I2C1->SR1 & I2C_SR1_TXE ) );		// While data register not empty
 80025b2:	bf00      	nop
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <USER_I2C_Data+0x6c>)
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f9      	beq.n	80025b4 <USER_I2C_Data+0x18>
      I2C1->DR = data;
 80025c0:	4a11      	ldr	r2, [pc, #68]	; (8002608 <USER_I2C_Data+0x6c>)
 80025c2:	79bb      	ldrb	r3, [r7, #6]
 80025c4:	6113      	str	r3, [r2, #16]
      while( !( I2C1->SR1 & I2C_SR1_TXE ) );
 80025c6:	bf00      	nop
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <USER_I2C_Data+0x6c>)
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f9      	beq.n	80025c8 <USER_I2C_Data+0x2c>
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );		// While data register not empty
      I2C2->DR = data;
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );
  }

}
 80025d4:	e013      	b.n	80025fe <USER_I2C_Data+0x62>
  else if ( I2C == 1 )
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d110      	bne.n	80025fe <USER_I2C_Data+0x62>
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );		// While data register not empty
 80025dc:	bf00      	nop
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <USER_I2C_Data+0x70>)
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f9      	beq.n	80025de <USER_I2C_Data+0x42>
      I2C2->DR = data;
 80025ea:	4a08      	ldr	r2, [pc, #32]	; (800260c <USER_I2C_Data+0x70>)
 80025ec:	79bb      	ldrb	r3, [r7, #6]
 80025ee:	6113      	str	r3, [r2, #16]
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );
 80025f0:	bf00      	nop
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <USER_I2C_Data+0x70>)
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f9      	beq.n	80025f2 <USER_I2C_Data+0x56>
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	40005400 	.word	0x40005400
 800260c:	40005800 	.word	0x40005800

08002610 <USER_I2C_Stop>:

// Stop I2C

void USER_I2C_Stop( uint8_t I2C )
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t tmp;

  if( I2C == 0 )
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10e      	bne.n	800263e <USER_I2C_Stop+0x2e>
  {
      tmp = I2C1->SR1;
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <USER_I2C_Stop+0x5c>)
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	b29b      	uxth	r3, r3
 8002626:	81fb      	strh	r3, [r7, #14]
      tmp = I2C1->SR2;
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <USER_I2C_Stop+0x5c>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	b29b      	uxth	r3, r3
 800262e:	81fb      	strh	r3, [r7, #14]
      I2C1->CR1		|=	I2C_CR1_STOP;		// Stop generation
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <USER_I2C_Stop+0x5c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0d      	ldr	r2, [pc, #52]	; (800266c <USER_I2C_Stop+0x5c>)
 8002636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263a:	6013      	str	r3, [r2, #0]
      tmp = I2C2->SR1;
      tmp = I2C2->SR2;
      I2C2->CR1		|=	I2C_CR1_STOP;		// Stop generation
  }

}
 800263c:	e010      	b.n	8002660 <USER_I2C_Stop+0x50>
  else if ( I2C == 1 )
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d10d      	bne.n	8002660 <USER_I2C_Stop+0x50>
      tmp = I2C2->SR1;
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <USER_I2C_Stop+0x60>)
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	b29b      	uxth	r3, r3
 800264a:	81fb      	strh	r3, [r7, #14]
      tmp = I2C2->SR2;
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <USER_I2C_Stop+0x60>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	b29b      	uxth	r3, r3
 8002652:	81fb      	strh	r3, [r7, #14]
      I2C2->CR1		|=	I2C_CR1_STOP;		// Stop generation
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <USER_I2C_Stop+0x60>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a05      	ldr	r2, [pc, #20]	; (8002670 <USER_I2C_Stop+0x60>)
 800265a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265e:	6013      	str	r3, [r2, #0]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40005400 	.word	0x40005400
 8002670:	40005800 	.word	0x40005800

08002674 <USER_LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

// Function that initializes the LCD to 4 bits

void USER_LCD_Init(void){
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0

	// RCC_APB2ENR modified to IO port C clock enable

	RCC->APB2ENR	|=	RCC_APB2ENR_IOPCEN;	// To set IOPCEN bit
 800267a:	4b66      	ldr	r3, [pc, #408]	; (8002814 <USER_LCD_Init+0x1a0>)
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	4a65      	ldr	r2, [pc, #404]	; (8002814 <USER_LCD_Init+0x1a0>)
 8002680:	f043 0310 	orr.w	r3, r3, #16
 8002684:	6193      	str	r3, [r2, #24]

	int8_t const *p;

	// Configuration of all pins to the LCD as general-purpose output push-pull, 10 MHz speed

	GPIOC->CRL	&=	~( 0x3UL << 30U ) & ~( 0x2UL << 28U )
 8002686:	4b64      	ldr	r3, [pc, #400]	; (8002818 <USER_LCD_Init+0x1a4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a63      	ldr	r2, [pc, #396]	; (8002818 <USER_LCD_Init+0x1a4>)
 800268c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002690:	6013      	str	r3, [r2, #0]
			& 	~( 0x3UL << 26U ) & ~( 0x2UL << 24U );
	GPIOC->CRL 	|= 	 ( 0x1UL << 28U )
 8002692:	4b61      	ldr	r3, [pc, #388]	; (8002818 <USER_LCD_Init+0x1a4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a60      	ldr	r2, [pc, #384]	; (8002818 <USER_LCD_Init+0x1a4>)
 8002698:	f043 5388 	orr.w	r3, r3, #285212672	; 0x11000000
 800269c:	6013      	str	r3, [r2, #0]
			|  	 ( 0x1UL << 24U );
	GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U )
 800269e:	4b5e      	ldr	r3, [pc, #376]	; (8002818 <USER_LCD_Init+0x1a4>)
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	495d      	ldr	r1, [pc, #372]	; (8002818 <USER_LCD_Init+0x1a4>)
 80026a4:	4b5d      	ldr	r3, [pc, #372]	; (800281c <USER_LCD_Init+0x1a8>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
			& 	~( 0x3UL << 14U ) & ~( 0x2UL << 12U )
			&	~( 0x3UL << 10U ) & ~( 0x2UL <<  8U )
			& 	~( 0x3UL <<  6U ) & ~( 0x2UL <<  4U )
			& 	~( 0x3UL <<  2U ) & ~( 0x2UL <<  0U );
	GPIOC->CRH	|= 	 ( 0x1UL << 16U )
 80026aa:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <USER_LCD_Init+0x1a4>)
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	495a      	ldr	r1, [pc, #360]	; (8002818 <USER_LCD_Init+0x1a4>)
 80026b0:	4b5b      	ldr	r3, [pc, #364]	; (8002820 <USER_LCD_Init+0x1ac>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
			|  	 ( 0x1UL << 12U )
			| 	 ( 0x1UL <<  8U )
			|  	 ( 0x1UL <<  4U )
			|  	 ( 0x1UL <<  0U );

	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 80026b6:	4b58      	ldr	r3, [pc, #352]	; (8002818 <USER_LCD_Init+0x1a4>)
 80026b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80026bc:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_LOW;
 80026be:	4b56      	ldr	r3, [pc, #344]	; (8002818 <USER_LCD_Init+0x1a4>)
 80026c0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80026c4:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_LOW;
 80026c6:	4b54      	ldr	r3, [pc, #336]	; (8002818 <USER_LCD_Init+0x1a4>)
 80026c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026cc:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 80026ce:	4b52      	ldr	r3, [pc, #328]	; (8002818 <USER_LCD_Init+0x1a4>)
 80026d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d4:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_LOW;
 80026d6:	4b50      	ldr	r3, [pc, #320]	; (8002818 <USER_LCD_Init+0x1a4>)
 80026d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026dc:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80026de:	4b4e      	ldr	r3, [pc, #312]	; (8002818 <USER_LCD_Init+0x1a4>)
 80026e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026e4:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80026e6:	4b4c      	ldr	r3, [pc, #304]	; (8002818 <USER_LCD_Init+0x1a4>)
 80026e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ec:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_50MS, TIM_CNT_50MS );		//	50 ms
 80026ee:	22e6      	movs	r2, #230	; 0xe6
 80026f0:	2130      	movs	r1, #48	; 0x30
 80026f2:	2000      	movs	r0, #0
 80026f4:	f000 fd5e 	bl	80031b4 <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 80026f8:	4b47      	ldr	r3, [pc, #284]	; (8002818 <USER_LCD_Init+0x1a4>)
 80026fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fe:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8002700:	4b45      	ldr	r3, [pc, #276]	; (8002818 <USER_LCD_Init+0x1a4>)
 8002702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002706:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002708:	4b43      	ldr	r3, [pc, #268]	; (8002818 <USER_LCD_Init+0x1a4>)
 800270a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800270e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8002710:	4b41      	ldr	r3, [pc, #260]	; (8002818 <USER_LCD_Init+0x1a4>)
 8002712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002716:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002718:	f000 f9a6 	bl	8002a68 <LCD_Pulse_EN>

	USER_TIM_Delay( TIM_2, TIM_PSC_5MS, TIM_CNT_5MS );		//	5 ms
 800271c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002720:	2104      	movs	r1, #4
 8002722:	2000      	movs	r0, #0
 8002724:	f000 fd46 	bl	80031b4 <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 8002728:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <USER_LCD_Init+0x1a4>)
 800272a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8002730:	4b39      	ldr	r3, [pc, #228]	; (8002818 <USER_LCD_Init+0x1a4>)
 8002732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002736:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002738:	4b37      	ldr	r3, [pc, #220]	; (8002818 <USER_LCD_Init+0x1a4>)
 800273a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800273e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8002740:	4b35      	ldr	r3, [pc, #212]	; (8002818 <USER_LCD_Init+0x1a4>)
 8002742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002746:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002748:	f000 f98e 	bl	8002a68 <LCD_Pulse_EN>

	USER_TIM_Delay( TIM_2, TIM_PSC_100US, TIM_CNT_100US );		//	100 us
 800274c:	f44f 4267 	mov.w	r2, #59136	; 0xe700
 8002750:	2100      	movs	r1, #0
 8002752:	2000      	movs	r0, #0
 8002754:	f000 fd2e 	bl	80031b4 <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 8002758:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <USER_LCD_Init+0x1a4>)
 800275a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8002760:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <USER_LCD_Init+0x1a4>)
 8002762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002766:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002768:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <USER_LCD_Init+0x1a4>)
 800276a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800276e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <USER_LCD_Init+0x1a4>)
 8002772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002776:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002778:	f000 f976 	bl	8002a68 <LCD_Pulse_EN>
	while( LCD_Busy( ) );					//	Checking the busy flag
 800277c:	bf00      	nop
 800277e:	f000 f91f 	bl	80029c0 <LCD_Busy>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1fa      	bne.n	800277e <USER_LCD_Init+0x10a>

	/* Initial 'Function Set' to change 4-bit mode	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 8002788:	4b23      	ldr	r3, [pc, #140]	; (8002818 <USER_LCD_Init+0x1a4>)
 800278a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <USER_LCD_Init+0x1a4>)
 8002792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002796:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002798:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <USER_LCD_Init+0x1a4>)
 800279a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800279e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <USER_LCD_Init+0x1a4>)
 80027a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a6:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 80027a8:	f000 f95e 	bl	8002a68 <LCD_Pulse_EN>
	while( LCD_Busy( ) );					//	Checking the busy flag
 80027ac:	bf00      	nop
 80027ae:	f000 f907 	bl	80029c0 <LCD_Busy>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1fa      	bne.n	80027ae <USER_LCD_Init+0x13a>

	/* 'Function Set' (I=1, N and F as required)	*/

	LCD_Write_Cmd( 0x28U );					//	2-line display, 5x7 dot
 80027b8:	2028      	movs	r0, #40	; 0x28
 80027ba:	f000 f89b 	bl	80028f4 <LCD_Write_Cmd>

	/* 'Display ON/OFF Control' (D=0, C=0, B=0)	*/

	LCD_Write_Cmd( 0x08U );					//	Display, cursor and blinking off
 80027be:	2008      	movs	r0, #8
 80027c0:	f000 f898 	bl	80028f4 <LCD_Write_Cmd>

	/* 'Clear Display' */

	LCD_Write_Cmd( 0x01U );//
 80027c4:	2001      	movs	r0, #1
 80027c6:	f000 f895 	bl	80028f4 <LCD_Write_Cmd>

	/* 'Entry Mode Set' (I/D and S as required)	*/

	LCD_Write_Cmd( 0x06U );					//	Cursor increment by 1, shift off
 80027ca:	2006      	movs	r0, #6
 80027cc:	f000 f892 	bl	80028f4 <LCD_Write_Cmd>

	/* Initialization Ends	*/

	LCD_Write_Cmd( 0x0FU );					//	Display, cursor and blinking on
 80027d0:	200f      	movs	r0, #15
 80027d2:	f000 f88f 	bl	80028f4 <LCD_Write_Cmd>

	//	Load the character defined by the user into the CGRAM

	LCD_Write_Cmd( 0x40 );					//	Set the CGRAM address to 0
 80027d6:	2040      	movs	r0, #64	; 0x40
 80027d8:	f000 f88c 	bl	80028f4 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <USER_LCD_Init+0x1b0>)
 80027de:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 80027e0:	2300      	movs	r3, #0
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	e00c      	b.n	8002800 <USER_LCD_Init+0x18c>
		LCD_Put_Char( *p );
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f993 3000 	ldrsb.w	r3, [r3]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f894 	bl	800291c <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	3301      	adds	r3, #1
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3301      	adds	r3, #1
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b3f      	cmp	r3, #63	; 0x3f
 8002804:	d9ef      	bls.n	80027e6 <USER_LCD_Init+0x172>

	/*	Set DDRAM address in address	*/

	LCD_Write_Cmd( 0x80 );//
 8002806:	2080      	movs	r0, #128	; 0x80
 8002808:	f000 f874 	bl	80028f4 <LCD_Write_Cmd>
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021000 	.word	0x40021000
 8002818:	40011000 	.word	0x40011000
 800281c:	fff11111 	.word	0xfff11111
 8002820:	00011111 	.word	0x00011111
 8002824:	0800c418 	.word	0x0800c418

08002828 <LCD_Out_Data4>:

// Function that generates a strobe on the LCD

void LCD_Out_Data4(uint8_t val)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )				//	Bit[0]
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <LCD_Out_Data4+0x1e>
		GPIOC->BSRR	=	LCD_D4_PIN_HIGH;
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <LCD_Out_Data4+0x84>)
 800283e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002842:	611a      	str	r2, [r3, #16]
 8002844:	e003      	b.n	800284e <LCD_Out_Data4+0x26>
	else
		GPIOC->BSRR	=	LCD_D4_PIN_LOW;
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <LCD_Out_Data4+0x84>)
 8002848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800284c:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )				//	Bit[1]
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <LCD_Out_Data4+0x3a>
		GPIOC->BSRR	=	LCD_D5_PIN_HIGH;
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <LCD_Out_Data4+0x84>)
 800285a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800285e:	611a      	str	r2, [r3, #16]
 8002860:	e003      	b.n	800286a <LCD_Out_Data4+0x42>
	else
		GPIOC->BSRR	=	LCD_D5_PIN_LOW;
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <LCD_Out_Data4+0x84>)
 8002864:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002868:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )				//	Bit[2]
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d004      	beq.n	800287e <LCD_Out_Data4+0x56>
		GPIOC->BSRR	=	LCD_D6_PIN_HIGH;
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <LCD_Out_Data4+0x84>)
 8002876:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800287a:	611a      	str	r2, [r3, #16]
 800287c:	e003      	b.n	8002886 <LCD_Out_Data4+0x5e>
	else
		GPIOC->BSRR	=	LCD_D6_PIN_LOW;
 800287e:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <LCD_Out_Data4+0x84>)
 8002880:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002884:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )				//	Bit[3]
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <LCD_Out_Data4+0x72>
		GPIOC->BSRR	=	LCD_D7_PIN_HIGH;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <LCD_Out_Data4+0x84>)
 8002892:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002896:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
}
 8002898:	e003      	b.n	80028a2 <LCD_Out_Data4+0x7a>
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
 800289a:	4b04      	ldr	r3, [pc, #16]	; (80028ac <LCD_Out_Data4+0x84>)
 800289c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a0:	611a      	str	r2, [r3, #16]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40011000 	.word	0x40011000

080028b0 <LCD_Write_Byte>:

// Function that writes 1 byte of data to the LCD

void LCD_Write_Byte(uint8_t val)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ffb1 	bl	8002828 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 80028c6:	f000 f8cf 	bl	8002a68 <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ffa8 	bl	8002828 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 80028d8:	f000 f8c6 	bl	8002a68 <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 80028dc:	bf00      	nop
 80028de:	f000 f86f 	bl	80029c0 <LCD_Busy>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1fa      	bne.n	80028de <LCD_Write_Byte+0x2e>
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <LCD_Write_Cmd>:

// Function that writes a command to the LCD

void LCD_Write_Cmd( uint8_t val )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_LOW;			//	RS=0 (character selection)
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <LCD_Write_Cmd+0x24>)
 8002900:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002904:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ffd1 	bl	80028b0 <LCD_Write_Byte>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40011000 	.word	0x40011000

0800291c <LCD_Put_Char>:

// Write an ASCII character to the LCD

void LCD_Put_Char( uint8_t c )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_HIGH;		//	RS=1 (character selection)
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <LCD_Put_Char+0x20>)
 8002928:	2240      	movs	r2, #64	; 0x40
 800292a:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff ffbe 	bl	80028b0 <LCD_Write_Byte>
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40011000 	.word	0x40011000

08002940 <LCD_Set_Cursor>:

// Function that sets the cursor to a position on the LCD screen
// Minimum values for line and column must be 1

void LCD_Set_Cursor( uint8_t line, uint8_t column )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	460a      	mov	r2, r1
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	4613      	mov	r3, r2
 800294e:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	column--;
 8002950:	79bb      	ldrb	r3, [r7, #6]
 8002952:	3b01      	subs	r3, #1
 8002954:	71bb      	strb	r3, [r7, #6]
	line--;
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	3b01      	subs	r3, #1
 800295a:	71fb      	strb	r3, [r7, #7]
	address = ( line * 0x40U ) + column;
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	019b      	lsls	r3, r3, #6
 8002960:	b2da      	uxtb	r2, r3
 8002962:	79bb      	ldrb	r3, [r7, #6]
 8002964:	4413      	add	r3, r2
 8002966:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3b80      	subs	r3, #128	; 0x80
 8002972:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ffbc 	bl	80028f4 <LCD_Write_Cmd>
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <LCD_Put_Str>:

// Function that sends a string of ASCII characters to the LCD

void LCD_Put_Str( char * str )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	for( int16_t i = 0; i < 16; i++ )
 800298c:	2300      	movs	r3, #0
 800298e:	81fb      	strh	r3, [r7, #14]
 8002990:	e00d      	b.n	80029ae <LCD_Put_Str+0x2a>
		LCD_Put_Char( str[ i ] );			//	Send 1 byte to the LCD
 8002992:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ffbd 	bl	800291c <LCD_Put_Char>
	for( int16_t i = 0; i < 16; i++ )
 80029a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	81fb      	strh	r3, [r7, #14]
 80029ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029b2:	2b0f      	cmp	r3, #15
 80029b4:	dded      	ble.n	8002992 <LCD_Put_Str+0xe>
}
 80029b6:	bf00      	nop
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <LCD_Busy>:
}

// Function that causes delays on the LCD

char LCD_Busy( void )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
	// Configuration of D7 as input floating

	GPIOC->CRH	&=	~( 0x2UL << 18U ) & ~( 0x3UL << 16U );
 80029c4:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <LCD_Busy+0xa4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <LCD_Busy+0xa4>)
 80029ca:	f423 2330 	bic.w	r3, r3, #720896	; 0xb0000
 80029ce:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=   	 ( 0x1UL << 18U );
 80029d0:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <LCD_Busy+0xa4>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a23      	ldr	r2, [pc, #140]	; (8002a64 <LCD_Busy+0xa4>)
 80029d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029da:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <LCD_Busy+0xa4>)
 80029de:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80029e2:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_HIGH;
 80029e4:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <LCD_Busy+0xa4>)
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_HIGH;
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <LCD_Busy+0xa4>)
 80029ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f0:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_100US, TIM_CNT_100US );	//	100 us
 80029f2:	f44f 4267 	mov.w	r2, #59136	; 0xe700
 80029f6:	2100      	movs	r1, #0
 80029f8:	2000      	movs	r0, #0
 80029fa:	f000 fbdb 	bl	80031b4 <USER_TIM_Delay>

	if(( GPIOC->IDR	& LCD_D7_PIN_HIGH )) 			//	If D7 is set, then
 80029fe:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <LCD_Busy+0xa4>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d015      	beq.n	8002a36 <LCD_Busy+0x76>
	{
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <LCD_Busy+0xa4>)
 8002a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a10:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <LCD_Busy+0xa4>)
 8002a14:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a18:	611a      	str	r2, [r3, #16]

	// Configuration of D7 as output push-pull, 10 MHz speed

		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <LCD_Busy+0xa4>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <LCD_Busy+0xa4>)
 8002a20:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8002a24:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <LCD_Busy+0xa4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <LCD_Busy+0xa4>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a30:	6053      	str	r3, [r2, #4]

		return 1;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e014      	b.n	8002a60 <LCD_Busy+0xa0>
	}
	else
	{
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <LCD_Busy+0xa4>)
 8002a38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a3c:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <LCD_Busy+0xa4>)
 8002a40:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a44:	611a      	str	r2, [r3, #16]

	// Configuration of D7 as output push-pull, 10 MHz speed

		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <LCD_Busy+0xa4>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4a06      	ldr	r2, [pc, #24]	; (8002a64 <LCD_Busy+0xa4>)
 8002a4c:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8002a50:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <LCD_Busy+0xa4>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4a03      	ldr	r2, [pc, #12]	; (8002a64 <LCD_Busy+0xa4>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6053      	str	r3, [r2, #4]

		return 0;
 8002a5e:	2300      	movs	r3, #0
	}
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40011000 	.word	0x40011000

08002a68 <LCD_Pulse_EN>:

// Function that generates a pulse on the EN pin of the LCD

void LCD_Pulse_EN( void )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	LCD_EN_PIN_LOW;
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <LCD_Pulse_EN+0x44>)
 8002a6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a72:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_10US, TIM_CNT_10US );	//	10 us
 8002a74:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8002a78:	2100      	movs	r1, #0
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f000 fb9a 	bl	80031b4 <USER_TIM_Delay>

	GPIOC->BSRR	=	LCD_EN_PIN_HIGH;		//	Enable pin EN ON
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <LCD_Pulse_EN+0x44>)
 8002a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a86:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_10US, TIM_CNT_10US );	//	10 us
 8002a88:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f000 fb90 	bl	80031b4 <USER_TIM_Delay>

	GPIOC->BSRR	=	LCD_EN_PIN_LOW;			//	Enable pin EN OFF
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <LCD_Pulse_EN+0x44>)
 8002a96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a9a:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_1MS, TIM_CNT_1MS );	//	1 ms
 8002a9c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f000 fb86 	bl	80031b4 <USER_TIM_Delay>
}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40011000 	.word	0x40011000

08002ab0 <USER_LEDS_Init>:
#include "main.h"
#include "GPIO.h"
#include "TIMER.h"

void USER_LEDS_Init( void )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  // Pin PC2 as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTC, 2, OUT_50, OUT_GP_PP );
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	2102      	movs	r1, #2
 8002aba:	2002      	movs	r0, #2
 8002abc:	f7ff fb12 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTC, 2, 0 );
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2102      	movs	r1, #2
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f7ff fbf5 	bl	80022b4 <USER_GPIO_Write>

  // Pin PC3 as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTC, 3, OUT_50, OUT_GP_PP );
 8002aca:	2300      	movs	r3, #0
 8002acc:	2203      	movs	r2, #3
 8002ace:	2103      	movs	r1, #3
 8002ad0:	2002      	movs	r0, #2
 8002ad2:	f7ff fb07 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTC, 3, 0 );
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2103      	movs	r1, #3
 8002ada:	2002      	movs	r0, #2
 8002adc:	f7ff fbea 	bl	80022b4 <USER_GPIO_Write>

  USER_TIM_Init( TIM_3 );
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f000 faa3 	bl	800302c <USER_TIM_Init>
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <USER_MATRIX_KEYPAD_Init>:
};

// Initialize matrix keypad

void USER_MATRIX_KEYPAD_Init( void )
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	af00      	add	r7, sp, #0
  // Pin PC5 (Row 1) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTC, 5, OUT_50, OUT_GP_PP );
 8002aee:	2300      	movs	r3, #0
 8002af0:	2203      	movs	r2, #3
 8002af2:	2105      	movs	r1, #5
 8002af4:	2002      	movs	r0, #2
 8002af6:	f7ff faf5 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTC, 5, 1 );
 8002afa:	2201      	movs	r2, #1
 8002afc:	2105      	movs	r1, #5
 8002afe:	2002      	movs	r0, #2
 8002b00:	f7ff fbd8 	bl	80022b4 <USER_GPIO_Write>

  // Pin PA12 (Row 2) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTA, 12, OUT_50, OUT_GP_PP );
 8002b04:	2300      	movs	r3, #0
 8002b06:	2203      	movs	r2, #3
 8002b08:	210c      	movs	r1, #12
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f7ff faea 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTA, 12, 1 );
 8002b10:	2201      	movs	r2, #1
 8002b12:	210c      	movs	r1, #12
 8002b14:	2000      	movs	r0, #0
 8002b16:	f7ff fbcd 	bl	80022b4 <USER_GPIO_Write>

  // Pin PA11 (Row 3) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTA, 11, OUT_50, OUT_GP_PP );
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	210b      	movs	r1, #11
 8002b20:	2000      	movs	r0, #0
 8002b22:	f7ff fadf 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTA, 11, 1 );
 8002b26:	2201      	movs	r2, #1
 8002b28:	210b      	movs	r1, #11
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7ff fbc2 	bl	80022b4 <USER_GPIO_Write>

  // Pin PB12 (Row 4) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTB, 12, OUT_50, OUT_GP_PP );
 8002b30:	2300      	movs	r3, #0
 8002b32:	2203      	movs	r2, #3
 8002b34:	210c      	movs	r1, #12
 8002b36:	2001      	movs	r0, #1
 8002b38:	f7ff fad4 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 12, 1 );
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	210c      	movs	r1, #12
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff fbb7 	bl	80022b4 <USER_GPIO_Write>

  // Pin PB1 (Col 1) as input pull up

  USER_GPIO_Define( PORTB, 1, INP, INP_PP );
 8002b46:	2302      	movs	r3, #2
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f7ff fac9 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 1, 1 );
 8002b52:	2201      	movs	r2, #1
 8002b54:	2101      	movs	r1, #1
 8002b56:	2001      	movs	r0, #1
 8002b58:	f7ff fbac 	bl	80022b4 <USER_GPIO_Write>

  // Pin PB15 (Col 2) as input pull up

  USER_GPIO_Define( PORTB, 15, INP, INP_PP );
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	2200      	movs	r2, #0
 8002b60:	210f      	movs	r1, #15
 8002b62:	2001      	movs	r0, #1
 8002b64:	f7ff fabe 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 15, 1 );
 8002b68:	2201      	movs	r2, #1
 8002b6a:	210f      	movs	r1, #15
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	f7ff fba1 	bl	80022b4 <USER_GPIO_Write>

  // Pin PB14 (Col 3) as input pull up

  USER_GPIO_Define( PORTB, 14, INP, INP_PP );
 8002b72:	2302      	movs	r3, #2
 8002b74:	2200      	movs	r2, #0
 8002b76:	210e      	movs	r1, #14
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f7ff fab3 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 14, 1 );
 8002b7e:	2201      	movs	r2, #1
 8002b80:	210e      	movs	r1, #14
 8002b82:	2001      	movs	r0, #1
 8002b84:	f7ff fb96 	bl	80022b4 <USER_GPIO_Write>

  // Pin PB13 (Col 4) as input pull up

  USER_GPIO_Define( PORTB, 13, INP, INP_PP );
 8002b88:	2302      	movs	r3, #2
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	210d      	movs	r1, #13
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f7ff faa8 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 13, 1 );
 8002b94:	2201      	movs	r2, #1
 8002b96:	210d      	movs	r1, #13
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f7ff fb8b 	bl	80022b4 <USER_GPIO_Write>
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <USER_MATRIX_KEYPAD_Read>:

// Read matrix keypad

char USER_MATRIX_KEYPAD_Read( void )
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
  char selectedKey = 'N';				// Default character
 8002baa:	234e      	movs	r3, #78	; 0x4e
 8002bac:	71fb      	strb	r3, [r7, #7]

  for (uint8_t i = 0; i < NUMBER_OF_ELEMENTS; i++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	71bb      	strb	r3, [r7, #6]
 8002bb2:	e061      	b.n	8002c78 <USER_MATRIX_KEYPAD_Read+0xd4>
  {
    if( i == 0 )
 8002bb4:	79bb      	ldrb	r3, [r7, #6]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d108      	bne.n	8002bcc <USER_MATRIX_KEYPAD_Read+0x28>
    {
       GPIOC->BSRR = (1 << (R_POSITIONS[i] + 16));
 8002bba:	79bb      	ldrb	r3, [r7, #6]
 8002bbc:	4a33      	ldr	r2, [pc, #204]	; (8002c8c <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002bbe:	5cd3      	ldrb	r3, [r2, r3]
 8002bc0:	3310      	adds	r3, #16
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <USER_MATRIX_KEYPAD_Read+0xec>)
 8002bc8:	611a      	str	r2, [r3, #16]
 8002bca:	e013      	b.n	8002bf4 <USER_MATRIX_KEYPAD_Read+0x50>
    }
    else if( i == 3 )
 8002bcc:	79bb      	ldrb	r3, [r7, #6]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d108      	bne.n	8002be4 <USER_MATRIX_KEYPAD_Read+0x40>
    {
       GPIOB->BSRR = (1 << (R_POSITIONS[i] + 16));
 8002bd2:	79bb      	ldrb	r3, [r7, #6]
 8002bd4:	4a2d      	ldr	r2, [pc, #180]	; (8002c8c <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002bd6:	5cd3      	ldrb	r3, [r2, r3]
 8002bd8:	3310      	adds	r3, #16
 8002bda:	2201      	movs	r2, #1
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	4b2d      	ldr	r3, [pc, #180]	; (8002c94 <USER_MATRIX_KEYPAD_Read+0xf0>)
 8002be0:	611a      	str	r2, [r3, #16]
 8002be2:	e007      	b.n	8002bf4 <USER_MATRIX_KEYPAD_Read+0x50>
    }
    else
    {
       GPIOA->BSRR = (1 << (R_POSITIONS[i] + 16));
 8002be4:	79bb      	ldrb	r3, [r7, #6]
 8002be6:	4a29      	ldr	r2, [pc, #164]	; (8002c8c <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002be8:	5cd3      	ldrb	r3, [r2, r3]
 8002bea:	3310      	adds	r3, #16
 8002bec:	2201      	movs	r2, #1
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <USER_MATRIX_KEYPAD_Read+0xf4>)
 8002bf2:	611a      	str	r2, [r3, #16]
    }

    for (uint8_t j = 0; j < NUMBER_OF_ELEMENTS; j++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	717b      	strb	r3, [r7, #5]
 8002bf8:	e015      	b.n	8002c26 <USER_MATRIX_KEYPAD_Read+0x82>
    {
      if ( !( GPIOB->IDR & (1 << C_POSITIONS[j]) ) )
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <USER_MATRIX_KEYPAD_Read+0xf0>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	797a      	ldrb	r2, [r7, #5]
 8002c00:	4926      	ldr	r1, [pc, #152]	; (8002c9c <USER_MATRIX_KEYPAD_Read+0xf8>)
 8002c02:	5c8a      	ldrb	r2, [r1, r2]
 8002c04:	4611      	mov	r1, r2
 8002c06:	2201      	movs	r2, #1
 8002c08:	408a      	lsls	r2, r1
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <USER_MATRIX_KEYPAD_Read+0x7c>
      {
	  selectedKey = keys[i][j];
 8002c10:	79ba      	ldrb	r2, [r7, #6]
 8002c12:	797b      	ldrb	r3, [r7, #5]
 8002c14:	4922      	ldr	r1, [pc, #136]	; (8002ca0 <USER_MATRIX_KEYPAD_Read+0xfc>)
 8002c16:	0092      	lsls	r2, r2, #2
 8002c18:	440a      	add	r2, r1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < NUMBER_OF_ELEMENTS; j++)
 8002c20:	797b      	ldrb	r3, [r7, #5]
 8002c22:	3301      	adds	r3, #1
 8002c24:	717b      	strb	r3, [r7, #5]
 8002c26:	797b      	ldrb	r3, [r7, #5]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d9e6      	bls.n	8002bfa <USER_MATRIX_KEYPAD_Read+0x56>
      }
    }

    if( i == 0 )
 8002c2c:	79bb      	ldrb	r3, [r7, #6]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <USER_MATRIX_KEYPAD_Read+0xa2>
    {
      GPIOC->BSRR = (1 << R_POSITIONS[i]);
 8002c32:	79bb      	ldrb	r3, [r7, #6]
 8002c34:	4a15      	ldr	r2, [pc, #84]	; (8002c8c <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	fa03 f202 	lsl.w	r2, r3, r2
 8002c40:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <USER_MATRIX_KEYPAD_Read+0xec>)
 8002c42:	611a      	str	r2, [r3, #16]
 8002c44:	e015      	b.n	8002c72 <USER_MATRIX_KEYPAD_Read+0xce>
    }
    else if( i == 3 )
 8002c46:	79bb      	ldrb	r3, [r7, #6]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d109      	bne.n	8002c60 <USER_MATRIX_KEYPAD_Read+0xbc>
    {
      GPIOB->BSRR = (1 << R_POSITIONS[i]);
 8002c4c:	79bb      	ldrb	r3, [r7, #6]
 8002c4e:	4a0f      	ldr	r2, [pc, #60]	; (8002c8c <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002c50:	5cd3      	ldrb	r3, [r2, r3]
 8002c52:	461a      	mov	r2, r3
 8002c54:	2301      	movs	r3, #1
 8002c56:	fa03 f202 	lsl.w	r2, r3, r2
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <USER_MATRIX_KEYPAD_Read+0xf0>)
 8002c5c:	611a      	str	r2, [r3, #16]
 8002c5e:	e008      	b.n	8002c72 <USER_MATRIX_KEYPAD_Read+0xce>
    }
    else
    {
      GPIOA->BSRR = (1 << R_POSITIONS[i]);
 8002c60:	79bb      	ldrb	r3, [r7, #6]
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002c64:	5cd3      	ldrb	r3, [r2, r3]
 8002c66:	461a      	mov	r2, r3
 8002c68:	2301      	movs	r3, #1
 8002c6a:	fa03 f202 	lsl.w	r2, r3, r2
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <USER_MATRIX_KEYPAD_Read+0xf4>)
 8002c70:	611a      	str	r2, [r3, #16]
  for (uint8_t i = 0; i < NUMBER_OF_ELEMENTS; i++)
 8002c72:	79bb      	ldrb	r3, [r7, #6]
 8002c74:	3301      	adds	r3, #1
 8002c76:	71bb      	strb	r3, [r7, #6]
 8002c78:	79bb      	ldrb	r3, [r7, #6]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d99a      	bls.n	8002bb4 <USER_MATRIX_KEYPAD_Read+0x10>
    }
  }

  return selectedKey;
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	40011000 	.word	0x40011000
 8002c94:	40010c00 	.word	0x40010c00
 8002c98:	40010800 	.word	0x40010800
 8002c9c:	20000004 	.word	0x20000004
 8002ca0:	20000008 	.word	0x20000008

08002ca4 <USER_OLED_Command_1_Byte>:
#include "SYSTICK.h"

// Send a 1 byte command to the OLED

void USER_OLED_Command_1_Byte( uint8_t I2C, uint8_t data )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	460a      	mov	r2, r1
 8002cae:	71fb      	strb	r3, [r7, #7]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Start( I2C );
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fbde 	bl	8002478 <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2178      	movs	r1, #120	; 0x78
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fc08 	bl	80024d8 <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x00 );				// Control function for a command
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fc65 	bl	800259c <USER_I2C_Data>
  USER_I2C_Data( I2C, data );
 8002cd2:	79ba      	ldrb	r2, [r7, #6]
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fc5f 	bl	800259c <USER_I2C_Data>

  USER_I2C_Stop( I2C );
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fc95 	bl	8002610 <USER_I2C_Stop>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <USER_OLED_Command_2_Byte>:

// Send a 2 byte command to the OLED

void USER_OLED_Command_2_Byte( uint8_t I2C, uint8_t data[] )
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	6039      	str	r1, [r7, #0]
 8002cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]

  USER_I2C_Start( I2C );
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fbb9 	bl	8002478 <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2178      	movs	r1, #120	; 0x78
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fbe3 	bl	80024d8 <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x00 );	// Control function for a command
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fc40 	bl	800259c <USER_I2C_Data>

  for(i = 0; i < 2; i++)
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	e00b      	b.n	8002d3a <USER_OLED_Command_2_Byte+0x4c>
  {
      USER_I2C_Data( I2C, data[i] );
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fc34 	bl	800259c <USER_I2C_Data>
  for(i = 0; i < 2; i++)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	3301      	adds	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d9f0      	bls.n	8002d22 <USER_OLED_Command_2_Byte+0x34>
  }

  USER_I2C_Stop( I2C );
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fc64 	bl	8002610 <USER_I2C_Stop>
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <USER_OLED_Init>:

// Initialize OLED

void USER_OLED_Init( uint8_t I2C, uint8_t screen_size )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	460a      	mov	r2, r1
 8002d5a:	71fb      	strb	r3, [r7, #7]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Init( I2C, I2C_FM );
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	212d      	movs	r1, #45	; 0x2d
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fb13 	bl	8002390 <USER_I2C_Init>

  uint8_t cmd_1[] = {0xA8, 0x3F};
 8002d6a:	f643 73a8 	movw	r3, #16296	; 0x3fa8
 8002d6e:	84bb      	strh	r3, [r7, #36]	; 0x24
  USER_OLED_Command_2_Byte( I2C, cmd_1 );
 8002d70:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ffb8 	bl	8002cee <USER_OLED_Command_2_Byte>

  uint8_t cmd_2[] = {0xD3, 0x00};
 8002d7e:	23d3      	movs	r3, #211	; 0xd3
 8002d80:	843b      	strh	r3, [r7, #32]
  USER_OLED_Command_2_Byte( I2C, cmd_2 );
 8002d82:	f107 0220 	add.w	r2, r7, #32
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ffaf 	bl	8002cee <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0x40 );
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	2140      	movs	r1, #64	; 0x40
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff85 	bl	8002ca4 <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xA1 );
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	21a1      	movs	r1, #161	; 0xa1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff80 	bl	8002ca4 <USER_OLED_Command_1_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xC8 );
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	21c8      	movs	r1, #200	; 0xc8
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff7b 	bl	8002ca4 <USER_OLED_Command_1_Byte>

  uint8_t cmd_3[] = {0xDA, screen_size};
 8002dae:	23da      	movs	r3, #218	; 0xda
 8002db0:	773b      	strb	r3, [r7, #28]
 8002db2:	79bb      	ldrb	r3, [r7, #6]
 8002db4:	777b      	strb	r3, [r7, #29]
  USER_OLED_Command_2_Byte( I2C, cmd_3 );
 8002db6:	f107 021c 	add.w	r2, r7, #28
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff95 	bl	8002cee <USER_OLED_Command_2_Byte>

  uint8_t cmd_4[] = {0x81, 0x7F};
 8002dc4:	f647 7381 	movw	r3, #32641	; 0x7f81
 8002dc8:	833b      	strh	r3, [r7, #24]
  USER_OLED_Command_2_Byte( I2C, cmd_4 );
 8002dca:	f107 0218 	add.w	r2, r7, #24
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ff8b 	bl	8002cee <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xA4 );
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	21a4      	movs	r1, #164	; 0xa4
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff61 	bl	8002ca4 <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xA6 );
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	21a6      	movs	r1, #166	; 0xa6
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff5c 	bl	8002ca4 <USER_OLED_Command_1_Byte>

  uint8_t cmd_5[] = {0xD5, 0x80};
 8002dec:	f248 03d5 	movw	r3, #32981	; 0x80d5
 8002df0:	82bb      	strh	r3, [r7, #20]
  USER_OLED_Command_2_Byte( I2C, cmd_5 );
 8002df2:	f107 0214 	add.w	r2, r7, #20
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff ff77 	bl	8002cee <USER_OLED_Command_2_Byte>

  uint8_t cmd_6[] = {0x8D, 0x14};
 8002e00:	f241 438d 	movw	r3, #5261	; 0x148d
 8002e04:	823b      	strh	r3, [r7, #16]
  USER_OLED_Command_2_Byte( I2C, cmd_6 );
 8002e06:	f107 0210 	add.w	r2, r7, #16
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ff6d 	bl	8002cee <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xAF );
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	21af      	movs	r1, #175	; 0xaf
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff43 	bl	8002ca4 <USER_OLED_Command_1_Byte>

  uint8_t cmd_7[] = {0x20, 0x10};
 8002e1e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002e22:	81bb      	strh	r3, [r7, #12]
  USER_OLED_Command_2_Byte( I2C, cmd_7 );
 8002e24:	f107 020c 	add.w	r2, r7, #12
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff5e 	bl	8002cee <USER_OLED_Command_2_Byte>
}
 8002e32:	bf00      	nop
 8002e34:	3728      	adds	r7, #40	; 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <USER_OLED_Init_64>:
}

// Initialize 128x64 OLED

void USER_OLED_Init_64( uint8_t I2C )
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	71fb      	strb	r3, [r7, #7]
  USER_OLED_Init(I2C, 0x12);
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	2112      	movs	r1, #18
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff81 	bl	8002d50 <USER_OLED_Init>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <USER_OLED_Data>:

// Send data to OLED

void USER_OLED_Data( uint8_t I2C, uint8_t data )
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	460a      	mov	r2, r1
 8002e60:	71fb      	strb	r3, [r7, #7]
 8002e62:	4613      	mov	r3, r2
 8002e64:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Start( I2C );
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fb05 	bl	8002478 <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2178      	movs	r1, #120	; 0x78
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fb2f 	bl	80024d8 <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x40 );				// Control function for data
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	2140      	movs	r1, #64	; 0x40
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fb8c 	bl	800259c <USER_I2C_Data>
  USER_I2C_Data( I2C, data );
 8002e84:	79ba      	ldrb	r2, [r7, #6]
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fb86 	bl	800259c <USER_I2C_Data>

  USER_I2C_Stop( I2C );
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fbbc 	bl	8002610 <USER_I2C_Stop>
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <USER_OLED_Position>:

// Send screen position to OLED

void USER_OLED_Position( uint8_t I2C, uint8_t x_pos, uint8_t y_pos )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	71bb      	strb	r3, [r7, #6]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	717b      	strb	r3, [r7, #5]
  USER_OLED_Command_1_Byte( I2C, 0x00 + ( 0x0F & x_pos ) );
 8002eb2:	79bb      	ldrb	r3, [r7, #6]
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fef0 	bl	8002ca4 <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0x10 + (0x0F & ( x_pos >> 4 ) ) );
 8002ec4:	79bb      	ldrb	r3, [r7, #6]
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	3310      	adds	r3, #16
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fee6 	bl	8002ca4 <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xB0 + y_pos );
 8002ed8:	797b      	ldrb	r3, [r7, #5]
 8002eda:	3b50      	subs	r3, #80	; 0x50
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fede 	bl	8002ca4 <USER_OLED_Command_1_Byte>
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <USER_OLED_Print>:
}

// Print a string on the OLED screen

void USER_OLED_Print( uint8_t I2C, char str[] )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0, j;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]

  while( str[i] )
 8002f00:	e01e      	b.n	8002f40 <USER_OLED_Print+0x50>
  {
      for(j = 0; j < 5; j++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	73bb      	strb	r3, [r7, #14]
 8002f06:	e015      	b.n	8002f34 <USER_OLED_Print+0x44>
      {
	   USER_OLED_Data(I2C, ASCII[str[i] - 32][j]);
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	f1a3 0220 	sub.w	r2, r3, #32
 8002f14:	7bb9      	ldrb	r1, [r7, #14]
 8002f16:	4810      	ldr	r0, [pc, #64]	; (8002f58 <USER_OLED_Print+0x68>)
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	4403      	add	r3, r0
 8002f20:	440b      	add	r3, r1
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff94 	bl	8002e56 <USER_OLED_Data>
      for(j = 0; j < 5; j++)
 8002f2e:	7bbb      	ldrb	r3, [r7, #14]
 8002f30:	3301      	adds	r3, #1
 8002f32:	73bb      	strb	r3, [r7, #14]
 8002f34:	7bbb      	ldrb	r3, [r7, #14]
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d9e6      	bls.n	8002f08 <USER_OLED_Print+0x18>
      }

      i++;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
  while( str[i] )
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	4413      	add	r3, r2
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1da      	bne.n	8002f02 <USER_OLED_Print+0x12>
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	0800c458 	.word	0x0800c458

08002f5c <USER_OLED_Message>:

// Print a message (a string with a defined position) on the OLED screen

void USER_OLED_Message( uint8_t I2C, char str[], uint8_t x_pos, uint8_t y_pos )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6039      	str	r1, [r7, #0]
 8002f64:	4611      	mov	r1, r2
 8002f66:	461a      	mov	r2, r3
 8002f68:	4603      	mov	r3, r0
 8002f6a:	71fb      	strb	r3, [r7, #7]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	71bb      	strb	r3, [r7, #6]
 8002f70:	4613      	mov	r3, r2
 8002f72:	717b      	strb	r3, [r7, #5]
  USER_OLED_Position(I2C, x_pos, y_pos);
 8002f74:	797a      	ldrb	r2, [r7, #5]
 8002f76:	79b9      	ldrb	r1, [r7, #6]
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff ff90 	bl	8002ea0 <USER_OLED_Position>
  USER_OLED_Print(I2C, str);
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	6839      	ldr	r1, [r7, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ffb3 	bl	8002ef0 <USER_OLED_Print>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <USER_PWM_Init>:
#include "main.h"
#include "GPIO.h"
#include "TIMER.h"

void USER_PWM_Init( void )
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	af00      	add	r7, sp, #0
  USER_GPIO_Define( PORTB, 6, OUT_10, OUT_AF_PP );	 // Pin PB6 as alternate function push-pull, max speed 10 MHz
 8002f96:	2302      	movs	r3, #2
 8002f98:	2201      	movs	r2, #1
 8002f9a:	2106      	movs	r1, #6
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	f7ff f8a1 	bl	80020e4 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 6, 0 );
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2106      	movs	r1, #6
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f7ff f984 	bl	80022b4 <USER_GPIO_Write>

  USER_TIM_Init( TIM_4 );
 8002fac:	2002      	movs	r0, #2
 8002fae:	f000 f83d 	bl	800302c <USER_TIM_Init>
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <USER_PWM_Generate>:

void USER_PWM_Generate( uint16_t PSC, uint16_t ARR, uint16_t CCR1 )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80fb      	strh	r3, [r7, #6]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	80bb      	strh	r3, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	807b      	strh	r3, [r7, #2]
  TIM4->PSC	=	PSC;				// Configure the prescaler, the period and the duty cycle
 8002fca:	4a17      	ldr	r2, [pc, #92]	; (8003028 <USER_PWM_Generate+0x70>)
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	6293      	str	r3, [r2, #40]	; 0x28
  TIM4->ARR	=	ARR;				//	register values
 8002fd0:	4a15      	ldr	r2, [pc, #84]	; (8003028 <USER_PWM_Generate+0x70>)
 8002fd2:	88bb      	ldrh	r3, [r7, #4]
 8002fd4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIM4->CCR1	=	CCR1;
 8002fd6:	4a14      	ldr	r2, [pc, #80]	; (8003028 <USER_PWM_Generate+0x70>)
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	6353      	str	r3, [r2, #52]	; 0x34

  TIM4->EGR	|=	TIM_EGR_UG;			// Generate the UEV-event to load the period, the prescaler and
 8002fdc:	4b12      	ldr	r3, [pc, #72]	; (8003028 <USER_PWM_Generate+0x70>)
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	4a11      	ldr	r2, [pc, #68]	; (8003028 <USER_PWM_Generate+0x70>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6153      	str	r3, [r2, #20]
  							//	reset the counter

  TIM4->SR	&=	~(TIM_SR_UIF);			// Clear the Timer overflow UEV-event flag
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <USER_PWM_Generate+0x70>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <USER_PWM_Generate+0x70>)
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	6113      	str	r3, [r2, #16]

  TIM4->CCER	|=	TIM_CCER_CC1E;			// Enable the PWM signal output and set the polarity
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <USER_PWM_Generate+0x70>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <USER_PWM_Generate+0x70>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6213      	str	r3, [r2, #32]
  TIM4->CCER	&=	~(TIM_CCER_CC1P);
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <USER_PWM_Generate+0x70>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4a08      	ldr	r2, [pc, #32]	; (8003028 <USER_PWM_Generate+0x70>)
 8003006:	f023 0302 	bic.w	r3, r3, #2
 800300a:	6213      	str	r3, [r2, #32]

  while( !( TIM4->SR & TIM_SR_UIF ) );			// Wait for UIF
 800300c:	bf00      	nop
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <USER_PWM_Generate+0x70>)
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f9      	beq.n	800300e <USER_PWM_Generate+0x56>
}
 800301a:	bf00      	nop
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40000800 	.word	0x40000800

0800302c <USER_TIM_Init>:
#include "GPIO.h"

// Initialize TIM timer

void USER_TIM_Init( uint8_t TIM )
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  if( TIM == 0 )
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d12e      	bne.n	800309a <USER_TIM_Init+0x6e>
  {
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM2EN;	// Clock enable for TIM2
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <USER_TIM_Init+0x178>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <USER_TIM_Init+0x178>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	61d3      	str	r3, [r2, #28]

    TIM2->SMCR		&=	~(TIM_SMCR_SMS);	// Step 1 - Enable internal clock source
 8003048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003052:	f023 0307 	bic.w	r3, r3, #7
 8003056:	6093      	str	r3, [r2, #8]
    TIM2->CR1		&=	~(TIM_CR1_UDIS);	// Step 2 - UEV enabled
 8003058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003062:	f023 0302 	bic.w	r3, r3, #2
 8003066:	6013      	str	r3, [r2, #0]
    TIM2->CR1		&=	~(TIM_CR1_DIR);		// 	Counter as upcounter
 8003068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003072:	f023 0310 	bic.w	r3, r3, #16
 8003076:	6013      	str	r3, [r2, #0]
    TIM2->CR1		&=	~(TIM_CR1_CMS);		//	Edge-aligned mode
 8003078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003082:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003086:	6013      	str	r3, [r2, #0]
    TIM2->SR		&=	~(TIM_SR_UIF);		// Step 3 - Clear Update Interrupt Flag
 8003088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	6113      	str	r3, [r2, #16]
    TIM4->CCMR1		|=	TIM_CCMR1_OC1M_2;
    TIM4->CCMR1		|=	TIM_CCMR1_OC1M_1;

    TIM4->CR1		|=	TIM_CR1_CEN;			// Enable the Timer to start counting
  }
}
 8003098:	e07e      	b.n	8003198 <USER_TIM_Init+0x16c>
  else if( TIM == 1 )
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d130      	bne.n	8003102 <USER_TIM_Init+0xd6>
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM3EN;	// Clock enable for TIM3
 80030a0:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <USER_TIM_Init+0x178>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	4a3f      	ldr	r2, [pc, #252]	; (80031a4 <USER_TIM_Init+0x178>)
 80030a6:	f043 0302 	orr.w	r3, r3, #2
 80030aa:	61d3      	str	r3, [r2, #28]
    TIM3->SMCR		&=	~(TIM_SMCR_SMS);
 80030ac:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <USER_TIM_Init+0x17c>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a3d      	ldr	r2, [pc, #244]	; (80031a8 <USER_TIM_Init+0x17c>)
 80030b2:	f023 0307 	bic.w	r3, r3, #7
 80030b6:	6093      	str	r3, [r2, #8]
    TIM3->CR1		&=	~(TIM_CR1_UDIS);
 80030b8:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <USER_TIM_Init+0x17c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a3a      	ldr	r2, [pc, #232]	; (80031a8 <USER_TIM_Init+0x17c>)
 80030be:	f023 0302 	bic.w	r3, r3, #2
 80030c2:	6013      	str	r3, [r2, #0]
    TIM3->CR1		&=	~(TIM_CR1_DIR);
 80030c4:	4b38      	ldr	r3, [pc, #224]	; (80031a8 <USER_TIM_Init+0x17c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a37      	ldr	r2, [pc, #220]	; (80031a8 <USER_TIM_Init+0x17c>)
 80030ca:	f023 0310 	bic.w	r3, r3, #16
 80030ce:	6013      	str	r3, [r2, #0]
    TIM3->CR1		&=	~(TIM_CR1_CMS);
 80030d0:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <USER_TIM_Init+0x17c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a34      	ldr	r2, [pc, #208]	; (80031a8 <USER_TIM_Init+0x17c>)
 80030d6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80030da:	6013      	str	r3, [r2, #0]
    TIM3->SR		&=	~(TIM_SR_UIF);
 80030dc:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <USER_TIM_Init+0x17c>)
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	4a31      	ldr	r2, [pc, #196]	; (80031a8 <USER_TIM_Init+0x17c>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	6113      	str	r3, [r2, #16]
    TIM3->DIER 		|=	TIM_DIER_UIE;		// Step 4 - Enable Update Interrupt
 80030e8:	4b2f      	ldr	r3, [pc, #188]	; (80031a8 <USER_TIM_Init+0x17c>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4a2e      	ldr	r2, [pc, #184]	; (80031a8 <USER_TIM_Init+0x17c>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	60d3      	str	r3, [r2, #12]
    NVIC->ISER[0]	|=	NVIC_ISER_29;		// Step 5 - Enable interrupt
 80030f4:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <USER_TIM_Init+0x180>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <USER_TIM_Init+0x180>)
 80030fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030fe:	6013      	str	r3, [r2, #0]
}
 8003100:	e04a      	b.n	8003198 <USER_TIM_Init+0x16c>
  else if( TIM == 2 )
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d147      	bne.n	8003198 <USER_TIM_Init+0x16c>
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM4EN;	// Clock enable for TIM4
 8003108:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <USER_TIM_Init+0x178>)
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	4a25      	ldr	r2, [pc, #148]	; (80031a4 <USER_TIM_Init+0x178>)
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	61d3      	str	r3, [r2, #28]
    TIM4->CR1		&=	~(TIM_CR1_UDIS);	// Step 1 - UEV enabled
 8003114:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <USER_TIM_Init+0x184>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <USER_TIM_Init+0x184>)
 800311a:	f023 0302 	bic.w	r3, r3, #2
 800311e:	6013      	str	r3, [r2, #0]
    TIM4->CR1		&=	~(TIM_CR1_URS);		// 	UEV also by software
 8003120:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <USER_TIM_Init+0x184>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a22      	ldr	r2, [pc, #136]	; (80031b0 <USER_TIM_Init+0x184>)
 8003126:	f023 0304 	bic.w	r3, r3, #4
 800312a:	6013      	str	r3, [r2, #0]
    TIM4->CR1		&=	~(TIM_CR1_DIR);		// 	Counter as upcounter
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <USER_TIM_Init+0x184>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1f      	ldr	r2, [pc, #124]	; (80031b0 <USER_TIM_Init+0x184>)
 8003132:	f023 0310 	bic.w	r3, r3, #16
 8003136:	6013      	str	r3, [r2, #0]
    TIM4->CR1		&=	~(TIM_CR1_CMS);		// 	Edge-aligned mode
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <USER_TIM_Init+0x184>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <USER_TIM_Init+0x184>)
 800313e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003142:	6013      	str	r3, [r2, #0]
    TIM4->CR1		|=	TIM_CR1_ARPE;		//	Load ARR only on UEV
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <USER_TIM_Init+0x184>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a19      	ldr	r2, [pc, #100]	; (80031b0 <USER_TIM_Init+0x184>)
 800314a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314e:	6013      	str	r3, [r2, #0]
    TIM4->CCMR1		&=	~(TIM_CCMR1_CC1S);	// Step 2 - CC1 channel as output
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <USER_TIM_Init+0x184>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	4a16      	ldr	r2, [pc, #88]	; (80031b0 <USER_TIM_Init+0x184>)
 8003156:	f023 0303 	bic.w	r3, r3, #3
 800315a:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1		|=	TIM_CCMR1_OC1PE;	//	CCRx load in UEV event
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <USER_TIM_Init+0x184>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <USER_TIM_Init+0x184>)
 8003162:	f043 0308 	orr.w	r3, r3, #8
 8003166:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1		&=	~(TIM_CCMR1_OC1M_0);	//	PWM mode 1
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <USER_TIM_Init+0x184>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	4a10      	ldr	r2, [pc, #64]	; (80031b0 <USER_TIM_Init+0x184>)
 800316e:	f023 0310 	bic.w	r3, r3, #16
 8003172:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1		|=	TIM_CCMR1_OC1M_2;
 8003174:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <USER_TIM_Init+0x184>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	4a0d      	ldr	r2, [pc, #52]	; (80031b0 <USER_TIM_Init+0x184>)
 800317a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800317e:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1		|=	TIM_CCMR1_OC1M_1;
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <USER_TIM_Init+0x184>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <USER_TIM_Init+0x184>)
 8003186:	f043 0320 	orr.w	r3, r3, #32
 800318a:	6193      	str	r3, [r2, #24]
    TIM4->CR1		|=	TIM_CR1_CEN;			// Enable the Timer to start counting
 800318c:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <USER_TIM_Init+0x184>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a07      	ldr	r2, [pc, #28]	; (80031b0 <USER_TIM_Init+0x184>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6013      	str	r3, [r2, #0]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40000400 	.word	0x40000400
 80031ac:	e000e100 	.word	0xe000e100
 80031b0:	40000800 	.word	0x40000800

080031b4 <USER_TIM_Delay>:

// Generate delay via TIM timer

void USER_TIM_Delay( uint8_t TIM, uint16_t TIM_PSC, uint16_t TIM_CNT )
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
 80031be:	460b      	mov	r3, r1
 80031c0:	80bb      	strh	r3, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	807b      	strh	r3, [r7, #2]
  if( TIM == 0 )
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d128      	bne.n	800321e <USER_TIM_Delay+0x6a>
  {
    TIM2->PSC	=	TIM_PSC;			// Configure initial prescaler and count values
 80031cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031d0:	88bb      	ldrh	r3, [r7, #4]
 80031d2:	6293      	str	r3, [r2, #40]	; 0x28
    TIM2->CNT	=	TIM_CNT;
 80031d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031d8:	887b      	ldrh	r3, [r7, #2]
 80031da:	6253      	str	r3, [r2, #36]	; 0x24

    TIM2->CR1	|=	TIM_CR1_CEN;			// Enable TIM2 timer to start counting
 80031dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	6013      	str	r3, [r2, #0]

    while( !( TIM2->SR & TIM_SR_UIF ) );		// Wait for UIF
 80031ec:	bf00      	nop
 80031ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f8      	beq.n	80031ee <USER_TIM_Delay+0x3a>

    TIM2->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM2 timer
 80031fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003206:	f023 0301 	bic.w	r3, r3, #1
 800320a:	6013      	str	r3, [r2, #0]
    TIM2->SR	&=	~(TIM_SR_UIF);			// Clear UIF
 800320c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	6113      	str	r3, [r2, #16]
      TIM3->CNT	=	TIM_CNT;

      TIM3->CR1	|=	TIM_CR1_CEN;			// Enable TIM3 timer to start counting
    }
  }
}
 800321c:	e01a      	b.n	8003254 <USER_TIM_Delay+0xa0>
  else if( TIM == 1 )
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d117      	bne.n	8003254 <USER_TIM_Delay+0xa0>
    if( !( TIM3->CR1 & TIM_CR1_CEN ) && !( TIM3->SR & TIM_SR_UIF ) )
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <USER_TIM_Delay+0xac>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d111      	bne.n	8003254 <USER_TIM_Delay+0xa0>
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <USER_TIM_Delay+0xac>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10b      	bne.n	8003254 <USER_TIM_Delay+0xa0>
      TIM3->PSC	=	TIM_PSC;
 800323c:	4a08      	ldr	r2, [pc, #32]	; (8003260 <USER_TIM_Delay+0xac>)
 800323e:	88bb      	ldrh	r3, [r7, #4]
 8003240:	6293      	str	r3, [r2, #40]	; 0x28
      TIM3->CNT	=	TIM_CNT;
 8003242:	4a07      	ldr	r2, [pc, #28]	; (8003260 <USER_TIM_Delay+0xac>)
 8003244:	887b      	ldrh	r3, [r7, #2]
 8003246:	6253      	str	r3, [r2, #36]	; 0x24
      TIM3->CR1	|=	TIM_CR1_CEN;			// Enable TIM3 timer to start counting
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <USER_TIM_Delay+0xac>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a04      	ldr	r2, [pc, #16]	; (8003260 <USER_TIM_Delay+0xac>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6013      	str	r3, [r2, #0]
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40000400 	.word	0x40000400

08003264 <TIM3_IRQHandler>:

void TIM3_IRQHandler( void )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  if( TIM3->SR & TIM_SR_UIF )      			// Wait for UIF
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <TIM3_IRQHandler+0x3c>)
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <TIM3_IRQHandler+0x38>
  {
    TIM3->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM3 timer
 8003274:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <TIM3_IRQHandler+0x3c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <TIM3_IRQHandler+0x3c>)
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	6013      	str	r3, [r2, #0]
    TIM3->SR	&=	~(TIM_SR_UIF);			// Clear UIF
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <TIM3_IRQHandler+0x3c>)
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	4a06      	ldr	r2, [pc, #24]	; (80032a0 <TIM3_IRQHandler+0x3c>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	6113      	str	r3, [r2, #16]

    USER_GPIO_Toggle( PORTC, 2 );
 800328c:	2102      	movs	r1, #2
 800328e:	2002      	movs	r0, #2
 8003290:	f7ff f85c 	bl	800234c <USER_GPIO_Toggle>
    USER_GPIO_Toggle( PORTC, 3 );
 8003294:	2103      	movs	r1, #3
 8003296:	2002      	movs	r0, #2
 8003298:	f7ff f858 	bl	800234c <USER_GPIO_Toggle>
  }
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40000400 	.word	0x40000400

080032a4 <USER_USART_Init>:
#include "GPIO.h"

// Initialize USART

void USER_USART_Init( uint8_t USART )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	71fb      	strb	r3, [r7, #7]
  /* Only USART1 is clocked with PCLK2 (72 MHz max). Other USARTs are clocked with
  PCLK1 (36 MHz max) */

  if( USART == 0 )
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d138      	bne.n	8003326 <USER_USART_Init+0x82>
  {
    RCC->APB2ENR	|= 	RCC_APB2ENR_USART1EN; 		// Clock enable for USART1
 80032b4:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <USER_USART_Init+0x8c>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <USER_USART_Init+0x8c>)
 80032ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032be:	6193      	str	r3, [r2, #24]

    USER_GPIO_Define(PORTA, 9, OUT_10, OUT_AF_PP);		// Pin PA9 (USART1_TX) as alternate function output push-pull, max speed 10 MHz
 80032c0:	2302      	movs	r3, #2
 80032c2:	2201      	movs	r2, #1
 80032c4:	2109      	movs	r1, #9
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7fe ff0c 	bl	80020e4 <USER_GPIO_Define>

    USER_GPIO_Define(PORTA, 10, INP, INP_PP);			// Pin PA10 (USART1_RX) as input pull-up
 80032cc:	2302      	movs	r3, #2
 80032ce:	2200      	movs	r2, #0
 80032d0:	210a      	movs	r1, #10
 80032d2:	2000      	movs	r0, #0
 80032d4:	f7fe ff06 	bl	80020e4 <USER_GPIO_Define>
    USER_GPIO_Write(PORTA, 10, 1);
 80032d8:	2201      	movs	r2, #1
 80032da:	210a      	movs	r1, #10
 80032dc:	2000      	movs	r0, #0
 80032de:	f7fe ffe9 	bl	80022b4 <USER_GPIO_Write>

    USART1->CR1		|=	 USART_CR1_UE;			// Step 1 - USART enabled
 80032e2:	4b14      	ldr	r3, [pc, #80]	; (8003334 <USER_USART_Init+0x90>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4a13      	ldr	r2, [pc, #76]	; (8003334 <USER_USART_Init+0x90>)
 80032e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032ec:	60d3      	str	r3, [r2, #12]
    USART1->CR1		&=	~USART_CR1_M;			// Step 2 - 8 Data bits
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <USER_USART_Init+0x90>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	4a10      	ldr	r2, [pc, #64]	; (8003334 <USER_USART_Init+0x90>)
 80032f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032f8:	60d3      	str	r3, [r2, #12]
    USART1->CR2		&=	~USART_CR2_STOP;		// Step 3 - 1 Stop bit
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <USER_USART_Init+0x90>)
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <USER_USART_Init+0x90>)
 8003300:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003304:	6113      	str	r3, [r2, #16]
    USART1->BRR		=	 USARTDIV_64MHZ;		// Step 5 - Desired baud rate
 8003306:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <USER_USART_Init+0x90>)
 8003308:	f240 222b 	movw	r2, #555	; 0x22b
 800330c:	609a      	str	r2, [r3, #8]
    USART1->CR1		|= 	 USART_CR1_TE;			// Step 6 - Transmitter enabled
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <USER_USART_Init+0x90>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4a08      	ldr	r2, [pc, #32]	; (8003334 <USER_USART_Init+0x90>)
 8003314:	f043 0308 	orr.w	r3, r3, #8
 8003318:	60d3      	str	r3, [r2, #12]
    USART1->CR1		|=	 USART_CR1_RE;			// Step 7 - Receiver enabled
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <USER_USART_Init+0x90>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	4a05      	ldr	r2, [pc, #20]	; (8003334 <USER_USART_Init+0x90>)
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	60d3      	str	r3, [r2, #12]
  }
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	40013800 	.word	0x40013800

08003338 <_write>:
 *
 * It redirects standard output stream in C to USART peripheral
 * device */

int _write( int file, char *ptr, int len )
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for( DataIdx = 0 ; DataIdx < len; DataIdx++ )
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e00f      	b.n	800336a <_write+0x32>
  {
    while(!( USART1->SR & USART_SR_TXE ));		// Wait until USART_DR is empty
 800334a:	bf00      	nop
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <_write+0x48>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f9      	beq.n	800334c <_write+0x14>
    USART1->DR = *ptr++;				// Transmit data
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	60ba      	str	r2, [r7, #8]
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <_write+0x48>)
 8003362:	605a      	str	r2, [r3, #4]
  for( DataIdx = 0 ; DataIdx < len; DataIdx++ )
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3301      	adds	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	dbeb      	blt.n	800334a <_write+0x12>
  }

  return len;
 8003372:	687b      	ldr	r3, [r7, #4]
}
 8003374:	4618      	mov	r0, r3
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40013800 	.word	0x40013800

08003384 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a06      	ldr	r2, [pc, #24]	; (80033ac <vApplicationGetIdleTaskMemory+0x28>)
 8003394:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800339a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	200002a8 	.word	0x200002a8
 80033b0:	20000348 	.word	0x20000348

080033b4 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80033b4:	b5b0      	push	{r4, r5, r7, lr}
 80033b6:	b0c0      	sub	sp, #256	; 0x100
 80033b8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 80033ba:	f001 f899 	bl	80044f0 <HAL_Init>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */

  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80033be:	4b56      	ldr	r3, [pc, #344]	; (8003518 <main+0x164>)
 80033c0:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 80033c4:	461d      	mov	r5, r3
 80033c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80033d2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f001 fc8a 	bl	8004cf2 <osThreadCreate>
 80033de:	4603      	mov	r3, r0
 80033e0:	4a4e      	ldr	r2, [pc, #312]	; (800351c <main+0x168>)
 80033e2:	6013      	str	r3, [r2, #0]

  osThreadDef(Task2, TASK_2_ADC_Read, osPriorityNormal, 0, 384);
 80033e4:	4b4e      	ldr	r3, [pc, #312]	; (8003520 <main+0x16c>)
 80033e6:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80033ea:	461d      	mov	r5, r3
 80033ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80033f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fc77 	bl	8004cf2 <osThreadCreate>
 8003404:	4603      	mov	r3, r0
 8003406:	4a47      	ldr	r2, [pc, #284]	; (8003524 <main+0x170>)
 8003408:	6013      	str	r3, [r2, #0]

  osThreadDef(Task4, TASK_4_MODEL_Step, osPriorityNormal, 0, 384);
 800340a:	4b47      	ldr	r3, [pc, #284]	; (8003528 <main+0x174>)
 800340c:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8003410:	461d      	mov	r5, r3
 8003412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003416:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800341a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task4Handle = osThreadCreate(osThread(Task4), NULL);
 800341e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f001 fc64 	bl	8004cf2 <osThreadCreate>
 800342a:	4603      	mov	r3, r0
 800342c:	4a3f      	ldr	r2, [pc, #252]	; (800352c <main+0x178>)
 800342e:	6013      	str	r3, [r2, #0]

  osThreadDef(Task6, TASK_6_DATA_Format, osPriorityNormal, 0, 384);
 8003430:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <main+0x17c>)
 8003432:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8003436:	461d      	mov	r5, r3
 8003438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800343a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800343c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003440:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task6Handle = osThreadCreate(osThread(Task6), NULL);
 8003444:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f001 fc51 	bl	8004cf2 <osThreadCreate>
 8003450:	4603      	mov	r3, r0
 8003452:	4a38      	ldr	r2, [pc, #224]	; (8003534 <main+0x180>)
 8003454:	6013      	str	r3, [r2, #0]

  osThreadDef(Task8, TASK_8_OLED_Write, osPriorityNormal, 0, 384);
 8003456:	4b38      	ldr	r3, [pc, #224]	; (8003538 <main+0x184>)
 8003458:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800345c:	461d      	mov	r5, r3
 800345e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003462:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003466:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task8Handle = osThreadCreate(osThread(Task8), NULL);
 800346a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f001 fc3e 	bl	8004cf2 <osThreadCreate>
 8003476:	4603      	mov	r3, r0
 8003478:	4a30      	ldr	r2, [pc, #192]	; (800353c <main+0x188>)
 800347a:	6013      	str	r3, [r2, #0]

  osThreadDef(Task7, TASK_7_LCD_Write, osPriorityNormal, 0, 384);
 800347c:	4b30      	ldr	r3, [pc, #192]	; (8003540 <main+0x18c>)
 800347e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003482:	461d      	mov	r5, r3
 8003484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003488:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800348c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task7Handle = osThreadCreate(osThread(Task7), NULL);
 8003490:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f001 fc2b 	bl	8004cf2 <osThreadCreate>
 800349c:	4603      	mov	r3, r0
 800349e:	4a29      	ldr	r2, [pc, #164]	; (8003544 <main+0x190>)
 80034a0:	6013      	str	r3, [r2, #0]

  osThreadDef(Task5, TASK_5_UART_Send, osPriorityNormal, 0, 384);
 80034a2:	4b29      	ldr	r3, [pc, #164]	; (8003548 <main+0x194>)
 80034a4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80034a8:	461d      	mov	r5, r3
 80034aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task5Handle = osThreadCreate(osThread(Task5), NULL);
 80034b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 fc18 	bl	8004cf2 <osThreadCreate>
 80034c2:	4603      	mov	r3, r0
 80034c4:	4a21      	ldr	r2, [pc, #132]	; (800354c <main+0x198>)
 80034c6:	6013      	str	r3, [r2, #0]

  osThreadDef(Task3, TASK_3_UART_Read, osPriorityNormal, 0, 384);
 80034c8:	4b21      	ldr	r3, [pc, #132]	; (8003550 <main+0x19c>)
 80034ca:	f107 0420 	add.w	r4, r7, #32
 80034ce:	461d      	mov	r5, r3
 80034d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 80034dc:	f107 0320 	add.w	r3, r7, #32
 80034e0:	2100      	movs	r1, #0
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 fc05 	bl	8004cf2 <osThreadCreate>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4a1a      	ldr	r2, [pc, #104]	; (8003554 <main+0x1a0>)
 80034ec:	6013      	str	r3, [r2, #0]

  osThreadDef(Task1, TASK_1_MATRIX_KEYPAD_Read, osPriorityNormal, 0, 384);
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <main+0x1a4>)
 80034f0:	1d3c      	adds	r4, r7, #4
 80034f2:	461d      	mov	r5, r3
 80034f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	2100      	movs	r1, #0
 8003504:	4618      	mov	r0, r3
 8003506:	f001 fbf4 	bl	8004cf2 <osThreadCreate>
 800350a:	4603      	mov	r3, r0
 800350c:	4a13      	ldr	r2, [pc, #76]	; (800355c <main+0x1a8>)
 800350e:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */

  osKernelStart();
 8003510:	f001 fbd8 	bl	8004cc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8003514:	e7fe      	b.n	8003514 <main+0x160>
 8003516:	bf00      	nop
 8003518:	0800b9a4 	.word	0x0800b9a4
 800351c:	20000548 	.word	0x20000548
 8003520:	0800b9c8 	.word	0x0800b9c8
 8003524:	20000550 	.word	0x20000550
 8003528:	0800b9ec 	.word	0x0800b9ec
 800352c:	20000558 	.word	0x20000558
 8003530:	0800ba10 	.word	0x0800ba10
 8003534:	20000560 	.word	0x20000560
 8003538:	0800ba34 	.word	0x0800ba34
 800353c:	20000568 	.word	0x20000568
 8003540:	0800ba58 	.word	0x0800ba58
 8003544:	20000564 	.word	0x20000564
 8003548:	0800ba7c 	.word	0x0800ba7c
 800354c:	2000055c 	.word	0x2000055c
 8003550:	0800baa0 	.word	0x0800baa0
 8003554:	20000554 	.word	0x20000554
 8003558:	0800bac4 	.word	0x0800bac4
 800355c:	2000054c 	.word	0x2000054c

08003560 <USER_SYSCLK_Configuration>:
}

/* USER CODE BEGIN 4 */

void USER_SYSCLK_Configuration( void )
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* System Clock (SYSCLK) configuration for 64 MHz */

  // Two wait states latency, if SYSCLK > 48 MHz

  FLASH->ACR	&=	~( 0x5UL << 0U );
 8003564:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <USER_SYSCLK_Configuration+0x88>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1f      	ldr	r2, [pc, #124]	; (80035e8 <USER_SYSCLK_Configuration+0x88>)
 800356a:	f023 0305 	bic.w	r3, r3, #5
 800356e:	6013      	str	r3, [r2, #0]
  FLASH->ACR	|=	( 0x2UL << 0U );
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <USER_SYSCLK_Configuration+0x88>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <USER_SYSCLK_Configuration+0x88>)
 8003576:	f043 0302 	orr.w	r3, r3, #2
 800357a:	6013      	str	r3, [r2, #0]

  // PLL HSI clock /2 selected as PLL input clock

  RCC->CFGR	&=	~( 0x1UL << 16U )
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <USER_SYSCLK_Configuration+0x8c>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <USER_SYSCLK_Configuration+0x8c>)
 8003582:	f423 339d 	bic.w	r3, r3, #80384	; 0x13a00
 8003586:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800358a:	6053      	str	r3, [r2, #4]
		&	~( 0x3UL << 8U )        	// APB1 pre-scaler /2 (APB1 must not exceed 36 MHz)
		&	~( 0xFUL << 4U );		// AHB pre-scaler /1

  // PLL input clock x 16 (PLLMUL bits)

  RCC->CFGR	|=	( 0xFUL << 18U )
 800358c:	4b17      	ldr	r3, [pc, #92]	; (80035ec <USER_SYSCLK_Configuration+0x8c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a16      	ldr	r2, [pc, #88]	; (80035ec <USER_SYSCLK_Configuration+0x8c>)
 8003592:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8003596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800359a:	6053      	str	r3, [r2, #4]
		|	( 0X4UL << 8U );		// APB1 pre-scaler /2
  RCC->CR	|=	( 0x1UL << 24U );		// PLL2 ON
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <USER_SYSCLK_Configuration+0x8c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a12      	ldr	r2, [pc, #72]	; (80035ec <USER_SYSCLK_Configuration+0x8c>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a6:	6013      	str	r3, [r2, #0]

  // Wait until PLL is locked

  while( !(RCC->CR & ~( 0x1UL << 25U )));
 80035a8:	bf00      	nop
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <USER_SYSCLK_Configuration+0x8c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f9      	beq.n	80035aa <USER_SYSCLK_Configuration+0x4a>

  // PLL used as system clock (SW bits)

  RCC->CFGR	&=	~( 0x1UL << 0U );
 80035b6:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <USER_SYSCLK_Configuration+0x8c>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <USER_SYSCLK_Configuration+0x8c>)
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	6053      	str	r3, [r2, #4]
  RCC->CFGR	|=	( 0x2UL << 0U );
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <USER_SYSCLK_Configuration+0x8c>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <USER_SYSCLK_Configuration+0x8c>)
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	6053      	str	r3, [r2, #4]

  // Wait until PLL is switched

  while( 0x8UL != ( RCC->CFGR & 0xCUL ));
 80035ce:	bf00      	nop
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <USER_SYSCLK_Configuration+0x8c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d1f9      	bne.n	80035d0 <USER_SYSCLK_Configuration+0x70>
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40022000 	.word	0x40022000
 80035ec:	40021000 	.word	0x40021000

080035f0 <TASK_1_MATRIX_KEYPAD_Read>:
 * micro servo direction and operation mode
 * based on the selected key.
 */

void TASK_1_MATRIX_KEYPAD_Read( void const * argument )
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  USER_SYSCLK_Configuration();
 80035f8:	f7ff ffb2 	bl	8003560 <USER_SYSCLK_Configuration>
  USER_USART_Init( USART_1 );
 80035fc:	2000      	movs	r0, #0
 80035fe:	f7ff fe51 	bl	80032a4 <USER_USART_Init>
  EngTrModel_initialize();
 8003602:	f7fe fd67 	bl	80020d4 <EngTrModel_initialize>

  USER_MATRIX_KEYPAD_Init();
 8003606:	f7ff fa70 	bl	8002aea <USER_MATRIX_KEYPAD_Init>
  USER_LEDS_Init();
 800360a:	f7ff fa51 	bl	8002ab0 <USER_LEDS_Init>
  USER_PWM_Init();
 800360e:	f7ff fcc0 	bl	8002f92 <USER_PWM_Init>

  uint32_t counter = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    selectedKey = USER_MATRIX_KEYPAD_Read();
 8003616:	f7ff fac5 	bl	8002ba4 <USER_MATRIX_KEYPAD_Read>
 800361a:	4603      	mov	r3, r0
 800361c:	461a      	mov	r2, r3
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <TASK_1_MATRIX_KEYPAD_Read+0x10c>)
 8003620:	701a      	strb	r2, [r3, #0]

    if(selectedKey == '5')							// Brake action
 8003622:	4b36      	ldr	r3, [pc, #216]	; (80036fc <TASK_1_MATRIX_KEYPAD_Read+0x10c>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b35      	cmp	r3, #53	; 0x35
 8003628:	d108      	bne.n	800363c <TASK_1_MATRIX_KEYPAD_Read+0x4c>
    {
      keyBrakeTorque = 100.0;							// Full brake torque
 800362a:	4b35      	ldr	r3, [pc, #212]	; (8003700 <TASK_1_MATRIX_KEYPAD_Read+0x110>)
 800362c:	4a35      	ldr	r2, [pc, #212]	; (8003704 <TASK_1_MATRIX_KEYPAD_Read+0x114>)
 800362e:	601a      	str	r2, [r3, #0]

      USER_TIM_Delay( TIM_3, TIM_PSC_200MS, TIM_CNT_200MS );			// LEDs blinking
 8003630:	22e6      	movs	r2, #230	; 0xe6
 8003632:	21c3      	movs	r1, #195	; 0xc3
 8003634:	2001      	movs	r0, #1
 8003636:	f7ff fdbd 	bl	80031b4 <USER_TIM_Delay>
 800363a:	e04d      	b.n	80036d8 <TASK_1_MATRIX_KEYPAD_Read+0xe8>
    }
    else if(selectedKey == '4' || selectedKey == '6')				// Left or right action
 800363c:	4b2f      	ldr	r3, [pc, #188]	; (80036fc <TASK_1_MATRIX_KEYPAD_Read+0x10c>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b34      	cmp	r3, #52	; 0x34
 8003642:	d003      	beq.n	800364c <TASK_1_MATRIX_KEYPAD_Read+0x5c>
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <TASK_1_MATRIX_KEYPAD_Read+0x10c>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b36      	cmp	r3, #54	; 0x36
 800364a:	d120      	bne.n	800368e <TASK_1_MATRIX_KEYPAD_Read+0x9e>
    {
      keyBrakeTorque = 50.0;							// Half brake torque
 800364c:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <TASK_1_MATRIX_KEYPAD_Read+0x110>)
 800364e:	4a2e      	ldr	r2, [pc, #184]	; (8003708 <TASK_1_MATRIX_KEYPAD_Read+0x118>)
 8003650:	601a      	str	r2, [r3, #0]

      if(selectedKey == '4')							// Left action
 8003652:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <TASK_1_MATRIX_KEYPAD_Read+0x10c>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b34      	cmp	r3, #52	; 0x34
 8003658:	d10c      	bne.n	8003674 <TASK_1_MATRIX_KEYPAD_Read+0x84>
      {
	USER_GPIO_Write( PORTC, 2, 1 );						// Left LED turned on
 800365a:	2201      	movs	r2, #1
 800365c:	2102      	movs	r1, #2
 800365e:	2002      	movs	r0, #2
 8003660:	f7fe fe28 	bl	80022b4 <USER_GPIO_Write>
	USER_PWM_Generate( PWM_PSC_20MS, PWM_ARR_20MS, PWM_CCRX_12_5 );		// The micro servo rotates to a 180° position
 8003664:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003668:	f64f 11ff 	movw	r1, #63999	; 0xf9ff
 800366c:	2013      	movs	r0, #19
 800366e:	f7ff fca3 	bl	8002fb8 <USER_PWM_Generate>
      if(selectedKey == '4')							// Left action
 8003672:	e031      	b.n	80036d8 <TASK_1_MATRIX_KEYPAD_Read+0xe8>
      }
      else									// Right action
      {
	USER_GPIO_Write( PORTC, 3, 1 );						// Right LED turned on
 8003674:	2201      	movs	r2, #1
 8003676:	2103      	movs	r1, #3
 8003678:	2002      	movs	r0, #2
 800367a:	f7fe fe1b 	bl	80022b4 <USER_GPIO_Write>
	USER_PWM_Generate( PWM_PSC_20MS, PWM_ARR_20MS, PWM_CCRX_2_5 );		// The micro servo rotates to a 0° position
 800367e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003682:	f64f 11ff 	movw	r1, #63999	; 0xf9ff
 8003686:	2013      	movs	r0, #19
 8003688:	f7ff fc96 	bl	8002fb8 <USER_PWM_Generate>
      if(selectedKey == '4')							// Left action
 800368c:	e024      	b.n	80036d8 <TASK_1_MATRIX_KEYPAD_Read+0xe8>
      }
    }
    else if(selectedKey == 'A')							// Select manual mode action
 800368e:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <TASK_1_MATRIX_KEYPAD_Read+0x10c>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b41      	cmp	r3, #65	; 0x41
 8003694:	d103      	bne.n	800369e <TASK_1_MATRIX_KEYPAD_Read+0xae>
    {
      operationMode = 0;							// Manual mode
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <TASK_1_MATRIX_KEYPAD_Read+0x11c>)
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	e01c      	b.n	80036d8 <TASK_1_MATRIX_KEYPAD_Read+0xe8>
    }
    else if(selectedKey == 'B')							// Select simulation mode action
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <TASK_1_MATRIX_KEYPAD_Read+0x10c>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b42      	cmp	r3, #66	; 0x42
 80036a4:	d103      	bne.n	80036ae <TASK_1_MATRIX_KEYPAD_Read+0xbe>
    {
      operationMode = 1;							// Simulation mode
 80036a6:	4b19      	ldr	r3, [pc, #100]	; (800370c <TASK_1_MATRIX_KEYPAD_Read+0x11c>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e014      	b.n	80036d8 <TASK_1_MATRIX_KEYPAD_Read+0xe8>
    }
    else									// No action
    {
      keyBrakeTorque = 0.0;							// No brake torque
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <TASK_1_MATRIX_KEYPAD_Read+0x110>)
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]

      USER_GPIO_Write( PORTC, 2, 0 );						// LEDs turned off
 80036b6:	2200      	movs	r2, #0
 80036b8:	2102      	movs	r1, #2
 80036ba:	2002      	movs	r0, #2
 80036bc:	f7fe fdfa 	bl	80022b4 <USER_GPIO_Write>
      USER_GPIO_Write( PORTC, 3, 0 );
 80036c0:	2200      	movs	r2, #0
 80036c2:	2103      	movs	r1, #3
 80036c4:	2002      	movs	r0, #2
 80036c6:	f7fe fdf5 	bl	80022b4 <USER_GPIO_Write>

      USER_PWM_Generate( PWM_PSC_20MS, PWM_ARR_20MS, PWM_CCRX_7_5 );		// The micro servo rotates to a 90° position
 80036ca:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80036ce:	f64f 11ff 	movw	r1, #63999	; 0xf9ff
 80036d2:	2013      	movs	r0, #19
 80036d4:	f7ff fc70 	bl	8002fb8 <USER_PWM_Generate>
    }

    osDelay(PERIOD_TASK_1 - TICK_DIFF_TASK_1);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	60fa      	str	r2, [r7, #12]
 80036de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80036e2:	fb02 f403 	mul.w	r4, r2, r3
 80036e6:	f001 faf4 	bl	8004cd2 <osKernelSysTick>
 80036ea:	4603      	mov	r3, r0
 80036ec:	1ae3      	subs	r3, r4, r3
 80036ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 fb49 	bl	8004d8a <osDelay>
    selectedKey = USER_MATRIX_KEYPAD_Read();
 80036f8:	e78d      	b.n	8003616 <TASK_1_MATRIX_KEYPAD_Read+0x26>
 80036fa:	bf00      	nop
 80036fc:	20000018 	.word	0x20000018
 8003700:	2000056c 	.word	0x2000056c
 8003704:	42c80000 	.word	0x42c80000
 8003708:	42480000 	.word	0x42480000
 800370c:	2000057d 	.word	0x2000057d

08003710 <TASK_2_ADC_Read>:
 * and normalize it to within the range accepted by the model,
 * this for manual mode.
 */

void TASK_2_ADC_Read( void const * argument )
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  USER_ADC_Init( ADC_1 );
 8003718:	2000      	movs	r0, #0
 800371a:	f7fd fce1 	bl	80010e0 <USER_ADC_Init>

  uint32_t counter = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    conversionData = USER_ADC_Convert( ADC_1 );
 8003722:	2000      	movs	r0, #0
 8003724:	f7fd fd3c 	bl	80011a0 <USER_ADC_Convert>
 8003728:	4603      	mov	r3, r0
 800372a:	461a      	mov	r2, r3
 800372c:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <TASK_2_ADC_Read+0x88>)
 800372e:	801a      	strh	r2, [r3, #0]
    voltageValue = 0.00080586 * conversionData;
 8003730:	4b19      	ldr	r3, [pc, #100]	; (8003798 <TASK_2_ADC_Read+0x88>)
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc fe65 	bl	8000404 <__aeabi_i2d>
 800373a:	a315      	add	r3, pc, #84	; (adr r3, 8003790 <TASK_2_ADC_Read+0x80>)
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f7fc feca 	bl	80004d8 <__aeabi_dmul>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	f7fd f9bc 	bl	8000ac8 <__aeabi_d2f>
 8003750:	4603      	mov	r3, r0
 8003752:	4a12      	ldr	r2, [pc, #72]	; (800379c <TASK_2_ADC_Read+0x8c>)
 8003754:	6013      	str	r3, [r2, #0]
    potentiometerThrottle = scaleVoltageValue( voltageValue, 0, 3.3 );
 8003756:	4b11      	ldr	r3, [pc, #68]	; (800379c <TASK_2_ADC_Read+0x8c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a11      	ldr	r2, [pc, #68]	; (80037a0 <TASK_2_ADC_Read+0x90>)
 800375c:	f04f 0100 	mov.w	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd fd39 	bl	80011d8 <scaleVoltageValue>
 8003766:	4603      	mov	r3, r0
 8003768:	4a0e      	ldr	r2, [pc, #56]	; (80037a4 <TASK_2_ADC_Read+0x94>)
 800376a:	6013      	str	r3, [r2, #0]

    osDelay(PERIOD_TASK_2 - TICK_DIFF_TASK_2);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	60fa      	str	r2, [r7, #12]
 8003772:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003776:	fb02 f403 	mul.w	r4, r2, r3
 800377a:	f001 faaa 	bl	8004cd2 <osKernelSysTick>
 800377e:	4603      	mov	r3, r0
 8003780:	1ae3      	subs	r3, r4, r3
 8003782:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003786:	4618      	mov	r0, r3
 8003788:	f001 faff 	bl	8004d8a <osDelay>
    conversionData = USER_ADC_Convert( ADC_1 );
 800378c:	e7c9      	b.n	8003722 <TASK_2_ADC_Read+0x12>
 800378e:	bf00      	nop
 8003790:	2c2e064e 	.word	0x2c2e064e
 8003794:	3f4a680b 	.word	0x3f4a680b
 8003798:	20000570 	.word	0x20000570
 800379c:	20000574 	.word	0x20000574
 80037a0:	40533333 	.word	0x40533333
 80037a4:	20000578 	.word	0x20000578

080037a8 <TASK_3_UART_Read>:
/* Read the throttle value sent via UART by the Raspeberry Pi
 * for simulation mode.
 */

void TASK_3_UART_Read( void const * argument )
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    if( USART1->SR & USART_SR_RXNE )						// If USART_DR is not empty
 80037b4:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <TASK_3_UART_Read+0x44>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <TASK_3_UART_Read+0x22>
    {
	receivedThrottle = USART1->DR;						// Receive data
 80037c0:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <TASK_3_UART_Read+0x44>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <TASK_3_UART_Read+0x48>)
 80037c8:	701a      	strb	r2, [r3, #0]
    }

    osDelay(PERIOD_TASK_3 - TICK_DIFF_TASK_3);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	60fa      	str	r2, [r7, #12]
 80037d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037d4:	fb02 f403 	mul.w	r4, r2, r3
 80037d8:	f001 fa7b 	bl	8004cd2 <osKernelSysTick>
 80037dc:	4603      	mov	r3, r0
 80037de:	1ae3      	subs	r3, r4, r3
 80037e0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 fad0 	bl	8004d8a <osDelay>
    if( USART1->SR & USART_SR_RXNE )						// If USART_DR is not empty
 80037ea:	e7e3      	b.n	80037b4 <TASK_3_UART_Read+0xc>
 80037ec:	40013800 	.word	0x40013800
 80037f0:	2000057c 	.word	0x2000057c

080037f4 <TASK_4_MODEL_Step>:
 * and the brake value, take a step and
 * sanitize the output values.
 */

void TASK_4_MODEL_Step( void const * argument )
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    if(operationMode == 0)							// Manual mode
 8003800:	4b4d      	ldr	r3, [pc, #308]	; (8003938 <TASK_4_MODEL_Step+0x144>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <TASK_4_MODEL_Step+0x2a>
    {
      EngTrModel_U.Throttle = potentiometerThrottle;				// Model feed with potentiometer throttle value
 8003808:	4b4c      	ldr	r3, [pc, #304]	; (800393c <TASK_4_MODEL_Step+0x148>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fc fe0b 	bl	8000428 <__aeabi_f2d>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	494a      	ldr	r1, [pc, #296]	; (8003940 <TASK_4_MODEL_Step+0x14c>)
 8003818:	e9c1 2300 	strd	r2, r3, [r1]
 800381c:	e00d      	b.n	800383a <TASK_4_MODEL_Step+0x46>
    }
    else									// Simulation mode
    {
      EngTrModel_U.Throttle = (float) receivedThrottle;				// Model feed with received throttle value
 800381e:	4b49      	ldr	r3, [pc, #292]	; (8003944 <TASK_4_MODEL_Step+0x150>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd fa56 	bl	8000cd4 <__aeabi_ui2f>
 8003828:	4603      	mov	r3, r0
 800382a:	4618      	mov	r0, r3
 800382c:	f7fc fdfc 	bl	8000428 <__aeabi_f2d>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4942      	ldr	r1, [pc, #264]	; (8003940 <TASK_4_MODEL_Step+0x14c>)
 8003836:	e9c1 2300 	strd	r2, r3, [r1]
    }

    EngTrModel_U.BrakeTorque = keyBrakeTorque;					// Model feed with brake value
 800383a:	4b43      	ldr	r3, [pc, #268]	; (8003948 <TASK_4_MODEL_Step+0x154>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fc fdf2 	bl	8000428 <__aeabi_f2d>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	493d      	ldr	r1, [pc, #244]	; (8003940 <TASK_4_MODEL_Step+0x14c>)
 800384a:	e9c1 2302 	strd	r2, r3, [r1, #8]

    EngTrModel_step();								// Take a step
 800384e:	f7fe f967 	bl	8001b20 <EngTrModel_step>

    // Sanitize the output values

    if(isnan(EngTrModel_Y.VehicleSpeed) || EngTrModel_Y.VehicleSpeed < 0 || EngTrModel_Y.VehicleSpeed > 200)
 8003852:	4b3e      	ldr	r3, [pc, #248]	; (800394c <TASK_4_MODEL_Step+0x158>)
 8003854:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	f7fd f8d6 	bl	8000a0c <__aeabi_dcmpun>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <TASK_4_MODEL_Step+0xa0>
 8003866:	4b39      	ldr	r3, [pc, #228]	; (800394c <TASK_4_MODEL_Step+0x158>)
 8003868:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	f7fd f8a2 	bl	80009bc <__aeabi_dcmplt>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <TASK_4_MODEL_Step+0xa0>
 800387e:	4b33      	ldr	r3, [pc, #204]	; (800394c <TASK_4_MODEL_Step+0x158>)
 8003880:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	4b31      	ldr	r3, [pc, #196]	; (8003950 <TASK_4_MODEL_Step+0x15c>)
 800388a:	f7fd f8b5 	bl	80009f8 <__aeabi_dcmpgt>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <TASK_4_MODEL_Step+0xae>
    {
      EngTrModel_Y.VehicleSpeed = 0.0;
 8003894:	492d      	ldr	r1, [pc, #180]	; (800394c <TASK_4_MODEL_Step+0x158>)
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    }

    if(isnan(EngTrModel_Y.EngineSpeed) || EngTrModel_Y.EngineSpeed < 0)
 80038a2:	4b2a      	ldr	r3, [pc, #168]	; (800394c <TASK_4_MODEL_Step+0x158>)
 80038a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	f7fd f8ae 	bl	8000a0c <__aeabi_dcmpun>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <TASK_4_MODEL_Step+0xda>
 80038b6:	4b25      	ldr	r3, [pc, #148]	; (800394c <TASK_4_MODEL_Step+0x158>)
 80038b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	f7fd f87a 	bl	80009bc <__aeabi_dcmplt>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d006      	beq.n	80038dc <TASK_4_MODEL_Step+0xe8>
    {
      EngTrModel_Y.EngineSpeed = 0.0;
 80038ce:	491f      	ldr	r1, [pc, #124]	; (800394c <TASK_4_MODEL_Step+0x158>)
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if(isnan(EngTrModel_Y.Gear) || EngTrModel_Y.Gear < 0)
 80038dc:	4b1b      	ldr	r3, [pc, #108]	; (800394c <TASK_4_MODEL_Step+0x158>)
 80038de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	f7fd f891 	bl	8000a0c <__aeabi_dcmpun>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <TASK_4_MODEL_Step+0x114>
 80038f0:	4b16      	ldr	r3, [pc, #88]	; (800394c <TASK_4_MODEL_Step+0x158>)
 80038f2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	f7fd f85d 	bl	80009bc <__aeabi_dcmplt>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d006      	beq.n	8003916 <TASK_4_MODEL_Step+0x122>
    {
      EngTrModel_Y.Gear = 0.0;
 8003908:	4910      	ldr	r1, [pc, #64]	; (800394c <TASK_4_MODEL_Step+0x158>)
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }

    osDelay(PERIOD_TASK_4 - TICK_DIFF_TASK_4);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	60fa      	str	r2, [r7, #12]
 800391c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003920:	fb02 f403 	mul.w	r4, r2, r3
 8003924:	f001 f9d5 	bl	8004cd2 <osKernelSysTick>
 8003928:	4603      	mov	r3, r0
 800392a:	1ae3      	subs	r3, r4, r3
 800392c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003930:	4618      	mov	r0, r3
 8003932:	f001 fa2a 	bl	8004d8a <osDelay>
    if(operationMode == 0)							// Manual mode
 8003936:	e763      	b.n	8003800 <TASK_4_MODEL_Step+0xc>
 8003938:	2000057d 	.word	0x2000057d
 800393c:	20000578 	.word	0x20000578
 8003940:	20000280 	.word	0x20000280
 8003944:	2000057c 	.word	0x2000057c
 8003948:	2000056c 	.word	0x2000056c
 800394c:	20000290 	.word	0x20000290
 8003950:	40690000 	.word	0x40690000

08003954 <TASK_5_UART_Send>:
/* Send via UART the output values of the model,
 * subsequently received by the Raspberry Pi.
 */

void TASK_5_UART_Send( void const * argument )
{
 8003954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003958:	b08c      	sub	sp, #48	; 0x30
 800395a:	af08      	add	r7, sp, #32
 800395c:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    printf("%f,%f,%f,%f,%f\n\r", potentiometerThrottle, keyBrakeTorque, EngTrModel_Y.VehicleSpeed, EngTrModel_Y.EngineSpeed, EngTrModel_Y.Gear);
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <TASK_5_UART_Send+0x7c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fc fd5e 	bl	8000428 <__aeabi_f2d>
 800396c:	4682      	mov	sl, r0
 800396e:	468b      	mov	fp, r1
 8003970:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <TASK_5_UART_Send+0x80>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fc fd57 	bl	8000428 <__aeabi_f2d>
 800397a:	4680      	mov	r8, r0
 800397c:	4689      	mov	r9, r1
 800397e:	4b16      	ldr	r3, [pc, #88]	; (80039d8 <TASK_5_UART_Send+0x84>)
 8003980:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003984:	4914      	ldr	r1, [pc, #80]	; (80039d8 <TASK_5_UART_Send+0x84>)
 8003986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800398a:	4c13      	ldr	r4, [pc, #76]	; (80039d8 <TASK_5_UART_Send+0x84>)
 800398c:	f104 0510 	add.w	r5, r4, #16
 8003990:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003994:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800399c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039a0:	e9cd 8900 	strd	r8, r9, [sp]
 80039a4:	4652      	mov	r2, sl
 80039a6:	465b      	mov	r3, fp
 80039a8:	480c      	ldr	r0, [pc, #48]	; (80039dc <TASK_5_UART_Send+0x88>)
 80039aa:	f003 fb15 	bl	8006fd8 <iprintf>

    osDelay(PERIOD_TASK_5 - TICK_DIFF_TASK_5);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	60fa      	str	r2, [r7, #12]
 80039b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039b8:	fb02 f403 	mul.w	r4, r2, r3
 80039bc:	f001 f989 	bl	8004cd2 <osKernelSysTick>
 80039c0:	4603      	mov	r3, r0
 80039c2:	1ae3      	subs	r3, r4, r3
 80039c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80039c8:	4618      	mov	r0, r3
 80039ca:	f001 f9de 	bl	8004d8a <osDelay>
    printf("%f,%f,%f,%f,%f\n\r", potentiometerThrottle, keyBrakeTorque, EngTrModel_Y.VehicleSpeed, EngTrModel_Y.EngineSpeed, EngTrModel_Y.Gear);
 80039ce:	e7c8      	b.n	8003962 <TASK_5_UART_Send+0xe>
 80039d0:	20000578 	.word	0x20000578
 80039d4:	2000056c 	.word	0x2000056c
 80039d8:	20000290 	.word	0x20000290
 80039dc:	0800bae0 	.word	0x0800bae0

080039e0 <TASK_6_DATA_Format>:
 * Engine Speed and Vehicle Speed, and cast them
 * alongside Brake and Gear to integers.
 */

void TASK_6_DATA_Format( void const * argument )
{
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    ThrottleWhole = (int) ( potentiometerThrottle );
 80039ec:	4b4b      	ldr	r3, [pc, #300]	; (8003b1c <TASK_6_DATA_Format+0x13c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fd fb17 	bl	8001024 <__aeabi_f2iz>
 80039f6:	4603      	mov	r3, r0
 80039f8:	4a49      	ldr	r2, [pc, #292]	; (8003b20 <TASK_6_DATA_Format+0x140>)
 80039fa:	6013      	str	r3, [r2, #0]
    ThrottleDecimal = (int) ( ( potentiometerThrottle - ThrottleWhole ) * 100 );
 80039fc:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <TASK_6_DATA_Format+0x13c>)
 80039fe:	681c      	ldr	r4, [r3, #0]
 8003a00:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <TASK_6_DATA_Format+0x140>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fd f969 	bl	8000cdc <__aeabi_i2f>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7fd f8ae 	bl	8000b70 <__aeabi_fsub>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4943      	ldr	r1, [pc, #268]	; (8003b24 <TASK_6_DATA_Format+0x144>)
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fd f9b3 	bl	8000d84 <__aeabi_fmul>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fd faff 	bl	8001024 <__aeabi_f2iz>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4a3f      	ldr	r2, [pc, #252]	; (8003b28 <TASK_6_DATA_Format+0x148>)
 8003a2a:	6013      	str	r3, [r2, #0]

    VehicleSpeedWhole = (int)( EngTrModel_Y.VehicleSpeed );
 8003a2c:	4b3f      	ldr	r3, [pc, #252]	; (8003b2c <TASK_6_DATA_Format+0x14c>)
 8003a2e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	f7fc ffff 	bl	8000a38 <__aeabi_d2iz>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4a3c      	ldr	r2, [pc, #240]	; (8003b30 <TASK_6_DATA_Format+0x150>)
 8003a3e:	6013      	str	r3, [r2, #0]
    VehicleSpeedDecimal = (int)( ( EngTrModel_Y.VehicleSpeed - VehicleSpeedWhole ) * 100 );
 8003a40:	4b3a      	ldr	r3, [pc, #232]	; (8003b2c <TASK_6_DATA_Format+0x14c>)
 8003a42:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003a46:	4b3a      	ldr	r3, [pc, #232]	; (8003b30 <TASK_6_DATA_Format+0x150>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fc fcda 	bl	8000404 <__aeabi_i2d>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4620      	mov	r0, r4
 8003a56:	4629      	mov	r1, r5
 8003a58:	f7fc fb86 	bl	8000168 <__aeabi_dsub>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	4b32      	ldr	r3, [pc, #200]	; (8003b34 <TASK_6_DATA_Format+0x154>)
 8003a6a:	f7fc fd35 	bl	80004d8 <__aeabi_dmul>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	f7fc ffdf 	bl	8000a38 <__aeabi_d2iz>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4a2e      	ldr	r2, [pc, #184]	; (8003b38 <TASK_6_DATA_Format+0x158>)
 8003a7e:	6013      	str	r3, [r2, #0]

    EngineSpeedWhole = (int)( EngTrModel_Y.EngineSpeed );
 8003a80:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <TASK_6_DATA_Format+0x14c>)
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	4610      	mov	r0, r2
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f7fc ffd5 	bl	8000a38 <__aeabi_d2iz>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <TASK_6_DATA_Format+0x15c>)
 8003a92:	6013      	str	r3, [r2, #0]
    EngineSpeedDecimal = (int)( ( EngTrModel_Y.EngineSpeed - EngineSpeedWhole ) * 100 );
 8003a94:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <TASK_6_DATA_Format+0x14c>)
 8003a96:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a9a:	4b28      	ldr	r3, [pc, #160]	; (8003b3c <TASK_6_DATA_Format+0x15c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fc fcb0 	bl	8000404 <__aeabi_i2d>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	4629      	mov	r1, r5
 8003aac:	f7fc fb5c 	bl	8000168 <__aeabi_dsub>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <TASK_6_DATA_Format+0x154>)
 8003abe:	f7fc fd0b 	bl	80004d8 <__aeabi_dmul>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f7fc ffb5 	bl	8000a38 <__aeabi_d2iz>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4a1b      	ldr	r2, [pc, #108]	; (8003b40 <TASK_6_DATA_Format+0x160>)
 8003ad2:	6013      	str	r3, [r2, #0]

    BrakeWhole = (int) ( keyBrakeTorque );
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <TASK_6_DATA_Format+0x164>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fd faa3 	bl	8001024 <__aeabi_f2iz>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4a19      	ldr	r2, [pc, #100]	; (8003b48 <TASK_6_DATA_Format+0x168>)
 8003ae2:	6013      	str	r3, [r2, #0]
    GearWhole = (int) ( EngTrModel_Y.Gear );
 8003ae4:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <TASK_6_DATA_Format+0x14c>)
 8003ae6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003aea:	4610      	mov	r0, r2
 8003aec:	4619      	mov	r1, r3
 8003aee:	f7fc ffa3 	bl	8000a38 <__aeabi_d2iz>
 8003af2:	4603      	mov	r3, r0
 8003af4:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <TASK_6_DATA_Format+0x16c>)
 8003af6:	6013      	str	r3, [r2, #0]

    osDelay(PERIOD_TASK_6 - TICK_DIFF_TASK_6);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	60fa      	str	r2, [r7, #12]
 8003afe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b02:	fb02 f403 	mul.w	r4, r2, r3
 8003b06:	f001 f8e4 	bl	8004cd2 <osKernelSysTick>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	1ae3      	subs	r3, r4, r3
 8003b0e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003b12:	4618      	mov	r0, r3
 8003b14:	f001 f939 	bl	8004d8a <osDelay>
    ThrottleWhole = (int) ( potentiometerThrottle );
 8003b18:	e768      	b.n	80039ec <TASK_6_DATA_Format+0xc>
 8003b1a:	bf00      	nop
 8003b1c:	20000578 	.word	0x20000578
 8003b20:	20000580 	.word	0x20000580
 8003b24:	42c80000 	.word	0x42c80000
 8003b28:	20000584 	.word	0x20000584
 8003b2c:	20000290 	.word	0x20000290
 8003b30:	20000588 	.word	0x20000588
 8003b34:	40590000 	.word	0x40590000
 8003b38:	2000058c 	.word	0x2000058c
 8003b3c:	20000590 	.word	0x20000590
 8003b40:	20000594 	.word	0x20000594
 8003b44:	2000056c 	.word	0x2000056c
 8003b48:	20000598 	.word	0x20000598
 8003b4c:	2000059c 	.word	0x2000059c

08003b50 <TASK_7_LCD_Write>:
/* Properly format the model output data
 * and display it on the LCD
 */

void TASK_7_LCD_Write( void const * argument )
{
 8003b50:	b5b0      	push	{r4, r5, r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af04      	add	r7, sp, #16
 8003b56:	6078      	str	r0, [r7, #4]
  USER_TIM_Init( TIM_2 );
 8003b58:	2000      	movs	r0, #0
 8003b5a:	f7ff fa67 	bl	800302c <USER_TIM_Init>
  USER_LCD_Init();
 8003b5e:	f7fe fd89 	bl	8002674 <USER_LCD_Init>

  uint32_t counter = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    // Write the messages to send to the LCD

    snprintf( FirstLine_LCD_MSG, sizeof(FirstLine_LCD_MSG), "%03d.%01d  %03d.%01d m/s", ThrottleWhole, ThrottleDecimal / 10, VehicleSpeedWhole, VehicleSpeedDecimal / 10 );
 8003b66:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <TASK_7_LCD_Write+0xbc>)
 8003b68:	681c      	ldr	r4, [r3, #0]
 8003b6a:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <TASK_7_LCD_Write+0xc0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a29      	ldr	r2, [pc, #164]	; (8003c14 <TASK_7_LCD_Write+0xc4>)
 8003b70:	fb82 1203 	smull	r1, r2, r2, r3
 8003b74:	1092      	asrs	r2, r2, #2
 8003b76:	17db      	asrs	r3, r3, #31
 8003b78:	1ad2      	subs	r2, r2, r3
 8003b7a:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <TASK_7_LCD_Write+0xc8>)
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <TASK_7_LCD_Write+0xcc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4824      	ldr	r0, [pc, #144]	; (8003c14 <TASK_7_LCD_Write+0xc4>)
 8003b84:	fb80 5003 	smull	r5, r0, r0, r3
 8003b88:	1080      	asrs	r0, r0, #2
 8003b8a:	17db      	asrs	r3, r3, #31
 8003b8c:	1ac3      	subs	r3, r0, r3
 8003b8e:	9302      	str	r3, [sp, #8]
 8003b90:	9101      	str	r1, [sp, #4]
 8003b92:	9200      	str	r2, [sp, #0]
 8003b94:	4623      	mov	r3, r4
 8003b96:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <TASK_7_LCD_Write+0xd0>)
 8003b98:	2111      	movs	r1, #17
 8003b9a:	4822      	ldr	r0, [pc, #136]	; (8003c24 <TASK_7_LCD_Write+0xd4>)
 8003b9c:	f003 fa2e 	bl	8006ffc <sniprintf>
    snprintf( SecondLine_LCD_MSG, sizeof(SecondLine_LCD_MSG), "%03d %01d %04d.%01d RPM", BrakeWhole, GearWhole, EngineSpeedWhole, EngineSpeedDecimal / 10 );
 8003ba0:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <TASK_7_LCD_Write+0xd8>)
 8003ba2:	681c      	ldr	r4, [r3, #0]
 8003ba4:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <TASK_7_LCD_Write+0xdc>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4b21      	ldr	r3, [pc, #132]	; (8003c30 <TASK_7_LCD_Write+0xe0>)
 8003baa:	6819      	ldr	r1, [r3, #0]
 8003bac:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <TASK_7_LCD_Write+0xe4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4818      	ldr	r0, [pc, #96]	; (8003c14 <TASK_7_LCD_Write+0xc4>)
 8003bb2:	fb80 5003 	smull	r5, r0, r0, r3
 8003bb6:	1080      	asrs	r0, r0, #2
 8003bb8:	17db      	asrs	r3, r3, #31
 8003bba:	1ac3      	subs	r3, r0, r3
 8003bbc:	9302      	str	r3, [sp, #8]
 8003bbe:	9101      	str	r1, [sp, #4]
 8003bc0:	9200      	str	r2, [sp, #0]
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <TASK_7_LCD_Write+0xe8>)
 8003bc6:	2111      	movs	r1, #17
 8003bc8:	481c      	ldr	r0, [pc, #112]	; (8003c3c <TASK_7_LCD_Write+0xec>)
 8003bca:	f003 fa17 	bl	8006ffc <sniprintf>

    // Display values on the LCD

    LCD_Set_Cursor( 1, 1 );
 8003bce:	2101      	movs	r1, #1
 8003bd0:	2001      	movs	r0, #1
 8003bd2:	f7fe feb5 	bl	8002940 <LCD_Set_Cursor>
    LCD_Put_Str( FirstLine_LCD_MSG );
 8003bd6:	4813      	ldr	r0, [pc, #76]	; (8003c24 <TASK_7_LCD_Write+0xd4>)
 8003bd8:	f7fe fed4 	bl	8002984 <LCD_Put_Str>
    LCD_Set_Cursor( 2, 1 );
 8003bdc:	2101      	movs	r1, #1
 8003bde:	2002      	movs	r0, #2
 8003be0:	f7fe feae 	bl	8002940 <LCD_Set_Cursor>
    LCD_Put_Str( SecondLine_LCD_MSG );
 8003be4:	4815      	ldr	r0, [pc, #84]	; (8003c3c <TASK_7_LCD_Write+0xec>)
 8003be6:	f7fe fecd 	bl	8002984 <LCD_Put_Str>

    osDelay(PERIOD_TASK_7 - TICK_DIFF_TASK_7);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	60fa      	str	r2, [r7, #12]
 8003bf0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bf4:	fb02 f403 	mul.w	r4, r2, r3
 8003bf8:	f001 f86b 	bl	8004cd2 <osKernelSysTick>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	1ae3      	subs	r3, r4, r3
 8003c00:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003c04:	4618      	mov	r0, r3
 8003c06:	f001 f8c0 	bl	8004d8a <osDelay>
    snprintf( FirstLine_LCD_MSG, sizeof(FirstLine_LCD_MSG), "%03d.%01d  %03d.%01d m/s", ThrottleWhole, ThrottleDecimal / 10, VehicleSpeedWhole, VehicleSpeedDecimal / 10 );
 8003c0a:	e7ac      	b.n	8003b66 <TASK_7_LCD_Write+0x16>
 8003c0c:	20000580 	.word	0x20000580
 8003c10:	20000584 	.word	0x20000584
 8003c14:	66666667 	.word	0x66666667
 8003c18:	20000588 	.word	0x20000588
 8003c1c:	2000058c 	.word	0x2000058c
 8003c20:	0800baf4 	.word	0x0800baf4
 8003c24:	200005a0 	.word	0x200005a0
 8003c28:	20000598 	.word	0x20000598
 8003c2c:	2000059c 	.word	0x2000059c
 8003c30:	20000590 	.word	0x20000590
 8003c34:	20000594 	.word	0x20000594
 8003c38:	0800bb10 	.word	0x0800bb10
 8003c3c:	200005b4 	.word	0x200005b4

08003c40 <TASK_8_OLED_Write>:
/* Display the output model data
 *  on the OLED screen.
 */

void TASK_8_OLED_Write( void const * argument )
{
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	6078      	str	r0, [r7, #4]
  USER_OLED_Init_64( I2C_2 );
 8003c48:	2001      	movs	r0, #1
 8003c4a:	f7ff f8f6 	bl	8002e3a <USER_OLED_Init_64>

  uint32_t counter = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    // Write the messages to send to the OLED screen

     if(operationMode == 0)								// Manuel mode
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <TASK_8_OLED_Write+0xe4>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <TASK_8_OLED_Write+0x26>
     {
       snprintf(OLED_MSGS[0], sizeof(OLED_MSGS[0]), "MODE: Man");
 8003c5a:	4a33      	ldr	r2, [pc, #204]	; (8003d28 <TASK_8_OLED_Write+0xe8>)
 8003c5c:	2180      	movs	r1, #128	; 0x80
 8003c5e:	4833      	ldr	r0, [pc, #204]	; (8003d2c <TASK_8_OLED_Write+0xec>)
 8003c60:	f003 f9cc 	bl	8006ffc <sniprintf>
 8003c64:	e004      	b.n	8003c70 <TASK_8_OLED_Write+0x30>
     }
     else										// Simulation mode
     {
       snprintf(OLED_MSGS[0], sizeof(OLED_MSGS[0]), "MODE: Sim");
 8003c66:	4a32      	ldr	r2, [pc, #200]	; (8003d30 <TASK_8_OLED_Write+0xf0>)
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	4830      	ldr	r0, [pc, #192]	; (8003d2c <TASK_8_OLED_Write+0xec>)
 8003c6c:	f003 f9c6 	bl	8006ffc <sniprintf>
     }

     snprintf(OLED_MSGS[1], sizeof(OLED_MSGS[1]), "MANUAL THROTTLE: %03d.%02d", ThrottleWhole, ThrottleDecimal);
 8003c70:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <TASK_8_OLED_Write+0xf4>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b30      	ldr	r3, [pc, #192]	; (8003d38 <TASK_8_OLED_Write+0xf8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	4a2f      	ldr	r2, [pc, #188]	; (8003d3c <TASK_8_OLED_Write+0xfc>)
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	482f      	ldr	r0, [pc, #188]	; (8003d40 <TASK_8_OLED_Write+0x100>)
 8003c82:	f003 f9bb 	bl	8006ffc <sniprintf>
     snprintf(OLED_MSGS[2], sizeof(OLED_MSGS[2]), "SIMULATION THROTTLE: %03d", receivedThrottle);
 8003c86:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <TASK_8_OLED_Write+0x104>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	4a2f      	ldr	r2, [pc, #188]	; (8003d48 <TASK_8_OLED_Write+0x108>)
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	482f      	ldr	r0, [pc, #188]	; (8003d4c <TASK_8_OLED_Write+0x10c>)
 8003c90:	f003 f9b4 	bl	8006ffc <sniprintf>
     snprintf(OLED_MSGS[3], sizeof(OLED_MSGS[3]), "BRAKE: %03d", BrakeWhole);
 8003c94:	4b2e      	ldr	r3, [pc, #184]	; (8003d50 <TASK_8_OLED_Write+0x110>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2e      	ldr	r2, [pc, #184]	; (8003d54 <TASK_8_OLED_Write+0x114>)
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	482e      	ldr	r0, [pc, #184]	; (8003d58 <TASK_8_OLED_Write+0x118>)
 8003c9e:	f003 f9ad 	bl	8006ffc <sniprintf>
     snprintf(OLED_MSGS[4], sizeof(OLED_MSGS[4]), "VEHICLE SPEED: %03d.%02d m/s", VehicleSpeedWhole, VehicleSpeedDecimal);
 8003ca2:	4b2e      	ldr	r3, [pc, #184]	; (8003d5c <TASK_8_OLED_Write+0x11c>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <TASK_8_OLED_Write+0x120>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	4613      	mov	r3, r2
 8003cae:	4a2d      	ldr	r2, [pc, #180]	; (8003d64 <TASK_8_OLED_Write+0x124>)
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	482d      	ldr	r0, [pc, #180]	; (8003d68 <TASK_8_OLED_Write+0x128>)
 8003cb4:	f003 f9a2 	bl	8006ffc <sniprintf>
     snprintf(OLED_MSGS[5], sizeof(OLED_MSGS[5]), "ENGINE SPEED: %04d.%02d RPM", EngineSpeedWhole, EngineSpeedDecimal);
 8003cb8:	4b2c      	ldr	r3, [pc, #176]	; (8003d6c <TASK_8_OLED_Write+0x12c>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b2c      	ldr	r3, [pc, #176]	; (8003d70 <TASK_8_OLED_Write+0x130>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	4a2b      	ldr	r2, [pc, #172]	; (8003d74 <TASK_8_OLED_Write+0x134>)
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	482b      	ldr	r0, [pc, #172]	; (8003d78 <TASK_8_OLED_Write+0x138>)
 8003cca:	f003 f997 	bl	8006ffc <sniprintf>
     snprintf(OLED_MSGS[6], sizeof(OLED_MSGS[6]), "GEAR: %01d", GearWhole);
 8003cce:	4b2b      	ldr	r3, [pc, #172]	; (8003d7c <TASK_8_OLED_Write+0x13c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a2b      	ldr	r2, [pc, #172]	; (8003d80 <TASK_8_OLED_Write+0x140>)
 8003cd4:	2180      	movs	r1, #128	; 0x80
 8003cd6:	482b      	ldr	r0, [pc, #172]	; (8003d84 <TASK_8_OLED_Write+0x144>)
 8003cd8:	f003 f990 	bl	8006ffc <sniprintf>

     // Display values on the OLED screen

     for (int i = 0; i < OLED_MSGS_NUMBER; ++i)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	e00c      	b.n	8003cfc <TASK_8_OLED_Write+0xbc>
     {
       USER_OLED_Message( I2C_2, OLED_MSGS[i], 0, i );
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	01db      	lsls	r3, r3, #7
 8003ce6:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <TASK_8_OLED_Write+0xec>)
 8003ce8:	1899      	adds	r1, r3, r2
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	f7ff f933 	bl	8002f5c <USER_OLED_Message>
     for (int i = 0; i < OLED_MSGS_NUMBER; ++i)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	ddef      	ble.n	8003ce2 <TASK_8_OLED_Write+0xa2>
     }

     osDelay(PERIOD_TASK_8 - TICK_DIFF_TASK_8);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	60fa      	str	r2, [r7, #12]
 8003d08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d0c:	fb02 f403 	mul.w	r4, r2, r3
 8003d10:	f000 ffdf 	bl	8004cd2 <osKernelSysTick>
 8003d14:	4603      	mov	r3, r0
 8003d16:	1ae3      	subs	r3, r4, r3
 8003d18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 f834 	bl	8004d8a <osDelay>
     if(operationMode == 0)								// Manuel mode
 8003d22:	e796      	b.n	8003c52 <TASK_8_OLED_Write+0x12>
 8003d24:	2000057d 	.word	0x2000057d
 8003d28:	0800bb28 	.word	0x0800bb28
 8003d2c:	200005c8 	.word	0x200005c8
 8003d30:	0800bb34 	.word	0x0800bb34
 8003d34:	20000580 	.word	0x20000580
 8003d38:	20000584 	.word	0x20000584
 8003d3c:	0800bb40 	.word	0x0800bb40
 8003d40:	20000648 	.word	0x20000648
 8003d44:	2000057c 	.word	0x2000057c
 8003d48:	0800bb5c 	.word	0x0800bb5c
 8003d4c:	200006c8 	.word	0x200006c8
 8003d50:	20000598 	.word	0x20000598
 8003d54:	0800bb78 	.word	0x0800bb78
 8003d58:	20000748 	.word	0x20000748
 8003d5c:	20000588 	.word	0x20000588
 8003d60:	2000058c 	.word	0x2000058c
 8003d64:	0800bb84 	.word	0x0800bb84
 8003d68:	200007c8 	.word	0x200007c8
 8003d6c:	20000590 	.word	0x20000590
 8003d70:	20000594 	.word	0x20000594
 8003d74:	0800bba4 	.word	0x0800bba4
 8003d78:	20000848 	.word	0x20000848
 8003d7c:	2000059c 	.word	0x2000059c
 8003d80:	0800bbc0 	.word	0x0800bbc0
 8003d84:	200008c8 	.word	0x200008c8

08003d88 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void StartDefaultTask(void const * argument)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003d90:	2001      	movs	r0, #1
 8003d92:	f000 fffa 	bl	8004d8a <osDelay>
 8003d96:	e7fb      	b.n	8003d90 <StartDefaultTask+0x8>

08003d98 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */

  if (htim->Instance == TIM4) {
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a04      	ldr	r2, [pc, #16]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003daa:	f000 fbb7 	bl	800451c <HAL_IncTick>
  }

  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40000800 	.word	0x40000800

08003dbc <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003dc2:	2340      	movs	r3, #64	; 0x40
 8003dc4:	617b      	str	r3, [r7, #20]
  real_T inf = 0.0;
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d10a      	bne.n	8003dee <rtGetInf+0x32>
    inf = rtGetInfF();
 8003dd8:	f000 f836 	bl	8003e48 <rtGetInfF>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc fb22 	bl	8000428 <__aeabi_f2d>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003dec:	e022      	b.n	8003e34 <rtGetInf+0x78>
  } else {
    uint16_T one = 1U;
 8003dee:	2301      	movs	r3, #1
 8003df0:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003df2:	f107 0310 	add.w	r3, r7, #16
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8003e04:	7cfb      	ldrb	r3, [r7, #19]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <rtGetInf+0x54>
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d009      	beq.n	8003e22 <rtGetInf+0x66>
 8003e0e:	e011      	b.n	8003e34 <rtGetInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8003e10:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <rtGetInf+0x88>)
 8003e12:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60bb      	str	r3, [r7, #8]
        inf = tmpVal.fltVal;
 8003e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003e20:	e008      	b.n	8003e34 <rtGetInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8003e22:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <rtGetInf+0x88>)
 8003e24:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	607b      	str	r3, [r7, #4]
        inf = tmpVal.fltVal;
 8003e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003e32:	bf00      	nop
      }
    }
  }

  return inf;
 8003e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	7ff00000 	.word	0x7ff00000

08003e48 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8003e4e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8003e52:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8003e54:	687b      	ldr	r3, [r7, #4]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003e66:	2340      	movs	r3, #64	; 0x40
 8003e68:	617b      	str	r3, [r7, #20]
  real_T minf = 0.0;
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d10a      	bne.n	8003e92 <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 8003e7c:	f000 f836 	bl	8003eec <rtGetMinusInfF>
 8003e80:	4603      	mov	r3, r0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc fad0 	bl	8000428 <__aeabi_f2d>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003e90:	e022      	b.n	8003ed8 <rtGetMinusInf+0x78>
  } else {
    uint16_T one = 1U;
 8003e92:	2301      	movs	r3, #1
 8003e94:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003e96:	f107 0310 	add.w	r3, r7, #16
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	bf14      	ite	ne
 8003ea0:	2301      	movne	r3, #1
 8003ea2:	2300      	moveq	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <rtGetMinusInf+0x54>
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d009      	beq.n	8003ec6 <rtGetMinusInf+0x66>
 8003eb2:	e011      	b.n	8003ed8 <rtGetMinusInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <rtGetMinusInf+0x88>)
 8003eb6:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
        minf = tmpVal.fltVal;
 8003ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ec0:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003ec4:	e008      	b.n	8003ed8 <rtGetMinusInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <rtGetMinusInf+0x88>)
 8003ec8:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	607b      	str	r3, [r7, #4]
        minf = tmpVal.fltVal;
 8003ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ed2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003ed6:	bf00      	nop
      }
    }
  }

  return minf;
 8003ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	fff00000 	.word	0xfff00000

08003eec <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8003ef2:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <rtGetMinusInfF+0x18>)
 8003ef4:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8003ef6:	687b      	ldr	r3, [r7, #4]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	ff800000 	.word	0xff800000

08003f08 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003f0e:	2340      	movs	r3, #64	; 0x40
 8003f10:	617b      	str	r3, [r7, #20]
  real_T nan = 0.0;
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d10a      	bne.n	8003f3a <rtGetNaN+0x32>
    nan = rtGetNaNF();
 8003f24:	f000 f838 	bl	8003f98 <rtGetNaNF>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc fa7c 	bl	8000428 <__aeabi_f2d>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003f38:	e024      	b.n	8003f84 <rtGetNaN+0x7c>
  } else {
    uint16_T one = 1U;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003f3e:	f107 0310 	add.w	r3, r7, #16
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <rtGetNaN+0x54>
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d009      	beq.n	8003f6e <rtGetNaN+0x66>
 8003f5a:	e013      	b.n	8003f84 <rtGetNaN+0x7c>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8003f5c:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <rtGetNaN+0x8c>)
 8003f5e:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60bb      	str	r3, [r7, #8]
        nan = tmpVal.fltVal;
 8003f64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f68:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003f6c:	e00a      	b.n	8003f84 <rtGetNaN+0x7c>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;
 8003f6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003f72:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;
 8003f74:	f04f 33ff 	mov.w	r3, #4294967295
 8003f78:	607b      	str	r3, [r7, #4]
        nan = tmpVal.fltVal;
 8003f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003f82:	bf00      	nop
      }
    }
  }

  return nan;
 8003f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	fff80000 	.word	0xfff80000

08003f98 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]

  uint16_T one = 1U;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	80fb      	strh	r3, [r7, #6]
  enum {
    LittleEndian,
    BigEndian
  } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003fa8:	1dbb      	adds	r3, r7, #6
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	73fb      	strb	r3, [r7, #15]
  switch (machByteOrder) {
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <rtGetNaNF+0x2c>
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d003      	beq.n	8003fca <rtGetNaNF+0x32>
 8003fc2:	e006      	b.n	8003fd2 <rtGetNaNF+0x3a>
   case LittleEndian:
    {
      nanF.wordL.wordLuint = 0xFFC00000U;
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <rtGetNaNF+0x48>)
 8003fc6:	60bb      	str	r3, [r7, #8]
      break;
 8003fc8:	e003      	b.n	8003fd2 <rtGetNaNF+0x3a>
    }

   case BigEndian:
    {
      nanF.wordL.wordLuint = 0x7FFFFFFFU;
 8003fca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003fce:	60bb      	str	r3, [r7, #8]
      break;
 8003fd0:	bf00      	nop
    }
  }

  return nanF.wordL.wordLreal;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	ffc00000 	.word	0xffc00000

08003fe4 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8003fec:	f7ff ff8c 	bl	8003f08 <rtGetNaN>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4911      	ldr	r1, [pc, #68]	; (800403c <rt_InitInfAndNaN+0x58>)
 8003ff6:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 8003ffa:	f7ff ffcd 	bl	8003f98 <rtGetNaNF>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4a0f      	ldr	r2, [pc, #60]	; (8004040 <rt_InitInfAndNaN+0x5c>)
 8004002:	6013      	str	r3, [r2, #0]
  rtInf = rtGetInf();
 8004004:	f7ff feda 	bl	8003dbc <rtGetInf>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	490d      	ldr	r1, [pc, #52]	; (8004044 <rt_InitInfAndNaN+0x60>)
 800400e:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 8004012:	f7ff ff19 	bl	8003e48 <rtGetInfF>
 8004016:	4603      	mov	r3, r0
 8004018:	4a0b      	ldr	r2, [pc, #44]	; (8004048 <rt_InitInfAndNaN+0x64>)
 800401a:	6013      	str	r3, [r2, #0]
  rtMinusInf = rtGetMinusInf();
 800401c:	f7ff ff20 	bl	8003e60 <rtGetMinusInf>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4909      	ldr	r1, [pc, #36]	; (800404c <rt_InitInfAndNaN+0x68>)
 8004026:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 800402a:	f7ff ff5f 	bl	8003eec <rtGetMinusInfF>
 800402e:	4603      	mov	r3, r0
 8004030:	4a07      	ldr	r2, [pc, #28]	; (8004050 <rt_InitInfAndNaN+0x6c>)
 8004032:	6013      	str	r3, [r2, #0]
}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000958 	.word	0x20000958
 8004040:	20000968 	.word	0x20000968
 8004044:	20000948 	.word	0x20000948
 8004048:	20000960 	.word	0x20000960
 800404c:	20000950 	.word	0x20000950
 8004050:	20000964 	.word	0x20000964

08004054 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800405e:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <rtIsInf+0x40>)
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004068:	f7fc fc9e 	bl	80009a8 <__aeabi_dcmpeq>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <rtIsInf+0x32>
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <rtIsInf+0x44>)
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800407c:	f7fc fc94 	bl	80009a8 <__aeabi_dcmpeq>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <rtIsInf+0x36>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <rtIsInf+0x38>
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000948 	.word	0x20000948
 8004098:	20000950 	.word	0x20000950

0800409c <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	e9c7 0100 	strd	r0, r1, [r7]
  boolean_T result = (boolean_T) 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80040ac:	2340      	movs	r3, #64	; 0x40
 80040ae:	623b      	str	r3, [r7, #32]
  if (bitsPerReal == 32U) {
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d10b      	bne.n	80040ce <rtIsNaN+0x32>
    result = rtIsNaNF((real32_T)value);
 80040b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040ba:	f7fc fd05 	bl	8000ac8 <__aeabi_d2f>
 80040be:	4603      	mov	r3, r0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f84d 	bl	8004160 <rtIsNaNF>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040cc:	e040      	b.n	8004150 <rtIsNaN+0xb4>
  } else {
    uint16_T one = 1U;
 80040ce:	2301      	movs	r3, #1
 80040d0:	83bb      	strh	r3, [r7, #28]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80040d2:	f107 031c 	add.w	r3, r7, #28
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	77fb      	strb	r3, [r7, #31]
    switch (machByteOrder) {
 80040e4:	7ffb      	ldrb	r3, [r7, #31]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <rtIsNaN+0x54>
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d018      	beq.n	8004120 <rtIsNaN+0x84>
 80040ee:	e02f      	b.n	8004150 <rtIsNaN+0xb4>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 80040f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4b18      	ldr	r3, [pc, #96]	; (800415c <rtIsNaN+0xc0>)
 80040fc:	4013      	ands	r3, r2
                             0x7FF00000 &&
 80040fe:	4a17      	ldr	r2, [pc, #92]	; (800415c <rtIsNaN+0xc0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d109      	bne.n	8004118 <rtIsNaN+0x7c>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <rtIsNaN+0x78>
                              (tmpVal.bitVal.words.wordL != 0) ));
 800410e:	693b      	ldr	r3, [r7, #16]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <rtIsNaN+0x7c>
                             0x7FF00000 &&
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <rtIsNaN+0x7e>
 8004118:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800411a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 800411e:	e017      	b.n	8004150 <rtIsNaN+0xb4>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8004120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004124:	e9c7 2302 	strd	r2, r3, [r7, #8]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	4b0c      	ldr	r3, [pc, #48]	; (800415c <rtIsNaN+0xc0>)
 800412c:	4013      	ands	r3, r2
                             0x7FF00000 &&
 800412e:	4a0b      	ldr	r2, [pc, #44]	; (800415c <rtIsNaN+0xc0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d109      	bne.n	8004148 <rtIsNaN+0xac>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <rtIsNaN+0xa8>
                              (tmpVal.bitVal.words.wordL != 0) ));
 800413e:	68fb      	ldr	r3, [r7, #12]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <rtIsNaN+0xac>
                             0x7FF00000 &&
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <rtIsNaN+0xae>
 8004148:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800414a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 800414e:	bf00      	nop
      }
    }
  }

  return result;
 8004150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004154:	4618      	mov	r0, r3
 8004156:	3728      	adds	r7, #40	; 0x28
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	7ff00000 	.word	0x7ff00000

08004160 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8004172:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004176:	d106      	bne.n	8004186 <rtIsNaNF+0x26>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <rtIsNaNF+0x26>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <rtIsNaNF+0x28>
 8004186:	2300      	movs	r3, #0
 8004188:	b2db      	uxtb	r3, r3
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800419a:	4b18      	ldr	r3, [pc, #96]	; (80041fc <HAL_MspInit+0x68>)
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	4a17      	ldr	r2, [pc, #92]	; (80041fc <HAL_MspInit+0x68>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6193      	str	r3, [r2, #24]
 80041a6:	4b15      	ldr	r3, [pc, #84]	; (80041fc <HAL_MspInit+0x68>)
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <HAL_MspInit+0x68>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	4a11      	ldr	r2, [pc, #68]	; (80041fc <HAL_MspInit+0x68>)
 80041b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041bc:	61d3      	str	r3, [r2, #28]
 80041be:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <HAL_MspInit+0x68>)
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80041ca:	2200      	movs	r2, #0
 80041cc:	210f      	movs	r1, #15
 80041ce:	f06f 0001 	mvn.w	r0, #1
 80041d2:	f000 fa6a 	bl	80046aa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041d6:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <HAL_MspInit+0x6c>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	4a04      	ldr	r2, [pc, #16]	; (8004200 <HAL_MspInit+0x6c>)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
 8004200:	40010000 	.word	0x40010000

08004204 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08e      	sub	sp, #56	; 0x38
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800421a:	4b34      	ldr	r3, [pc, #208]	; (80042ec <HAL_InitTick+0xe8>)
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	4a33      	ldr	r2, [pc, #204]	; (80042ec <HAL_InitTick+0xe8>)
 8004220:	f043 0304 	orr.w	r3, r3, #4
 8004224:	61d3      	str	r3, [r2, #28]
 8004226:	4b31      	ldr	r3, [pc, #196]	; (80042ec <HAL_InitTick+0xe8>)
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004232:	f107 0210 	add.w	r2, r7, #16
 8004236:	f107 0314 	add.w	r3, r7, #20
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fa9f 	bl	8004780 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d103      	bne.n	8004254 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800424c:	f000 fa84 	bl	8004758 <HAL_RCC_GetPCLK1Freq>
 8004250:	6378      	str	r0, [r7, #52]	; 0x34
 8004252:	e004      	b.n	800425e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004254:	f000 fa80 	bl	8004758 <HAL_RCC_GetPCLK1Freq>
 8004258:	4603      	mov	r3, r0
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004260:	4a23      	ldr	r2, [pc, #140]	; (80042f0 <HAL_InitTick+0xec>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	0c9b      	lsrs	r3, r3, #18
 8004268:	3b01      	subs	r3, #1
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800426c:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <HAL_InitTick+0xf0>)
 800426e:	4a22      	ldr	r2, [pc, #136]	; (80042f8 <HAL_InitTick+0xf4>)
 8004270:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8004272:	4b20      	ldr	r3, [pc, #128]	; (80042f4 <HAL_InitTick+0xf0>)
 8004274:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004278:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800427a:	4a1e      	ldr	r2, [pc, #120]	; (80042f4 <HAL_InitTick+0xf0>)
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004280:	4b1c      	ldr	r3, [pc, #112]	; (80042f4 <HAL_InitTick+0xf0>)
 8004282:	2200      	movs	r2, #0
 8004284:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004286:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <HAL_InitTick+0xf0>)
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800428c:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <HAL_InitTick+0xf0>)
 800428e:	2200      	movs	r2, #0
 8004290:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8004292:	4818      	ldr	r0, [pc, #96]	; (80042f4 <HAL_InitTick+0xf0>)
 8004294:	f000 faa4 	bl	80047e0 <HAL_TIM_Base_Init>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800429e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d11b      	bne.n	80042de <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80042a6:	4813      	ldr	r0, [pc, #76]	; (80042f4 <HAL_InitTick+0xf0>)
 80042a8:	f000 faf2 	bl	8004890 <HAL_TIM_Base_Start_IT>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80042b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d111      	bne.n	80042de <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80042ba:	201e      	movs	r0, #30
 80042bc:	f000 fa11 	bl	80046e2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b0f      	cmp	r3, #15
 80042c4:	d808      	bhi.n	80042d8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80042c6:	2200      	movs	r2, #0
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	201e      	movs	r0, #30
 80042cc:	f000 f9ed 	bl	80046aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80042d0:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <HAL_InitTick+0xf8>)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e002      	b.n	80042de <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80042de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3738      	adds	r7, #56	; 0x38
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000
 80042f0:	431bde83 	.word	0x431bde83
 80042f4:	2000096c 	.word	0x2000096c
 80042f8:	40000800 	.word	0x40000800
 80042fc:	20000020 	.word	0x20000020

08004300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004304:	e7fe      	b.n	8004304 <NMI_Handler+0x4>

08004306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004306:	b480      	push	{r7}
 8004308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800430a:	e7fe      	b.n	800430a <HardFault_Handler+0x4>

0800430c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004310:	e7fe      	b.n	8004310 <MemManage_Handler+0x4>

08004312 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004312:	b480      	push	{r7}
 8004314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004316:	e7fe      	b.n	8004316 <BusFault_Handler+0x4>

08004318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800431c:	e7fe      	b.n	800431c <UsageFault_Handler+0x4>

0800431e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
	...

0800432c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004330:	4802      	ldr	r0, [pc, #8]	; (800433c <TIM4_IRQHandler+0x10>)
 8004332:	f000 faff 	bl	8004934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	2000096c 	.word	0x2000096c

08004340 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004344:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004348:	f000 f9da 	bl	8004700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800434c:	bf00      	nop
 800434e:	bd80      	pop	{r7, pc}

08004350 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return 1;
 8004354:	2301      	movs	r3, #1
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <_kill>:

int _kill(int pid, int sig)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004368:	f002 ff88 	bl	800727c <__errno>
 800436c:	4603      	mov	r3, r0
 800436e:	2216      	movs	r2, #22
 8004370:	601a      	str	r2, [r3, #0]
  return -1;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <_exit>:

void _exit (int status)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004386:	f04f 31ff 	mov.w	r1, #4294967295
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff ffe7 	bl	800435e <_kill>
  while (1) {}    /* Make sure we hang here */
 8004390:	e7fe      	b.n	8004390 <_exit+0x12>

08004392 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e00a      	b.n	80043ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80043a4:	f3af 8000 	nop.w
 80043a8:	4601      	mov	r1, r0
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	60ba      	str	r2, [r7, #8]
 80043b0:	b2ca      	uxtb	r2, r1
 80043b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	3301      	adds	r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	429a      	cmp	r2, r3
 80043c0:	dbf0      	blt.n	80043a4 <_read+0x12>
  }

  return len;
 80043c2:	687b      	ldr	r3, [r7, #4]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <_close>:
  }
  return len;
}

int _close(int file)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043f2:	605a      	str	r2, [r3, #4]
  return 0;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr

08004400 <_isatty>:

int _isatty(int file)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004408:	2301      	movs	r3, #1
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004434:	4a14      	ldr	r2, [pc, #80]	; (8004488 <_sbrk+0x5c>)
 8004436:	4b15      	ldr	r3, [pc, #84]	; (800448c <_sbrk+0x60>)
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004440:	4b13      	ldr	r3, [pc, #76]	; (8004490 <_sbrk+0x64>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004448:	4b11      	ldr	r3, [pc, #68]	; (8004490 <_sbrk+0x64>)
 800444a:	4a12      	ldr	r2, [pc, #72]	; (8004494 <_sbrk+0x68>)
 800444c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800444e:	4b10      	ldr	r3, [pc, #64]	; (8004490 <_sbrk+0x64>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	429a      	cmp	r2, r3
 800445a:	d207      	bcs.n	800446c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800445c:	f002 ff0e 	bl	800727c <__errno>
 8004460:	4603      	mov	r3, r0
 8004462:	220c      	movs	r2, #12
 8004464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	e009      	b.n	8004480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800446c:	4b08      	ldr	r3, [pc, #32]	; (8004490 <_sbrk+0x64>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <_sbrk+0x64>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4413      	add	r3, r2
 800447a:	4a05      	ldr	r2, [pc, #20]	; (8004490 <_sbrk+0x64>)
 800447c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800447e:	68fb      	ldr	r3, [r7, #12]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20005000 	.word	0x20005000
 800448c:	00000400 	.word	0x00000400
 8004490:	200009b4 	.word	0x200009b4
 8004494:	20001858 	.word	0x20001858

08004498 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800449c:	bf00      	nop
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044a4:	f7ff fff8 	bl	8004498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044a8:	480b      	ldr	r0, [pc, #44]	; (80044d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80044aa:	490c      	ldr	r1, [pc, #48]	; (80044dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80044ac:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80044ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044b0:	e002      	b.n	80044b8 <LoopCopyDataInit>

080044b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044b6:	3304      	adds	r3, #4

080044b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044bc:	d3f9      	bcc.n	80044b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044be:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80044c0:	4c09      	ldr	r4, [pc, #36]	; (80044e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044c4:	e001      	b.n	80044ca <LoopFillZerobss>

080044c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044c8:	3204      	adds	r2, #4

080044ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044cc:	d3fb      	bcc.n	80044c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044ce:	f002 fedb 	bl	8007288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044d2:	f7fe ff6f 	bl	80033b4 <main>
  bx lr
 80044d6:	4770      	bx	lr
  ldr r0, =_sdata
 80044d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044dc:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80044e0:	0800caa0 	.word	0x0800caa0
  ldr r2, =_sbss
 80044e4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80044e8:	20001854 	.word	0x20001854

080044ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044ec:	e7fe      	b.n	80044ec <ADC1_2_IRQHandler>
	...

080044f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044f4:	4b08      	ldr	r3, [pc, #32]	; (8004518 <HAL_Init+0x28>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a07      	ldr	r2, [pc, #28]	; (8004518 <HAL_Init+0x28>)
 80044fa:	f043 0310 	orr.w	r3, r3, #16
 80044fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004500:	2003      	movs	r0, #3
 8004502:	f000 f8c7 	bl	8004694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004506:	200f      	movs	r0, #15
 8004508:	f7ff fe7c 	bl	8004204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800450c:	f7ff fe42 	bl	8004194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40022000 	.word	0x40022000

0800451c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_IncTick+0x1c>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	4b05      	ldr	r3, [pc, #20]	; (800453c <HAL_IncTick+0x20>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4413      	add	r3, r2
 800452c:	4a03      	ldr	r2, [pc, #12]	; (800453c <HAL_IncTick+0x20>)
 800452e:	6013      	str	r3, [r2, #0]
}
 8004530:	bf00      	nop
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr
 8004538:	20000024 	.word	0x20000024
 800453c:	200009b8 	.word	0x200009b8

08004540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <__NVIC_SetPriorityGrouping+0x44>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800455c:	4013      	ands	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800456c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004572:	4a04      	ldr	r2, [pc, #16]	; (8004584 <__NVIC_SetPriorityGrouping+0x44>)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	60d3      	str	r3, [r2, #12]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <__NVIC_GetPriorityGrouping+0x18>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	f003 0307 	and.w	r3, r3, #7
}
 8004596:	4618      	mov	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	e000ed00 	.word	0xe000ed00

080045a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	db0b      	blt.n	80045ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	f003 021f 	and.w	r2, r3, #31
 80045bc:	4906      	ldr	r1, [pc, #24]	; (80045d8 <__NVIC_EnableIRQ+0x34>)
 80045be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2001      	movs	r0, #1
 80045c6:	fa00 f202 	lsl.w	r2, r0, r2
 80045ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr
 80045d8:	e000e100 	.word	0xe000e100

080045dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	6039      	str	r1, [r7, #0]
 80045e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	db0a      	blt.n	8004606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	490c      	ldr	r1, [pc, #48]	; (8004628 <__NVIC_SetPriority+0x4c>)
 80045f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fa:	0112      	lsls	r2, r2, #4
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	440b      	add	r3, r1
 8004600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004604:	e00a      	b.n	800461c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	4908      	ldr	r1, [pc, #32]	; (800462c <__NVIC_SetPriority+0x50>)
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	3b04      	subs	r3, #4
 8004614:	0112      	lsls	r2, r2, #4
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	440b      	add	r3, r1
 800461a:	761a      	strb	r2, [r3, #24]
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	e000e100 	.word	0xe000e100
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004630:	b480      	push	{r7}
 8004632:	b089      	sub	sp, #36	; 0x24
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f1c3 0307 	rsb	r3, r3, #7
 800464a:	2b04      	cmp	r3, #4
 800464c:	bf28      	it	cs
 800464e:	2304      	movcs	r3, #4
 8004650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	3304      	adds	r3, #4
 8004656:	2b06      	cmp	r3, #6
 8004658:	d902      	bls.n	8004660 <NVIC_EncodePriority+0x30>
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3b03      	subs	r3, #3
 800465e:	e000      	b.n	8004662 <NVIC_EncodePriority+0x32>
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004664:	f04f 32ff 	mov.w	r2, #4294967295
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43da      	mvns	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	401a      	ands	r2, r3
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004678:	f04f 31ff 	mov.w	r1, #4294967295
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	fa01 f303 	lsl.w	r3, r1, r3
 8004682:	43d9      	mvns	r1, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004688:	4313      	orrs	r3, r2
         );
}
 800468a:	4618      	mov	r0, r3
 800468c:	3724      	adds	r7, #36	; 0x24
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff4f 	bl	8004540 <__NVIC_SetPriorityGrouping>
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4603      	mov	r3, r0
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046bc:	f7ff ff64 	bl	8004588 <__NVIC_GetPriorityGrouping>
 80046c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	6978      	ldr	r0, [r7, #20]
 80046c8:	f7ff ffb2 	bl	8004630 <NVIC_EncodePriority>
 80046cc:	4602      	mov	r2, r0
 80046ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff81 	bl	80045dc <__NVIC_SetPriority>
}
 80046da:	bf00      	nop
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	4603      	mov	r3, r0
 80046ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff57 	bl	80045a4 <__NVIC_EnableIRQ>
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800470a:	4b08      	ldr	r3, [pc, #32]	; (800472c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	4013      	ands	r3, r2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d006      	beq.n	8004724 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004716:	4a05      	ldr	r2, [pc, #20]	; (800472c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f806 	bl	8004730 <HAL_GPIO_EXTI_Callback>
  }
}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40010400 	.word	0x40010400

08004730 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	4603      	mov	r3, r0
 8004738:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr

08004744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004748:	4b02      	ldr	r3, [pc, #8]	; (8004754 <HAL_RCC_GetHCLKFreq+0x10>)
 800474a:	681b      	ldr	r3, [r3, #0]
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr
 8004754:	2000001c 	.word	0x2000001c

08004758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800475c:	f7ff fff2 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 8004760:	4602      	mov	r2, r0
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	0a1b      	lsrs	r3, r3, #8
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	4903      	ldr	r1, [pc, #12]	; (800477c <HAL_RCC_GetPCLK1Freq+0x24>)
 800476e:	5ccb      	ldrb	r3, [r1, r3]
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004774:	4618      	mov	r0, r3
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40021000 	.word	0x40021000
 800477c:	0800c638 	.word	0x0800c638

08004780 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	220f      	movs	r2, #15
 800478e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004790:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <HAL_RCC_GetClockConfig+0x58>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 0203 	and.w	r2, r3, #3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800479c:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <HAL_RCC_GetClockConfig+0x58>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCC_GetClockConfig+0x58>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80047b4:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <HAL_RCC_GetClockConfig+0x58>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	08db      	lsrs	r3, r3, #3
 80047ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_RCC_GetClockConfig+0x5c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0207 	and.w	r2, r3, #7
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	40021000 	.word	0x40021000
 80047dc:	40022000 	.word	0x40022000

080047e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e041      	b.n	8004876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f839 	bl	800487e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f000 f9b4 	bl	8004b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr

08004890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d001      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e03a      	b.n	800491e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a18      	ldr	r2, [pc, #96]	; (8004928 <HAL_TIM_Base_Start_IT+0x98>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00e      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0x58>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d2:	d009      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0x58>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a14      	ldr	r2, [pc, #80]	; (800492c <HAL_TIM_Base_Start_IT+0x9c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0x58>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a13      	ldr	r2, [pc, #76]	; (8004930 <HAL_TIM_Base_Start_IT+0xa0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d111      	bne.n	800490c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b06      	cmp	r3, #6
 80048f8:	d010      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490a:	e007      	b.n	800491c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr
 8004928:	40012c00 	.word	0x40012c00
 800492c:	40000400 	.word	0x40000400
 8004930:	40000800 	.word	0x40000800

08004934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b02      	cmp	r3, #2
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0202 	mvn.w	r2, #2
 8004960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f8ed 	bl	8004b56 <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f8e0 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f8ef 	bl	8004b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b04      	cmp	r3, #4
 800499c:	d122      	bne.n	80049e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d11b      	bne.n	80049e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0204 	mvn.w	r2, #4
 80049b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f8c3 	bl	8004b56 <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f8b6 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f8c5 	bl	8004b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d122      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d11b      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0208 	mvn.w	r2, #8
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f899 	bl	8004b56 <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f88c 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f89b 	bl	8004b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	2b10      	cmp	r3, #16
 8004a44:	d122      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d11b      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0210 	mvn.w	r2, #16
 8004a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2208      	movs	r2, #8
 8004a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f86f 	bl	8004b56 <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f862 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f871 	bl	8004b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d10e      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d107      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0201 	mvn.w	r2, #1
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff f970 	bl	8003d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac2:	2b80      	cmp	r3, #128	; 0x80
 8004ac4:	d10e      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad0:	2b80      	cmp	r3, #128	; 0x80
 8004ad2:	d107      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f8bf 	bl	8004c62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b40      	cmp	r3, #64	; 0x40
 8004af0:	d10e      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d107      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f835 	bl	8004b7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d10e      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d107      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0220 	mvn.w	r2, #32
 8004b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f88a 	bl	8004c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr

08004b56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <TIM_Base_SetConfig+0xb8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00b      	beq.n	8004bbc <TIM_Base_SetConfig+0x30>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004baa:	d007      	beq.n	8004bbc <TIM_Base_SetConfig+0x30>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a26      	ldr	r2, [pc, #152]	; (8004c48 <TIM_Base_SetConfig+0xbc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_Base_SetConfig+0x30>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a25      	ldr	r2, [pc, #148]	; (8004c4c <TIM_Base_SetConfig+0xc0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d108      	bne.n	8004bce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a1c      	ldr	r2, [pc, #112]	; (8004c44 <TIM_Base_SetConfig+0xb8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00b      	beq.n	8004bee <TIM_Base_SetConfig+0x62>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bdc:	d007      	beq.n	8004bee <TIM_Base_SetConfig+0x62>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a19      	ldr	r2, [pc, #100]	; (8004c48 <TIM_Base_SetConfig+0xbc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <TIM_Base_SetConfig+0x62>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a18      	ldr	r2, [pc, #96]	; (8004c4c <TIM_Base_SetConfig+0xc0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d108      	bne.n	8004c00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a07      	ldr	r2, [pc, #28]	; (8004c44 <TIM_Base_SetConfig+0xb8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d103      	bne.n	8004c34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	615a      	str	r2, [r3, #20]
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr
 8004c44:	40012c00 	.word	0x40012c00
 8004c48:	40000400 	.word	0x40000400
 8004c4c:	40000800 	.word	0x40000800

08004c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr

08004c62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c86:	2b84      	cmp	r3, #132	; 0x84
 8004c88:	d005      	beq.n	8004c96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4413      	add	r3, r2
 8004c92:	3303      	adds	r3, #3
 8004c94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c96:	68fb      	ldr	r3, [r7, #12]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca8:	f3ef 8305 	mrs	r3, IPSR
 8004cac:	607b      	str	r3, [r7, #4]
  return(result);
 8004cae:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf14      	ite	ne
 8004cb4:	2301      	movne	r3, #1
 8004cb6:	2300      	moveq	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004cc8:	f000 faf8 	bl	80052bc <vTaskStartScheduler>
  
  return osOK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004cd6:	f7ff ffe4 	bl	8004ca2 <inHandlerMode>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004ce0:	f000 fc0e 	bl	8005500 <xTaskGetTickCountFromISR>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	e002      	b.n	8004cee <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004ce8:	f000 fbfc 	bl	80054e4 <xTaskGetTickCount>
 8004cec:	4603      	mov	r3, r0
  }
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cf4:	b089      	sub	sp, #36	; 0x24
 8004cf6:	af04      	add	r7, sp, #16
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d020      	beq.n	8004d46 <osThreadCreate+0x54>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01c      	beq.n	8004d46 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685c      	ldr	r4, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691e      	ldr	r6, [r3, #16]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff ffa8 	bl	8004c74 <makeFreeRtosPriority>
 8004d24:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d2e:	9202      	str	r2, [sp, #8]
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	9100      	str	r1, [sp, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	4632      	mov	r2, r6
 8004d38:	4629      	mov	r1, r5
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f000 f8e8 	bl	8004f10 <xTaskCreateStatic>
 8004d40:	4603      	mov	r3, r0
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	e01c      	b.n	8004d80 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685c      	ldr	r4, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d52:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff ff8a 	bl	8004c74 <makeFreeRtosPriority>
 8004d60:	4602      	mov	r2, r0
 8004d62:	f107 030c 	add.w	r3, r7, #12
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	9200      	str	r2, [sp, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	4629      	mov	r1, r5
 8004d70:	4620      	mov	r0, r4
 8004d72:	f000 f929 	bl	8004fc8 <xTaskCreate>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d001      	beq.n	8004d80 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d80:	68fb      	ldr	r3, [r7, #12]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d8a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <osDelay+0x16>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	e000      	b.n	8004da2 <osDelay+0x18>
 8004da0:	2301      	movs	r3, #1
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fa56 	bl	8005254 <vTaskDelay>
  
  return osOK;
 8004da8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f103 0208 	add.w	r2, r3, #8
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f103 0208 	add.w	r2, r3, #8
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f103 0208 	add.w	r2, r3, #8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	601a      	str	r2, [r3, #0]
}
 8004e44:	bf00      	nop
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr

08004e4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b085      	sub	sp, #20
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d103      	bne.n	8004e6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e00c      	b.n	8004e88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3308      	adds	r3, #8
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e002      	b.n	8004e7c <vListInsert+0x2e>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d2f6      	bcs.n	8004e76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	601a      	str	r2, [r3, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr

08004ebe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6892      	ldr	r2, [r2, #8]
 8004ed4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6852      	ldr	r2, [r2, #4]
 8004ede:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d103      	bne.n	8004ef2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	1e5a      	subs	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr

08004f10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08e      	sub	sp, #56	; 0x38
 8004f14:	af04      	add	r7, sp, #16
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f36:	bf00      	nop
 8004f38:	e7fe      	b.n	8004f38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10a      	bne.n	8004f56 <xTaskCreateStatic+0x46>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	61fb      	str	r3, [r7, #28]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f56:	23a0      	movs	r3, #160	; 0xa0
 8004f58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	2ba0      	cmp	r3, #160	; 0xa0
 8004f5e:	d00a      	beq.n	8004f76 <xTaskCreateStatic+0x66>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	61bb      	str	r3, [r7, #24]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01e      	beq.n	8004fba <xTaskCreateStatic+0xaa>
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01b      	beq.n	8004fba <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f94:	2300      	movs	r3, #0
 8004f96:	9303      	str	r3, [sp, #12]
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	9302      	str	r3, [sp, #8]
 8004f9c:	f107 0314 	add.w	r3, r7, #20
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f851 	bl	8005054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fb4:	f000 f8e4 	bl	8005180 <prvAddNewTaskToReadyList>
 8004fb8:	e001      	b.n	8004fbe <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fbe:	697b      	ldr	r3, [r7, #20]
	}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3728      	adds	r7, #40	; 0x28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08c      	sub	sp, #48	; 0x30
 8004fcc:	af04      	add	r7, sp, #16
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fef5 	bl	8005dcc <pvPortMalloc>
 8004fe2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00e      	beq.n	8005008 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004fea:	20a0      	movs	r0, #160	; 0xa0
 8004fec:	f000 feee 	bl	8005dcc <pvPortMalloc>
 8004ff0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8004ffe:	e005      	b.n	800500c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005000:	6978      	ldr	r0, [r7, #20]
 8005002:	f000 ffa7 	bl	8005f54 <vPortFree>
 8005006:	e001      	b.n	800500c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005008:	2300      	movs	r3, #0
 800500a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d017      	beq.n	8005042 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	2300      	movs	r3, #0
 800501e:	9303      	str	r3, [sp, #12]
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	9302      	str	r3, [sp, #8]
 8005024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f80f 	bl	8005054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005036:	69f8      	ldr	r0, [r7, #28]
 8005038:	f000 f8a2 	bl	8005180 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800503c:	2301      	movs	r3, #1
 800503e:	61bb      	str	r3, [r7, #24]
 8005040:	e002      	b.n	8005048 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005042:	f04f 33ff 	mov.w	r3, #4294967295
 8005046:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005048:	69bb      	ldr	r3, [r7, #24]
	}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800506c:	3b01      	subs	r3, #1
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f023 0307 	bic.w	r3, r3, #7
 800507a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	617b      	str	r3, [r7, #20]
}
 8005098:	bf00      	nop
 800509a:	e7fe      	b.n	800509a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800509c:	2300      	movs	r3, #0
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	e012      	b.n	80050c8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	7819      	ldrb	r1, [r3, #0]
 80050aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	4413      	add	r3, r2
 80050b0:	3334      	adds	r3, #52	; 0x34
 80050b2:	460a      	mov	r2, r1
 80050b4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	4413      	add	r3, r2
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d006      	beq.n	80050d0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3301      	adds	r3, #1
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d9e9      	bls.n	80050a2 <prvInitialiseNewTask+0x4e>
 80050ce:	e000      	b.n	80050d2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80050d0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	2b06      	cmp	r3, #6
 80050de:	d901      	bls.n	80050e4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050e0:	2306      	movs	r3, #6
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	2200      	movs	r2, #0
 80050f4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	3304      	adds	r3, #4
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fe78 	bl	8004df0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	3318      	adds	r3, #24
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff fe73 	bl	8004df0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	f1c3 0207 	rsb	r2, r3, #7
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800511e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	2200      	movs	r2, #0
 8005124:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	2200      	movs	r2, #0
 800512c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	334c      	adds	r3, #76	; 0x4c
 8005134:	224c      	movs	r2, #76	; 0x4c
 8005136:	2100      	movs	r1, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f001 fff6 	bl	800712a <memset>
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	4a0c      	ldr	r2, [pc, #48]	; (8005174 <prvInitialiseNewTask+0x120>)
 8005142:	651a      	str	r2, [r3, #80]	; 0x50
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	4a0c      	ldr	r2, [pc, #48]	; (8005178 <prvInitialiseNewTask+0x124>)
 8005148:	655a      	str	r2, [r3, #84]	; 0x54
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	4a0b      	ldr	r2, [pc, #44]	; (800517c <prvInitialiseNewTask+0x128>)
 800514e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	68f9      	ldr	r1, [r7, #12]
 8005154:	69b8      	ldr	r0, [r7, #24]
 8005156:	f000 fc49 	bl	80059ec <pxPortInitialiseStack>
 800515a:	4602      	mov	r2, r0
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800516c:	bf00      	nop
 800516e:	3720      	adds	r7, #32
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20001708 	.word	0x20001708
 8005178:	20001770 	.word	0x20001770
 800517c:	200017d8 	.word	0x200017d8

08005180 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005188:	f000 fd20 	bl	8005bcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800518c:	4b2a      	ldr	r3, [pc, #168]	; (8005238 <prvAddNewTaskToReadyList+0xb8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3301      	adds	r3, #1
 8005192:	4a29      	ldr	r2, [pc, #164]	; (8005238 <prvAddNewTaskToReadyList+0xb8>)
 8005194:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005196:	4b29      	ldr	r3, [pc, #164]	; (800523c <prvAddNewTaskToReadyList+0xbc>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800519e:	4a27      	ldr	r2, [pc, #156]	; (800523c <prvAddNewTaskToReadyList+0xbc>)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051a4:	4b24      	ldr	r3, [pc, #144]	; (8005238 <prvAddNewTaskToReadyList+0xb8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d110      	bne.n	80051ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051ac:	f000 faf2 	bl	8005794 <prvInitialiseTaskLists>
 80051b0:	e00d      	b.n	80051ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051b2:	4b23      	ldr	r3, [pc, #140]	; (8005240 <prvAddNewTaskToReadyList+0xc0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d109      	bne.n	80051ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051ba:	4b20      	ldr	r3, [pc, #128]	; (800523c <prvAddNewTaskToReadyList+0xbc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d802      	bhi.n	80051ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051c8:	4a1c      	ldr	r2, [pc, #112]	; (800523c <prvAddNewTaskToReadyList+0xbc>)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051ce:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <prvAddNewTaskToReadyList+0xc4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3301      	adds	r3, #1
 80051d4:	4a1b      	ldr	r2, [pc, #108]	; (8005244 <prvAddNewTaskToReadyList+0xc4>)
 80051d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	2201      	movs	r2, #1
 80051de:	409a      	lsls	r2, r3
 80051e0:	4b19      	ldr	r3, [pc, #100]	; (8005248 <prvAddNewTaskToReadyList+0xc8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	4a18      	ldr	r2, [pc, #96]	; (8005248 <prvAddNewTaskToReadyList+0xc8>)
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4a15      	ldr	r2, [pc, #84]	; (800524c <prvAddNewTaskToReadyList+0xcc>)
 80051f8:	441a      	add	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4619      	mov	r1, r3
 8005200:	4610      	mov	r0, r2
 8005202:	f7ff fe01 	bl	8004e08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005206:	f000 fd11 	bl	8005c2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800520a:	4b0d      	ldr	r3, [pc, #52]	; (8005240 <prvAddNewTaskToReadyList+0xc0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00e      	beq.n	8005230 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005212:	4b0a      	ldr	r3, [pc, #40]	; (800523c <prvAddNewTaskToReadyList+0xbc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	429a      	cmp	r2, r3
 800521e:	d207      	bcs.n	8005230 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <prvAddNewTaskToReadyList+0xd0>)
 8005222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000abc 	.word	0x20000abc
 800523c:	200009bc 	.word	0x200009bc
 8005240:	20000ac8 	.word	0x20000ac8
 8005244:	20000ad8 	.word	0x20000ad8
 8005248:	20000ac4 	.word	0x20000ac4
 800524c:	200009c0 	.word	0x200009c0
 8005250:	e000ed04 	.word	0xe000ed04

08005254 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d017      	beq.n	8005296 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005266:	4b13      	ldr	r3, [pc, #76]	; (80052b4 <vTaskDelay+0x60>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <vTaskDelay+0x30>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	60bb      	str	r3, [r7, #8]
}
 8005280:	bf00      	nop
 8005282:	e7fe      	b.n	8005282 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005284:	f000 f884 	bl	8005390 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005288:	2100      	movs	r1, #0
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fb48 	bl	8005920 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005290:	f000 f88c 	bl	80053ac <xTaskResumeAll>
 8005294:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d107      	bne.n	80052ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800529c:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <vTaskDelay+0x64>)
 800529e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052ac:	bf00      	nop
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	20000ae4 	.word	0x20000ae4
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	; 0x28
 80052c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052ca:	463a      	mov	r2, r7
 80052cc:	1d39      	adds	r1, r7, #4
 80052ce:	f107 0308 	add.w	r3, r7, #8
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe f856 	bl	8003384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	9202      	str	r2, [sp, #8]
 80052e0:	9301      	str	r3, [sp, #4]
 80052e2:	2300      	movs	r3, #0
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	2300      	movs	r3, #0
 80052e8:	460a      	mov	r2, r1
 80052ea:	4921      	ldr	r1, [pc, #132]	; (8005370 <vTaskStartScheduler+0xb4>)
 80052ec:	4821      	ldr	r0, [pc, #132]	; (8005374 <vTaskStartScheduler+0xb8>)
 80052ee:	f7ff fe0f 	bl	8004f10 <xTaskCreateStatic>
 80052f2:	4603      	mov	r3, r0
 80052f4:	4a20      	ldr	r2, [pc, #128]	; (8005378 <vTaskStartScheduler+0xbc>)
 80052f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052f8:	4b1f      	ldr	r3, [pc, #124]	; (8005378 <vTaskStartScheduler+0xbc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005300:	2301      	movs	r3, #1
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	e001      	b.n	800530a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d11b      	bne.n	8005348 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	613b      	str	r3, [r7, #16]
}
 8005322:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005324:	4b15      	ldr	r3, [pc, #84]	; (800537c <vTaskStartScheduler+0xc0>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	334c      	adds	r3, #76	; 0x4c
 800532a:	4a15      	ldr	r2, [pc, #84]	; (8005380 <vTaskStartScheduler+0xc4>)
 800532c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800532e:	4b15      	ldr	r3, [pc, #84]	; (8005384 <vTaskStartScheduler+0xc8>)
 8005330:	f04f 32ff 	mov.w	r2, #4294967295
 8005334:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <vTaskStartScheduler+0xcc>)
 8005338:	2201      	movs	r2, #1
 800533a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800533c:	4b13      	ldr	r3, [pc, #76]	; (800538c <vTaskStartScheduler+0xd0>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005342:	f000 fbd1 	bl	8005ae8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005346:	e00e      	b.n	8005366 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d10a      	bne.n	8005366 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	60fb      	str	r3, [r7, #12]
}
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <vTaskStartScheduler+0xa8>
}
 8005366:	bf00      	nop
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	0800bbcc 	.word	0x0800bbcc
 8005374:	08005765 	.word	0x08005765
 8005378:	20000ae0 	.word	0x20000ae0
 800537c:	200009bc 	.word	0x200009bc
 8005380:	20000084 	.word	0x20000084
 8005384:	20000adc 	.word	0x20000adc
 8005388:	20000ac8 	.word	0x20000ac8
 800538c:	20000ac0 	.word	0x20000ac0

08005390 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005394:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <vTaskSuspendAll+0x18>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	4a03      	ldr	r2, [pc, #12]	; (80053a8 <vTaskSuspendAll+0x18>)
 800539c:	6013      	str	r3, [r2, #0]
}
 800539e:	bf00      	nop
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000ae4 	.word	0x20000ae4

080053ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053ba:	4b41      	ldr	r3, [pc, #260]	; (80054c0 <xTaskResumeAll+0x114>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10a      	bne.n	80053d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	603b      	str	r3, [r7, #0]
}
 80053d4:	bf00      	nop
 80053d6:	e7fe      	b.n	80053d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053d8:	f000 fbf8 	bl	8005bcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053dc:	4b38      	ldr	r3, [pc, #224]	; (80054c0 <xTaskResumeAll+0x114>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	4a37      	ldr	r2, [pc, #220]	; (80054c0 <xTaskResumeAll+0x114>)
 80053e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053e6:	4b36      	ldr	r3, [pc, #216]	; (80054c0 <xTaskResumeAll+0x114>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d161      	bne.n	80054b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053ee:	4b35      	ldr	r3, [pc, #212]	; (80054c4 <xTaskResumeAll+0x118>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d05d      	beq.n	80054b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053f6:	e02e      	b.n	8005456 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80053f8:	4b33      	ldr	r3, [pc, #204]	; (80054c8 <xTaskResumeAll+0x11c>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3318      	adds	r3, #24
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff fd5a 	bl	8004ebe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3304      	adds	r3, #4
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff fd55 	bl	8004ebe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	2201      	movs	r2, #1
 800541a:	409a      	lsls	r2, r3
 800541c:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <xTaskResumeAll+0x120>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4313      	orrs	r3, r2
 8005422:	4a2a      	ldr	r2, [pc, #168]	; (80054cc <xTaskResumeAll+0x120>)
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4a27      	ldr	r2, [pc, #156]	; (80054d0 <xTaskResumeAll+0x124>)
 8005434:	441a      	add	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3304      	adds	r3, #4
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f7ff fce3 	bl	8004e08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005446:	4b23      	ldr	r3, [pc, #140]	; (80054d4 <xTaskResumeAll+0x128>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005450:	4b21      	ldr	r3, [pc, #132]	; (80054d8 <xTaskResumeAll+0x12c>)
 8005452:	2201      	movs	r2, #1
 8005454:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005456:	4b1c      	ldr	r3, [pc, #112]	; (80054c8 <xTaskResumeAll+0x11c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1cc      	bne.n	80053f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005464:	f000 fa38 	bl	80058d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005468:	4b1c      	ldr	r3, [pc, #112]	; (80054dc <xTaskResumeAll+0x130>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d010      	beq.n	8005496 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005474:	f000 f856 	bl	8005524 <xTaskIncrementTick>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800547e:	4b16      	ldr	r3, [pc, #88]	; (80054d8 <xTaskResumeAll+0x12c>)
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3b01      	subs	r3, #1
 8005488:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f1      	bne.n	8005474 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005490:	4b12      	ldr	r3, [pc, #72]	; (80054dc <xTaskResumeAll+0x130>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005496:	4b10      	ldr	r3, [pc, #64]	; (80054d8 <xTaskResumeAll+0x12c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800549e:	2301      	movs	r3, #1
 80054a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054a2:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <xTaskResumeAll+0x134>)
 80054a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054b2:	f000 fbbb 	bl	8005c2c <vPortExitCritical>

	return xAlreadyYielded;
 80054b6:	68bb      	ldr	r3, [r7, #8]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000ae4 	.word	0x20000ae4
 80054c4:	20000abc 	.word	0x20000abc
 80054c8:	20000a7c 	.word	0x20000a7c
 80054cc:	20000ac4 	.word	0x20000ac4
 80054d0:	200009c0 	.word	0x200009c0
 80054d4:	200009bc 	.word	0x200009bc
 80054d8:	20000ad0 	.word	0x20000ad0
 80054dc:	20000acc 	.word	0x20000acc
 80054e0:	e000ed04 	.word	0xe000ed04

080054e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054ea:	4b04      	ldr	r3, [pc, #16]	; (80054fc <xTaskGetTickCount+0x18>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054f0:	687b      	ldr	r3, [r7, #4]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr
 80054fc:	20000ac0 	.word	0x20000ac0

08005500 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005506:	f000 fc23 	bl	8005d50 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800550a:	2300      	movs	r3, #0
 800550c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800550e:	4b04      	ldr	r3, [pc, #16]	; (8005520 <xTaskGetTickCountFromISR+0x20>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005514:	683b      	ldr	r3, [r7, #0]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20000ac0 	.word	0x20000ac0

08005524 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800552e:	4b51      	ldr	r3, [pc, #324]	; (8005674 <xTaskIncrementTick+0x150>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f040 808d 	bne.w	8005652 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005538:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <xTaskIncrementTick+0x154>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3301      	adds	r3, #1
 800553e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005540:	4a4d      	ldr	r2, [pc, #308]	; (8005678 <xTaskIncrementTick+0x154>)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d120      	bne.n	800558e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800554c:	4b4b      	ldr	r3, [pc, #300]	; (800567c <xTaskIncrementTick+0x158>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <xTaskIncrementTick+0x48>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	603b      	str	r3, [r7, #0]
}
 8005568:	bf00      	nop
 800556a:	e7fe      	b.n	800556a <xTaskIncrementTick+0x46>
 800556c:	4b43      	ldr	r3, [pc, #268]	; (800567c <xTaskIncrementTick+0x158>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	4b43      	ldr	r3, [pc, #268]	; (8005680 <xTaskIncrementTick+0x15c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a41      	ldr	r2, [pc, #260]	; (800567c <xTaskIncrementTick+0x158>)
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	4a41      	ldr	r2, [pc, #260]	; (8005680 <xTaskIncrementTick+0x15c>)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	4b40      	ldr	r3, [pc, #256]	; (8005684 <xTaskIncrementTick+0x160>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3301      	adds	r3, #1
 8005586:	4a3f      	ldr	r2, [pc, #252]	; (8005684 <xTaskIncrementTick+0x160>)
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	f000 f9a5 	bl	80058d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800558e:	4b3e      	ldr	r3, [pc, #248]	; (8005688 <xTaskIncrementTick+0x164>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	429a      	cmp	r2, r3
 8005596:	d34d      	bcc.n	8005634 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005598:	4b38      	ldr	r3, [pc, #224]	; (800567c <xTaskIncrementTick+0x158>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <xTaskIncrementTick+0x82>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <xTaskIncrementTick+0x84>
 80055a6:	2300      	movs	r3, #0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ac:	4b36      	ldr	r3, [pc, #216]	; (8005688 <xTaskIncrementTick+0x164>)
 80055ae:	f04f 32ff 	mov.w	r2, #4294967295
 80055b2:	601a      	str	r2, [r3, #0]
					break;
 80055b4:	e03e      	b.n	8005634 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055b6:	4b31      	ldr	r3, [pc, #196]	; (800567c <xTaskIncrementTick+0x158>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d203      	bcs.n	80055d6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055ce:	4a2e      	ldr	r2, [pc, #184]	; (8005688 <xTaskIncrementTick+0x164>)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6013      	str	r3, [r2, #0]
						break;
 80055d4:	e02e      	b.n	8005634 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	3304      	adds	r3, #4
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fc6f 	bl	8004ebe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d004      	beq.n	80055f2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	3318      	adds	r3, #24
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fc66 	bl	8004ebe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	2201      	movs	r2, #1
 80055f8:	409a      	lsls	r2, r3
 80055fa:	4b24      	ldr	r3, [pc, #144]	; (800568c <xTaskIncrementTick+0x168>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4313      	orrs	r3, r2
 8005600:	4a22      	ldr	r2, [pc, #136]	; (800568c <xTaskIncrementTick+0x168>)
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <xTaskIncrementTick+0x16c>)
 8005612:	441a      	add	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f7ff fbf4 	bl	8004e08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005624:	4b1b      	ldr	r3, [pc, #108]	; (8005694 <xTaskIncrementTick+0x170>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	429a      	cmp	r2, r3
 800562c:	d3b4      	bcc.n	8005598 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800562e:	2301      	movs	r3, #1
 8005630:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005632:	e7b1      	b.n	8005598 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005634:	4b17      	ldr	r3, [pc, #92]	; (8005694 <xTaskIncrementTick+0x170>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563a:	4915      	ldr	r1, [pc, #84]	; (8005690 <xTaskIncrementTick+0x16c>)
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d907      	bls.n	800565c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800564c:	2301      	movs	r3, #1
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	e004      	b.n	800565c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005652:	4b11      	ldr	r3, [pc, #68]	; (8005698 <xTaskIncrementTick+0x174>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	4a0f      	ldr	r2, [pc, #60]	; (8005698 <xTaskIncrementTick+0x174>)
 800565a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800565c:	4b0f      	ldr	r3, [pc, #60]	; (800569c <xTaskIncrementTick+0x178>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005664:	2301      	movs	r3, #1
 8005666:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005668:	697b      	ldr	r3, [r7, #20]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000ae4 	.word	0x20000ae4
 8005678:	20000ac0 	.word	0x20000ac0
 800567c:	20000a74 	.word	0x20000a74
 8005680:	20000a78 	.word	0x20000a78
 8005684:	20000ad4 	.word	0x20000ad4
 8005688:	20000adc 	.word	0x20000adc
 800568c:	20000ac4 	.word	0x20000ac4
 8005690:	200009c0 	.word	0x200009c0
 8005694:	200009bc 	.word	0x200009bc
 8005698:	20000acc 	.word	0x20000acc
 800569c:	20000ad0 	.word	0x20000ad0

080056a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056a6:	4b29      	ldr	r3, [pc, #164]	; (800574c <vTaskSwitchContext+0xac>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056ae:	4b28      	ldr	r3, [pc, #160]	; (8005750 <vTaskSwitchContext+0xb0>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056b4:	e044      	b.n	8005740 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80056b6:	4b26      	ldr	r3, [pc, #152]	; (8005750 <vTaskSwitchContext+0xb0>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80056bc:	4b25      	ldr	r3, [pc, #148]	; (8005754 <vTaskSwitchContext+0xb4>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	fab3 f383 	clz	r3, r3
 80056c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80056ca:	7afb      	ldrb	r3, [r7, #11]
 80056cc:	f1c3 031f 	rsb	r3, r3, #31
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	4921      	ldr	r1, [pc, #132]	; (8005758 <vTaskSwitchContext+0xb8>)
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	607b      	str	r3, [r7, #4]
}
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <vTaskSwitchContext+0x5a>
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4a14      	ldr	r2, [pc, #80]	; (8005758 <vTaskSwitchContext+0xb8>)
 8005708:	4413      	add	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	605a      	str	r2, [r3, #4]
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	3308      	adds	r3, #8
 800571e:	429a      	cmp	r2, r3
 8005720:	d104      	bne.n	800572c <vTaskSwitchContext+0x8c>
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	4a0a      	ldr	r2, [pc, #40]	; (800575c <vTaskSwitchContext+0xbc>)
 8005734:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005736:	4b09      	ldr	r3, [pc, #36]	; (800575c <vTaskSwitchContext+0xbc>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	334c      	adds	r3, #76	; 0x4c
 800573c:	4a08      	ldr	r2, [pc, #32]	; (8005760 <vTaskSwitchContext+0xc0>)
 800573e:	6013      	str	r3, [r2, #0]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20000ae4 	.word	0x20000ae4
 8005750:	20000ad0 	.word	0x20000ad0
 8005754:	20000ac4 	.word	0x20000ac4
 8005758:	200009c0 	.word	0x200009c0
 800575c:	200009bc 	.word	0x200009bc
 8005760:	20000084 	.word	0x20000084

08005764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800576c:	f000 f852 	bl	8005814 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <prvIdleTask+0x28>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d9f9      	bls.n	800576c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005778:	4b05      	ldr	r3, [pc, #20]	; (8005790 <prvIdleTask+0x2c>)
 800577a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005788:	e7f0      	b.n	800576c <prvIdleTask+0x8>
 800578a:	bf00      	nop
 800578c:	200009c0 	.word	0x200009c0
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800579a:	2300      	movs	r3, #0
 800579c:	607b      	str	r3, [r7, #4]
 800579e:	e00c      	b.n	80057ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4a12      	ldr	r2, [pc, #72]	; (80057f4 <prvInitialiseTaskLists+0x60>)
 80057ac:	4413      	add	r3, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff faff 	bl	8004db2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3301      	adds	r3, #1
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b06      	cmp	r3, #6
 80057be:	d9ef      	bls.n	80057a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057c0:	480d      	ldr	r0, [pc, #52]	; (80057f8 <prvInitialiseTaskLists+0x64>)
 80057c2:	f7ff faf6 	bl	8004db2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057c6:	480d      	ldr	r0, [pc, #52]	; (80057fc <prvInitialiseTaskLists+0x68>)
 80057c8:	f7ff faf3 	bl	8004db2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057cc:	480c      	ldr	r0, [pc, #48]	; (8005800 <prvInitialiseTaskLists+0x6c>)
 80057ce:	f7ff faf0 	bl	8004db2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057d2:	480c      	ldr	r0, [pc, #48]	; (8005804 <prvInitialiseTaskLists+0x70>)
 80057d4:	f7ff faed 	bl	8004db2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057d8:	480b      	ldr	r0, [pc, #44]	; (8005808 <prvInitialiseTaskLists+0x74>)
 80057da:	f7ff faea 	bl	8004db2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057de:	4b0b      	ldr	r3, [pc, #44]	; (800580c <prvInitialiseTaskLists+0x78>)
 80057e0:	4a05      	ldr	r2, [pc, #20]	; (80057f8 <prvInitialiseTaskLists+0x64>)
 80057e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057e4:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <prvInitialiseTaskLists+0x7c>)
 80057e6:	4a05      	ldr	r2, [pc, #20]	; (80057fc <prvInitialiseTaskLists+0x68>)
 80057e8:	601a      	str	r2, [r3, #0]
}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	200009c0 	.word	0x200009c0
 80057f8:	20000a4c 	.word	0x20000a4c
 80057fc:	20000a60 	.word	0x20000a60
 8005800:	20000a7c 	.word	0x20000a7c
 8005804:	20000a90 	.word	0x20000a90
 8005808:	20000aa8 	.word	0x20000aa8
 800580c:	20000a74 	.word	0x20000a74
 8005810:	20000a78 	.word	0x20000a78

08005814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800581a:	e019      	b.n	8005850 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800581c:	f000 f9d6 	bl	8005bcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005820:	4b10      	ldr	r3, [pc, #64]	; (8005864 <prvCheckTasksWaitingTermination+0x50>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3304      	adds	r3, #4
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff fb46 	bl	8004ebe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005832:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <prvCheckTasksWaitingTermination+0x54>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3b01      	subs	r3, #1
 8005838:	4a0b      	ldr	r2, [pc, #44]	; (8005868 <prvCheckTasksWaitingTermination+0x54>)
 800583a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800583c:	4b0b      	ldr	r3, [pc, #44]	; (800586c <prvCheckTasksWaitingTermination+0x58>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3b01      	subs	r3, #1
 8005842:	4a0a      	ldr	r2, [pc, #40]	; (800586c <prvCheckTasksWaitingTermination+0x58>)
 8005844:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005846:	f000 f9f1 	bl	8005c2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f810 	bl	8005870 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005850:	4b06      	ldr	r3, [pc, #24]	; (800586c <prvCheckTasksWaitingTermination+0x58>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e1      	bne.n	800581c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000a90 	.word	0x20000a90
 8005868:	20000abc 	.word	0x20000abc
 800586c:	20000aa4 	.word	0x20000aa4

08005870 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	334c      	adds	r3, #76	; 0x4c
 800587c:	4618      	mov	r0, r3
 800587e:	f001 fc71 	bl	8007164 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005888:	2b00      	cmp	r3, #0
 800588a:	d108      	bne.n	800589e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fb5f 	bl	8005f54 <vPortFree>
				vPortFree( pxTCB );
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fb5c 	bl	8005f54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800589c:	e018      	b.n	80058d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d103      	bne.n	80058b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fb53 	bl	8005f54 <vPortFree>
	}
 80058ae:	e00f      	b.n	80058d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d00a      	beq.n	80058d0 <prvDeleteTCB+0x60>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	60fb      	str	r3, [r7, #12]
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <prvDeleteTCB+0x5e>
	}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058de:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <prvResetNextTaskUnblockTime+0x40>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <prvResetNextTaskUnblockTime+0x14>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <prvResetNextTaskUnblockTime+0x16>
 80058ec:	2300      	movs	r3, #0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d004      	beq.n	80058fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058f2:	4b0a      	ldr	r3, [pc, #40]	; (800591c <prvResetNextTaskUnblockTime+0x44>)
 80058f4:	f04f 32ff 	mov.w	r2, #4294967295
 80058f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058fa:	e008      	b.n	800590e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80058fc:	4b06      	ldr	r3, [pc, #24]	; (8005918 <prvResetNextTaskUnblockTime+0x40>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4a04      	ldr	r2, [pc, #16]	; (800591c <prvResetNextTaskUnblockTime+0x44>)
 800590c:	6013      	str	r3, [r2, #0]
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr
 8005918:	20000a74 	.word	0x20000a74
 800591c:	20000adc 	.word	0x20000adc

08005920 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800592a:	4b29      	ldr	r3, [pc, #164]	; (80059d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005930:	4b28      	ldr	r3, [pc, #160]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3304      	adds	r3, #4
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fac1 	bl	8004ebe <uxListRemove>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10b      	bne.n	800595a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005942:	4b24      	ldr	r3, [pc, #144]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	2201      	movs	r2, #1
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	43da      	mvns	r2, r3
 8005950:	4b21      	ldr	r3, [pc, #132]	; (80059d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4013      	ands	r3, r2
 8005956:	4a20      	ldr	r2, [pc, #128]	; (80059d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005958:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d10a      	bne.n	8005978 <prvAddCurrentTaskToDelayedList+0x58>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d007      	beq.n	8005978 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005968:	4b1a      	ldr	r3, [pc, #104]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3304      	adds	r3, #4
 800596e:	4619      	mov	r1, r3
 8005970:	481a      	ldr	r0, [pc, #104]	; (80059dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005972:	f7ff fa49 	bl	8004e08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005976:	e026      	b.n	80059c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005980:	4b14      	ldr	r3, [pc, #80]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	429a      	cmp	r2, r3
 800598e:	d209      	bcs.n	80059a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005990:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b0f      	ldr	r3, [pc, #60]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3304      	adds	r3, #4
 800599a:	4619      	mov	r1, r3
 800599c:	4610      	mov	r0, r2
 800599e:	f7ff fa56 	bl	8004e4e <vListInsert>
}
 80059a2:	e010      	b.n	80059c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059a4:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f7ff fa4c 	bl	8004e4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d202      	bcs.n	80059c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80059c0:	4a09      	ldr	r2, [pc, #36]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6013      	str	r3, [r2, #0]
}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000ac0 	.word	0x20000ac0
 80059d4:	200009bc 	.word	0x200009bc
 80059d8:	20000ac4 	.word	0x20000ac4
 80059dc:	20000aa8 	.word	0x20000aa8
 80059e0:	20000a78 	.word	0x20000a78
 80059e4:	20000a74 	.word	0x20000a74
 80059e8:	20000adc 	.word	0x20000adc

080059ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3b04      	subs	r3, #4
 80059fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3b04      	subs	r3, #4
 8005a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f023 0201 	bic.w	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3b04      	subs	r3, #4
 8005a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a1c:	4a08      	ldr	r2, [pc, #32]	; (8005a40 <pxPortInitialiseStack+0x54>)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3b14      	subs	r3, #20
 8005a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3b20      	subs	r3, #32
 8005a32:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a34:	68fb      	ldr	r3, [r7, #12]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr
 8005a40:	08005a45 	.word	0x08005a45

08005a44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a4e:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <prvTaskExitError+0x54>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	d00a      	beq.n	8005a6e <prvTaskExitError+0x2a>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	60fb      	str	r3, [r7, #12]
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <prvTaskExitError+0x28>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	60bb      	str	r3, [r7, #8]
}
 8005a80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a82:	bf00      	nop
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0fc      	beq.n	8005a84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a8a:	bf00      	nop
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000028 	.word	0x20000028
 8005a9c:	00000000 	.word	0x00000000

08005aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005aa0:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <pxCurrentTCBConst2>)
 8005aa2:	6819      	ldr	r1, [r3, #0]
 8005aa4:	6808      	ldr	r0, [r1, #0]
 8005aa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005aaa:	f380 8809 	msr	PSP, r0
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f04f 0000 	mov.w	r0, #0
 8005ab6:	f380 8811 	msr	BASEPRI, r0
 8005aba:	f04e 0e0d 	orr.w	lr, lr, #13
 8005abe:	4770      	bx	lr

08005ac0 <pxCurrentTCBConst2>:
 8005ac0:	200009bc 	.word	0x200009bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop

08005ac8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005ac8:	4806      	ldr	r0, [pc, #24]	; (8005ae4 <prvPortStartFirstTask+0x1c>)
 8005aca:	6800      	ldr	r0, [r0, #0]
 8005acc:	6800      	ldr	r0, [r0, #0]
 8005ace:	f380 8808 	msr	MSP, r0
 8005ad2:	b662      	cpsie	i
 8005ad4:	b661      	cpsie	f
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	df00      	svc	0
 8005ae0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ae2:	bf00      	nop
 8005ae4:	e000ed08 	.word	0xe000ed08

08005ae8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005aee:	4b32      	ldr	r3, [pc, #200]	; (8005bb8 <xPortStartScheduler+0xd0>)
 8005af0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	22ff      	movs	r2, #255	; 0xff
 8005afe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	4b2a      	ldr	r3, [pc, #168]	; (8005bbc <xPortStartScheduler+0xd4>)
 8005b14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b16:	4b2a      	ldr	r3, [pc, #168]	; (8005bc0 <xPortStartScheduler+0xd8>)
 8005b18:	2207      	movs	r2, #7
 8005b1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b1c:	e009      	b.n	8005b32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005b1e:	4b28      	ldr	r3, [pc, #160]	; (8005bc0 <xPortStartScheduler+0xd8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	4a26      	ldr	r2, [pc, #152]	; (8005bc0 <xPortStartScheduler+0xd8>)
 8005b26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3a:	2b80      	cmp	r3, #128	; 0x80
 8005b3c:	d0ef      	beq.n	8005b1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b3e:	4b20      	ldr	r3, [pc, #128]	; (8005bc0 <xPortStartScheduler+0xd8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f1c3 0307 	rsb	r3, r3, #7
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d00a      	beq.n	8005b60 <xPortStartScheduler+0x78>
	__asm volatile
 8005b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	60bb      	str	r3, [r7, #8]
}
 8005b5c:	bf00      	nop
 8005b5e:	e7fe      	b.n	8005b5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b60:	4b17      	ldr	r3, [pc, #92]	; (8005bc0 <xPortStartScheduler+0xd8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	4a16      	ldr	r2, [pc, #88]	; (8005bc0 <xPortStartScheduler+0xd8>)
 8005b68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b6a:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <xPortStartScheduler+0xd8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b72:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <xPortStartScheduler+0xd8>)
 8005b74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <xPortStartScheduler+0xdc>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a10      	ldr	r2, [pc, #64]	; (8005bc4 <xPortStartScheduler+0xdc>)
 8005b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b8a:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <xPortStartScheduler+0xdc>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a0d      	ldr	r2, [pc, #52]	; (8005bc4 <xPortStartScheduler+0xdc>)
 8005b90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b96:	f000 f8b9 	bl	8005d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <xPortStartScheduler+0xe0>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ba0:	f7ff ff92 	bl	8005ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ba4:	f7ff fd7c 	bl	80056a0 <vTaskSwitchContext>
	prvTaskExitError();
 8005ba8:	f7ff ff4c 	bl	8005a44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	e000e400 	.word	0xe000e400
 8005bbc:	20000ae8 	.word	0x20000ae8
 8005bc0:	20000aec 	.word	0x20000aec
 8005bc4:	e000ed20 	.word	0xe000ed20
 8005bc8:	20000028 	.word	0x20000028

08005bcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	607b      	str	r3, [r7, #4]
}
 8005be4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005be6:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <vPortEnterCritical+0x58>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3301      	adds	r3, #1
 8005bec:	4a0d      	ldr	r2, [pc, #52]	; (8005c24 <vPortEnterCritical+0x58>)
 8005bee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bf0:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <vPortEnterCritical+0x58>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d10f      	bne.n	8005c18 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <vPortEnterCritical+0x5c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	603b      	str	r3, [r7, #0]
}
 8005c14:	bf00      	nop
 8005c16:	e7fe      	b.n	8005c16 <vPortEnterCritical+0x4a>
	}
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20000028 	.word	0x20000028
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c32:	4b11      	ldr	r3, [pc, #68]	; (8005c78 <vPortExitCritical+0x4c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10a      	bne.n	8005c50 <vPortExitCritical+0x24>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	607b      	str	r3, [r7, #4]
}
 8005c4c:	bf00      	nop
 8005c4e:	e7fe      	b.n	8005c4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c50:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <vPortExitCritical+0x4c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	4a08      	ldr	r2, [pc, #32]	; (8005c78 <vPortExitCritical+0x4c>)
 8005c58:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c5a:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <vPortExitCritical+0x4c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d105      	bne.n	8005c6e <vPortExitCritical+0x42>
 8005c62:	2300      	movs	r3, #0
 8005c64:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c6c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr
 8005c78:	20000028 	.word	0x20000028
 8005c7c:	00000000 	.word	0x00000000

08005c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c80:	f3ef 8009 	mrs	r0, PSP
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <pxCurrentTCBConst>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c90:	6010      	str	r0, [r2, #0]
 8005c92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005c96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c9a:	f380 8811 	msr	BASEPRI, r0
 8005c9e:	f7ff fcff 	bl	80056a0 <vTaskSwitchContext>
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f380 8811 	msr	BASEPRI, r0
 8005caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005cae:	6819      	ldr	r1, [r3, #0]
 8005cb0:	6808      	ldr	r0, [r1, #0]
 8005cb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005cb6:	f380 8809 	msr	PSP, r0
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	4770      	bx	lr

08005cc0 <pxCurrentTCBConst>:
 8005cc0:	200009bc 	.word	0x200009bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop

08005cc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	607b      	str	r3, [r7, #4]
}
 8005ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ce2:	f7ff fc1f 	bl	8005524 <xTaskIncrementTick>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cec:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <SysTick_Handler+0x40>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f383 8811 	msr	BASEPRI, r3
}
 8005cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	e000ed04 	.word	0xe000ed04

08005d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d10:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <vPortSetupTimerInterrupt+0x30>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d16:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <vPortSetupTimerInterrupt+0x34>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d1c:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <vPortSetupTimerInterrupt+0x38>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a09      	ldr	r2, [pc, #36]	; (8005d48 <vPortSetupTimerInterrupt+0x3c>)
 8005d22:	fba2 2303 	umull	r2, r3, r2, r3
 8005d26:	099b      	lsrs	r3, r3, #6
 8005d28:	4a08      	ldr	r2, [pc, #32]	; (8005d4c <vPortSetupTimerInterrupt+0x40>)
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d2e:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <vPortSetupTimerInterrupt+0x30>)
 8005d30:	2207      	movs	r2, #7
 8005d32:	601a      	str	r2, [r3, #0]
}
 8005d34:	bf00      	nop
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr
 8005d3c:	e000e010 	.word	0xe000e010
 8005d40:	e000e018 	.word	0xe000e018
 8005d44:	2000001c 	.word	0x2000001c
 8005d48:	10624dd3 	.word	0x10624dd3
 8005d4c:	e000e014 	.word	0xe000e014

08005d50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d56:	f3ef 8305 	mrs	r3, IPSR
 8005d5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b0f      	cmp	r3, #15
 8005d60:	d914      	bls.n	8005d8c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d62:	4a16      	ldr	r2, [pc, #88]	; (8005dbc <vPortValidateInterruptPriority+0x6c>)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d6c:	4b14      	ldr	r3, [pc, #80]	; (8005dc0 <vPortValidateInterruptPriority+0x70>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	7afa      	ldrb	r2, [r7, #11]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d20a      	bcs.n	8005d8c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	607b      	str	r3, [r7, #4]
}
 8005d88:	bf00      	nop
 8005d8a:	e7fe      	b.n	8005d8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d8c:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <vPortValidateInterruptPriority+0x74>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d94:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <vPortValidateInterruptPriority+0x78>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d90a      	bls.n	8005db2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	603b      	str	r3, [r7, #0]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <vPortValidateInterruptPriority+0x60>
	}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc80      	pop	{r7}
 8005dba:	4770      	bx	lr
 8005dbc:	e000e3f0 	.word	0xe000e3f0
 8005dc0:	20000ae8 	.word	0x20000ae8
 8005dc4:	e000ed0c 	.word	0xe000ed0c
 8005dc8:	20000aec 	.word	0x20000aec

08005dcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	; 0x28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005dd8:	f7ff fada 	bl	8005390 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ddc:	4b58      	ldr	r3, [pc, #352]	; (8005f40 <pvPortMalloc+0x174>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005de4:	f000 f910 	bl	8006008 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005de8:	4b56      	ldr	r3, [pc, #344]	; (8005f44 <pvPortMalloc+0x178>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f040 808e 	bne.w	8005f12 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01d      	beq.n	8005e38 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4413      	add	r3, r2
 8005e02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d014      	beq.n	8005e38 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f023 0307 	bic.w	r3, r3, #7
 8005e14:	3308      	adds	r3, #8
 8005e16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <pvPortMalloc+0x6c>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	617b      	str	r3, [r7, #20]
}
 8005e34:	bf00      	nop
 8005e36:	e7fe      	b.n	8005e36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d069      	beq.n	8005f12 <pvPortMalloc+0x146>
 8005e3e:	4b42      	ldr	r3, [pc, #264]	; (8005f48 <pvPortMalloc+0x17c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d864      	bhi.n	8005f12 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e48:	4b40      	ldr	r3, [pc, #256]	; (8005f4c <pvPortMalloc+0x180>)
 8005e4a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e4c:	4b3f      	ldr	r3, [pc, #252]	; (8005f4c <pvPortMalloc+0x180>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e52:	e004      	b.n	8005e5e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d903      	bls.n	8005e70 <pvPortMalloc+0xa4>
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1f1      	bne.n	8005e54 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e70:	4b33      	ldr	r3, [pc, #204]	; (8005f40 <pvPortMalloc+0x174>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d04b      	beq.n	8005f12 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2208      	movs	r2, #8
 8005e80:	4413      	add	r3, r2
 8005e82:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	1ad2      	subs	r2, r2, r3
 8005e94:	2308      	movs	r3, #8
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d91f      	bls.n	8005edc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <pvPortMalloc+0xf8>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	613b      	str	r3, [r7, #16]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	1ad2      	subs	r2, r2, r3
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ed6:	69b8      	ldr	r0, [r7, #24]
 8005ed8:	f000 f8f8 	bl	80060cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005edc:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <pvPortMalloc+0x17c>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <pvPortMalloc+0x17c>)
 8005ee8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005eea:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <pvPortMalloc+0x17c>)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	4b18      	ldr	r3, [pc, #96]	; (8005f50 <pvPortMalloc+0x184>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d203      	bcs.n	8005efe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <pvPortMalloc+0x17c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <pvPortMalloc+0x184>)
 8005efc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <pvPortMalloc+0x178>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	431a      	orrs	r2, r3
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f12:	f7ff fa4b 	bl	80053ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <pvPortMalloc+0x16a>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	60fb      	str	r3, [r7, #12]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <pvPortMalloc+0x168>
	return pvReturn;
 8005f36:	69fb      	ldr	r3, [r7, #28]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3728      	adds	r7, #40	; 0x28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	200016f8 	.word	0x200016f8
 8005f44:	20001704 	.word	0x20001704
 8005f48:	200016fc 	.word	0x200016fc
 8005f4c:	200016f0 	.word	0x200016f0
 8005f50:	20001700 	.word	0x20001700

08005f54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d048      	beq.n	8005ff8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f66:	2308      	movs	r3, #8
 8005f68:	425b      	negs	r3, r3
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	4b21      	ldr	r3, [pc, #132]	; (8006000 <vPortFree+0xac>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <vPortFree+0x44>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	60fb      	str	r3, [r7, #12]
}
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <vPortFree+0x62>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	60bb      	str	r3, [r7, #8]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	4b11      	ldr	r3, [pc, #68]	; (8006000 <vPortFree+0xac>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d019      	beq.n	8005ff8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d115      	bne.n	8005ff8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <vPortFree+0xac>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	401a      	ands	r2, r3
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fdc:	f7ff f9d8 	bl	8005390 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	4b07      	ldr	r3, [pc, #28]	; (8006004 <vPortFree+0xb0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4413      	add	r3, r2
 8005fea:	4a06      	ldr	r2, [pc, #24]	; (8006004 <vPortFree+0xb0>)
 8005fec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fee:	6938      	ldr	r0, [r7, #16]
 8005ff0:	f000 f86c 	bl	80060cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ff4:	f7ff f9da 	bl	80053ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ff8:	bf00      	nop
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20001704 	.word	0x20001704
 8006004:	200016fc 	.word	0x200016fc

08006008 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800600e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006012:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006014:	4b27      	ldr	r3, [pc, #156]	; (80060b4 <prvHeapInit+0xac>)
 8006016:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00c      	beq.n	800603c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	3307      	adds	r3, #7
 8006026:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0307 	bic.w	r3, r3, #7
 800602e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	4a1f      	ldr	r2, [pc, #124]	; (80060b4 <prvHeapInit+0xac>)
 8006038:	4413      	add	r3, r2
 800603a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006040:	4a1d      	ldr	r2, [pc, #116]	; (80060b8 <prvHeapInit+0xb0>)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006046:	4b1c      	ldr	r3, [pc, #112]	; (80060b8 <prvHeapInit+0xb0>)
 8006048:	2200      	movs	r2, #0
 800604a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	4413      	add	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006054:	2208      	movs	r2, #8
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0307 	bic.w	r3, r3, #7
 8006062:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <prvHeapInit+0xb4>)
 8006068:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800606a:	4b14      	ldr	r3, [pc, #80]	; (80060bc <prvHeapInit+0xb4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2200      	movs	r2, #0
 8006070:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006072:	4b12      	ldr	r3, [pc, #72]	; (80060bc <prvHeapInit+0xb4>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	1ad2      	subs	r2, r2, r3
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <prvHeapInit+0xb4>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	4a0a      	ldr	r2, [pc, #40]	; (80060c0 <prvHeapInit+0xb8>)
 8006096:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <prvHeapInit+0xbc>)
 800609e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <prvHeapInit+0xc0>)
 80060a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060a6:	601a      	str	r2, [r3, #0]
}
 80060a8:	bf00      	nop
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20000af0 	.word	0x20000af0
 80060b8:	200016f0 	.word	0x200016f0
 80060bc:	200016f8 	.word	0x200016f8
 80060c0:	20001700 	.word	0x20001700
 80060c4:	200016fc 	.word	0x200016fc
 80060c8:	20001704 	.word	0x20001704

080060cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060d4:	4b27      	ldr	r3, [pc, #156]	; (8006174 <prvInsertBlockIntoFreeList+0xa8>)
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	e002      	b.n	80060e0 <prvInsertBlockIntoFreeList+0x14>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d8f7      	bhi.n	80060da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	4413      	add	r3, r2
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d108      	bne.n	800610e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	441a      	add	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	441a      	add	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d118      	bne.n	8006154 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	4b14      	ldr	r3, [pc, #80]	; (8006178 <prvInsertBlockIntoFreeList+0xac>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d00d      	beq.n	800614a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	441a      	add	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	e008      	b.n	800615c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800614a:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <prvInsertBlockIntoFreeList+0xac>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	e003      	b.n	800615c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	429a      	cmp	r2, r3
 8006162:	d002      	beq.n	800616a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr
 8006174:	200016f0 	.word	0x200016f0
 8006178:	200016f8 	.word	0x200016f8

0800617c <__cvt>:
 800617c:	2b00      	cmp	r3, #0
 800617e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006182:	461f      	mov	r7, r3
 8006184:	bfbb      	ittet	lt
 8006186:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800618a:	461f      	movlt	r7, r3
 800618c:	2300      	movge	r3, #0
 800618e:	232d      	movlt	r3, #45	; 0x2d
 8006190:	b088      	sub	sp, #32
 8006192:	4614      	mov	r4, r2
 8006194:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006196:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006198:	7013      	strb	r3, [r2, #0]
 800619a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800619c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80061a0:	f023 0820 	bic.w	r8, r3, #32
 80061a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061a8:	d005      	beq.n	80061b6 <__cvt+0x3a>
 80061aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061ae:	d100      	bne.n	80061b2 <__cvt+0x36>
 80061b0:	3501      	adds	r5, #1
 80061b2:	2302      	movs	r3, #2
 80061b4:	e000      	b.n	80061b8 <__cvt+0x3c>
 80061b6:	2303      	movs	r3, #3
 80061b8:	aa07      	add	r2, sp, #28
 80061ba:	9204      	str	r2, [sp, #16]
 80061bc:	aa06      	add	r2, sp, #24
 80061be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80061c2:	e9cd 3500 	strd	r3, r5, [sp]
 80061c6:	4622      	mov	r2, r4
 80061c8:	463b      	mov	r3, r7
 80061ca:	f001 f931 	bl	8007430 <_dtoa_r>
 80061ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061d2:	4606      	mov	r6, r0
 80061d4:	d102      	bne.n	80061dc <__cvt+0x60>
 80061d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061d8:	07db      	lsls	r3, r3, #31
 80061da:	d522      	bpl.n	8006222 <__cvt+0xa6>
 80061dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061e0:	eb06 0905 	add.w	r9, r6, r5
 80061e4:	d110      	bne.n	8006208 <__cvt+0x8c>
 80061e6:	7833      	ldrb	r3, [r6, #0]
 80061e8:	2b30      	cmp	r3, #48	; 0x30
 80061ea:	d10a      	bne.n	8006202 <__cvt+0x86>
 80061ec:	2200      	movs	r2, #0
 80061ee:	2300      	movs	r3, #0
 80061f0:	4620      	mov	r0, r4
 80061f2:	4639      	mov	r1, r7
 80061f4:	f7fa fbd8 	bl	80009a8 <__aeabi_dcmpeq>
 80061f8:	b918      	cbnz	r0, 8006202 <__cvt+0x86>
 80061fa:	f1c5 0501 	rsb	r5, r5, #1
 80061fe:	f8ca 5000 	str.w	r5, [sl]
 8006202:	f8da 3000 	ldr.w	r3, [sl]
 8006206:	4499      	add	r9, r3
 8006208:	2200      	movs	r2, #0
 800620a:	2300      	movs	r3, #0
 800620c:	4620      	mov	r0, r4
 800620e:	4639      	mov	r1, r7
 8006210:	f7fa fbca 	bl	80009a8 <__aeabi_dcmpeq>
 8006214:	b108      	cbz	r0, 800621a <__cvt+0x9e>
 8006216:	f8cd 901c 	str.w	r9, [sp, #28]
 800621a:	2230      	movs	r2, #48	; 0x30
 800621c:	9b07      	ldr	r3, [sp, #28]
 800621e:	454b      	cmp	r3, r9
 8006220:	d307      	bcc.n	8006232 <__cvt+0xb6>
 8006222:	4630      	mov	r0, r6
 8006224:	9b07      	ldr	r3, [sp, #28]
 8006226:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006228:	1b9b      	subs	r3, r3, r6
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	b008      	add	sp, #32
 800622e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006232:	1c59      	adds	r1, r3, #1
 8006234:	9107      	str	r1, [sp, #28]
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	e7f0      	b.n	800621c <__cvt+0xa0>

0800623a <__exponent>:
 800623a:	4603      	mov	r3, r0
 800623c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800623e:	2900      	cmp	r1, #0
 8006240:	f803 2b02 	strb.w	r2, [r3], #2
 8006244:	bfb6      	itet	lt
 8006246:	222d      	movlt	r2, #45	; 0x2d
 8006248:	222b      	movge	r2, #43	; 0x2b
 800624a:	4249      	neglt	r1, r1
 800624c:	2909      	cmp	r1, #9
 800624e:	7042      	strb	r2, [r0, #1]
 8006250:	dd2a      	ble.n	80062a8 <__exponent+0x6e>
 8006252:	f10d 0207 	add.w	r2, sp, #7
 8006256:	4617      	mov	r7, r2
 8006258:	260a      	movs	r6, #10
 800625a:	fb91 f5f6 	sdiv	r5, r1, r6
 800625e:	4694      	mov	ip, r2
 8006260:	fb06 1415 	mls	r4, r6, r5, r1
 8006264:	3430      	adds	r4, #48	; 0x30
 8006266:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800626a:	460c      	mov	r4, r1
 800626c:	2c63      	cmp	r4, #99	; 0x63
 800626e:	4629      	mov	r1, r5
 8006270:	f102 32ff 	add.w	r2, r2, #4294967295
 8006274:	dcf1      	bgt.n	800625a <__exponent+0x20>
 8006276:	3130      	adds	r1, #48	; 0x30
 8006278:	f1ac 0402 	sub.w	r4, ip, #2
 800627c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006280:	4622      	mov	r2, r4
 8006282:	1c41      	adds	r1, r0, #1
 8006284:	42ba      	cmp	r2, r7
 8006286:	d30a      	bcc.n	800629e <__exponent+0x64>
 8006288:	f10d 0209 	add.w	r2, sp, #9
 800628c:	eba2 020c 	sub.w	r2, r2, ip
 8006290:	42bc      	cmp	r4, r7
 8006292:	bf88      	it	hi
 8006294:	2200      	movhi	r2, #0
 8006296:	4413      	add	r3, r2
 8006298:	1a18      	subs	r0, r3, r0
 800629a:	b003      	add	sp, #12
 800629c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800629e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80062a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80062a6:	e7ed      	b.n	8006284 <__exponent+0x4a>
 80062a8:	2330      	movs	r3, #48	; 0x30
 80062aa:	3130      	adds	r1, #48	; 0x30
 80062ac:	7083      	strb	r3, [r0, #2]
 80062ae:	70c1      	strb	r1, [r0, #3]
 80062b0:	1d03      	adds	r3, r0, #4
 80062b2:	e7f1      	b.n	8006298 <__exponent+0x5e>

080062b4 <_printf_float>:
 80062b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b8:	b091      	sub	sp, #68	; 0x44
 80062ba:	460c      	mov	r4, r1
 80062bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80062c0:	4616      	mov	r6, r2
 80062c2:	461f      	mov	r7, r3
 80062c4:	4605      	mov	r5, r0
 80062c6:	f000 ff39 	bl	800713c <_localeconv_r>
 80062ca:	6803      	ldr	r3, [r0, #0]
 80062cc:	4618      	mov	r0, r3
 80062ce:	9309      	str	r3, [sp, #36]	; 0x24
 80062d0:	f7f9 ff3e 	bl	8000150 <strlen>
 80062d4:	2300      	movs	r3, #0
 80062d6:	930e      	str	r3, [sp, #56]	; 0x38
 80062d8:	f8d8 3000 	ldr.w	r3, [r8]
 80062dc:	900a      	str	r0, [sp, #40]	; 0x28
 80062de:	3307      	adds	r3, #7
 80062e0:	f023 0307 	bic.w	r3, r3, #7
 80062e4:	f103 0208 	add.w	r2, r3, #8
 80062e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80062ec:	f8d4 b000 	ldr.w	fp, [r4]
 80062f0:	f8c8 2000 	str.w	r2, [r8]
 80062f4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80062f8:	4652      	mov	r2, sl
 80062fa:	4643      	mov	r3, r8
 80062fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006300:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006304:	930b      	str	r3, [sp, #44]	; 0x2c
 8006306:	f04f 32ff 	mov.w	r2, #4294967295
 800630a:	4650      	mov	r0, sl
 800630c:	4b9c      	ldr	r3, [pc, #624]	; (8006580 <_printf_float+0x2cc>)
 800630e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006310:	f7fa fb7c 	bl	8000a0c <__aeabi_dcmpun>
 8006314:	bb70      	cbnz	r0, 8006374 <_printf_float+0xc0>
 8006316:	f04f 32ff 	mov.w	r2, #4294967295
 800631a:	4650      	mov	r0, sl
 800631c:	4b98      	ldr	r3, [pc, #608]	; (8006580 <_printf_float+0x2cc>)
 800631e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006320:	f7fa fb56 	bl	80009d0 <__aeabi_dcmple>
 8006324:	bb30      	cbnz	r0, 8006374 <_printf_float+0xc0>
 8006326:	2200      	movs	r2, #0
 8006328:	2300      	movs	r3, #0
 800632a:	4650      	mov	r0, sl
 800632c:	4641      	mov	r1, r8
 800632e:	f7fa fb45 	bl	80009bc <__aeabi_dcmplt>
 8006332:	b110      	cbz	r0, 800633a <_printf_float+0x86>
 8006334:	232d      	movs	r3, #45	; 0x2d
 8006336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800633a:	4a92      	ldr	r2, [pc, #584]	; (8006584 <_printf_float+0x2d0>)
 800633c:	4b92      	ldr	r3, [pc, #584]	; (8006588 <_printf_float+0x2d4>)
 800633e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006342:	bf94      	ite	ls
 8006344:	4690      	movls	r8, r2
 8006346:	4698      	movhi	r8, r3
 8006348:	2303      	movs	r3, #3
 800634a:	f04f 0a00 	mov.w	sl, #0
 800634e:	6123      	str	r3, [r4, #16]
 8006350:	f02b 0304 	bic.w	r3, fp, #4
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	4633      	mov	r3, r6
 8006358:	4621      	mov	r1, r4
 800635a:	4628      	mov	r0, r5
 800635c:	9700      	str	r7, [sp, #0]
 800635e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006360:	f000 f9d6 	bl	8006710 <_printf_common>
 8006364:	3001      	adds	r0, #1
 8006366:	f040 8090 	bne.w	800648a <_printf_float+0x1d6>
 800636a:	f04f 30ff 	mov.w	r0, #4294967295
 800636e:	b011      	add	sp, #68	; 0x44
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006374:	4652      	mov	r2, sl
 8006376:	4643      	mov	r3, r8
 8006378:	4650      	mov	r0, sl
 800637a:	4641      	mov	r1, r8
 800637c:	f7fa fb46 	bl	8000a0c <__aeabi_dcmpun>
 8006380:	b148      	cbz	r0, 8006396 <_printf_float+0xe2>
 8006382:	f1b8 0f00 	cmp.w	r8, #0
 8006386:	bfb8      	it	lt
 8006388:	232d      	movlt	r3, #45	; 0x2d
 800638a:	4a80      	ldr	r2, [pc, #512]	; (800658c <_printf_float+0x2d8>)
 800638c:	bfb8      	it	lt
 800638e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006392:	4b7f      	ldr	r3, [pc, #508]	; (8006590 <_printf_float+0x2dc>)
 8006394:	e7d3      	b.n	800633e <_printf_float+0x8a>
 8006396:	6863      	ldr	r3, [r4, #4]
 8006398:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	d142      	bne.n	8006426 <_printf_float+0x172>
 80063a0:	2306      	movs	r3, #6
 80063a2:	6063      	str	r3, [r4, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	9206      	str	r2, [sp, #24]
 80063a8:	aa0e      	add	r2, sp, #56	; 0x38
 80063aa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80063ae:	aa0d      	add	r2, sp, #52	; 0x34
 80063b0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80063b4:	9203      	str	r2, [sp, #12]
 80063b6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80063ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	6863      	ldr	r3, [r4, #4]
 80063c2:	4652      	mov	r2, sl
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	4628      	mov	r0, r5
 80063c8:	4643      	mov	r3, r8
 80063ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80063cc:	f7ff fed6 	bl	800617c <__cvt>
 80063d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063d2:	4680      	mov	r8, r0
 80063d4:	2947      	cmp	r1, #71	; 0x47
 80063d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063d8:	d108      	bne.n	80063ec <_printf_float+0x138>
 80063da:	1cc8      	adds	r0, r1, #3
 80063dc:	db02      	blt.n	80063e4 <_printf_float+0x130>
 80063de:	6863      	ldr	r3, [r4, #4]
 80063e0:	4299      	cmp	r1, r3
 80063e2:	dd40      	ble.n	8006466 <_printf_float+0x1b2>
 80063e4:	f1a9 0902 	sub.w	r9, r9, #2
 80063e8:	fa5f f989 	uxtb.w	r9, r9
 80063ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80063f0:	d81f      	bhi.n	8006432 <_printf_float+0x17e>
 80063f2:	464a      	mov	r2, r9
 80063f4:	3901      	subs	r1, #1
 80063f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063fa:	910d      	str	r1, [sp, #52]	; 0x34
 80063fc:	f7ff ff1d 	bl	800623a <__exponent>
 8006400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006402:	4682      	mov	sl, r0
 8006404:	1813      	adds	r3, r2, r0
 8006406:	2a01      	cmp	r2, #1
 8006408:	6123      	str	r3, [r4, #16]
 800640a:	dc02      	bgt.n	8006412 <_printf_float+0x15e>
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	07d2      	lsls	r2, r2, #31
 8006410:	d501      	bpl.n	8006416 <_printf_float+0x162>
 8006412:	3301      	adds	r3, #1
 8006414:	6123      	str	r3, [r4, #16]
 8006416:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800641a:	2b00      	cmp	r3, #0
 800641c:	d09b      	beq.n	8006356 <_printf_float+0xa2>
 800641e:	232d      	movs	r3, #45	; 0x2d
 8006420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006424:	e797      	b.n	8006356 <_printf_float+0xa2>
 8006426:	2947      	cmp	r1, #71	; 0x47
 8006428:	d1bc      	bne.n	80063a4 <_printf_float+0xf0>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1ba      	bne.n	80063a4 <_printf_float+0xf0>
 800642e:	2301      	movs	r3, #1
 8006430:	e7b7      	b.n	80063a2 <_printf_float+0xee>
 8006432:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006436:	d118      	bne.n	800646a <_printf_float+0x1b6>
 8006438:	2900      	cmp	r1, #0
 800643a:	6863      	ldr	r3, [r4, #4]
 800643c:	dd0b      	ble.n	8006456 <_printf_float+0x1a2>
 800643e:	6121      	str	r1, [r4, #16]
 8006440:	b913      	cbnz	r3, 8006448 <_printf_float+0x194>
 8006442:	6822      	ldr	r2, [r4, #0]
 8006444:	07d0      	lsls	r0, r2, #31
 8006446:	d502      	bpl.n	800644e <_printf_float+0x19a>
 8006448:	3301      	adds	r3, #1
 800644a:	440b      	add	r3, r1
 800644c:	6123      	str	r3, [r4, #16]
 800644e:	f04f 0a00 	mov.w	sl, #0
 8006452:	65a1      	str	r1, [r4, #88]	; 0x58
 8006454:	e7df      	b.n	8006416 <_printf_float+0x162>
 8006456:	b913      	cbnz	r3, 800645e <_printf_float+0x1aa>
 8006458:	6822      	ldr	r2, [r4, #0]
 800645a:	07d2      	lsls	r2, r2, #31
 800645c:	d501      	bpl.n	8006462 <_printf_float+0x1ae>
 800645e:	3302      	adds	r3, #2
 8006460:	e7f4      	b.n	800644c <_printf_float+0x198>
 8006462:	2301      	movs	r3, #1
 8006464:	e7f2      	b.n	800644c <_printf_float+0x198>
 8006466:	f04f 0967 	mov.w	r9, #103	; 0x67
 800646a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800646c:	4299      	cmp	r1, r3
 800646e:	db05      	blt.n	800647c <_printf_float+0x1c8>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	6121      	str	r1, [r4, #16]
 8006474:	07d8      	lsls	r0, r3, #31
 8006476:	d5ea      	bpl.n	800644e <_printf_float+0x19a>
 8006478:	1c4b      	adds	r3, r1, #1
 800647a:	e7e7      	b.n	800644c <_printf_float+0x198>
 800647c:	2900      	cmp	r1, #0
 800647e:	bfcc      	ite	gt
 8006480:	2201      	movgt	r2, #1
 8006482:	f1c1 0202 	rsble	r2, r1, #2
 8006486:	4413      	add	r3, r2
 8006488:	e7e0      	b.n	800644c <_printf_float+0x198>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	055a      	lsls	r2, r3, #21
 800648e:	d407      	bmi.n	80064a0 <_printf_float+0x1ec>
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	4642      	mov	r2, r8
 8006494:	4631      	mov	r1, r6
 8006496:	4628      	mov	r0, r5
 8006498:	47b8      	blx	r7
 800649a:	3001      	adds	r0, #1
 800649c:	d12b      	bne.n	80064f6 <_printf_float+0x242>
 800649e:	e764      	b.n	800636a <_printf_float+0xb6>
 80064a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064a4:	f240 80dd 	bls.w	8006662 <_printf_float+0x3ae>
 80064a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064ac:	2200      	movs	r2, #0
 80064ae:	2300      	movs	r3, #0
 80064b0:	f7fa fa7a 	bl	80009a8 <__aeabi_dcmpeq>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d033      	beq.n	8006520 <_printf_float+0x26c>
 80064b8:	2301      	movs	r3, #1
 80064ba:	4631      	mov	r1, r6
 80064bc:	4628      	mov	r0, r5
 80064be:	4a35      	ldr	r2, [pc, #212]	; (8006594 <_printf_float+0x2e0>)
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	f43f af51 	beq.w	800636a <_printf_float+0xb6>
 80064c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064cc:	429a      	cmp	r2, r3
 80064ce:	db02      	blt.n	80064d6 <_printf_float+0x222>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	07d8      	lsls	r0, r3, #31
 80064d4:	d50f      	bpl.n	80064f6 <_printf_float+0x242>
 80064d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064da:	4631      	mov	r1, r6
 80064dc:	4628      	mov	r0, r5
 80064de:	47b8      	blx	r7
 80064e0:	3001      	adds	r0, #1
 80064e2:	f43f af42 	beq.w	800636a <_printf_float+0xb6>
 80064e6:	f04f 0800 	mov.w	r8, #0
 80064ea:	f104 091a 	add.w	r9, r4, #26
 80064ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064f0:	3b01      	subs	r3, #1
 80064f2:	4543      	cmp	r3, r8
 80064f4:	dc09      	bgt.n	800650a <_printf_float+0x256>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	079b      	lsls	r3, r3, #30
 80064fa:	f100 8104 	bmi.w	8006706 <_printf_float+0x452>
 80064fe:	68e0      	ldr	r0, [r4, #12]
 8006500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006502:	4298      	cmp	r0, r3
 8006504:	bfb8      	it	lt
 8006506:	4618      	movlt	r0, r3
 8006508:	e731      	b.n	800636e <_printf_float+0xba>
 800650a:	2301      	movs	r3, #1
 800650c:	464a      	mov	r2, r9
 800650e:	4631      	mov	r1, r6
 8006510:	4628      	mov	r0, r5
 8006512:	47b8      	blx	r7
 8006514:	3001      	adds	r0, #1
 8006516:	f43f af28 	beq.w	800636a <_printf_float+0xb6>
 800651a:	f108 0801 	add.w	r8, r8, #1
 800651e:	e7e6      	b.n	80064ee <_printf_float+0x23a>
 8006520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006522:	2b00      	cmp	r3, #0
 8006524:	dc38      	bgt.n	8006598 <_printf_float+0x2e4>
 8006526:	2301      	movs	r3, #1
 8006528:	4631      	mov	r1, r6
 800652a:	4628      	mov	r0, r5
 800652c:	4a19      	ldr	r2, [pc, #100]	; (8006594 <_printf_float+0x2e0>)
 800652e:	47b8      	blx	r7
 8006530:	3001      	adds	r0, #1
 8006532:	f43f af1a 	beq.w	800636a <_printf_float+0xb6>
 8006536:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800653a:	4313      	orrs	r3, r2
 800653c:	d102      	bne.n	8006544 <_printf_float+0x290>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	07d9      	lsls	r1, r3, #31
 8006542:	d5d8      	bpl.n	80064f6 <_printf_float+0x242>
 8006544:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006548:	4631      	mov	r1, r6
 800654a:	4628      	mov	r0, r5
 800654c:	47b8      	blx	r7
 800654e:	3001      	adds	r0, #1
 8006550:	f43f af0b 	beq.w	800636a <_printf_float+0xb6>
 8006554:	f04f 0900 	mov.w	r9, #0
 8006558:	f104 0a1a 	add.w	sl, r4, #26
 800655c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800655e:	425b      	negs	r3, r3
 8006560:	454b      	cmp	r3, r9
 8006562:	dc01      	bgt.n	8006568 <_printf_float+0x2b4>
 8006564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006566:	e794      	b.n	8006492 <_printf_float+0x1de>
 8006568:	2301      	movs	r3, #1
 800656a:	4652      	mov	r2, sl
 800656c:	4631      	mov	r1, r6
 800656e:	4628      	mov	r0, r5
 8006570:	47b8      	blx	r7
 8006572:	3001      	adds	r0, #1
 8006574:	f43f aef9 	beq.w	800636a <_printf_float+0xb6>
 8006578:	f109 0901 	add.w	r9, r9, #1
 800657c:	e7ee      	b.n	800655c <_printf_float+0x2a8>
 800657e:	bf00      	nop
 8006580:	7fefffff 	.word	0x7fefffff
 8006584:	0800c640 	.word	0x0800c640
 8006588:	0800c644 	.word	0x0800c644
 800658c:	0800c648 	.word	0x0800c648
 8006590:	0800c64c 	.word	0x0800c64c
 8006594:	0800c650 	.word	0x0800c650
 8006598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800659a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800659c:	429a      	cmp	r2, r3
 800659e:	bfa8      	it	ge
 80065a0:	461a      	movge	r2, r3
 80065a2:	2a00      	cmp	r2, #0
 80065a4:	4691      	mov	r9, r2
 80065a6:	dc37      	bgt.n	8006618 <_printf_float+0x364>
 80065a8:	f04f 0b00 	mov.w	fp, #0
 80065ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065b0:	f104 021a 	add.w	r2, r4, #26
 80065b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80065b8:	ebaa 0309 	sub.w	r3, sl, r9
 80065bc:	455b      	cmp	r3, fp
 80065be:	dc33      	bgt.n	8006628 <_printf_float+0x374>
 80065c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065c4:	429a      	cmp	r2, r3
 80065c6:	db3b      	blt.n	8006640 <_printf_float+0x38c>
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	07da      	lsls	r2, r3, #31
 80065cc:	d438      	bmi.n	8006640 <_printf_float+0x38c>
 80065ce:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80065d2:	eba2 0903 	sub.w	r9, r2, r3
 80065d6:	eba2 020a 	sub.w	r2, r2, sl
 80065da:	4591      	cmp	r9, r2
 80065dc:	bfa8      	it	ge
 80065de:	4691      	movge	r9, r2
 80065e0:	f1b9 0f00 	cmp.w	r9, #0
 80065e4:	dc34      	bgt.n	8006650 <_printf_float+0x39c>
 80065e6:	f04f 0800 	mov.w	r8, #0
 80065ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065ee:	f104 0a1a 	add.w	sl, r4, #26
 80065f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	eba3 0309 	sub.w	r3, r3, r9
 80065fc:	4543      	cmp	r3, r8
 80065fe:	f77f af7a 	ble.w	80064f6 <_printf_float+0x242>
 8006602:	2301      	movs	r3, #1
 8006604:	4652      	mov	r2, sl
 8006606:	4631      	mov	r1, r6
 8006608:	4628      	mov	r0, r5
 800660a:	47b8      	blx	r7
 800660c:	3001      	adds	r0, #1
 800660e:	f43f aeac 	beq.w	800636a <_printf_float+0xb6>
 8006612:	f108 0801 	add.w	r8, r8, #1
 8006616:	e7ec      	b.n	80065f2 <_printf_float+0x33e>
 8006618:	4613      	mov	r3, r2
 800661a:	4631      	mov	r1, r6
 800661c:	4642      	mov	r2, r8
 800661e:	4628      	mov	r0, r5
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	d1c0      	bne.n	80065a8 <_printf_float+0x2f4>
 8006626:	e6a0      	b.n	800636a <_printf_float+0xb6>
 8006628:	2301      	movs	r3, #1
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006630:	47b8      	blx	r7
 8006632:	3001      	adds	r0, #1
 8006634:	f43f ae99 	beq.w	800636a <_printf_float+0xb6>
 8006638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800663a:	f10b 0b01 	add.w	fp, fp, #1
 800663e:	e7b9      	b.n	80065b4 <_printf_float+0x300>
 8006640:	4631      	mov	r1, r6
 8006642:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006646:	4628      	mov	r0, r5
 8006648:	47b8      	blx	r7
 800664a:	3001      	adds	r0, #1
 800664c:	d1bf      	bne.n	80065ce <_printf_float+0x31a>
 800664e:	e68c      	b.n	800636a <_printf_float+0xb6>
 8006650:	464b      	mov	r3, r9
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	eb08 020a 	add.w	r2, r8, sl
 800665a:	47b8      	blx	r7
 800665c:	3001      	adds	r0, #1
 800665e:	d1c2      	bne.n	80065e6 <_printf_float+0x332>
 8006660:	e683      	b.n	800636a <_printf_float+0xb6>
 8006662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006664:	2a01      	cmp	r2, #1
 8006666:	dc01      	bgt.n	800666c <_printf_float+0x3b8>
 8006668:	07db      	lsls	r3, r3, #31
 800666a:	d539      	bpl.n	80066e0 <_printf_float+0x42c>
 800666c:	2301      	movs	r3, #1
 800666e:	4642      	mov	r2, r8
 8006670:	4631      	mov	r1, r6
 8006672:	4628      	mov	r0, r5
 8006674:	47b8      	blx	r7
 8006676:	3001      	adds	r0, #1
 8006678:	f43f ae77 	beq.w	800636a <_printf_float+0xb6>
 800667c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006680:	4631      	mov	r1, r6
 8006682:	4628      	mov	r0, r5
 8006684:	47b8      	blx	r7
 8006686:	3001      	adds	r0, #1
 8006688:	f43f ae6f 	beq.w	800636a <_printf_float+0xb6>
 800668c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006690:	2200      	movs	r2, #0
 8006692:	2300      	movs	r3, #0
 8006694:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006698:	f7fa f986 	bl	80009a8 <__aeabi_dcmpeq>
 800669c:	b9d8      	cbnz	r0, 80066d6 <_printf_float+0x422>
 800669e:	f109 33ff 	add.w	r3, r9, #4294967295
 80066a2:	f108 0201 	add.w	r2, r8, #1
 80066a6:	4631      	mov	r1, r6
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b8      	blx	r7
 80066ac:	3001      	adds	r0, #1
 80066ae:	d10e      	bne.n	80066ce <_printf_float+0x41a>
 80066b0:	e65b      	b.n	800636a <_printf_float+0xb6>
 80066b2:	2301      	movs	r3, #1
 80066b4:	464a      	mov	r2, r9
 80066b6:	4631      	mov	r1, r6
 80066b8:	4628      	mov	r0, r5
 80066ba:	47b8      	blx	r7
 80066bc:	3001      	adds	r0, #1
 80066be:	f43f ae54 	beq.w	800636a <_printf_float+0xb6>
 80066c2:	f108 0801 	add.w	r8, r8, #1
 80066c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066c8:	3b01      	subs	r3, #1
 80066ca:	4543      	cmp	r3, r8
 80066cc:	dcf1      	bgt.n	80066b2 <_printf_float+0x3fe>
 80066ce:	4653      	mov	r3, sl
 80066d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066d4:	e6de      	b.n	8006494 <_printf_float+0x1e0>
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	f104 091a 	add.w	r9, r4, #26
 80066de:	e7f2      	b.n	80066c6 <_printf_float+0x412>
 80066e0:	2301      	movs	r3, #1
 80066e2:	4642      	mov	r2, r8
 80066e4:	e7df      	b.n	80066a6 <_printf_float+0x3f2>
 80066e6:	2301      	movs	r3, #1
 80066e8:	464a      	mov	r2, r9
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	f43f ae3a 	beq.w	800636a <_printf_float+0xb6>
 80066f6:	f108 0801 	add.w	r8, r8, #1
 80066fa:	68e3      	ldr	r3, [r4, #12]
 80066fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80066fe:	1a5b      	subs	r3, r3, r1
 8006700:	4543      	cmp	r3, r8
 8006702:	dcf0      	bgt.n	80066e6 <_printf_float+0x432>
 8006704:	e6fb      	b.n	80064fe <_printf_float+0x24a>
 8006706:	f04f 0800 	mov.w	r8, #0
 800670a:	f104 0919 	add.w	r9, r4, #25
 800670e:	e7f4      	b.n	80066fa <_printf_float+0x446>

08006710 <_printf_common>:
 8006710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006714:	4616      	mov	r6, r2
 8006716:	4699      	mov	r9, r3
 8006718:	688a      	ldr	r2, [r1, #8]
 800671a:	690b      	ldr	r3, [r1, #16]
 800671c:	4607      	mov	r7, r0
 800671e:	4293      	cmp	r3, r2
 8006720:	bfb8      	it	lt
 8006722:	4613      	movlt	r3, r2
 8006724:	6033      	str	r3, [r6, #0]
 8006726:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800672a:	460c      	mov	r4, r1
 800672c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006730:	b10a      	cbz	r2, 8006736 <_printf_common+0x26>
 8006732:	3301      	adds	r3, #1
 8006734:	6033      	str	r3, [r6, #0]
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	0699      	lsls	r1, r3, #26
 800673a:	bf42      	ittt	mi
 800673c:	6833      	ldrmi	r3, [r6, #0]
 800673e:	3302      	addmi	r3, #2
 8006740:	6033      	strmi	r3, [r6, #0]
 8006742:	6825      	ldr	r5, [r4, #0]
 8006744:	f015 0506 	ands.w	r5, r5, #6
 8006748:	d106      	bne.n	8006758 <_printf_common+0x48>
 800674a:	f104 0a19 	add.w	sl, r4, #25
 800674e:	68e3      	ldr	r3, [r4, #12]
 8006750:	6832      	ldr	r2, [r6, #0]
 8006752:	1a9b      	subs	r3, r3, r2
 8006754:	42ab      	cmp	r3, r5
 8006756:	dc2b      	bgt.n	80067b0 <_printf_common+0xa0>
 8006758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800675c:	1e13      	subs	r3, r2, #0
 800675e:	6822      	ldr	r2, [r4, #0]
 8006760:	bf18      	it	ne
 8006762:	2301      	movne	r3, #1
 8006764:	0692      	lsls	r2, r2, #26
 8006766:	d430      	bmi.n	80067ca <_printf_common+0xba>
 8006768:	4649      	mov	r1, r9
 800676a:	4638      	mov	r0, r7
 800676c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006770:	47c0      	blx	r8
 8006772:	3001      	adds	r0, #1
 8006774:	d023      	beq.n	80067be <_printf_common+0xae>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	6922      	ldr	r2, [r4, #16]
 800677a:	f003 0306 	and.w	r3, r3, #6
 800677e:	2b04      	cmp	r3, #4
 8006780:	bf14      	ite	ne
 8006782:	2500      	movne	r5, #0
 8006784:	6833      	ldreq	r3, [r6, #0]
 8006786:	f04f 0600 	mov.w	r6, #0
 800678a:	bf08      	it	eq
 800678c:	68e5      	ldreq	r5, [r4, #12]
 800678e:	f104 041a 	add.w	r4, r4, #26
 8006792:	bf08      	it	eq
 8006794:	1aed      	subeq	r5, r5, r3
 8006796:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800679a:	bf08      	it	eq
 800679c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067a0:	4293      	cmp	r3, r2
 80067a2:	bfc4      	itt	gt
 80067a4:	1a9b      	subgt	r3, r3, r2
 80067a6:	18ed      	addgt	r5, r5, r3
 80067a8:	42b5      	cmp	r5, r6
 80067aa:	d11a      	bne.n	80067e2 <_printf_common+0xd2>
 80067ac:	2000      	movs	r0, #0
 80067ae:	e008      	b.n	80067c2 <_printf_common+0xb2>
 80067b0:	2301      	movs	r3, #1
 80067b2:	4652      	mov	r2, sl
 80067b4:	4649      	mov	r1, r9
 80067b6:	4638      	mov	r0, r7
 80067b8:	47c0      	blx	r8
 80067ba:	3001      	adds	r0, #1
 80067bc:	d103      	bne.n	80067c6 <_printf_common+0xb6>
 80067be:	f04f 30ff 	mov.w	r0, #4294967295
 80067c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c6:	3501      	adds	r5, #1
 80067c8:	e7c1      	b.n	800674e <_printf_common+0x3e>
 80067ca:	2030      	movs	r0, #48	; 0x30
 80067cc:	18e1      	adds	r1, r4, r3
 80067ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067d8:	4422      	add	r2, r4
 80067da:	3302      	adds	r3, #2
 80067dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067e0:	e7c2      	b.n	8006768 <_printf_common+0x58>
 80067e2:	2301      	movs	r3, #1
 80067e4:	4622      	mov	r2, r4
 80067e6:	4649      	mov	r1, r9
 80067e8:	4638      	mov	r0, r7
 80067ea:	47c0      	blx	r8
 80067ec:	3001      	adds	r0, #1
 80067ee:	d0e6      	beq.n	80067be <_printf_common+0xae>
 80067f0:	3601      	adds	r6, #1
 80067f2:	e7d9      	b.n	80067a8 <_printf_common+0x98>

080067f4 <_printf_i>:
 80067f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f8:	7e0f      	ldrb	r7, [r1, #24]
 80067fa:	4691      	mov	r9, r2
 80067fc:	2f78      	cmp	r7, #120	; 0x78
 80067fe:	4680      	mov	r8, r0
 8006800:	460c      	mov	r4, r1
 8006802:	469a      	mov	sl, r3
 8006804:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800680a:	d807      	bhi.n	800681c <_printf_i+0x28>
 800680c:	2f62      	cmp	r7, #98	; 0x62
 800680e:	d80a      	bhi.n	8006826 <_printf_i+0x32>
 8006810:	2f00      	cmp	r7, #0
 8006812:	f000 80d5 	beq.w	80069c0 <_printf_i+0x1cc>
 8006816:	2f58      	cmp	r7, #88	; 0x58
 8006818:	f000 80c1 	beq.w	800699e <_printf_i+0x1aa>
 800681c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006824:	e03a      	b.n	800689c <_printf_i+0xa8>
 8006826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800682a:	2b15      	cmp	r3, #21
 800682c:	d8f6      	bhi.n	800681c <_printf_i+0x28>
 800682e:	a101      	add	r1, pc, #4	; (adr r1, 8006834 <_printf_i+0x40>)
 8006830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006834:	0800688d 	.word	0x0800688d
 8006838:	080068a1 	.word	0x080068a1
 800683c:	0800681d 	.word	0x0800681d
 8006840:	0800681d 	.word	0x0800681d
 8006844:	0800681d 	.word	0x0800681d
 8006848:	0800681d 	.word	0x0800681d
 800684c:	080068a1 	.word	0x080068a1
 8006850:	0800681d 	.word	0x0800681d
 8006854:	0800681d 	.word	0x0800681d
 8006858:	0800681d 	.word	0x0800681d
 800685c:	0800681d 	.word	0x0800681d
 8006860:	080069a7 	.word	0x080069a7
 8006864:	080068cd 	.word	0x080068cd
 8006868:	08006961 	.word	0x08006961
 800686c:	0800681d 	.word	0x0800681d
 8006870:	0800681d 	.word	0x0800681d
 8006874:	080069c9 	.word	0x080069c9
 8006878:	0800681d 	.word	0x0800681d
 800687c:	080068cd 	.word	0x080068cd
 8006880:	0800681d 	.word	0x0800681d
 8006884:	0800681d 	.word	0x0800681d
 8006888:	08006969 	.word	0x08006969
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	1d1a      	adds	r2, r3, #4
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	602a      	str	r2, [r5, #0]
 8006894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800689c:	2301      	movs	r3, #1
 800689e:	e0a0      	b.n	80069e2 <_printf_i+0x1ee>
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	682b      	ldr	r3, [r5, #0]
 80068a4:	0607      	lsls	r7, r0, #24
 80068a6:	f103 0104 	add.w	r1, r3, #4
 80068aa:	6029      	str	r1, [r5, #0]
 80068ac:	d501      	bpl.n	80068b2 <_printf_i+0xbe>
 80068ae:	681e      	ldr	r6, [r3, #0]
 80068b0:	e003      	b.n	80068ba <_printf_i+0xc6>
 80068b2:	0646      	lsls	r6, r0, #25
 80068b4:	d5fb      	bpl.n	80068ae <_printf_i+0xba>
 80068b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	da03      	bge.n	80068c6 <_printf_i+0xd2>
 80068be:	232d      	movs	r3, #45	; 0x2d
 80068c0:	4276      	negs	r6, r6
 80068c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068c6:	230a      	movs	r3, #10
 80068c8:	4859      	ldr	r0, [pc, #356]	; (8006a30 <_printf_i+0x23c>)
 80068ca:	e012      	b.n	80068f2 <_printf_i+0xfe>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	6820      	ldr	r0, [r4, #0]
 80068d0:	1d19      	adds	r1, r3, #4
 80068d2:	6029      	str	r1, [r5, #0]
 80068d4:	0605      	lsls	r5, r0, #24
 80068d6:	d501      	bpl.n	80068dc <_printf_i+0xe8>
 80068d8:	681e      	ldr	r6, [r3, #0]
 80068da:	e002      	b.n	80068e2 <_printf_i+0xee>
 80068dc:	0641      	lsls	r1, r0, #25
 80068de:	d5fb      	bpl.n	80068d8 <_printf_i+0xe4>
 80068e0:	881e      	ldrh	r6, [r3, #0]
 80068e2:	2f6f      	cmp	r7, #111	; 0x6f
 80068e4:	bf0c      	ite	eq
 80068e6:	2308      	moveq	r3, #8
 80068e8:	230a      	movne	r3, #10
 80068ea:	4851      	ldr	r0, [pc, #324]	; (8006a30 <_printf_i+0x23c>)
 80068ec:	2100      	movs	r1, #0
 80068ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068f2:	6865      	ldr	r5, [r4, #4]
 80068f4:	2d00      	cmp	r5, #0
 80068f6:	bfa8      	it	ge
 80068f8:	6821      	ldrge	r1, [r4, #0]
 80068fa:	60a5      	str	r5, [r4, #8]
 80068fc:	bfa4      	itt	ge
 80068fe:	f021 0104 	bicge.w	r1, r1, #4
 8006902:	6021      	strge	r1, [r4, #0]
 8006904:	b90e      	cbnz	r6, 800690a <_printf_i+0x116>
 8006906:	2d00      	cmp	r5, #0
 8006908:	d04b      	beq.n	80069a2 <_printf_i+0x1ae>
 800690a:	4615      	mov	r5, r2
 800690c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006910:	fb03 6711 	mls	r7, r3, r1, r6
 8006914:	5dc7      	ldrb	r7, [r0, r7]
 8006916:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800691a:	4637      	mov	r7, r6
 800691c:	42bb      	cmp	r3, r7
 800691e:	460e      	mov	r6, r1
 8006920:	d9f4      	bls.n	800690c <_printf_i+0x118>
 8006922:	2b08      	cmp	r3, #8
 8006924:	d10b      	bne.n	800693e <_printf_i+0x14a>
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	07de      	lsls	r6, r3, #31
 800692a:	d508      	bpl.n	800693e <_printf_i+0x14a>
 800692c:	6923      	ldr	r3, [r4, #16]
 800692e:	6861      	ldr	r1, [r4, #4]
 8006930:	4299      	cmp	r1, r3
 8006932:	bfde      	ittt	le
 8006934:	2330      	movle	r3, #48	; 0x30
 8006936:	f805 3c01 	strble.w	r3, [r5, #-1]
 800693a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800693e:	1b52      	subs	r2, r2, r5
 8006940:	6122      	str	r2, [r4, #16]
 8006942:	464b      	mov	r3, r9
 8006944:	4621      	mov	r1, r4
 8006946:	4640      	mov	r0, r8
 8006948:	f8cd a000 	str.w	sl, [sp]
 800694c:	aa03      	add	r2, sp, #12
 800694e:	f7ff fedf 	bl	8006710 <_printf_common>
 8006952:	3001      	adds	r0, #1
 8006954:	d14a      	bne.n	80069ec <_printf_i+0x1f8>
 8006956:	f04f 30ff 	mov.w	r0, #4294967295
 800695a:	b004      	add	sp, #16
 800695c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	f043 0320 	orr.w	r3, r3, #32
 8006966:	6023      	str	r3, [r4, #0]
 8006968:	2778      	movs	r7, #120	; 0x78
 800696a:	4832      	ldr	r0, [pc, #200]	; (8006a34 <_printf_i+0x240>)
 800696c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	6829      	ldr	r1, [r5, #0]
 8006974:	061f      	lsls	r7, r3, #24
 8006976:	f851 6b04 	ldr.w	r6, [r1], #4
 800697a:	d402      	bmi.n	8006982 <_printf_i+0x18e>
 800697c:	065f      	lsls	r7, r3, #25
 800697e:	bf48      	it	mi
 8006980:	b2b6      	uxthmi	r6, r6
 8006982:	07df      	lsls	r7, r3, #31
 8006984:	bf48      	it	mi
 8006986:	f043 0320 	orrmi.w	r3, r3, #32
 800698a:	6029      	str	r1, [r5, #0]
 800698c:	bf48      	it	mi
 800698e:	6023      	strmi	r3, [r4, #0]
 8006990:	b91e      	cbnz	r6, 800699a <_printf_i+0x1a6>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	f023 0320 	bic.w	r3, r3, #32
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	2310      	movs	r3, #16
 800699c:	e7a6      	b.n	80068ec <_printf_i+0xf8>
 800699e:	4824      	ldr	r0, [pc, #144]	; (8006a30 <_printf_i+0x23c>)
 80069a0:	e7e4      	b.n	800696c <_printf_i+0x178>
 80069a2:	4615      	mov	r5, r2
 80069a4:	e7bd      	b.n	8006922 <_printf_i+0x12e>
 80069a6:	682b      	ldr	r3, [r5, #0]
 80069a8:	6826      	ldr	r6, [r4, #0]
 80069aa:	1d18      	adds	r0, r3, #4
 80069ac:	6961      	ldr	r1, [r4, #20]
 80069ae:	6028      	str	r0, [r5, #0]
 80069b0:	0635      	lsls	r5, r6, #24
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	d501      	bpl.n	80069ba <_printf_i+0x1c6>
 80069b6:	6019      	str	r1, [r3, #0]
 80069b8:	e002      	b.n	80069c0 <_printf_i+0x1cc>
 80069ba:	0670      	lsls	r0, r6, #25
 80069bc:	d5fb      	bpl.n	80069b6 <_printf_i+0x1c2>
 80069be:	8019      	strh	r1, [r3, #0]
 80069c0:	2300      	movs	r3, #0
 80069c2:	4615      	mov	r5, r2
 80069c4:	6123      	str	r3, [r4, #16]
 80069c6:	e7bc      	b.n	8006942 <_printf_i+0x14e>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	2100      	movs	r1, #0
 80069cc:	1d1a      	adds	r2, r3, #4
 80069ce:	602a      	str	r2, [r5, #0]
 80069d0:	681d      	ldr	r5, [r3, #0]
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	4628      	mov	r0, r5
 80069d6:	f000 fc7e 	bl	80072d6 <memchr>
 80069da:	b108      	cbz	r0, 80069e0 <_printf_i+0x1ec>
 80069dc:	1b40      	subs	r0, r0, r5
 80069de:	6060      	str	r0, [r4, #4]
 80069e0:	6863      	ldr	r3, [r4, #4]
 80069e2:	6123      	str	r3, [r4, #16]
 80069e4:	2300      	movs	r3, #0
 80069e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ea:	e7aa      	b.n	8006942 <_printf_i+0x14e>
 80069ec:	462a      	mov	r2, r5
 80069ee:	4649      	mov	r1, r9
 80069f0:	4640      	mov	r0, r8
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	47d0      	blx	sl
 80069f6:	3001      	adds	r0, #1
 80069f8:	d0ad      	beq.n	8006956 <_printf_i+0x162>
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	079b      	lsls	r3, r3, #30
 80069fe:	d413      	bmi.n	8006a28 <_printf_i+0x234>
 8006a00:	68e0      	ldr	r0, [r4, #12]
 8006a02:	9b03      	ldr	r3, [sp, #12]
 8006a04:	4298      	cmp	r0, r3
 8006a06:	bfb8      	it	lt
 8006a08:	4618      	movlt	r0, r3
 8006a0a:	e7a6      	b.n	800695a <_printf_i+0x166>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	4632      	mov	r2, r6
 8006a10:	4649      	mov	r1, r9
 8006a12:	4640      	mov	r0, r8
 8006a14:	47d0      	blx	sl
 8006a16:	3001      	adds	r0, #1
 8006a18:	d09d      	beq.n	8006956 <_printf_i+0x162>
 8006a1a:	3501      	adds	r5, #1
 8006a1c:	68e3      	ldr	r3, [r4, #12]
 8006a1e:	9903      	ldr	r1, [sp, #12]
 8006a20:	1a5b      	subs	r3, r3, r1
 8006a22:	42ab      	cmp	r3, r5
 8006a24:	dcf2      	bgt.n	8006a0c <_printf_i+0x218>
 8006a26:	e7eb      	b.n	8006a00 <_printf_i+0x20c>
 8006a28:	2500      	movs	r5, #0
 8006a2a:	f104 0619 	add.w	r6, r4, #25
 8006a2e:	e7f5      	b.n	8006a1c <_printf_i+0x228>
 8006a30:	0800c652 	.word	0x0800c652
 8006a34:	0800c663 	.word	0x0800c663

08006a38 <_scanf_float>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	b087      	sub	sp, #28
 8006a3e:	9303      	str	r3, [sp, #12]
 8006a40:	688b      	ldr	r3, [r1, #8]
 8006a42:	4617      	mov	r7, r2
 8006a44:	1e5a      	subs	r2, r3, #1
 8006a46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a4a:	bf85      	ittet	hi
 8006a4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a50:	195b      	addhi	r3, r3, r5
 8006a52:	2300      	movls	r3, #0
 8006a54:	9302      	strhi	r3, [sp, #8]
 8006a56:	bf88      	it	hi
 8006a58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a5c:	468b      	mov	fp, r1
 8006a5e:	f04f 0500 	mov.w	r5, #0
 8006a62:	bf8c      	ite	hi
 8006a64:	608b      	strhi	r3, [r1, #8]
 8006a66:	9302      	strls	r3, [sp, #8]
 8006a68:	680b      	ldr	r3, [r1, #0]
 8006a6a:	4680      	mov	r8, r0
 8006a6c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a70:	f84b 3b1c 	str.w	r3, [fp], #28
 8006a74:	460c      	mov	r4, r1
 8006a76:	465e      	mov	r6, fp
 8006a78:	46aa      	mov	sl, r5
 8006a7a:	46a9      	mov	r9, r5
 8006a7c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a80:	9501      	str	r5, [sp, #4]
 8006a82:	68a2      	ldr	r2, [r4, #8]
 8006a84:	b152      	cbz	r2, 8006a9c <_scanf_float+0x64>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b4e      	cmp	r3, #78	; 0x4e
 8006a8c:	d864      	bhi.n	8006b58 <_scanf_float+0x120>
 8006a8e:	2b40      	cmp	r3, #64	; 0x40
 8006a90:	d83c      	bhi.n	8006b0c <_scanf_float+0xd4>
 8006a92:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006a96:	b2c8      	uxtb	r0, r1
 8006a98:	280e      	cmp	r0, #14
 8006a9a:	d93a      	bls.n	8006b12 <_scanf_float+0xda>
 8006a9c:	f1b9 0f00 	cmp.w	r9, #0
 8006aa0:	d003      	beq.n	8006aaa <_scanf_float+0x72>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aae:	f1ba 0f01 	cmp.w	sl, #1
 8006ab2:	f200 8113 	bhi.w	8006cdc <_scanf_float+0x2a4>
 8006ab6:	455e      	cmp	r6, fp
 8006ab8:	f200 8105 	bhi.w	8006cc6 <_scanf_float+0x28e>
 8006abc:	2501      	movs	r5, #1
 8006abe:	4628      	mov	r0, r5
 8006ac0:	b007      	add	sp, #28
 8006ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006aca:	2a0d      	cmp	r2, #13
 8006acc:	d8e6      	bhi.n	8006a9c <_scanf_float+0x64>
 8006ace:	a101      	add	r1, pc, #4	; (adr r1, 8006ad4 <_scanf_float+0x9c>)
 8006ad0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ad4:	08006c13 	.word	0x08006c13
 8006ad8:	08006a9d 	.word	0x08006a9d
 8006adc:	08006a9d 	.word	0x08006a9d
 8006ae0:	08006a9d 	.word	0x08006a9d
 8006ae4:	08006c73 	.word	0x08006c73
 8006ae8:	08006c4b 	.word	0x08006c4b
 8006aec:	08006a9d 	.word	0x08006a9d
 8006af0:	08006a9d 	.word	0x08006a9d
 8006af4:	08006c21 	.word	0x08006c21
 8006af8:	08006a9d 	.word	0x08006a9d
 8006afc:	08006a9d 	.word	0x08006a9d
 8006b00:	08006a9d 	.word	0x08006a9d
 8006b04:	08006a9d 	.word	0x08006a9d
 8006b08:	08006bd9 	.word	0x08006bd9
 8006b0c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b10:	e7db      	b.n	8006aca <_scanf_float+0x92>
 8006b12:	290e      	cmp	r1, #14
 8006b14:	d8c2      	bhi.n	8006a9c <_scanf_float+0x64>
 8006b16:	a001      	add	r0, pc, #4	; (adr r0, 8006b1c <_scanf_float+0xe4>)
 8006b18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b1c:	08006bcb 	.word	0x08006bcb
 8006b20:	08006a9d 	.word	0x08006a9d
 8006b24:	08006bcb 	.word	0x08006bcb
 8006b28:	08006c5f 	.word	0x08006c5f
 8006b2c:	08006a9d 	.word	0x08006a9d
 8006b30:	08006b79 	.word	0x08006b79
 8006b34:	08006bb5 	.word	0x08006bb5
 8006b38:	08006bb5 	.word	0x08006bb5
 8006b3c:	08006bb5 	.word	0x08006bb5
 8006b40:	08006bb5 	.word	0x08006bb5
 8006b44:	08006bb5 	.word	0x08006bb5
 8006b48:	08006bb5 	.word	0x08006bb5
 8006b4c:	08006bb5 	.word	0x08006bb5
 8006b50:	08006bb5 	.word	0x08006bb5
 8006b54:	08006bb5 	.word	0x08006bb5
 8006b58:	2b6e      	cmp	r3, #110	; 0x6e
 8006b5a:	d809      	bhi.n	8006b70 <_scanf_float+0x138>
 8006b5c:	2b60      	cmp	r3, #96	; 0x60
 8006b5e:	d8b2      	bhi.n	8006ac6 <_scanf_float+0x8e>
 8006b60:	2b54      	cmp	r3, #84	; 0x54
 8006b62:	d077      	beq.n	8006c54 <_scanf_float+0x21c>
 8006b64:	2b59      	cmp	r3, #89	; 0x59
 8006b66:	d199      	bne.n	8006a9c <_scanf_float+0x64>
 8006b68:	2d07      	cmp	r5, #7
 8006b6a:	d197      	bne.n	8006a9c <_scanf_float+0x64>
 8006b6c:	2508      	movs	r5, #8
 8006b6e:	e029      	b.n	8006bc4 <_scanf_float+0x18c>
 8006b70:	2b74      	cmp	r3, #116	; 0x74
 8006b72:	d06f      	beq.n	8006c54 <_scanf_float+0x21c>
 8006b74:	2b79      	cmp	r3, #121	; 0x79
 8006b76:	e7f6      	b.n	8006b66 <_scanf_float+0x12e>
 8006b78:	6821      	ldr	r1, [r4, #0]
 8006b7a:	05c8      	lsls	r0, r1, #23
 8006b7c:	d51a      	bpl.n	8006bb4 <_scanf_float+0x17c>
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b84:	6021      	str	r1, [r4, #0]
 8006b86:	f109 0901 	add.w	r9, r9, #1
 8006b8a:	b11b      	cbz	r3, 8006b94 <_scanf_float+0x15c>
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	3201      	adds	r2, #1
 8006b90:	9302      	str	r3, [sp, #8]
 8006b92:	60a2      	str	r2, [r4, #8]
 8006b94:	68a3      	ldr	r3, [r4, #8]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	60a3      	str	r3, [r4, #8]
 8006b9a:	6923      	ldr	r3, [r4, #16]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	6123      	str	r3, [r4, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	607b      	str	r3, [r7, #4]
 8006ba8:	f340 8084 	ble.w	8006cb4 <_scanf_float+0x27c>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	603b      	str	r3, [r7, #0]
 8006bb2:	e766      	b.n	8006a82 <_scanf_float+0x4a>
 8006bb4:	eb1a 0f05 	cmn.w	sl, r5
 8006bb8:	f47f af70 	bne.w	8006a9c <_scanf_float+0x64>
 8006bbc:	6822      	ldr	r2, [r4, #0]
 8006bbe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006bc2:	6022      	str	r2, [r4, #0]
 8006bc4:	f806 3b01 	strb.w	r3, [r6], #1
 8006bc8:	e7e4      	b.n	8006b94 <_scanf_float+0x15c>
 8006bca:	6822      	ldr	r2, [r4, #0]
 8006bcc:	0610      	lsls	r0, r2, #24
 8006bce:	f57f af65 	bpl.w	8006a9c <_scanf_float+0x64>
 8006bd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bd6:	e7f4      	b.n	8006bc2 <_scanf_float+0x18a>
 8006bd8:	f1ba 0f00 	cmp.w	sl, #0
 8006bdc:	d10e      	bne.n	8006bfc <_scanf_float+0x1c4>
 8006bde:	f1b9 0f00 	cmp.w	r9, #0
 8006be2:	d10e      	bne.n	8006c02 <_scanf_float+0x1ca>
 8006be4:	6822      	ldr	r2, [r4, #0]
 8006be6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006bea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006bee:	d108      	bne.n	8006c02 <_scanf_float+0x1ca>
 8006bf0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bf4:	f04f 0a01 	mov.w	sl, #1
 8006bf8:	6022      	str	r2, [r4, #0]
 8006bfa:	e7e3      	b.n	8006bc4 <_scanf_float+0x18c>
 8006bfc:	f1ba 0f02 	cmp.w	sl, #2
 8006c00:	d055      	beq.n	8006cae <_scanf_float+0x276>
 8006c02:	2d01      	cmp	r5, #1
 8006c04:	d002      	beq.n	8006c0c <_scanf_float+0x1d4>
 8006c06:	2d04      	cmp	r5, #4
 8006c08:	f47f af48 	bne.w	8006a9c <_scanf_float+0x64>
 8006c0c:	3501      	adds	r5, #1
 8006c0e:	b2ed      	uxtb	r5, r5
 8006c10:	e7d8      	b.n	8006bc4 <_scanf_float+0x18c>
 8006c12:	f1ba 0f01 	cmp.w	sl, #1
 8006c16:	f47f af41 	bne.w	8006a9c <_scanf_float+0x64>
 8006c1a:	f04f 0a02 	mov.w	sl, #2
 8006c1e:	e7d1      	b.n	8006bc4 <_scanf_float+0x18c>
 8006c20:	b97d      	cbnz	r5, 8006c42 <_scanf_float+0x20a>
 8006c22:	f1b9 0f00 	cmp.w	r9, #0
 8006c26:	f47f af3c 	bne.w	8006aa2 <_scanf_float+0x6a>
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c34:	f47f af39 	bne.w	8006aaa <_scanf_float+0x72>
 8006c38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c3c:	2501      	movs	r5, #1
 8006c3e:	6022      	str	r2, [r4, #0]
 8006c40:	e7c0      	b.n	8006bc4 <_scanf_float+0x18c>
 8006c42:	2d03      	cmp	r5, #3
 8006c44:	d0e2      	beq.n	8006c0c <_scanf_float+0x1d4>
 8006c46:	2d05      	cmp	r5, #5
 8006c48:	e7de      	b.n	8006c08 <_scanf_float+0x1d0>
 8006c4a:	2d02      	cmp	r5, #2
 8006c4c:	f47f af26 	bne.w	8006a9c <_scanf_float+0x64>
 8006c50:	2503      	movs	r5, #3
 8006c52:	e7b7      	b.n	8006bc4 <_scanf_float+0x18c>
 8006c54:	2d06      	cmp	r5, #6
 8006c56:	f47f af21 	bne.w	8006a9c <_scanf_float+0x64>
 8006c5a:	2507      	movs	r5, #7
 8006c5c:	e7b2      	b.n	8006bc4 <_scanf_float+0x18c>
 8006c5e:	6822      	ldr	r2, [r4, #0]
 8006c60:	0591      	lsls	r1, r2, #22
 8006c62:	f57f af1b 	bpl.w	8006a9c <_scanf_float+0x64>
 8006c66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006c6a:	6022      	str	r2, [r4, #0]
 8006c6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c70:	e7a8      	b.n	8006bc4 <_scanf_float+0x18c>
 8006c72:	6822      	ldr	r2, [r4, #0]
 8006c74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006c78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c7c:	d006      	beq.n	8006c8c <_scanf_float+0x254>
 8006c7e:	0550      	lsls	r0, r2, #21
 8006c80:	f57f af0c 	bpl.w	8006a9c <_scanf_float+0x64>
 8006c84:	f1b9 0f00 	cmp.w	r9, #0
 8006c88:	f43f af0f 	beq.w	8006aaa <_scanf_float+0x72>
 8006c8c:	0591      	lsls	r1, r2, #22
 8006c8e:	bf58      	it	pl
 8006c90:	9901      	ldrpl	r1, [sp, #4]
 8006c92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c96:	bf58      	it	pl
 8006c98:	eba9 0101 	subpl.w	r1, r9, r1
 8006c9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006ca0:	f04f 0900 	mov.w	r9, #0
 8006ca4:	bf58      	it	pl
 8006ca6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006caa:	6022      	str	r2, [r4, #0]
 8006cac:	e78a      	b.n	8006bc4 <_scanf_float+0x18c>
 8006cae:	f04f 0a03 	mov.w	sl, #3
 8006cb2:	e787      	b.n	8006bc4 <_scanf_float+0x18c>
 8006cb4:	4639      	mov	r1, r7
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006cbc:	4798      	blx	r3
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f43f aedf 	beq.w	8006a82 <_scanf_float+0x4a>
 8006cc4:	e6ea      	b.n	8006a9c <_scanf_float+0x64>
 8006cc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cca:	463a      	mov	r2, r7
 8006ccc:	4640      	mov	r0, r8
 8006cce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cd2:	4798      	blx	r3
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	e6ec      	b.n	8006ab6 <_scanf_float+0x7e>
 8006cdc:	1e6b      	subs	r3, r5, #1
 8006cde:	2b06      	cmp	r3, #6
 8006ce0:	d825      	bhi.n	8006d2e <_scanf_float+0x2f6>
 8006ce2:	2d02      	cmp	r5, #2
 8006ce4:	d836      	bhi.n	8006d54 <_scanf_float+0x31c>
 8006ce6:	455e      	cmp	r6, fp
 8006ce8:	f67f aee8 	bls.w	8006abc <_scanf_float+0x84>
 8006cec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cf0:	463a      	mov	r2, r7
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cf8:	4798      	blx	r3
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	6123      	str	r3, [r4, #16]
 8006d00:	e7f1      	b.n	8006ce6 <_scanf_float+0x2ae>
 8006d02:	9802      	ldr	r0, [sp, #8]
 8006d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d08:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d0c:	463a      	mov	r2, r7
 8006d0e:	9002      	str	r0, [sp, #8]
 8006d10:	4640      	mov	r0, r8
 8006d12:	4798      	blx	r3
 8006d14:	6923      	ldr	r3, [r4, #16]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	6123      	str	r3, [r4, #16]
 8006d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d1e:	fa5f fa8a 	uxtb.w	sl, sl
 8006d22:	f1ba 0f02 	cmp.w	sl, #2
 8006d26:	d1ec      	bne.n	8006d02 <_scanf_float+0x2ca>
 8006d28:	3d03      	subs	r5, #3
 8006d2a:	b2ed      	uxtb	r5, r5
 8006d2c:	1b76      	subs	r6, r6, r5
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	05da      	lsls	r2, r3, #23
 8006d32:	d52f      	bpl.n	8006d94 <_scanf_float+0x35c>
 8006d34:	055b      	lsls	r3, r3, #21
 8006d36:	d510      	bpl.n	8006d5a <_scanf_float+0x322>
 8006d38:	455e      	cmp	r6, fp
 8006d3a:	f67f aebf 	bls.w	8006abc <_scanf_float+0x84>
 8006d3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d42:	463a      	mov	r2, r7
 8006d44:	4640      	mov	r0, r8
 8006d46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d4a:	4798      	blx	r3
 8006d4c:	6923      	ldr	r3, [r4, #16]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	6123      	str	r3, [r4, #16]
 8006d52:	e7f1      	b.n	8006d38 <_scanf_float+0x300>
 8006d54:	46aa      	mov	sl, r5
 8006d56:	9602      	str	r6, [sp, #8]
 8006d58:	e7df      	b.n	8006d1a <_scanf_float+0x2e2>
 8006d5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d5e:	6923      	ldr	r3, [r4, #16]
 8006d60:	2965      	cmp	r1, #101	; 0x65
 8006d62:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d66:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d6a:	6123      	str	r3, [r4, #16]
 8006d6c:	d00c      	beq.n	8006d88 <_scanf_float+0x350>
 8006d6e:	2945      	cmp	r1, #69	; 0x45
 8006d70:	d00a      	beq.n	8006d88 <_scanf_float+0x350>
 8006d72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d76:	463a      	mov	r2, r7
 8006d78:	4640      	mov	r0, r8
 8006d7a:	4798      	blx	r3
 8006d7c:	6923      	ldr	r3, [r4, #16]
 8006d7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	1eb5      	subs	r5, r6, #2
 8006d86:	6123      	str	r3, [r4, #16]
 8006d88:	463a      	mov	r2, r7
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d90:	4798      	blx	r3
 8006d92:	462e      	mov	r6, r5
 8006d94:	6825      	ldr	r5, [r4, #0]
 8006d96:	f015 0510 	ands.w	r5, r5, #16
 8006d9a:	d155      	bne.n	8006e48 <_scanf_float+0x410>
 8006d9c:	7035      	strb	r5, [r6, #0]
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da8:	d11d      	bne.n	8006de6 <_scanf_float+0x3ae>
 8006daa:	9b01      	ldr	r3, [sp, #4]
 8006dac:	454b      	cmp	r3, r9
 8006dae:	eba3 0209 	sub.w	r2, r3, r9
 8006db2:	d125      	bne.n	8006e00 <_scanf_float+0x3c8>
 8006db4:	2200      	movs	r2, #0
 8006db6:	4659      	mov	r1, fp
 8006db8:	4640      	mov	r0, r8
 8006dba:	f002 fccd 	bl	8009758 <_strtod_r>
 8006dbe:	9b03      	ldr	r3, [sp, #12]
 8006dc0:	f8d4 c000 	ldr.w	ip, [r4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f01c 0f02 	tst.w	ip, #2
 8006dca:	4606      	mov	r6, r0
 8006dcc:	460f      	mov	r7, r1
 8006dce:	f103 0204 	add.w	r2, r3, #4
 8006dd2:	d020      	beq.n	8006e16 <_scanf_float+0x3de>
 8006dd4:	9903      	ldr	r1, [sp, #12]
 8006dd6:	600a      	str	r2, [r1, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	e9c3 6700 	strd	r6, r7, [r3]
 8006dde:	68e3      	ldr	r3, [r4, #12]
 8006de0:	3301      	adds	r3, #1
 8006de2:	60e3      	str	r3, [r4, #12]
 8006de4:	e66b      	b.n	8006abe <_scanf_float+0x86>
 8006de6:	9b04      	ldr	r3, [sp, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0e3      	beq.n	8006db4 <_scanf_float+0x37c>
 8006dec:	9905      	ldr	r1, [sp, #20]
 8006dee:	230a      	movs	r3, #10
 8006df0:	462a      	mov	r2, r5
 8006df2:	4640      	mov	r0, r8
 8006df4:	3101      	adds	r1, #1
 8006df6:	f002 fd33 	bl	8009860 <_strtol_r>
 8006dfa:	9b04      	ldr	r3, [sp, #16]
 8006dfc:	9e05      	ldr	r6, [sp, #20]
 8006dfe:	1ac2      	subs	r2, r0, r3
 8006e00:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e04:	429e      	cmp	r6, r3
 8006e06:	bf28      	it	cs
 8006e08:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	490f      	ldr	r1, [pc, #60]	; (8006e4c <_scanf_float+0x414>)
 8006e10:	f000 f928 	bl	8007064 <siprintf>
 8006e14:	e7ce      	b.n	8006db4 <_scanf_float+0x37c>
 8006e16:	f01c 0f04 	tst.w	ip, #4
 8006e1a:	d1db      	bne.n	8006dd4 <_scanf_float+0x39c>
 8006e1c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006e20:	f8cc 2000 	str.w	r2, [ip]
 8006e24:	f8d3 8000 	ldr.w	r8, [r3]
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	f7f9 fdee 	bl	8000a0c <__aeabi_dcmpun>
 8006e30:	b128      	cbz	r0, 8006e3e <_scanf_float+0x406>
 8006e32:	4807      	ldr	r0, [pc, #28]	; (8006e50 <_scanf_float+0x418>)
 8006e34:	f000 fa6c 	bl	8007310 <nanf>
 8006e38:	f8c8 0000 	str.w	r0, [r8]
 8006e3c:	e7cf      	b.n	8006dde <_scanf_float+0x3a6>
 8006e3e:	4630      	mov	r0, r6
 8006e40:	4639      	mov	r1, r7
 8006e42:	f7f9 fe41 	bl	8000ac8 <__aeabi_d2f>
 8006e46:	e7f7      	b.n	8006e38 <_scanf_float+0x400>
 8006e48:	2500      	movs	r5, #0
 8006e4a:	e638      	b.n	8006abe <_scanf_float+0x86>
 8006e4c:	0800c674 	.word	0x0800c674
 8006e50:	0800ca05 	.word	0x0800ca05

08006e54 <std>:
 8006e54:	2300      	movs	r3, #0
 8006e56:	b510      	push	{r4, lr}
 8006e58:	4604      	mov	r4, r0
 8006e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e62:	6083      	str	r3, [r0, #8]
 8006e64:	8181      	strh	r1, [r0, #12]
 8006e66:	6643      	str	r3, [r0, #100]	; 0x64
 8006e68:	81c2      	strh	r2, [r0, #14]
 8006e6a:	6183      	str	r3, [r0, #24]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	2208      	movs	r2, #8
 8006e70:	305c      	adds	r0, #92	; 0x5c
 8006e72:	f000 f95a 	bl	800712a <memset>
 8006e76:	4b0d      	ldr	r3, [pc, #52]	; (8006eac <std+0x58>)
 8006e78:	6224      	str	r4, [r4, #32]
 8006e7a:	6263      	str	r3, [r4, #36]	; 0x24
 8006e7c:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <std+0x5c>)
 8006e7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e80:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <std+0x60>)
 8006e82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e84:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <std+0x64>)
 8006e86:	6323      	str	r3, [r4, #48]	; 0x30
 8006e88:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <std+0x68>)
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d006      	beq.n	8006e9c <std+0x48>
 8006e8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006e92:	4294      	cmp	r4, r2
 8006e94:	d002      	beq.n	8006e9c <std+0x48>
 8006e96:	33d0      	adds	r3, #208	; 0xd0
 8006e98:	429c      	cmp	r4, r3
 8006e9a:	d105      	bne.n	8006ea8 <std+0x54>
 8006e9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea4:	f000 ba14 	b.w	80072d0 <__retarget_lock_init_recursive>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	bf00      	nop
 8006eac:	080070a5 	.word	0x080070a5
 8006eb0:	080070c7 	.word	0x080070c7
 8006eb4:	080070ff 	.word	0x080070ff
 8006eb8:	08007123 	.word	0x08007123
 8006ebc:	20001708 	.word	0x20001708

08006ec0 <stdio_exit_handler>:
 8006ec0:	4a02      	ldr	r2, [pc, #8]	; (8006ecc <stdio_exit_handler+0xc>)
 8006ec2:	4903      	ldr	r1, [pc, #12]	; (8006ed0 <stdio_exit_handler+0x10>)
 8006ec4:	4803      	ldr	r0, [pc, #12]	; (8006ed4 <stdio_exit_handler+0x14>)
 8006ec6:	f000 b869 	b.w	8006f9c <_fwalk_sglue>
 8006eca:	bf00      	nop
 8006ecc:	2000002c 	.word	0x2000002c
 8006ed0:	08009e9d 	.word	0x08009e9d
 8006ed4:	20000038 	.word	0x20000038

08006ed8 <cleanup_stdio>:
 8006ed8:	6841      	ldr	r1, [r0, #4]
 8006eda:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <cleanup_stdio+0x34>)
 8006edc:	b510      	push	{r4, lr}
 8006ede:	4299      	cmp	r1, r3
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	d001      	beq.n	8006ee8 <cleanup_stdio+0x10>
 8006ee4:	f002 ffda 	bl	8009e9c <_fflush_r>
 8006ee8:	68a1      	ldr	r1, [r4, #8]
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <cleanup_stdio+0x38>)
 8006eec:	4299      	cmp	r1, r3
 8006eee:	d002      	beq.n	8006ef6 <cleanup_stdio+0x1e>
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f002 ffd3 	bl	8009e9c <_fflush_r>
 8006ef6:	68e1      	ldr	r1, [r4, #12]
 8006ef8:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <cleanup_stdio+0x3c>)
 8006efa:	4299      	cmp	r1, r3
 8006efc:	d004      	beq.n	8006f08 <cleanup_stdio+0x30>
 8006efe:	4620      	mov	r0, r4
 8006f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f04:	f002 bfca 	b.w	8009e9c <_fflush_r>
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20001708 	.word	0x20001708
 8006f10:	20001770 	.word	0x20001770
 8006f14:	200017d8 	.word	0x200017d8

08006f18 <global_stdio_init.part.0>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <global_stdio_init.part.0+0x30>)
 8006f1c:	4c0b      	ldr	r4, [pc, #44]	; (8006f4c <global_stdio_init.part.0+0x34>)
 8006f1e:	4a0c      	ldr	r2, [pc, #48]	; (8006f50 <global_stdio_init.part.0+0x38>)
 8006f20:	4620      	mov	r0, r4
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	2104      	movs	r1, #4
 8006f26:	2200      	movs	r2, #0
 8006f28:	f7ff ff94 	bl	8006e54 <std>
 8006f2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f30:	2201      	movs	r2, #1
 8006f32:	2109      	movs	r1, #9
 8006f34:	f7ff ff8e 	bl	8006e54 <std>
 8006f38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f42:	2112      	movs	r1, #18
 8006f44:	f7ff bf86 	b.w	8006e54 <std>
 8006f48:	20001840 	.word	0x20001840
 8006f4c:	20001708 	.word	0x20001708
 8006f50:	08006ec1 	.word	0x08006ec1

08006f54 <__sfp_lock_acquire>:
 8006f54:	4801      	ldr	r0, [pc, #4]	; (8006f5c <__sfp_lock_acquire+0x8>)
 8006f56:	f000 b9bc 	b.w	80072d2 <__retarget_lock_acquire_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20001849 	.word	0x20001849

08006f60 <__sfp_lock_release>:
 8006f60:	4801      	ldr	r0, [pc, #4]	; (8006f68 <__sfp_lock_release+0x8>)
 8006f62:	f000 b9b7 	b.w	80072d4 <__retarget_lock_release_recursive>
 8006f66:	bf00      	nop
 8006f68:	20001849 	.word	0x20001849

08006f6c <__sinit>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	4604      	mov	r4, r0
 8006f70:	f7ff fff0 	bl	8006f54 <__sfp_lock_acquire>
 8006f74:	6a23      	ldr	r3, [r4, #32]
 8006f76:	b11b      	cbz	r3, 8006f80 <__sinit+0x14>
 8006f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f7c:	f7ff bff0 	b.w	8006f60 <__sfp_lock_release>
 8006f80:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <__sinit+0x28>)
 8006f82:	6223      	str	r3, [r4, #32]
 8006f84:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <__sinit+0x2c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1f5      	bne.n	8006f78 <__sinit+0xc>
 8006f8c:	f7ff ffc4 	bl	8006f18 <global_stdio_init.part.0>
 8006f90:	e7f2      	b.n	8006f78 <__sinit+0xc>
 8006f92:	bf00      	nop
 8006f94:	08006ed9 	.word	0x08006ed9
 8006f98:	20001840 	.word	0x20001840

08006f9c <_fwalk_sglue>:
 8006f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	4688      	mov	r8, r1
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fac:	f1b9 0901 	subs.w	r9, r9, #1
 8006fb0:	d505      	bpl.n	8006fbe <_fwalk_sglue+0x22>
 8006fb2:	6824      	ldr	r4, [r4, #0]
 8006fb4:	2c00      	cmp	r4, #0
 8006fb6:	d1f7      	bne.n	8006fa8 <_fwalk_sglue+0xc>
 8006fb8:	4630      	mov	r0, r6
 8006fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fbe:	89ab      	ldrh	r3, [r5, #12]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d907      	bls.n	8006fd4 <_fwalk_sglue+0x38>
 8006fc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	d003      	beq.n	8006fd4 <_fwalk_sglue+0x38>
 8006fcc:	4629      	mov	r1, r5
 8006fce:	4638      	mov	r0, r7
 8006fd0:	47c0      	blx	r8
 8006fd2:	4306      	orrs	r6, r0
 8006fd4:	3568      	adds	r5, #104	; 0x68
 8006fd6:	e7e9      	b.n	8006fac <_fwalk_sglue+0x10>

08006fd8 <iprintf>:
 8006fd8:	b40f      	push	{r0, r1, r2, r3}
 8006fda:	b507      	push	{r0, r1, r2, lr}
 8006fdc:	4906      	ldr	r1, [pc, #24]	; (8006ff8 <iprintf+0x20>)
 8006fde:	ab04      	add	r3, sp, #16
 8006fe0:	6808      	ldr	r0, [r1, #0]
 8006fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe6:	6881      	ldr	r1, [r0, #8]
 8006fe8:	9301      	str	r3, [sp, #4]
 8006fea:	f002 fdbb 	bl	8009b64 <_vfiprintf_r>
 8006fee:	b003      	add	sp, #12
 8006ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ff4:	b004      	add	sp, #16
 8006ff6:	4770      	bx	lr
 8006ff8:	20000084 	.word	0x20000084

08006ffc <sniprintf>:
 8006ffc:	b40c      	push	{r2, r3}
 8006ffe:	b530      	push	{r4, r5, lr}
 8007000:	4b17      	ldr	r3, [pc, #92]	; (8007060 <sniprintf+0x64>)
 8007002:	1e0c      	subs	r4, r1, #0
 8007004:	681d      	ldr	r5, [r3, #0]
 8007006:	b09d      	sub	sp, #116	; 0x74
 8007008:	da08      	bge.n	800701c <sniprintf+0x20>
 800700a:	238b      	movs	r3, #139	; 0x8b
 800700c:	f04f 30ff 	mov.w	r0, #4294967295
 8007010:	602b      	str	r3, [r5, #0]
 8007012:	b01d      	add	sp, #116	; 0x74
 8007014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007018:	b002      	add	sp, #8
 800701a:	4770      	bx	lr
 800701c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007020:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007024:	bf0c      	ite	eq
 8007026:	4623      	moveq	r3, r4
 8007028:	f104 33ff 	addne.w	r3, r4, #4294967295
 800702c:	9304      	str	r3, [sp, #16]
 800702e:	9307      	str	r3, [sp, #28]
 8007030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007034:	9002      	str	r0, [sp, #8]
 8007036:	9006      	str	r0, [sp, #24]
 8007038:	f8ad 3016 	strh.w	r3, [sp, #22]
 800703c:	4628      	mov	r0, r5
 800703e:	ab21      	add	r3, sp, #132	; 0x84
 8007040:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007042:	a902      	add	r1, sp, #8
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	f002 fc67 	bl	8009918 <_svfiprintf_r>
 800704a:	1c43      	adds	r3, r0, #1
 800704c:	bfbc      	itt	lt
 800704e:	238b      	movlt	r3, #139	; 0x8b
 8007050:	602b      	strlt	r3, [r5, #0]
 8007052:	2c00      	cmp	r4, #0
 8007054:	d0dd      	beq.n	8007012 <sniprintf+0x16>
 8007056:	2200      	movs	r2, #0
 8007058:	9b02      	ldr	r3, [sp, #8]
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	e7d9      	b.n	8007012 <sniprintf+0x16>
 800705e:	bf00      	nop
 8007060:	20000084 	.word	0x20000084

08007064 <siprintf>:
 8007064:	b40e      	push	{r1, r2, r3}
 8007066:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800706a:	b500      	push	{lr}
 800706c:	b09c      	sub	sp, #112	; 0x70
 800706e:	ab1d      	add	r3, sp, #116	; 0x74
 8007070:	9002      	str	r0, [sp, #8]
 8007072:	9006      	str	r0, [sp, #24]
 8007074:	9107      	str	r1, [sp, #28]
 8007076:	9104      	str	r1, [sp, #16]
 8007078:	4808      	ldr	r0, [pc, #32]	; (800709c <siprintf+0x38>)
 800707a:	4909      	ldr	r1, [pc, #36]	; (80070a0 <siprintf+0x3c>)
 800707c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007080:	9105      	str	r1, [sp, #20]
 8007082:	6800      	ldr	r0, [r0, #0]
 8007084:	a902      	add	r1, sp, #8
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	f002 fc46 	bl	8009918 <_svfiprintf_r>
 800708c:	2200      	movs	r2, #0
 800708e:	9b02      	ldr	r3, [sp, #8]
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	b01c      	add	sp, #112	; 0x70
 8007094:	f85d eb04 	ldr.w	lr, [sp], #4
 8007098:	b003      	add	sp, #12
 800709a:	4770      	bx	lr
 800709c:	20000084 	.word	0x20000084
 80070a0:	ffff0208 	.word	0xffff0208

080070a4 <__sread>:
 80070a4:	b510      	push	{r4, lr}
 80070a6:	460c      	mov	r4, r1
 80070a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ac:	f000 f8c2 	bl	8007234 <_read_r>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	bfab      	itete	ge
 80070b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070b6:	89a3      	ldrhlt	r3, [r4, #12]
 80070b8:	181b      	addge	r3, r3, r0
 80070ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070be:	bfac      	ite	ge
 80070c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80070c2:	81a3      	strhlt	r3, [r4, #12]
 80070c4:	bd10      	pop	{r4, pc}

080070c6 <__swrite>:
 80070c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ca:	461f      	mov	r7, r3
 80070cc:	898b      	ldrh	r3, [r1, #12]
 80070ce:	4605      	mov	r5, r0
 80070d0:	05db      	lsls	r3, r3, #23
 80070d2:	460c      	mov	r4, r1
 80070d4:	4616      	mov	r6, r2
 80070d6:	d505      	bpl.n	80070e4 <__swrite+0x1e>
 80070d8:	2302      	movs	r3, #2
 80070da:	2200      	movs	r2, #0
 80070dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e0:	f000 f896 	bl	8007210 <_lseek_r>
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	4632      	mov	r2, r6
 80070e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070ec:	81a3      	strh	r3, [r4, #12]
 80070ee:	4628      	mov	r0, r5
 80070f0:	463b      	mov	r3, r7
 80070f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070fa:	f000 b8ad 	b.w	8007258 <_write_r>

080070fe <__sseek>:
 80070fe:	b510      	push	{r4, lr}
 8007100:	460c      	mov	r4, r1
 8007102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007106:	f000 f883 	bl	8007210 <_lseek_r>
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	bf15      	itete	ne
 8007110:	6560      	strne	r0, [r4, #84]	; 0x54
 8007112:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007116:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800711a:	81a3      	strheq	r3, [r4, #12]
 800711c:	bf18      	it	ne
 800711e:	81a3      	strhne	r3, [r4, #12]
 8007120:	bd10      	pop	{r4, pc}

08007122 <__sclose>:
 8007122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007126:	f000 b80d 	b.w	8007144 <_close_r>

0800712a <memset>:
 800712a:	4603      	mov	r3, r0
 800712c:	4402      	add	r2, r0
 800712e:	4293      	cmp	r3, r2
 8007130:	d100      	bne.n	8007134 <memset+0xa>
 8007132:	4770      	bx	lr
 8007134:	f803 1b01 	strb.w	r1, [r3], #1
 8007138:	e7f9      	b.n	800712e <memset+0x4>
	...

0800713c <_localeconv_r>:
 800713c:	4800      	ldr	r0, [pc, #0]	; (8007140 <_localeconv_r+0x4>)
 800713e:	4770      	bx	lr
 8007140:	20000178 	.word	0x20000178

08007144 <_close_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	2300      	movs	r3, #0
 8007148:	4d05      	ldr	r5, [pc, #20]	; (8007160 <_close_r+0x1c>)
 800714a:	4604      	mov	r4, r0
 800714c:	4608      	mov	r0, r1
 800714e:	602b      	str	r3, [r5, #0]
 8007150:	f7fd f93c 	bl	80043cc <_close>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d102      	bne.n	800715e <_close_r+0x1a>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	b103      	cbz	r3, 800715e <_close_r+0x1a>
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	bd38      	pop	{r3, r4, r5, pc}
 8007160:	20001844 	.word	0x20001844

08007164 <_reclaim_reent>:
 8007164:	4b29      	ldr	r3, [pc, #164]	; (800720c <_reclaim_reent+0xa8>)
 8007166:	b570      	push	{r4, r5, r6, lr}
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4604      	mov	r4, r0
 800716c:	4283      	cmp	r3, r0
 800716e:	d04b      	beq.n	8007208 <_reclaim_reent+0xa4>
 8007170:	69c3      	ldr	r3, [r0, #28]
 8007172:	b143      	cbz	r3, 8007186 <_reclaim_reent+0x22>
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d144      	bne.n	8007204 <_reclaim_reent+0xa0>
 800717a:	69e3      	ldr	r3, [r4, #28]
 800717c:	6819      	ldr	r1, [r3, #0]
 800717e:	b111      	cbz	r1, 8007186 <_reclaim_reent+0x22>
 8007180:	4620      	mov	r0, r4
 8007182:	f000 ff39 	bl	8007ff8 <_free_r>
 8007186:	6961      	ldr	r1, [r4, #20]
 8007188:	b111      	cbz	r1, 8007190 <_reclaim_reent+0x2c>
 800718a:	4620      	mov	r0, r4
 800718c:	f000 ff34 	bl	8007ff8 <_free_r>
 8007190:	69e1      	ldr	r1, [r4, #28]
 8007192:	b111      	cbz	r1, 800719a <_reclaim_reent+0x36>
 8007194:	4620      	mov	r0, r4
 8007196:	f000 ff2f 	bl	8007ff8 <_free_r>
 800719a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800719c:	b111      	cbz	r1, 80071a4 <_reclaim_reent+0x40>
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 ff2a 	bl	8007ff8 <_free_r>
 80071a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071a6:	b111      	cbz	r1, 80071ae <_reclaim_reent+0x4a>
 80071a8:	4620      	mov	r0, r4
 80071aa:	f000 ff25 	bl	8007ff8 <_free_r>
 80071ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80071b0:	b111      	cbz	r1, 80071b8 <_reclaim_reent+0x54>
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 ff20 	bl	8007ff8 <_free_r>
 80071b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80071ba:	b111      	cbz	r1, 80071c2 <_reclaim_reent+0x5e>
 80071bc:	4620      	mov	r0, r4
 80071be:	f000 ff1b 	bl	8007ff8 <_free_r>
 80071c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80071c4:	b111      	cbz	r1, 80071cc <_reclaim_reent+0x68>
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 ff16 	bl	8007ff8 <_free_r>
 80071cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80071ce:	b111      	cbz	r1, 80071d6 <_reclaim_reent+0x72>
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 ff11 	bl	8007ff8 <_free_r>
 80071d6:	6a23      	ldr	r3, [r4, #32]
 80071d8:	b1b3      	cbz	r3, 8007208 <_reclaim_reent+0xa4>
 80071da:	4620      	mov	r0, r4
 80071dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80071e0:	4718      	bx	r3
 80071e2:	5949      	ldr	r1, [r1, r5]
 80071e4:	b941      	cbnz	r1, 80071f8 <_reclaim_reent+0x94>
 80071e6:	3504      	adds	r5, #4
 80071e8:	69e3      	ldr	r3, [r4, #28]
 80071ea:	2d80      	cmp	r5, #128	; 0x80
 80071ec:	68d9      	ldr	r1, [r3, #12]
 80071ee:	d1f8      	bne.n	80071e2 <_reclaim_reent+0x7e>
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 ff01 	bl	8007ff8 <_free_r>
 80071f6:	e7c0      	b.n	800717a <_reclaim_reent+0x16>
 80071f8:	680e      	ldr	r6, [r1, #0]
 80071fa:	4620      	mov	r0, r4
 80071fc:	f000 fefc 	bl	8007ff8 <_free_r>
 8007200:	4631      	mov	r1, r6
 8007202:	e7ef      	b.n	80071e4 <_reclaim_reent+0x80>
 8007204:	2500      	movs	r5, #0
 8007206:	e7ef      	b.n	80071e8 <_reclaim_reent+0x84>
 8007208:	bd70      	pop	{r4, r5, r6, pc}
 800720a:	bf00      	nop
 800720c:	20000084 	.word	0x20000084

08007210 <_lseek_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4604      	mov	r4, r0
 8007214:	4608      	mov	r0, r1
 8007216:	4611      	mov	r1, r2
 8007218:	2200      	movs	r2, #0
 800721a:	4d05      	ldr	r5, [pc, #20]	; (8007230 <_lseek_r+0x20>)
 800721c:	602a      	str	r2, [r5, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	f7fd f8f8 	bl	8004414 <_lseek>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_lseek_r+0x1e>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_lseek_r+0x1e>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20001844 	.word	0x20001844

08007234 <_read_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4604      	mov	r4, r0
 8007238:	4608      	mov	r0, r1
 800723a:	4611      	mov	r1, r2
 800723c:	2200      	movs	r2, #0
 800723e:	4d05      	ldr	r5, [pc, #20]	; (8007254 <_read_r+0x20>)
 8007240:	602a      	str	r2, [r5, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	f7fd f8a5 	bl	8004392 <_read>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d102      	bne.n	8007252 <_read_r+0x1e>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b103      	cbz	r3, 8007252 <_read_r+0x1e>
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	20001844 	.word	0x20001844

08007258 <_write_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	4604      	mov	r4, r0
 800725c:	4608      	mov	r0, r1
 800725e:	4611      	mov	r1, r2
 8007260:	2200      	movs	r2, #0
 8007262:	4d05      	ldr	r5, [pc, #20]	; (8007278 <_write_r+0x20>)
 8007264:	602a      	str	r2, [r5, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	f7fc f866 	bl	8003338 <_write>
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	d102      	bne.n	8007276 <_write_r+0x1e>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	b103      	cbz	r3, 8007276 <_write_r+0x1e>
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	bd38      	pop	{r3, r4, r5, pc}
 8007278:	20001844 	.word	0x20001844

0800727c <__errno>:
 800727c:	4b01      	ldr	r3, [pc, #4]	; (8007284 <__errno+0x8>)
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20000084 	.word	0x20000084

08007288 <__libc_init_array>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	2600      	movs	r6, #0
 800728c:	4d0c      	ldr	r5, [pc, #48]	; (80072c0 <__libc_init_array+0x38>)
 800728e:	4c0d      	ldr	r4, [pc, #52]	; (80072c4 <__libc_init_array+0x3c>)
 8007290:	1b64      	subs	r4, r4, r5
 8007292:	10a4      	asrs	r4, r4, #2
 8007294:	42a6      	cmp	r6, r4
 8007296:	d109      	bne.n	80072ac <__libc_init_array+0x24>
 8007298:	f004 fb70 	bl	800b97c <_init>
 800729c:	2600      	movs	r6, #0
 800729e:	4d0a      	ldr	r5, [pc, #40]	; (80072c8 <__libc_init_array+0x40>)
 80072a0:	4c0a      	ldr	r4, [pc, #40]	; (80072cc <__libc_init_array+0x44>)
 80072a2:	1b64      	subs	r4, r4, r5
 80072a4:	10a4      	asrs	r4, r4, #2
 80072a6:	42a6      	cmp	r6, r4
 80072a8:	d105      	bne.n	80072b6 <__libc_init_array+0x2e>
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b0:	4798      	blx	r3
 80072b2:	3601      	adds	r6, #1
 80072b4:	e7ee      	b.n	8007294 <__libc_init_array+0xc>
 80072b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ba:	4798      	blx	r3
 80072bc:	3601      	adds	r6, #1
 80072be:	e7f2      	b.n	80072a6 <__libc_init_array+0x1e>
 80072c0:	0800ca98 	.word	0x0800ca98
 80072c4:	0800ca98 	.word	0x0800ca98
 80072c8:	0800ca98 	.word	0x0800ca98
 80072cc:	0800ca9c 	.word	0x0800ca9c

080072d0 <__retarget_lock_init_recursive>:
 80072d0:	4770      	bx	lr

080072d2 <__retarget_lock_acquire_recursive>:
 80072d2:	4770      	bx	lr

080072d4 <__retarget_lock_release_recursive>:
 80072d4:	4770      	bx	lr

080072d6 <memchr>:
 80072d6:	4603      	mov	r3, r0
 80072d8:	b510      	push	{r4, lr}
 80072da:	b2c9      	uxtb	r1, r1
 80072dc:	4402      	add	r2, r0
 80072de:	4293      	cmp	r3, r2
 80072e0:	4618      	mov	r0, r3
 80072e2:	d101      	bne.n	80072e8 <memchr+0x12>
 80072e4:	2000      	movs	r0, #0
 80072e6:	e003      	b.n	80072f0 <memchr+0x1a>
 80072e8:	7804      	ldrb	r4, [r0, #0]
 80072ea:	3301      	adds	r3, #1
 80072ec:	428c      	cmp	r4, r1
 80072ee:	d1f6      	bne.n	80072de <memchr+0x8>
 80072f0:	bd10      	pop	{r4, pc}

080072f2 <memcpy>:
 80072f2:	440a      	add	r2, r1
 80072f4:	4291      	cmp	r1, r2
 80072f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80072fa:	d100      	bne.n	80072fe <memcpy+0xc>
 80072fc:	4770      	bx	lr
 80072fe:	b510      	push	{r4, lr}
 8007300:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007304:	4291      	cmp	r1, r2
 8007306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800730a:	d1f9      	bne.n	8007300 <memcpy+0xe>
 800730c:	bd10      	pop	{r4, pc}
	...

08007310 <nanf>:
 8007310:	4800      	ldr	r0, [pc, #0]	; (8007314 <nanf+0x4>)
 8007312:	4770      	bx	lr
 8007314:	7fc00000 	.word	0x7fc00000

08007318 <quorem>:
 8007318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	6903      	ldr	r3, [r0, #16]
 800731e:	690c      	ldr	r4, [r1, #16]
 8007320:	4607      	mov	r7, r0
 8007322:	42a3      	cmp	r3, r4
 8007324:	db7f      	blt.n	8007426 <quorem+0x10e>
 8007326:	3c01      	subs	r4, #1
 8007328:	f100 0514 	add.w	r5, r0, #20
 800732c:	f101 0814 	add.w	r8, r1, #20
 8007330:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800733a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800733e:	3301      	adds	r3, #1
 8007340:	429a      	cmp	r2, r3
 8007342:	fbb2 f6f3 	udiv	r6, r2, r3
 8007346:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800734a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800734e:	d331      	bcc.n	80073b4 <quorem+0x9c>
 8007350:	f04f 0e00 	mov.w	lr, #0
 8007354:	4640      	mov	r0, r8
 8007356:	46ac      	mov	ip, r5
 8007358:	46f2      	mov	sl, lr
 800735a:	f850 2b04 	ldr.w	r2, [r0], #4
 800735e:	b293      	uxth	r3, r2
 8007360:	fb06 e303 	mla	r3, r6, r3, lr
 8007364:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007368:	0c1a      	lsrs	r2, r3, #16
 800736a:	b29b      	uxth	r3, r3
 800736c:	fb06 220e 	mla	r2, r6, lr, r2
 8007370:	ebaa 0303 	sub.w	r3, sl, r3
 8007374:	f8dc a000 	ldr.w	sl, [ip]
 8007378:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800737c:	fa1f fa8a 	uxth.w	sl, sl
 8007380:	4453      	add	r3, sl
 8007382:	f8dc a000 	ldr.w	sl, [ip]
 8007386:	b292      	uxth	r2, r2
 8007388:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800738c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007390:	b29b      	uxth	r3, r3
 8007392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007396:	4581      	cmp	r9, r0
 8007398:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800739c:	f84c 3b04 	str.w	r3, [ip], #4
 80073a0:	d2db      	bcs.n	800735a <quorem+0x42>
 80073a2:	f855 300b 	ldr.w	r3, [r5, fp]
 80073a6:	b92b      	cbnz	r3, 80073b4 <quorem+0x9c>
 80073a8:	9b01      	ldr	r3, [sp, #4]
 80073aa:	3b04      	subs	r3, #4
 80073ac:	429d      	cmp	r5, r3
 80073ae:	461a      	mov	r2, r3
 80073b0:	d32d      	bcc.n	800740e <quorem+0xf6>
 80073b2:	613c      	str	r4, [r7, #16]
 80073b4:	4638      	mov	r0, r7
 80073b6:	f001 f9df 	bl	8008778 <__mcmp>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	db23      	blt.n	8007406 <quorem+0xee>
 80073be:	4629      	mov	r1, r5
 80073c0:	2000      	movs	r0, #0
 80073c2:	3601      	adds	r6, #1
 80073c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80073c8:	f8d1 c000 	ldr.w	ip, [r1]
 80073cc:	b293      	uxth	r3, r2
 80073ce:	1ac3      	subs	r3, r0, r3
 80073d0:	0c12      	lsrs	r2, r2, #16
 80073d2:	fa1f f08c 	uxth.w	r0, ip
 80073d6:	4403      	add	r3, r0
 80073d8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80073dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073e6:	45c1      	cmp	r9, r8
 80073e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80073ec:	f841 3b04 	str.w	r3, [r1], #4
 80073f0:	d2e8      	bcs.n	80073c4 <quorem+0xac>
 80073f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073fa:	b922      	cbnz	r2, 8007406 <quorem+0xee>
 80073fc:	3b04      	subs	r3, #4
 80073fe:	429d      	cmp	r5, r3
 8007400:	461a      	mov	r2, r3
 8007402:	d30a      	bcc.n	800741a <quorem+0x102>
 8007404:	613c      	str	r4, [r7, #16]
 8007406:	4630      	mov	r0, r6
 8007408:	b003      	add	sp, #12
 800740a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740e:	6812      	ldr	r2, [r2, #0]
 8007410:	3b04      	subs	r3, #4
 8007412:	2a00      	cmp	r2, #0
 8007414:	d1cd      	bne.n	80073b2 <quorem+0x9a>
 8007416:	3c01      	subs	r4, #1
 8007418:	e7c8      	b.n	80073ac <quorem+0x94>
 800741a:	6812      	ldr	r2, [r2, #0]
 800741c:	3b04      	subs	r3, #4
 800741e:	2a00      	cmp	r2, #0
 8007420:	d1f0      	bne.n	8007404 <quorem+0xec>
 8007422:	3c01      	subs	r4, #1
 8007424:	e7eb      	b.n	80073fe <quorem+0xe6>
 8007426:	2000      	movs	r0, #0
 8007428:	e7ee      	b.n	8007408 <quorem+0xf0>
 800742a:	0000      	movs	r0, r0
 800742c:	0000      	movs	r0, r0
	...

08007430 <_dtoa_r>:
 8007430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	4616      	mov	r6, r2
 8007436:	461f      	mov	r7, r3
 8007438:	69c4      	ldr	r4, [r0, #28]
 800743a:	b099      	sub	sp, #100	; 0x64
 800743c:	4605      	mov	r5, r0
 800743e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007442:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007446:	b974      	cbnz	r4, 8007466 <_dtoa_r+0x36>
 8007448:	2010      	movs	r0, #16
 800744a:	f000 fe1d 	bl	8008088 <malloc>
 800744e:	4602      	mov	r2, r0
 8007450:	61e8      	str	r0, [r5, #28]
 8007452:	b920      	cbnz	r0, 800745e <_dtoa_r+0x2e>
 8007454:	21ef      	movs	r1, #239	; 0xef
 8007456:	4bac      	ldr	r3, [pc, #688]	; (8007708 <_dtoa_r+0x2d8>)
 8007458:	48ac      	ldr	r0, [pc, #688]	; (800770c <_dtoa_r+0x2dc>)
 800745a:	f002 fe1f 	bl	800a09c <__assert_func>
 800745e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007462:	6004      	str	r4, [r0, #0]
 8007464:	60c4      	str	r4, [r0, #12]
 8007466:	69eb      	ldr	r3, [r5, #28]
 8007468:	6819      	ldr	r1, [r3, #0]
 800746a:	b151      	cbz	r1, 8007482 <_dtoa_r+0x52>
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	2301      	movs	r3, #1
 8007470:	4093      	lsls	r3, r2
 8007472:	604a      	str	r2, [r1, #4]
 8007474:	608b      	str	r3, [r1, #8]
 8007476:	4628      	mov	r0, r5
 8007478:	f000 fefa 	bl	8008270 <_Bfree>
 800747c:	2200      	movs	r2, #0
 800747e:	69eb      	ldr	r3, [r5, #28]
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	1e3b      	subs	r3, r7, #0
 8007484:	bfaf      	iteee	ge
 8007486:	2300      	movge	r3, #0
 8007488:	2201      	movlt	r2, #1
 800748a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800748e:	9305      	strlt	r3, [sp, #20]
 8007490:	bfa8      	it	ge
 8007492:	f8c8 3000 	strge.w	r3, [r8]
 8007496:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800749a:	4b9d      	ldr	r3, [pc, #628]	; (8007710 <_dtoa_r+0x2e0>)
 800749c:	bfb8      	it	lt
 800749e:	f8c8 2000 	strlt.w	r2, [r8]
 80074a2:	ea33 0309 	bics.w	r3, r3, r9
 80074a6:	d119      	bne.n	80074dc <_dtoa_r+0xac>
 80074a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80074ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074b4:	4333      	orrs	r3, r6
 80074b6:	f000 8589 	beq.w	8007fcc <_dtoa_r+0xb9c>
 80074ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074bc:	b953      	cbnz	r3, 80074d4 <_dtoa_r+0xa4>
 80074be:	4b95      	ldr	r3, [pc, #596]	; (8007714 <_dtoa_r+0x2e4>)
 80074c0:	e023      	b.n	800750a <_dtoa_r+0xda>
 80074c2:	4b95      	ldr	r3, [pc, #596]	; (8007718 <_dtoa_r+0x2e8>)
 80074c4:	9303      	str	r3, [sp, #12]
 80074c6:	3308      	adds	r3, #8
 80074c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	9803      	ldr	r0, [sp, #12]
 80074ce:	b019      	add	sp, #100	; 0x64
 80074d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d4:	4b8f      	ldr	r3, [pc, #572]	; (8007714 <_dtoa_r+0x2e4>)
 80074d6:	9303      	str	r3, [sp, #12]
 80074d8:	3303      	adds	r3, #3
 80074da:	e7f5      	b.n	80074c8 <_dtoa_r+0x98>
 80074dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80074e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80074e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074e8:	2200      	movs	r2, #0
 80074ea:	2300      	movs	r3, #0
 80074ec:	f7f9 fa5c 	bl	80009a8 <__aeabi_dcmpeq>
 80074f0:	4680      	mov	r8, r0
 80074f2:	b160      	cbz	r0, 800750e <_dtoa_r+0xde>
 80074f4:	2301      	movs	r3, #1
 80074f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074f8:	6013      	str	r3, [r2, #0]
 80074fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 8562 	beq.w	8007fc6 <_dtoa_r+0xb96>
 8007502:	4b86      	ldr	r3, [pc, #536]	; (800771c <_dtoa_r+0x2ec>)
 8007504:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	3b01      	subs	r3, #1
 800750a:	9303      	str	r3, [sp, #12]
 800750c:	e7de      	b.n	80074cc <_dtoa_r+0x9c>
 800750e:	ab16      	add	r3, sp, #88	; 0x58
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	ab17      	add	r3, sp, #92	; 0x5c
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	4628      	mov	r0, r5
 8007518:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800751c:	f001 fa3c 	bl	8008998 <__d2b>
 8007520:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007524:	4682      	mov	sl, r0
 8007526:	2c00      	cmp	r4, #0
 8007528:	d07e      	beq.n	8007628 <_dtoa_r+0x1f8>
 800752a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800752e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007530:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007538:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800753c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007540:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007544:	4619      	mov	r1, r3
 8007546:	2200      	movs	r2, #0
 8007548:	4b75      	ldr	r3, [pc, #468]	; (8007720 <_dtoa_r+0x2f0>)
 800754a:	f7f8 fe0d 	bl	8000168 <__aeabi_dsub>
 800754e:	a368      	add	r3, pc, #416	; (adr r3, 80076f0 <_dtoa_r+0x2c0>)
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f7f8 ffc0 	bl	80004d8 <__aeabi_dmul>
 8007558:	a367      	add	r3, pc, #412	; (adr r3, 80076f8 <_dtoa_r+0x2c8>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f7f8 fe05 	bl	800016c <__adddf3>
 8007562:	4606      	mov	r6, r0
 8007564:	4620      	mov	r0, r4
 8007566:	460f      	mov	r7, r1
 8007568:	f7f8 ff4c 	bl	8000404 <__aeabi_i2d>
 800756c:	a364      	add	r3, pc, #400	; (adr r3, 8007700 <_dtoa_r+0x2d0>)
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f7f8 ffb1 	bl	80004d8 <__aeabi_dmul>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4630      	mov	r0, r6
 800757c:	4639      	mov	r1, r7
 800757e:	f7f8 fdf5 	bl	800016c <__adddf3>
 8007582:	4606      	mov	r6, r0
 8007584:	460f      	mov	r7, r1
 8007586:	f7f9 fa57 	bl	8000a38 <__aeabi_d2iz>
 800758a:	2200      	movs	r2, #0
 800758c:	4683      	mov	fp, r0
 800758e:	2300      	movs	r3, #0
 8007590:	4630      	mov	r0, r6
 8007592:	4639      	mov	r1, r7
 8007594:	f7f9 fa12 	bl	80009bc <__aeabi_dcmplt>
 8007598:	b148      	cbz	r0, 80075ae <_dtoa_r+0x17e>
 800759a:	4658      	mov	r0, fp
 800759c:	f7f8 ff32 	bl	8000404 <__aeabi_i2d>
 80075a0:	4632      	mov	r2, r6
 80075a2:	463b      	mov	r3, r7
 80075a4:	f7f9 fa00 	bl	80009a8 <__aeabi_dcmpeq>
 80075a8:	b908      	cbnz	r0, 80075ae <_dtoa_r+0x17e>
 80075aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075ae:	f1bb 0f16 	cmp.w	fp, #22
 80075b2:	d857      	bhi.n	8007664 <_dtoa_r+0x234>
 80075b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075b8:	4b5a      	ldr	r3, [pc, #360]	; (8007724 <_dtoa_r+0x2f4>)
 80075ba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c2:	f7f9 f9fb 	bl	80009bc <__aeabi_dcmplt>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d04e      	beq.n	8007668 <_dtoa_r+0x238>
 80075ca:	2300      	movs	r3, #0
 80075cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80075d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80075d4:	1b1b      	subs	r3, r3, r4
 80075d6:	1e5a      	subs	r2, r3, #1
 80075d8:	bf46      	itte	mi
 80075da:	f1c3 0901 	rsbmi	r9, r3, #1
 80075de:	2300      	movmi	r3, #0
 80075e0:	f04f 0900 	movpl.w	r9, #0
 80075e4:	9209      	str	r2, [sp, #36]	; 0x24
 80075e6:	bf48      	it	mi
 80075e8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80075ea:	f1bb 0f00 	cmp.w	fp, #0
 80075ee:	db3d      	blt.n	800766c <_dtoa_r+0x23c>
 80075f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80075f6:	445b      	add	r3, fp
 80075f8:	9309      	str	r3, [sp, #36]	; 0x24
 80075fa:	2300      	movs	r3, #0
 80075fc:	930a      	str	r3, [sp, #40]	; 0x28
 80075fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007600:	2b09      	cmp	r3, #9
 8007602:	d867      	bhi.n	80076d4 <_dtoa_r+0x2a4>
 8007604:	2b05      	cmp	r3, #5
 8007606:	bfc4      	itt	gt
 8007608:	3b04      	subgt	r3, #4
 800760a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800760c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800760e:	bfc8      	it	gt
 8007610:	2400      	movgt	r4, #0
 8007612:	f1a3 0302 	sub.w	r3, r3, #2
 8007616:	bfd8      	it	le
 8007618:	2401      	movle	r4, #1
 800761a:	2b03      	cmp	r3, #3
 800761c:	f200 8086 	bhi.w	800772c <_dtoa_r+0x2fc>
 8007620:	e8df f003 	tbb	[pc, r3]
 8007624:	5637392c 	.word	0x5637392c
 8007628:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800762c:	441c      	add	r4, r3
 800762e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007632:	2b20      	cmp	r3, #32
 8007634:	bfc1      	itttt	gt
 8007636:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800763a:	fa09 f903 	lslgt.w	r9, r9, r3
 800763e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007642:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007646:	bfd6      	itet	le
 8007648:	f1c3 0320 	rsble	r3, r3, #32
 800764c:	ea49 0003 	orrgt.w	r0, r9, r3
 8007650:	fa06 f003 	lslle.w	r0, r6, r3
 8007654:	f7f8 fec6 	bl	80003e4 <__aeabi_ui2d>
 8007658:	2201      	movs	r2, #1
 800765a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800765e:	3c01      	subs	r4, #1
 8007660:	9213      	str	r2, [sp, #76]	; 0x4c
 8007662:	e76f      	b.n	8007544 <_dtoa_r+0x114>
 8007664:	2301      	movs	r3, #1
 8007666:	e7b3      	b.n	80075d0 <_dtoa_r+0x1a0>
 8007668:	900f      	str	r0, [sp, #60]	; 0x3c
 800766a:	e7b2      	b.n	80075d2 <_dtoa_r+0x1a2>
 800766c:	f1cb 0300 	rsb	r3, fp, #0
 8007670:	930a      	str	r3, [sp, #40]	; 0x28
 8007672:	2300      	movs	r3, #0
 8007674:	eba9 090b 	sub.w	r9, r9, fp
 8007678:	930e      	str	r3, [sp, #56]	; 0x38
 800767a:	e7c0      	b.n	80075fe <_dtoa_r+0x1ce>
 800767c:	2300      	movs	r3, #0
 800767e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007680:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007682:	2b00      	cmp	r3, #0
 8007684:	dc55      	bgt.n	8007732 <_dtoa_r+0x302>
 8007686:	2301      	movs	r3, #1
 8007688:	461a      	mov	r2, r3
 800768a:	9306      	str	r3, [sp, #24]
 800768c:	9308      	str	r3, [sp, #32]
 800768e:	9223      	str	r2, [sp, #140]	; 0x8c
 8007690:	e00b      	b.n	80076aa <_dtoa_r+0x27a>
 8007692:	2301      	movs	r3, #1
 8007694:	e7f3      	b.n	800767e <_dtoa_r+0x24e>
 8007696:	2300      	movs	r3, #0
 8007698:	930b      	str	r3, [sp, #44]	; 0x2c
 800769a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800769c:	445b      	add	r3, fp
 800769e:	9306      	str	r3, [sp, #24]
 80076a0:	3301      	adds	r3, #1
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	9308      	str	r3, [sp, #32]
 80076a6:	bfb8      	it	lt
 80076a8:	2301      	movlt	r3, #1
 80076aa:	2100      	movs	r1, #0
 80076ac:	2204      	movs	r2, #4
 80076ae:	69e8      	ldr	r0, [r5, #28]
 80076b0:	f102 0614 	add.w	r6, r2, #20
 80076b4:	429e      	cmp	r6, r3
 80076b6:	d940      	bls.n	800773a <_dtoa_r+0x30a>
 80076b8:	6041      	str	r1, [r0, #4]
 80076ba:	4628      	mov	r0, r5
 80076bc:	f000 fd98 	bl	80081f0 <_Balloc>
 80076c0:	9003      	str	r0, [sp, #12]
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d13c      	bne.n	8007740 <_dtoa_r+0x310>
 80076c6:	4602      	mov	r2, r0
 80076c8:	f240 11af 	movw	r1, #431	; 0x1af
 80076cc:	4b16      	ldr	r3, [pc, #88]	; (8007728 <_dtoa_r+0x2f8>)
 80076ce:	e6c3      	b.n	8007458 <_dtoa_r+0x28>
 80076d0:	2301      	movs	r3, #1
 80076d2:	e7e1      	b.n	8007698 <_dtoa_r+0x268>
 80076d4:	2401      	movs	r4, #1
 80076d6:	2300      	movs	r3, #0
 80076d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80076da:	9322      	str	r3, [sp, #136]	; 0x88
 80076dc:	f04f 33ff 	mov.w	r3, #4294967295
 80076e0:	2200      	movs	r2, #0
 80076e2:	9306      	str	r3, [sp, #24]
 80076e4:	9308      	str	r3, [sp, #32]
 80076e6:	2312      	movs	r3, #18
 80076e8:	e7d1      	b.n	800768e <_dtoa_r+0x25e>
 80076ea:	bf00      	nop
 80076ec:	f3af 8000 	nop.w
 80076f0:	636f4361 	.word	0x636f4361
 80076f4:	3fd287a7 	.word	0x3fd287a7
 80076f8:	8b60c8b3 	.word	0x8b60c8b3
 80076fc:	3fc68a28 	.word	0x3fc68a28
 8007700:	509f79fb 	.word	0x509f79fb
 8007704:	3fd34413 	.word	0x3fd34413
 8007708:	0800c686 	.word	0x0800c686
 800770c:	0800c69d 	.word	0x0800c69d
 8007710:	7ff00000 	.word	0x7ff00000
 8007714:	0800c682 	.word	0x0800c682
 8007718:	0800c679 	.word	0x0800c679
 800771c:	0800c651 	.word	0x0800c651
 8007720:	3ff80000 	.word	0x3ff80000
 8007724:	0800c788 	.word	0x0800c788
 8007728:	0800c6f5 	.word	0x0800c6f5
 800772c:	2301      	movs	r3, #1
 800772e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007730:	e7d4      	b.n	80076dc <_dtoa_r+0x2ac>
 8007732:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007734:	9306      	str	r3, [sp, #24]
 8007736:	9308      	str	r3, [sp, #32]
 8007738:	e7b7      	b.n	80076aa <_dtoa_r+0x27a>
 800773a:	3101      	adds	r1, #1
 800773c:	0052      	lsls	r2, r2, #1
 800773e:	e7b7      	b.n	80076b0 <_dtoa_r+0x280>
 8007740:	69eb      	ldr	r3, [r5, #28]
 8007742:	9a03      	ldr	r2, [sp, #12]
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	9b08      	ldr	r3, [sp, #32]
 8007748:	2b0e      	cmp	r3, #14
 800774a:	f200 80a8 	bhi.w	800789e <_dtoa_r+0x46e>
 800774e:	2c00      	cmp	r4, #0
 8007750:	f000 80a5 	beq.w	800789e <_dtoa_r+0x46e>
 8007754:	f1bb 0f00 	cmp.w	fp, #0
 8007758:	dd34      	ble.n	80077c4 <_dtoa_r+0x394>
 800775a:	4b9a      	ldr	r3, [pc, #616]	; (80079c4 <_dtoa_r+0x594>)
 800775c:	f00b 020f 	and.w	r2, fp, #15
 8007760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007764:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007768:	e9d3 3400 	ldrd	r3, r4, [r3]
 800776c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007770:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007774:	d016      	beq.n	80077a4 <_dtoa_r+0x374>
 8007776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800777a:	4b93      	ldr	r3, [pc, #588]	; (80079c8 <_dtoa_r+0x598>)
 800777c:	2703      	movs	r7, #3
 800777e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007782:	f7f8 ffd3 	bl	800072c <__aeabi_ddiv>
 8007786:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800778a:	f004 040f 	and.w	r4, r4, #15
 800778e:	4e8e      	ldr	r6, [pc, #568]	; (80079c8 <_dtoa_r+0x598>)
 8007790:	b954      	cbnz	r4, 80077a8 <_dtoa_r+0x378>
 8007792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800779a:	f7f8 ffc7 	bl	800072c <__aeabi_ddiv>
 800779e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077a2:	e029      	b.n	80077f8 <_dtoa_r+0x3c8>
 80077a4:	2702      	movs	r7, #2
 80077a6:	e7f2      	b.n	800778e <_dtoa_r+0x35e>
 80077a8:	07e1      	lsls	r1, r4, #31
 80077aa:	d508      	bpl.n	80077be <_dtoa_r+0x38e>
 80077ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077b4:	f7f8 fe90 	bl	80004d8 <__aeabi_dmul>
 80077b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077bc:	3701      	adds	r7, #1
 80077be:	1064      	asrs	r4, r4, #1
 80077c0:	3608      	adds	r6, #8
 80077c2:	e7e5      	b.n	8007790 <_dtoa_r+0x360>
 80077c4:	f000 80a5 	beq.w	8007912 <_dtoa_r+0x4e2>
 80077c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077cc:	f1cb 0400 	rsb	r4, fp, #0
 80077d0:	4b7c      	ldr	r3, [pc, #496]	; (80079c4 <_dtoa_r+0x594>)
 80077d2:	f004 020f 	and.w	r2, r4, #15
 80077d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077de:	f7f8 fe7b 	bl	80004d8 <__aeabi_dmul>
 80077e2:	2702      	movs	r7, #2
 80077e4:	2300      	movs	r3, #0
 80077e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077ea:	4e77      	ldr	r6, [pc, #476]	; (80079c8 <_dtoa_r+0x598>)
 80077ec:	1124      	asrs	r4, r4, #4
 80077ee:	2c00      	cmp	r4, #0
 80077f0:	f040 8084 	bne.w	80078fc <_dtoa_r+0x4cc>
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1d2      	bne.n	800779e <_dtoa_r+0x36e>
 80077f8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80077fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 8087 	beq.w	8007916 <_dtoa_r+0x4e6>
 8007808:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800780c:	2200      	movs	r2, #0
 800780e:	4b6f      	ldr	r3, [pc, #444]	; (80079cc <_dtoa_r+0x59c>)
 8007810:	f7f9 f8d4 	bl	80009bc <__aeabi_dcmplt>
 8007814:	2800      	cmp	r0, #0
 8007816:	d07e      	beq.n	8007916 <_dtoa_r+0x4e6>
 8007818:	9b08      	ldr	r3, [sp, #32]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d07b      	beq.n	8007916 <_dtoa_r+0x4e6>
 800781e:	9b06      	ldr	r3, [sp, #24]
 8007820:	2b00      	cmp	r3, #0
 8007822:	dd38      	ble.n	8007896 <_dtoa_r+0x466>
 8007824:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007828:	2200      	movs	r2, #0
 800782a:	4b69      	ldr	r3, [pc, #420]	; (80079d0 <_dtoa_r+0x5a0>)
 800782c:	f7f8 fe54 	bl	80004d8 <__aeabi_dmul>
 8007830:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007834:	9c06      	ldr	r4, [sp, #24]
 8007836:	f10b 38ff 	add.w	r8, fp, #4294967295
 800783a:	3701      	adds	r7, #1
 800783c:	4638      	mov	r0, r7
 800783e:	f7f8 fde1 	bl	8000404 <__aeabi_i2d>
 8007842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007846:	f7f8 fe47 	bl	80004d8 <__aeabi_dmul>
 800784a:	2200      	movs	r2, #0
 800784c:	4b61      	ldr	r3, [pc, #388]	; (80079d4 <_dtoa_r+0x5a4>)
 800784e:	f7f8 fc8d 	bl	800016c <__adddf3>
 8007852:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007856:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800785a:	9611      	str	r6, [sp, #68]	; 0x44
 800785c:	2c00      	cmp	r4, #0
 800785e:	d15d      	bne.n	800791c <_dtoa_r+0x4ec>
 8007860:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007864:	2200      	movs	r2, #0
 8007866:	4b5c      	ldr	r3, [pc, #368]	; (80079d8 <_dtoa_r+0x5a8>)
 8007868:	f7f8 fc7e 	bl	8000168 <__aeabi_dsub>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007874:	4633      	mov	r3, r6
 8007876:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007878:	f7f9 f8be 	bl	80009f8 <__aeabi_dcmpgt>
 800787c:	2800      	cmp	r0, #0
 800787e:	f040 8295 	bne.w	8007dac <_dtoa_r+0x97c>
 8007882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007886:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007888:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800788c:	f7f9 f896 	bl	80009bc <__aeabi_dcmplt>
 8007890:	2800      	cmp	r0, #0
 8007892:	f040 8289 	bne.w	8007da8 <_dtoa_r+0x978>
 8007896:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800789a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800789e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f2c0 8151 	blt.w	8007b48 <_dtoa_r+0x718>
 80078a6:	f1bb 0f0e 	cmp.w	fp, #14
 80078aa:	f300 814d 	bgt.w	8007b48 <_dtoa_r+0x718>
 80078ae:	4b45      	ldr	r3, [pc, #276]	; (80079c4 <_dtoa_r+0x594>)
 80078b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80078bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f280 80da 	bge.w	8007a78 <_dtoa_r+0x648>
 80078c4:	9b08      	ldr	r3, [sp, #32]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f300 80d6 	bgt.w	8007a78 <_dtoa_r+0x648>
 80078cc:	f040 826b 	bne.w	8007da6 <_dtoa_r+0x976>
 80078d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078d4:	2200      	movs	r2, #0
 80078d6:	4b40      	ldr	r3, [pc, #256]	; (80079d8 <_dtoa_r+0x5a8>)
 80078d8:	f7f8 fdfe 	bl	80004d8 <__aeabi_dmul>
 80078dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078e0:	f7f9 f880 	bl	80009e4 <__aeabi_dcmpge>
 80078e4:	9c08      	ldr	r4, [sp, #32]
 80078e6:	4626      	mov	r6, r4
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f040 8241 	bne.w	8007d70 <_dtoa_r+0x940>
 80078ee:	2331      	movs	r3, #49	; 0x31
 80078f0:	9f03      	ldr	r7, [sp, #12]
 80078f2:	f10b 0b01 	add.w	fp, fp, #1
 80078f6:	f807 3b01 	strb.w	r3, [r7], #1
 80078fa:	e23d      	b.n	8007d78 <_dtoa_r+0x948>
 80078fc:	07e2      	lsls	r2, r4, #31
 80078fe:	d505      	bpl.n	800790c <_dtoa_r+0x4dc>
 8007900:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007904:	f7f8 fde8 	bl	80004d8 <__aeabi_dmul>
 8007908:	2301      	movs	r3, #1
 800790a:	3701      	adds	r7, #1
 800790c:	1064      	asrs	r4, r4, #1
 800790e:	3608      	adds	r6, #8
 8007910:	e76d      	b.n	80077ee <_dtoa_r+0x3be>
 8007912:	2702      	movs	r7, #2
 8007914:	e770      	b.n	80077f8 <_dtoa_r+0x3c8>
 8007916:	46d8      	mov	r8, fp
 8007918:	9c08      	ldr	r4, [sp, #32]
 800791a:	e78f      	b.n	800783c <_dtoa_r+0x40c>
 800791c:	9903      	ldr	r1, [sp, #12]
 800791e:	4b29      	ldr	r3, [pc, #164]	; (80079c4 <_dtoa_r+0x594>)
 8007920:	4421      	add	r1, r4
 8007922:	9112      	str	r1, [sp, #72]	; 0x48
 8007924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007926:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800792a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800792e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007932:	2900      	cmp	r1, #0
 8007934:	d054      	beq.n	80079e0 <_dtoa_r+0x5b0>
 8007936:	2000      	movs	r0, #0
 8007938:	4928      	ldr	r1, [pc, #160]	; (80079dc <_dtoa_r+0x5ac>)
 800793a:	f7f8 fef7 	bl	800072c <__aeabi_ddiv>
 800793e:	463b      	mov	r3, r7
 8007940:	4632      	mov	r2, r6
 8007942:	f7f8 fc11 	bl	8000168 <__aeabi_dsub>
 8007946:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800794a:	9f03      	ldr	r7, [sp, #12]
 800794c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007950:	f7f9 f872 	bl	8000a38 <__aeabi_d2iz>
 8007954:	4604      	mov	r4, r0
 8007956:	f7f8 fd55 	bl	8000404 <__aeabi_i2d>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007962:	f7f8 fc01 	bl	8000168 <__aeabi_dsub>
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	3430      	adds	r4, #48	; 0x30
 800796c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007970:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007974:	f807 4b01 	strb.w	r4, [r7], #1
 8007978:	f7f9 f820 	bl	80009bc <__aeabi_dcmplt>
 800797c:	2800      	cmp	r0, #0
 800797e:	d173      	bne.n	8007a68 <_dtoa_r+0x638>
 8007980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007984:	2000      	movs	r0, #0
 8007986:	4911      	ldr	r1, [pc, #68]	; (80079cc <_dtoa_r+0x59c>)
 8007988:	f7f8 fbee 	bl	8000168 <__aeabi_dsub>
 800798c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007990:	f7f9 f814 	bl	80009bc <__aeabi_dcmplt>
 8007994:	2800      	cmp	r0, #0
 8007996:	f040 80b6 	bne.w	8007b06 <_dtoa_r+0x6d6>
 800799a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800799c:	429f      	cmp	r7, r3
 800799e:	f43f af7a 	beq.w	8007896 <_dtoa_r+0x466>
 80079a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079a6:	2200      	movs	r2, #0
 80079a8:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <_dtoa_r+0x5a0>)
 80079aa:	f7f8 fd95 	bl	80004d8 <__aeabi_dmul>
 80079ae:	2200      	movs	r2, #0
 80079b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079b8:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <_dtoa_r+0x5a0>)
 80079ba:	f7f8 fd8d 	bl	80004d8 <__aeabi_dmul>
 80079be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079c2:	e7c3      	b.n	800794c <_dtoa_r+0x51c>
 80079c4:	0800c788 	.word	0x0800c788
 80079c8:	0800c760 	.word	0x0800c760
 80079cc:	3ff00000 	.word	0x3ff00000
 80079d0:	40240000 	.word	0x40240000
 80079d4:	401c0000 	.word	0x401c0000
 80079d8:	40140000 	.word	0x40140000
 80079dc:	3fe00000 	.word	0x3fe00000
 80079e0:	4630      	mov	r0, r6
 80079e2:	4639      	mov	r1, r7
 80079e4:	f7f8 fd78 	bl	80004d8 <__aeabi_dmul>
 80079e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079ee:	9c03      	ldr	r4, [sp, #12]
 80079f0:	9314      	str	r3, [sp, #80]	; 0x50
 80079f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079f6:	f7f9 f81f 	bl	8000a38 <__aeabi_d2iz>
 80079fa:	9015      	str	r0, [sp, #84]	; 0x54
 80079fc:	f7f8 fd02 	bl	8000404 <__aeabi_i2d>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a08:	f7f8 fbae 	bl	8000168 <__aeabi_dsub>
 8007a0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a0e:	4606      	mov	r6, r0
 8007a10:	3330      	adds	r3, #48	; 0x30
 8007a12:	f804 3b01 	strb.w	r3, [r4], #1
 8007a16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a18:	460f      	mov	r7, r1
 8007a1a:	429c      	cmp	r4, r3
 8007a1c:	f04f 0200 	mov.w	r2, #0
 8007a20:	d124      	bne.n	8007a6c <_dtoa_r+0x63c>
 8007a22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a26:	4baf      	ldr	r3, [pc, #700]	; (8007ce4 <_dtoa_r+0x8b4>)
 8007a28:	f7f8 fba0 	bl	800016c <__adddf3>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4630      	mov	r0, r6
 8007a32:	4639      	mov	r1, r7
 8007a34:	f7f8 ffe0 	bl	80009f8 <__aeabi_dcmpgt>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d163      	bne.n	8007b04 <_dtoa_r+0x6d4>
 8007a3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a40:	2000      	movs	r0, #0
 8007a42:	49a8      	ldr	r1, [pc, #672]	; (8007ce4 <_dtoa_r+0x8b4>)
 8007a44:	f7f8 fb90 	bl	8000168 <__aeabi_dsub>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	4639      	mov	r1, r7
 8007a50:	f7f8 ffb4 	bl	80009bc <__aeabi_dcmplt>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	f43f af1e 	beq.w	8007896 <_dtoa_r+0x466>
 8007a5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007a5c:	1e7b      	subs	r3, r7, #1
 8007a5e:	9314      	str	r3, [sp, #80]	; 0x50
 8007a60:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007a64:	2b30      	cmp	r3, #48	; 0x30
 8007a66:	d0f8      	beq.n	8007a5a <_dtoa_r+0x62a>
 8007a68:	46c3      	mov	fp, r8
 8007a6a:	e03b      	b.n	8007ae4 <_dtoa_r+0x6b4>
 8007a6c:	4b9e      	ldr	r3, [pc, #632]	; (8007ce8 <_dtoa_r+0x8b8>)
 8007a6e:	f7f8 fd33 	bl	80004d8 <__aeabi_dmul>
 8007a72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a76:	e7bc      	b.n	80079f2 <_dtoa_r+0x5c2>
 8007a78:	9f03      	ldr	r7, [sp, #12]
 8007a7a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007a7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a82:	4640      	mov	r0, r8
 8007a84:	4649      	mov	r1, r9
 8007a86:	f7f8 fe51 	bl	800072c <__aeabi_ddiv>
 8007a8a:	f7f8 ffd5 	bl	8000a38 <__aeabi_d2iz>
 8007a8e:	4604      	mov	r4, r0
 8007a90:	f7f8 fcb8 	bl	8000404 <__aeabi_i2d>
 8007a94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a98:	f7f8 fd1e 	bl	80004d8 <__aeabi_dmul>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4640      	mov	r0, r8
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	f7f8 fb60 	bl	8000168 <__aeabi_dsub>
 8007aa8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007aac:	f807 6b01 	strb.w	r6, [r7], #1
 8007ab0:	9e03      	ldr	r6, [sp, #12]
 8007ab2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007ab6:	1bbe      	subs	r6, r7, r6
 8007ab8:	45b4      	cmp	ip, r6
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	d136      	bne.n	8007b2e <_dtoa_r+0x6fe>
 8007ac0:	f7f8 fb54 	bl	800016c <__adddf3>
 8007ac4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ac8:	4680      	mov	r8, r0
 8007aca:	4689      	mov	r9, r1
 8007acc:	f7f8 ff94 	bl	80009f8 <__aeabi_dcmpgt>
 8007ad0:	bb58      	cbnz	r0, 8007b2a <_dtoa_r+0x6fa>
 8007ad2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	4649      	mov	r1, r9
 8007ada:	f7f8 ff65 	bl	80009a8 <__aeabi_dcmpeq>
 8007ade:	b108      	cbz	r0, 8007ae4 <_dtoa_r+0x6b4>
 8007ae0:	07e3      	lsls	r3, r4, #31
 8007ae2:	d422      	bmi.n	8007b2a <_dtoa_r+0x6fa>
 8007ae4:	4651      	mov	r1, sl
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f000 fbc2 	bl	8008270 <_Bfree>
 8007aec:	2300      	movs	r3, #0
 8007aee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007af0:	703b      	strb	r3, [r7, #0]
 8007af2:	f10b 0301 	add.w	r3, fp, #1
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f43f ace6 	beq.w	80074cc <_dtoa_r+0x9c>
 8007b00:	601f      	str	r7, [r3, #0]
 8007b02:	e4e3      	b.n	80074cc <_dtoa_r+0x9c>
 8007b04:	4627      	mov	r7, r4
 8007b06:	463b      	mov	r3, r7
 8007b08:	461f      	mov	r7, r3
 8007b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b0e:	2a39      	cmp	r2, #57	; 0x39
 8007b10:	d107      	bne.n	8007b22 <_dtoa_r+0x6f2>
 8007b12:	9a03      	ldr	r2, [sp, #12]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d1f7      	bne.n	8007b08 <_dtoa_r+0x6d8>
 8007b18:	2230      	movs	r2, #48	; 0x30
 8007b1a:	9903      	ldr	r1, [sp, #12]
 8007b1c:	f108 0801 	add.w	r8, r8, #1
 8007b20:	700a      	strb	r2, [r1, #0]
 8007b22:	781a      	ldrb	r2, [r3, #0]
 8007b24:	3201      	adds	r2, #1
 8007b26:	701a      	strb	r2, [r3, #0]
 8007b28:	e79e      	b.n	8007a68 <_dtoa_r+0x638>
 8007b2a:	46d8      	mov	r8, fp
 8007b2c:	e7eb      	b.n	8007b06 <_dtoa_r+0x6d6>
 8007b2e:	2200      	movs	r2, #0
 8007b30:	4b6d      	ldr	r3, [pc, #436]	; (8007ce8 <_dtoa_r+0x8b8>)
 8007b32:	f7f8 fcd1 	bl	80004d8 <__aeabi_dmul>
 8007b36:	2200      	movs	r2, #0
 8007b38:	2300      	movs	r3, #0
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	4689      	mov	r9, r1
 8007b3e:	f7f8 ff33 	bl	80009a8 <__aeabi_dcmpeq>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d09b      	beq.n	8007a7e <_dtoa_r+0x64e>
 8007b46:	e7cd      	b.n	8007ae4 <_dtoa_r+0x6b4>
 8007b48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b4a:	2a00      	cmp	r2, #0
 8007b4c:	f000 80c4 	beq.w	8007cd8 <_dtoa_r+0x8a8>
 8007b50:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b52:	2a01      	cmp	r2, #1
 8007b54:	f300 80a8 	bgt.w	8007ca8 <_dtoa_r+0x878>
 8007b58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b5a:	2a00      	cmp	r2, #0
 8007b5c:	f000 80a0 	beq.w	8007ca0 <_dtoa_r+0x870>
 8007b60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b64:	464f      	mov	r7, r9
 8007b66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	441a      	add	r2, r3
 8007b6e:	4628      	mov	r0, r5
 8007b70:	4499      	add	r9, r3
 8007b72:	9209      	str	r2, [sp, #36]	; 0x24
 8007b74:	f000 fc7c 	bl	8008470 <__i2b>
 8007b78:	4606      	mov	r6, r0
 8007b7a:	b15f      	cbz	r7, 8007b94 <_dtoa_r+0x764>
 8007b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	dd08      	ble.n	8007b94 <_dtoa_r+0x764>
 8007b82:	42bb      	cmp	r3, r7
 8007b84:	bfa8      	it	ge
 8007b86:	463b      	movge	r3, r7
 8007b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b8a:	eba9 0903 	sub.w	r9, r9, r3
 8007b8e:	1aff      	subs	r7, r7, r3
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	9309      	str	r3, [sp, #36]	; 0x24
 8007b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b96:	b1f3      	cbz	r3, 8007bd6 <_dtoa_r+0x7a6>
 8007b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 80a0 	beq.w	8007ce0 <_dtoa_r+0x8b0>
 8007ba0:	2c00      	cmp	r4, #0
 8007ba2:	dd10      	ble.n	8007bc6 <_dtoa_r+0x796>
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4622      	mov	r2, r4
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 fd1f 	bl	80085ec <__pow5mult>
 8007bae:	4652      	mov	r2, sl
 8007bb0:	4601      	mov	r1, r0
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	f000 fc71 	bl	800849c <__multiply>
 8007bba:	4680      	mov	r8, r0
 8007bbc:	4651      	mov	r1, sl
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f000 fb56 	bl	8008270 <_Bfree>
 8007bc4:	46c2      	mov	sl, r8
 8007bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc8:	1b1a      	subs	r2, r3, r4
 8007bca:	d004      	beq.n	8007bd6 <_dtoa_r+0x7a6>
 8007bcc:	4651      	mov	r1, sl
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 fd0c 	bl	80085ec <__pow5mult>
 8007bd4:	4682      	mov	sl, r0
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f000 fc49 	bl	8008470 <__i2b>
 8007bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007be0:	4604      	mov	r4, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f340 8082 	ble.w	8007cec <_dtoa_r+0x8bc>
 8007be8:	461a      	mov	r2, r3
 8007bea:	4601      	mov	r1, r0
 8007bec:	4628      	mov	r0, r5
 8007bee:	f000 fcfd 	bl	80085ec <__pow5mult>
 8007bf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	dd7b      	ble.n	8007cf2 <_dtoa_r+0x8c2>
 8007bfa:	f04f 0800 	mov.w	r8, #0
 8007bfe:	6923      	ldr	r3, [r4, #16]
 8007c00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c04:	6918      	ldr	r0, [r3, #16]
 8007c06:	f000 fbe5 	bl	80083d4 <__hi0bits>
 8007c0a:	f1c0 0020 	rsb	r0, r0, #32
 8007c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c10:	4418      	add	r0, r3
 8007c12:	f010 001f 	ands.w	r0, r0, #31
 8007c16:	f000 8092 	beq.w	8007d3e <_dtoa_r+0x90e>
 8007c1a:	f1c0 0320 	rsb	r3, r0, #32
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	f340 8085 	ble.w	8007d2e <_dtoa_r+0x8fe>
 8007c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c26:	f1c0 001c 	rsb	r0, r0, #28
 8007c2a:	4403      	add	r3, r0
 8007c2c:	4481      	add	r9, r0
 8007c2e:	4407      	add	r7, r0
 8007c30:	9309      	str	r3, [sp, #36]	; 0x24
 8007c32:	f1b9 0f00 	cmp.w	r9, #0
 8007c36:	dd05      	ble.n	8007c44 <_dtoa_r+0x814>
 8007c38:	4651      	mov	r1, sl
 8007c3a:	464a      	mov	r2, r9
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 fd2f 	bl	80086a0 <__lshift>
 8007c42:	4682      	mov	sl, r0
 8007c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	dd05      	ble.n	8007c56 <_dtoa_r+0x826>
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f000 fd26 	bl	80086a0 <__lshift>
 8007c54:	4604      	mov	r4, r0
 8007c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d072      	beq.n	8007d42 <_dtoa_r+0x912>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4650      	mov	r0, sl
 8007c60:	f000 fd8a 	bl	8008778 <__mcmp>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	da6c      	bge.n	8007d42 <_dtoa_r+0x912>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4651      	mov	r1, sl
 8007c6c:	220a      	movs	r2, #10
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f000 fb20 	bl	80082b4 <__multadd>
 8007c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c76:	4682      	mov	sl, r0
 8007c78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 81ac 	beq.w	8007fda <_dtoa_r+0xbaa>
 8007c82:	2300      	movs	r3, #0
 8007c84:	4631      	mov	r1, r6
 8007c86:	220a      	movs	r2, #10
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f000 fb13 	bl	80082b4 <__multadd>
 8007c8e:	9b06      	ldr	r3, [sp, #24]
 8007c90:	4606      	mov	r6, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f300 8093 	bgt.w	8007dbe <_dtoa_r+0x98e>
 8007c98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	dc59      	bgt.n	8007d52 <_dtoa_r+0x922>
 8007c9e:	e08e      	b.n	8007dbe <_dtoa_r+0x98e>
 8007ca0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ca2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ca6:	e75d      	b.n	8007b64 <_dtoa_r+0x734>
 8007ca8:	9b08      	ldr	r3, [sp, #32]
 8007caa:	1e5c      	subs	r4, r3, #1
 8007cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cae:	42a3      	cmp	r3, r4
 8007cb0:	bfbf      	itttt	lt
 8007cb2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007cb4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007cb6:	1ae3      	sublt	r3, r4, r3
 8007cb8:	18d2      	addlt	r2, r2, r3
 8007cba:	bfa8      	it	ge
 8007cbc:	1b1c      	subge	r4, r3, r4
 8007cbe:	9b08      	ldr	r3, [sp, #32]
 8007cc0:	bfbe      	ittt	lt
 8007cc2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007cc4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007cc6:	2400      	movlt	r4, #0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bfb5      	itete	lt
 8007ccc:	eba9 0703 	sublt.w	r7, r9, r3
 8007cd0:	464f      	movge	r7, r9
 8007cd2:	2300      	movlt	r3, #0
 8007cd4:	9b08      	ldrge	r3, [sp, #32]
 8007cd6:	e747      	b.n	8007b68 <_dtoa_r+0x738>
 8007cd8:	464f      	mov	r7, r9
 8007cda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007cdc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007cde:	e74c      	b.n	8007b7a <_dtoa_r+0x74a>
 8007ce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ce2:	e773      	b.n	8007bcc <_dtoa_r+0x79c>
 8007ce4:	3fe00000 	.word	0x3fe00000
 8007ce8:	40240000 	.word	0x40240000
 8007cec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	dc18      	bgt.n	8007d24 <_dtoa_r+0x8f4>
 8007cf2:	9b04      	ldr	r3, [sp, #16]
 8007cf4:	b9b3      	cbnz	r3, 8007d24 <_dtoa_r+0x8f4>
 8007cf6:	9b05      	ldr	r3, [sp, #20]
 8007cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cfc:	b993      	cbnz	r3, 8007d24 <_dtoa_r+0x8f4>
 8007cfe:	9b05      	ldr	r3, [sp, #20]
 8007d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d04:	0d1b      	lsrs	r3, r3, #20
 8007d06:	051b      	lsls	r3, r3, #20
 8007d08:	b17b      	cbz	r3, 8007d2a <_dtoa_r+0x8fa>
 8007d0a:	f04f 0801 	mov.w	r8, #1
 8007d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d10:	f109 0901 	add.w	r9, r9, #1
 8007d14:	3301      	adds	r3, #1
 8007d16:	9309      	str	r3, [sp, #36]	; 0x24
 8007d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f47f af6f 	bne.w	8007bfe <_dtoa_r+0x7ce>
 8007d20:	2001      	movs	r0, #1
 8007d22:	e774      	b.n	8007c0e <_dtoa_r+0x7de>
 8007d24:	f04f 0800 	mov.w	r8, #0
 8007d28:	e7f6      	b.n	8007d18 <_dtoa_r+0x8e8>
 8007d2a:	4698      	mov	r8, r3
 8007d2c:	e7f4      	b.n	8007d18 <_dtoa_r+0x8e8>
 8007d2e:	d080      	beq.n	8007c32 <_dtoa_r+0x802>
 8007d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d32:	331c      	adds	r3, #28
 8007d34:	441a      	add	r2, r3
 8007d36:	4499      	add	r9, r3
 8007d38:	441f      	add	r7, r3
 8007d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d3c:	e779      	b.n	8007c32 <_dtoa_r+0x802>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	e7f6      	b.n	8007d30 <_dtoa_r+0x900>
 8007d42:	9b08      	ldr	r3, [sp, #32]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dc34      	bgt.n	8007db2 <_dtoa_r+0x982>
 8007d48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	dd31      	ble.n	8007db2 <_dtoa_r+0x982>
 8007d4e:	9b08      	ldr	r3, [sp, #32]
 8007d50:	9306      	str	r3, [sp, #24]
 8007d52:	9b06      	ldr	r3, [sp, #24]
 8007d54:	b963      	cbnz	r3, 8007d70 <_dtoa_r+0x940>
 8007d56:	4621      	mov	r1, r4
 8007d58:	2205      	movs	r2, #5
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 faaa 	bl	80082b4 <__multadd>
 8007d60:	4601      	mov	r1, r0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4650      	mov	r0, sl
 8007d66:	f000 fd07 	bl	8008778 <__mcmp>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	f73f adbf 	bgt.w	80078ee <_dtoa_r+0x4be>
 8007d70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d72:	9f03      	ldr	r7, [sp, #12]
 8007d74:	ea6f 0b03 	mvn.w	fp, r3
 8007d78:	f04f 0800 	mov.w	r8, #0
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f000 fa76 	bl	8008270 <_Bfree>
 8007d84:	2e00      	cmp	r6, #0
 8007d86:	f43f aead 	beq.w	8007ae4 <_dtoa_r+0x6b4>
 8007d8a:	f1b8 0f00 	cmp.w	r8, #0
 8007d8e:	d005      	beq.n	8007d9c <_dtoa_r+0x96c>
 8007d90:	45b0      	cmp	r8, r6
 8007d92:	d003      	beq.n	8007d9c <_dtoa_r+0x96c>
 8007d94:	4641      	mov	r1, r8
 8007d96:	4628      	mov	r0, r5
 8007d98:	f000 fa6a 	bl	8008270 <_Bfree>
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	f000 fa66 	bl	8008270 <_Bfree>
 8007da4:	e69e      	b.n	8007ae4 <_dtoa_r+0x6b4>
 8007da6:	2400      	movs	r4, #0
 8007da8:	4626      	mov	r6, r4
 8007daa:	e7e1      	b.n	8007d70 <_dtoa_r+0x940>
 8007dac:	46c3      	mov	fp, r8
 8007dae:	4626      	mov	r6, r4
 8007db0:	e59d      	b.n	80078ee <_dtoa_r+0x4be>
 8007db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80c8 	beq.w	8007f4a <_dtoa_r+0xb1a>
 8007dba:	9b08      	ldr	r3, [sp, #32]
 8007dbc:	9306      	str	r3, [sp, #24]
 8007dbe:	2f00      	cmp	r7, #0
 8007dc0:	dd05      	ble.n	8007dce <_dtoa_r+0x99e>
 8007dc2:	4631      	mov	r1, r6
 8007dc4:	463a      	mov	r2, r7
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 fc6a 	bl	80086a0 <__lshift>
 8007dcc:	4606      	mov	r6, r0
 8007dce:	f1b8 0f00 	cmp.w	r8, #0
 8007dd2:	d05b      	beq.n	8007e8c <_dtoa_r+0xa5c>
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	6871      	ldr	r1, [r6, #4]
 8007dd8:	f000 fa0a 	bl	80081f0 <_Balloc>
 8007ddc:	4607      	mov	r7, r0
 8007dde:	b928      	cbnz	r0, 8007dec <_dtoa_r+0x9bc>
 8007de0:	4602      	mov	r2, r0
 8007de2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007de6:	4b81      	ldr	r3, [pc, #516]	; (8007fec <_dtoa_r+0xbbc>)
 8007de8:	f7ff bb36 	b.w	8007458 <_dtoa_r+0x28>
 8007dec:	6932      	ldr	r2, [r6, #16]
 8007dee:	f106 010c 	add.w	r1, r6, #12
 8007df2:	3202      	adds	r2, #2
 8007df4:	0092      	lsls	r2, r2, #2
 8007df6:	300c      	adds	r0, #12
 8007df8:	f7ff fa7b 	bl	80072f2 <memcpy>
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	4639      	mov	r1, r7
 8007e00:	4628      	mov	r0, r5
 8007e02:	f000 fc4d 	bl	80086a0 <__lshift>
 8007e06:	46b0      	mov	r8, r6
 8007e08:	4606      	mov	r6, r0
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	9a03      	ldr	r2, [sp, #12]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	9308      	str	r3, [sp, #32]
 8007e12:	9b06      	ldr	r3, [sp, #24]
 8007e14:	4413      	add	r3, r2
 8007e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e18:	9b04      	ldr	r3, [sp, #16]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e20:	9b08      	ldr	r3, [sp, #32]
 8007e22:	4621      	mov	r1, r4
 8007e24:	3b01      	subs	r3, #1
 8007e26:	4650      	mov	r0, sl
 8007e28:	9304      	str	r3, [sp, #16]
 8007e2a:	f7ff fa75 	bl	8007318 <quorem>
 8007e2e:	4641      	mov	r1, r8
 8007e30:	9006      	str	r0, [sp, #24]
 8007e32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e36:	4650      	mov	r0, sl
 8007e38:	f000 fc9e 	bl	8008778 <__mcmp>
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	9009      	str	r0, [sp, #36]	; 0x24
 8007e40:	4621      	mov	r1, r4
 8007e42:	4628      	mov	r0, r5
 8007e44:	f000 fcb4 	bl	80087b0 <__mdiff>
 8007e48:	68c2      	ldr	r2, [r0, #12]
 8007e4a:	4607      	mov	r7, r0
 8007e4c:	bb02      	cbnz	r2, 8007e90 <_dtoa_r+0xa60>
 8007e4e:	4601      	mov	r1, r0
 8007e50:	4650      	mov	r0, sl
 8007e52:	f000 fc91 	bl	8008778 <__mcmp>
 8007e56:	4602      	mov	r2, r0
 8007e58:	4639      	mov	r1, r7
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	920c      	str	r2, [sp, #48]	; 0x30
 8007e5e:	f000 fa07 	bl	8008270 <_Bfree>
 8007e62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e66:	9f08      	ldr	r7, [sp, #32]
 8007e68:	ea43 0102 	orr.w	r1, r3, r2
 8007e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e6e:	4319      	orrs	r1, r3
 8007e70:	d110      	bne.n	8007e94 <_dtoa_r+0xa64>
 8007e72:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e76:	d029      	beq.n	8007ecc <_dtoa_r+0xa9c>
 8007e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	dd02      	ble.n	8007e84 <_dtoa_r+0xa54>
 8007e7e:	9b06      	ldr	r3, [sp, #24]
 8007e80:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007e84:	9b04      	ldr	r3, [sp, #16]
 8007e86:	f883 9000 	strb.w	r9, [r3]
 8007e8a:	e777      	b.n	8007d7c <_dtoa_r+0x94c>
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	e7ba      	b.n	8007e06 <_dtoa_r+0x9d6>
 8007e90:	2201      	movs	r2, #1
 8007e92:	e7e1      	b.n	8007e58 <_dtoa_r+0xa28>
 8007e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	db04      	blt.n	8007ea4 <_dtoa_r+0xa74>
 8007e9a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	d120      	bne.n	8007ee6 <_dtoa_r+0xab6>
 8007ea4:	2a00      	cmp	r2, #0
 8007ea6:	dded      	ble.n	8007e84 <_dtoa_r+0xa54>
 8007ea8:	4651      	mov	r1, sl
 8007eaa:	2201      	movs	r2, #1
 8007eac:	4628      	mov	r0, r5
 8007eae:	f000 fbf7 	bl	80086a0 <__lshift>
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	4682      	mov	sl, r0
 8007eb6:	f000 fc5f 	bl	8008778 <__mcmp>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	dc03      	bgt.n	8007ec6 <_dtoa_r+0xa96>
 8007ebe:	d1e1      	bne.n	8007e84 <_dtoa_r+0xa54>
 8007ec0:	f019 0f01 	tst.w	r9, #1
 8007ec4:	d0de      	beq.n	8007e84 <_dtoa_r+0xa54>
 8007ec6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007eca:	d1d8      	bne.n	8007e7e <_dtoa_r+0xa4e>
 8007ecc:	2339      	movs	r3, #57	; 0x39
 8007ece:	9a04      	ldr	r2, [sp, #16]
 8007ed0:	7013      	strb	r3, [r2, #0]
 8007ed2:	463b      	mov	r3, r7
 8007ed4:	461f      	mov	r7, r3
 8007ed6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	2a39      	cmp	r2, #57	; 0x39
 8007ede:	d06b      	beq.n	8007fb8 <_dtoa_r+0xb88>
 8007ee0:	3201      	adds	r2, #1
 8007ee2:	701a      	strb	r2, [r3, #0]
 8007ee4:	e74a      	b.n	8007d7c <_dtoa_r+0x94c>
 8007ee6:	2a00      	cmp	r2, #0
 8007ee8:	dd07      	ble.n	8007efa <_dtoa_r+0xaca>
 8007eea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007eee:	d0ed      	beq.n	8007ecc <_dtoa_r+0xa9c>
 8007ef0:	9a04      	ldr	r2, [sp, #16]
 8007ef2:	f109 0301 	add.w	r3, r9, #1
 8007ef6:	7013      	strb	r3, [r2, #0]
 8007ef8:	e740      	b.n	8007d7c <_dtoa_r+0x94c>
 8007efa:	9b08      	ldr	r3, [sp, #32]
 8007efc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007efe:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d042      	beq.n	8007f8c <_dtoa_r+0xb5c>
 8007f06:	4651      	mov	r1, sl
 8007f08:	2300      	movs	r3, #0
 8007f0a:	220a      	movs	r2, #10
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	f000 f9d1 	bl	80082b4 <__multadd>
 8007f12:	45b0      	cmp	r8, r6
 8007f14:	4682      	mov	sl, r0
 8007f16:	f04f 0300 	mov.w	r3, #0
 8007f1a:	f04f 020a 	mov.w	r2, #10
 8007f1e:	4641      	mov	r1, r8
 8007f20:	4628      	mov	r0, r5
 8007f22:	d107      	bne.n	8007f34 <_dtoa_r+0xb04>
 8007f24:	f000 f9c6 	bl	80082b4 <__multadd>
 8007f28:	4680      	mov	r8, r0
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	9b08      	ldr	r3, [sp, #32]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	9308      	str	r3, [sp, #32]
 8007f32:	e775      	b.n	8007e20 <_dtoa_r+0x9f0>
 8007f34:	f000 f9be 	bl	80082b4 <__multadd>
 8007f38:	4631      	mov	r1, r6
 8007f3a:	4680      	mov	r8, r0
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	220a      	movs	r2, #10
 8007f40:	4628      	mov	r0, r5
 8007f42:	f000 f9b7 	bl	80082b4 <__multadd>
 8007f46:	4606      	mov	r6, r0
 8007f48:	e7f0      	b.n	8007f2c <_dtoa_r+0xafc>
 8007f4a:	9b08      	ldr	r3, [sp, #32]
 8007f4c:	9306      	str	r3, [sp, #24]
 8007f4e:	9f03      	ldr	r7, [sp, #12]
 8007f50:	4621      	mov	r1, r4
 8007f52:	4650      	mov	r0, sl
 8007f54:	f7ff f9e0 	bl	8007318 <quorem>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f5e:	f807 9b01 	strb.w	r9, [r7], #1
 8007f62:	1afa      	subs	r2, r7, r3
 8007f64:	9b06      	ldr	r3, [sp, #24]
 8007f66:	4293      	cmp	r3, r2
 8007f68:	dd07      	ble.n	8007f7a <_dtoa_r+0xb4a>
 8007f6a:	4651      	mov	r1, sl
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	220a      	movs	r2, #10
 8007f70:	4628      	mov	r0, r5
 8007f72:	f000 f99f 	bl	80082b4 <__multadd>
 8007f76:	4682      	mov	sl, r0
 8007f78:	e7ea      	b.n	8007f50 <_dtoa_r+0xb20>
 8007f7a:	9b06      	ldr	r3, [sp, #24]
 8007f7c:	f04f 0800 	mov.w	r8, #0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	bfcc      	ite	gt
 8007f84:	461f      	movgt	r7, r3
 8007f86:	2701      	movle	r7, #1
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	441f      	add	r7, r3
 8007f8c:	4651      	mov	r1, sl
 8007f8e:	2201      	movs	r2, #1
 8007f90:	4628      	mov	r0, r5
 8007f92:	f000 fb85 	bl	80086a0 <__lshift>
 8007f96:	4621      	mov	r1, r4
 8007f98:	4682      	mov	sl, r0
 8007f9a:	f000 fbed 	bl	8008778 <__mcmp>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	dc97      	bgt.n	8007ed2 <_dtoa_r+0xaa2>
 8007fa2:	d102      	bne.n	8007faa <_dtoa_r+0xb7a>
 8007fa4:	f019 0f01 	tst.w	r9, #1
 8007fa8:	d193      	bne.n	8007ed2 <_dtoa_r+0xaa2>
 8007faa:	463b      	mov	r3, r7
 8007fac:	461f      	mov	r7, r3
 8007fae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fb2:	2a30      	cmp	r2, #48	; 0x30
 8007fb4:	d0fa      	beq.n	8007fac <_dtoa_r+0xb7c>
 8007fb6:	e6e1      	b.n	8007d7c <_dtoa_r+0x94c>
 8007fb8:	9a03      	ldr	r2, [sp, #12]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d18a      	bne.n	8007ed4 <_dtoa_r+0xaa4>
 8007fbe:	2331      	movs	r3, #49	; 0x31
 8007fc0:	f10b 0b01 	add.w	fp, fp, #1
 8007fc4:	e797      	b.n	8007ef6 <_dtoa_r+0xac6>
 8007fc6:	4b0a      	ldr	r3, [pc, #40]	; (8007ff0 <_dtoa_r+0xbc0>)
 8007fc8:	f7ff ba9f 	b.w	800750a <_dtoa_r+0xda>
 8007fcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f47f aa77 	bne.w	80074c2 <_dtoa_r+0x92>
 8007fd4:	4b07      	ldr	r3, [pc, #28]	; (8007ff4 <_dtoa_r+0xbc4>)
 8007fd6:	f7ff ba98 	b.w	800750a <_dtoa_r+0xda>
 8007fda:	9b06      	ldr	r3, [sp, #24]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	dcb6      	bgt.n	8007f4e <_dtoa_r+0xb1e>
 8007fe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	f73f aeb5 	bgt.w	8007d52 <_dtoa_r+0x922>
 8007fe8:	e7b1      	b.n	8007f4e <_dtoa_r+0xb1e>
 8007fea:	bf00      	nop
 8007fec:	0800c6f5 	.word	0x0800c6f5
 8007ff0:	0800c650 	.word	0x0800c650
 8007ff4:	0800c679 	.word	0x0800c679

08007ff8 <_free_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4605      	mov	r5, r0
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	d040      	beq.n	8008082 <_free_r+0x8a>
 8008000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008004:	1f0c      	subs	r4, r1, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	bfb8      	it	lt
 800800a:	18e4      	addlt	r4, r4, r3
 800800c:	f000 f8e4 	bl	80081d8 <__malloc_lock>
 8008010:	4a1c      	ldr	r2, [pc, #112]	; (8008084 <_free_r+0x8c>)
 8008012:	6813      	ldr	r3, [r2, #0]
 8008014:	b933      	cbnz	r3, 8008024 <_free_r+0x2c>
 8008016:	6063      	str	r3, [r4, #4]
 8008018:	6014      	str	r4, [r2, #0]
 800801a:	4628      	mov	r0, r5
 800801c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008020:	f000 b8e0 	b.w	80081e4 <__malloc_unlock>
 8008024:	42a3      	cmp	r3, r4
 8008026:	d908      	bls.n	800803a <_free_r+0x42>
 8008028:	6820      	ldr	r0, [r4, #0]
 800802a:	1821      	adds	r1, r4, r0
 800802c:	428b      	cmp	r3, r1
 800802e:	bf01      	itttt	eq
 8008030:	6819      	ldreq	r1, [r3, #0]
 8008032:	685b      	ldreq	r3, [r3, #4]
 8008034:	1809      	addeq	r1, r1, r0
 8008036:	6021      	streq	r1, [r4, #0]
 8008038:	e7ed      	b.n	8008016 <_free_r+0x1e>
 800803a:	461a      	mov	r2, r3
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	b10b      	cbz	r3, 8008044 <_free_r+0x4c>
 8008040:	42a3      	cmp	r3, r4
 8008042:	d9fa      	bls.n	800803a <_free_r+0x42>
 8008044:	6811      	ldr	r1, [r2, #0]
 8008046:	1850      	adds	r0, r2, r1
 8008048:	42a0      	cmp	r0, r4
 800804a:	d10b      	bne.n	8008064 <_free_r+0x6c>
 800804c:	6820      	ldr	r0, [r4, #0]
 800804e:	4401      	add	r1, r0
 8008050:	1850      	adds	r0, r2, r1
 8008052:	4283      	cmp	r3, r0
 8008054:	6011      	str	r1, [r2, #0]
 8008056:	d1e0      	bne.n	800801a <_free_r+0x22>
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	4408      	add	r0, r1
 800805e:	6010      	str	r0, [r2, #0]
 8008060:	6053      	str	r3, [r2, #4]
 8008062:	e7da      	b.n	800801a <_free_r+0x22>
 8008064:	d902      	bls.n	800806c <_free_r+0x74>
 8008066:	230c      	movs	r3, #12
 8008068:	602b      	str	r3, [r5, #0]
 800806a:	e7d6      	b.n	800801a <_free_r+0x22>
 800806c:	6820      	ldr	r0, [r4, #0]
 800806e:	1821      	adds	r1, r4, r0
 8008070:	428b      	cmp	r3, r1
 8008072:	bf01      	itttt	eq
 8008074:	6819      	ldreq	r1, [r3, #0]
 8008076:	685b      	ldreq	r3, [r3, #4]
 8008078:	1809      	addeq	r1, r1, r0
 800807a:	6021      	streq	r1, [r4, #0]
 800807c:	6063      	str	r3, [r4, #4]
 800807e:	6054      	str	r4, [r2, #4]
 8008080:	e7cb      	b.n	800801a <_free_r+0x22>
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	2000184c 	.word	0x2000184c

08008088 <malloc>:
 8008088:	4b02      	ldr	r3, [pc, #8]	; (8008094 <malloc+0xc>)
 800808a:	4601      	mov	r1, r0
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	f000 b823 	b.w	80080d8 <_malloc_r>
 8008092:	bf00      	nop
 8008094:	20000084 	.word	0x20000084

08008098 <sbrk_aligned>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	4e0e      	ldr	r6, [pc, #56]	; (80080d4 <sbrk_aligned+0x3c>)
 800809c:	460c      	mov	r4, r1
 800809e:	6831      	ldr	r1, [r6, #0]
 80080a0:	4605      	mov	r5, r0
 80080a2:	b911      	cbnz	r1, 80080aa <sbrk_aligned+0x12>
 80080a4:	f001 ffe4 	bl	800a070 <_sbrk_r>
 80080a8:	6030      	str	r0, [r6, #0]
 80080aa:	4621      	mov	r1, r4
 80080ac:	4628      	mov	r0, r5
 80080ae:	f001 ffdf 	bl	800a070 <_sbrk_r>
 80080b2:	1c43      	adds	r3, r0, #1
 80080b4:	d00a      	beq.n	80080cc <sbrk_aligned+0x34>
 80080b6:	1cc4      	adds	r4, r0, #3
 80080b8:	f024 0403 	bic.w	r4, r4, #3
 80080bc:	42a0      	cmp	r0, r4
 80080be:	d007      	beq.n	80080d0 <sbrk_aligned+0x38>
 80080c0:	1a21      	subs	r1, r4, r0
 80080c2:	4628      	mov	r0, r5
 80080c4:	f001 ffd4 	bl	800a070 <_sbrk_r>
 80080c8:	3001      	adds	r0, #1
 80080ca:	d101      	bne.n	80080d0 <sbrk_aligned+0x38>
 80080cc:	f04f 34ff 	mov.w	r4, #4294967295
 80080d0:	4620      	mov	r0, r4
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
 80080d4:	20001850 	.word	0x20001850

080080d8 <_malloc_r>:
 80080d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080dc:	1ccd      	adds	r5, r1, #3
 80080de:	f025 0503 	bic.w	r5, r5, #3
 80080e2:	3508      	adds	r5, #8
 80080e4:	2d0c      	cmp	r5, #12
 80080e6:	bf38      	it	cc
 80080e8:	250c      	movcc	r5, #12
 80080ea:	2d00      	cmp	r5, #0
 80080ec:	4607      	mov	r7, r0
 80080ee:	db01      	blt.n	80080f4 <_malloc_r+0x1c>
 80080f0:	42a9      	cmp	r1, r5
 80080f2:	d905      	bls.n	8008100 <_malloc_r+0x28>
 80080f4:	230c      	movs	r3, #12
 80080f6:	2600      	movs	r6, #0
 80080f8:	603b      	str	r3, [r7, #0]
 80080fa:	4630      	mov	r0, r6
 80080fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008100:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80081d4 <_malloc_r+0xfc>
 8008104:	f000 f868 	bl	80081d8 <__malloc_lock>
 8008108:	f8d8 3000 	ldr.w	r3, [r8]
 800810c:	461c      	mov	r4, r3
 800810e:	bb5c      	cbnz	r4, 8008168 <_malloc_r+0x90>
 8008110:	4629      	mov	r1, r5
 8008112:	4638      	mov	r0, r7
 8008114:	f7ff ffc0 	bl	8008098 <sbrk_aligned>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	4604      	mov	r4, r0
 800811c:	d155      	bne.n	80081ca <_malloc_r+0xf2>
 800811e:	f8d8 4000 	ldr.w	r4, [r8]
 8008122:	4626      	mov	r6, r4
 8008124:	2e00      	cmp	r6, #0
 8008126:	d145      	bne.n	80081b4 <_malloc_r+0xdc>
 8008128:	2c00      	cmp	r4, #0
 800812a:	d048      	beq.n	80081be <_malloc_r+0xe6>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	4631      	mov	r1, r6
 8008130:	4638      	mov	r0, r7
 8008132:	eb04 0903 	add.w	r9, r4, r3
 8008136:	f001 ff9b 	bl	800a070 <_sbrk_r>
 800813a:	4581      	cmp	r9, r0
 800813c:	d13f      	bne.n	80081be <_malloc_r+0xe6>
 800813e:	6821      	ldr	r1, [r4, #0]
 8008140:	4638      	mov	r0, r7
 8008142:	1a6d      	subs	r5, r5, r1
 8008144:	4629      	mov	r1, r5
 8008146:	f7ff ffa7 	bl	8008098 <sbrk_aligned>
 800814a:	3001      	adds	r0, #1
 800814c:	d037      	beq.n	80081be <_malloc_r+0xe6>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	442b      	add	r3, r5
 8008152:	6023      	str	r3, [r4, #0]
 8008154:	f8d8 3000 	ldr.w	r3, [r8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d038      	beq.n	80081ce <_malloc_r+0xf6>
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	42a2      	cmp	r2, r4
 8008160:	d12b      	bne.n	80081ba <_malloc_r+0xe2>
 8008162:	2200      	movs	r2, #0
 8008164:	605a      	str	r2, [r3, #4]
 8008166:	e00f      	b.n	8008188 <_malloc_r+0xb0>
 8008168:	6822      	ldr	r2, [r4, #0]
 800816a:	1b52      	subs	r2, r2, r5
 800816c:	d41f      	bmi.n	80081ae <_malloc_r+0xd6>
 800816e:	2a0b      	cmp	r2, #11
 8008170:	d917      	bls.n	80081a2 <_malloc_r+0xca>
 8008172:	1961      	adds	r1, r4, r5
 8008174:	42a3      	cmp	r3, r4
 8008176:	6025      	str	r5, [r4, #0]
 8008178:	bf18      	it	ne
 800817a:	6059      	strne	r1, [r3, #4]
 800817c:	6863      	ldr	r3, [r4, #4]
 800817e:	bf08      	it	eq
 8008180:	f8c8 1000 	streq.w	r1, [r8]
 8008184:	5162      	str	r2, [r4, r5]
 8008186:	604b      	str	r3, [r1, #4]
 8008188:	4638      	mov	r0, r7
 800818a:	f104 060b 	add.w	r6, r4, #11
 800818e:	f000 f829 	bl	80081e4 <__malloc_unlock>
 8008192:	f026 0607 	bic.w	r6, r6, #7
 8008196:	1d23      	adds	r3, r4, #4
 8008198:	1af2      	subs	r2, r6, r3
 800819a:	d0ae      	beq.n	80080fa <_malloc_r+0x22>
 800819c:	1b9b      	subs	r3, r3, r6
 800819e:	50a3      	str	r3, [r4, r2]
 80081a0:	e7ab      	b.n	80080fa <_malloc_r+0x22>
 80081a2:	42a3      	cmp	r3, r4
 80081a4:	6862      	ldr	r2, [r4, #4]
 80081a6:	d1dd      	bne.n	8008164 <_malloc_r+0x8c>
 80081a8:	f8c8 2000 	str.w	r2, [r8]
 80081ac:	e7ec      	b.n	8008188 <_malloc_r+0xb0>
 80081ae:	4623      	mov	r3, r4
 80081b0:	6864      	ldr	r4, [r4, #4]
 80081b2:	e7ac      	b.n	800810e <_malloc_r+0x36>
 80081b4:	4634      	mov	r4, r6
 80081b6:	6876      	ldr	r6, [r6, #4]
 80081b8:	e7b4      	b.n	8008124 <_malloc_r+0x4c>
 80081ba:	4613      	mov	r3, r2
 80081bc:	e7cc      	b.n	8008158 <_malloc_r+0x80>
 80081be:	230c      	movs	r3, #12
 80081c0:	4638      	mov	r0, r7
 80081c2:	603b      	str	r3, [r7, #0]
 80081c4:	f000 f80e 	bl	80081e4 <__malloc_unlock>
 80081c8:	e797      	b.n	80080fa <_malloc_r+0x22>
 80081ca:	6025      	str	r5, [r4, #0]
 80081cc:	e7dc      	b.n	8008188 <_malloc_r+0xb0>
 80081ce:	605b      	str	r3, [r3, #4]
 80081d0:	deff      	udf	#255	; 0xff
 80081d2:	bf00      	nop
 80081d4:	2000184c 	.word	0x2000184c

080081d8 <__malloc_lock>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__malloc_lock+0x8>)
 80081da:	f7ff b87a 	b.w	80072d2 <__retarget_lock_acquire_recursive>
 80081de:	bf00      	nop
 80081e0:	20001848 	.word	0x20001848

080081e4 <__malloc_unlock>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__malloc_unlock+0x8>)
 80081e6:	f7ff b875 	b.w	80072d4 <__retarget_lock_release_recursive>
 80081ea:	bf00      	nop
 80081ec:	20001848 	.word	0x20001848

080081f0 <_Balloc>:
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	69c6      	ldr	r6, [r0, #28]
 80081f4:	4604      	mov	r4, r0
 80081f6:	460d      	mov	r5, r1
 80081f8:	b976      	cbnz	r6, 8008218 <_Balloc+0x28>
 80081fa:	2010      	movs	r0, #16
 80081fc:	f7ff ff44 	bl	8008088 <malloc>
 8008200:	4602      	mov	r2, r0
 8008202:	61e0      	str	r0, [r4, #28]
 8008204:	b920      	cbnz	r0, 8008210 <_Balloc+0x20>
 8008206:	216b      	movs	r1, #107	; 0x6b
 8008208:	4b17      	ldr	r3, [pc, #92]	; (8008268 <_Balloc+0x78>)
 800820a:	4818      	ldr	r0, [pc, #96]	; (800826c <_Balloc+0x7c>)
 800820c:	f001 ff46 	bl	800a09c <__assert_func>
 8008210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008214:	6006      	str	r6, [r0, #0]
 8008216:	60c6      	str	r6, [r0, #12]
 8008218:	69e6      	ldr	r6, [r4, #28]
 800821a:	68f3      	ldr	r3, [r6, #12]
 800821c:	b183      	cbz	r3, 8008240 <_Balloc+0x50>
 800821e:	69e3      	ldr	r3, [r4, #28]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008226:	b9b8      	cbnz	r0, 8008258 <_Balloc+0x68>
 8008228:	2101      	movs	r1, #1
 800822a:	fa01 f605 	lsl.w	r6, r1, r5
 800822e:	1d72      	adds	r2, r6, #5
 8008230:	4620      	mov	r0, r4
 8008232:	0092      	lsls	r2, r2, #2
 8008234:	f001 ff50 	bl	800a0d8 <_calloc_r>
 8008238:	b160      	cbz	r0, 8008254 <_Balloc+0x64>
 800823a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800823e:	e00e      	b.n	800825e <_Balloc+0x6e>
 8008240:	2221      	movs	r2, #33	; 0x21
 8008242:	2104      	movs	r1, #4
 8008244:	4620      	mov	r0, r4
 8008246:	f001 ff47 	bl	800a0d8 <_calloc_r>
 800824a:	69e3      	ldr	r3, [r4, #28]
 800824c:	60f0      	str	r0, [r6, #12]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1e4      	bne.n	800821e <_Balloc+0x2e>
 8008254:	2000      	movs	r0, #0
 8008256:	bd70      	pop	{r4, r5, r6, pc}
 8008258:	6802      	ldr	r2, [r0, #0]
 800825a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800825e:	2300      	movs	r3, #0
 8008260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008264:	e7f7      	b.n	8008256 <_Balloc+0x66>
 8008266:	bf00      	nop
 8008268:	0800c686 	.word	0x0800c686
 800826c:	0800c706 	.word	0x0800c706

08008270 <_Bfree>:
 8008270:	b570      	push	{r4, r5, r6, lr}
 8008272:	69c6      	ldr	r6, [r0, #28]
 8008274:	4605      	mov	r5, r0
 8008276:	460c      	mov	r4, r1
 8008278:	b976      	cbnz	r6, 8008298 <_Bfree+0x28>
 800827a:	2010      	movs	r0, #16
 800827c:	f7ff ff04 	bl	8008088 <malloc>
 8008280:	4602      	mov	r2, r0
 8008282:	61e8      	str	r0, [r5, #28]
 8008284:	b920      	cbnz	r0, 8008290 <_Bfree+0x20>
 8008286:	218f      	movs	r1, #143	; 0x8f
 8008288:	4b08      	ldr	r3, [pc, #32]	; (80082ac <_Bfree+0x3c>)
 800828a:	4809      	ldr	r0, [pc, #36]	; (80082b0 <_Bfree+0x40>)
 800828c:	f001 ff06 	bl	800a09c <__assert_func>
 8008290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008294:	6006      	str	r6, [r0, #0]
 8008296:	60c6      	str	r6, [r0, #12]
 8008298:	b13c      	cbz	r4, 80082aa <_Bfree+0x3a>
 800829a:	69eb      	ldr	r3, [r5, #28]
 800829c:	6862      	ldr	r2, [r4, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082a4:	6021      	str	r1, [r4, #0]
 80082a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082aa:	bd70      	pop	{r4, r5, r6, pc}
 80082ac:	0800c686 	.word	0x0800c686
 80082b0:	0800c706 	.word	0x0800c706

080082b4 <__multadd>:
 80082b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b8:	4607      	mov	r7, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	461e      	mov	r6, r3
 80082be:	2000      	movs	r0, #0
 80082c0:	690d      	ldr	r5, [r1, #16]
 80082c2:	f101 0c14 	add.w	ip, r1, #20
 80082c6:	f8dc 3000 	ldr.w	r3, [ip]
 80082ca:	3001      	adds	r0, #1
 80082cc:	b299      	uxth	r1, r3
 80082ce:	fb02 6101 	mla	r1, r2, r1, r6
 80082d2:	0c1e      	lsrs	r6, r3, #16
 80082d4:	0c0b      	lsrs	r3, r1, #16
 80082d6:	fb02 3306 	mla	r3, r2, r6, r3
 80082da:	b289      	uxth	r1, r1
 80082dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082e0:	4285      	cmp	r5, r0
 80082e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082e6:	f84c 1b04 	str.w	r1, [ip], #4
 80082ea:	dcec      	bgt.n	80082c6 <__multadd+0x12>
 80082ec:	b30e      	cbz	r6, 8008332 <__multadd+0x7e>
 80082ee:	68a3      	ldr	r3, [r4, #8]
 80082f0:	42ab      	cmp	r3, r5
 80082f2:	dc19      	bgt.n	8008328 <__multadd+0x74>
 80082f4:	6861      	ldr	r1, [r4, #4]
 80082f6:	4638      	mov	r0, r7
 80082f8:	3101      	adds	r1, #1
 80082fa:	f7ff ff79 	bl	80081f0 <_Balloc>
 80082fe:	4680      	mov	r8, r0
 8008300:	b928      	cbnz	r0, 800830e <__multadd+0x5a>
 8008302:	4602      	mov	r2, r0
 8008304:	21ba      	movs	r1, #186	; 0xba
 8008306:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <__multadd+0x84>)
 8008308:	480c      	ldr	r0, [pc, #48]	; (800833c <__multadd+0x88>)
 800830a:	f001 fec7 	bl	800a09c <__assert_func>
 800830e:	6922      	ldr	r2, [r4, #16]
 8008310:	f104 010c 	add.w	r1, r4, #12
 8008314:	3202      	adds	r2, #2
 8008316:	0092      	lsls	r2, r2, #2
 8008318:	300c      	adds	r0, #12
 800831a:	f7fe ffea 	bl	80072f2 <memcpy>
 800831e:	4621      	mov	r1, r4
 8008320:	4638      	mov	r0, r7
 8008322:	f7ff ffa5 	bl	8008270 <_Bfree>
 8008326:	4644      	mov	r4, r8
 8008328:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800832c:	3501      	adds	r5, #1
 800832e:	615e      	str	r6, [r3, #20]
 8008330:	6125      	str	r5, [r4, #16]
 8008332:	4620      	mov	r0, r4
 8008334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008338:	0800c6f5 	.word	0x0800c6f5
 800833c:	0800c706 	.word	0x0800c706

08008340 <__s2b>:
 8008340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008344:	4615      	mov	r5, r2
 8008346:	2209      	movs	r2, #9
 8008348:	461f      	mov	r7, r3
 800834a:	3308      	adds	r3, #8
 800834c:	460c      	mov	r4, r1
 800834e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008352:	4606      	mov	r6, r0
 8008354:	2201      	movs	r2, #1
 8008356:	2100      	movs	r1, #0
 8008358:	429a      	cmp	r2, r3
 800835a:	db09      	blt.n	8008370 <__s2b+0x30>
 800835c:	4630      	mov	r0, r6
 800835e:	f7ff ff47 	bl	80081f0 <_Balloc>
 8008362:	b940      	cbnz	r0, 8008376 <__s2b+0x36>
 8008364:	4602      	mov	r2, r0
 8008366:	21d3      	movs	r1, #211	; 0xd3
 8008368:	4b18      	ldr	r3, [pc, #96]	; (80083cc <__s2b+0x8c>)
 800836a:	4819      	ldr	r0, [pc, #100]	; (80083d0 <__s2b+0x90>)
 800836c:	f001 fe96 	bl	800a09c <__assert_func>
 8008370:	0052      	lsls	r2, r2, #1
 8008372:	3101      	adds	r1, #1
 8008374:	e7f0      	b.n	8008358 <__s2b+0x18>
 8008376:	9b08      	ldr	r3, [sp, #32]
 8008378:	2d09      	cmp	r5, #9
 800837a:	6143      	str	r3, [r0, #20]
 800837c:	f04f 0301 	mov.w	r3, #1
 8008380:	6103      	str	r3, [r0, #16]
 8008382:	dd16      	ble.n	80083b2 <__s2b+0x72>
 8008384:	f104 0909 	add.w	r9, r4, #9
 8008388:	46c8      	mov	r8, r9
 800838a:	442c      	add	r4, r5
 800838c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008390:	4601      	mov	r1, r0
 8008392:	220a      	movs	r2, #10
 8008394:	4630      	mov	r0, r6
 8008396:	3b30      	subs	r3, #48	; 0x30
 8008398:	f7ff ff8c 	bl	80082b4 <__multadd>
 800839c:	45a0      	cmp	r8, r4
 800839e:	d1f5      	bne.n	800838c <__s2b+0x4c>
 80083a0:	f1a5 0408 	sub.w	r4, r5, #8
 80083a4:	444c      	add	r4, r9
 80083a6:	1b2d      	subs	r5, r5, r4
 80083a8:	1963      	adds	r3, r4, r5
 80083aa:	42bb      	cmp	r3, r7
 80083ac:	db04      	blt.n	80083b8 <__s2b+0x78>
 80083ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b2:	2509      	movs	r5, #9
 80083b4:	340a      	adds	r4, #10
 80083b6:	e7f6      	b.n	80083a6 <__s2b+0x66>
 80083b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083bc:	4601      	mov	r1, r0
 80083be:	220a      	movs	r2, #10
 80083c0:	4630      	mov	r0, r6
 80083c2:	3b30      	subs	r3, #48	; 0x30
 80083c4:	f7ff ff76 	bl	80082b4 <__multadd>
 80083c8:	e7ee      	b.n	80083a8 <__s2b+0x68>
 80083ca:	bf00      	nop
 80083cc:	0800c6f5 	.word	0x0800c6f5
 80083d0:	0800c706 	.word	0x0800c706

080083d4 <__hi0bits>:
 80083d4:	0c02      	lsrs	r2, r0, #16
 80083d6:	0412      	lsls	r2, r2, #16
 80083d8:	4603      	mov	r3, r0
 80083da:	b9ca      	cbnz	r2, 8008410 <__hi0bits+0x3c>
 80083dc:	0403      	lsls	r3, r0, #16
 80083de:	2010      	movs	r0, #16
 80083e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80083e4:	bf04      	itt	eq
 80083e6:	021b      	lsleq	r3, r3, #8
 80083e8:	3008      	addeq	r0, #8
 80083ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80083ee:	bf04      	itt	eq
 80083f0:	011b      	lsleq	r3, r3, #4
 80083f2:	3004      	addeq	r0, #4
 80083f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80083f8:	bf04      	itt	eq
 80083fa:	009b      	lsleq	r3, r3, #2
 80083fc:	3002      	addeq	r0, #2
 80083fe:	2b00      	cmp	r3, #0
 8008400:	db05      	blt.n	800840e <__hi0bits+0x3a>
 8008402:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008406:	f100 0001 	add.w	r0, r0, #1
 800840a:	bf08      	it	eq
 800840c:	2020      	moveq	r0, #32
 800840e:	4770      	bx	lr
 8008410:	2000      	movs	r0, #0
 8008412:	e7e5      	b.n	80083e0 <__hi0bits+0xc>

08008414 <__lo0bits>:
 8008414:	6803      	ldr	r3, [r0, #0]
 8008416:	4602      	mov	r2, r0
 8008418:	f013 0007 	ands.w	r0, r3, #7
 800841c:	d00b      	beq.n	8008436 <__lo0bits+0x22>
 800841e:	07d9      	lsls	r1, r3, #31
 8008420:	d421      	bmi.n	8008466 <__lo0bits+0x52>
 8008422:	0798      	lsls	r0, r3, #30
 8008424:	bf49      	itett	mi
 8008426:	085b      	lsrmi	r3, r3, #1
 8008428:	089b      	lsrpl	r3, r3, #2
 800842a:	2001      	movmi	r0, #1
 800842c:	6013      	strmi	r3, [r2, #0]
 800842e:	bf5c      	itt	pl
 8008430:	2002      	movpl	r0, #2
 8008432:	6013      	strpl	r3, [r2, #0]
 8008434:	4770      	bx	lr
 8008436:	b299      	uxth	r1, r3
 8008438:	b909      	cbnz	r1, 800843e <__lo0bits+0x2a>
 800843a:	2010      	movs	r0, #16
 800843c:	0c1b      	lsrs	r3, r3, #16
 800843e:	b2d9      	uxtb	r1, r3
 8008440:	b909      	cbnz	r1, 8008446 <__lo0bits+0x32>
 8008442:	3008      	adds	r0, #8
 8008444:	0a1b      	lsrs	r3, r3, #8
 8008446:	0719      	lsls	r1, r3, #28
 8008448:	bf04      	itt	eq
 800844a:	091b      	lsreq	r3, r3, #4
 800844c:	3004      	addeq	r0, #4
 800844e:	0799      	lsls	r1, r3, #30
 8008450:	bf04      	itt	eq
 8008452:	089b      	lsreq	r3, r3, #2
 8008454:	3002      	addeq	r0, #2
 8008456:	07d9      	lsls	r1, r3, #31
 8008458:	d403      	bmi.n	8008462 <__lo0bits+0x4e>
 800845a:	085b      	lsrs	r3, r3, #1
 800845c:	f100 0001 	add.w	r0, r0, #1
 8008460:	d003      	beq.n	800846a <__lo0bits+0x56>
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	4770      	bx	lr
 8008466:	2000      	movs	r0, #0
 8008468:	4770      	bx	lr
 800846a:	2020      	movs	r0, #32
 800846c:	4770      	bx	lr
	...

08008470 <__i2b>:
 8008470:	b510      	push	{r4, lr}
 8008472:	460c      	mov	r4, r1
 8008474:	2101      	movs	r1, #1
 8008476:	f7ff febb 	bl	80081f0 <_Balloc>
 800847a:	4602      	mov	r2, r0
 800847c:	b928      	cbnz	r0, 800848a <__i2b+0x1a>
 800847e:	f240 1145 	movw	r1, #325	; 0x145
 8008482:	4b04      	ldr	r3, [pc, #16]	; (8008494 <__i2b+0x24>)
 8008484:	4804      	ldr	r0, [pc, #16]	; (8008498 <__i2b+0x28>)
 8008486:	f001 fe09 	bl	800a09c <__assert_func>
 800848a:	2301      	movs	r3, #1
 800848c:	6144      	str	r4, [r0, #20]
 800848e:	6103      	str	r3, [r0, #16]
 8008490:	bd10      	pop	{r4, pc}
 8008492:	bf00      	nop
 8008494:	0800c6f5 	.word	0x0800c6f5
 8008498:	0800c706 	.word	0x0800c706

0800849c <__multiply>:
 800849c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a0:	4691      	mov	r9, r2
 80084a2:	690a      	ldr	r2, [r1, #16]
 80084a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084a8:	460c      	mov	r4, r1
 80084aa:	429a      	cmp	r2, r3
 80084ac:	bfbe      	ittt	lt
 80084ae:	460b      	movlt	r3, r1
 80084b0:	464c      	movlt	r4, r9
 80084b2:	4699      	movlt	r9, r3
 80084b4:	6927      	ldr	r7, [r4, #16]
 80084b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084ba:	68a3      	ldr	r3, [r4, #8]
 80084bc:	6861      	ldr	r1, [r4, #4]
 80084be:	eb07 060a 	add.w	r6, r7, sl
 80084c2:	42b3      	cmp	r3, r6
 80084c4:	b085      	sub	sp, #20
 80084c6:	bfb8      	it	lt
 80084c8:	3101      	addlt	r1, #1
 80084ca:	f7ff fe91 	bl	80081f0 <_Balloc>
 80084ce:	b930      	cbnz	r0, 80084de <__multiply+0x42>
 80084d0:	4602      	mov	r2, r0
 80084d2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80084d6:	4b43      	ldr	r3, [pc, #268]	; (80085e4 <__multiply+0x148>)
 80084d8:	4843      	ldr	r0, [pc, #268]	; (80085e8 <__multiply+0x14c>)
 80084da:	f001 fddf 	bl	800a09c <__assert_func>
 80084de:	f100 0514 	add.w	r5, r0, #20
 80084e2:	462b      	mov	r3, r5
 80084e4:	2200      	movs	r2, #0
 80084e6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80084ea:	4543      	cmp	r3, r8
 80084ec:	d321      	bcc.n	8008532 <__multiply+0x96>
 80084ee:	f104 0314 	add.w	r3, r4, #20
 80084f2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80084f6:	f109 0314 	add.w	r3, r9, #20
 80084fa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80084fe:	9202      	str	r2, [sp, #8]
 8008500:	1b3a      	subs	r2, r7, r4
 8008502:	3a15      	subs	r2, #21
 8008504:	f022 0203 	bic.w	r2, r2, #3
 8008508:	3204      	adds	r2, #4
 800850a:	f104 0115 	add.w	r1, r4, #21
 800850e:	428f      	cmp	r7, r1
 8008510:	bf38      	it	cc
 8008512:	2204      	movcc	r2, #4
 8008514:	9201      	str	r2, [sp, #4]
 8008516:	9a02      	ldr	r2, [sp, #8]
 8008518:	9303      	str	r3, [sp, #12]
 800851a:	429a      	cmp	r2, r3
 800851c:	d80c      	bhi.n	8008538 <__multiply+0x9c>
 800851e:	2e00      	cmp	r6, #0
 8008520:	dd03      	ble.n	800852a <__multiply+0x8e>
 8008522:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008526:	2b00      	cmp	r3, #0
 8008528:	d05a      	beq.n	80085e0 <__multiply+0x144>
 800852a:	6106      	str	r6, [r0, #16]
 800852c:	b005      	add	sp, #20
 800852e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008532:	f843 2b04 	str.w	r2, [r3], #4
 8008536:	e7d8      	b.n	80084ea <__multiply+0x4e>
 8008538:	f8b3 a000 	ldrh.w	sl, [r3]
 800853c:	f1ba 0f00 	cmp.w	sl, #0
 8008540:	d023      	beq.n	800858a <__multiply+0xee>
 8008542:	46a9      	mov	r9, r5
 8008544:	f04f 0c00 	mov.w	ip, #0
 8008548:	f104 0e14 	add.w	lr, r4, #20
 800854c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008550:	f8d9 1000 	ldr.w	r1, [r9]
 8008554:	fa1f fb82 	uxth.w	fp, r2
 8008558:	b289      	uxth	r1, r1
 800855a:	fb0a 110b 	mla	r1, sl, fp, r1
 800855e:	4461      	add	r1, ip
 8008560:	f8d9 c000 	ldr.w	ip, [r9]
 8008564:	0c12      	lsrs	r2, r2, #16
 8008566:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800856a:	fb0a c202 	mla	r2, sl, r2, ip
 800856e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008572:	b289      	uxth	r1, r1
 8008574:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008578:	4577      	cmp	r7, lr
 800857a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800857e:	f849 1b04 	str.w	r1, [r9], #4
 8008582:	d8e3      	bhi.n	800854c <__multiply+0xb0>
 8008584:	9a01      	ldr	r2, [sp, #4]
 8008586:	f845 c002 	str.w	ip, [r5, r2]
 800858a:	9a03      	ldr	r2, [sp, #12]
 800858c:	3304      	adds	r3, #4
 800858e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008592:	f1b9 0f00 	cmp.w	r9, #0
 8008596:	d021      	beq.n	80085dc <__multiply+0x140>
 8008598:	46ae      	mov	lr, r5
 800859a:	f04f 0a00 	mov.w	sl, #0
 800859e:	6829      	ldr	r1, [r5, #0]
 80085a0:	f104 0c14 	add.w	ip, r4, #20
 80085a4:	f8bc b000 	ldrh.w	fp, [ip]
 80085a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80085ac:	b289      	uxth	r1, r1
 80085ae:	fb09 220b 	mla	r2, r9, fp, r2
 80085b2:	4452      	add	r2, sl
 80085b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085b8:	f84e 1b04 	str.w	r1, [lr], #4
 80085bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80085c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80085c4:	f8be 1000 	ldrh.w	r1, [lr]
 80085c8:	4567      	cmp	r7, ip
 80085ca:	fb09 110a 	mla	r1, r9, sl, r1
 80085ce:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80085d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80085d6:	d8e5      	bhi.n	80085a4 <__multiply+0x108>
 80085d8:	9a01      	ldr	r2, [sp, #4]
 80085da:	50a9      	str	r1, [r5, r2]
 80085dc:	3504      	adds	r5, #4
 80085de:	e79a      	b.n	8008516 <__multiply+0x7a>
 80085e0:	3e01      	subs	r6, #1
 80085e2:	e79c      	b.n	800851e <__multiply+0x82>
 80085e4:	0800c6f5 	.word	0x0800c6f5
 80085e8:	0800c706 	.word	0x0800c706

080085ec <__pow5mult>:
 80085ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f0:	4615      	mov	r5, r2
 80085f2:	f012 0203 	ands.w	r2, r2, #3
 80085f6:	4606      	mov	r6, r0
 80085f8:	460f      	mov	r7, r1
 80085fa:	d007      	beq.n	800860c <__pow5mult+0x20>
 80085fc:	4c25      	ldr	r4, [pc, #148]	; (8008694 <__pow5mult+0xa8>)
 80085fe:	3a01      	subs	r2, #1
 8008600:	2300      	movs	r3, #0
 8008602:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008606:	f7ff fe55 	bl	80082b4 <__multadd>
 800860a:	4607      	mov	r7, r0
 800860c:	10ad      	asrs	r5, r5, #2
 800860e:	d03d      	beq.n	800868c <__pow5mult+0xa0>
 8008610:	69f4      	ldr	r4, [r6, #28]
 8008612:	b97c      	cbnz	r4, 8008634 <__pow5mult+0x48>
 8008614:	2010      	movs	r0, #16
 8008616:	f7ff fd37 	bl	8008088 <malloc>
 800861a:	4602      	mov	r2, r0
 800861c:	61f0      	str	r0, [r6, #28]
 800861e:	b928      	cbnz	r0, 800862c <__pow5mult+0x40>
 8008620:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008624:	4b1c      	ldr	r3, [pc, #112]	; (8008698 <__pow5mult+0xac>)
 8008626:	481d      	ldr	r0, [pc, #116]	; (800869c <__pow5mult+0xb0>)
 8008628:	f001 fd38 	bl	800a09c <__assert_func>
 800862c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008630:	6004      	str	r4, [r0, #0]
 8008632:	60c4      	str	r4, [r0, #12]
 8008634:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800863c:	b94c      	cbnz	r4, 8008652 <__pow5mult+0x66>
 800863e:	f240 2171 	movw	r1, #625	; 0x271
 8008642:	4630      	mov	r0, r6
 8008644:	f7ff ff14 	bl	8008470 <__i2b>
 8008648:	2300      	movs	r3, #0
 800864a:	4604      	mov	r4, r0
 800864c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008650:	6003      	str	r3, [r0, #0]
 8008652:	f04f 0900 	mov.w	r9, #0
 8008656:	07eb      	lsls	r3, r5, #31
 8008658:	d50a      	bpl.n	8008670 <__pow5mult+0x84>
 800865a:	4639      	mov	r1, r7
 800865c:	4622      	mov	r2, r4
 800865e:	4630      	mov	r0, r6
 8008660:	f7ff ff1c 	bl	800849c <__multiply>
 8008664:	4680      	mov	r8, r0
 8008666:	4639      	mov	r1, r7
 8008668:	4630      	mov	r0, r6
 800866a:	f7ff fe01 	bl	8008270 <_Bfree>
 800866e:	4647      	mov	r7, r8
 8008670:	106d      	asrs	r5, r5, #1
 8008672:	d00b      	beq.n	800868c <__pow5mult+0xa0>
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	b938      	cbnz	r0, 8008688 <__pow5mult+0x9c>
 8008678:	4622      	mov	r2, r4
 800867a:	4621      	mov	r1, r4
 800867c:	4630      	mov	r0, r6
 800867e:	f7ff ff0d 	bl	800849c <__multiply>
 8008682:	6020      	str	r0, [r4, #0]
 8008684:	f8c0 9000 	str.w	r9, [r0]
 8008688:	4604      	mov	r4, r0
 800868a:	e7e4      	b.n	8008656 <__pow5mult+0x6a>
 800868c:	4638      	mov	r0, r7
 800868e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008692:	bf00      	nop
 8008694:	0800c850 	.word	0x0800c850
 8008698:	0800c686 	.word	0x0800c686
 800869c:	0800c706 	.word	0x0800c706

080086a0 <__lshift>:
 80086a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a4:	460c      	mov	r4, r1
 80086a6:	4607      	mov	r7, r0
 80086a8:	4691      	mov	r9, r2
 80086aa:	6923      	ldr	r3, [r4, #16]
 80086ac:	6849      	ldr	r1, [r1, #4]
 80086ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086b2:	68a3      	ldr	r3, [r4, #8]
 80086b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086b8:	f108 0601 	add.w	r6, r8, #1
 80086bc:	42b3      	cmp	r3, r6
 80086be:	db0b      	blt.n	80086d8 <__lshift+0x38>
 80086c0:	4638      	mov	r0, r7
 80086c2:	f7ff fd95 	bl	80081f0 <_Balloc>
 80086c6:	4605      	mov	r5, r0
 80086c8:	b948      	cbnz	r0, 80086de <__lshift+0x3e>
 80086ca:	4602      	mov	r2, r0
 80086cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80086d0:	4b27      	ldr	r3, [pc, #156]	; (8008770 <__lshift+0xd0>)
 80086d2:	4828      	ldr	r0, [pc, #160]	; (8008774 <__lshift+0xd4>)
 80086d4:	f001 fce2 	bl	800a09c <__assert_func>
 80086d8:	3101      	adds	r1, #1
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	e7ee      	b.n	80086bc <__lshift+0x1c>
 80086de:	2300      	movs	r3, #0
 80086e0:	f100 0114 	add.w	r1, r0, #20
 80086e4:	f100 0210 	add.w	r2, r0, #16
 80086e8:	4618      	mov	r0, r3
 80086ea:	4553      	cmp	r3, sl
 80086ec:	db33      	blt.n	8008756 <__lshift+0xb6>
 80086ee:	6920      	ldr	r0, [r4, #16]
 80086f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086f4:	f104 0314 	add.w	r3, r4, #20
 80086f8:	f019 091f 	ands.w	r9, r9, #31
 80086fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008700:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008704:	d02b      	beq.n	800875e <__lshift+0xbe>
 8008706:	468a      	mov	sl, r1
 8008708:	2200      	movs	r2, #0
 800870a:	f1c9 0e20 	rsb	lr, r9, #32
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	fa00 f009 	lsl.w	r0, r0, r9
 8008714:	4310      	orrs	r0, r2
 8008716:	f84a 0b04 	str.w	r0, [sl], #4
 800871a:	f853 2b04 	ldr.w	r2, [r3], #4
 800871e:	459c      	cmp	ip, r3
 8008720:	fa22 f20e 	lsr.w	r2, r2, lr
 8008724:	d8f3      	bhi.n	800870e <__lshift+0x6e>
 8008726:	ebac 0304 	sub.w	r3, ip, r4
 800872a:	3b15      	subs	r3, #21
 800872c:	f023 0303 	bic.w	r3, r3, #3
 8008730:	3304      	adds	r3, #4
 8008732:	f104 0015 	add.w	r0, r4, #21
 8008736:	4584      	cmp	ip, r0
 8008738:	bf38      	it	cc
 800873a:	2304      	movcc	r3, #4
 800873c:	50ca      	str	r2, [r1, r3]
 800873e:	b10a      	cbz	r2, 8008744 <__lshift+0xa4>
 8008740:	f108 0602 	add.w	r6, r8, #2
 8008744:	3e01      	subs	r6, #1
 8008746:	4638      	mov	r0, r7
 8008748:	4621      	mov	r1, r4
 800874a:	612e      	str	r6, [r5, #16]
 800874c:	f7ff fd90 	bl	8008270 <_Bfree>
 8008750:	4628      	mov	r0, r5
 8008752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008756:	f842 0f04 	str.w	r0, [r2, #4]!
 800875a:	3301      	adds	r3, #1
 800875c:	e7c5      	b.n	80086ea <__lshift+0x4a>
 800875e:	3904      	subs	r1, #4
 8008760:	f853 2b04 	ldr.w	r2, [r3], #4
 8008764:	459c      	cmp	ip, r3
 8008766:	f841 2f04 	str.w	r2, [r1, #4]!
 800876a:	d8f9      	bhi.n	8008760 <__lshift+0xc0>
 800876c:	e7ea      	b.n	8008744 <__lshift+0xa4>
 800876e:	bf00      	nop
 8008770:	0800c6f5 	.word	0x0800c6f5
 8008774:	0800c706 	.word	0x0800c706

08008778 <__mcmp>:
 8008778:	4603      	mov	r3, r0
 800877a:	690a      	ldr	r2, [r1, #16]
 800877c:	6900      	ldr	r0, [r0, #16]
 800877e:	b530      	push	{r4, r5, lr}
 8008780:	1a80      	subs	r0, r0, r2
 8008782:	d10d      	bne.n	80087a0 <__mcmp+0x28>
 8008784:	3314      	adds	r3, #20
 8008786:	3114      	adds	r1, #20
 8008788:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800878c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008790:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008794:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008798:	4295      	cmp	r5, r2
 800879a:	d002      	beq.n	80087a2 <__mcmp+0x2a>
 800879c:	d304      	bcc.n	80087a8 <__mcmp+0x30>
 800879e:	2001      	movs	r0, #1
 80087a0:	bd30      	pop	{r4, r5, pc}
 80087a2:	42a3      	cmp	r3, r4
 80087a4:	d3f4      	bcc.n	8008790 <__mcmp+0x18>
 80087a6:	e7fb      	b.n	80087a0 <__mcmp+0x28>
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ac:	e7f8      	b.n	80087a0 <__mcmp+0x28>
	...

080087b0 <__mdiff>:
 80087b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	460d      	mov	r5, r1
 80087b6:	4607      	mov	r7, r0
 80087b8:	4611      	mov	r1, r2
 80087ba:	4628      	mov	r0, r5
 80087bc:	4614      	mov	r4, r2
 80087be:	f7ff ffdb 	bl	8008778 <__mcmp>
 80087c2:	1e06      	subs	r6, r0, #0
 80087c4:	d111      	bne.n	80087ea <__mdiff+0x3a>
 80087c6:	4631      	mov	r1, r6
 80087c8:	4638      	mov	r0, r7
 80087ca:	f7ff fd11 	bl	80081f0 <_Balloc>
 80087ce:	4602      	mov	r2, r0
 80087d0:	b928      	cbnz	r0, 80087de <__mdiff+0x2e>
 80087d2:	f240 2137 	movw	r1, #567	; 0x237
 80087d6:	4b3a      	ldr	r3, [pc, #232]	; (80088c0 <__mdiff+0x110>)
 80087d8:	483a      	ldr	r0, [pc, #232]	; (80088c4 <__mdiff+0x114>)
 80087da:	f001 fc5f 	bl	800a09c <__assert_func>
 80087de:	2301      	movs	r3, #1
 80087e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80087e4:	4610      	mov	r0, r2
 80087e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ea:	bfa4      	itt	ge
 80087ec:	4623      	movge	r3, r4
 80087ee:	462c      	movge	r4, r5
 80087f0:	4638      	mov	r0, r7
 80087f2:	6861      	ldr	r1, [r4, #4]
 80087f4:	bfa6      	itte	ge
 80087f6:	461d      	movge	r5, r3
 80087f8:	2600      	movge	r6, #0
 80087fa:	2601      	movlt	r6, #1
 80087fc:	f7ff fcf8 	bl	80081f0 <_Balloc>
 8008800:	4602      	mov	r2, r0
 8008802:	b918      	cbnz	r0, 800880c <__mdiff+0x5c>
 8008804:	f240 2145 	movw	r1, #581	; 0x245
 8008808:	4b2d      	ldr	r3, [pc, #180]	; (80088c0 <__mdiff+0x110>)
 800880a:	e7e5      	b.n	80087d8 <__mdiff+0x28>
 800880c:	f102 0814 	add.w	r8, r2, #20
 8008810:	46c2      	mov	sl, r8
 8008812:	f04f 0c00 	mov.w	ip, #0
 8008816:	6927      	ldr	r7, [r4, #16]
 8008818:	60c6      	str	r6, [r0, #12]
 800881a:	692e      	ldr	r6, [r5, #16]
 800881c:	f104 0014 	add.w	r0, r4, #20
 8008820:	f105 0914 	add.w	r9, r5, #20
 8008824:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008828:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800882c:	3410      	adds	r4, #16
 800882e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008832:	f859 3b04 	ldr.w	r3, [r9], #4
 8008836:	fa1f f18b 	uxth.w	r1, fp
 800883a:	4461      	add	r1, ip
 800883c:	fa1f fc83 	uxth.w	ip, r3
 8008840:	0c1b      	lsrs	r3, r3, #16
 8008842:	eba1 010c 	sub.w	r1, r1, ip
 8008846:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800884a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800884e:	b289      	uxth	r1, r1
 8008850:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008854:	454e      	cmp	r6, r9
 8008856:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800885a:	f84a 1b04 	str.w	r1, [sl], #4
 800885e:	d8e6      	bhi.n	800882e <__mdiff+0x7e>
 8008860:	1b73      	subs	r3, r6, r5
 8008862:	3b15      	subs	r3, #21
 8008864:	f023 0303 	bic.w	r3, r3, #3
 8008868:	3515      	adds	r5, #21
 800886a:	3304      	adds	r3, #4
 800886c:	42ae      	cmp	r6, r5
 800886e:	bf38      	it	cc
 8008870:	2304      	movcc	r3, #4
 8008872:	4418      	add	r0, r3
 8008874:	4443      	add	r3, r8
 8008876:	461e      	mov	r6, r3
 8008878:	4605      	mov	r5, r0
 800887a:	4575      	cmp	r5, lr
 800887c:	d30e      	bcc.n	800889c <__mdiff+0xec>
 800887e:	f10e 0103 	add.w	r1, lr, #3
 8008882:	1a09      	subs	r1, r1, r0
 8008884:	f021 0103 	bic.w	r1, r1, #3
 8008888:	3803      	subs	r0, #3
 800888a:	4586      	cmp	lr, r0
 800888c:	bf38      	it	cc
 800888e:	2100      	movcc	r1, #0
 8008890:	440b      	add	r3, r1
 8008892:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008896:	b189      	cbz	r1, 80088bc <__mdiff+0x10c>
 8008898:	6117      	str	r7, [r2, #16]
 800889a:	e7a3      	b.n	80087e4 <__mdiff+0x34>
 800889c:	f855 8b04 	ldr.w	r8, [r5], #4
 80088a0:	fa1f f188 	uxth.w	r1, r8
 80088a4:	4461      	add	r1, ip
 80088a6:	140c      	asrs	r4, r1, #16
 80088a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80088ac:	b289      	uxth	r1, r1
 80088ae:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80088b2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80088b6:	f846 1b04 	str.w	r1, [r6], #4
 80088ba:	e7de      	b.n	800887a <__mdiff+0xca>
 80088bc:	3f01      	subs	r7, #1
 80088be:	e7e8      	b.n	8008892 <__mdiff+0xe2>
 80088c0:	0800c6f5 	.word	0x0800c6f5
 80088c4:	0800c706 	.word	0x0800c706

080088c8 <__ulp>:
 80088c8:	4b0e      	ldr	r3, [pc, #56]	; (8008904 <__ulp+0x3c>)
 80088ca:	400b      	ands	r3, r1
 80088cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	dc08      	bgt.n	80088e6 <__ulp+0x1e>
 80088d4:	425b      	negs	r3, r3
 80088d6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80088da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80088de:	da04      	bge.n	80088ea <__ulp+0x22>
 80088e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80088e4:	4113      	asrs	r3, r2
 80088e6:	2200      	movs	r2, #0
 80088e8:	e008      	b.n	80088fc <__ulp+0x34>
 80088ea:	f1a2 0314 	sub.w	r3, r2, #20
 80088ee:	2b1e      	cmp	r3, #30
 80088f0:	bfd6      	itet	le
 80088f2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80088f6:	2201      	movgt	r2, #1
 80088f8:	40da      	lsrle	r2, r3
 80088fa:	2300      	movs	r3, #0
 80088fc:	4619      	mov	r1, r3
 80088fe:	4610      	mov	r0, r2
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	7ff00000 	.word	0x7ff00000

08008908 <__b2d>:
 8008908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890a:	6905      	ldr	r5, [r0, #16]
 800890c:	f100 0714 	add.w	r7, r0, #20
 8008910:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008914:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008918:	1f2e      	subs	r6, r5, #4
 800891a:	4620      	mov	r0, r4
 800891c:	f7ff fd5a 	bl	80083d4 <__hi0bits>
 8008920:	f1c0 0220 	rsb	r2, r0, #32
 8008924:	280a      	cmp	r0, #10
 8008926:	4603      	mov	r3, r0
 8008928:	f8df c068 	ldr.w	ip, [pc, #104]	; 8008994 <__b2d+0x8c>
 800892c:	600a      	str	r2, [r1, #0]
 800892e:	dc12      	bgt.n	8008956 <__b2d+0x4e>
 8008930:	f1c0 0e0b 	rsb	lr, r0, #11
 8008934:	fa24 f20e 	lsr.w	r2, r4, lr
 8008938:	42b7      	cmp	r7, r6
 800893a:	ea42 010c 	orr.w	r1, r2, ip
 800893e:	bf2c      	ite	cs
 8008940:	2200      	movcs	r2, #0
 8008942:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008946:	3315      	adds	r3, #21
 8008948:	fa04 f303 	lsl.w	r3, r4, r3
 800894c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008950:	431a      	orrs	r2, r3
 8008952:	4610      	mov	r0, r2
 8008954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008956:	42b7      	cmp	r7, r6
 8008958:	bf2e      	itee	cs
 800895a:	2200      	movcs	r2, #0
 800895c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008960:	f1a5 0608 	subcc.w	r6, r5, #8
 8008964:	3b0b      	subs	r3, #11
 8008966:	d012      	beq.n	800898e <__b2d+0x86>
 8008968:	f1c3 0520 	rsb	r5, r3, #32
 800896c:	fa22 f105 	lsr.w	r1, r2, r5
 8008970:	409c      	lsls	r4, r3
 8008972:	430c      	orrs	r4, r1
 8008974:	42be      	cmp	r6, r7
 8008976:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800897a:	bf94      	ite	ls
 800897c:	2400      	movls	r4, #0
 800897e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008982:	409a      	lsls	r2, r3
 8008984:	40ec      	lsrs	r4, r5
 8008986:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800898a:	4322      	orrs	r2, r4
 800898c:	e7e1      	b.n	8008952 <__b2d+0x4a>
 800898e:	ea44 010c 	orr.w	r1, r4, ip
 8008992:	e7de      	b.n	8008952 <__b2d+0x4a>
 8008994:	3ff00000 	.word	0x3ff00000

08008998 <__d2b>:
 8008998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800899a:	2101      	movs	r1, #1
 800899c:	4617      	mov	r7, r2
 800899e:	461c      	mov	r4, r3
 80089a0:	9e08      	ldr	r6, [sp, #32]
 80089a2:	f7ff fc25 	bl	80081f0 <_Balloc>
 80089a6:	4605      	mov	r5, r0
 80089a8:	b930      	cbnz	r0, 80089b8 <__d2b+0x20>
 80089aa:	4602      	mov	r2, r0
 80089ac:	f240 310f 	movw	r1, #783	; 0x30f
 80089b0:	4b22      	ldr	r3, [pc, #136]	; (8008a3c <__d2b+0xa4>)
 80089b2:	4823      	ldr	r0, [pc, #140]	; (8008a40 <__d2b+0xa8>)
 80089b4:	f001 fb72 	bl	800a09c <__assert_func>
 80089b8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80089bc:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80089c0:	bb24      	cbnz	r4, 8008a0c <__d2b+0x74>
 80089c2:	2f00      	cmp	r7, #0
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	d026      	beq.n	8008a16 <__d2b+0x7e>
 80089c8:	4668      	mov	r0, sp
 80089ca:	9700      	str	r7, [sp, #0]
 80089cc:	f7ff fd22 	bl	8008414 <__lo0bits>
 80089d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80089d4:	b1e8      	cbz	r0, 8008a12 <__d2b+0x7a>
 80089d6:	f1c0 0320 	rsb	r3, r0, #32
 80089da:	fa02 f303 	lsl.w	r3, r2, r3
 80089de:	430b      	orrs	r3, r1
 80089e0:	40c2      	lsrs	r2, r0
 80089e2:	616b      	str	r3, [r5, #20]
 80089e4:	9201      	str	r2, [sp, #4]
 80089e6:	9b01      	ldr	r3, [sp, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	bf14      	ite	ne
 80089ec:	2102      	movne	r1, #2
 80089ee:	2101      	moveq	r1, #1
 80089f0:	61ab      	str	r3, [r5, #24]
 80089f2:	6129      	str	r1, [r5, #16]
 80089f4:	b1bc      	cbz	r4, 8008a26 <__d2b+0x8e>
 80089f6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80089fa:	4404      	add	r4, r0
 80089fc:	6034      	str	r4, [r6, #0]
 80089fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a04:	6018      	str	r0, [r3, #0]
 8008a06:	4628      	mov	r0, r5
 8008a08:	b003      	add	sp, #12
 8008a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a10:	e7d7      	b.n	80089c2 <__d2b+0x2a>
 8008a12:	6169      	str	r1, [r5, #20]
 8008a14:	e7e7      	b.n	80089e6 <__d2b+0x4e>
 8008a16:	a801      	add	r0, sp, #4
 8008a18:	f7ff fcfc 	bl	8008414 <__lo0bits>
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	2101      	movs	r1, #1
 8008a20:	616b      	str	r3, [r5, #20]
 8008a22:	3020      	adds	r0, #32
 8008a24:	e7e5      	b.n	80089f2 <__d2b+0x5a>
 8008a26:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a2a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008a2e:	6030      	str	r0, [r6, #0]
 8008a30:	6918      	ldr	r0, [r3, #16]
 8008a32:	f7ff fccf 	bl	80083d4 <__hi0bits>
 8008a36:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008a3a:	e7e2      	b.n	8008a02 <__d2b+0x6a>
 8008a3c:	0800c6f5 	.word	0x0800c6f5
 8008a40:	0800c706 	.word	0x0800c706

08008a44 <__ratio>:
 8008a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	4688      	mov	r8, r1
 8008a4a:	4669      	mov	r1, sp
 8008a4c:	4681      	mov	r9, r0
 8008a4e:	f7ff ff5b 	bl	8008908 <__b2d>
 8008a52:	460f      	mov	r7, r1
 8008a54:	4604      	mov	r4, r0
 8008a56:	460d      	mov	r5, r1
 8008a58:	4640      	mov	r0, r8
 8008a5a:	a901      	add	r1, sp, #4
 8008a5c:	f7ff ff54 	bl	8008908 <__b2d>
 8008a60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a64:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008a68:	468b      	mov	fp, r1
 8008a6a:	eba3 0c02 	sub.w	ip, r3, r2
 8008a6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	bfd5      	itete	le
 8008a7c:	460a      	movle	r2, r1
 8008a7e:	462a      	movgt	r2, r5
 8008a80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008a84:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008a88:	bfd8      	it	le
 8008a8a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008a8e:	465b      	mov	r3, fp
 8008a90:	4602      	mov	r2, r0
 8008a92:	4639      	mov	r1, r7
 8008a94:	4620      	mov	r0, r4
 8008a96:	f7f7 fe49 	bl	800072c <__aeabi_ddiv>
 8008a9a:	b003      	add	sp, #12
 8008a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008aa0 <__copybits>:
 8008aa0:	3901      	subs	r1, #1
 8008aa2:	b570      	push	{r4, r5, r6, lr}
 8008aa4:	1149      	asrs	r1, r1, #5
 8008aa6:	6914      	ldr	r4, [r2, #16]
 8008aa8:	3101      	adds	r1, #1
 8008aaa:	f102 0314 	add.w	r3, r2, #20
 8008aae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ab2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ab6:	1f05      	subs	r5, r0, #4
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	d30c      	bcc.n	8008ad6 <__copybits+0x36>
 8008abc:	1aa3      	subs	r3, r4, r2
 8008abe:	3b11      	subs	r3, #17
 8008ac0:	f023 0303 	bic.w	r3, r3, #3
 8008ac4:	3211      	adds	r2, #17
 8008ac6:	42a2      	cmp	r2, r4
 8008ac8:	bf88      	it	hi
 8008aca:	2300      	movhi	r3, #0
 8008acc:	4418      	add	r0, r3
 8008ace:	2300      	movs	r3, #0
 8008ad0:	4288      	cmp	r0, r1
 8008ad2:	d305      	bcc.n	8008ae0 <__copybits+0x40>
 8008ad4:	bd70      	pop	{r4, r5, r6, pc}
 8008ad6:	f853 6b04 	ldr.w	r6, [r3], #4
 8008ada:	f845 6f04 	str.w	r6, [r5, #4]!
 8008ade:	e7eb      	b.n	8008ab8 <__copybits+0x18>
 8008ae0:	f840 3b04 	str.w	r3, [r0], #4
 8008ae4:	e7f4      	b.n	8008ad0 <__copybits+0x30>

08008ae6 <__any_on>:
 8008ae6:	f100 0214 	add.w	r2, r0, #20
 8008aea:	6900      	ldr	r0, [r0, #16]
 8008aec:	114b      	asrs	r3, r1, #5
 8008aee:	4298      	cmp	r0, r3
 8008af0:	b510      	push	{r4, lr}
 8008af2:	db11      	blt.n	8008b18 <__any_on+0x32>
 8008af4:	dd0a      	ble.n	8008b0c <__any_on+0x26>
 8008af6:	f011 011f 	ands.w	r1, r1, #31
 8008afa:	d007      	beq.n	8008b0c <__any_on+0x26>
 8008afc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008b00:	fa24 f001 	lsr.w	r0, r4, r1
 8008b04:	fa00 f101 	lsl.w	r1, r0, r1
 8008b08:	428c      	cmp	r4, r1
 8008b0a:	d10b      	bne.n	8008b24 <__any_on+0x3e>
 8008b0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d803      	bhi.n	8008b1c <__any_on+0x36>
 8008b14:	2000      	movs	r0, #0
 8008b16:	bd10      	pop	{r4, pc}
 8008b18:	4603      	mov	r3, r0
 8008b1a:	e7f7      	b.n	8008b0c <__any_on+0x26>
 8008b1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b20:	2900      	cmp	r1, #0
 8008b22:	d0f5      	beq.n	8008b10 <__any_on+0x2a>
 8008b24:	2001      	movs	r0, #1
 8008b26:	e7f6      	b.n	8008b16 <__any_on+0x30>

08008b28 <sulp>:
 8008b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	4690      	mov	r8, r2
 8008b30:	f7ff feca 	bl	80088c8 <__ulp>
 8008b34:	4604      	mov	r4, r0
 8008b36:	460d      	mov	r5, r1
 8008b38:	f1b8 0f00 	cmp.w	r8, #0
 8008b3c:	d011      	beq.n	8008b62 <sulp+0x3a>
 8008b3e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008b42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	dd0b      	ble.n	8008b62 <sulp+0x3a>
 8008b4a:	2400      	movs	r4, #0
 8008b4c:	051b      	lsls	r3, r3, #20
 8008b4e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008b52:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008b56:	4622      	mov	r2, r4
 8008b58:	462b      	mov	r3, r5
 8008b5a:	f7f7 fcbd 	bl	80004d8 <__aeabi_dmul>
 8008b5e:	4604      	mov	r4, r0
 8008b60:	460d      	mov	r5, r1
 8008b62:	4620      	mov	r0, r4
 8008b64:	4629      	mov	r1, r5
 8008b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b6a:	0000      	movs	r0, r0
 8008b6c:	0000      	movs	r0, r0
	...

08008b70 <_strtod_l>:
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	b09f      	sub	sp, #124	; 0x7c
 8008b76:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	921a      	str	r2, [sp, #104]	; 0x68
 8008b7e:	460d      	mov	r5, r1
 8008b80:	f04f 0800 	mov.w	r8, #0
 8008b84:	f04f 0900 	mov.w	r9, #0
 8008b88:	460a      	mov	r2, r1
 8008b8a:	9219      	str	r2, [sp, #100]	; 0x64
 8008b8c:	7811      	ldrb	r1, [r2, #0]
 8008b8e:	292b      	cmp	r1, #43	; 0x2b
 8008b90:	d04a      	beq.n	8008c28 <_strtod_l+0xb8>
 8008b92:	d838      	bhi.n	8008c06 <_strtod_l+0x96>
 8008b94:	290d      	cmp	r1, #13
 8008b96:	d832      	bhi.n	8008bfe <_strtod_l+0x8e>
 8008b98:	2908      	cmp	r1, #8
 8008b9a:	d832      	bhi.n	8008c02 <_strtod_l+0x92>
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	d03b      	beq.n	8008c18 <_strtod_l+0xa8>
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	920e      	str	r2, [sp, #56]	; 0x38
 8008ba4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008ba6:	7832      	ldrb	r2, [r6, #0]
 8008ba8:	2a30      	cmp	r2, #48	; 0x30
 8008baa:	f040 80b2 	bne.w	8008d12 <_strtod_l+0x1a2>
 8008bae:	7872      	ldrb	r2, [r6, #1]
 8008bb0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008bb4:	2a58      	cmp	r2, #88	; 0x58
 8008bb6:	d16e      	bne.n	8008c96 <_strtod_l+0x126>
 8008bb8:	9302      	str	r3, [sp, #8]
 8008bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	9301      	str	r3, [sp, #4]
 8008bc0:	ab1a      	add	r3, sp, #104	; 0x68
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	4a8c      	ldr	r2, [pc, #560]	; (8008df8 <_strtod_l+0x288>)
 8008bc6:	ab1b      	add	r3, sp, #108	; 0x6c
 8008bc8:	a919      	add	r1, sp, #100	; 0x64
 8008bca:	f001 fb01 	bl	800a1d0 <__gethex>
 8008bce:	f010 070f 	ands.w	r7, r0, #15
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	d005      	beq.n	8008be2 <_strtod_l+0x72>
 8008bd6:	2f06      	cmp	r7, #6
 8008bd8:	d128      	bne.n	8008c2c <_strtod_l+0xbc>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	3601      	adds	r6, #1
 8008bde:	9619      	str	r6, [sp, #100]	; 0x64
 8008be0:	930e      	str	r3, [sp, #56]	; 0x38
 8008be2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f040 85a0 	bne.w	800972a <_strtod_l+0xbba>
 8008bea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bec:	b1cb      	cbz	r3, 8008c22 <_strtod_l+0xb2>
 8008bee:	4642      	mov	r2, r8
 8008bf0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	b01f      	add	sp, #124	; 0x7c
 8008bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfe:	2920      	cmp	r1, #32
 8008c00:	d1ce      	bne.n	8008ba0 <_strtod_l+0x30>
 8008c02:	3201      	adds	r2, #1
 8008c04:	e7c1      	b.n	8008b8a <_strtod_l+0x1a>
 8008c06:	292d      	cmp	r1, #45	; 0x2d
 8008c08:	d1ca      	bne.n	8008ba0 <_strtod_l+0x30>
 8008c0a:	2101      	movs	r1, #1
 8008c0c:	910e      	str	r1, [sp, #56]	; 0x38
 8008c0e:	1c51      	adds	r1, r2, #1
 8008c10:	9119      	str	r1, [sp, #100]	; 0x64
 8008c12:	7852      	ldrb	r2, [r2, #1]
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	d1c5      	bne.n	8008ba4 <_strtod_l+0x34>
 8008c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c1a:	9519      	str	r5, [sp, #100]	; 0x64
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f040 8582 	bne.w	8009726 <_strtod_l+0xbb6>
 8008c22:	4642      	mov	r2, r8
 8008c24:	464b      	mov	r3, r9
 8008c26:	e7e5      	b.n	8008bf4 <_strtod_l+0x84>
 8008c28:	2100      	movs	r1, #0
 8008c2a:	e7ef      	b.n	8008c0c <_strtod_l+0x9c>
 8008c2c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008c2e:	b13a      	cbz	r2, 8008c40 <_strtod_l+0xd0>
 8008c30:	2135      	movs	r1, #53	; 0x35
 8008c32:	a81c      	add	r0, sp, #112	; 0x70
 8008c34:	f7ff ff34 	bl	8008aa0 <__copybits>
 8008c38:	4620      	mov	r0, r4
 8008c3a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008c3c:	f7ff fb18 	bl	8008270 <_Bfree>
 8008c40:	3f01      	subs	r7, #1
 8008c42:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008c44:	2f04      	cmp	r7, #4
 8008c46:	d806      	bhi.n	8008c56 <_strtod_l+0xe6>
 8008c48:	e8df f007 	tbb	[pc, r7]
 8008c4c:	201d0314 	.word	0x201d0314
 8008c50:	14          	.byte	0x14
 8008c51:	00          	.byte	0x00
 8008c52:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008c56:	05e9      	lsls	r1, r5, #23
 8008c58:	bf48      	it	mi
 8008c5a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008c5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c62:	0d1b      	lsrs	r3, r3, #20
 8008c64:	051b      	lsls	r3, r3, #20
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1bb      	bne.n	8008be2 <_strtod_l+0x72>
 8008c6a:	f7fe fb07 	bl	800727c <__errno>
 8008c6e:	2322      	movs	r3, #34	; 0x22
 8008c70:	6003      	str	r3, [r0, #0]
 8008c72:	e7b6      	b.n	8008be2 <_strtod_l+0x72>
 8008c74:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008c78:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008c7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008c80:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008c84:	e7e7      	b.n	8008c56 <_strtod_l+0xe6>
 8008c86:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008dfc <_strtod_l+0x28c>
 8008c8a:	e7e4      	b.n	8008c56 <_strtod_l+0xe6>
 8008c8c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008c90:	f04f 38ff 	mov.w	r8, #4294967295
 8008c94:	e7df      	b.n	8008c56 <_strtod_l+0xe6>
 8008c96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	9219      	str	r2, [sp, #100]	; 0x64
 8008c9c:	785b      	ldrb	r3, [r3, #1]
 8008c9e:	2b30      	cmp	r3, #48	; 0x30
 8008ca0:	d0f9      	beq.n	8008c96 <_strtod_l+0x126>
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d09d      	beq.n	8008be2 <_strtod_l+0x72>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	f04f 0a00 	mov.w	sl, #0
 8008cac:	220a      	movs	r2, #10
 8008cae:	46d3      	mov	fp, sl
 8008cb0:	9305      	str	r3, [sp, #20]
 8008cb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cb4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008cb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cba:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008cbc:	7806      	ldrb	r6, [r0, #0]
 8008cbe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008cc2:	b2d9      	uxtb	r1, r3
 8008cc4:	2909      	cmp	r1, #9
 8008cc6:	d926      	bls.n	8008d16 <_strtod_l+0x1a6>
 8008cc8:	2201      	movs	r2, #1
 8008cca:	494d      	ldr	r1, [pc, #308]	; (8008e00 <_strtod_l+0x290>)
 8008ccc:	f001 f9be 	bl	800a04c <strncmp>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d030      	beq.n	8008d36 <_strtod_l+0x1c6>
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	4632      	mov	r2, r6
 8008cd8:	4603      	mov	r3, r0
 8008cda:	465e      	mov	r6, fp
 8008cdc:	9008      	str	r0, [sp, #32]
 8008cde:	2a65      	cmp	r2, #101	; 0x65
 8008ce0:	d001      	beq.n	8008ce6 <_strtod_l+0x176>
 8008ce2:	2a45      	cmp	r2, #69	; 0x45
 8008ce4:	d113      	bne.n	8008d0e <_strtod_l+0x19e>
 8008ce6:	b91e      	cbnz	r6, 8008cf0 <_strtod_l+0x180>
 8008ce8:	9a05      	ldr	r2, [sp, #20]
 8008cea:	4302      	orrs	r2, r0
 8008cec:	d094      	beq.n	8008c18 <_strtod_l+0xa8>
 8008cee:	2600      	movs	r6, #0
 8008cf0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008cf2:	1c6a      	adds	r2, r5, #1
 8008cf4:	9219      	str	r2, [sp, #100]	; 0x64
 8008cf6:	786a      	ldrb	r2, [r5, #1]
 8008cf8:	2a2b      	cmp	r2, #43	; 0x2b
 8008cfa:	d074      	beq.n	8008de6 <_strtod_l+0x276>
 8008cfc:	2a2d      	cmp	r2, #45	; 0x2d
 8008cfe:	d078      	beq.n	8008df2 <_strtod_l+0x282>
 8008d00:	f04f 0c00 	mov.w	ip, #0
 8008d04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008d08:	2909      	cmp	r1, #9
 8008d0a:	d97f      	bls.n	8008e0c <_strtod_l+0x29c>
 8008d0c:	9519      	str	r5, [sp, #100]	; 0x64
 8008d0e:	2700      	movs	r7, #0
 8008d10:	e09e      	b.n	8008e50 <_strtod_l+0x2e0>
 8008d12:	2300      	movs	r3, #0
 8008d14:	e7c8      	b.n	8008ca8 <_strtod_l+0x138>
 8008d16:	f1bb 0f08 	cmp.w	fp, #8
 8008d1a:	bfd8      	it	le
 8008d1c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008d1e:	f100 0001 	add.w	r0, r0, #1
 8008d22:	bfd6      	itet	le
 8008d24:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d28:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008d2c:	930a      	strle	r3, [sp, #40]	; 0x28
 8008d2e:	f10b 0b01 	add.w	fp, fp, #1
 8008d32:	9019      	str	r0, [sp, #100]	; 0x64
 8008d34:	e7c1      	b.n	8008cba <_strtod_l+0x14a>
 8008d36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	9219      	str	r2, [sp, #100]	; 0x64
 8008d3c:	785a      	ldrb	r2, [r3, #1]
 8008d3e:	f1bb 0f00 	cmp.w	fp, #0
 8008d42:	d037      	beq.n	8008db4 <_strtod_l+0x244>
 8008d44:	465e      	mov	r6, fp
 8008d46:	9008      	str	r0, [sp, #32]
 8008d48:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008d4c:	2b09      	cmp	r3, #9
 8008d4e:	d912      	bls.n	8008d76 <_strtod_l+0x206>
 8008d50:	2301      	movs	r3, #1
 8008d52:	e7c4      	b.n	8008cde <_strtod_l+0x16e>
 8008d54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d56:	3001      	adds	r0, #1
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	9219      	str	r2, [sp, #100]	; 0x64
 8008d5c:	785a      	ldrb	r2, [r3, #1]
 8008d5e:	2a30      	cmp	r2, #48	; 0x30
 8008d60:	d0f8      	beq.n	8008d54 <_strtod_l+0x1e4>
 8008d62:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008d66:	2b08      	cmp	r3, #8
 8008d68:	f200 84e4 	bhi.w	8009734 <_strtod_l+0xbc4>
 8008d6c:	9008      	str	r0, [sp, #32]
 8008d6e:	2000      	movs	r0, #0
 8008d70:	4606      	mov	r6, r0
 8008d72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d76:	3a30      	subs	r2, #48	; 0x30
 8008d78:	f100 0301 	add.w	r3, r0, #1
 8008d7c:	d014      	beq.n	8008da8 <_strtod_l+0x238>
 8008d7e:	9908      	ldr	r1, [sp, #32]
 8008d80:	eb00 0c06 	add.w	ip, r0, r6
 8008d84:	4419      	add	r1, r3
 8008d86:	9108      	str	r1, [sp, #32]
 8008d88:	4633      	mov	r3, r6
 8008d8a:	210a      	movs	r1, #10
 8008d8c:	4563      	cmp	r3, ip
 8008d8e:	d113      	bne.n	8008db8 <_strtod_l+0x248>
 8008d90:	1833      	adds	r3, r6, r0
 8008d92:	2b08      	cmp	r3, #8
 8008d94:	f106 0601 	add.w	r6, r6, #1
 8008d98:	4406      	add	r6, r0
 8008d9a:	dc1a      	bgt.n	8008dd2 <_strtod_l+0x262>
 8008d9c:	230a      	movs	r3, #10
 8008d9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008da0:	fb03 2301 	mla	r3, r3, r1, r2
 8008da4:	930a      	str	r3, [sp, #40]	; 0x28
 8008da6:	2300      	movs	r3, #0
 8008da8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008daa:	4618      	mov	r0, r3
 8008dac:	1c51      	adds	r1, r2, #1
 8008dae:	9119      	str	r1, [sp, #100]	; 0x64
 8008db0:	7852      	ldrb	r2, [r2, #1]
 8008db2:	e7c9      	b.n	8008d48 <_strtod_l+0x1d8>
 8008db4:	4658      	mov	r0, fp
 8008db6:	e7d2      	b.n	8008d5e <_strtod_l+0x1ee>
 8008db8:	2b08      	cmp	r3, #8
 8008dba:	f103 0301 	add.w	r3, r3, #1
 8008dbe:	dc03      	bgt.n	8008dc8 <_strtod_l+0x258>
 8008dc0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008dc2:	434f      	muls	r7, r1
 8008dc4:	970a      	str	r7, [sp, #40]	; 0x28
 8008dc6:	e7e1      	b.n	8008d8c <_strtod_l+0x21c>
 8008dc8:	2b10      	cmp	r3, #16
 8008dca:	bfd8      	it	le
 8008dcc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008dd0:	e7dc      	b.n	8008d8c <_strtod_l+0x21c>
 8008dd2:	2e10      	cmp	r6, #16
 8008dd4:	bfdc      	itt	le
 8008dd6:	230a      	movle	r3, #10
 8008dd8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008ddc:	e7e3      	b.n	8008da6 <_strtod_l+0x236>
 8008dde:	2300      	movs	r3, #0
 8008de0:	9308      	str	r3, [sp, #32]
 8008de2:	2301      	movs	r3, #1
 8008de4:	e780      	b.n	8008ce8 <_strtod_l+0x178>
 8008de6:	f04f 0c00 	mov.w	ip, #0
 8008dea:	1caa      	adds	r2, r5, #2
 8008dec:	9219      	str	r2, [sp, #100]	; 0x64
 8008dee:	78aa      	ldrb	r2, [r5, #2]
 8008df0:	e788      	b.n	8008d04 <_strtod_l+0x194>
 8008df2:	f04f 0c01 	mov.w	ip, #1
 8008df6:	e7f8      	b.n	8008dea <_strtod_l+0x27a>
 8008df8:	0800c860 	.word	0x0800c860
 8008dfc:	7ff00000 	.word	0x7ff00000
 8008e00:	0800c85c 	.word	0x0800c85c
 8008e04:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e06:	1c51      	adds	r1, r2, #1
 8008e08:	9119      	str	r1, [sp, #100]	; 0x64
 8008e0a:	7852      	ldrb	r2, [r2, #1]
 8008e0c:	2a30      	cmp	r2, #48	; 0x30
 8008e0e:	d0f9      	beq.n	8008e04 <_strtod_l+0x294>
 8008e10:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008e14:	2908      	cmp	r1, #8
 8008e16:	f63f af7a 	bhi.w	8008d0e <_strtod_l+0x19e>
 8008e1a:	3a30      	subs	r2, #48	; 0x30
 8008e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e20:	920c      	str	r2, [sp, #48]	; 0x30
 8008e22:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e24:	1c57      	adds	r7, r2, #1
 8008e26:	9719      	str	r7, [sp, #100]	; 0x64
 8008e28:	7852      	ldrb	r2, [r2, #1]
 8008e2a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008e2e:	f1be 0f09 	cmp.w	lr, #9
 8008e32:	d938      	bls.n	8008ea6 <_strtod_l+0x336>
 8008e34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e36:	1a7f      	subs	r7, r7, r1
 8008e38:	2f08      	cmp	r7, #8
 8008e3a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008e3e:	dc03      	bgt.n	8008e48 <_strtod_l+0x2d8>
 8008e40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e42:	428f      	cmp	r7, r1
 8008e44:	bfa8      	it	ge
 8008e46:	460f      	movge	r7, r1
 8008e48:	f1bc 0f00 	cmp.w	ip, #0
 8008e4c:	d000      	beq.n	8008e50 <_strtod_l+0x2e0>
 8008e4e:	427f      	negs	r7, r7
 8008e50:	2e00      	cmp	r6, #0
 8008e52:	d14f      	bne.n	8008ef4 <_strtod_l+0x384>
 8008e54:	9905      	ldr	r1, [sp, #20]
 8008e56:	4301      	orrs	r1, r0
 8008e58:	f47f aec3 	bne.w	8008be2 <_strtod_l+0x72>
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f47f aedb 	bne.w	8008c18 <_strtod_l+0xa8>
 8008e62:	2a69      	cmp	r2, #105	; 0x69
 8008e64:	d029      	beq.n	8008eba <_strtod_l+0x34a>
 8008e66:	dc26      	bgt.n	8008eb6 <_strtod_l+0x346>
 8008e68:	2a49      	cmp	r2, #73	; 0x49
 8008e6a:	d026      	beq.n	8008eba <_strtod_l+0x34a>
 8008e6c:	2a4e      	cmp	r2, #78	; 0x4e
 8008e6e:	f47f aed3 	bne.w	8008c18 <_strtod_l+0xa8>
 8008e72:	499a      	ldr	r1, [pc, #616]	; (80090dc <_strtod_l+0x56c>)
 8008e74:	a819      	add	r0, sp, #100	; 0x64
 8008e76:	f001 fbed 	bl	800a654 <__match>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	f43f aecc 	beq.w	8008c18 <_strtod_l+0xa8>
 8008e80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	2b28      	cmp	r3, #40	; 0x28
 8008e86:	d12f      	bne.n	8008ee8 <_strtod_l+0x378>
 8008e88:	4995      	ldr	r1, [pc, #596]	; (80090e0 <_strtod_l+0x570>)
 8008e8a:	aa1c      	add	r2, sp, #112	; 0x70
 8008e8c:	a819      	add	r0, sp, #100	; 0x64
 8008e8e:	f001 fbf5 	bl	800a67c <__hexnan>
 8008e92:	2805      	cmp	r0, #5
 8008e94:	d128      	bne.n	8008ee8 <_strtod_l+0x378>
 8008e96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e98:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008e9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008ea0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008ea4:	e69d      	b.n	8008be2 <_strtod_l+0x72>
 8008ea6:	210a      	movs	r1, #10
 8008ea8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008eaa:	fb01 2107 	mla	r1, r1, r7, r2
 8008eae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008eb2:	9209      	str	r2, [sp, #36]	; 0x24
 8008eb4:	e7b5      	b.n	8008e22 <_strtod_l+0x2b2>
 8008eb6:	2a6e      	cmp	r2, #110	; 0x6e
 8008eb8:	e7d9      	b.n	8008e6e <_strtod_l+0x2fe>
 8008eba:	498a      	ldr	r1, [pc, #552]	; (80090e4 <_strtod_l+0x574>)
 8008ebc:	a819      	add	r0, sp, #100	; 0x64
 8008ebe:	f001 fbc9 	bl	800a654 <__match>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	f43f aea8 	beq.w	8008c18 <_strtod_l+0xa8>
 8008ec8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008eca:	4987      	ldr	r1, [pc, #540]	; (80090e8 <_strtod_l+0x578>)
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	a819      	add	r0, sp, #100	; 0x64
 8008ed0:	9319      	str	r3, [sp, #100]	; 0x64
 8008ed2:	f001 fbbf 	bl	800a654 <__match>
 8008ed6:	b910      	cbnz	r0, 8008ede <_strtod_l+0x36e>
 8008ed8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008eda:	3301      	adds	r3, #1
 8008edc:	9319      	str	r3, [sp, #100]	; 0x64
 8008ede:	f04f 0800 	mov.w	r8, #0
 8008ee2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80090ec <_strtod_l+0x57c>
 8008ee6:	e67c      	b.n	8008be2 <_strtod_l+0x72>
 8008ee8:	4881      	ldr	r0, [pc, #516]	; (80090f0 <_strtod_l+0x580>)
 8008eea:	f001 f8d1 	bl	800a090 <nan>
 8008eee:	4680      	mov	r8, r0
 8008ef0:	4689      	mov	r9, r1
 8008ef2:	e676      	b.n	8008be2 <_strtod_l+0x72>
 8008ef4:	9b08      	ldr	r3, [sp, #32]
 8008ef6:	f1bb 0f00 	cmp.w	fp, #0
 8008efa:	bf08      	it	eq
 8008efc:	46b3      	moveq	fp, r6
 8008efe:	1afb      	subs	r3, r7, r3
 8008f00:	2e10      	cmp	r6, #16
 8008f02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f04:	4635      	mov	r5, r6
 8008f06:	9309      	str	r3, [sp, #36]	; 0x24
 8008f08:	bfa8      	it	ge
 8008f0a:	2510      	movge	r5, #16
 8008f0c:	f7f7 fa6a 	bl	80003e4 <__aeabi_ui2d>
 8008f10:	2e09      	cmp	r6, #9
 8008f12:	4680      	mov	r8, r0
 8008f14:	4689      	mov	r9, r1
 8008f16:	dd13      	ble.n	8008f40 <_strtod_l+0x3d0>
 8008f18:	4b76      	ldr	r3, [pc, #472]	; (80090f4 <_strtod_l+0x584>)
 8008f1a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008f1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008f22:	f7f7 fad9 	bl	80004d8 <__aeabi_dmul>
 8008f26:	4680      	mov	r8, r0
 8008f28:	4650      	mov	r0, sl
 8008f2a:	4689      	mov	r9, r1
 8008f2c:	f7f7 fa5a 	bl	80003e4 <__aeabi_ui2d>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4640      	mov	r0, r8
 8008f36:	4649      	mov	r1, r9
 8008f38:	f7f7 f918 	bl	800016c <__adddf3>
 8008f3c:	4680      	mov	r8, r0
 8008f3e:	4689      	mov	r9, r1
 8008f40:	2e0f      	cmp	r6, #15
 8008f42:	dc36      	bgt.n	8008fb2 <_strtod_l+0x442>
 8008f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f43f ae4b 	beq.w	8008be2 <_strtod_l+0x72>
 8008f4c:	dd22      	ble.n	8008f94 <_strtod_l+0x424>
 8008f4e:	2b16      	cmp	r3, #22
 8008f50:	dc09      	bgt.n	8008f66 <_strtod_l+0x3f6>
 8008f52:	4968      	ldr	r1, [pc, #416]	; (80090f4 <_strtod_l+0x584>)
 8008f54:	4642      	mov	r2, r8
 8008f56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f5a:	464b      	mov	r3, r9
 8008f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f60:	f7f7 faba 	bl	80004d8 <__aeabi_dmul>
 8008f64:	e7c3      	b.n	8008eee <_strtod_l+0x37e>
 8008f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f68:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	db20      	blt.n	8008fb2 <_strtod_l+0x442>
 8008f70:	4c60      	ldr	r4, [pc, #384]	; (80090f4 <_strtod_l+0x584>)
 8008f72:	f1c6 060f 	rsb	r6, r6, #15
 8008f76:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008f7a:	4642      	mov	r2, r8
 8008f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f80:	464b      	mov	r3, r9
 8008f82:	f7f7 faa9 	bl	80004d8 <__aeabi_dmul>
 8008f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f88:	1b9e      	subs	r6, r3, r6
 8008f8a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008f8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f92:	e7e5      	b.n	8008f60 <_strtod_l+0x3f0>
 8008f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f96:	3316      	adds	r3, #22
 8008f98:	db0b      	blt.n	8008fb2 <_strtod_l+0x442>
 8008f9a:	9b08      	ldr	r3, [sp, #32]
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	1bdf      	subs	r7, r3, r7
 8008fa0:	4b54      	ldr	r3, [pc, #336]	; (80090f4 <_strtod_l+0x584>)
 8008fa2:	4649      	mov	r1, r9
 8008fa4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fac:	f7f7 fbbe 	bl	800072c <__aeabi_ddiv>
 8008fb0:	e79d      	b.n	8008eee <_strtod_l+0x37e>
 8008fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb4:	1b75      	subs	r5, r6, r5
 8008fb6:	441d      	add	r5, r3
 8008fb8:	2d00      	cmp	r5, #0
 8008fba:	dd70      	ble.n	800909e <_strtod_l+0x52e>
 8008fbc:	f015 030f 	ands.w	r3, r5, #15
 8008fc0:	d00a      	beq.n	8008fd8 <_strtod_l+0x468>
 8008fc2:	494c      	ldr	r1, [pc, #304]	; (80090f4 <_strtod_l+0x584>)
 8008fc4:	4642      	mov	r2, r8
 8008fc6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fce:	464b      	mov	r3, r9
 8008fd0:	f7f7 fa82 	bl	80004d8 <__aeabi_dmul>
 8008fd4:	4680      	mov	r8, r0
 8008fd6:	4689      	mov	r9, r1
 8008fd8:	f035 050f 	bics.w	r5, r5, #15
 8008fdc:	d04d      	beq.n	800907a <_strtod_l+0x50a>
 8008fde:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008fe2:	dd22      	ble.n	800902a <_strtod_l+0x4ba>
 8008fe4:	2600      	movs	r6, #0
 8008fe6:	46b3      	mov	fp, r6
 8008fe8:	960b      	str	r6, [sp, #44]	; 0x2c
 8008fea:	9608      	str	r6, [sp, #32]
 8008fec:	2322      	movs	r3, #34	; 0x22
 8008fee:	f04f 0800 	mov.w	r8, #0
 8008ff2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80090ec <_strtod_l+0x57c>
 8008ff6:	6023      	str	r3, [r4, #0]
 8008ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f43f adf1 	beq.w	8008be2 <_strtod_l+0x72>
 8009000:	4620      	mov	r0, r4
 8009002:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009004:	f7ff f934 	bl	8008270 <_Bfree>
 8009008:	4620      	mov	r0, r4
 800900a:	9908      	ldr	r1, [sp, #32]
 800900c:	f7ff f930 	bl	8008270 <_Bfree>
 8009010:	4659      	mov	r1, fp
 8009012:	4620      	mov	r0, r4
 8009014:	f7ff f92c 	bl	8008270 <_Bfree>
 8009018:	4620      	mov	r0, r4
 800901a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800901c:	f7ff f928 	bl	8008270 <_Bfree>
 8009020:	4631      	mov	r1, r6
 8009022:	4620      	mov	r0, r4
 8009024:	f7ff f924 	bl	8008270 <_Bfree>
 8009028:	e5db      	b.n	8008be2 <_strtod_l+0x72>
 800902a:	4b33      	ldr	r3, [pc, #204]	; (80090f8 <_strtod_l+0x588>)
 800902c:	4640      	mov	r0, r8
 800902e:	9305      	str	r3, [sp, #20]
 8009030:	2300      	movs	r3, #0
 8009032:	4649      	mov	r1, r9
 8009034:	469a      	mov	sl, r3
 8009036:	112d      	asrs	r5, r5, #4
 8009038:	2d01      	cmp	r5, #1
 800903a:	dc21      	bgt.n	8009080 <_strtod_l+0x510>
 800903c:	b10b      	cbz	r3, 8009042 <_strtod_l+0x4d2>
 800903e:	4680      	mov	r8, r0
 8009040:	4689      	mov	r9, r1
 8009042:	492d      	ldr	r1, [pc, #180]	; (80090f8 <_strtod_l+0x588>)
 8009044:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009048:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800904c:	4642      	mov	r2, r8
 800904e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009052:	464b      	mov	r3, r9
 8009054:	f7f7 fa40 	bl	80004d8 <__aeabi_dmul>
 8009058:	4b24      	ldr	r3, [pc, #144]	; (80090ec <_strtod_l+0x57c>)
 800905a:	460a      	mov	r2, r1
 800905c:	400b      	ands	r3, r1
 800905e:	4927      	ldr	r1, [pc, #156]	; (80090fc <_strtod_l+0x58c>)
 8009060:	4680      	mov	r8, r0
 8009062:	428b      	cmp	r3, r1
 8009064:	d8be      	bhi.n	8008fe4 <_strtod_l+0x474>
 8009066:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800906a:	428b      	cmp	r3, r1
 800906c:	bf86      	itte	hi
 800906e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009072:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009100 <_strtod_l+0x590>
 8009076:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800907a:	2300      	movs	r3, #0
 800907c:	9305      	str	r3, [sp, #20]
 800907e:	e07b      	b.n	8009178 <_strtod_l+0x608>
 8009080:	07ea      	lsls	r2, r5, #31
 8009082:	d505      	bpl.n	8009090 <_strtod_l+0x520>
 8009084:	9b05      	ldr	r3, [sp, #20]
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	f7f7 fa25 	bl	80004d8 <__aeabi_dmul>
 800908e:	2301      	movs	r3, #1
 8009090:	9a05      	ldr	r2, [sp, #20]
 8009092:	f10a 0a01 	add.w	sl, sl, #1
 8009096:	3208      	adds	r2, #8
 8009098:	106d      	asrs	r5, r5, #1
 800909a:	9205      	str	r2, [sp, #20]
 800909c:	e7cc      	b.n	8009038 <_strtod_l+0x4c8>
 800909e:	d0ec      	beq.n	800907a <_strtod_l+0x50a>
 80090a0:	426d      	negs	r5, r5
 80090a2:	f015 020f 	ands.w	r2, r5, #15
 80090a6:	d00a      	beq.n	80090be <_strtod_l+0x54e>
 80090a8:	4b12      	ldr	r3, [pc, #72]	; (80090f4 <_strtod_l+0x584>)
 80090aa:	4640      	mov	r0, r8
 80090ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090b0:	4649      	mov	r1, r9
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	f7f7 fb39 	bl	800072c <__aeabi_ddiv>
 80090ba:	4680      	mov	r8, r0
 80090bc:	4689      	mov	r9, r1
 80090be:	112d      	asrs	r5, r5, #4
 80090c0:	d0db      	beq.n	800907a <_strtod_l+0x50a>
 80090c2:	2d1f      	cmp	r5, #31
 80090c4:	dd1e      	ble.n	8009104 <_strtod_l+0x594>
 80090c6:	2600      	movs	r6, #0
 80090c8:	46b3      	mov	fp, r6
 80090ca:	960b      	str	r6, [sp, #44]	; 0x2c
 80090cc:	9608      	str	r6, [sp, #32]
 80090ce:	2322      	movs	r3, #34	; 0x22
 80090d0:	f04f 0800 	mov.w	r8, #0
 80090d4:	f04f 0900 	mov.w	r9, #0
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	e78d      	b.n	8008ff8 <_strtod_l+0x488>
 80090dc:	0800c64d 	.word	0x0800c64d
 80090e0:	0800c874 	.word	0x0800c874
 80090e4:	0800c645 	.word	0x0800c645
 80090e8:	0800c67c 	.word	0x0800c67c
 80090ec:	7ff00000 	.word	0x7ff00000
 80090f0:	0800ca05 	.word	0x0800ca05
 80090f4:	0800c788 	.word	0x0800c788
 80090f8:	0800c760 	.word	0x0800c760
 80090fc:	7ca00000 	.word	0x7ca00000
 8009100:	7fefffff 	.word	0x7fefffff
 8009104:	f015 0310 	ands.w	r3, r5, #16
 8009108:	bf18      	it	ne
 800910a:	236a      	movne	r3, #106	; 0x6a
 800910c:	4640      	mov	r0, r8
 800910e:	9305      	str	r3, [sp, #20]
 8009110:	4649      	mov	r1, r9
 8009112:	2300      	movs	r3, #0
 8009114:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80093e0 <_strtod_l+0x870>
 8009118:	07ea      	lsls	r2, r5, #31
 800911a:	d504      	bpl.n	8009126 <_strtod_l+0x5b6>
 800911c:	e9da 2300 	ldrd	r2, r3, [sl]
 8009120:	f7f7 f9da 	bl	80004d8 <__aeabi_dmul>
 8009124:	2301      	movs	r3, #1
 8009126:	106d      	asrs	r5, r5, #1
 8009128:	f10a 0a08 	add.w	sl, sl, #8
 800912c:	d1f4      	bne.n	8009118 <_strtod_l+0x5a8>
 800912e:	b10b      	cbz	r3, 8009134 <_strtod_l+0x5c4>
 8009130:	4680      	mov	r8, r0
 8009132:	4689      	mov	r9, r1
 8009134:	9b05      	ldr	r3, [sp, #20]
 8009136:	b1bb      	cbz	r3, 8009168 <_strtod_l+0x5f8>
 8009138:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800913c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009140:	2b00      	cmp	r3, #0
 8009142:	4649      	mov	r1, r9
 8009144:	dd10      	ble.n	8009168 <_strtod_l+0x5f8>
 8009146:	2b1f      	cmp	r3, #31
 8009148:	f340 8128 	ble.w	800939c <_strtod_l+0x82c>
 800914c:	2b34      	cmp	r3, #52	; 0x34
 800914e:	bfd8      	it	le
 8009150:	f04f 33ff 	movle.w	r3, #4294967295
 8009154:	f04f 0800 	mov.w	r8, #0
 8009158:	bfcf      	iteee	gt
 800915a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800915e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009162:	4093      	lslle	r3, r2
 8009164:	ea03 0901 	andle.w	r9, r3, r1
 8009168:	2200      	movs	r2, #0
 800916a:	2300      	movs	r3, #0
 800916c:	4640      	mov	r0, r8
 800916e:	4649      	mov	r1, r9
 8009170:	f7f7 fc1a 	bl	80009a8 <__aeabi_dcmpeq>
 8009174:	2800      	cmp	r0, #0
 8009176:	d1a6      	bne.n	80090c6 <_strtod_l+0x556>
 8009178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800917a:	465a      	mov	r2, fp
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	4620      	mov	r0, r4
 8009180:	4633      	mov	r3, r6
 8009182:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009184:	f7ff f8dc 	bl	8008340 <__s2b>
 8009188:	900b      	str	r0, [sp, #44]	; 0x2c
 800918a:	2800      	cmp	r0, #0
 800918c:	f43f af2a 	beq.w	8008fe4 <_strtod_l+0x474>
 8009190:	2600      	movs	r6, #0
 8009192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009194:	9b08      	ldr	r3, [sp, #32]
 8009196:	2a00      	cmp	r2, #0
 8009198:	eba3 0307 	sub.w	r3, r3, r7
 800919c:	bfa8      	it	ge
 800919e:	2300      	movge	r3, #0
 80091a0:	46b3      	mov	fp, r6
 80091a2:	9312      	str	r3, [sp, #72]	; 0x48
 80091a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80091a8:	9316      	str	r3, [sp, #88]	; 0x58
 80091aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ac:	4620      	mov	r0, r4
 80091ae:	6859      	ldr	r1, [r3, #4]
 80091b0:	f7ff f81e 	bl	80081f0 <_Balloc>
 80091b4:	9008      	str	r0, [sp, #32]
 80091b6:	2800      	cmp	r0, #0
 80091b8:	f43f af18 	beq.w	8008fec <_strtod_l+0x47c>
 80091bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091be:	300c      	adds	r0, #12
 80091c0:	691a      	ldr	r2, [r3, #16]
 80091c2:	f103 010c 	add.w	r1, r3, #12
 80091c6:	3202      	adds	r2, #2
 80091c8:	0092      	lsls	r2, r2, #2
 80091ca:	f7fe f892 	bl	80072f2 <memcpy>
 80091ce:	ab1c      	add	r3, sp, #112	; 0x70
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	ab1b      	add	r3, sp, #108	; 0x6c
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	4642      	mov	r2, r8
 80091d8:	464b      	mov	r3, r9
 80091da:	4620      	mov	r0, r4
 80091dc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80091e0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80091e4:	f7ff fbd8 	bl	8008998 <__d2b>
 80091e8:	901a      	str	r0, [sp, #104]	; 0x68
 80091ea:	2800      	cmp	r0, #0
 80091ec:	f43f aefe 	beq.w	8008fec <_strtod_l+0x47c>
 80091f0:	2101      	movs	r1, #1
 80091f2:	4620      	mov	r0, r4
 80091f4:	f7ff f93c 	bl	8008470 <__i2b>
 80091f8:	4683      	mov	fp, r0
 80091fa:	2800      	cmp	r0, #0
 80091fc:	f43f aef6 	beq.w	8008fec <_strtod_l+0x47c>
 8009200:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009202:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009204:	2f00      	cmp	r7, #0
 8009206:	bfab      	itete	ge
 8009208:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800920a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800920c:	eb07 0a03 	addge.w	sl, r7, r3
 8009210:	1bdd      	sublt	r5, r3, r7
 8009212:	9b05      	ldr	r3, [sp, #20]
 8009214:	bfa8      	it	ge
 8009216:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009218:	eba7 0703 	sub.w	r7, r7, r3
 800921c:	4417      	add	r7, r2
 800921e:	4b71      	ldr	r3, [pc, #452]	; (80093e4 <_strtod_l+0x874>)
 8009220:	f107 37ff 	add.w	r7, r7, #4294967295
 8009224:	bfb8      	it	lt
 8009226:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800922a:	429f      	cmp	r7, r3
 800922c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009230:	f280 80c7 	bge.w	80093c2 <_strtod_l+0x852>
 8009234:	1bdb      	subs	r3, r3, r7
 8009236:	2b1f      	cmp	r3, #31
 8009238:	f04f 0101 	mov.w	r1, #1
 800923c:	eba2 0203 	sub.w	r2, r2, r3
 8009240:	f300 80b3 	bgt.w	80093aa <_strtod_l+0x83a>
 8009244:	fa01 f303 	lsl.w	r3, r1, r3
 8009248:	9313      	str	r3, [sp, #76]	; 0x4c
 800924a:	2300      	movs	r3, #0
 800924c:	9310      	str	r3, [sp, #64]	; 0x40
 800924e:	eb0a 0702 	add.w	r7, sl, r2
 8009252:	9b05      	ldr	r3, [sp, #20]
 8009254:	45ba      	cmp	sl, r7
 8009256:	4415      	add	r5, r2
 8009258:	441d      	add	r5, r3
 800925a:	4653      	mov	r3, sl
 800925c:	bfa8      	it	ge
 800925e:	463b      	movge	r3, r7
 8009260:	42ab      	cmp	r3, r5
 8009262:	bfa8      	it	ge
 8009264:	462b      	movge	r3, r5
 8009266:	2b00      	cmp	r3, #0
 8009268:	bfc2      	ittt	gt
 800926a:	1aff      	subgt	r7, r7, r3
 800926c:	1aed      	subgt	r5, r5, r3
 800926e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009272:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009274:	2b00      	cmp	r3, #0
 8009276:	dd17      	ble.n	80092a8 <_strtod_l+0x738>
 8009278:	4659      	mov	r1, fp
 800927a:	461a      	mov	r2, r3
 800927c:	4620      	mov	r0, r4
 800927e:	f7ff f9b5 	bl	80085ec <__pow5mult>
 8009282:	4683      	mov	fp, r0
 8009284:	2800      	cmp	r0, #0
 8009286:	f43f aeb1 	beq.w	8008fec <_strtod_l+0x47c>
 800928a:	4601      	mov	r1, r0
 800928c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800928e:	4620      	mov	r0, r4
 8009290:	f7ff f904 	bl	800849c <__multiply>
 8009294:	900a      	str	r0, [sp, #40]	; 0x28
 8009296:	2800      	cmp	r0, #0
 8009298:	f43f aea8 	beq.w	8008fec <_strtod_l+0x47c>
 800929c:	4620      	mov	r0, r4
 800929e:	991a      	ldr	r1, [sp, #104]	; 0x68
 80092a0:	f7fe ffe6 	bl	8008270 <_Bfree>
 80092a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a6:	931a      	str	r3, [sp, #104]	; 0x68
 80092a8:	2f00      	cmp	r7, #0
 80092aa:	f300 808f 	bgt.w	80093cc <_strtod_l+0x85c>
 80092ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dd08      	ble.n	80092c6 <_strtod_l+0x756>
 80092b4:	4620      	mov	r0, r4
 80092b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80092b8:	9908      	ldr	r1, [sp, #32]
 80092ba:	f7ff f997 	bl	80085ec <__pow5mult>
 80092be:	9008      	str	r0, [sp, #32]
 80092c0:	2800      	cmp	r0, #0
 80092c2:	f43f ae93 	beq.w	8008fec <_strtod_l+0x47c>
 80092c6:	2d00      	cmp	r5, #0
 80092c8:	dd08      	ble.n	80092dc <_strtod_l+0x76c>
 80092ca:	462a      	mov	r2, r5
 80092cc:	4620      	mov	r0, r4
 80092ce:	9908      	ldr	r1, [sp, #32]
 80092d0:	f7ff f9e6 	bl	80086a0 <__lshift>
 80092d4:	9008      	str	r0, [sp, #32]
 80092d6:	2800      	cmp	r0, #0
 80092d8:	f43f ae88 	beq.w	8008fec <_strtod_l+0x47c>
 80092dc:	f1ba 0f00 	cmp.w	sl, #0
 80092e0:	dd08      	ble.n	80092f4 <_strtod_l+0x784>
 80092e2:	4659      	mov	r1, fp
 80092e4:	4652      	mov	r2, sl
 80092e6:	4620      	mov	r0, r4
 80092e8:	f7ff f9da 	bl	80086a0 <__lshift>
 80092ec:	4683      	mov	fp, r0
 80092ee:	2800      	cmp	r0, #0
 80092f0:	f43f ae7c 	beq.w	8008fec <_strtod_l+0x47c>
 80092f4:	4620      	mov	r0, r4
 80092f6:	9a08      	ldr	r2, [sp, #32]
 80092f8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80092fa:	f7ff fa59 	bl	80087b0 <__mdiff>
 80092fe:	4606      	mov	r6, r0
 8009300:	2800      	cmp	r0, #0
 8009302:	f43f ae73 	beq.w	8008fec <_strtod_l+0x47c>
 8009306:	2500      	movs	r5, #0
 8009308:	68c3      	ldr	r3, [r0, #12]
 800930a:	4659      	mov	r1, fp
 800930c:	60c5      	str	r5, [r0, #12]
 800930e:	930a      	str	r3, [sp, #40]	; 0x28
 8009310:	f7ff fa32 	bl	8008778 <__mcmp>
 8009314:	42a8      	cmp	r0, r5
 8009316:	da6b      	bge.n	80093f0 <_strtod_l+0x880>
 8009318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800931a:	ea53 0308 	orrs.w	r3, r3, r8
 800931e:	f040 808f 	bne.w	8009440 <_strtod_l+0x8d0>
 8009322:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009326:	2b00      	cmp	r3, #0
 8009328:	f040 808a 	bne.w	8009440 <_strtod_l+0x8d0>
 800932c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009330:	0d1b      	lsrs	r3, r3, #20
 8009332:	051b      	lsls	r3, r3, #20
 8009334:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009338:	f240 8082 	bls.w	8009440 <_strtod_l+0x8d0>
 800933c:	6973      	ldr	r3, [r6, #20]
 800933e:	b913      	cbnz	r3, 8009346 <_strtod_l+0x7d6>
 8009340:	6933      	ldr	r3, [r6, #16]
 8009342:	2b01      	cmp	r3, #1
 8009344:	dd7c      	ble.n	8009440 <_strtod_l+0x8d0>
 8009346:	4631      	mov	r1, r6
 8009348:	2201      	movs	r2, #1
 800934a:	4620      	mov	r0, r4
 800934c:	f7ff f9a8 	bl	80086a0 <__lshift>
 8009350:	4659      	mov	r1, fp
 8009352:	4606      	mov	r6, r0
 8009354:	f7ff fa10 	bl	8008778 <__mcmp>
 8009358:	2800      	cmp	r0, #0
 800935a:	dd71      	ble.n	8009440 <_strtod_l+0x8d0>
 800935c:	9905      	ldr	r1, [sp, #20]
 800935e:	464b      	mov	r3, r9
 8009360:	4a21      	ldr	r2, [pc, #132]	; (80093e8 <_strtod_l+0x878>)
 8009362:	2900      	cmp	r1, #0
 8009364:	f000 808d 	beq.w	8009482 <_strtod_l+0x912>
 8009368:	ea02 0109 	and.w	r1, r2, r9
 800936c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009370:	f300 8087 	bgt.w	8009482 <_strtod_l+0x912>
 8009374:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009378:	f77f aea9 	ble.w	80090ce <_strtod_l+0x55e>
 800937c:	4640      	mov	r0, r8
 800937e:	4649      	mov	r1, r9
 8009380:	4b1a      	ldr	r3, [pc, #104]	; (80093ec <_strtod_l+0x87c>)
 8009382:	2200      	movs	r2, #0
 8009384:	f7f7 f8a8 	bl	80004d8 <__aeabi_dmul>
 8009388:	4b17      	ldr	r3, [pc, #92]	; (80093e8 <_strtod_l+0x878>)
 800938a:	4680      	mov	r8, r0
 800938c:	400b      	ands	r3, r1
 800938e:	4689      	mov	r9, r1
 8009390:	2b00      	cmp	r3, #0
 8009392:	f47f ae35 	bne.w	8009000 <_strtod_l+0x490>
 8009396:	2322      	movs	r3, #34	; 0x22
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	e631      	b.n	8009000 <_strtod_l+0x490>
 800939c:	f04f 32ff 	mov.w	r2, #4294967295
 80093a0:	fa02 f303 	lsl.w	r3, r2, r3
 80093a4:	ea03 0808 	and.w	r8, r3, r8
 80093a8:	e6de      	b.n	8009168 <_strtod_l+0x5f8>
 80093aa:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80093ae:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80093b2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80093b6:	37e2      	adds	r7, #226	; 0xe2
 80093b8:	fa01 f307 	lsl.w	r3, r1, r7
 80093bc:	9310      	str	r3, [sp, #64]	; 0x40
 80093be:	9113      	str	r1, [sp, #76]	; 0x4c
 80093c0:	e745      	b.n	800924e <_strtod_l+0x6de>
 80093c2:	2300      	movs	r3, #0
 80093c4:	9310      	str	r3, [sp, #64]	; 0x40
 80093c6:	2301      	movs	r3, #1
 80093c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80093ca:	e740      	b.n	800924e <_strtod_l+0x6de>
 80093cc:	463a      	mov	r2, r7
 80093ce:	4620      	mov	r0, r4
 80093d0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093d2:	f7ff f965 	bl	80086a0 <__lshift>
 80093d6:	901a      	str	r0, [sp, #104]	; 0x68
 80093d8:	2800      	cmp	r0, #0
 80093da:	f47f af68 	bne.w	80092ae <_strtod_l+0x73e>
 80093de:	e605      	b.n	8008fec <_strtod_l+0x47c>
 80093e0:	0800c888 	.word	0x0800c888
 80093e4:	fffffc02 	.word	0xfffffc02
 80093e8:	7ff00000 	.word	0x7ff00000
 80093ec:	39500000 	.word	0x39500000
 80093f0:	46ca      	mov	sl, r9
 80093f2:	d165      	bne.n	80094c0 <_strtod_l+0x950>
 80093f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093fa:	b352      	cbz	r2, 8009452 <_strtod_l+0x8e2>
 80093fc:	4a9e      	ldr	r2, [pc, #632]	; (8009678 <_strtod_l+0xb08>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d12a      	bne.n	8009458 <_strtod_l+0x8e8>
 8009402:	9b05      	ldr	r3, [sp, #20]
 8009404:	4641      	mov	r1, r8
 8009406:	b1fb      	cbz	r3, 8009448 <_strtod_l+0x8d8>
 8009408:	4b9c      	ldr	r3, [pc, #624]	; (800967c <_strtod_l+0xb0c>)
 800940a:	f04f 32ff 	mov.w	r2, #4294967295
 800940e:	ea09 0303 	and.w	r3, r9, r3
 8009412:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009416:	d81a      	bhi.n	800944e <_strtod_l+0x8de>
 8009418:	0d1b      	lsrs	r3, r3, #20
 800941a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800941e:	fa02 f303 	lsl.w	r3, r2, r3
 8009422:	4299      	cmp	r1, r3
 8009424:	d118      	bne.n	8009458 <_strtod_l+0x8e8>
 8009426:	4b96      	ldr	r3, [pc, #600]	; (8009680 <_strtod_l+0xb10>)
 8009428:	459a      	cmp	sl, r3
 800942a:	d102      	bne.n	8009432 <_strtod_l+0x8c2>
 800942c:	3101      	adds	r1, #1
 800942e:	f43f addd 	beq.w	8008fec <_strtod_l+0x47c>
 8009432:	f04f 0800 	mov.w	r8, #0
 8009436:	4b91      	ldr	r3, [pc, #580]	; (800967c <_strtod_l+0xb0c>)
 8009438:	ea0a 0303 	and.w	r3, sl, r3
 800943c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009440:	9b05      	ldr	r3, [sp, #20]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d19a      	bne.n	800937c <_strtod_l+0x80c>
 8009446:	e5db      	b.n	8009000 <_strtod_l+0x490>
 8009448:	f04f 33ff 	mov.w	r3, #4294967295
 800944c:	e7e9      	b.n	8009422 <_strtod_l+0x8b2>
 800944e:	4613      	mov	r3, r2
 8009450:	e7e7      	b.n	8009422 <_strtod_l+0x8b2>
 8009452:	ea53 0308 	orrs.w	r3, r3, r8
 8009456:	d081      	beq.n	800935c <_strtod_l+0x7ec>
 8009458:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800945a:	b1e3      	cbz	r3, 8009496 <_strtod_l+0x926>
 800945c:	ea13 0f0a 	tst.w	r3, sl
 8009460:	d0ee      	beq.n	8009440 <_strtod_l+0x8d0>
 8009462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009464:	4640      	mov	r0, r8
 8009466:	4649      	mov	r1, r9
 8009468:	9a05      	ldr	r2, [sp, #20]
 800946a:	b1c3      	cbz	r3, 800949e <_strtod_l+0x92e>
 800946c:	f7ff fb5c 	bl	8008b28 <sulp>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009476:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009478:	f7f6 fe78 	bl	800016c <__adddf3>
 800947c:	4680      	mov	r8, r0
 800947e:	4689      	mov	r9, r1
 8009480:	e7de      	b.n	8009440 <_strtod_l+0x8d0>
 8009482:	4013      	ands	r3, r2
 8009484:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009488:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800948c:	f04f 38ff 	mov.w	r8, #4294967295
 8009490:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009494:	e7d4      	b.n	8009440 <_strtod_l+0x8d0>
 8009496:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009498:	ea13 0f08 	tst.w	r3, r8
 800949c:	e7e0      	b.n	8009460 <_strtod_l+0x8f0>
 800949e:	f7ff fb43 	bl	8008b28 <sulp>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094aa:	f7f6 fe5d 	bl	8000168 <__aeabi_dsub>
 80094ae:	2200      	movs	r2, #0
 80094b0:	2300      	movs	r3, #0
 80094b2:	4680      	mov	r8, r0
 80094b4:	4689      	mov	r9, r1
 80094b6:	f7f7 fa77 	bl	80009a8 <__aeabi_dcmpeq>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d0c0      	beq.n	8009440 <_strtod_l+0x8d0>
 80094be:	e606      	b.n	80090ce <_strtod_l+0x55e>
 80094c0:	4659      	mov	r1, fp
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7ff fabe 	bl	8008a44 <__ratio>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80094d0:	2200      	movs	r2, #0
 80094d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094d6:	f7f7 fa7b 	bl	80009d0 <__aeabi_dcmple>
 80094da:	2800      	cmp	r0, #0
 80094dc:	d06f      	beq.n	80095be <_strtod_l+0xa4e>
 80094de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d17c      	bne.n	80095de <_strtod_l+0xa6e>
 80094e4:	f1b8 0f00 	cmp.w	r8, #0
 80094e8:	d159      	bne.n	800959e <_strtod_l+0xa2e>
 80094ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d17b      	bne.n	80095ea <_strtod_l+0xa7a>
 80094f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80094f6:	2200      	movs	r2, #0
 80094f8:	4b62      	ldr	r3, [pc, #392]	; (8009684 <_strtod_l+0xb14>)
 80094fa:	f7f7 fa5f 	bl	80009bc <__aeabi_dcmplt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d15a      	bne.n	80095b8 <_strtod_l+0xa48>
 8009502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009506:	2200      	movs	r2, #0
 8009508:	4b5f      	ldr	r3, [pc, #380]	; (8009688 <_strtod_l+0xb18>)
 800950a:	f7f6 ffe5 	bl	80004d8 <__aeabi_dmul>
 800950e:	4605      	mov	r5, r0
 8009510:	460f      	mov	r7, r1
 8009512:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009516:	9506      	str	r5, [sp, #24]
 8009518:	9307      	str	r3, [sp, #28]
 800951a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800951e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009522:	4b56      	ldr	r3, [pc, #344]	; (800967c <_strtod_l+0xb0c>)
 8009524:	4a55      	ldr	r2, [pc, #340]	; (800967c <_strtod_l+0xb0c>)
 8009526:	ea0a 0303 	and.w	r3, sl, r3
 800952a:	9313      	str	r3, [sp, #76]	; 0x4c
 800952c:	4b57      	ldr	r3, [pc, #348]	; (800968c <_strtod_l+0xb1c>)
 800952e:	ea0a 0202 	and.w	r2, sl, r2
 8009532:	429a      	cmp	r2, r3
 8009534:	f040 80b0 	bne.w	8009698 <_strtod_l+0xb28>
 8009538:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800953c:	4640      	mov	r0, r8
 800953e:	4649      	mov	r1, r9
 8009540:	f7ff f9c2 	bl	80088c8 <__ulp>
 8009544:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009548:	f7f6 ffc6 	bl	80004d8 <__aeabi_dmul>
 800954c:	4642      	mov	r2, r8
 800954e:	464b      	mov	r3, r9
 8009550:	f7f6 fe0c 	bl	800016c <__adddf3>
 8009554:	f8df a124 	ldr.w	sl, [pc, #292]	; 800967c <_strtod_l+0xb0c>
 8009558:	4a4d      	ldr	r2, [pc, #308]	; (8009690 <_strtod_l+0xb20>)
 800955a:	ea01 0a0a 	and.w	sl, r1, sl
 800955e:	4592      	cmp	sl, r2
 8009560:	4680      	mov	r8, r0
 8009562:	d948      	bls.n	80095f6 <_strtod_l+0xa86>
 8009564:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009566:	4b46      	ldr	r3, [pc, #280]	; (8009680 <_strtod_l+0xb10>)
 8009568:	429a      	cmp	r2, r3
 800956a:	d103      	bne.n	8009574 <_strtod_l+0xa04>
 800956c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800956e:	3301      	adds	r3, #1
 8009570:	f43f ad3c 	beq.w	8008fec <_strtod_l+0x47c>
 8009574:	f04f 38ff 	mov.w	r8, #4294967295
 8009578:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009680 <_strtod_l+0xb10>
 800957c:	4620      	mov	r0, r4
 800957e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009580:	f7fe fe76 	bl	8008270 <_Bfree>
 8009584:	4620      	mov	r0, r4
 8009586:	9908      	ldr	r1, [sp, #32]
 8009588:	f7fe fe72 	bl	8008270 <_Bfree>
 800958c:	4659      	mov	r1, fp
 800958e:	4620      	mov	r0, r4
 8009590:	f7fe fe6e 	bl	8008270 <_Bfree>
 8009594:	4631      	mov	r1, r6
 8009596:	4620      	mov	r0, r4
 8009598:	f7fe fe6a 	bl	8008270 <_Bfree>
 800959c:	e605      	b.n	80091aa <_strtod_l+0x63a>
 800959e:	f1b8 0f01 	cmp.w	r8, #1
 80095a2:	d103      	bne.n	80095ac <_strtod_l+0xa3c>
 80095a4:	f1b9 0f00 	cmp.w	r9, #0
 80095a8:	f43f ad91 	beq.w	80090ce <_strtod_l+0x55e>
 80095ac:	2200      	movs	r2, #0
 80095ae:	4b39      	ldr	r3, [pc, #228]	; (8009694 <_strtod_l+0xb24>)
 80095b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80095b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80095b6:	e016      	b.n	80095e6 <_strtod_l+0xa76>
 80095b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80095ba:	4f33      	ldr	r7, [pc, #204]	; (8009688 <_strtod_l+0xb18>)
 80095bc:	e7a9      	b.n	8009512 <_strtod_l+0x9a2>
 80095be:	4b32      	ldr	r3, [pc, #200]	; (8009688 <_strtod_l+0xb18>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80095c6:	f7f6 ff87 	bl	80004d8 <__aeabi_dmul>
 80095ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095cc:	4605      	mov	r5, r0
 80095ce:	460f      	mov	r7, r1
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d09e      	beq.n	8009512 <_strtod_l+0x9a2>
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80095dc:	e79d      	b.n	800951a <_strtod_l+0x9aa>
 80095de:	2200      	movs	r2, #0
 80095e0:	4b28      	ldr	r3, [pc, #160]	; (8009684 <_strtod_l+0xb14>)
 80095e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80095e6:	4f27      	ldr	r7, [pc, #156]	; (8009684 <_strtod_l+0xb14>)
 80095e8:	e797      	b.n	800951a <_strtod_l+0x9aa>
 80095ea:	2200      	movs	r2, #0
 80095ec:	4b29      	ldr	r3, [pc, #164]	; (8009694 <_strtod_l+0xb24>)
 80095ee:	4645      	mov	r5, r8
 80095f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80095f4:	e7f7      	b.n	80095e6 <_strtod_l+0xa76>
 80095f6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80095fa:	9b05      	ldr	r3, [sp, #20]
 80095fc:	46ca      	mov	sl, r9
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1bc      	bne.n	800957c <_strtod_l+0xa0c>
 8009602:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009606:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009608:	0d1b      	lsrs	r3, r3, #20
 800960a:	051b      	lsls	r3, r3, #20
 800960c:	429a      	cmp	r2, r3
 800960e:	d1b5      	bne.n	800957c <_strtod_l+0xa0c>
 8009610:	4628      	mov	r0, r5
 8009612:	4639      	mov	r1, r7
 8009614:	f7f7 fd2c 	bl	8001070 <__aeabi_d2lz>
 8009618:	f7f6 ff30 	bl	800047c <__aeabi_l2d>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4628      	mov	r0, r5
 8009622:	4639      	mov	r1, r7
 8009624:	f7f6 fda0 	bl	8000168 <__aeabi_dsub>
 8009628:	460b      	mov	r3, r1
 800962a:	4602      	mov	r2, r0
 800962c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009630:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009636:	ea4a 0a08 	orr.w	sl, sl, r8
 800963a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800963e:	d06c      	beq.n	800971a <_strtod_l+0xbaa>
 8009640:	a309      	add	r3, pc, #36	; (adr r3, 8009668 <_strtod_l+0xaf8>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f7 f9b9 	bl	80009bc <__aeabi_dcmplt>
 800964a:	2800      	cmp	r0, #0
 800964c:	f47f acd8 	bne.w	8009000 <_strtod_l+0x490>
 8009650:	a307      	add	r3, pc, #28	; (adr r3, 8009670 <_strtod_l+0xb00>)
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800965a:	f7f7 f9cd 	bl	80009f8 <__aeabi_dcmpgt>
 800965e:	2800      	cmp	r0, #0
 8009660:	d08c      	beq.n	800957c <_strtod_l+0xa0c>
 8009662:	e4cd      	b.n	8009000 <_strtod_l+0x490>
 8009664:	f3af 8000 	nop.w
 8009668:	94a03595 	.word	0x94a03595
 800966c:	3fdfffff 	.word	0x3fdfffff
 8009670:	35afe535 	.word	0x35afe535
 8009674:	3fe00000 	.word	0x3fe00000
 8009678:	000fffff 	.word	0x000fffff
 800967c:	7ff00000 	.word	0x7ff00000
 8009680:	7fefffff 	.word	0x7fefffff
 8009684:	3ff00000 	.word	0x3ff00000
 8009688:	3fe00000 	.word	0x3fe00000
 800968c:	7fe00000 	.word	0x7fe00000
 8009690:	7c9fffff 	.word	0x7c9fffff
 8009694:	bff00000 	.word	0xbff00000
 8009698:	9b05      	ldr	r3, [sp, #20]
 800969a:	b333      	cbz	r3, 80096ea <_strtod_l+0xb7a>
 800969c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800969e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80096a2:	d822      	bhi.n	80096ea <_strtod_l+0xb7a>
 80096a4:	a328      	add	r3, pc, #160	; (adr r3, 8009748 <_strtod_l+0xbd8>)
 80096a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096aa:	4628      	mov	r0, r5
 80096ac:	4639      	mov	r1, r7
 80096ae:	f7f7 f98f 	bl	80009d0 <__aeabi_dcmple>
 80096b2:	b1a0      	cbz	r0, 80096de <_strtod_l+0xb6e>
 80096b4:	4639      	mov	r1, r7
 80096b6:	4628      	mov	r0, r5
 80096b8:	f7f7 f9e6 	bl	8000a88 <__aeabi_d2uiz>
 80096bc:	2801      	cmp	r0, #1
 80096be:	bf38      	it	cc
 80096c0:	2001      	movcc	r0, #1
 80096c2:	f7f6 fe8f 	bl	80003e4 <__aeabi_ui2d>
 80096c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c8:	4605      	mov	r5, r0
 80096ca:	460f      	mov	r7, r1
 80096cc:	bb03      	cbnz	r3, 8009710 <_strtod_l+0xba0>
 80096ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096d2:	9014      	str	r0, [sp, #80]	; 0x50
 80096d4:	9315      	str	r3, [sp, #84]	; 0x54
 80096d6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80096da:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80096de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096e2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80096e6:	1a9b      	subs	r3, r3, r2
 80096e8:	9311      	str	r3, [sp, #68]	; 0x44
 80096ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 80096ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80096ee:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80096f2:	f7ff f8e9 	bl	80088c8 <__ulp>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4640      	mov	r0, r8
 80096fc:	4649      	mov	r1, r9
 80096fe:	f7f6 feeb 	bl	80004d8 <__aeabi_dmul>
 8009702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009706:	f7f6 fd31 	bl	800016c <__adddf3>
 800970a:	4680      	mov	r8, r0
 800970c:	4689      	mov	r9, r1
 800970e:	e774      	b.n	80095fa <_strtod_l+0xa8a>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009718:	e7dd      	b.n	80096d6 <_strtod_l+0xb66>
 800971a:	a30d      	add	r3, pc, #52	; (adr r3, 8009750 <_strtod_l+0xbe0>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7f7 f94c 	bl	80009bc <__aeabi_dcmplt>
 8009724:	e79b      	b.n	800965e <_strtod_l+0xaee>
 8009726:	2300      	movs	r3, #0
 8009728:	930e      	str	r3, [sp, #56]	; 0x38
 800972a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800972c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	f7ff ba5b 	b.w	8008bea <_strtod_l+0x7a>
 8009734:	2a65      	cmp	r2, #101	; 0x65
 8009736:	f43f ab52 	beq.w	8008dde <_strtod_l+0x26e>
 800973a:	2a45      	cmp	r2, #69	; 0x45
 800973c:	f43f ab4f 	beq.w	8008dde <_strtod_l+0x26e>
 8009740:	2301      	movs	r3, #1
 8009742:	f7ff bb87 	b.w	8008e54 <_strtod_l+0x2e4>
 8009746:	bf00      	nop
 8009748:	ffc00000 	.word	0xffc00000
 800974c:	41dfffff 	.word	0x41dfffff
 8009750:	94a03595 	.word	0x94a03595
 8009754:	3fcfffff 	.word	0x3fcfffff

08009758 <_strtod_r>:
 8009758:	4b01      	ldr	r3, [pc, #4]	; (8009760 <_strtod_r+0x8>)
 800975a:	f7ff ba09 	b.w	8008b70 <_strtod_l>
 800975e:	bf00      	nop
 8009760:	20000088 	.word	0x20000088

08009764 <_strtol_l.constprop.0>:
 8009764:	2b01      	cmp	r3, #1
 8009766:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800976a:	4686      	mov	lr, r0
 800976c:	4690      	mov	r8, r2
 800976e:	d001      	beq.n	8009774 <_strtol_l.constprop.0+0x10>
 8009770:	2b24      	cmp	r3, #36	; 0x24
 8009772:	d906      	bls.n	8009782 <_strtol_l.constprop.0+0x1e>
 8009774:	f7fd fd82 	bl	800727c <__errno>
 8009778:	2316      	movs	r3, #22
 800977a:	6003      	str	r3, [r0, #0]
 800977c:	2000      	movs	r0, #0
 800977e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009782:	460d      	mov	r5, r1
 8009784:	4835      	ldr	r0, [pc, #212]	; (800985c <_strtol_l.constprop.0+0xf8>)
 8009786:	462a      	mov	r2, r5
 8009788:	f815 4b01 	ldrb.w	r4, [r5], #1
 800978c:	5d06      	ldrb	r6, [r0, r4]
 800978e:	f016 0608 	ands.w	r6, r6, #8
 8009792:	d1f8      	bne.n	8009786 <_strtol_l.constprop.0+0x22>
 8009794:	2c2d      	cmp	r4, #45	; 0x2d
 8009796:	d12e      	bne.n	80097f6 <_strtol_l.constprop.0+0x92>
 8009798:	2601      	movs	r6, #1
 800979a:	782c      	ldrb	r4, [r5, #0]
 800979c:	1c95      	adds	r5, r2, #2
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d057      	beq.n	8009852 <_strtol_l.constprop.0+0xee>
 80097a2:	2b10      	cmp	r3, #16
 80097a4:	d109      	bne.n	80097ba <_strtol_l.constprop.0+0x56>
 80097a6:	2c30      	cmp	r4, #48	; 0x30
 80097a8:	d107      	bne.n	80097ba <_strtol_l.constprop.0+0x56>
 80097aa:	782a      	ldrb	r2, [r5, #0]
 80097ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80097b0:	2a58      	cmp	r2, #88	; 0x58
 80097b2:	d149      	bne.n	8009848 <_strtol_l.constprop.0+0xe4>
 80097b4:	2310      	movs	r3, #16
 80097b6:	786c      	ldrb	r4, [r5, #1]
 80097b8:	3502      	adds	r5, #2
 80097ba:	2200      	movs	r2, #0
 80097bc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80097c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80097c4:	fbbc f9f3 	udiv	r9, ip, r3
 80097c8:	4610      	mov	r0, r2
 80097ca:	fb03 ca19 	mls	sl, r3, r9, ip
 80097ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80097d2:	2f09      	cmp	r7, #9
 80097d4:	d814      	bhi.n	8009800 <_strtol_l.constprop.0+0x9c>
 80097d6:	463c      	mov	r4, r7
 80097d8:	42a3      	cmp	r3, r4
 80097da:	dd20      	ble.n	800981e <_strtol_l.constprop.0+0xba>
 80097dc:	1c57      	adds	r7, r2, #1
 80097de:	d007      	beq.n	80097f0 <_strtol_l.constprop.0+0x8c>
 80097e0:	4581      	cmp	r9, r0
 80097e2:	d319      	bcc.n	8009818 <_strtol_l.constprop.0+0xb4>
 80097e4:	d101      	bne.n	80097ea <_strtol_l.constprop.0+0x86>
 80097e6:	45a2      	cmp	sl, r4
 80097e8:	db16      	blt.n	8009818 <_strtol_l.constprop.0+0xb4>
 80097ea:	2201      	movs	r2, #1
 80097ec:	fb00 4003 	mla	r0, r0, r3, r4
 80097f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097f4:	e7eb      	b.n	80097ce <_strtol_l.constprop.0+0x6a>
 80097f6:	2c2b      	cmp	r4, #43	; 0x2b
 80097f8:	bf04      	itt	eq
 80097fa:	782c      	ldrbeq	r4, [r5, #0]
 80097fc:	1c95      	addeq	r5, r2, #2
 80097fe:	e7ce      	b.n	800979e <_strtol_l.constprop.0+0x3a>
 8009800:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009804:	2f19      	cmp	r7, #25
 8009806:	d801      	bhi.n	800980c <_strtol_l.constprop.0+0xa8>
 8009808:	3c37      	subs	r4, #55	; 0x37
 800980a:	e7e5      	b.n	80097d8 <_strtol_l.constprop.0+0x74>
 800980c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009810:	2f19      	cmp	r7, #25
 8009812:	d804      	bhi.n	800981e <_strtol_l.constprop.0+0xba>
 8009814:	3c57      	subs	r4, #87	; 0x57
 8009816:	e7df      	b.n	80097d8 <_strtol_l.constprop.0+0x74>
 8009818:	f04f 32ff 	mov.w	r2, #4294967295
 800981c:	e7e8      	b.n	80097f0 <_strtol_l.constprop.0+0x8c>
 800981e:	1c53      	adds	r3, r2, #1
 8009820:	d108      	bne.n	8009834 <_strtol_l.constprop.0+0xd0>
 8009822:	2322      	movs	r3, #34	; 0x22
 8009824:	4660      	mov	r0, ip
 8009826:	f8ce 3000 	str.w	r3, [lr]
 800982a:	f1b8 0f00 	cmp.w	r8, #0
 800982e:	d0a6      	beq.n	800977e <_strtol_l.constprop.0+0x1a>
 8009830:	1e69      	subs	r1, r5, #1
 8009832:	e006      	b.n	8009842 <_strtol_l.constprop.0+0xde>
 8009834:	b106      	cbz	r6, 8009838 <_strtol_l.constprop.0+0xd4>
 8009836:	4240      	negs	r0, r0
 8009838:	f1b8 0f00 	cmp.w	r8, #0
 800983c:	d09f      	beq.n	800977e <_strtol_l.constprop.0+0x1a>
 800983e:	2a00      	cmp	r2, #0
 8009840:	d1f6      	bne.n	8009830 <_strtol_l.constprop.0+0xcc>
 8009842:	f8c8 1000 	str.w	r1, [r8]
 8009846:	e79a      	b.n	800977e <_strtol_l.constprop.0+0x1a>
 8009848:	2430      	movs	r4, #48	; 0x30
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1b5      	bne.n	80097ba <_strtol_l.constprop.0+0x56>
 800984e:	2308      	movs	r3, #8
 8009850:	e7b3      	b.n	80097ba <_strtol_l.constprop.0+0x56>
 8009852:	2c30      	cmp	r4, #48	; 0x30
 8009854:	d0a9      	beq.n	80097aa <_strtol_l.constprop.0+0x46>
 8009856:	230a      	movs	r3, #10
 8009858:	e7af      	b.n	80097ba <_strtol_l.constprop.0+0x56>
 800985a:	bf00      	nop
 800985c:	0800c8b1 	.word	0x0800c8b1

08009860 <_strtol_r>:
 8009860:	f7ff bf80 	b.w	8009764 <_strtol_l.constprop.0>

08009864 <__ssputs_r>:
 8009864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009868:	461f      	mov	r7, r3
 800986a:	688e      	ldr	r6, [r1, #8]
 800986c:	4682      	mov	sl, r0
 800986e:	42be      	cmp	r6, r7
 8009870:	460c      	mov	r4, r1
 8009872:	4690      	mov	r8, r2
 8009874:	680b      	ldr	r3, [r1, #0]
 8009876:	d82c      	bhi.n	80098d2 <__ssputs_r+0x6e>
 8009878:	898a      	ldrh	r2, [r1, #12]
 800987a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800987e:	d026      	beq.n	80098ce <__ssputs_r+0x6a>
 8009880:	6965      	ldr	r5, [r4, #20]
 8009882:	6909      	ldr	r1, [r1, #16]
 8009884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009888:	eba3 0901 	sub.w	r9, r3, r1
 800988c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009890:	1c7b      	adds	r3, r7, #1
 8009892:	444b      	add	r3, r9
 8009894:	106d      	asrs	r5, r5, #1
 8009896:	429d      	cmp	r5, r3
 8009898:	bf38      	it	cc
 800989a:	461d      	movcc	r5, r3
 800989c:	0553      	lsls	r3, r2, #21
 800989e:	d527      	bpl.n	80098f0 <__ssputs_r+0x8c>
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7fe fc19 	bl	80080d8 <_malloc_r>
 80098a6:	4606      	mov	r6, r0
 80098a8:	b360      	cbz	r0, 8009904 <__ssputs_r+0xa0>
 80098aa:	464a      	mov	r2, r9
 80098ac:	6921      	ldr	r1, [r4, #16]
 80098ae:	f7fd fd20 	bl	80072f2 <memcpy>
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098bc:	81a3      	strh	r3, [r4, #12]
 80098be:	6126      	str	r6, [r4, #16]
 80098c0:	444e      	add	r6, r9
 80098c2:	6026      	str	r6, [r4, #0]
 80098c4:	463e      	mov	r6, r7
 80098c6:	6165      	str	r5, [r4, #20]
 80098c8:	eba5 0509 	sub.w	r5, r5, r9
 80098cc:	60a5      	str	r5, [r4, #8]
 80098ce:	42be      	cmp	r6, r7
 80098d0:	d900      	bls.n	80098d4 <__ssputs_r+0x70>
 80098d2:	463e      	mov	r6, r7
 80098d4:	4632      	mov	r2, r6
 80098d6:	4641      	mov	r1, r8
 80098d8:	6820      	ldr	r0, [r4, #0]
 80098da:	f000 fb9d 	bl	800a018 <memmove>
 80098de:	2000      	movs	r0, #0
 80098e0:	68a3      	ldr	r3, [r4, #8]
 80098e2:	1b9b      	subs	r3, r3, r6
 80098e4:	60a3      	str	r3, [r4, #8]
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	4433      	add	r3, r6
 80098ea:	6023      	str	r3, [r4, #0]
 80098ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f0:	462a      	mov	r2, r5
 80098f2:	f000 ff70 	bl	800a7d6 <_realloc_r>
 80098f6:	4606      	mov	r6, r0
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d1e0      	bne.n	80098be <__ssputs_r+0x5a>
 80098fc:	4650      	mov	r0, sl
 80098fe:	6921      	ldr	r1, [r4, #16]
 8009900:	f7fe fb7a 	bl	8007ff8 <_free_r>
 8009904:	230c      	movs	r3, #12
 8009906:	f8ca 3000 	str.w	r3, [sl]
 800990a:	89a3      	ldrh	r3, [r4, #12]
 800990c:	f04f 30ff 	mov.w	r0, #4294967295
 8009910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009914:	81a3      	strh	r3, [r4, #12]
 8009916:	e7e9      	b.n	80098ec <__ssputs_r+0x88>

08009918 <_svfiprintf_r>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	4698      	mov	r8, r3
 800991e:	898b      	ldrh	r3, [r1, #12]
 8009920:	4607      	mov	r7, r0
 8009922:	061b      	lsls	r3, r3, #24
 8009924:	460d      	mov	r5, r1
 8009926:	4614      	mov	r4, r2
 8009928:	b09d      	sub	sp, #116	; 0x74
 800992a:	d50e      	bpl.n	800994a <_svfiprintf_r+0x32>
 800992c:	690b      	ldr	r3, [r1, #16]
 800992e:	b963      	cbnz	r3, 800994a <_svfiprintf_r+0x32>
 8009930:	2140      	movs	r1, #64	; 0x40
 8009932:	f7fe fbd1 	bl	80080d8 <_malloc_r>
 8009936:	6028      	str	r0, [r5, #0]
 8009938:	6128      	str	r0, [r5, #16]
 800993a:	b920      	cbnz	r0, 8009946 <_svfiprintf_r+0x2e>
 800993c:	230c      	movs	r3, #12
 800993e:	603b      	str	r3, [r7, #0]
 8009940:	f04f 30ff 	mov.w	r0, #4294967295
 8009944:	e0d0      	b.n	8009ae8 <_svfiprintf_r+0x1d0>
 8009946:	2340      	movs	r3, #64	; 0x40
 8009948:	616b      	str	r3, [r5, #20]
 800994a:	2300      	movs	r3, #0
 800994c:	9309      	str	r3, [sp, #36]	; 0x24
 800994e:	2320      	movs	r3, #32
 8009950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009954:	2330      	movs	r3, #48	; 0x30
 8009956:	f04f 0901 	mov.w	r9, #1
 800995a:	f8cd 800c 	str.w	r8, [sp, #12]
 800995e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009b00 <_svfiprintf_r+0x1e8>
 8009962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009966:	4623      	mov	r3, r4
 8009968:	469a      	mov	sl, r3
 800996a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800996e:	b10a      	cbz	r2, 8009974 <_svfiprintf_r+0x5c>
 8009970:	2a25      	cmp	r2, #37	; 0x25
 8009972:	d1f9      	bne.n	8009968 <_svfiprintf_r+0x50>
 8009974:	ebba 0b04 	subs.w	fp, sl, r4
 8009978:	d00b      	beq.n	8009992 <_svfiprintf_r+0x7a>
 800997a:	465b      	mov	r3, fp
 800997c:	4622      	mov	r2, r4
 800997e:	4629      	mov	r1, r5
 8009980:	4638      	mov	r0, r7
 8009982:	f7ff ff6f 	bl	8009864 <__ssputs_r>
 8009986:	3001      	adds	r0, #1
 8009988:	f000 80a9 	beq.w	8009ade <_svfiprintf_r+0x1c6>
 800998c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800998e:	445a      	add	r2, fp
 8009990:	9209      	str	r2, [sp, #36]	; 0x24
 8009992:	f89a 3000 	ldrb.w	r3, [sl]
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 80a1 	beq.w	8009ade <_svfiprintf_r+0x1c6>
 800999c:	2300      	movs	r3, #0
 800999e:	f04f 32ff 	mov.w	r2, #4294967295
 80099a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099a6:	f10a 0a01 	add.w	sl, sl, #1
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	9307      	str	r3, [sp, #28]
 80099ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099b2:	931a      	str	r3, [sp, #104]	; 0x68
 80099b4:	4654      	mov	r4, sl
 80099b6:	2205      	movs	r2, #5
 80099b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099bc:	4850      	ldr	r0, [pc, #320]	; (8009b00 <_svfiprintf_r+0x1e8>)
 80099be:	f7fd fc8a 	bl	80072d6 <memchr>
 80099c2:	9a04      	ldr	r2, [sp, #16]
 80099c4:	b9d8      	cbnz	r0, 80099fe <_svfiprintf_r+0xe6>
 80099c6:	06d0      	lsls	r0, r2, #27
 80099c8:	bf44      	itt	mi
 80099ca:	2320      	movmi	r3, #32
 80099cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099d0:	0711      	lsls	r1, r2, #28
 80099d2:	bf44      	itt	mi
 80099d4:	232b      	movmi	r3, #43	; 0x2b
 80099d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099da:	f89a 3000 	ldrb.w	r3, [sl]
 80099de:	2b2a      	cmp	r3, #42	; 0x2a
 80099e0:	d015      	beq.n	8009a0e <_svfiprintf_r+0xf6>
 80099e2:	4654      	mov	r4, sl
 80099e4:	2000      	movs	r0, #0
 80099e6:	f04f 0c0a 	mov.w	ip, #10
 80099ea:	9a07      	ldr	r2, [sp, #28]
 80099ec:	4621      	mov	r1, r4
 80099ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099f2:	3b30      	subs	r3, #48	; 0x30
 80099f4:	2b09      	cmp	r3, #9
 80099f6:	d94d      	bls.n	8009a94 <_svfiprintf_r+0x17c>
 80099f8:	b1b0      	cbz	r0, 8009a28 <_svfiprintf_r+0x110>
 80099fa:	9207      	str	r2, [sp, #28]
 80099fc:	e014      	b.n	8009a28 <_svfiprintf_r+0x110>
 80099fe:	eba0 0308 	sub.w	r3, r0, r8
 8009a02:	fa09 f303 	lsl.w	r3, r9, r3
 8009a06:	4313      	orrs	r3, r2
 8009a08:	46a2      	mov	sl, r4
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	e7d2      	b.n	80099b4 <_svfiprintf_r+0x9c>
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	1d19      	adds	r1, r3, #4
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	9103      	str	r1, [sp, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfbb      	ittet	lt
 8009a1a:	425b      	neglt	r3, r3
 8009a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a20:	9307      	strge	r3, [sp, #28]
 8009a22:	9307      	strlt	r3, [sp, #28]
 8009a24:	bfb8      	it	lt
 8009a26:	9204      	strlt	r2, [sp, #16]
 8009a28:	7823      	ldrb	r3, [r4, #0]
 8009a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a2c:	d10c      	bne.n	8009a48 <_svfiprintf_r+0x130>
 8009a2e:	7863      	ldrb	r3, [r4, #1]
 8009a30:	2b2a      	cmp	r3, #42	; 0x2a
 8009a32:	d134      	bne.n	8009a9e <_svfiprintf_r+0x186>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	3402      	adds	r4, #2
 8009a38:	1d1a      	adds	r2, r3, #4
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	9203      	str	r2, [sp, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	bfb8      	it	lt
 8009a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a46:	9305      	str	r3, [sp, #20]
 8009a48:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009b04 <_svfiprintf_r+0x1ec>
 8009a4c:	2203      	movs	r2, #3
 8009a4e:	4650      	mov	r0, sl
 8009a50:	7821      	ldrb	r1, [r4, #0]
 8009a52:	f7fd fc40 	bl	80072d6 <memchr>
 8009a56:	b138      	cbz	r0, 8009a68 <_svfiprintf_r+0x150>
 8009a58:	2240      	movs	r2, #64	; 0x40
 8009a5a:	9b04      	ldr	r3, [sp, #16]
 8009a5c:	eba0 000a 	sub.w	r0, r0, sl
 8009a60:	4082      	lsls	r2, r0
 8009a62:	4313      	orrs	r3, r2
 8009a64:	3401      	adds	r4, #1
 8009a66:	9304      	str	r3, [sp, #16]
 8009a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a6c:	2206      	movs	r2, #6
 8009a6e:	4826      	ldr	r0, [pc, #152]	; (8009b08 <_svfiprintf_r+0x1f0>)
 8009a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a74:	f7fd fc2f 	bl	80072d6 <memchr>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d038      	beq.n	8009aee <_svfiprintf_r+0x1d6>
 8009a7c:	4b23      	ldr	r3, [pc, #140]	; (8009b0c <_svfiprintf_r+0x1f4>)
 8009a7e:	bb1b      	cbnz	r3, 8009ac8 <_svfiprintf_r+0x1b0>
 8009a80:	9b03      	ldr	r3, [sp, #12]
 8009a82:	3307      	adds	r3, #7
 8009a84:	f023 0307 	bic.w	r3, r3, #7
 8009a88:	3308      	adds	r3, #8
 8009a8a:	9303      	str	r3, [sp, #12]
 8009a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a8e:	4433      	add	r3, r6
 8009a90:	9309      	str	r3, [sp, #36]	; 0x24
 8009a92:	e768      	b.n	8009966 <_svfiprintf_r+0x4e>
 8009a94:	460c      	mov	r4, r1
 8009a96:	2001      	movs	r0, #1
 8009a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a9c:	e7a6      	b.n	80099ec <_svfiprintf_r+0xd4>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f04f 0c0a 	mov.w	ip, #10
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	3401      	adds	r4, #1
 8009aa8:	9305      	str	r3, [sp, #20]
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ab0:	3a30      	subs	r2, #48	; 0x30
 8009ab2:	2a09      	cmp	r2, #9
 8009ab4:	d903      	bls.n	8009abe <_svfiprintf_r+0x1a6>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d0c6      	beq.n	8009a48 <_svfiprintf_r+0x130>
 8009aba:	9105      	str	r1, [sp, #20]
 8009abc:	e7c4      	b.n	8009a48 <_svfiprintf_r+0x130>
 8009abe:	4604      	mov	r4, r0
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ac6:	e7f0      	b.n	8009aaa <_svfiprintf_r+0x192>
 8009ac8:	ab03      	add	r3, sp, #12
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	462a      	mov	r2, r5
 8009ace:	4638      	mov	r0, r7
 8009ad0:	4b0f      	ldr	r3, [pc, #60]	; (8009b10 <_svfiprintf_r+0x1f8>)
 8009ad2:	a904      	add	r1, sp, #16
 8009ad4:	f7fc fbee 	bl	80062b4 <_printf_float>
 8009ad8:	1c42      	adds	r2, r0, #1
 8009ada:	4606      	mov	r6, r0
 8009adc:	d1d6      	bne.n	8009a8c <_svfiprintf_r+0x174>
 8009ade:	89ab      	ldrh	r3, [r5, #12]
 8009ae0:	065b      	lsls	r3, r3, #25
 8009ae2:	f53f af2d 	bmi.w	8009940 <_svfiprintf_r+0x28>
 8009ae6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ae8:	b01d      	add	sp, #116	; 0x74
 8009aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aee:	ab03      	add	r3, sp, #12
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	462a      	mov	r2, r5
 8009af4:	4638      	mov	r0, r7
 8009af6:	4b06      	ldr	r3, [pc, #24]	; (8009b10 <_svfiprintf_r+0x1f8>)
 8009af8:	a904      	add	r1, sp, #16
 8009afa:	f7fc fe7b 	bl	80067f4 <_printf_i>
 8009afe:	e7eb      	b.n	8009ad8 <_svfiprintf_r+0x1c0>
 8009b00:	0800c9b1 	.word	0x0800c9b1
 8009b04:	0800c9b7 	.word	0x0800c9b7
 8009b08:	0800c9bb 	.word	0x0800c9bb
 8009b0c:	080062b5 	.word	0x080062b5
 8009b10:	08009865 	.word	0x08009865

08009b14 <__sfputc_r>:
 8009b14:	6893      	ldr	r3, [r2, #8]
 8009b16:	b410      	push	{r4}
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	6093      	str	r3, [r2, #8]
 8009b1e:	da07      	bge.n	8009b30 <__sfputc_r+0x1c>
 8009b20:	6994      	ldr	r4, [r2, #24]
 8009b22:	42a3      	cmp	r3, r4
 8009b24:	db01      	blt.n	8009b2a <__sfputc_r+0x16>
 8009b26:	290a      	cmp	r1, #10
 8009b28:	d102      	bne.n	8009b30 <__sfputc_r+0x1c>
 8009b2a:	bc10      	pop	{r4}
 8009b2c:	f000 b9de 	b.w	8009eec <__swbuf_r>
 8009b30:	6813      	ldr	r3, [r2, #0]
 8009b32:	1c58      	adds	r0, r3, #1
 8009b34:	6010      	str	r0, [r2, #0]
 8009b36:	7019      	strb	r1, [r3, #0]
 8009b38:	4608      	mov	r0, r1
 8009b3a:	bc10      	pop	{r4}
 8009b3c:	4770      	bx	lr

08009b3e <__sfputs_r>:
 8009b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b40:	4606      	mov	r6, r0
 8009b42:	460f      	mov	r7, r1
 8009b44:	4614      	mov	r4, r2
 8009b46:	18d5      	adds	r5, r2, r3
 8009b48:	42ac      	cmp	r4, r5
 8009b4a:	d101      	bne.n	8009b50 <__sfputs_r+0x12>
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	e007      	b.n	8009b60 <__sfputs_r+0x22>
 8009b50:	463a      	mov	r2, r7
 8009b52:	4630      	mov	r0, r6
 8009b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b58:	f7ff ffdc 	bl	8009b14 <__sfputc_r>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d1f3      	bne.n	8009b48 <__sfputs_r+0xa>
 8009b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b64 <_vfiprintf_r>:
 8009b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b68:	460d      	mov	r5, r1
 8009b6a:	4614      	mov	r4, r2
 8009b6c:	4698      	mov	r8, r3
 8009b6e:	4606      	mov	r6, r0
 8009b70:	b09d      	sub	sp, #116	; 0x74
 8009b72:	b118      	cbz	r0, 8009b7c <_vfiprintf_r+0x18>
 8009b74:	6a03      	ldr	r3, [r0, #32]
 8009b76:	b90b      	cbnz	r3, 8009b7c <_vfiprintf_r+0x18>
 8009b78:	f7fd f9f8 	bl	8006f6c <__sinit>
 8009b7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b7e:	07d9      	lsls	r1, r3, #31
 8009b80:	d405      	bmi.n	8009b8e <_vfiprintf_r+0x2a>
 8009b82:	89ab      	ldrh	r3, [r5, #12]
 8009b84:	059a      	lsls	r2, r3, #22
 8009b86:	d402      	bmi.n	8009b8e <_vfiprintf_r+0x2a>
 8009b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b8a:	f7fd fba2 	bl	80072d2 <__retarget_lock_acquire_recursive>
 8009b8e:	89ab      	ldrh	r3, [r5, #12]
 8009b90:	071b      	lsls	r3, r3, #28
 8009b92:	d501      	bpl.n	8009b98 <_vfiprintf_r+0x34>
 8009b94:	692b      	ldr	r3, [r5, #16]
 8009b96:	b99b      	cbnz	r3, 8009bc0 <_vfiprintf_r+0x5c>
 8009b98:	4629      	mov	r1, r5
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f000 f9e4 	bl	8009f68 <__swsetup_r>
 8009ba0:	b170      	cbz	r0, 8009bc0 <_vfiprintf_r+0x5c>
 8009ba2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ba4:	07dc      	lsls	r4, r3, #31
 8009ba6:	d504      	bpl.n	8009bb2 <_vfiprintf_r+0x4e>
 8009ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bac:	b01d      	add	sp, #116	; 0x74
 8009bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb2:	89ab      	ldrh	r3, [r5, #12]
 8009bb4:	0598      	lsls	r0, r3, #22
 8009bb6:	d4f7      	bmi.n	8009ba8 <_vfiprintf_r+0x44>
 8009bb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bba:	f7fd fb8b 	bl	80072d4 <__retarget_lock_release_recursive>
 8009bbe:	e7f3      	b.n	8009ba8 <_vfiprintf_r+0x44>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc4:	2320      	movs	r3, #32
 8009bc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bca:	2330      	movs	r3, #48	; 0x30
 8009bcc:	f04f 0901 	mov.w	r9, #1
 8009bd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009d84 <_vfiprintf_r+0x220>
 8009bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bdc:	4623      	mov	r3, r4
 8009bde:	469a      	mov	sl, r3
 8009be0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009be4:	b10a      	cbz	r2, 8009bea <_vfiprintf_r+0x86>
 8009be6:	2a25      	cmp	r2, #37	; 0x25
 8009be8:	d1f9      	bne.n	8009bde <_vfiprintf_r+0x7a>
 8009bea:	ebba 0b04 	subs.w	fp, sl, r4
 8009bee:	d00b      	beq.n	8009c08 <_vfiprintf_r+0xa4>
 8009bf0:	465b      	mov	r3, fp
 8009bf2:	4622      	mov	r2, r4
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f7ff ffa1 	bl	8009b3e <__sfputs_r>
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	f000 80a9 	beq.w	8009d54 <_vfiprintf_r+0x1f0>
 8009c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c04:	445a      	add	r2, fp
 8009c06:	9209      	str	r2, [sp, #36]	; 0x24
 8009c08:	f89a 3000 	ldrb.w	r3, [sl]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 80a1 	beq.w	8009d54 <_vfiprintf_r+0x1f0>
 8009c12:	2300      	movs	r3, #0
 8009c14:	f04f 32ff 	mov.w	r2, #4294967295
 8009c18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c1c:	f10a 0a01 	add.w	sl, sl, #1
 8009c20:	9304      	str	r3, [sp, #16]
 8009c22:	9307      	str	r3, [sp, #28]
 8009c24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c28:	931a      	str	r3, [sp, #104]	; 0x68
 8009c2a:	4654      	mov	r4, sl
 8009c2c:	2205      	movs	r2, #5
 8009c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c32:	4854      	ldr	r0, [pc, #336]	; (8009d84 <_vfiprintf_r+0x220>)
 8009c34:	f7fd fb4f 	bl	80072d6 <memchr>
 8009c38:	9a04      	ldr	r2, [sp, #16]
 8009c3a:	b9d8      	cbnz	r0, 8009c74 <_vfiprintf_r+0x110>
 8009c3c:	06d1      	lsls	r1, r2, #27
 8009c3e:	bf44      	itt	mi
 8009c40:	2320      	movmi	r3, #32
 8009c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c46:	0713      	lsls	r3, r2, #28
 8009c48:	bf44      	itt	mi
 8009c4a:	232b      	movmi	r3, #43	; 0x2b
 8009c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c50:	f89a 3000 	ldrb.w	r3, [sl]
 8009c54:	2b2a      	cmp	r3, #42	; 0x2a
 8009c56:	d015      	beq.n	8009c84 <_vfiprintf_r+0x120>
 8009c58:	4654      	mov	r4, sl
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	f04f 0c0a 	mov.w	ip, #10
 8009c60:	9a07      	ldr	r2, [sp, #28]
 8009c62:	4621      	mov	r1, r4
 8009c64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c68:	3b30      	subs	r3, #48	; 0x30
 8009c6a:	2b09      	cmp	r3, #9
 8009c6c:	d94d      	bls.n	8009d0a <_vfiprintf_r+0x1a6>
 8009c6e:	b1b0      	cbz	r0, 8009c9e <_vfiprintf_r+0x13a>
 8009c70:	9207      	str	r2, [sp, #28]
 8009c72:	e014      	b.n	8009c9e <_vfiprintf_r+0x13a>
 8009c74:	eba0 0308 	sub.w	r3, r0, r8
 8009c78:	fa09 f303 	lsl.w	r3, r9, r3
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	46a2      	mov	sl, r4
 8009c80:	9304      	str	r3, [sp, #16]
 8009c82:	e7d2      	b.n	8009c2a <_vfiprintf_r+0xc6>
 8009c84:	9b03      	ldr	r3, [sp, #12]
 8009c86:	1d19      	adds	r1, r3, #4
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	9103      	str	r1, [sp, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	bfbb      	ittet	lt
 8009c90:	425b      	neglt	r3, r3
 8009c92:	f042 0202 	orrlt.w	r2, r2, #2
 8009c96:	9307      	strge	r3, [sp, #28]
 8009c98:	9307      	strlt	r3, [sp, #28]
 8009c9a:	bfb8      	it	lt
 8009c9c:	9204      	strlt	r2, [sp, #16]
 8009c9e:	7823      	ldrb	r3, [r4, #0]
 8009ca0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ca2:	d10c      	bne.n	8009cbe <_vfiprintf_r+0x15a>
 8009ca4:	7863      	ldrb	r3, [r4, #1]
 8009ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ca8:	d134      	bne.n	8009d14 <_vfiprintf_r+0x1b0>
 8009caa:	9b03      	ldr	r3, [sp, #12]
 8009cac:	3402      	adds	r4, #2
 8009cae:	1d1a      	adds	r2, r3, #4
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	9203      	str	r2, [sp, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	bfb8      	it	lt
 8009cb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cbc:	9305      	str	r3, [sp, #20]
 8009cbe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d88 <_vfiprintf_r+0x224>
 8009cc2:	2203      	movs	r2, #3
 8009cc4:	4650      	mov	r0, sl
 8009cc6:	7821      	ldrb	r1, [r4, #0]
 8009cc8:	f7fd fb05 	bl	80072d6 <memchr>
 8009ccc:	b138      	cbz	r0, 8009cde <_vfiprintf_r+0x17a>
 8009cce:	2240      	movs	r2, #64	; 0x40
 8009cd0:	9b04      	ldr	r3, [sp, #16]
 8009cd2:	eba0 000a 	sub.w	r0, r0, sl
 8009cd6:	4082      	lsls	r2, r0
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	3401      	adds	r4, #1
 8009cdc:	9304      	str	r3, [sp, #16]
 8009cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce2:	2206      	movs	r2, #6
 8009ce4:	4829      	ldr	r0, [pc, #164]	; (8009d8c <_vfiprintf_r+0x228>)
 8009ce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cea:	f7fd faf4 	bl	80072d6 <memchr>
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d03f      	beq.n	8009d72 <_vfiprintf_r+0x20e>
 8009cf2:	4b27      	ldr	r3, [pc, #156]	; (8009d90 <_vfiprintf_r+0x22c>)
 8009cf4:	bb1b      	cbnz	r3, 8009d3e <_vfiprintf_r+0x1da>
 8009cf6:	9b03      	ldr	r3, [sp, #12]
 8009cf8:	3307      	adds	r3, #7
 8009cfa:	f023 0307 	bic.w	r3, r3, #7
 8009cfe:	3308      	adds	r3, #8
 8009d00:	9303      	str	r3, [sp, #12]
 8009d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d04:	443b      	add	r3, r7
 8009d06:	9309      	str	r3, [sp, #36]	; 0x24
 8009d08:	e768      	b.n	8009bdc <_vfiprintf_r+0x78>
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	2001      	movs	r0, #1
 8009d0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d12:	e7a6      	b.n	8009c62 <_vfiprintf_r+0xfe>
 8009d14:	2300      	movs	r3, #0
 8009d16:	f04f 0c0a 	mov.w	ip, #10
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	3401      	adds	r4, #1
 8009d1e:	9305      	str	r3, [sp, #20]
 8009d20:	4620      	mov	r0, r4
 8009d22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d26:	3a30      	subs	r2, #48	; 0x30
 8009d28:	2a09      	cmp	r2, #9
 8009d2a:	d903      	bls.n	8009d34 <_vfiprintf_r+0x1d0>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0c6      	beq.n	8009cbe <_vfiprintf_r+0x15a>
 8009d30:	9105      	str	r1, [sp, #20]
 8009d32:	e7c4      	b.n	8009cbe <_vfiprintf_r+0x15a>
 8009d34:	4604      	mov	r4, r0
 8009d36:	2301      	movs	r3, #1
 8009d38:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d3c:	e7f0      	b.n	8009d20 <_vfiprintf_r+0x1bc>
 8009d3e:	ab03      	add	r3, sp, #12
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	462a      	mov	r2, r5
 8009d44:	4630      	mov	r0, r6
 8009d46:	4b13      	ldr	r3, [pc, #76]	; (8009d94 <_vfiprintf_r+0x230>)
 8009d48:	a904      	add	r1, sp, #16
 8009d4a:	f7fc fab3 	bl	80062b4 <_printf_float>
 8009d4e:	4607      	mov	r7, r0
 8009d50:	1c78      	adds	r0, r7, #1
 8009d52:	d1d6      	bne.n	8009d02 <_vfiprintf_r+0x19e>
 8009d54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d56:	07d9      	lsls	r1, r3, #31
 8009d58:	d405      	bmi.n	8009d66 <_vfiprintf_r+0x202>
 8009d5a:	89ab      	ldrh	r3, [r5, #12]
 8009d5c:	059a      	lsls	r2, r3, #22
 8009d5e:	d402      	bmi.n	8009d66 <_vfiprintf_r+0x202>
 8009d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d62:	f7fd fab7 	bl	80072d4 <__retarget_lock_release_recursive>
 8009d66:	89ab      	ldrh	r3, [r5, #12]
 8009d68:	065b      	lsls	r3, r3, #25
 8009d6a:	f53f af1d 	bmi.w	8009ba8 <_vfiprintf_r+0x44>
 8009d6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d70:	e71c      	b.n	8009bac <_vfiprintf_r+0x48>
 8009d72:	ab03      	add	r3, sp, #12
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	462a      	mov	r2, r5
 8009d78:	4630      	mov	r0, r6
 8009d7a:	4b06      	ldr	r3, [pc, #24]	; (8009d94 <_vfiprintf_r+0x230>)
 8009d7c:	a904      	add	r1, sp, #16
 8009d7e:	f7fc fd39 	bl	80067f4 <_printf_i>
 8009d82:	e7e4      	b.n	8009d4e <_vfiprintf_r+0x1ea>
 8009d84:	0800c9b1 	.word	0x0800c9b1
 8009d88:	0800c9b7 	.word	0x0800c9b7
 8009d8c:	0800c9bb 	.word	0x0800c9bb
 8009d90:	080062b5 	.word	0x080062b5
 8009d94:	08009b3f 	.word	0x08009b3f

08009d98 <__sflush_r>:
 8009d98:	898a      	ldrh	r2, [r1, #12]
 8009d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	0710      	lsls	r0, r2, #28
 8009da0:	460c      	mov	r4, r1
 8009da2:	d457      	bmi.n	8009e54 <__sflush_r+0xbc>
 8009da4:	684b      	ldr	r3, [r1, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	dc04      	bgt.n	8009db4 <__sflush_r+0x1c>
 8009daa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	dc01      	bgt.n	8009db4 <__sflush_r+0x1c>
 8009db0:	2000      	movs	r0, #0
 8009db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009db6:	2e00      	cmp	r6, #0
 8009db8:	d0fa      	beq.n	8009db0 <__sflush_r+0x18>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009dc0:	682f      	ldr	r7, [r5, #0]
 8009dc2:	6a21      	ldr	r1, [r4, #32]
 8009dc4:	602b      	str	r3, [r5, #0]
 8009dc6:	d032      	beq.n	8009e2e <__sflush_r+0x96>
 8009dc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	075a      	lsls	r2, r3, #29
 8009dce:	d505      	bpl.n	8009ddc <__sflush_r+0x44>
 8009dd0:	6863      	ldr	r3, [r4, #4]
 8009dd2:	1ac0      	subs	r0, r0, r3
 8009dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dd6:	b10b      	cbz	r3, 8009ddc <__sflush_r+0x44>
 8009dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dda:	1ac0      	subs	r0, r0, r3
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4602      	mov	r2, r0
 8009de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009de2:	4628      	mov	r0, r5
 8009de4:	6a21      	ldr	r1, [r4, #32]
 8009de6:	47b0      	blx	r6
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	d106      	bne.n	8009dfc <__sflush_r+0x64>
 8009dee:	6829      	ldr	r1, [r5, #0]
 8009df0:	291d      	cmp	r1, #29
 8009df2:	d82b      	bhi.n	8009e4c <__sflush_r+0xb4>
 8009df4:	4a28      	ldr	r2, [pc, #160]	; (8009e98 <__sflush_r+0x100>)
 8009df6:	410a      	asrs	r2, r1
 8009df8:	07d6      	lsls	r6, r2, #31
 8009dfa:	d427      	bmi.n	8009e4c <__sflush_r+0xb4>
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	6062      	str	r2, [r4, #4]
 8009e00:	6922      	ldr	r2, [r4, #16]
 8009e02:	04d9      	lsls	r1, r3, #19
 8009e04:	6022      	str	r2, [r4, #0]
 8009e06:	d504      	bpl.n	8009e12 <__sflush_r+0x7a>
 8009e08:	1c42      	adds	r2, r0, #1
 8009e0a:	d101      	bne.n	8009e10 <__sflush_r+0x78>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b903      	cbnz	r3, 8009e12 <__sflush_r+0x7a>
 8009e10:	6560      	str	r0, [r4, #84]	; 0x54
 8009e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e14:	602f      	str	r7, [r5, #0]
 8009e16:	2900      	cmp	r1, #0
 8009e18:	d0ca      	beq.n	8009db0 <__sflush_r+0x18>
 8009e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e1e:	4299      	cmp	r1, r3
 8009e20:	d002      	beq.n	8009e28 <__sflush_r+0x90>
 8009e22:	4628      	mov	r0, r5
 8009e24:	f7fe f8e8 	bl	8007ff8 <_free_r>
 8009e28:	2000      	movs	r0, #0
 8009e2a:	6360      	str	r0, [r4, #52]	; 0x34
 8009e2c:	e7c1      	b.n	8009db2 <__sflush_r+0x1a>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	4628      	mov	r0, r5
 8009e32:	47b0      	blx	r6
 8009e34:	1c41      	adds	r1, r0, #1
 8009e36:	d1c8      	bne.n	8009dca <__sflush_r+0x32>
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d0c5      	beq.n	8009dca <__sflush_r+0x32>
 8009e3e:	2b1d      	cmp	r3, #29
 8009e40:	d001      	beq.n	8009e46 <__sflush_r+0xae>
 8009e42:	2b16      	cmp	r3, #22
 8009e44:	d101      	bne.n	8009e4a <__sflush_r+0xb2>
 8009e46:	602f      	str	r7, [r5, #0]
 8009e48:	e7b2      	b.n	8009db0 <__sflush_r+0x18>
 8009e4a:	89a3      	ldrh	r3, [r4, #12]
 8009e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e50:	81a3      	strh	r3, [r4, #12]
 8009e52:	e7ae      	b.n	8009db2 <__sflush_r+0x1a>
 8009e54:	690f      	ldr	r7, [r1, #16]
 8009e56:	2f00      	cmp	r7, #0
 8009e58:	d0aa      	beq.n	8009db0 <__sflush_r+0x18>
 8009e5a:	0793      	lsls	r3, r2, #30
 8009e5c:	bf18      	it	ne
 8009e5e:	2300      	movne	r3, #0
 8009e60:	680e      	ldr	r6, [r1, #0]
 8009e62:	bf08      	it	eq
 8009e64:	694b      	ldreq	r3, [r1, #20]
 8009e66:	1bf6      	subs	r6, r6, r7
 8009e68:	600f      	str	r7, [r1, #0]
 8009e6a:	608b      	str	r3, [r1, #8]
 8009e6c:	2e00      	cmp	r6, #0
 8009e6e:	dd9f      	ble.n	8009db0 <__sflush_r+0x18>
 8009e70:	4633      	mov	r3, r6
 8009e72:	463a      	mov	r2, r7
 8009e74:	4628      	mov	r0, r5
 8009e76:	6a21      	ldr	r1, [r4, #32]
 8009e78:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009e7c:	47e0      	blx	ip
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	dc06      	bgt.n	8009e90 <__sflush_r+0xf8>
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295
 8009e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e8c:	81a3      	strh	r3, [r4, #12]
 8009e8e:	e790      	b.n	8009db2 <__sflush_r+0x1a>
 8009e90:	4407      	add	r7, r0
 8009e92:	1a36      	subs	r6, r6, r0
 8009e94:	e7ea      	b.n	8009e6c <__sflush_r+0xd4>
 8009e96:	bf00      	nop
 8009e98:	dfbffffe 	.word	0xdfbffffe

08009e9c <_fflush_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	690b      	ldr	r3, [r1, #16]
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	b913      	cbnz	r3, 8009eac <_fflush_r+0x10>
 8009ea6:	2500      	movs	r5, #0
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	b118      	cbz	r0, 8009eb6 <_fflush_r+0x1a>
 8009eae:	6a03      	ldr	r3, [r0, #32]
 8009eb0:	b90b      	cbnz	r3, 8009eb6 <_fflush_r+0x1a>
 8009eb2:	f7fd f85b 	bl	8006f6c <__sinit>
 8009eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d0f3      	beq.n	8009ea6 <_fflush_r+0xa>
 8009ebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ec0:	07d0      	lsls	r0, r2, #31
 8009ec2:	d404      	bmi.n	8009ece <_fflush_r+0x32>
 8009ec4:	0599      	lsls	r1, r3, #22
 8009ec6:	d402      	bmi.n	8009ece <_fflush_r+0x32>
 8009ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eca:	f7fd fa02 	bl	80072d2 <__retarget_lock_acquire_recursive>
 8009ece:	4628      	mov	r0, r5
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	f7ff ff61 	bl	8009d98 <__sflush_r>
 8009ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ed8:	4605      	mov	r5, r0
 8009eda:	07da      	lsls	r2, r3, #31
 8009edc:	d4e4      	bmi.n	8009ea8 <_fflush_r+0xc>
 8009ede:	89a3      	ldrh	r3, [r4, #12]
 8009ee0:	059b      	lsls	r3, r3, #22
 8009ee2:	d4e1      	bmi.n	8009ea8 <_fflush_r+0xc>
 8009ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ee6:	f7fd f9f5 	bl	80072d4 <__retarget_lock_release_recursive>
 8009eea:	e7dd      	b.n	8009ea8 <_fflush_r+0xc>

08009eec <__swbuf_r>:
 8009eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eee:	460e      	mov	r6, r1
 8009ef0:	4614      	mov	r4, r2
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	b118      	cbz	r0, 8009efe <__swbuf_r+0x12>
 8009ef6:	6a03      	ldr	r3, [r0, #32]
 8009ef8:	b90b      	cbnz	r3, 8009efe <__swbuf_r+0x12>
 8009efa:	f7fd f837 	bl	8006f6c <__sinit>
 8009efe:	69a3      	ldr	r3, [r4, #24]
 8009f00:	60a3      	str	r3, [r4, #8]
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	071a      	lsls	r2, r3, #28
 8009f06:	d525      	bpl.n	8009f54 <__swbuf_r+0x68>
 8009f08:	6923      	ldr	r3, [r4, #16]
 8009f0a:	b31b      	cbz	r3, 8009f54 <__swbuf_r+0x68>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	6922      	ldr	r2, [r4, #16]
 8009f10:	b2f6      	uxtb	r6, r6
 8009f12:	1a98      	subs	r0, r3, r2
 8009f14:	6963      	ldr	r3, [r4, #20]
 8009f16:	4637      	mov	r7, r6
 8009f18:	4283      	cmp	r3, r0
 8009f1a:	dc04      	bgt.n	8009f26 <__swbuf_r+0x3a>
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	4628      	mov	r0, r5
 8009f20:	f7ff ffbc 	bl	8009e9c <_fflush_r>
 8009f24:	b9e0      	cbnz	r0, 8009f60 <__swbuf_r+0x74>
 8009f26:	68a3      	ldr	r3, [r4, #8]
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	60a3      	str	r3, [r4, #8]
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	1c5a      	adds	r2, r3, #1
 8009f30:	6022      	str	r2, [r4, #0]
 8009f32:	701e      	strb	r6, [r3, #0]
 8009f34:	6962      	ldr	r2, [r4, #20]
 8009f36:	1c43      	adds	r3, r0, #1
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d004      	beq.n	8009f46 <__swbuf_r+0x5a>
 8009f3c:	89a3      	ldrh	r3, [r4, #12]
 8009f3e:	07db      	lsls	r3, r3, #31
 8009f40:	d506      	bpl.n	8009f50 <__swbuf_r+0x64>
 8009f42:	2e0a      	cmp	r6, #10
 8009f44:	d104      	bne.n	8009f50 <__swbuf_r+0x64>
 8009f46:	4621      	mov	r1, r4
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f7ff ffa7 	bl	8009e9c <_fflush_r>
 8009f4e:	b938      	cbnz	r0, 8009f60 <__swbuf_r+0x74>
 8009f50:	4638      	mov	r0, r7
 8009f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f54:	4621      	mov	r1, r4
 8009f56:	4628      	mov	r0, r5
 8009f58:	f000 f806 	bl	8009f68 <__swsetup_r>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d0d5      	beq.n	8009f0c <__swbuf_r+0x20>
 8009f60:	f04f 37ff 	mov.w	r7, #4294967295
 8009f64:	e7f4      	b.n	8009f50 <__swbuf_r+0x64>
	...

08009f68 <__swsetup_r>:
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4b2a      	ldr	r3, [pc, #168]	; (800a014 <__swsetup_r+0xac>)
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	6818      	ldr	r0, [r3, #0]
 8009f70:	460c      	mov	r4, r1
 8009f72:	b118      	cbz	r0, 8009f7c <__swsetup_r+0x14>
 8009f74:	6a03      	ldr	r3, [r0, #32]
 8009f76:	b90b      	cbnz	r3, 8009f7c <__swsetup_r+0x14>
 8009f78:	f7fc fff8 	bl	8006f6c <__sinit>
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f82:	0718      	lsls	r0, r3, #28
 8009f84:	d422      	bmi.n	8009fcc <__swsetup_r+0x64>
 8009f86:	06d9      	lsls	r1, r3, #27
 8009f88:	d407      	bmi.n	8009f9a <__swsetup_r+0x32>
 8009f8a:	2309      	movs	r3, #9
 8009f8c:	602b      	str	r3, [r5, #0]
 8009f8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f92:	f04f 30ff 	mov.w	r0, #4294967295
 8009f96:	81a3      	strh	r3, [r4, #12]
 8009f98:	e034      	b.n	800a004 <__swsetup_r+0x9c>
 8009f9a:	0758      	lsls	r0, r3, #29
 8009f9c:	d512      	bpl.n	8009fc4 <__swsetup_r+0x5c>
 8009f9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fa0:	b141      	cbz	r1, 8009fb4 <__swsetup_r+0x4c>
 8009fa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fa6:	4299      	cmp	r1, r3
 8009fa8:	d002      	beq.n	8009fb0 <__swsetup_r+0x48>
 8009faa:	4628      	mov	r0, r5
 8009fac:	f7fe f824 	bl	8007ff8 <_free_r>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	6363      	str	r3, [r4, #52]	; 0x34
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fba:	81a3      	strh	r3, [r4, #12]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	6063      	str	r3, [r4, #4]
 8009fc0:	6923      	ldr	r3, [r4, #16]
 8009fc2:	6023      	str	r3, [r4, #0]
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	f043 0308 	orr.w	r3, r3, #8
 8009fca:	81a3      	strh	r3, [r4, #12]
 8009fcc:	6923      	ldr	r3, [r4, #16]
 8009fce:	b94b      	cbnz	r3, 8009fe4 <__swsetup_r+0x7c>
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fda:	d003      	beq.n	8009fe4 <__swsetup_r+0x7c>
 8009fdc:	4621      	mov	r1, r4
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f000 fc6d 	bl	800a8be <__smakebuf_r>
 8009fe4:	89a0      	ldrh	r0, [r4, #12]
 8009fe6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fea:	f010 0301 	ands.w	r3, r0, #1
 8009fee:	d00a      	beq.n	800a006 <__swsetup_r+0x9e>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60a3      	str	r3, [r4, #8]
 8009ff4:	6963      	ldr	r3, [r4, #20]
 8009ff6:	425b      	negs	r3, r3
 8009ff8:	61a3      	str	r3, [r4, #24]
 8009ffa:	6923      	ldr	r3, [r4, #16]
 8009ffc:	b943      	cbnz	r3, 800a010 <__swsetup_r+0xa8>
 8009ffe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a002:	d1c4      	bne.n	8009f8e <__swsetup_r+0x26>
 800a004:	bd38      	pop	{r3, r4, r5, pc}
 800a006:	0781      	lsls	r1, r0, #30
 800a008:	bf58      	it	pl
 800a00a:	6963      	ldrpl	r3, [r4, #20]
 800a00c:	60a3      	str	r3, [r4, #8]
 800a00e:	e7f4      	b.n	8009ffa <__swsetup_r+0x92>
 800a010:	2000      	movs	r0, #0
 800a012:	e7f7      	b.n	800a004 <__swsetup_r+0x9c>
 800a014:	20000084 	.word	0x20000084

0800a018 <memmove>:
 800a018:	4288      	cmp	r0, r1
 800a01a:	b510      	push	{r4, lr}
 800a01c:	eb01 0402 	add.w	r4, r1, r2
 800a020:	d902      	bls.n	800a028 <memmove+0x10>
 800a022:	4284      	cmp	r4, r0
 800a024:	4623      	mov	r3, r4
 800a026:	d807      	bhi.n	800a038 <memmove+0x20>
 800a028:	1e43      	subs	r3, r0, #1
 800a02a:	42a1      	cmp	r1, r4
 800a02c:	d008      	beq.n	800a040 <memmove+0x28>
 800a02e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a032:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a036:	e7f8      	b.n	800a02a <memmove+0x12>
 800a038:	4601      	mov	r1, r0
 800a03a:	4402      	add	r2, r0
 800a03c:	428a      	cmp	r2, r1
 800a03e:	d100      	bne.n	800a042 <memmove+0x2a>
 800a040:	bd10      	pop	{r4, pc}
 800a042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a04a:	e7f7      	b.n	800a03c <memmove+0x24>

0800a04c <strncmp>:
 800a04c:	b510      	push	{r4, lr}
 800a04e:	b16a      	cbz	r2, 800a06c <strncmp+0x20>
 800a050:	3901      	subs	r1, #1
 800a052:	1884      	adds	r4, r0, r2
 800a054:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a058:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d103      	bne.n	800a068 <strncmp+0x1c>
 800a060:	42a0      	cmp	r0, r4
 800a062:	d001      	beq.n	800a068 <strncmp+0x1c>
 800a064:	2a00      	cmp	r2, #0
 800a066:	d1f5      	bne.n	800a054 <strncmp+0x8>
 800a068:	1ad0      	subs	r0, r2, r3
 800a06a:	bd10      	pop	{r4, pc}
 800a06c:	4610      	mov	r0, r2
 800a06e:	e7fc      	b.n	800a06a <strncmp+0x1e>

0800a070 <_sbrk_r>:
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	2300      	movs	r3, #0
 800a074:	4d05      	ldr	r5, [pc, #20]	; (800a08c <_sbrk_r+0x1c>)
 800a076:	4604      	mov	r4, r0
 800a078:	4608      	mov	r0, r1
 800a07a:	602b      	str	r3, [r5, #0]
 800a07c:	f7fa f9d6 	bl	800442c <_sbrk>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	d102      	bne.n	800a08a <_sbrk_r+0x1a>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	b103      	cbz	r3, 800a08a <_sbrk_r+0x1a>
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	bd38      	pop	{r3, r4, r5, pc}
 800a08c:	20001844 	.word	0x20001844

0800a090 <nan>:
 800a090:	2000      	movs	r0, #0
 800a092:	4901      	ldr	r1, [pc, #4]	; (800a098 <nan+0x8>)
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	7ff80000 	.word	0x7ff80000

0800a09c <__assert_func>:
 800a09c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a09e:	4614      	mov	r4, r2
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	4b09      	ldr	r3, [pc, #36]	; (800a0c8 <__assert_func+0x2c>)
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68d8      	ldr	r0, [r3, #12]
 800a0aa:	b14c      	cbz	r4, 800a0c0 <__assert_func+0x24>
 800a0ac:	4b07      	ldr	r3, [pc, #28]	; (800a0cc <__assert_func+0x30>)
 800a0ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0b2:	9100      	str	r1, [sp, #0]
 800a0b4:	462b      	mov	r3, r5
 800a0b6:	4906      	ldr	r1, [pc, #24]	; (800a0d0 <__assert_func+0x34>)
 800a0b8:	f000 fbca 	bl	800a850 <fiprintf>
 800a0bc:	f000 fc5e 	bl	800a97c <abort>
 800a0c0:	4b04      	ldr	r3, [pc, #16]	; (800a0d4 <__assert_func+0x38>)
 800a0c2:	461c      	mov	r4, r3
 800a0c4:	e7f3      	b.n	800a0ae <__assert_func+0x12>
 800a0c6:	bf00      	nop
 800a0c8:	20000084 	.word	0x20000084
 800a0cc:	0800c9ca 	.word	0x0800c9ca
 800a0d0:	0800c9d7 	.word	0x0800c9d7
 800a0d4:	0800ca05 	.word	0x0800ca05

0800a0d8 <_calloc_r>:
 800a0d8:	b570      	push	{r4, r5, r6, lr}
 800a0da:	fba1 5402 	umull	r5, r4, r1, r2
 800a0de:	b934      	cbnz	r4, 800a0ee <_calloc_r+0x16>
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	f7fd fff9 	bl	80080d8 <_malloc_r>
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	b928      	cbnz	r0, 800a0f6 <_calloc_r+0x1e>
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	bd70      	pop	{r4, r5, r6, pc}
 800a0ee:	220c      	movs	r2, #12
 800a0f0:	2600      	movs	r6, #0
 800a0f2:	6002      	str	r2, [r0, #0]
 800a0f4:	e7f9      	b.n	800a0ea <_calloc_r+0x12>
 800a0f6:	462a      	mov	r2, r5
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	f7fd f816 	bl	800712a <memset>
 800a0fe:	e7f4      	b.n	800a0ea <_calloc_r+0x12>

0800a100 <rshift>:
 800a100:	6903      	ldr	r3, [r0, #16]
 800a102:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a106:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a10a:	f100 0414 	add.w	r4, r0, #20
 800a10e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a112:	dd46      	ble.n	800a1a2 <rshift+0xa2>
 800a114:	f011 011f 	ands.w	r1, r1, #31
 800a118:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a11c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a120:	d10c      	bne.n	800a13c <rshift+0x3c>
 800a122:	4629      	mov	r1, r5
 800a124:	f100 0710 	add.w	r7, r0, #16
 800a128:	42b1      	cmp	r1, r6
 800a12a:	d335      	bcc.n	800a198 <rshift+0x98>
 800a12c:	1a9b      	subs	r3, r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	1eea      	subs	r2, r5, #3
 800a132:	4296      	cmp	r6, r2
 800a134:	bf38      	it	cc
 800a136:	2300      	movcc	r3, #0
 800a138:	4423      	add	r3, r4
 800a13a:	e015      	b.n	800a168 <rshift+0x68>
 800a13c:	46a1      	mov	r9, r4
 800a13e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a142:	f1c1 0820 	rsb	r8, r1, #32
 800a146:	40cf      	lsrs	r7, r1
 800a148:	f105 0e04 	add.w	lr, r5, #4
 800a14c:	4576      	cmp	r6, lr
 800a14e:	46f4      	mov	ip, lr
 800a150:	d816      	bhi.n	800a180 <rshift+0x80>
 800a152:	1a9a      	subs	r2, r3, r2
 800a154:	0092      	lsls	r2, r2, #2
 800a156:	3a04      	subs	r2, #4
 800a158:	3501      	adds	r5, #1
 800a15a:	42ae      	cmp	r6, r5
 800a15c:	bf38      	it	cc
 800a15e:	2200      	movcc	r2, #0
 800a160:	18a3      	adds	r3, r4, r2
 800a162:	50a7      	str	r7, [r4, r2]
 800a164:	b107      	cbz	r7, 800a168 <rshift+0x68>
 800a166:	3304      	adds	r3, #4
 800a168:	42a3      	cmp	r3, r4
 800a16a:	eba3 0204 	sub.w	r2, r3, r4
 800a16e:	bf08      	it	eq
 800a170:	2300      	moveq	r3, #0
 800a172:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a176:	6102      	str	r2, [r0, #16]
 800a178:	bf08      	it	eq
 800a17a:	6143      	streq	r3, [r0, #20]
 800a17c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a180:	f8dc c000 	ldr.w	ip, [ip]
 800a184:	fa0c fc08 	lsl.w	ip, ip, r8
 800a188:	ea4c 0707 	orr.w	r7, ip, r7
 800a18c:	f849 7b04 	str.w	r7, [r9], #4
 800a190:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a194:	40cf      	lsrs	r7, r1
 800a196:	e7d9      	b.n	800a14c <rshift+0x4c>
 800a198:	f851 cb04 	ldr.w	ip, [r1], #4
 800a19c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a1a0:	e7c2      	b.n	800a128 <rshift+0x28>
 800a1a2:	4623      	mov	r3, r4
 800a1a4:	e7e0      	b.n	800a168 <rshift+0x68>

0800a1a6 <__hexdig_fun>:
 800a1a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a1aa:	2b09      	cmp	r3, #9
 800a1ac:	d802      	bhi.n	800a1b4 <__hexdig_fun+0xe>
 800a1ae:	3820      	subs	r0, #32
 800a1b0:	b2c0      	uxtb	r0, r0
 800a1b2:	4770      	bx	lr
 800a1b4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a1b8:	2b05      	cmp	r3, #5
 800a1ba:	d801      	bhi.n	800a1c0 <__hexdig_fun+0x1a>
 800a1bc:	3847      	subs	r0, #71	; 0x47
 800a1be:	e7f7      	b.n	800a1b0 <__hexdig_fun+0xa>
 800a1c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a1c4:	2b05      	cmp	r3, #5
 800a1c6:	d801      	bhi.n	800a1cc <__hexdig_fun+0x26>
 800a1c8:	3827      	subs	r0, #39	; 0x27
 800a1ca:	e7f1      	b.n	800a1b0 <__hexdig_fun+0xa>
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	4770      	bx	lr

0800a1d0 <__gethex>:
 800a1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d4:	4681      	mov	r9, r0
 800a1d6:	468a      	mov	sl, r1
 800a1d8:	4617      	mov	r7, r2
 800a1da:	680a      	ldr	r2, [r1, #0]
 800a1dc:	b085      	sub	sp, #20
 800a1de:	f102 0b02 	add.w	fp, r2, #2
 800a1e2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a1e6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a1ea:	9302      	str	r3, [sp, #8]
 800a1ec:	32fe      	adds	r2, #254	; 0xfe
 800a1ee:	eb02 030b 	add.w	r3, r2, fp
 800a1f2:	46d8      	mov	r8, fp
 800a1f4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	2830      	cmp	r0, #48	; 0x30
 800a1fc:	d0f7      	beq.n	800a1ee <__gethex+0x1e>
 800a1fe:	f7ff ffd2 	bl	800a1a6 <__hexdig_fun>
 800a202:	4604      	mov	r4, r0
 800a204:	2800      	cmp	r0, #0
 800a206:	d138      	bne.n	800a27a <__gethex+0xaa>
 800a208:	2201      	movs	r2, #1
 800a20a:	4640      	mov	r0, r8
 800a20c:	49a7      	ldr	r1, [pc, #668]	; (800a4ac <__gethex+0x2dc>)
 800a20e:	f7ff ff1d 	bl	800a04c <strncmp>
 800a212:	4606      	mov	r6, r0
 800a214:	2800      	cmp	r0, #0
 800a216:	d169      	bne.n	800a2ec <__gethex+0x11c>
 800a218:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a21c:	465d      	mov	r5, fp
 800a21e:	f7ff ffc2 	bl	800a1a6 <__hexdig_fun>
 800a222:	2800      	cmp	r0, #0
 800a224:	d064      	beq.n	800a2f0 <__gethex+0x120>
 800a226:	465a      	mov	r2, fp
 800a228:	7810      	ldrb	r0, [r2, #0]
 800a22a:	4690      	mov	r8, r2
 800a22c:	2830      	cmp	r0, #48	; 0x30
 800a22e:	f102 0201 	add.w	r2, r2, #1
 800a232:	d0f9      	beq.n	800a228 <__gethex+0x58>
 800a234:	f7ff ffb7 	bl	800a1a6 <__hexdig_fun>
 800a238:	2301      	movs	r3, #1
 800a23a:	fab0 f480 	clz	r4, r0
 800a23e:	465e      	mov	r6, fp
 800a240:	0964      	lsrs	r4, r4, #5
 800a242:	9301      	str	r3, [sp, #4]
 800a244:	4642      	mov	r2, r8
 800a246:	4615      	mov	r5, r2
 800a248:	7828      	ldrb	r0, [r5, #0]
 800a24a:	3201      	adds	r2, #1
 800a24c:	f7ff ffab 	bl	800a1a6 <__hexdig_fun>
 800a250:	2800      	cmp	r0, #0
 800a252:	d1f8      	bne.n	800a246 <__gethex+0x76>
 800a254:	2201      	movs	r2, #1
 800a256:	4628      	mov	r0, r5
 800a258:	4994      	ldr	r1, [pc, #592]	; (800a4ac <__gethex+0x2dc>)
 800a25a:	f7ff fef7 	bl	800a04c <strncmp>
 800a25e:	b978      	cbnz	r0, 800a280 <__gethex+0xb0>
 800a260:	b946      	cbnz	r6, 800a274 <__gethex+0xa4>
 800a262:	1c6e      	adds	r6, r5, #1
 800a264:	4632      	mov	r2, r6
 800a266:	4615      	mov	r5, r2
 800a268:	7828      	ldrb	r0, [r5, #0]
 800a26a:	3201      	adds	r2, #1
 800a26c:	f7ff ff9b 	bl	800a1a6 <__hexdig_fun>
 800a270:	2800      	cmp	r0, #0
 800a272:	d1f8      	bne.n	800a266 <__gethex+0x96>
 800a274:	1b73      	subs	r3, r6, r5
 800a276:	009e      	lsls	r6, r3, #2
 800a278:	e004      	b.n	800a284 <__gethex+0xb4>
 800a27a:	2400      	movs	r4, #0
 800a27c:	4626      	mov	r6, r4
 800a27e:	e7e1      	b.n	800a244 <__gethex+0x74>
 800a280:	2e00      	cmp	r6, #0
 800a282:	d1f7      	bne.n	800a274 <__gethex+0xa4>
 800a284:	782b      	ldrb	r3, [r5, #0]
 800a286:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a28a:	2b50      	cmp	r3, #80	; 0x50
 800a28c:	d13d      	bne.n	800a30a <__gethex+0x13a>
 800a28e:	786b      	ldrb	r3, [r5, #1]
 800a290:	2b2b      	cmp	r3, #43	; 0x2b
 800a292:	d02f      	beq.n	800a2f4 <__gethex+0x124>
 800a294:	2b2d      	cmp	r3, #45	; 0x2d
 800a296:	d031      	beq.n	800a2fc <__gethex+0x12c>
 800a298:	f04f 0b00 	mov.w	fp, #0
 800a29c:	1c69      	adds	r1, r5, #1
 800a29e:	7808      	ldrb	r0, [r1, #0]
 800a2a0:	f7ff ff81 	bl	800a1a6 <__hexdig_fun>
 800a2a4:	1e42      	subs	r2, r0, #1
 800a2a6:	b2d2      	uxtb	r2, r2
 800a2a8:	2a18      	cmp	r2, #24
 800a2aa:	d82e      	bhi.n	800a30a <__gethex+0x13a>
 800a2ac:	f1a0 0210 	sub.w	r2, r0, #16
 800a2b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a2b4:	f7ff ff77 	bl	800a1a6 <__hexdig_fun>
 800a2b8:	f100 3cff 	add.w	ip, r0, #4294967295
 800a2bc:	fa5f fc8c 	uxtb.w	ip, ip
 800a2c0:	f1bc 0f18 	cmp.w	ip, #24
 800a2c4:	d91d      	bls.n	800a302 <__gethex+0x132>
 800a2c6:	f1bb 0f00 	cmp.w	fp, #0
 800a2ca:	d000      	beq.n	800a2ce <__gethex+0xfe>
 800a2cc:	4252      	negs	r2, r2
 800a2ce:	4416      	add	r6, r2
 800a2d0:	f8ca 1000 	str.w	r1, [sl]
 800a2d4:	b1dc      	cbz	r4, 800a30e <__gethex+0x13e>
 800a2d6:	9b01      	ldr	r3, [sp, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	bf14      	ite	ne
 800a2dc:	f04f 0800 	movne.w	r8, #0
 800a2e0:	f04f 0806 	moveq.w	r8, #6
 800a2e4:	4640      	mov	r0, r8
 800a2e6:	b005      	add	sp, #20
 800a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ec:	4645      	mov	r5, r8
 800a2ee:	4626      	mov	r6, r4
 800a2f0:	2401      	movs	r4, #1
 800a2f2:	e7c7      	b.n	800a284 <__gethex+0xb4>
 800a2f4:	f04f 0b00 	mov.w	fp, #0
 800a2f8:	1ca9      	adds	r1, r5, #2
 800a2fa:	e7d0      	b.n	800a29e <__gethex+0xce>
 800a2fc:	f04f 0b01 	mov.w	fp, #1
 800a300:	e7fa      	b.n	800a2f8 <__gethex+0x128>
 800a302:	230a      	movs	r3, #10
 800a304:	fb03 0002 	mla	r0, r3, r2, r0
 800a308:	e7d0      	b.n	800a2ac <__gethex+0xdc>
 800a30a:	4629      	mov	r1, r5
 800a30c:	e7e0      	b.n	800a2d0 <__gethex+0x100>
 800a30e:	4621      	mov	r1, r4
 800a310:	eba5 0308 	sub.w	r3, r5, r8
 800a314:	3b01      	subs	r3, #1
 800a316:	2b07      	cmp	r3, #7
 800a318:	dc0a      	bgt.n	800a330 <__gethex+0x160>
 800a31a:	4648      	mov	r0, r9
 800a31c:	f7fd ff68 	bl	80081f0 <_Balloc>
 800a320:	4604      	mov	r4, r0
 800a322:	b940      	cbnz	r0, 800a336 <__gethex+0x166>
 800a324:	4602      	mov	r2, r0
 800a326:	21e4      	movs	r1, #228	; 0xe4
 800a328:	4b61      	ldr	r3, [pc, #388]	; (800a4b0 <__gethex+0x2e0>)
 800a32a:	4862      	ldr	r0, [pc, #392]	; (800a4b4 <__gethex+0x2e4>)
 800a32c:	f7ff feb6 	bl	800a09c <__assert_func>
 800a330:	3101      	adds	r1, #1
 800a332:	105b      	asrs	r3, r3, #1
 800a334:	e7ef      	b.n	800a316 <__gethex+0x146>
 800a336:	2300      	movs	r3, #0
 800a338:	469b      	mov	fp, r3
 800a33a:	f100 0a14 	add.w	sl, r0, #20
 800a33e:	f8cd a004 	str.w	sl, [sp, #4]
 800a342:	45a8      	cmp	r8, r5
 800a344:	d344      	bcc.n	800a3d0 <__gethex+0x200>
 800a346:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a34a:	4658      	mov	r0, fp
 800a34c:	f848 bb04 	str.w	fp, [r8], #4
 800a350:	eba8 080a 	sub.w	r8, r8, sl
 800a354:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a358:	6122      	str	r2, [r4, #16]
 800a35a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a35e:	f7fe f839 	bl	80083d4 <__hi0bits>
 800a362:	683d      	ldr	r5, [r7, #0]
 800a364:	eba8 0800 	sub.w	r8, r8, r0
 800a368:	45a8      	cmp	r8, r5
 800a36a:	dd59      	ble.n	800a420 <__gethex+0x250>
 800a36c:	eba8 0805 	sub.w	r8, r8, r5
 800a370:	4641      	mov	r1, r8
 800a372:	4620      	mov	r0, r4
 800a374:	f7fe fbb7 	bl	8008ae6 <__any_on>
 800a378:	4683      	mov	fp, r0
 800a37a:	b1b8      	cbz	r0, 800a3ac <__gethex+0x1dc>
 800a37c:	f04f 0b01 	mov.w	fp, #1
 800a380:	f108 33ff 	add.w	r3, r8, #4294967295
 800a384:	1159      	asrs	r1, r3, #5
 800a386:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a38a:	f003 021f 	and.w	r2, r3, #31
 800a38e:	fa0b f202 	lsl.w	r2, fp, r2
 800a392:	420a      	tst	r2, r1
 800a394:	d00a      	beq.n	800a3ac <__gethex+0x1dc>
 800a396:	455b      	cmp	r3, fp
 800a398:	dd06      	ble.n	800a3a8 <__gethex+0x1d8>
 800a39a:	4620      	mov	r0, r4
 800a39c:	f1a8 0102 	sub.w	r1, r8, #2
 800a3a0:	f7fe fba1 	bl	8008ae6 <__any_on>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d138      	bne.n	800a41a <__gethex+0x24a>
 800a3a8:	f04f 0b02 	mov.w	fp, #2
 800a3ac:	4641      	mov	r1, r8
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f7ff fea6 	bl	800a100 <rshift>
 800a3b4:	4446      	add	r6, r8
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	42b3      	cmp	r3, r6
 800a3ba:	da41      	bge.n	800a440 <__gethex+0x270>
 800a3bc:	4621      	mov	r1, r4
 800a3be:	4648      	mov	r0, r9
 800a3c0:	f7fd ff56 	bl	8008270 <_Bfree>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3c8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a3cc:	6013      	str	r3, [r2, #0]
 800a3ce:	e789      	b.n	800a2e4 <__gethex+0x114>
 800a3d0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a3d4:	2a2e      	cmp	r2, #46	; 0x2e
 800a3d6:	d014      	beq.n	800a402 <__gethex+0x232>
 800a3d8:	2b20      	cmp	r3, #32
 800a3da:	d106      	bne.n	800a3ea <__gethex+0x21a>
 800a3dc:	9b01      	ldr	r3, [sp, #4]
 800a3de:	f843 bb04 	str.w	fp, [r3], #4
 800a3e2:	f04f 0b00 	mov.w	fp, #0
 800a3e6:	9301      	str	r3, [sp, #4]
 800a3e8:	465b      	mov	r3, fp
 800a3ea:	7828      	ldrb	r0, [r5, #0]
 800a3ec:	9303      	str	r3, [sp, #12]
 800a3ee:	f7ff feda 	bl	800a1a6 <__hexdig_fun>
 800a3f2:	9b03      	ldr	r3, [sp, #12]
 800a3f4:	f000 000f 	and.w	r0, r0, #15
 800a3f8:	4098      	lsls	r0, r3
 800a3fa:	ea4b 0b00 	orr.w	fp, fp, r0
 800a3fe:	3304      	adds	r3, #4
 800a400:	e79f      	b.n	800a342 <__gethex+0x172>
 800a402:	45a8      	cmp	r8, r5
 800a404:	d8e8      	bhi.n	800a3d8 <__gethex+0x208>
 800a406:	2201      	movs	r2, #1
 800a408:	4628      	mov	r0, r5
 800a40a:	4928      	ldr	r1, [pc, #160]	; (800a4ac <__gethex+0x2dc>)
 800a40c:	9303      	str	r3, [sp, #12]
 800a40e:	f7ff fe1d 	bl	800a04c <strncmp>
 800a412:	9b03      	ldr	r3, [sp, #12]
 800a414:	2800      	cmp	r0, #0
 800a416:	d1df      	bne.n	800a3d8 <__gethex+0x208>
 800a418:	e793      	b.n	800a342 <__gethex+0x172>
 800a41a:	f04f 0b03 	mov.w	fp, #3
 800a41e:	e7c5      	b.n	800a3ac <__gethex+0x1dc>
 800a420:	da0b      	bge.n	800a43a <__gethex+0x26a>
 800a422:	eba5 0808 	sub.w	r8, r5, r8
 800a426:	4621      	mov	r1, r4
 800a428:	4642      	mov	r2, r8
 800a42a:	4648      	mov	r0, r9
 800a42c:	f7fe f938 	bl	80086a0 <__lshift>
 800a430:	4604      	mov	r4, r0
 800a432:	eba6 0608 	sub.w	r6, r6, r8
 800a436:	f100 0a14 	add.w	sl, r0, #20
 800a43a:	f04f 0b00 	mov.w	fp, #0
 800a43e:	e7ba      	b.n	800a3b6 <__gethex+0x1e6>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	42b3      	cmp	r3, r6
 800a444:	dd74      	ble.n	800a530 <__gethex+0x360>
 800a446:	1b9e      	subs	r6, r3, r6
 800a448:	42b5      	cmp	r5, r6
 800a44a:	dc35      	bgt.n	800a4b8 <__gethex+0x2e8>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d023      	beq.n	800a49a <__gethex+0x2ca>
 800a452:	2b03      	cmp	r3, #3
 800a454:	d025      	beq.n	800a4a2 <__gethex+0x2d2>
 800a456:	2b01      	cmp	r3, #1
 800a458:	d115      	bne.n	800a486 <__gethex+0x2b6>
 800a45a:	42b5      	cmp	r5, r6
 800a45c:	d113      	bne.n	800a486 <__gethex+0x2b6>
 800a45e:	2d01      	cmp	r5, #1
 800a460:	d10b      	bne.n	800a47a <__gethex+0x2aa>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	9a02      	ldr	r2, [sp, #8]
 800a466:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	2301      	movs	r3, #1
 800a46e:	6123      	str	r3, [r4, #16]
 800a470:	f8ca 3000 	str.w	r3, [sl]
 800a474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a476:	601c      	str	r4, [r3, #0]
 800a478:	e734      	b.n	800a2e4 <__gethex+0x114>
 800a47a:	4620      	mov	r0, r4
 800a47c:	1e69      	subs	r1, r5, #1
 800a47e:	f7fe fb32 	bl	8008ae6 <__any_on>
 800a482:	2800      	cmp	r0, #0
 800a484:	d1ed      	bne.n	800a462 <__gethex+0x292>
 800a486:	4621      	mov	r1, r4
 800a488:	4648      	mov	r0, r9
 800a48a:	f7fd fef1 	bl	8008270 <_Bfree>
 800a48e:	2300      	movs	r3, #0
 800a490:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a492:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a496:	6013      	str	r3, [r2, #0]
 800a498:	e724      	b.n	800a2e4 <__gethex+0x114>
 800a49a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1f2      	bne.n	800a486 <__gethex+0x2b6>
 800a4a0:	e7df      	b.n	800a462 <__gethex+0x292>
 800a4a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1dc      	bne.n	800a462 <__gethex+0x292>
 800a4a8:	e7ed      	b.n	800a486 <__gethex+0x2b6>
 800a4aa:	bf00      	nop
 800a4ac:	0800c85c 	.word	0x0800c85c
 800a4b0:	0800c6f5 	.word	0x0800c6f5
 800a4b4:	0800ca06 	.word	0x0800ca06
 800a4b8:	f106 38ff 	add.w	r8, r6, #4294967295
 800a4bc:	f1bb 0f00 	cmp.w	fp, #0
 800a4c0:	d133      	bne.n	800a52a <__gethex+0x35a>
 800a4c2:	f1b8 0f00 	cmp.w	r8, #0
 800a4c6:	d004      	beq.n	800a4d2 <__gethex+0x302>
 800a4c8:	4641      	mov	r1, r8
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f7fe fb0b 	bl	8008ae6 <__any_on>
 800a4d0:	4683      	mov	fp, r0
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a4d8:	f008 081f 	and.w	r8, r8, #31
 800a4dc:	fa03 f308 	lsl.w	r3, r3, r8
 800a4e0:	f04f 0802 	mov.w	r8, #2
 800a4e4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	4213      	tst	r3, r2
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	bf18      	it	ne
 800a4f0:	f04b 0b02 	orrne.w	fp, fp, #2
 800a4f4:	1bad      	subs	r5, r5, r6
 800a4f6:	f7ff fe03 	bl	800a100 <rshift>
 800a4fa:	687e      	ldr	r6, [r7, #4]
 800a4fc:	f1bb 0f00 	cmp.w	fp, #0
 800a500:	d04a      	beq.n	800a598 <__gethex+0x3c8>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2b02      	cmp	r3, #2
 800a506:	d016      	beq.n	800a536 <__gethex+0x366>
 800a508:	2b03      	cmp	r3, #3
 800a50a:	d018      	beq.n	800a53e <__gethex+0x36e>
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d109      	bne.n	800a524 <__gethex+0x354>
 800a510:	f01b 0f02 	tst.w	fp, #2
 800a514:	d006      	beq.n	800a524 <__gethex+0x354>
 800a516:	f8da 3000 	ldr.w	r3, [sl]
 800a51a:	ea4b 0b03 	orr.w	fp, fp, r3
 800a51e:	f01b 0f01 	tst.w	fp, #1
 800a522:	d10f      	bne.n	800a544 <__gethex+0x374>
 800a524:	f048 0810 	orr.w	r8, r8, #16
 800a528:	e036      	b.n	800a598 <__gethex+0x3c8>
 800a52a:	f04f 0b01 	mov.w	fp, #1
 800a52e:	e7d0      	b.n	800a4d2 <__gethex+0x302>
 800a530:	f04f 0801 	mov.w	r8, #1
 800a534:	e7e2      	b.n	800a4fc <__gethex+0x32c>
 800a536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a538:	f1c3 0301 	rsb	r3, r3, #1
 800a53c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a53e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a540:	2b00      	cmp	r3, #0
 800a542:	d0ef      	beq.n	800a524 <__gethex+0x354>
 800a544:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a548:	f104 0214 	add.w	r2, r4, #20
 800a54c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a550:	9301      	str	r3, [sp, #4]
 800a552:	2300      	movs	r3, #0
 800a554:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a558:	4694      	mov	ip, r2
 800a55a:	f852 1b04 	ldr.w	r1, [r2], #4
 800a55e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a562:	d01e      	beq.n	800a5a2 <__gethex+0x3d2>
 800a564:	3101      	adds	r1, #1
 800a566:	f8cc 1000 	str.w	r1, [ip]
 800a56a:	f1b8 0f02 	cmp.w	r8, #2
 800a56e:	f104 0214 	add.w	r2, r4, #20
 800a572:	d13d      	bne.n	800a5f0 <__gethex+0x420>
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	3b01      	subs	r3, #1
 800a578:	42ab      	cmp	r3, r5
 800a57a:	d10b      	bne.n	800a594 <__gethex+0x3c4>
 800a57c:	2301      	movs	r3, #1
 800a57e:	1169      	asrs	r1, r5, #5
 800a580:	f005 051f 	and.w	r5, r5, #31
 800a584:	fa03 f505 	lsl.w	r5, r3, r5
 800a588:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a58c:	421d      	tst	r5, r3
 800a58e:	bf18      	it	ne
 800a590:	f04f 0801 	movne.w	r8, #1
 800a594:	f048 0820 	orr.w	r8, r8, #32
 800a598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a59a:	601c      	str	r4, [r3, #0]
 800a59c:	9b02      	ldr	r3, [sp, #8]
 800a59e:	601e      	str	r6, [r3, #0]
 800a5a0:	e6a0      	b.n	800a2e4 <__gethex+0x114>
 800a5a2:	4290      	cmp	r0, r2
 800a5a4:	f842 3c04 	str.w	r3, [r2, #-4]
 800a5a8:	d8d6      	bhi.n	800a558 <__gethex+0x388>
 800a5aa:	68a2      	ldr	r2, [r4, #8]
 800a5ac:	4593      	cmp	fp, r2
 800a5ae:	db17      	blt.n	800a5e0 <__gethex+0x410>
 800a5b0:	6861      	ldr	r1, [r4, #4]
 800a5b2:	4648      	mov	r0, r9
 800a5b4:	3101      	adds	r1, #1
 800a5b6:	f7fd fe1b 	bl	80081f0 <_Balloc>
 800a5ba:	4682      	mov	sl, r0
 800a5bc:	b918      	cbnz	r0, 800a5c6 <__gethex+0x3f6>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	2184      	movs	r1, #132	; 0x84
 800a5c2:	4b1a      	ldr	r3, [pc, #104]	; (800a62c <__gethex+0x45c>)
 800a5c4:	e6b1      	b.n	800a32a <__gethex+0x15a>
 800a5c6:	6922      	ldr	r2, [r4, #16]
 800a5c8:	f104 010c 	add.w	r1, r4, #12
 800a5cc:	3202      	adds	r2, #2
 800a5ce:	0092      	lsls	r2, r2, #2
 800a5d0:	300c      	adds	r0, #12
 800a5d2:	f7fc fe8e 	bl	80072f2 <memcpy>
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	4648      	mov	r0, r9
 800a5da:	f7fd fe49 	bl	8008270 <_Bfree>
 800a5de:	4654      	mov	r4, sl
 800a5e0:	6922      	ldr	r2, [r4, #16]
 800a5e2:	1c51      	adds	r1, r2, #1
 800a5e4:	6121      	str	r1, [r4, #16]
 800a5e6:	2101      	movs	r1, #1
 800a5e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a5ec:	6151      	str	r1, [r2, #20]
 800a5ee:	e7bc      	b.n	800a56a <__gethex+0x39a>
 800a5f0:	6921      	ldr	r1, [r4, #16]
 800a5f2:	4559      	cmp	r1, fp
 800a5f4:	dd0b      	ble.n	800a60e <__gethex+0x43e>
 800a5f6:	2101      	movs	r1, #1
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f7ff fd81 	bl	800a100 <rshift>
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	3601      	adds	r6, #1
 800a602:	42b3      	cmp	r3, r6
 800a604:	f6ff aeda 	blt.w	800a3bc <__gethex+0x1ec>
 800a608:	f04f 0801 	mov.w	r8, #1
 800a60c:	e7c2      	b.n	800a594 <__gethex+0x3c4>
 800a60e:	f015 051f 	ands.w	r5, r5, #31
 800a612:	d0f9      	beq.n	800a608 <__gethex+0x438>
 800a614:	9b01      	ldr	r3, [sp, #4]
 800a616:	f1c5 0520 	rsb	r5, r5, #32
 800a61a:	441a      	add	r2, r3
 800a61c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a620:	f7fd fed8 	bl	80083d4 <__hi0bits>
 800a624:	42a8      	cmp	r0, r5
 800a626:	dbe6      	blt.n	800a5f6 <__gethex+0x426>
 800a628:	e7ee      	b.n	800a608 <__gethex+0x438>
 800a62a:	bf00      	nop
 800a62c:	0800c6f5 	.word	0x0800c6f5

0800a630 <L_shift>:
 800a630:	f1c2 0208 	rsb	r2, r2, #8
 800a634:	0092      	lsls	r2, r2, #2
 800a636:	b570      	push	{r4, r5, r6, lr}
 800a638:	f1c2 0620 	rsb	r6, r2, #32
 800a63c:	6843      	ldr	r3, [r0, #4]
 800a63e:	6804      	ldr	r4, [r0, #0]
 800a640:	fa03 f506 	lsl.w	r5, r3, r6
 800a644:	432c      	orrs	r4, r5
 800a646:	40d3      	lsrs	r3, r2
 800a648:	6004      	str	r4, [r0, #0]
 800a64a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a64e:	4288      	cmp	r0, r1
 800a650:	d3f4      	bcc.n	800a63c <L_shift+0xc>
 800a652:	bd70      	pop	{r4, r5, r6, pc}

0800a654 <__match>:
 800a654:	b530      	push	{r4, r5, lr}
 800a656:	6803      	ldr	r3, [r0, #0]
 800a658:	3301      	adds	r3, #1
 800a65a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a65e:	b914      	cbnz	r4, 800a666 <__match+0x12>
 800a660:	6003      	str	r3, [r0, #0]
 800a662:	2001      	movs	r0, #1
 800a664:	bd30      	pop	{r4, r5, pc}
 800a666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a66a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a66e:	2d19      	cmp	r5, #25
 800a670:	bf98      	it	ls
 800a672:	3220      	addls	r2, #32
 800a674:	42a2      	cmp	r2, r4
 800a676:	d0f0      	beq.n	800a65a <__match+0x6>
 800a678:	2000      	movs	r0, #0
 800a67a:	e7f3      	b.n	800a664 <__match+0x10>

0800a67c <__hexnan>:
 800a67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a680:	2500      	movs	r5, #0
 800a682:	680b      	ldr	r3, [r1, #0]
 800a684:	4682      	mov	sl, r0
 800a686:	115e      	asrs	r6, r3, #5
 800a688:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a68c:	f013 031f 	ands.w	r3, r3, #31
 800a690:	bf18      	it	ne
 800a692:	3604      	addne	r6, #4
 800a694:	1f37      	subs	r7, r6, #4
 800a696:	4690      	mov	r8, r2
 800a698:	46b9      	mov	r9, r7
 800a69a:	463c      	mov	r4, r7
 800a69c:	46ab      	mov	fp, r5
 800a69e:	b087      	sub	sp, #28
 800a6a0:	6801      	ldr	r1, [r0, #0]
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	f846 5c04 	str.w	r5, [r6, #-4]
 800a6a8:	9502      	str	r5, [sp, #8]
 800a6aa:	784a      	ldrb	r2, [r1, #1]
 800a6ac:	1c4b      	adds	r3, r1, #1
 800a6ae:	9303      	str	r3, [sp, #12]
 800a6b0:	b342      	cbz	r2, 800a704 <__hexnan+0x88>
 800a6b2:	4610      	mov	r0, r2
 800a6b4:	9105      	str	r1, [sp, #20]
 800a6b6:	9204      	str	r2, [sp, #16]
 800a6b8:	f7ff fd75 	bl	800a1a6 <__hexdig_fun>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d14f      	bne.n	800a760 <__hexnan+0xe4>
 800a6c0:	9a04      	ldr	r2, [sp, #16]
 800a6c2:	9905      	ldr	r1, [sp, #20]
 800a6c4:	2a20      	cmp	r2, #32
 800a6c6:	d818      	bhi.n	800a6fa <__hexnan+0x7e>
 800a6c8:	9b02      	ldr	r3, [sp, #8]
 800a6ca:	459b      	cmp	fp, r3
 800a6cc:	dd13      	ble.n	800a6f6 <__hexnan+0x7a>
 800a6ce:	454c      	cmp	r4, r9
 800a6d0:	d206      	bcs.n	800a6e0 <__hexnan+0x64>
 800a6d2:	2d07      	cmp	r5, #7
 800a6d4:	dc04      	bgt.n	800a6e0 <__hexnan+0x64>
 800a6d6:	462a      	mov	r2, r5
 800a6d8:	4649      	mov	r1, r9
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f7ff ffa8 	bl	800a630 <L_shift>
 800a6e0:	4544      	cmp	r4, r8
 800a6e2:	d950      	bls.n	800a786 <__hexnan+0x10a>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	f1a4 0904 	sub.w	r9, r4, #4
 800a6ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6ee:	461d      	mov	r5, r3
 800a6f0:	464c      	mov	r4, r9
 800a6f2:	f8cd b008 	str.w	fp, [sp, #8]
 800a6f6:	9903      	ldr	r1, [sp, #12]
 800a6f8:	e7d7      	b.n	800a6aa <__hexnan+0x2e>
 800a6fa:	2a29      	cmp	r2, #41	; 0x29
 800a6fc:	d155      	bne.n	800a7aa <__hexnan+0x12e>
 800a6fe:	3102      	adds	r1, #2
 800a700:	f8ca 1000 	str.w	r1, [sl]
 800a704:	f1bb 0f00 	cmp.w	fp, #0
 800a708:	d04f      	beq.n	800a7aa <__hexnan+0x12e>
 800a70a:	454c      	cmp	r4, r9
 800a70c:	d206      	bcs.n	800a71c <__hexnan+0xa0>
 800a70e:	2d07      	cmp	r5, #7
 800a710:	dc04      	bgt.n	800a71c <__hexnan+0xa0>
 800a712:	462a      	mov	r2, r5
 800a714:	4649      	mov	r1, r9
 800a716:	4620      	mov	r0, r4
 800a718:	f7ff ff8a 	bl	800a630 <L_shift>
 800a71c:	4544      	cmp	r4, r8
 800a71e:	d934      	bls.n	800a78a <__hexnan+0x10e>
 800a720:	4623      	mov	r3, r4
 800a722:	f1a8 0204 	sub.w	r2, r8, #4
 800a726:	f853 1b04 	ldr.w	r1, [r3], #4
 800a72a:	429f      	cmp	r7, r3
 800a72c:	f842 1f04 	str.w	r1, [r2, #4]!
 800a730:	d2f9      	bcs.n	800a726 <__hexnan+0xaa>
 800a732:	1b3b      	subs	r3, r7, r4
 800a734:	f023 0303 	bic.w	r3, r3, #3
 800a738:	3304      	adds	r3, #4
 800a73a:	3e03      	subs	r6, #3
 800a73c:	3401      	adds	r4, #1
 800a73e:	42a6      	cmp	r6, r4
 800a740:	bf38      	it	cc
 800a742:	2304      	movcc	r3, #4
 800a744:	2200      	movs	r2, #0
 800a746:	4443      	add	r3, r8
 800a748:	f843 2b04 	str.w	r2, [r3], #4
 800a74c:	429f      	cmp	r7, r3
 800a74e:	d2fb      	bcs.n	800a748 <__hexnan+0xcc>
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	b91b      	cbnz	r3, 800a75c <__hexnan+0xe0>
 800a754:	4547      	cmp	r7, r8
 800a756:	d126      	bne.n	800a7a6 <__hexnan+0x12a>
 800a758:	2301      	movs	r3, #1
 800a75a:	603b      	str	r3, [r7, #0]
 800a75c:	2005      	movs	r0, #5
 800a75e:	e025      	b.n	800a7ac <__hexnan+0x130>
 800a760:	3501      	adds	r5, #1
 800a762:	2d08      	cmp	r5, #8
 800a764:	f10b 0b01 	add.w	fp, fp, #1
 800a768:	dd06      	ble.n	800a778 <__hexnan+0xfc>
 800a76a:	4544      	cmp	r4, r8
 800a76c:	d9c3      	bls.n	800a6f6 <__hexnan+0x7a>
 800a76e:	2300      	movs	r3, #0
 800a770:	2501      	movs	r5, #1
 800a772:	f844 3c04 	str.w	r3, [r4, #-4]
 800a776:	3c04      	subs	r4, #4
 800a778:	6822      	ldr	r2, [r4, #0]
 800a77a:	f000 000f 	and.w	r0, r0, #15
 800a77e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a782:	6020      	str	r0, [r4, #0]
 800a784:	e7b7      	b.n	800a6f6 <__hexnan+0x7a>
 800a786:	2508      	movs	r5, #8
 800a788:	e7b5      	b.n	800a6f6 <__hexnan+0x7a>
 800a78a:	9b01      	ldr	r3, [sp, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d0df      	beq.n	800a750 <__hexnan+0xd4>
 800a790:	f04f 32ff 	mov.w	r2, #4294967295
 800a794:	f1c3 0320 	rsb	r3, r3, #32
 800a798:	40da      	lsrs	r2, r3
 800a79a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a79e:	4013      	ands	r3, r2
 800a7a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a7a4:	e7d4      	b.n	800a750 <__hexnan+0xd4>
 800a7a6:	3f04      	subs	r7, #4
 800a7a8:	e7d2      	b.n	800a750 <__hexnan+0xd4>
 800a7aa:	2004      	movs	r0, #4
 800a7ac:	b007      	add	sp, #28
 800a7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a7b2 <__ascii_mbtowc>:
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	b901      	cbnz	r1, 800a7b8 <__ascii_mbtowc+0x6>
 800a7b6:	a901      	add	r1, sp, #4
 800a7b8:	b142      	cbz	r2, 800a7cc <__ascii_mbtowc+0x1a>
 800a7ba:	b14b      	cbz	r3, 800a7d0 <__ascii_mbtowc+0x1e>
 800a7bc:	7813      	ldrb	r3, [r2, #0]
 800a7be:	600b      	str	r3, [r1, #0]
 800a7c0:	7812      	ldrb	r2, [r2, #0]
 800a7c2:	1e10      	subs	r0, r2, #0
 800a7c4:	bf18      	it	ne
 800a7c6:	2001      	movne	r0, #1
 800a7c8:	b002      	add	sp, #8
 800a7ca:	4770      	bx	lr
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	e7fb      	b.n	800a7c8 <__ascii_mbtowc+0x16>
 800a7d0:	f06f 0001 	mvn.w	r0, #1
 800a7d4:	e7f8      	b.n	800a7c8 <__ascii_mbtowc+0x16>

0800a7d6 <_realloc_r>:
 800a7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7da:	4680      	mov	r8, r0
 800a7dc:	4614      	mov	r4, r2
 800a7de:	460e      	mov	r6, r1
 800a7e0:	b921      	cbnz	r1, 800a7ec <_realloc_r+0x16>
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e8:	f7fd bc76 	b.w	80080d8 <_malloc_r>
 800a7ec:	b92a      	cbnz	r2, 800a7fa <_realloc_r+0x24>
 800a7ee:	f7fd fc03 	bl	8007ff8 <_free_r>
 800a7f2:	4625      	mov	r5, r4
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7fa:	f000 f8c6 	bl	800a98a <_malloc_usable_size_r>
 800a7fe:	4284      	cmp	r4, r0
 800a800:	4607      	mov	r7, r0
 800a802:	d802      	bhi.n	800a80a <_realloc_r+0x34>
 800a804:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a808:	d812      	bhi.n	800a830 <_realloc_r+0x5a>
 800a80a:	4621      	mov	r1, r4
 800a80c:	4640      	mov	r0, r8
 800a80e:	f7fd fc63 	bl	80080d8 <_malloc_r>
 800a812:	4605      	mov	r5, r0
 800a814:	2800      	cmp	r0, #0
 800a816:	d0ed      	beq.n	800a7f4 <_realloc_r+0x1e>
 800a818:	42bc      	cmp	r4, r7
 800a81a:	4622      	mov	r2, r4
 800a81c:	4631      	mov	r1, r6
 800a81e:	bf28      	it	cs
 800a820:	463a      	movcs	r2, r7
 800a822:	f7fc fd66 	bl	80072f2 <memcpy>
 800a826:	4631      	mov	r1, r6
 800a828:	4640      	mov	r0, r8
 800a82a:	f7fd fbe5 	bl	8007ff8 <_free_r>
 800a82e:	e7e1      	b.n	800a7f4 <_realloc_r+0x1e>
 800a830:	4635      	mov	r5, r6
 800a832:	e7df      	b.n	800a7f4 <_realloc_r+0x1e>

0800a834 <__ascii_wctomb>:
 800a834:	4603      	mov	r3, r0
 800a836:	4608      	mov	r0, r1
 800a838:	b141      	cbz	r1, 800a84c <__ascii_wctomb+0x18>
 800a83a:	2aff      	cmp	r2, #255	; 0xff
 800a83c:	d904      	bls.n	800a848 <__ascii_wctomb+0x14>
 800a83e:	228a      	movs	r2, #138	; 0x8a
 800a840:	f04f 30ff 	mov.w	r0, #4294967295
 800a844:	601a      	str	r2, [r3, #0]
 800a846:	4770      	bx	lr
 800a848:	2001      	movs	r0, #1
 800a84a:	700a      	strb	r2, [r1, #0]
 800a84c:	4770      	bx	lr
	...

0800a850 <fiprintf>:
 800a850:	b40e      	push	{r1, r2, r3}
 800a852:	b503      	push	{r0, r1, lr}
 800a854:	4601      	mov	r1, r0
 800a856:	ab03      	add	r3, sp, #12
 800a858:	4805      	ldr	r0, [pc, #20]	; (800a870 <fiprintf+0x20>)
 800a85a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a85e:	6800      	ldr	r0, [r0, #0]
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	f7ff f97f 	bl	8009b64 <_vfiprintf_r>
 800a866:	b002      	add	sp, #8
 800a868:	f85d eb04 	ldr.w	lr, [sp], #4
 800a86c:	b003      	add	sp, #12
 800a86e:	4770      	bx	lr
 800a870:	20000084 	.word	0x20000084

0800a874 <__swhatbuf_r>:
 800a874:	b570      	push	{r4, r5, r6, lr}
 800a876:	460c      	mov	r4, r1
 800a878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a87c:	4615      	mov	r5, r2
 800a87e:	2900      	cmp	r1, #0
 800a880:	461e      	mov	r6, r3
 800a882:	b096      	sub	sp, #88	; 0x58
 800a884:	da0c      	bge.n	800a8a0 <__swhatbuf_r+0x2c>
 800a886:	89a3      	ldrh	r3, [r4, #12]
 800a888:	2100      	movs	r1, #0
 800a88a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a88e:	bf0c      	ite	eq
 800a890:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a894:	2340      	movne	r3, #64	; 0x40
 800a896:	2000      	movs	r0, #0
 800a898:	6031      	str	r1, [r6, #0]
 800a89a:	602b      	str	r3, [r5, #0]
 800a89c:	b016      	add	sp, #88	; 0x58
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
 800a8a0:	466a      	mov	r2, sp
 800a8a2:	f000 f849 	bl	800a938 <_fstat_r>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	dbed      	blt.n	800a886 <__swhatbuf_r+0x12>
 800a8aa:	9901      	ldr	r1, [sp, #4]
 800a8ac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a8b0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a8b4:	4259      	negs	r1, r3
 800a8b6:	4159      	adcs	r1, r3
 800a8b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8bc:	e7eb      	b.n	800a896 <__swhatbuf_r+0x22>

0800a8be <__smakebuf_r>:
 800a8be:	898b      	ldrh	r3, [r1, #12]
 800a8c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8c2:	079d      	lsls	r5, r3, #30
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	d507      	bpl.n	800a8da <__smakebuf_r+0x1c>
 800a8ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8ce:	6023      	str	r3, [r4, #0]
 800a8d0:	6123      	str	r3, [r4, #16]
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	6163      	str	r3, [r4, #20]
 800a8d6:	b002      	add	sp, #8
 800a8d8:	bd70      	pop	{r4, r5, r6, pc}
 800a8da:	466a      	mov	r2, sp
 800a8dc:	ab01      	add	r3, sp, #4
 800a8de:	f7ff ffc9 	bl	800a874 <__swhatbuf_r>
 800a8e2:	9900      	ldr	r1, [sp, #0]
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	f7fd fbf6 	bl	80080d8 <_malloc_r>
 800a8ec:	b948      	cbnz	r0, 800a902 <__smakebuf_r+0x44>
 800a8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8f2:	059a      	lsls	r2, r3, #22
 800a8f4:	d4ef      	bmi.n	800a8d6 <__smakebuf_r+0x18>
 800a8f6:	f023 0303 	bic.w	r3, r3, #3
 800a8fa:	f043 0302 	orr.w	r3, r3, #2
 800a8fe:	81a3      	strh	r3, [r4, #12]
 800a900:	e7e3      	b.n	800a8ca <__smakebuf_r+0xc>
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	6020      	str	r0, [r4, #0]
 800a906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a90a:	81a3      	strh	r3, [r4, #12]
 800a90c:	9b00      	ldr	r3, [sp, #0]
 800a90e:	6120      	str	r0, [r4, #16]
 800a910:	6163      	str	r3, [r4, #20]
 800a912:	9b01      	ldr	r3, [sp, #4]
 800a914:	b15b      	cbz	r3, 800a92e <__smakebuf_r+0x70>
 800a916:	4630      	mov	r0, r6
 800a918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a91c:	f000 f81e 	bl	800a95c <_isatty_r>
 800a920:	b128      	cbz	r0, 800a92e <__smakebuf_r+0x70>
 800a922:	89a3      	ldrh	r3, [r4, #12]
 800a924:	f023 0303 	bic.w	r3, r3, #3
 800a928:	f043 0301 	orr.w	r3, r3, #1
 800a92c:	81a3      	strh	r3, [r4, #12]
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	431d      	orrs	r5, r3
 800a932:	81a5      	strh	r5, [r4, #12]
 800a934:	e7cf      	b.n	800a8d6 <__smakebuf_r+0x18>
	...

0800a938 <_fstat_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	2300      	movs	r3, #0
 800a93c:	4d06      	ldr	r5, [pc, #24]	; (800a958 <_fstat_r+0x20>)
 800a93e:	4604      	mov	r4, r0
 800a940:	4608      	mov	r0, r1
 800a942:	4611      	mov	r1, r2
 800a944:	602b      	str	r3, [r5, #0]
 800a946:	f7f9 fd4c 	bl	80043e2 <_fstat>
 800a94a:	1c43      	adds	r3, r0, #1
 800a94c:	d102      	bne.n	800a954 <_fstat_r+0x1c>
 800a94e:	682b      	ldr	r3, [r5, #0]
 800a950:	b103      	cbz	r3, 800a954 <_fstat_r+0x1c>
 800a952:	6023      	str	r3, [r4, #0]
 800a954:	bd38      	pop	{r3, r4, r5, pc}
 800a956:	bf00      	nop
 800a958:	20001844 	.word	0x20001844

0800a95c <_isatty_r>:
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	2300      	movs	r3, #0
 800a960:	4d05      	ldr	r5, [pc, #20]	; (800a978 <_isatty_r+0x1c>)
 800a962:	4604      	mov	r4, r0
 800a964:	4608      	mov	r0, r1
 800a966:	602b      	str	r3, [r5, #0]
 800a968:	f7f9 fd4a 	bl	8004400 <_isatty>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	d102      	bne.n	800a976 <_isatty_r+0x1a>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	b103      	cbz	r3, 800a976 <_isatty_r+0x1a>
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	bd38      	pop	{r3, r4, r5, pc}
 800a978:	20001844 	.word	0x20001844

0800a97c <abort>:
 800a97c:	2006      	movs	r0, #6
 800a97e:	b508      	push	{r3, lr}
 800a980:	f000 f834 	bl	800a9ec <raise>
 800a984:	2001      	movs	r0, #1
 800a986:	f7f9 fcfa 	bl	800437e <_exit>

0800a98a <_malloc_usable_size_r>:
 800a98a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a98e:	1f18      	subs	r0, r3, #4
 800a990:	2b00      	cmp	r3, #0
 800a992:	bfbc      	itt	lt
 800a994:	580b      	ldrlt	r3, [r1, r0]
 800a996:	18c0      	addlt	r0, r0, r3
 800a998:	4770      	bx	lr

0800a99a <_raise_r>:
 800a99a:	291f      	cmp	r1, #31
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	4604      	mov	r4, r0
 800a9a0:	460d      	mov	r5, r1
 800a9a2:	d904      	bls.n	800a9ae <_raise_r+0x14>
 800a9a4:	2316      	movs	r3, #22
 800a9a6:	6003      	str	r3, [r0, #0]
 800a9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ac:	bd38      	pop	{r3, r4, r5, pc}
 800a9ae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a9b0:	b112      	cbz	r2, 800a9b8 <_raise_r+0x1e>
 800a9b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9b6:	b94b      	cbnz	r3, 800a9cc <_raise_r+0x32>
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 f831 	bl	800aa20 <_getpid_r>
 800a9be:	462a      	mov	r2, r5
 800a9c0:	4601      	mov	r1, r0
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9c8:	f000 b818 	b.w	800a9fc <_kill_r>
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d00a      	beq.n	800a9e6 <_raise_r+0x4c>
 800a9d0:	1c59      	adds	r1, r3, #1
 800a9d2:	d103      	bne.n	800a9dc <_raise_r+0x42>
 800a9d4:	2316      	movs	r3, #22
 800a9d6:	6003      	str	r3, [r0, #0]
 800a9d8:	2001      	movs	r0, #1
 800a9da:	e7e7      	b.n	800a9ac <_raise_r+0x12>
 800a9dc:	2400      	movs	r4, #0
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9e4:	4798      	blx	r3
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	e7e0      	b.n	800a9ac <_raise_r+0x12>
	...

0800a9ec <raise>:
 800a9ec:	4b02      	ldr	r3, [pc, #8]	; (800a9f8 <raise+0xc>)
 800a9ee:	4601      	mov	r1, r0
 800a9f0:	6818      	ldr	r0, [r3, #0]
 800a9f2:	f7ff bfd2 	b.w	800a99a <_raise_r>
 800a9f6:	bf00      	nop
 800a9f8:	20000084 	.word	0x20000084

0800a9fc <_kill_r>:
 800a9fc:	b538      	push	{r3, r4, r5, lr}
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4d06      	ldr	r5, [pc, #24]	; (800aa1c <_kill_r+0x20>)
 800aa02:	4604      	mov	r4, r0
 800aa04:	4608      	mov	r0, r1
 800aa06:	4611      	mov	r1, r2
 800aa08:	602b      	str	r3, [r5, #0]
 800aa0a:	f7f9 fca8 	bl	800435e <_kill>
 800aa0e:	1c43      	adds	r3, r0, #1
 800aa10:	d102      	bne.n	800aa18 <_kill_r+0x1c>
 800aa12:	682b      	ldr	r3, [r5, #0]
 800aa14:	b103      	cbz	r3, 800aa18 <_kill_r+0x1c>
 800aa16:	6023      	str	r3, [r4, #0]
 800aa18:	bd38      	pop	{r3, r4, r5, pc}
 800aa1a:	bf00      	nop
 800aa1c:	20001844 	.word	0x20001844

0800aa20 <_getpid_r>:
 800aa20:	f7f9 bc96 	b.w	8004350 <_getpid>

0800aa24 <pow>:
 800aa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa28:	4614      	mov	r4, r2
 800aa2a:	461d      	mov	r5, r3
 800aa2c:	4680      	mov	r8, r0
 800aa2e:	4689      	mov	r9, r1
 800aa30:	f000 f9e2 	bl	800adf8 <__ieee754_pow>
 800aa34:	4622      	mov	r2, r4
 800aa36:	4606      	mov	r6, r0
 800aa38:	460f      	mov	r7, r1
 800aa3a:	462b      	mov	r3, r5
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	f7f5 ffe4 	bl	8000a0c <__aeabi_dcmpun>
 800aa44:	bbc8      	cbnz	r0, 800aaba <pow+0x96>
 800aa46:	2200      	movs	r2, #0
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	f7f5 ffab 	bl	80009a8 <__aeabi_dcmpeq>
 800aa52:	b1b8      	cbz	r0, 800aa84 <pow+0x60>
 800aa54:	2200      	movs	r2, #0
 800aa56:	2300      	movs	r3, #0
 800aa58:	4620      	mov	r0, r4
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	f7f5 ffa4 	bl	80009a8 <__aeabi_dcmpeq>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d141      	bne.n	800aae8 <pow+0xc4>
 800aa64:	4620      	mov	r0, r4
 800aa66:	4629      	mov	r1, r5
 800aa68:	f000 f868 	bl	800ab3c <finite>
 800aa6c:	b328      	cbz	r0, 800aaba <pow+0x96>
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2300      	movs	r3, #0
 800aa72:	4620      	mov	r0, r4
 800aa74:	4629      	mov	r1, r5
 800aa76:	f7f5 ffa1 	bl	80009bc <__aeabi_dcmplt>
 800aa7a:	b1f0      	cbz	r0, 800aaba <pow+0x96>
 800aa7c:	f7fc fbfe 	bl	800727c <__errno>
 800aa80:	2322      	movs	r3, #34	; 0x22
 800aa82:	e019      	b.n	800aab8 <pow+0x94>
 800aa84:	4630      	mov	r0, r6
 800aa86:	4639      	mov	r1, r7
 800aa88:	f000 f858 	bl	800ab3c <finite>
 800aa8c:	b9c8      	cbnz	r0, 800aac2 <pow+0x9e>
 800aa8e:	4640      	mov	r0, r8
 800aa90:	4649      	mov	r1, r9
 800aa92:	f000 f853 	bl	800ab3c <finite>
 800aa96:	b1a0      	cbz	r0, 800aac2 <pow+0x9e>
 800aa98:	4620      	mov	r0, r4
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	f000 f84e 	bl	800ab3c <finite>
 800aaa0:	b178      	cbz	r0, 800aac2 <pow+0x9e>
 800aaa2:	4632      	mov	r2, r6
 800aaa4:	463b      	mov	r3, r7
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	4639      	mov	r1, r7
 800aaaa:	f7f5 ffaf 	bl	8000a0c <__aeabi_dcmpun>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d0e4      	beq.n	800aa7c <pow+0x58>
 800aab2:	f7fc fbe3 	bl	800727c <__errno>
 800aab6:	2321      	movs	r3, #33	; 0x21
 800aab8:	6003      	str	r3, [r0, #0]
 800aaba:	4630      	mov	r0, r6
 800aabc:	4639      	mov	r1, r7
 800aabe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aac2:	2200      	movs	r2, #0
 800aac4:	2300      	movs	r3, #0
 800aac6:	4630      	mov	r0, r6
 800aac8:	4639      	mov	r1, r7
 800aaca:	f7f5 ff6d 	bl	80009a8 <__aeabi_dcmpeq>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d0f3      	beq.n	800aaba <pow+0x96>
 800aad2:	4640      	mov	r0, r8
 800aad4:	4649      	mov	r1, r9
 800aad6:	f000 f831 	bl	800ab3c <finite>
 800aada:	2800      	cmp	r0, #0
 800aadc:	d0ed      	beq.n	800aaba <pow+0x96>
 800aade:	4620      	mov	r0, r4
 800aae0:	4629      	mov	r1, r5
 800aae2:	f000 f82b 	bl	800ab3c <finite>
 800aae6:	e7c8      	b.n	800aa7a <pow+0x56>
 800aae8:	2600      	movs	r6, #0
 800aaea:	4f01      	ldr	r7, [pc, #4]	; (800aaf0 <pow+0xcc>)
 800aaec:	e7e5      	b.n	800aaba <pow+0x96>
 800aaee:	bf00      	nop
 800aaf0:	3ff00000 	.word	0x3ff00000

0800aaf4 <sqrt>:
 800aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	460f      	mov	r7, r1
 800aafa:	f000 f825 	bl	800ab48 <__ieee754_sqrt>
 800aafe:	4632      	mov	r2, r6
 800ab00:	4604      	mov	r4, r0
 800ab02:	460d      	mov	r5, r1
 800ab04:	463b      	mov	r3, r7
 800ab06:	4630      	mov	r0, r6
 800ab08:	4639      	mov	r1, r7
 800ab0a:	f7f5 ff7f 	bl	8000a0c <__aeabi_dcmpun>
 800ab0e:	b990      	cbnz	r0, 800ab36 <sqrt+0x42>
 800ab10:	2200      	movs	r2, #0
 800ab12:	2300      	movs	r3, #0
 800ab14:	4630      	mov	r0, r6
 800ab16:	4639      	mov	r1, r7
 800ab18:	f7f5 ff50 	bl	80009bc <__aeabi_dcmplt>
 800ab1c:	b158      	cbz	r0, 800ab36 <sqrt+0x42>
 800ab1e:	f7fc fbad 	bl	800727c <__errno>
 800ab22:	2321      	movs	r3, #33	; 0x21
 800ab24:	2200      	movs	r2, #0
 800ab26:	6003      	str	r3, [r0, #0]
 800ab28:	2300      	movs	r3, #0
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	f7f5 fdfd 	bl	800072c <__aeabi_ddiv>
 800ab32:	4604      	mov	r4, r0
 800ab34:	460d      	mov	r5, r1
 800ab36:	4620      	mov	r0, r4
 800ab38:	4629      	mov	r1, r5
 800ab3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab3c <finite>:
 800ab3c:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ab40:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ab44:	0fc0      	lsrs	r0, r0, #31
 800ab46:	4770      	bx	lr

0800ab48 <__ieee754_sqrt>:
 800ab48:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800acec <__ieee754_sqrt+0x1a4>
 800ab4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab50:	ea3c 0c01 	bics.w	ip, ip, r1
 800ab54:	460b      	mov	r3, r1
 800ab56:	4606      	mov	r6, r0
 800ab58:	460d      	mov	r5, r1
 800ab5a:	460a      	mov	r2, r1
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	d10e      	bne.n	800ab7e <__ieee754_sqrt+0x36>
 800ab60:	4602      	mov	r2, r0
 800ab62:	f7f5 fcb9 	bl	80004d8 <__aeabi_dmul>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	f7f5 fafd 	bl	800016c <__adddf3>
 800ab72:	4606      	mov	r6, r0
 800ab74:	460d      	mov	r5, r1
 800ab76:	4630      	mov	r0, r6
 800ab78:	4629      	mov	r1, r5
 800ab7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7e:	2900      	cmp	r1, #0
 800ab80:	dc0d      	bgt.n	800ab9e <__ieee754_sqrt+0x56>
 800ab82:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ab86:	ea5c 0c00 	orrs.w	ip, ip, r0
 800ab8a:	d0f4      	beq.n	800ab76 <__ieee754_sqrt+0x2e>
 800ab8c:	b139      	cbz	r1, 800ab9e <__ieee754_sqrt+0x56>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	f7f5 faea 	bl	8000168 <__aeabi_dsub>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	f7f5 fdc8 	bl	800072c <__aeabi_ddiv>
 800ab9c:	e7e9      	b.n	800ab72 <__ieee754_sqrt+0x2a>
 800ab9e:	1512      	asrs	r2, r2, #20
 800aba0:	f000 8089 	beq.w	800acb6 <__ieee754_sqrt+0x16e>
 800aba4:	2500      	movs	r5, #0
 800aba6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abaa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800abae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abb2:	07d2      	lsls	r2, r2, #31
 800abb4:	bf5c      	itt	pl
 800abb6:	005b      	lslpl	r3, r3, #1
 800abb8:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800abbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800abc0:	bf58      	it	pl
 800abc2:	0064      	lslpl	r4, r4, #1
 800abc4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800abc8:	0062      	lsls	r2, r4, #1
 800abca:	2016      	movs	r0, #22
 800abcc:	4629      	mov	r1, r5
 800abce:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800abd2:	1076      	asrs	r6, r6, #1
 800abd4:	190f      	adds	r7, r1, r4
 800abd6:	429f      	cmp	r7, r3
 800abd8:	bfde      	ittt	le
 800abda:	1bdb      	suble	r3, r3, r7
 800abdc:	1939      	addle	r1, r7, r4
 800abde:	192d      	addle	r5, r5, r4
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	3801      	subs	r0, #1
 800abe4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800abe8:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800abec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800abf0:	d1f0      	bne.n	800abd4 <__ieee754_sqrt+0x8c>
 800abf2:	4604      	mov	r4, r0
 800abf4:	2720      	movs	r7, #32
 800abf6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800abfa:	428b      	cmp	r3, r1
 800abfc:	eb0c 0e00 	add.w	lr, ip, r0
 800ac00:	dc02      	bgt.n	800ac08 <__ieee754_sqrt+0xc0>
 800ac02:	d113      	bne.n	800ac2c <__ieee754_sqrt+0xe4>
 800ac04:	4596      	cmp	lr, r2
 800ac06:	d811      	bhi.n	800ac2c <__ieee754_sqrt+0xe4>
 800ac08:	f1be 0f00 	cmp.w	lr, #0
 800ac0c:	eb0e 000c 	add.w	r0, lr, ip
 800ac10:	da56      	bge.n	800acc0 <__ieee754_sqrt+0x178>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	db54      	blt.n	800acc0 <__ieee754_sqrt+0x178>
 800ac16:	f101 0801 	add.w	r8, r1, #1
 800ac1a:	1a5b      	subs	r3, r3, r1
 800ac1c:	4641      	mov	r1, r8
 800ac1e:	4596      	cmp	lr, r2
 800ac20:	bf88      	it	hi
 800ac22:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ac26:	eba2 020e 	sub.w	r2, r2, lr
 800ac2a:	4464      	add	r4, ip
 800ac2c:	005b      	lsls	r3, r3, #1
 800ac2e:	3f01      	subs	r7, #1
 800ac30:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ac34:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ac38:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ac3c:	d1dd      	bne.n	800abfa <__ieee754_sqrt+0xb2>
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	d01b      	beq.n	800ac7a <__ieee754_sqrt+0x132>
 800ac42:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800acf0 <__ieee754_sqrt+0x1a8>
 800ac46:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800acf4 <__ieee754_sqrt+0x1ac>
 800ac4a:	e9da 0100 	ldrd	r0, r1, [sl]
 800ac4e:	e9db 2300 	ldrd	r2, r3, [fp]
 800ac52:	f7f5 fa89 	bl	8000168 <__aeabi_dsub>
 800ac56:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4640      	mov	r0, r8
 800ac60:	4649      	mov	r1, r9
 800ac62:	f7f5 feb5 	bl	80009d0 <__aeabi_dcmple>
 800ac66:	b140      	cbz	r0, 800ac7a <__ieee754_sqrt+0x132>
 800ac68:	e9da 0100 	ldrd	r0, r1, [sl]
 800ac6c:	e9db 2300 	ldrd	r2, r3, [fp]
 800ac70:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ac74:	d126      	bne.n	800acc4 <__ieee754_sqrt+0x17c>
 800ac76:	463c      	mov	r4, r7
 800ac78:	3501      	adds	r5, #1
 800ac7a:	106b      	asrs	r3, r5, #1
 800ac7c:	0864      	lsrs	r4, r4, #1
 800ac7e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ac82:	07ea      	lsls	r2, r5, #31
 800ac84:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ac88:	bf48      	it	mi
 800ac8a:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800ac8e:	4620      	mov	r0, r4
 800ac90:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800ac94:	e76d      	b.n	800ab72 <__ieee754_sqrt+0x2a>
 800ac96:	0ae3      	lsrs	r3, r4, #11
 800ac98:	3915      	subs	r1, #21
 800ac9a:	0564      	lsls	r4, r4, #21
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d0fa      	beq.n	800ac96 <__ieee754_sqrt+0x14e>
 800aca0:	02d8      	lsls	r0, r3, #11
 800aca2:	d50a      	bpl.n	800acba <__ieee754_sqrt+0x172>
 800aca4:	f1c2 0020 	rsb	r0, r2, #32
 800aca8:	fa24 f000 	lsr.w	r0, r4, r0
 800acac:	1e55      	subs	r5, r2, #1
 800acae:	4094      	lsls	r4, r2
 800acb0:	4303      	orrs	r3, r0
 800acb2:	1b4a      	subs	r2, r1, r5
 800acb4:	e776      	b.n	800aba4 <__ieee754_sqrt+0x5c>
 800acb6:	4611      	mov	r1, r2
 800acb8:	e7f0      	b.n	800ac9c <__ieee754_sqrt+0x154>
 800acba:	005b      	lsls	r3, r3, #1
 800acbc:	3201      	adds	r2, #1
 800acbe:	e7ef      	b.n	800aca0 <__ieee754_sqrt+0x158>
 800acc0:	4688      	mov	r8, r1
 800acc2:	e7aa      	b.n	800ac1a <__ieee754_sqrt+0xd2>
 800acc4:	f7f5 fa52 	bl	800016c <__adddf3>
 800acc8:	e9da 8900 	ldrd	r8, r9, [sl]
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	4640      	mov	r0, r8
 800acd2:	4649      	mov	r1, r9
 800acd4:	f7f5 fe72 	bl	80009bc <__aeabi_dcmplt>
 800acd8:	b120      	cbz	r0, 800ace4 <__ieee754_sqrt+0x19c>
 800acda:	1ca1      	adds	r1, r4, #2
 800acdc:	bf08      	it	eq
 800acde:	3501      	addeq	r5, #1
 800ace0:	3402      	adds	r4, #2
 800ace2:	e7ca      	b.n	800ac7a <__ieee754_sqrt+0x132>
 800ace4:	3401      	adds	r4, #1
 800ace6:	f024 0401 	bic.w	r4, r4, #1
 800acea:	e7c6      	b.n	800ac7a <__ieee754_sqrt+0x132>
 800acec:	7ff00000 	.word	0x7ff00000
 800acf0:	200001f8 	.word	0x200001f8
 800acf4:	20000200 	.word	0x20000200

0800acf8 <floor>:
 800acf8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800acfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad00:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ad04:	2e13      	cmp	r6, #19
 800ad06:	460b      	mov	r3, r1
 800ad08:	4607      	mov	r7, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	dc32      	bgt.n	800ad76 <floor+0x7e>
 800ad10:	2e00      	cmp	r6, #0
 800ad12:	da14      	bge.n	800ad3e <floor+0x46>
 800ad14:	a334      	add	r3, pc, #208	; (adr r3, 800ade8 <floor+0xf0>)
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	f7f5 fa27 	bl	800016c <__adddf3>
 800ad1e:	2200      	movs	r2, #0
 800ad20:	2300      	movs	r3, #0
 800ad22:	f7f5 fe69 	bl	80009f8 <__aeabi_dcmpgt>
 800ad26:	b138      	cbz	r0, 800ad38 <floor+0x40>
 800ad28:	2c00      	cmp	r4, #0
 800ad2a:	da56      	bge.n	800adda <floor+0xe2>
 800ad2c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ad30:	4325      	orrs	r5, r4
 800ad32:	d055      	beq.n	800ade0 <floor+0xe8>
 800ad34:	2500      	movs	r5, #0
 800ad36:	4c2e      	ldr	r4, [pc, #184]	; (800adf0 <floor+0xf8>)
 800ad38:	4623      	mov	r3, r4
 800ad3a:	462f      	mov	r7, r5
 800ad3c:	e025      	b.n	800ad8a <floor+0x92>
 800ad3e:	4a2d      	ldr	r2, [pc, #180]	; (800adf4 <floor+0xfc>)
 800ad40:	fa42 f806 	asr.w	r8, r2, r6
 800ad44:	ea01 0208 	and.w	r2, r1, r8
 800ad48:	4302      	orrs	r2, r0
 800ad4a:	d01e      	beq.n	800ad8a <floor+0x92>
 800ad4c:	a326      	add	r3, pc, #152	; (adr r3, 800ade8 <floor+0xf0>)
 800ad4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad52:	f7f5 fa0b 	bl	800016c <__adddf3>
 800ad56:	2200      	movs	r2, #0
 800ad58:	2300      	movs	r3, #0
 800ad5a:	f7f5 fe4d 	bl	80009f8 <__aeabi_dcmpgt>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d0ea      	beq.n	800ad38 <floor+0x40>
 800ad62:	2c00      	cmp	r4, #0
 800ad64:	bfbe      	ittt	lt
 800ad66:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ad6a:	4133      	asrlt	r3, r6
 800ad6c:	18e4      	addlt	r4, r4, r3
 800ad6e:	2500      	movs	r5, #0
 800ad70:	ea24 0408 	bic.w	r4, r4, r8
 800ad74:	e7e0      	b.n	800ad38 <floor+0x40>
 800ad76:	2e33      	cmp	r6, #51	; 0x33
 800ad78:	dd0b      	ble.n	800ad92 <floor+0x9a>
 800ad7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ad7e:	d104      	bne.n	800ad8a <floor+0x92>
 800ad80:	4602      	mov	r2, r0
 800ad82:	f7f5 f9f3 	bl	800016c <__adddf3>
 800ad86:	4607      	mov	r7, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad92:	f04f 38ff 	mov.w	r8, #4294967295
 800ad96:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ad9a:	fa28 f802 	lsr.w	r8, r8, r2
 800ad9e:	ea10 0f08 	tst.w	r0, r8
 800ada2:	d0f2      	beq.n	800ad8a <floor+0x92>
 800ada4:	a310      	add	r3, pc, #64	; (adr r3, 800ade8 <floor+0xf0>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	f7f5 f9df 	bl	800016c <__adddf3>
 800adae:	2200      	movs	r2, #0
 800adb0:	2300      	movs	r3, #0
 800adb2:	f7f5 fe21 	bl	80009f8 <__aeabi_dcmpgt>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d0be      	beq.n	800ad38 <floor+0x40>
 800adba:	2c00      	cmp	r4, #0
 800adbc:	da0a      	bge.n	800add4 <floor+0xdc>
 800adbe:	2e14      	cmp	r6, #20
 800adc0:	d101      	bne.n	800adc6 <floor+0xce>
 800adc2:	3401      	adds	r4, #1
 800adc4:	e006      	b.n	800add4 <floor+0xdc>
 800adc6:	2301      	movs	r3, #1
 800adc8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800adcc:	40b3      	lsls	r3, r6
 800adce:	441d      	add	r5, r3
 800add0:	42af      	cmp	r7, r5
 800add2:	d8f6      	bhi.n	800adc2 <floor+0xca>
 800add4:	ea25 0508 	bic.w	r5, r5, r8
 800add8:	e7ae      	b.n	800ad38 <floor+0x40>
 800adda:	2500      	movs	r5, #0
 800addc:	462c      	mov	r4, r5
 800adde:	e7ab      	b.n	800ad38 <floor+0x40>
 800ade0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ade4:	e7a8      	b.n	800ad38 <floor+0x40>
 800ade6:	bf00      	nop
 800ade8:	8800759c 	.word	0x8800759c
 800adec:	7e37e43c 	.word	0x7e37e43c
 800adf0:	bff00000 	.word	0xbff00000
 800adf4:	000fffff 	.word	0x000fffff

0800adf8 <__ieee754_pow>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	b093      	sub	sp, #76	; 0x4c
 800adfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae02:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800ae06:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800ae0a:	4689      	mov	r9, r1
 800ae0c:	ea56 0102 	orrs.w	r1, r6, r2
 800ae10:	4680      	mov	r8, r0
 800ae12:	d111      	bne.n	800ae38 <__ieee754_pow+0x40>
 800ae14:	1803      	adds	r3, r0, r0
 800ae16:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800ae1a:	4152      	adcs	r2, r2
 800ae1c:	4299      	cmp	r1, r3
 800ae1e:	4b82      	ldr	r3, [pc, #520]	; (800b028 <__ieee754_pow+0x230>)
 800ae20:	4193      	sbcs	r3, r2
 800ae22:	f080 84ba 	bcs.w	800b79a <__ieee754_pow+0x9a2>
 800ae26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae2a:	4640      	mov	r0, r8
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	f7f5 f99d 	bl	800016c <__adddf3>
 800ae32:	4683      	mov	fp, r0
 800ae34:	468c      	mov	ip, r1
 800ae36:	e06f      	b.n	800af18 <__ieee754_pow+0x120>
 800ae38:	4b7c      	ldr	r3, [pc, #496]	; (800b02c <__ieee754_pow+0x234>)
 800ae3a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800ae3e:	429c      	cmp	r4, r3
 800ae40:	464d      	mov	r5, r9
 800ae42:	4682      	mov	sl, r0
 800ae44:	dc06      	bgt.n	800ae54 <__ieee754_pow+0x5c>
 800ae46:	d101      	bne.n	800ae4c <__ieee754_pow+0x54>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d1ec      	bne.n	800ae26 <__ieee754_pow+0x2e>
 800ae4c:	429e      	cmp	r6, r3
 800ae4e:	dc01      	bgt.n	800ae54 <__ieee754_pow+0x5c>
 800ae50:	d10f      	bne.n	800ae72 <__ieee754_pow+0x7a>
 800ae52:	b172      	cbz	r2, 800ae72 <__ieee754_pow+0x7a>
 800ae54:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ae58:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ae5c:	ea55 050a 	orrs.w	r5, r5, sl
 800ae60:	d1e1      	bne.n	800ae26 <__ieee754_pow+0x2e>
 800ae62:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ae66:	18db      	adds	r3, r3, r3
 800ae68:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ae6c:	4152      	adcs	r2, r2
 800ae6e:	429d      	cmp	r5, r3
 800ae70:	e7d5      	b.n	800ae1e <__ieee754_pow+0x26>
 800ae72:	2d00      	cmp	r5, #0
 800ae74:	da39      	bge.n	800aeea <__ieee754_pow+0xf2>
 800ae76:	4b6e      	ldr	r3, [pc, #440]	; (800b030 <__ieee754_pow+0x238>)
 800ae78:	429e      	cmp	r6, r3
 800ae7a:	dc52      	bgt.n	800af22 <__ieee754_pow+0x12a>
 800ae7c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ae80:	429e      	cmp	r6, r3
 800ae82:	f340 849d 	ble.w	800b7c0 <__ieee754_pow+0x9c8>
 800ae86:	1533      	asrs	r3, r6, #20
 800ae88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ae8c:	2b14      	cmp	r3, #20
 800ae8e:	dd0f      	ble.n	800aeb0 <__ieee754_pow+0xb8>
 800ae90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ae94:	fa22 f103 	lsr.w	r1, r2, r3
 800ae98:	fa01 f303 	lsl.w	r3, r1, r3
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	f040 848f 	bne.w	800b7c0 <__ieee754_pow+0x9c8>
 800aea2:	f001 0101 	and.w	r1, r1, #1
 800aea6:	f1c1 0302 	rsb	r3, r1, #2
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	b182      	cbz	r2, 800aed0 <__ieee754_pow+0xd8>
 800aeae:	e05d      	b.n	800af6c <__ieee754_pow+0x174>
 800aeb0:	2a00      	cmp	r2, #0
 800aeb2:	d159      	bne.n	800af68 <__ieee754_pow+0x170>
 800aeb4:	f1c3 0314 	rsb	r3, r3, #20
 800aeb8:	fa46 f103 	asr.w	r1, r6, r3
 800aebc:	fa01 f303 	lsl.w	r3, r1, r3
 800aec0:	42b3      	cmp	r3, r6
 800aec2:	f040 847a 	bne.w	800b7ba <__ieee754_pow+0x9c2>
 800aec6:	f001 0101 	and.w	r1, r1, #1
 800aeca:	f1c1 0302 	rsb	r3, r1, #2
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	4b58      	ldr	r3, [pc, #352]	; (800b034 <__ieee754_pow+0x23c>)
 800aed2:	429e      	cmp	r6, r3
 800aed4:	d132      	bne.n	800af3c <__ieee754_pow+0x144>
 800aed6:	2f00      	cmp	r7, #0
 800aed8:	f280 846b 	bge.w	800b7b2 <__ieee754_pow+0x9ba>
 800aedc:	4642      	mov	r2, r8
 800aede:	464b      	mov	r3, r9
 800aee0:	2000      	movs	r0, #0
 800aee2:	4954      	ldr	r1, [pc, #336]	; (800b034 <__ieee754_pow+0x23c>)
 800aee4:	f7f5 fc22 	bl	800072c <__aeabi_ddiv>
 800aee8:	e7a3      	b.n	800ae32 <__ieee754_pow+0x3a>
 800aeea:	2300      	movs	r3, #0
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	2a00      	cmp	r2, #0
 800aef0:	d13c      	bne.n	800af6c <__ieee754_pow+0x174>
 800aef2:	4b4e      	ldr	r3, [pc, #312]	; (800b02c <__ieee754_pow+0x234>)
 800aef4:	429e      	cmp	r6, r3
 800aef6:	d1eb      	bne.n	800aed0 <__ieee754_pow+0xd8>
 800aef8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800aefc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800af00:	ea53 030a 	orrs.w	r3, r3, sl
 800af04:	f000 8449 	beq.w	800b79a <__ieee754_pow+0x9a2>
 800af08:	4b4b      	ldr	r3, [pc, #300]	; (800b038 <__ieee754_pow+0x240>)
 800af0a:	429c      	cmp	r4, r3
 800af0c:	dd0b      	ble.n	800af26 <__ieee754_pow+0x12e>
 800af0e:	2f00      	cmp	r7, #0
 800af10:	f2c0 8449 	blt.w	800b7a6 <__ieee754_pow+0x9ae>
 800af14:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800af18:	4658      	mov	r0, fp
 800af1a:	4661      	mov	r1, ip
 800af1c:	b013      	add	sp, #76	; 0x4c
 800af1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af22:	2302      	movs	r3, #2
 800af24:	e7e2      	b.n	800aeec <__ieee754_pow+0xf4>
 800af26:	2f00      	cmp	r7, #0
 800af28:	f04f 0b00 	mov.w	fp, #0
 800af2c:	f04f 0c00 	mov.w	ip, #0
 800af30:	daf2      	bge.n	800af18 <__ieee754_pow+0x120>
 800af32:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800af36:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800af3a:	e7ed      	b.n	800af18 <__ieee754_pow+0x120>
 800af3c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800af40:	d106      	bne.n	800af50 <__ieee754_pow+0x158>
 800af42:	4642      	mov	r2, r8
 800af44:	464b      	mov	r3, r9
 800af46:	4640      	mov	r0, r8
 800af48:	4649      	mov	r1, r9
 800af4a:	f7f5 fac5 	bl	80004d8 <__aeabi_dmul>
 800af4e:	e770      	b.n	800ae32 <__ieee754_pow+0x3a>
 800af50:	4b3a      	ldr	r3, [pc, #232]	; (800b03c <__ieee754_pow+0x244>)
 800af52:	429f      	cmp	r7, r3
 800af54:	d10a      	bne.n	800af6c <__ieee754_pow+0x174>
 800af56:	2d00      	cmp	r5, #0
 800af58:	db08      	blt.n	800af6c <__ieee754_pow+0x174>
 800af5a:	4640      	mov	r0, r8
 800af5c:	4649      	mov	r1, r9
 800af5e:	b013      	add	sp, #76	; 0x4c
 800af60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	f7ff bdf0 	b.w	800ab48 <__ieee754_sqrt>
 800af68:	2300      	movs	r3, #0
 800af6a:	9300      	str	r3, [sp, #0]
 800af6c:	4640      	mov	r0, r8
 800af6e:	4649      	mov	r1, r9
 800af70:	f000 fc58 	bl	800b824 <fabs>
 800af74:	4683      	mov	fp, r0
 800af76:	468c      	mov	ip, r1
 800af78:	f1ba 0f00 	cmp.w	sl, #0
 800af7c:	d128      	bne.n	800afd0 <__ieee754_pow+0x1d8>
 800af7e:	b124      	cbz	r4, 800af8a <__ieee754_pow+0x192>
 800af80:	4b2c      	ldr	r3, [pc, #176]	; (800b034 <__ieee754_pow+0x23c>)
 800af82:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800af86:	429a      	cmp	r2, r3
 800af88:	d122      	bne.n	800afd0 <__ieee754_pow+0x1d8>
 800af8a:	2f00      	cmp	r7, #0
 800af8c:	da07      	bge.n	800af9e <__ieee754_pow+0x1a6>
 800af8e:	465a      	mov	r2, fp
 800af90:	4663      	mov	r3, ip
 800af92:	2000      	movs	r0, #0
 800af94:	4927      	ldr	r1, [pc, #156]	; (800b034 <__ieee754_pow+0x23c>)
 800af96:	f7f5 fbc9 	bl	800072c <__aeabi_ddiv>
 800af9a:	4683      	mov	fp, r0
 800af9c:	468c      	mov	ip, r1
 800af9e:	2d00      	cmp	r5, #0
 800afa0:	daba      	bge.n	800af18 <__ieee754_pow+0x120>
 800afa2:	9b00      	ldr	r3, [sp, #0]
 800afa4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800afa8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800afac:	431c      	orrs	r4, r3
 800afae:	d108      	bne.n	800afc2 <__ieee754_pow+0x1ca>
 800afb0:	465a      	mov	r2, fp
 800afb2:	4663      	mov	r3, ip
 800afb4:	4658      	mov	r0, fp
 800afb6:	4661      	mov	r1, ip
 800afb8:	f7f5 f8d6 	bl	8000168 <__aeabi_dsub>
 800afbc:	4602      	mov	r2, r0
 800afbe:	460b      	mov	r3, r1
 800afc0:	e790      	b.n	800aee4 <__ieee754_pow+0xec>
 800afc2:	9b00      	ldr	r3, [sp, #0]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d1a7      	bne.n	800af18 <__ieee754_pow+0x120>
 800afc8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800afcc:	469c      	mov	ip, r3
 800afce:	e7a3      	b.n	800af18 <__ieee754_pow+0x120>
 800afd0:	0feb      	lsrs	r3, r5, #31
 800afd2:	3b01      	subs	r3, #1
 800afd4:	930c      	str	r3, [sp, #48]	; 0x30
 800afd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afd8:	9b00      	ldr	r3, [sp, #0]
 800afda:	4313      	orrs	r3, r2
 800afdc:	d104      	bne.n	800afe8 <__ieee754_pow+0x1f0>
 800afde:	4642      	mov	r2, r8
 800afe0:	464b      	mov	r3, r9
 800afe2:	4640      	mov	r0, r8
 800afe4:	4649      	mov	r1, r9
 800afe6:	e7e7      	b.n	800afb8 <__ieee754_pow+0x1c0>
 800afe8:	4b15      	ldr	r3, [pc, #84]	; (800b040 <__ieee754_pow+0x248>)
 800afea:	429e      	cmp	r6, r3
 800afec:	f340 80f6 	ble.w	800b1dc <__ieee754_pow+0x3e4>
 800aff0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800aff4:	429e      	cmp	r6, r3
 800aff6:	4b10      	ldr	r3, [pc, #64]	; (800b038 <__ieee754_pow+0x240>)
 800aff8:	dd09      	ble.n	800b00e <__ieee754_pow+0x216>
 800affa:	429c      	cmp	r4, r3
 800affc:	dc0c      	bgt.n	800b018 <__ieee754_pow+0x220>
 800affe:	2f00      	cmp	r7, #0
 800b000:	da0c      	bge.n	800b01c <__ieee754_pow+0x224>
 800b002:	2000      	movs	r0, #0
 800b004:	b013      	add	sp, #76	; 0x4c
 800b006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00a:	f000 bcb2 	b.w	800b972 <__math_oflow>
 800b00e:	429c      	cmp	r4, r3
 800b010:	dbf5      	blt.n	800affe <__ieee754_pow+0x206>
 800b012:	4b08      	ldr	r3, [pc, #32]	; (800b034 <__ieee754_pow+0x23c>)
 800b014:	429c      	cmp	r4, r3
 800b016:	dd15      	ble.n	800b044 <__ieee754_pow+0x24c>
 800b018:	2f00      	cmp	r7, #0
 800b01a:	dcf2      	bgt.n	800b002 <__ieee754_pow+0x20a>
 800b01c:	2000      	movs	r0, #0
 800b01e:	b013      	add	sp, #76	; 0x4c
 800b020:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	f000 bca0 	b.w	800b968 <__math_uflow>
 800b028:	fff00000 	.word	0xfff00000
 800b02c:	7ff00000 	.word	0x7ff00000
 800b030:	433fffff 	.word	0x433fffff
 800b034:	3ff00000 	.word	0x3ff00000
 800b038:	3fefffff 	.word	0x3fefffff
 800b03c:	3fe00000 	.word	0x3fe00000
 800b040:	41e00000 	.word	0x41e00000
 800b044:	4661      	mov	r1, ip
 800b046:	2200      	movs	r2, #0
 800b048:	4658      	mov	r0, fp
 800b04a:	4b5f      	ldr	r3, [pc, #380]	; (800b1c8 <__ieee754_pow+0x3d0>)
 800b04c:	f7f5 f88c 	bl	8000168 <__aeabi_dsub>
 800b050:	a355      	add	r3, pc, #340	; (adr r3, 800b1a8 <__ieee754_pow+0x3b0>)
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	4604      	mov	r4, r0
 800b058:	460d      	mov	r5, r1
 800b05a:	f7f5 fa3d 	bl	80004d8 <__aeabi_dmul>
 800b05e:	a354      	add	r3, pc, #336	; (adr r3, 800b1b0 <__ieee754_pow+0x3b8>)
 800b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b064:	4606      	mov	r6, r0
 800b066:	460f      	mov	r7, r1
 800b068:	4620      	mov	r0, r4
 800b06a:	4629      	mov	r1, r5
 800b06c:	f7f5 fa34 	bl	80004d8 <__aeabi_dmul>
 800b070:	2200      	movs	r2, #0
 800b072:	4682      	mov	sl, r0
 800b074:	468b      	mov	fp, r1
 800b076:	4620      	mov	r0, r4
 800b078:	4629      	mov	r1, r5
 800b07a:	4b54      	ldr	r3, [pc, #336]	; (800b1cc <__ieee754_pow+0x3d4>)
 800b07c:	f7f5 fa2c 	bl	80004d8 <__aeabi_dmul>
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	a14c      	add	r1, pc, #304	; (adr r1, 800b1b8 <__ieee754_pow+0x3c0>)
 800b086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b08a:	f7f5 f86d 	bl	8000168 <__aeabi_dsub>
 800b08e:	4622      	mov	r2, r4
 800b090:	462b      	mov	r3, r5
 800b092:	f7f5 fa21 	bl	80004d8 <__aeabi_dmul>
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	2000      	movs	r0, #0
 800b09c:	494c      	ldr	r1, [pc, #304]	; (800b1d0 <__ieee754_pow+0x3d8>)
 800b09e:	f7f5 f863 	bl	8000168 <__aeabi_dsub>
 800b0a2:	4622      	mov	r2, r4
 800b0a4:	462b      	mov	r3, r5
 800b0a6:	4680      	mov	r8, r0
 800b0a8:	4689      	mov	r9, r1
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	4629      	mov	r1, r5
 800b0ae:	f7f5 fa13 	bl	80004d8 <__aeabi_dmul>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	4640      	mov	r0, r8
 800b0b8:	4649      	mov	r1, r9
 800b0ba:	f7f5 fa0d 	bl	80004d8 <__aeabi_dmul>
 800b0be:	a340      	add	r3, pc, #256	; (adr r3, 800b1c0 <__ieee754_pow+0x3c8>)
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	f7f5 fa08 	bl	80004d8 <__aeabi_dmul>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	4650      	mov	r0, sl
 800b0ce:	4659      	mov	r1, fp
 800b0d0:	f7f5 f84a 	bl	8000168 <__aeabi_dsub>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4604      	mov	r4, r0
 800b0da:	460d      	mov	r5, r1
 800b0dc:	4630      	mov	r0, r6
 800b0de:	4639      	mov	r1, r7
 800b0e0:	f7f5 f844 	bl	800016c <__adddf3>
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	4632      	mov	r2, r6
 800b0e8:	463b      	mov	r3, r7
 800b0ea:	4682      	mov	sl, r0
 800b0ec:	468b      	mov	fp, r1
 800b0ee:	f7f5 f83b 	bl	8000168 <__aeabi_dsub>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	f7f5 f835 	bl	8000168 <__aeabi_dsub>
 800b0fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b102:	9b00      	ldr	r3, [sp, #0]
 800b104:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b106:	3b01      	subs	r3, #1
 800b108:	4313      	orrs	r3, r2
 800b10a:	f04f 0600 	mov.w	r6, #0
 800b10e:	f04f 0200 	mov.w	r2, #0
 800b112:	bf0c      	ite	eq
 800b114:	4b2f      	ldreq	r3, [pc, #188]	; (800b1d4 <__ieee754_pow+0x3dc>)
 800b116:	4b2c      	ldrne	r3, [pc, #176]	; (800b1c8 <__ieee754_pow+0x3d0>)
 800b118:	4604      	mov	r4, r0
 800b11a:	460d      	mov	r5, r1
 800b11c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b120:	e9cd 2300 	strd	r2, r3, [sp]
 800b124:	4632      	mov	r2, r6
 800b126:	463b      	mov	r3, r7
 800b128:	f7f5 f81e 	bl	8000168 <__aeabi_dsub>
 800b12c:	4652      	mov	r2, sl
 800b12e:	465b      	mov	r3, fp
 800b130:	f7f5 f9d2 	bl	80004d8 <__aeabi_dmul>
 800b134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b138:	4680      	mov	r8, r0
 800b13a:	4689      	mov	r9, r1
 800b13c:	4620      	mov	r0, r4
 800b13e:	4629      	mov	r1, r5
 800b140:	f7f5 f9ca 	bl	80004d8 <__aeabi_dmul>
 800b144:	4602      	mov	r2, r0
 800b146:	460b      	mov	r3, r1
 800b148:	4640      	mov	r0, r8
 800b14a:	4649      	mov	r1, r9
 800b14c:	f7f5 f80e 	bl	800016c <__adddf3>
 800b150:	4632      	mov	r2, r6
 800b152:	463b      	mov	r3, r7
 800b154:	4680      	mov	r8, r0
 800b156:	4689      	mov	r9, r1
 800b158:	4650      	mov	r0, sl
 800b15a:	4659      	mov	r1, fp
 800b15c:	f7f5 f9bc 	bl	80004d8 <__aeabi_dmul>
 800b160:	4604      	mov	r4, r0
 800b162:	460d      	mov	r5, r1
 800b164:	460b      	mov	r3, r1
 800b166:	4602      	mov	r2, r0
 800b168:	4649      	mov	r1, r9
 800b16a:	4640      	mov	r0, r8
 800b16c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b170:	f7f4 fffc 	bl	800016c <__adddf3>
 800b174:	4b18      	ldr	r3, [pc, #96]	; (800b1d8 <__ieee754_pow+0x3e0>)
 800b176:	4682      	mov	sl, r0
 800b178:	4299      	cmp	r1, r3
 800b17a:	460f      	mov	r7, r1
 800b17c:	460e      	mov	r6, r1
 800b17e:	f340 82e7 	ble.w	800b750 <__ieee754_pow+0x958>
 800b182:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b186:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b18a:	4303      	orrs	r3, r0
 800b18c:	f000 81e2 	beq.w	800b554 <__ieee754_pow+0x75c>
 800b190:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b194:	2200      	movs	r2, #0
 800b196:	2300      	movs	r3, #0
 800b198:	f7f5 fc10 	bl	80009bc <__aeabi_dcmplt>
 800b19c:	3800      	subs	r0, #0
 800b19e:	bf18      	it	ne
 800b1a0:	2001      	movne	r0, #1
 800b1a2:	e72f      	b.n	800b004 <__ieee754_pow+0x20c>
 800b1a4:	f3af 8000 	nop.w
 800b1a8:	60000000 	.word	0x60000000
 800b1ac:	3ff71547 	.word	0x3ff71547
 800b1b0:	f85ddf44 	.word	0xf85ddf44
 800b1b4:	3e54ae0b 	.word	0x3e54ae0b
 800b1b8:	55555555 	.word	0x55555555
 800b1bc:	3fd55555 	.word	0x3fd55555
 800b1c0:	652b82fe 	.word	0x652b82fe
 800b1c4:	3ff71547 	.word	0x3ff71547
 800b1c8:	3ff00000 	.word	0x3ff00000
 800b1cc:	3fd00000 	.word	0x3fd00000
 800b1d0:	3fe00000 	.word	0x3fe00000
 800b1d4:	bff00000 	.word	0xbff00000
 800b1d8:	408fffff 	.word	0x408fffff
 800b1dc:	4bd4      	ldr	r3, [pc, #848]	; (800b530 <__ieee754_pow+0x738>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	402b      	ands	r3, r5
 800b1e2:	b943      	cbnz	r3, 800b1f6 <__ieee754_pow+0x3fe>
 800b1e4:	4658      	mov	r0, fp
 800b1e6:	4661      	mov	r1, ip
 800b1e8:	4bd2      	ldr	r3, [pc, #840]	; (800b534 <__ieee754_pow+0x73c>)
 800b1ea:	f7f5 f975 	bl	80004d8 <__aeabi_dmul>
 800b1ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b1f2:	4683      	mov	fp, r0
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	1523      	asrs	r3, r4, #20
 800b1f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b1fc:	4413      	add	r3, r2
 800b1fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800b200:	4bcd      	ldr	r3, [pc, #820]	; (800b538 <__ieee754_pow+0x740>)
 800b202:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b206:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b20a:	429c      	cmp	r4, r3
 800b20c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b210:	dd08      	ble.n	800b224 <__ieee754_pow+0x42c>
 800b212:	4bca      	ldr	r3, [pc, #808]	; (800b53c <__ieee754_pow+0x744>)
 800b214:	429c      	cmp	r4, r3
 800b216:	f340 8164 	ble.w	800b4e2 <__ieee754_pow+0x6ea>
 800b21a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b21c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b220:	3301      	adds	r3, #1
 800b222:	930b      	str	r3, [sp, #44]	; 0x2c
 800b224:	2600      	movs	r6, #0
 800b226:	00f3      	lsls	r3, r6, #3
 800b228:	930d      	str	r3, [sp, #52]	; 0x34
 800b22a:	4bc5      	ldr	r3, [pc, #788]	; (800b540 <__ieee754_pow+0x748>)
 800b22c:	4658      	mov	r0, fp
 800b22e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b232:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b236:	4629      	mov	r1, r5
 800b238:	461a      	mov	r2, r3
 800b23a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b23e:	4623      	mov	r3, r4
 800b240:	f7f4 ff92 	bl	8000168 <__aeabi_dsub>
 800b244:	46da      	mov	sl, fp
 800b246:	462b      	mov	r3, r5
 800b248:	4652      	mov	r2, sl
 800b24a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b24e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b252:	f7f4 ff8b 	bl	800016c <__adddf3>
 800b256:	4602      	mov	r2, r0
 800b258:	460b      	mov	r3, r1
 800b25a:	2000      	movs	r0, #0
 800b25c:	49b9      	ldr	r1, [pc, #740]	; (800b544 <__ieee754_pow+0x74c>)
 800b25e:	f7f5 fa65 	bl	800072c <__aeabi_ddiv>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b26a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b26e:	f7f5 f933 	bl	80004d8 <__aeabi_dmul>
 800b272:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b276:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b27a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b27e:	2300      	movs	r3, #0
 800b280:	2200      	movs	r2, #0
 800b282:	46ab      	mov	fp, r5
 800b284:	106d      	asrs	r5, r5, #1
 800b286:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b28a:	9304      	str	r3, [sp, #16]
 800b28c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b290:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b294:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b298:	4640      	mov	r0, r8
 800b29a:	4649      	mov	r1, r9
 800b29c:	4614      	mov	r4, r2
 800b29e:	461d      	mov	r5, r3
 800b2a0:	f7f5 f91a 	bl	80004d8 <__aeabi_dmul>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b2ac:	f7f4 ff5c 	bl	8000168 <__aeabi_dsub>
 800b2b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	460f      	mov	r7, r1
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	f7f4 ff54 	bl	8000168 <__aeabi_dsub>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4650      	mov	r0, sl
 800b2c6:	4659      	mov	r1, fp
 800b2c8:	f7f4 ff4e 	bl	8000168 <__aeabi_dsub>
 800b2cc:	4642      	mov	r2, r8
 800b2ce:	464b      	mov	r3, r9
 800b2d0:	f7f5 f902 	bl	80004d8 <__aeabi_dmul>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	4630      	mov	r0, r6
 800b2da:	4639      	mov	r1, r7
 800b2dc:	f7f4 ff44 	bl	8000168 <__aeabi_dsub>
 800b2e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b2e4:	f7f5 f8f8 	bl	80004d8 <__aeabi_dmul>
 800b2e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	468b      	mov	fp, r1
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	f7f5 f8f0 	bl	80004d8 <__aeabi_dmul>
 800b2f8:	a37b      	add	r3, pc, #492	; (adr r3, 800b4e8 <__ieee754_pow+0x6f0>)
 800b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fe:	4604      	mov	r4, r0
 800b300:	460d      	mov	r5, r1
 800b302:	f7f5 f8e9 	bl	80004d8 <__aeabi_dmul>
 800b306:	a37a      	add	r3, pc, #488	; (adr r3, 800b4f0 <__ieee754_pow+0x6f8>)
 800b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30c:	f7f4 ff2e 	bl	800016c <__adddf3>
 800b310:	4622      	mov	r2, r4
 800b312:	462b      	mov	r3, r5
 800b314:	f7f5 f8e0 	bl	80004d8 <__aeabi_dmul>
 800b318:	a377      	add	r3, pc, #476	; (adr r3, 800b4f8 <__ieee754_pow+0x700>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	f7f4 ff25 	bl	800016c <__adddf3>
 800b322:	4622      	mov	r2, r4
 800b324:	462b      	mov	r3, r5
 800b326:	f7f5 f8d7 	bl	80004d8 <__aeabi_dmul>
 800b32a:	a375      	add	r3, pc, #468	; (adr r3, 800b500 <__ieee754_pow+0x708>)
 800b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b330:	f7f4 ff1c 	bl	800016c <__adddf3>
 800b334:	4622      	mov	r2, r4
 800b336:	462b      	mov	r3, r5
 800b338:	f7f5 f8ce 	bl	80004d8 <__aeabi_dmul>
 800b33c:	a372      	add	r3, pc, #456	; (adr r3, 800b508 <__ieee754_pow+0x710>)
 800b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b342:	f7f4 ff13 	bl	800016c <__adddf3>
 800b346:	4622      	mov	r2, r4
 800b348:	462b      	mov	r3, r5
 800b34a:	f7f5 f8c5 	bl	80004d8 <__aeabi_dmul>
 800b34e:	a370      	add	r3, pc, #448	; (adr r3, 800b510 <__ieee754_pow+0x718>)
 800b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b354:	f7f4 ff0a 	bl	800016c <__adddf3>
 800b358:	4622      	mov	r2, r4
 800b35a:	4606      	mov	r6, r0
 800b35c:	460f      	mov	r7, r1
 800b35e:	462b      	mov	r3, r5
 800b360:	4620      	mov	r0, r4
 800b362:	4629      	mov	r1, r5
 800b364:	f7f5 f8b8 	bl	80004d8 <__aeabi_dmul>
 800b368:	4602      	mov	r2, r0
 800b36a:	460b      	mov	r3, r1
 800b36c:	4630      	mov	r0, r6
 800b36e:	4639      	mov	r1, r7
 800b370:	f7f5 f8b2 	bl	80004d8 <__aeabi_dmul>
 800b374:	4604      	mov	r4, r0
 800b376:	460d      	mov	r5, r1
 800b378:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b37c:	4642      	mov	r2, r8
 800b37e:	464b      	mov	r3, r9
 800b380:	f7f4 fef4 	bl	800016c <__adddf3>
 800b384:	4652      	mov	r2, sl
 800b386:	465b      	mov	r3, fp
 800b388:	f7f5 f8a6 	bl	80004d8 <__aeabi_dmul>
 800b38c:	4622      	mov	r2, r4
 800b38e:	462b      	mov	r3, r5
 800b390:	f7f4 feec 	bl	800016c <__adddf3>
 800b394:	4642      	mov	r2, r8
 800b396:	4606      	mov	r6, r0
 800b398:	460f      	mov	r7, r1
 800b39a:	464b      	mov	r3, r9
 800b39c:	4640      	mov	r0, r8
 800b39e:	4649      	mov	r1, r9
 800b3a0:	f7f5 f89a 	bl	80004d8 <__aeabi_dmul>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	4b66      	ldr	r3, [pc, #408]	; (800b548 <__ieee754_pow+0x750>)
 800b3b0:	f7f4 fedc 	bl	800016c <__adddf3>
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	463b      	mov	r3, r7
 800b3b8:	f7f4 fed8 	bl	800016c <__adddf3>
 800b3bc:	2400      	movs	r4, #0
 800b3be:	460d      	mov	r5, r1
 800b3c0:	4622      	mov	r2, r4
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4640      	mov	r0, r8
 800b3c6:	4649      	mov	r1, r9
 800b3c8:	f7f5 f886 	bl	80004d8 <__aeabi_dmul>
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	4680      	mov	r8, r0
 800b3d0:	4689      	mov	r9, r1
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	4b5c      	ldr	r3, [pc, #368]	; (800b548 <__ieee754_pow+0x750>)
 800b3d8:	f7f4 fec6 	bl	8000168 <__aeabi_dsub>
 800b3dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b3e0:	f7f4 fec2 	bl	8000168 <__aeabi_dsub>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	f7f4 febc 	bl	8000168 <__aeabi_dsub>
 800b3f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3f4:	f7f5 f870 	bl	80004d8 <__aeabi_dmul>
 800b3f8:	4622      	mov	r2, r4
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	460f      	mov	r7, r1
 800b3fe:	462b      	mov	r3, r5
 800b400:	4650      	mov	r0, sl
 800b402:	4659      	mov	r1, fp
 800b404:	f7f5 f868 	bl	80004d8 <__aeabi_dmul>
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	4630      	mov	r0, r6
 800b40e:	4639      	mov	r1, r7
 800b410:	f7f4 feac 	bl	800016c <__adddf3>
 800b414:	2400      	movs	r4, #0
 800b416:	4606      	mov	r6, r0
 800b418:	460f      	mov	r7, r1
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	4640      	mov	r0, r8
 800b420:	4649      	mov	r1, r9
 800b422:	f7f4 fea3 	bl	800016c <__adddf3>
 800b426:	a33c      	add	r3, pc, #240	; (adr r3, 800b518 <__ieee754_pow+0x720>)
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	4620      	mov	r0, r4
 800b42e:	460d      	mov	r5, r1
 800b430:	f7f5 f852 	bl	80004d8 <__aeabi_dmul>
 800b434:	4642      	mov	r2, r8
 800b436:	464b      	mov	r3, r9
 800b438:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b43c:	4620      	mov	r0, r4
 800b43e:	4629      	mov	r1, r5
 800b440:	f7f4 fe92 	bl	8000168 <__aeabi_dsub>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	4630      	mov	r0, r6
 800b44a:	4639      	mov	r1, r7
 800b44c:	f7f4 fe8c 	bl	8000168 <__aeabi_dsub>
 800b450:	a333      	add	r3, pc, #204	; (adr r3, 800b520 <__ieee754_pow+0x728>)
 800b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b456:	f7f5 f83f 	bl	80004d8 <__aeabi_dmul>
 800b45a:	a333      	add	r3, pc, #204	; (adr r3, 800b528 <__ieee754_pow+0x730>)
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	4606      	mov	r6, r0
 800b462:	460f      	mov	r7, r1
 800b464:	4620      	mov	r0, r4
 800b466:	4629      	mov	r1, r5
 800b468:	f7f5 f836 	bl	80004d8 <__aeabi_dmul>
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	4630      	mov	r0, r6
 800b472:	4639      	mov	r1, r7
 800b474:	f7f4 fe7a 	bl	800016c <__adddf3>
 800b478:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b47a:	4b34      	ldr	r3, [pc, #208]	; (800b54c <__ieee754_pow+0x754>)
 800b47c:	4413      	add	r3, r2
 800b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b482:	f7f4 fe73 	bl	800016c <__adddf3>
 800b486:	4680      	mov	r8, r0
 800b488:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b48a:	4689      	mov	r9, r1
 800b48c:	f7f4 ffba 	bl	8000404 <__aeabi_i2d>
 800b490:	4604      	mov	r4, r0
 800b492:	460d      	mov	r5, r1
 800b494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b498:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b49a:	4b2d      	ldr	r3, [pc, #180]	; (800b550 <__ieee754_pow+0x758>)
 800b49c:	4413      	add	r3, r2
 800b49e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b4a2:	4642      	mov	r2, r8
 800b4a4:	464b      	mov	r3, r9
 800b4a6:	f7f4 fe61 	bl	800016c <__adddf3>
 800b4aa:	4632      	mov	r2, r6
 800b4ac:	463b      	mov	r3, r7
 800b4ae:	f7f4 fe5d 	bl	800016c <__adddf3>
 800b4b2:	4622      	mov	r2, r4
 800b4b4:	462b      	mov	r3, r5
 800b4b6:	f7f4 fe59 	bl	800016c <__adddf3>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	4622      	mov	r2, r4
 800b4be:	462b      	mov	r3, r5
 800b4c0:	4682      	mov	sl, r0
 800b4c2:	468b      	mov	fp, r1
 800b4c4:	f7f4 fe50 	bl	8000168 <__aeabi_dsub>
 800b4c8:	4632      	mov	r2, r6
 800b4ca:	463b      	mov	r3, r7
 800b4cc:	f7f4 fe4c 	bl	8000168 <__aeabi_dsub>
 800b4d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4d4:	f7f4 fe48 	bl	8000168 <__aeabi_dsub>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4640      	mov	r0, r8
 800b4de:	4649      	mov	r1, r9
 800b4e0:	e60b      	b.n	800b0fa <__ieee754_pow+0x302>
 800b4e2:	2601      	movs	r6, #1
 800b4e4:	e69f      	b.n	800b226 <__ieee754_pow+0x42e>
 800b4e6:	bf00      	nop
 800b4e8:	4a454eef 	.word	0x4a454eef
 800b4ec:	3fca7e28 	.word	0x3fca7e28
 800b4f0:	93c9db65 	.word	0x93c9db65
 800b4f4:	3fcd864a 	.word	0x3fcd864a
 800b4f8:	a91d4101 	.word	0xa91d4101
 800b4fc:	3fd17460 	.word	0x3fd17460
 800b500:	518f264d 	.word	0x518f264d
 800b504:	3fd55555 	.word	0x3fd55555
 800b508:	db6fabff 	.word	0xdb6fabff
 800b50c:	3fdb6db6 	.word	0x3fdb6db6
 800b510:	33333303 	.word	0x33333303
 800b514:	3fe33333 	.word	0x3fe33333
 800b518:	e0000000 	.word	0xe0000000
 800b51c:	3feec709 	.word	0x3feec709
 800b520:	dc3a03fd 	.word	0xdc3a03fd
 800b524:	3feec709 	.word	0x3feec709
 800b528:	145b01f5 	.word	0x145b01f5
 800b52c:	be3e2fe0 	.word	0xbe3e2fe0
 800b530:	7ff00000 	.word	0x7ff00000
 800b534:	43400000 	.word	0x43400000
 800b538:	0003988e 	.word	0x0003988e
 800b53c:	000bb679 	.word	0x000bb679
 800b540:	0800ca68 	.word	0x0800ca68
 800b544:	3ff00000 	.word	0x3ff00000
 800b548:	40080000 	.word	0x40080000
 800b54c:	0800ca88 	.word	0x0800ca88
 800b550:	0800ca78 	.word	0x0800ca78
 800b554:	a39c      	add	r3, pc, #624	; (adr r3, 800b7c8 <__ieee754_pow+0x9d0>)
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	4640      	mov	r0, r8
 800b55c:	4649      	mov	r1, r9
 800b55e:	f7f4 fe05 	bl	800016c <__adddf3>
 800b562:	4622      	mov	r2, r4
 800b564:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b568:	462b      	mov	r3, r5
 800b56a:	4650      	mov	r0, sl
 800b56c:	4639      	mov	r1, r7
 800b56e:	f7f4 fdfb 	bl	8000168 <__aeabi_dsub>
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b57a:	f7f5 fa3d 	bl	80009f8 <__aeabi_dcmpgt>
 800b57e:	2800      	cmp	r0, #0
 800b580:	f47f ae06 	bne.w	800b190 <__ieee754_pow+0x398>
 800b584:	4aa2      	ldr	r2, [pc, #648]	; (800b810 <__ieee754_pow+0xa18>)
 800b586:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b58a:	4293      	cmp	r3, r2
 800b58c:	f340 8100 	ble.w	800b790 <__ieee754_pow+0x998>
 800b590:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b594:	151b      	asrs	r3, r3, #20
 800b596:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b59a:	fa4a fa03 	asr.w	sl, sl, r3
 800b59e:	44b2      	add	sl, r6
 800b5a0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b5a4:	489b      	ldr	r0, [pc, #620]	; (800b814 <__ieee754_pow+0xa1c>)
 800b5a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b5aa:	4108      	asrs	r0, r1
 800b5ac:	ea00 030a 	and.w	r3, r0, sl
 800b5b0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b5b4:	f1c1 0114 	rsb	r1, r1, #20
 800b5b8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b5bc:	fa4a fa01 	asr.w	sl, sl, r1
 800b5c0:	2e00      	cmp	r6, #0
 800b5c2:	f04f 0200 	mov.w	r2, #0
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	bfb8      	it	lt
 800b5cc:	f1ca 0a00 	rsblt	sl, sl, #0
 800b5d0:	f7f4 fdca 	bl	8000168 <__aeabi_dsub>
 800b5d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5dc:	2400      	movs	r4, #0
 800b5de:	4642      	mov	r2, r8
 800b5e0:	464b      	mov	r3, r9
 800b5e2:	f7f4 fdc3 	bl	800016c <__adddf3>
 800b5e6:	a37a      	add	r3, pc, #488	; (adr r3, 800b7d0 <__ieee754_pow+0x9d8>)
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	460d      	mov	r5, r1
 800b5f0:	f7f4 ff72 	bl	80004d8 <__aeabi_dmul>
 800b5f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5f8:	4606      	mov	r6, r0
 800b5fa:	460f      	mov	r7, r1
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	4629      	mov	r1, r5
 800b600:	f7f4 fdb2 	bl	8000168 <__aeabi_dsub>
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	4640      	mov	r0, r8
 800b60a:	4649      	mov	r1, r9
 800b60c:	f7f4 fdac 	bl	8000168 <__aeabi_dsub>
 800b610:	a371      	add	r3, pc, #452	; (adr r3, 800b7d8 <__ieee754_pow+0x9e0>)
 800b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b616:	f7f4 ff5f 	bl	80004d8 <__aeabi_dmul>
 800b61a:	a371      	add	r3, pc, #452	; (adr r3, 800b7e0 <__ieee754_pow+0x9e8>)
 800b61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b620:	4680      	mov	r8, r0
 800b622:	4689      	mov	r9, r1
 800b624:	4620      	mov	r0, r4
 800b626:	4629      	mov	r1, r5
 800b628:	f7f4 ff56 	bl	80004d8 <__aeabi_dmul>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	4640      	mov	r0, r8
 800b632:	4649      	mov	r1, r9
 800b634:	f7f4 fd9a 	bl	800016c <__adddf3>
 800b638:	4604      	mov	r4, r0
 800b63a:	460d      	mov	r5, r1
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	4630      	mov	r0, r6
 800b642:	4639      	mov	r1, r7
 800b644:	f7f4 fd92 	bl	800016c <__adddf3>
 800b648:	4632      	mov	r2, r6
 800b64a:	463b      	mov	r3, r7
 800b64c:	4680      	mov	r8, r0
 800b64e:	4689      	mov	r9, r1
 800b650:	f7f4 fd8a 	bl	8000168 <__aeabi_dsub>
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	4620      	mov	r0, r4
 800b65a:	4629      	mov	r1, r5
 800b65c:	f7f4 fd84 	bl	8000168 <__aeabi_dsub>
 800b660:	4642      	mov	r2, r8
 800b662:	4606      	mov	r6, r0
 800b664:	460f      	mov	r7, r1
 800b666:	464b      	mov	r3, r9
 800b668:	4640      	mov	r0, r8
 800b66a:	4649      	mov	r1, r9
 800b66c:	f7f4 ff34 	bl	80004d8 <__aeabi_dmul>
 800b670:	a35d      	add	r3, pc, #372	; (adr r3, 800b7e8 <__ieee754_pow+0x9f0>)
 800b672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b676:	4604      	mov	r4, r0
 800b678:	460d      	mov	r5, r1
 800b67a:	f7f4 ff2d 	bl	80004d8 <__aeabi_dmul>
 800b67e:	a35c      	add	r3, pc, #368	; (adr r3, 800b7f0 <__ieee754_pow+0x9f8>)
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	f7f4 fd70 	bl	8000168 <__aeabi_dsub>
 800b688:	4622      	mov	r2, r4
 800b68a:	462b      	mov	r3, r5
 800b68c:	f7f4 ff24 	bl	80004d8 <__aeabi_dmul>
 800b690:	a359      	add	r3, pc, #356	; (adr r3, 800b7f8 <__ieee754_pow+0xa00>)
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	f7f4 fd69 	bl	800016c <__adddf3>
 800b69a:	4622      	mov	r2, r4
 800b69c:	462b      	mov	r3, r5
 800b69e:	f7f4 ff1b 	bl	80004d8 <__aeabi_dmul>
 800b6a2:	a357      	add	r3, pc, #348	; (adr r3, 800b800 <__ieee754_pow+0xa08>)
 800b6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a8:	f7f4 fd5e 	bl	8000168 <__aeabi_dsub>
 800b6ac:	4622      	mov	r2, r4
 800b6ae:	462b      	mov	r3, r5
 800b6b0:	f7f4 ff12 	bl	80004d8 <__aeabi_dmul>
 800b6b4:	a354      	add	r3, pc, #336	; (adr r3, 800b808 <__ieee754_pow+0xa10>)
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	f7f4 fd57 	bl	800016c <__adddf3>
 800b6be:	4622      	mov	r2, r4
 800b6c0:	462b      	mov	r3, r5
 800b6c2:	f7f4 ff09 	bl	80004d8 <__aeabi_dmul>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4640      	mov	r0, r8
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	f7f4 fd4b 	bl	8000168 <__aeabi_dsub>
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	460d      	mov	r5, r1
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	460b      	mov	r3, r1
 800b6da:	4640      	mov	r0, r8
 800b6dc:	4649      	mov	r1, r9
 800b6de:	f7f4 fefb 	bl	80004d8 <__aeabi_dmul>
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f7f4 fd3a 	bl	8000168 <__aeabi_dsub>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6fc:	f7f5 f816 	bl	800072c <__aeabi_ddiv>
 800b700:	4632      	mov	r2, r6
 800b702:	4604      	mov	r4, r0
 800b704:	460d      	mov	r5, r1
 800b706:	463b      	mov	r3, r7
 800b708:	4640      	mov	r0, r8
 800b70a:	4649      	mov	r1, r9
 800b70c:	f7f4 fee4 	bl	80004d8 <__aeabi_dmul>
 800b710:	4632      	mov	r2, r6
 800b712:	463b      	mov	r3, r7
 800b714:	f7f4 fd2a 	bl	800016c <__adddf3>
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	4620      	mov	r0, r4
 800b71e:	4629      	mov	r1, r5
 800b720:	f7f4 fd22 	bl	8000168 <__aeabi_dsub>
 800b724:	4642      	mov	r2, r8
 800b726:	464b      	mov	r3, r9
 800b728:	f7f4 fd1e 	bl	8000168 <__aeabi_dsub>
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	2000      	movs	r0, #0
 800b732:	4939      	ldr	r1, [pc, #228]	; (800b818 <__ieee754_pow+0xa20>)
 800b734:	f7f4 fd18 	bl	8000168 <__aeabi_dsub>
 800b738:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b73c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b740:	da29      	bge.n	800b796 <__ieee754_pow+0x99e>
 800b742:	4652      	mov	r2, sl
 800b744:	f000 f874 	bl	800b830 <scalbn>
 800b748:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b74c:	f7ff bbfd 	b.w	800af4a <__ieee754_pow+0x152>
 800b750:	4b32      	ldr	r3, [pc, #200]	; (800b81c <__ieee754_pow+0xa24>)
 800b752:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b756:	429f      	cmp	r7, r3
 800b758:	f77f af14 	ble.w	800b584 <__ieee754_pow+0x78c>
 800b75c:	4b30      	ldr	r3, [pc, #192]	; (800b820 <__ieee754_pow+0xa28>)
 800b75e:	440b      	add	r3, r1
 800b760:	4303      	orrs	r3, r0
 800b762:	d009      	beq.n	800b778 <__ieee754_pow+0x980>
 800b764:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b768:	2200      	movs	r2, #0
 800b76a:	2300      	movs	r3, #0
 800b76c:	f7f5 f926 	bl	80009bc <__aeabi_dcmplt>
 800b770:	3800      	subs	r0, #0
 800b772:	bf18      	it	ne
 800b774:	2001      	movne	r0, #1
 800b776:	e452      	b.n	800b01e <__ieee754_pow+0x226>
 800b778:	4622      	mov	r2, r4
 800b77a:	462b      	mov	r3, r5
 800b77c:	f7f4 fcf4 	bl	8000168 <__aeabi_dsub>
 800b780:	4642      	mov	r2, r8
 800b782:	464b      	mov	r3, r9
 800b784:	f7f5 f92e 	bl	80009e4 <__aeabi_dcmpge>
 800b788:	2800      	cmp	r0, #0
 800b78a:	f43f aefb 	beq.w	800b584 <__ieee754_pow+0x78c>
 800b78e:	e7e9      	b.n	800b764 <__ieee754_pow+0x96c>
 800b790:	f04f 0a00 	mov.w	sl, #0
 800b794:	e720      	b.n	800b5d8 <__ieee754_pow+0x7e0>
 800b796:	4621      	mov	r1, r4
 800b798:	e7d6      	b.n	800b748 <__ieee754_pow+0x950>
 800b79a:	f04f 0b00 	mov.w	fp, #0
 800b79e:	f8df c078 	ldr.w	ip, [pc, #120]	; 800b818 <__ieee754_pow+0xa20>
 800b7a2:	f7ff bbb9 	b.w	800af18 <__ieee754_pow+0x120>
 800b7a6:	f04f 0b00 	mov.w	fp, #0
 800b7aa:	f04f 0c00 	mov.w	ip, #0
 800b7ae:	f7ff bbb3 	b.w	800af18 <__ieee754_pow+0x120>
 800b7b2:	4640      	mov	r0, r8
 800b7b4:	4649      	mov	r1, r9
 800b7b6:	f7ff bb3c 	b.w	800ae32 <__ieee754_pow+0x3a>
 800b7ba:	9200      	str	r2, [sp, #0]
 800b7bc:	f7ff bb88 	b.w	800aed0 <__ieee754_pow+0xd8>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f7ff bb72 	b.w	800aeaa <__ieee754_pow+0xb2>
 800b7c6:	bf00      	nop
 800b7c8:	652b82fe 	.word	0x652b82fe
 800b7cc:	3c971547 	.word	0x3c971547
 800b7d0:	00000000 	.word	0x00000000
 800b7d4:	3fe62e43 	.word	0x3fe62e43
 800b7d8:	fefa39ef 	.word	0xfefa39ef
 800b7dc:	3fe62e42 	.word	0x3fe62e42
 800b7e0:	0ca86c39 	.word	0x0ca86c39
 800b7e4:	be205c61 	.word	0xbe205c61
 800b7e8:	72bea4d0 	.word	0x72bea4d0
 800b7ec:	3e663769 	.word	0x3e663769
 800b7f0:	c5d26bf1 	.word	0xc5d26bf1
 800b7f4:	3ebbbd41 	.word	0x3ebbbd41
 800b7f8:	af25de2c 	.word	0xaf25de2c
 800b7fc:	3f11566a 	.word	0x3f11566a
 800b800:	16bebd93 	.word	0x16bebd93
 800b804:	3f66c16c 	.word	0x3f66c16c
 800b808:	5555553e 	.word	0x5555553e
 800b80c:	3fc55555 	.word	0x3fc55555
 800b810:	3fe00000 	.word	0x3fe00000
 800b814:	fff00000 	.word	0xfff00000
 800b818:	3ff00000 	.word	0x3ff00000
 800b81c:	4090cbff 	.word	0x4090cbff
 800b820:	3f6f3400 	.word	0x3f6f3400

0800b824 <fabs>:
 800b824:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b828:	4619      	mov	r1, r3
 800b82a:	4770      	bx	lr
 800b82c:	0000      	movs	r0, r0
	...

0800b830 <scalbn>:
 800b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b832:	4616      	mov	r6, r2
 800b834:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b838:	4604      	mov	r4, r0
 800b83a:	460d      	mov	r5, r1
 800b83c:	460b      	mov	r3, r1
 800b83e:	b992      	cbnz	r2, 800b866 <scalbn+0x36>
 800b840:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b844:	4303      	orrs	r3, r0
 800b846:	d03c      	beq.n	800b8c2 <scalbn+0x92>
 800b848:	4b31      	ldr	r3, [pc, #196]	; (800b910 <scalbn+0xe0>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	f7f4 fe44 	bl	80004d8 <__aeabi_dmul>
 800b850:	4b30      	ldr	r3, [pc, #192]	; (800b914 <scalbn+0xe4>)
 800b852:	4604      	mov	r4, r0
 800b854:	429e      	cmp	r6, r3
 800b856:	460d      	mov	r5, r1
 800b858:	da0f      	bge.n	800b87a <scalbn+0x4a>
 800b85a:	a329      	add	r3, pc, #164	; (adr r3, 800b900 <scalbn+0xd0>)
 800b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b860:	f7f4 fe3a 	bl	80004d8 <__aeabi_dmul>
 800b864:	e006      	b.n	800b874 <scalbn+0x44>
 800b866:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800b86a:	42ba      	cmp	r2, r7
 800b86c:	d109      	bne.n	800b882 <scalbn+0x52>
 800b86e:	4602      	mov	r2, r0
 800b870:	f7f4 fc7c 	bl	800016c <__adddf3>
 800b874:	4604      	mov	r4, r0
 800b876:	460d      	mov	r5, r1
 800b878:	e023      	b.n	800b8c2 <scalbn+0x92>
 800b87a:	460b      	mov	r3, r1
 800b87c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b880:	3a36      	subs	r2, #54	; 0x36
 800b882:	f24c 3150 	movw	r1, #50000	; 0xc350
 800b886:	428e      	cmp	r6, r1
 800b888:	dd0e      	ble.n	800b8a8 <scalbn+0x78>
 800b88a:	a31f      	add	r3, pc, #124	; (adr r3, 800b908 <scalbn+0xd8>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b894:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b898:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b89c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b8a0:	481d      	ldr	r0, [pc, #116]	; (800b918 <scalbn+0xe8>)
 800b8a2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b8a6:	e7db      	b.n	800b860 <scalbn+0x30>
 800b8a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b8ac:	4432      	add	r2, r6
 800b8ae:	428a      	cmp	r2, r1
 800b8b0:	dceb      	bgt.n	800b88a <scalbn+0x5a>
 800b8b2:	2a00      	cmp	r2, #0
 800b8b4:	dd08      	ble.n	800b8c8 <scalbn+0x98>
 800b8b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8be:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8c8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b8cc:	da0c      	bge.n	800b8e8 <scalbn+0xb8>
 800b8ce:	a30c      	add	r3, pc, #48	; (adr r3, 800b900 <scalbn+0xd0>)
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b8d8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800b8dc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800b8e0:	480e      	ldr	r0, [pc, #56]	; (800b91c <scalbn+0xec>)
 800b8e2:	f041 011f 	orr.w	r1, r1, #31
 800b8e6:	e7bb      	b.n	800b860 <scalbn+0x30>
 800b8e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8ec:	3236      	adds	r2, #54	; 0x36
 800b8ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	4b08      	ldr	r3, [pc, #32]	; (800b920 <scalbn+0xf0>)
 800b8fe:	e7af      	b.n	800b860 <scalbn+0x30>
 800b900:	c2f8f359 	.word	0xc2f8f359
 800b904:	01a56e1f 	.word	0x01a56e1f
 800b908:	8800759c 	.word	0x8800759c
 800b90c:	7e37e43c 	.word	0x7e37e43c
 800b910:	43500000 	.word	0x43500000
 800b914:	ffff3cb0 	.word	0xffff3cb0
 800b918:	8800759c 	.word	0x8800759c
 800b91c:	c2f8f359 	.word	0xc2f8f359
 800b920:	3c900000 	.word	0x3c900000

0800b924 <with_errno>:
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	4604      	mov	r4, r0
 800b928:	460d      	mov	r5, r1
 800b92a:	4616      	mov	r6, r2
 800b92c:	f7fb fca6 	bl	800727c <__errno>
 800b930:	4629      	mov	r1, r5
 800b932:	6006      	str	r6, [r0, #0]
 800b934:	4620      	mov	r0, r4
 800b936:	bd70      	pop	{r4, r5, r6, pc}

0800b938 <xflow>:
 800b938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b93a:	4615      	mov	r5, r2
 800b93c:	461c      	mov	r4, r3
 800b93e:	b180      	cbz	r0, 800b962 <xflow+0x2a>
 800b940:	4610      	mov	r0, r2
 800b942:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b946:	e9cd 0100 	strd	r0, r1, [sp]
 800b94a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b94e:	4628      	mov	r0, r5
 800b950:	4621      	mov	r1, r4
 800b952:	f7f4 fdc1 	bl	80004d8 <__aeabi_dmul>
 800b956:	2222      	movs	r2, #34	; 0x22
 800b958:	b003      	add	sp, #12
 800b95a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b95e:	f7ff bfe1 	b.w	800b924 <with_errno>
 800b962:	4610      	mov	r0, r2
 800b964:	4619      	mov	r1, r3
 800b966:	e7ee      	b.n	800b946 <xflow+0xe>

0800b968 <__math_uflow>:
 800b968:	2200      	movs	r2, #0
 800b96a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b96e:	f7ff bfe3 	b.w	800b938 <xflow>

0800b972 <__math_oflow>:
 800b972:	2200      	movs	r2, #0
 800b974:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b978:	f7ff bfde 	b.w	800b938 <xflow>

0800b97c <_init>:
 800b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97e:	bf00      	nop
 800b980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b982:	bc08      	pop	{r3}
 800b984:	469e      	mov	lr, r3
 800b986:	4770      	bx	lr

0800b988 <_fini>:
 800b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98a:	bf00      	nop
 800b98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b98e:	bc08      	pop	{r3}
 800b990:	469e      	mov	lr, r3
 800b992:	4770      	bx	lr
