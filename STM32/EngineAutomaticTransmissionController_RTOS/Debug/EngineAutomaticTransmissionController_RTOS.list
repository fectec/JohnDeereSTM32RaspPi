
EngineAutomaticTransmissionController_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6cc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb8  0800c7e0  0800c7e0  0001c7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d698  0800d698  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800d698  0800d698  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d698  0800d698  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d698  0800d698  0001d698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d69c  0800d69c  0001d69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800d6a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016c4  20000208  0800d8a8  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200018cc  0800d8a8  000218cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001767a  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041c1  00000000  00000000  000378ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  0003bab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001021  00000000  00000000  0003cfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c4eb  00000000  00000000  0003e001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b066  00000000  00000000  0005a4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000972a1  00000000  00000000  00075552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c84  00000000  00000000  0010c7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00113478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c7c4 	.word	0x0800c7c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800c7c4 	.word	0x0800c7c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <USER_ADC_Init>:
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <USER_ADC_Init+0xb8>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	4a2a      	ldr	r2, [pc, #168]	; (800114c <USER_ADC_Init+0xb8>)
 80010a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010a8:	6053      	str	r3, [r2, #4]
 80010aa:	2300      	movs	r3, #0
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 fff3 	bl	800209c <USER_GPIO_Define>
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d142      	bne.n	8001142 <USER_ADC_Init+0xae>
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <USER_ADC_Init+0xb8>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a22      	ldr	r2, [pc, #136]	; (800114c <USER_ADC_Init+0xb8>)
 80010c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <USER_ADC_Init+0xbc>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4a20      	ldr	r2, [pc, #128]	; (8001150 <USER_ADC_Init+0xbc>)
 80010ce:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80010d2:	6053      	str	r3, [r2, #4]
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <USER_ADC_Init+0xbc>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <USER_ADC_Init+0xbc>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	6093      	str	r3, [r2, #8]
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <USER_ADC_Init+0xbc>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <USER_ADC_Init+0xbc>)
 80010e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010ea:	6093      	str	r3, [r2, #8]
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <USER_ADC_Init+0xbc>)
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	4a17      	ldr	r2, [pc, #92]	; (8001150 <USER_ADC_Init+0xbc>)
 80010f2:	f023 0307 	bic.w	r3, r3, #7
 80010f6:	6113      	str	r3, [r2, #16]
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <USER_ADC_Init+0xbc>)
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <USER_ADC_Init+0xbc>)
 80010fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001102:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <USER_ADC_Init+0xbc>)
 8001106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001108:	4a11      	ldr	r2, [pc, #68]	; (8001150 <USER_ADC_Init+0xbc>)
 800110a:	f023 031f 	bic.w	r3, r3, #31
 800110e:	6353      	str	r3, [r2, #52]	; 0x34
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <USER_ADC_Init+0xbc>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <USER_ADC_Init+0xbc>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6093      	str	r3, [r2, #8]
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <USER_ADC_Init+0xbc>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <USER_ADC_Init+0xbc>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6093      	str	r3, [r2, #8]
 8001128:	bf00      	nop
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <USER_ADC_Init+0xbc>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f9      	bne.n	800112a <USER_ADC_Init+0x96>
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <USER_ADC_Init+0xbc>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <USER_ADC_Init+0xbc>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6093      	str	r3, [r2, #8]
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	40012400 	.word	0x40012400

08001154 <USER_ADC_Convert>:
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10a      	bne.n	800117a <USER_ADC_Convert+0x26>
 8001164:	bf00      	nop
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <USER_ADC_Convert+0x34>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f9      	beq.n	8001166 <USER_ADC_Convert+0x12>
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <USER_ADC_Convert+0x34>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	b29b      	uxth	r3, r3
 8001178:	e000      	b.n	800117c <USER_ADC_Convert+0x28>
 800117a:	2300      	movs	r3, #0
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40012400 	.word	0x40012400

0800118c <scaleVoltageValue>:
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f7ff fce8 	bl	8000b70 <__aeabi_fsub>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461c      	mov	r4, r3
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff fce2 	bl	8000b70 <__aeabi_fsub>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4619      	mov	r1, r3
 80011b0:	4620      	mov	r0, r4
 80011b2:	f7ff fe9b 	bl	8000eec <__aeabi_fdiv>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4905      	ldr	r1, [pc, #20]	; (80011d0 <scaleVoltageValue+0x44>)
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fde2 	bl	8000d84 <__aeabi_fmul>
 80011c0:	4603      	mov	r3, r0
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	4618      	mov	r0, r3
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	42c80000 	.word	0x42c80000

080011d4 <look2_binlxpw>:
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b092      	sub	sp, #72	; 0x48
 80011d8:	af00      	add	r7, sp, #0
 80011da:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80011de:	e9c7 2300 	strd	r2, r3, [r7]
 80011e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ec:	f7ff fbf0 	bl	80009d0 <__aeabi_dcmple>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d020      	beq.n	8001238 <look2_binlxpw+0x64>
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
 80011fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001204:	f7fe ffb0 	bl	8000168 <__aeabi_dsub>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4614      	mov	r4, r2
 800120e:	461d      	mov	r5, r3
 8001210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001212:	3308      	adds	r3, #8
 8001214:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7fe ffa3 	bl	8000168 <__aeabi_dsub>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4620      	mov	r0, r4
 8001228:	4629      	mov	r1, r5
 800122a:	f7ff fa7f 	bl	800072c <__aeabi_ddiv>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001236:	e08e      	b.n	8001356 <look2_binlxpw+0x182>
 8001238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001240:	4413      	add	r3, r2
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800124a:	f7ff fbb7 	bl	80009bc <__aeabi_dcmplt>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d04d      	beq.n	80012f0 <look2_binlxpw+0x11c>
 8001254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	085b      	lsrs	r3, r3, #1
 800125a:	63bb      	str	r3, [r7, #56]	; 0x38
 800125c:	2300      	movs	r3, #0
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
 8001260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001266:	e016      	b.n	8001296 <look2_binlxpw+0xc2>
 8001268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800126e:	4413      	add	r3, r2
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001278:	f7ff fba0 	bl	80009bc <__aeabi_dcmplt>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <look2_binlxpw+0xb4>
 8001282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001286:	e001      	b.n	800128c <look2_binlxpw+0xb8>
 8001288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
 800128c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800128e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001290:	4413      	add	r3, r2
 8001292:	085b      	lsrs	r3, r3, #1
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
 8001296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b01      	cmp	r3, #1
 800129e:	d8e3      	bhi.n	8001268 <look2_binlxpw+0x94>
 80012a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012a6:	4413      	add	r3, r2
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012b0:	f7fe ff5a 	bl	8000168 <__aeabi_dsub>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4614      	mov	r4, r2
 80012ba:	461d      	mov	r5, r3
 80012bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012be:	3301      	adds	r3, #1
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012c4:	4413      	add	r3, r2
 80012c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012d0:	4413      	add	r3, r2
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7fe ff47 	bl	8000168 <__aeabi_dsub>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4620      	mov	r0, r4
 80012e0:	4629      	mov	r1, r5
 80012e2:	f7ff fa23 	bl	800072c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80012ee:	e032      	b.n	8001356 <look2_binlxpw+0x182>
 80012f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
 80012f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001300:	3b01      	subs	r3, #1
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001306:	4413      	add	r3, r2
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001310:	f7fe ff2a 	bl	8000168 <__aeabi_dsub>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4614      	mov	r4, r2
 800131a:	461d      	mov	r5, r3
 800131c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001324:	4413      	add	r3, r2
 8001326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800132a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001332:	3b01      	subs	r3, #1
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001338:	4413      	add	r3, r2
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7fe ff13 	bl	8000168 <__aeabi_dsub>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4620      	mov	r0, r4
 8001348:	4629      	mov	r1, r5
 800134a:	f7ff f9ef 	bl	800072c <__aeabi_ddiv>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001356:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800135a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800135e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001360:	623b      	str	r3, [r7, #32]
 8001362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	e9d7 0100 	ldrd	r0, r1, [r7]
 800136c:	f7ff fb30 	bl	80009d0 <__aeabi_dcmple>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d020      	beq.n	80013b8 <look2_binlxpw+0x1e4>
 8001376:	2300      	movs	r3, #0
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
 800137a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001384:	f7fe fef0 	bl	8000168 <__aeabi_dsub>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4614      	mov	r4, r2
 800138e:	461d      	mov	r5, r3
 8001390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001392:	3308      	adds	r3, #8
 8001394:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	f7fe fee3 	bl	8000168 <__aeabi_dsub>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4620      	mov	r0, r4
 80013a8:	4629      	mov	r1, r5
 80013aa:	f7ff f9bf 	bl	800072c <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80013b6:	e095      	b.n	80014e4 <look2_binlxpw+0x310>
 80013b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013ba:	3304      	adds	r3, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80013c2:	4413      	add	r3, r2
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013cc:	f7ff faf6 	bl	80009bc <__aeabi_dcmplt>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d04f      	beq.n	8001476 <look2_binlxpw+0x2a2>
 80013d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013d8:	3304      	adds	r3, #4
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	085b      	lsrs	r3, r3, #1
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
 80013e0:	2300      	movs	r3, #0
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
 80013e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013e6:	3304      	adds	r3, #4
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013ec:	e016      	b.n	800141c <look2_binlxpw+0x248>
 80013ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80013f4:	4413      	add	r3, r2
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013fe:	f7ff fadd 	bl	80009bc <__aeabi_dcmplt>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <look2_binlxpw+0x23a>
 8001408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800140a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800140c:	e001      	b.n	8001412 <look2_binlxpw+0x23e>
 800140e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001410:	637b      	str	r3, [r7, #52]	; 0x34
 8001412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001416:	4413      	add	r3, r2
 8001418:	085b      	lsrs	r3, r3, #1
 800141a:	63bb      	str	r3, [r7, #56]	; 0x38
 800141c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800141e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b01      	cmp	r3, #1
 8001424:	d8e3      	bhi.n	80013ee <look2_binlxpw+0x21a>
 8001426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800142c:	4413      	add	r3, r2
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001436:	f7fe fe97 	bl	8000168 <__aeabi_dsub>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4614      	mov	r4, r2
 8001440:	461d      	mov	r5, r3
 8001442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001444:	3301      	adds	r3, #1
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800144a:	4413      	add	r3, r2
 800144c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001456:	4413      	add	r3, r2
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7fe fe84 	bl	8000168 <__aeabi_dsub>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4620      	mov	r0, r4
 8001466:	4629      	mov	r1, r5
 8001468:	f7ff f960 	bl	800072c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001474:	e036      	b.n	80014e4 <look2_binlxpw+0x310>
 8001476:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001478:	3304      	adds	r3, #4
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
 8001480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001482:	3304      	adds	r3, #4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800148a:	3b01      	subs	r3, #1
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001490:	4413      	add	r3, r2
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	e9d7 0100 	ldrd	r0, r1, [r7]
 800149a:	f7fe fe65 	bl	8000168 <__aeabi_dsub>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4614      	mov	r4, r2
 80014a4:	461d      	mov	r5, r3
 80014a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014a8:	3304      	adds	r3, #4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014b0:	4413      	add	r3, r2
 80014b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014b8:	3304      	adds	r3, #4
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80014c0:	3b01      	subs	r3, #1
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014c6:	4413      	add	r3, r2
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7fe fe4c 	bl	8000168 <__aeabi_dsub>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4620      	mov	r0, r4
 80014d6:	4629      	mov	r1, r5
 80014d8:	f7ff f928 	bl	800072c <__aeabi_ddiv>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80014e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80014e8:	fb03 f202 	mul.w	r2, r3, r2
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	4413      	add	r3, r2
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80014f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f4:	3301      	adds	r3, #1
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014fa:	4413      	add	r3, r2
 80014fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001506:	4413      	add	r3, r2
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7fe fe2c 	bl	8000168 <__aeabi_dsub>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800151c:	f7fe ffdc 	bl	80004d8 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800152e:	4413      	add	r3, r2
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	f7fe fe1a 	bl	800016c <__adddf3>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001544:	4413      	add	r3, r2
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
 8001548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154a:	3301      	adds	r3, #1
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001550:	4413      	add	r3, r2
 8001552:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800155c:	4413      	add	r3, r2
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7fe fe01 	bl	8000168 <__aeabi_dsub>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001572:	f7fe ffb1 	bl	80004d8 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001584:	4413      	add	r3, r2
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7fe fdef 	bl	800016c <__adddf3>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800159a:	f7fe fde5 	bl	8000168 <__aeabi_dsub>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015aa:	f7fe ff95 	bl	80004d8 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015ba:	f7fe fdd7 	bl	800016c <__adddf3>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	3748      	adds	r7, #72	; 0x48
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bdb0      	pop	{r4, r5, r7, pc}

080015cc <look1_binlxpw>:
 80015cc:	b5b0      	push	{r4, r5, r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015e4:	f7ff f9f4 	bl	80009d0 <__aeabi_dcmple>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d020      	beq.n	8001630 <look1_binlxpw+0x64>
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015fc:	f7fe fdb4 	bl	8000168 <__aeabi_dsub>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4614      	mov	r4, r2
 8001606:	461d      	mov	r5, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3308      	adds	r3, #8
 800160c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7fe fda7 	bl	8000168 <__aeabi_dsub>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4620      	mov	r0, r4
 8001620:	4629      	mov	r1, r5
 8001622:	f7ff f883 	bl	800072c <__aeabi_ddiv>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800162e:	e087      	b.n	8001740 <look1_binlxpw+0x174>
 8001630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001640:	f7ff f9bc 	bl	80009bc <__aeabi_dcmplt>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d04b      	beq.n	80016e2 <look1_binlxpw+0x116>
 800164a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	e016      	b.n	8001688 <look1_binlxpw+0xbc>
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800166a:	f7ff f9a7 	bl	80009bc <__aeabi_dcmplt>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <look1_binlxpw+0xae>
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	e001      	b.n	800167e <look1_binlxpw+0xb2>
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	4413      	add	r3, r2
 8001684:	085b      	lsrs	r3, r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d8e3      	bhi.n	800165a <look1_binlxpw+0x8e>
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016a2:	f7fe fd61 	bl	8000168 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4614      	mov	r4, r2
 80016ac:	461d      	mov	r5, r3
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	3301      	adds	r3, #1
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe fd4e 	bl	8000168 <__aeabi_dsub>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4620      	mov	r0, r4
 80016d2:	4629      	mov	r1, r5
 80016d4:	f7ff f82a 	bl	800072c <__aeabi_ddiv>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80016e0:	e02e      	b.n	8001740 <look1_binlxpw+0x174>
 80016e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016e4:	3b01      	subs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ea:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80016ee:	3b01      	subs	r3, #1
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016fe:	f7fe fd33 	bl	8000168 <__aeabi_dsub>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4614      	mov	r4, r2
 8001708:	461d      	mov	r5, r3
 800170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001718:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800171c:	3b01      	subs	r3, #1
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	f7fe fd1e 	bl	8000168 <__aeabi_dsub>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4620      	mov	r0, r4
 8001732:	4629      	mov	r1, r5
 8001734:	f7fe fffa 	bl	800072c <__aeabi_ddiv>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	3301      	adds	r3, #1
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	4413      	add	r3, r2
 800174a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	4413      	add	r3, r2
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe fd05 	bl	8000168 <__aeabi_dsub>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800176a:	f7fe feb5 	bl	80004d8 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	4413      	add	r3, r2
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f7fe fcf3 	bl	800016c <__adddf3>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bdb0      	pop	{r4, r5, r7, pc}

08001794 <EngTrModel_gear_state>:
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	4b3b      	ldr	r3, [pc, #236]	; (800188c <EngTrModel_gear_state+0xf8>)
 800179e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017a2:	3b01      	subs	r3, #1
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d86c      	bhi.n	8001882 <EngTrModel_gear_state+0xee>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <EngTrModel_gear_state+0x1c>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	080017e1 	.word	0x080017e1
 80017b8:	080017ff 	.word	0x080017ff
 80017bc:	08001839 	.word	0x08001839
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d155      	bne.n	8001874 <EngTrModel_gear_state+0xe0>
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <EngTrModel_gear_state+0xf8>)
 80017ca:	2203      	movs	r2, #3
 80017cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80017d0:	492f      	ldr	r1, [pc, #188]	; (8001890 <EngTrModel_gear_state+0xfc>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017da:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80017de:	e049      	b.n	8001874 <EngTrModel_gear_state+0xe0>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d147      	bne.n	8001878 <EngTrModel_gear_state+0xe4>
 80017e8:	4b28      	ldr	r3, [pc, #160]	; (800188c <EngTrModel_gear_state+0xf8>)
 80017ea:	2204      	movs	r2, #4
 80017ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80017f0:	4927      	ldr	r1, [pc, #156]	; (8001890 <EngTrModel_gear_state+0xfc>)
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <EngTrModel_gear_state+0x100>)
 80017f8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80017fc:	e03c      	b.n	8001878 <EngTrModel_gear_state+0xe4>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00c      	beq.n	8001820 <EngTrModel_gear_state+0x8c>
 8001806:	2b01      	cmp	r3, #1
 8001808:	d138      	bne.n	800187c <EngTrModel_gear_state+0xe8>
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <EngTrModel_gear_state+0xf8>)
 800180c:	2204      	movs	r2, #4
 800180e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001812:	491f      	ldr	r1, [pc, #124]	; (8001890 <EngTrModel_gear_state+0xfc>)
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <EngTrModel_gear_state+0x100>)
 800181a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800181e:	e00a      	b.n	8001836 <EngTrModel_gear_state+0xa2>
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <EngTrModel_gear_state+0xf8>)
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001828:	4919      	ldr	r1, [pc, #100]	; (8001890 <EngTrModel_gear_state+0xfc>)
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <EngTrModel_gear_state+0x104>)
 8001830:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001834:	bf00      	nop
 8001836:	e021      	b.n	800187c <EngTrModel_gear_state+0xe8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00c      	beq.n	800185a <EngTrModel_gear_state+0xc6>
 8001840:	2b01      	cmp	r3, #1
 8001842:	d11d      	bne.n	8001880 <EngTrModel_gear_state+0xec>
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <EngTrModel_gear_state+0xf8>)
 8001846:	2202      	movs	r2, #2
 8001848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800184c:	4910      	ldr	r1, [pc, #64]	; (8001890 <EngTrModel_gear_state+0xfc>)
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <EngTrModel_gear_state+0x108>)
 8001854:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001858:	e00b      	b.n	8001872 <EngTrModel_gear_state+0xde>
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <EngTrModel_gear_state+0xf8>)
 800185c:	2203      	movs	r2, #3
 800185e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001862:	490b      	ldr	r1, [pc, #44]	; (8001890 <EngTrModel_gear_state+0xfc>)
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800186c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001870:	bf00      	nop
 8001872:	e005      	b.n	8001880 <EngTrModel_gear_state+0xec>
 8001874:	bf00      	nop
 8001876:	e004      	b.n	8001882 <EngTrModel_gear_state+0xee>
 8001878:	bf00      	nop
 800187a:	e002      	b.n	8001882 <EngTrModel_gear_state+0xee>
 800187c:	bf00      	nop
 800187e:	e000      	b.n	8001882 <EngTrModel_gear_state+0xee>
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	20000258 	.word	0x20000258
 8001890:	20000228 	.word	0x20000228
 8001894:	40080000 	.word	0x40080000
 8001898:	3ff00000 	.word	0x3ff00000
 800189c:	40100000 	.word	0x40100000

080018a0 <rt_powd_snf>:
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b08c      	sub	sp, #48	; 0x30
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80018aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80018ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018b2:	f001 ff2f 	bl	8003714 <rtIsNaN>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d106      	bne.n	80018ca <rt_powd_snf+0x2a>
 80018bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018c0:	f001 ff28 	bl	8003714 <rtIsNaN>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <rt_powd_snf+0x36>
 80018ca:	4b7e      	ldr	r3, [pc, #504]	; (8001ac4 <rt_powd_snf+0x224>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80018d4:	e0ef      	b.n	8001ab6 <rt_powd_snf+0x216>
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80018ea:	68bc      	ldr	r4, [r7, #8]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80018f2:	e9c7 4506 	strd	r4, r5, [r7, #24]
 80018f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018fa:	f001 fee7 	bl	80036cc <rtIsInf>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d049      	beq.n	8001998 <rt_powd_snf+0xf8>
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b6f      	ldr	r3, [pc, #444]	; (8001ac8 <rt_powd_snf+0x228>)
 800190a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800190e:	f7ff f84b 	bl	80009a8 <__aeabi_dcmpeq>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <rt_powd_snf+0x84>
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <rt_powd_snf+0x228>)
 800191e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001922:	e0c8      	b.n	8001ab6 <rt_powd_snf+0x216>
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b67      	ldr	r3, [pc, #412]	; (8001ac8 <rt_powd_snf+0x228>)
 800192a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800192e:	f7ff f863 	bl	80009f8 <__aeabi_dcmpgt>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d017      	beq.n	8001968 <rt_powd_snf+0xc8>
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001944:	f7ff f858 	bl	80009f8 <__aeabi_dcmpgt>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d005      	beq.n	800195a <rt_powd_snf+0xba>
 800194e:	4b5f      	ldr	r3, [pc, #380]	; (8001acc <rt_powd_snf+0x22c>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001958:	e0ad      	b.n	8001ab6 <rt_powd_snf+0x216>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001966:	e0a6      	b.n	8001ab6 <rt_powd_snf+0x216>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001974:	f7ff f840 	bl	80009f8 <__aeabi_dcmpgt>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <rt_powd_snf+0xec>
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800198a:	e094      	b.n	8001ab6 <rt_powd_snf+0x216>
 800198c:	4b4f      	ldr	r3, [pc, #316]	; (8001acc <rt_powd_snf+0x22c>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001996:	e08e      	b.n	8001ab6 <rt_powd_snf+0x216>
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019a4:	f7ff f800 	bl	80009a8 <__aeabi_dcmpeq>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <rt_powd_snf+0x11a>
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b45      	ldr	r3, [pc, #276]	; (8001ac8 <rt_powd_snf+0x228>)
 80019b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019b8:	e07d      	b.n	8001ab6 <rt_powd_snf+0x216>
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	4b42      	ldr	r3, [pc, #264]	; (8001ac8 <rt_powd_snf+0x228>)
 80019c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019c4:	f7fe fff0 	bl	80009a8 <__aeabi_dcmpeq>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01b      	beq.n	8001a06 <rt_powd_snf+0x166>
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019da:	f7ff f80d 	bl	80009f8 <__aeabi_dcmpgt>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <rt_powd_snf+0x14e>
 80019e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019ec:	e063      	b.n	8001ab6 <rt_powd_snf+0x216>
 80019ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019f2:	f04f 0000 	mov.w	r0, #0
 80019f6:	4934      	ldr	r1, [pc, #208]	; (8001ac8 <rt_powd_snf+0x228>)
 80019f8:	f7fe fe98 	bl	800072c <__aeabi_ddiv>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a04:	e057      	b.n	8001ab6 <rt_powd_snf+0x216>
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a12:	f7fe ffc9 	bl	80009a8 <__aeabi_dcmpeq>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00a      	beq.n	8001a32 <rt_powd_snf+0x192>
 8001a1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a24:	f7fe fd58 	bl	80004d8 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a30:	e041      	b.n	8001ab6 <rt_powd_snf+0x216>
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <rt_powd_snf+0x230>)
 8001a38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a3c:	f7fe ffb4 	bl	80009a8 <__aeabi_dcmpeq>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d011      	beq.n	8001a6a <rt_powd_snf+0x1ca>
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a52:	f7fe ffc7 	bl	80009e4 <__aeabi_dcmpge>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <rt_powd_snf+0x1ca>
 8001a5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a60:	f009 ff6a 	bl	800b938 <sqrt>
 8001a64:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001a68:	e025      	b.n	8001ab6 <rt_powd_snf+0x216>
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a76:	f7fe ffa1 	bl	80009bc <__aeabi_dcmplt>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d012      	beq.n	8001aa6 <rt_powd_snf+0x206>
 8001a80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a84:	f00a f85c 	bl	800bb40 <floor>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a90:	f7fe ffb2 	bl	80009f8 <__aeabi_dcmpgt>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <rt_powd_snf+0x206>
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <rt_powd_snf+0x224>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001aa4:	e007      	b.n	8001ab6 <rt_powd_snf+0x216>
 8001aa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001aaa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aae:	f009 fedb 	bl	800b868 <pow>
 8001ab2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	3730      	adds	r7, #48	; 0x30
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac4:	200005d0 	.word	0x200005d0
 8001ac8:	3ff00000 	.word	0x3ff00000
 8001acc:	200005c0 	.word	0x200005c0
 8001ad0:	3fe00000 	.word	0x3fe00000
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <EngTrModel_step>:
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af06      	add	r7, sp, #24
 8001ade:	4b8c      	ldr	r3, [pc, #560]	; (8001d10 <EngTrModel_step+0x238>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	498b      	ldr	r1, [pc, #556]	; (8001d14 <EngTrModel_step+0x23c>)
 8001ae6:	e9c1 2300 	strd	r2, r3, [r1]
 8001aea:	4b8a      	ldr	r3, [pc, #552]	; (8001d14 <EngTrModel_step+0x23c>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	4989      	ldr	r1, [pc, #548]	; (8001d18 <EngTrModel_step+0x240>)
 8001af2:	e9c1 2300 	strd	r2, r3, [r1]
 8001af6:	4b86      	ldr	r3, [pc, #536]	; (8001d10 <EngTrModel_step+0x238>)
 8001af8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001afc:	a380      	add	r3, pc, #512	; (adr r3, 8001d00 <EngTrModel_step+0x228>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fce9 	bl	80004d8 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	a37e      	add	r3, pc, #504	; (adr r3, 8001d08 <EngTrModel_step+0x230>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fce0 	bl	80004d8 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	497d      	ldr	r1, [pc, #500]	; (8001d14 <EngTrModel_step+0x23c>)
 8001b1e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	4b79      	ldr	r3, [pc, #484]	; (8001d10 <EngTrModel_step+0x238>)
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d004      	beq.n	8001b3c <EngTrModel_step+0x64>
 8001b32:	4b77      	ldr	r3, [pc, #476]	; (8001d10 <EngTrModel_step+0x238>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	3301      	adds	r3, #1
 8001b38:	4a75      	ldr	r2, [pc, #468]	; (8001d10 <EngTrModel_step+0x238>)
 8001b3a:	61d3      	str	r3, [r2, #28]
 8001b3c:	4b74      	ldr	r3, [pc, #464]	; (8001d10 <EngTrModel_step+0x238>)
 8001b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d11a      	bne.n	8001b7c <EngTrModel_step+0xa4>
 8001b46:	4b72      	ldr	r3, [pc, #456]	; (8001d10 <EngTrModel_step+0x238>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2020 	strb.w	r2, [r3, #32]
 8001b4e:	4b70      	ldr	r3, [pc, #448]	; (8001d10 <EngTrModel_step+0x238>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001b56:	4b6e      	ldr	r3, [pc, #440]	; (8001d10 <EngTrModel_step+0x238>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001b5e:	496d      	ldr	r1, [pc, #436]	; (8001d14 <EngTrModel_step+0x23c>)
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	4b6d      	ldr	r3, [pc, #436]	; (8001d1c <EngTrModel_step+0x244>)
 8001b66:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001b6a:	4b69      	ldr	r3, [pc, #420]	; (8001d10 <EngTrModel_step+0x238>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b72:	4b67      	ldr	r3, [pc, #412]	; (8001d10 <EngTrModel_step+0x238>)
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001b7a:	e0e4      	b.n	8001d46 <EngTrModel_step+0x26e>
 8001b7c:	4b64      	ldr	r3, [pc, #400]	; (8001d10 <EngTrModel_step+0x238>)
 8001b7e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <EngTrModel_step+0xb6>
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fe03 	bl	8001794 <EngTrModel_gear_state>
 8001b8e:	4b60      	ldr	r3, [pc, #384]	; (8001d10 <EngTrModel_step+0x238>)
 8001b90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80d6 	beq.w	8001d46 <EngTrModel_step+0x26e>
 8001b9a:	4b61      	ldr	r3, [pc, #388]	; (8001d20 <EngTrModel_step+0x248>)
 8001b9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ba0:	4b5c      	ldr	r3, [pc, #368]	; (8001d14 <EngTrModel_step+0x23c>)
 8001ba2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001ba6:	2406      	movs	r4, #6
 8001ba8:	9404      	str	r4, [sp, #16]
 8001baa:	4c5e      	ldr	r4, [pc, #376]	; (8001d24 <EngTrModel_step+0x24c>)
 8001bac:	9403      	str	r4, [sp, #12]
 8001bae:	4c5e      	ldr	r4, [pc, #376]	; (8001d28 <EngTrModel_step+0x250>)
 8001bb0:	9402      	str	r4, [sp, #8]
 8001bb2:	4c5e      	ldr	r4, [pc, #376]	; (8001d2c <EngTrModel_step+0x254>)
 8001bb4:	9401      	str	r4, [sp, #4]
 8001bb6:	4c5e      	ldr	r4, [pc, #376]	; (8001d30 <EngTrModel_step+0x258>)
 8001bb8:	9400      	str	r4, [sp, #0]
 8001bba:	f7ff fb0b 	bl	80011d4 <look2_binlxpw>
 8001bbe:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <EngTrModel_step+0x248>)
 8001bc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc8:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <EngTrModel_step+0x23c>)
 8001bca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001bce:	2406      	movs	r4, #6
 8001bd0:	9404      	str	r4, [sp, #16]
 8001bd2:	4c54      	ldr	r4, [pc, #336]	; (8001d24 <EngTrModel_step+0x24c>)
 8001bd4:	9403      	str	r4, [sp, #12]
 8001bd6:	4c57      	ldr	r4, [pc, #348]	; (8001d34 <EngTrModel_step+0x25c>)
 8001bd8:	9402      	str	r4, [sp, #8]
 8001bda:	4c54      	ldr	r4, [pc, #336]	; (8001d2c <EngTrModel_step+0x254>)
 8001bdc:	9401      	str	r4, [sp, #4]
 8001bde:	4c56      	ldr	r4, [pc, #344]	; (8001d38 <EngTrModel_step+0x260>)
 8001be0:	9400      	str	r4, [sp, #0]
 8001be2:	f7ff faf7 	bl	80011d4 <look2_binlxpw>
 8001be6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001bea:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <EngTrModel_step+0x238>)
 8001bec:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d05a      	beq.n	8001caa <EngTrModel_step+0x1d2>
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	f300 80a6 	bgt.w	8001d46 <EngTrModel_step+0x26e>
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d002      	beq.n	8001c04 <EngTrModel_step+0x12c>
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d02e      	beq.n	8001c60 <EngTrModel_step+0x188>
 8001c02:	e0a0      	b.n	8001d46 <EngTrModel_step+0x26e>
 8001c04:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <EngTrModel_step+0x238>)
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d919      	bls.n	8001c40 <EngTrModel_step+0x168>
 8001c0c:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <EngTrModel_step+0x23c>)
 8001c0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c16:	f7fe fee5 	bl	80009e4 <__aeabi_dcmpge>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00f      	beq.n	8001c40 <EngTrModel_step+0x168>
 8001c20:	2300      	movs	r3, #0
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <EngTrModel_step+0x238>)
 8001c26:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <EngTrModel_step+0x15e>
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fdaf 	bl	8001794 <EngTrModel_gear_state>
 8001c36:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <EngTrModel_step+0x238>)
 8001c38:	2202      	movs	r2, #2
 8001c3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001c3e:	e082      	b.n	8001d46 <EngTrModel_step+0x26e>
 8001c40:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <EngTrModel_step+0x23c>)
 8001c42:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c4a:	f7fe feb7 	bl	80009bc <__aeabi_dcmplt>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d100      	bne.n	8001c56 <EngTrModel_step+0x17e>
 8001c54:	e077      	b.n	8001d46 <EngTrModel_step+0x26e>
 8001c56:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <EngTrModel_step+0x238>)
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001c5e:	e072      	b.n	8001d46 <EngTrModel_step+0x26e>
 8001c60:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <EngTrModel_step+0x23c>)
 8001c62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c6a:	f7fe fea7 	bl	80009bc <__aeabi_dcmplt>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d007      	beq.n	8001c84 <EngTrModel_step+0x1ac>
 8001c74:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <EngTrModel_step+0x238>)
 8001c76:	2203      	movs	r2, #3
 8001c78:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <EngTrModel_step+0x238>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
 8001c82:	e060      	b.n	8001d46 <EngTrModel_step+0x26e>
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <EngTrModel_step+0x23c>)
 8001c86:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c8e:	f7fe feb3 	bl	80009f8 <__aeabi_dcmpgt>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d100      	bne.n	8001c9a <EngTrModel_step+0x1c2>
 8001c98:	e055      	b.n	8001d46 <EngTrModel_step+0x26e>
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <EngTrModel_step+0x238>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <EngTrModel_step+0x238>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
 8001ca8:	e04d      	b.n	8001d46 <EngTrModel_step+0x26e>
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <EngTrModel_step+0x238>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d919      	bls.n	8001ce6 <EngTrModel_step+0x20e>
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <EngTrModel_step+0x23c>)
 8001cb4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cbc:	f7fe fe88 	bl	80009d0 <__aeabi_dcmple>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00f      	beq.n	8001ce6 <EngTrModel_step+0x20e>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <EngTrModel_step+0x238>)
 8001ccc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <EngTrModel_step+0x204>
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fd5c 	bl	8001794 <EngTrModel_gear_state>
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <EngTrModel_step+0x238>)
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001ce4:	e02e      	b.n	8001d44 <EngTrModel_step+0x26c>
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <EngTrModel_step+0x23c>)
 8001ce8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cf0:	f7fe fe82 	bl	80009f8 <__aeabi_dcmpgt>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d120      	bne.n	8001d3c <EngTrModel_step+0x264>
 8001cfa:	e023      	b.n	8001d44 <EngTrModel_step+0x26c>
 8001cfc:	f3af 8000 	nop.w
 8001d00:	54442d18 	.word	0x54442d18
 8001d04:	401921fb 	.word	0x401921fb
 8001d08:	745d1746 	.word	0x745d1746
 8001d0c:	3f8745d1 	.word	0x3f8745d1
 8001d10:	20000258 	.word	0x20000258
 8001d14:	20000228 	.word	0x20000228
 8001d18:	20000290 	.word	0x20000290
 8001d1c:	3ff00000 	.word	0x3ff00000
 8001d20:	20000280 	.word	0x20000280
 8001d24:	0800d200 	.word	0x0800d200
 8001d28:	0800c9d0 	.word	0x0800c9d0
 8001d2c:	0800cac0 	.word	0x0800cac0
 8001d30:	0800ca90 	.word	0x0800ca90
 8001d34:	0800cae0 	.word	0x0800cae0
 8001d38:	0800cba0 	.word	0x0800cba0
 8001d3c:	4b84      	ldr	r3, [pc, #528]	; (8001f50 <EngTrModel_step+0x478>)
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001d44:	bf00      	nop
 8001d46:	4b83      	ldr	r3, [pc, #524]	; (8001f54 <EngTrModel_step+0x47c>)
 8001d48:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	4b81      	ldr	r3, [pc, #516]	; (8001f58 <EngTrModel_step+0x480>)
 8001d52:	4a82      	ldr	r2, [pc, #520]	; (8001f5c <EngTrModel_step+0x484>)
 8001d54:	f7ff fc3a 	bl	80015cc <look1_binlxpw>
 8001d58:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001d5c:	4b7c      	ldr	r3, [pc, #496]	; (8001f50 <EngTrModel_step+0x478>)
 8001d5e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d62:	a375      	add	r3, pc, #468	; (adr r3, 8001f38 <EngTrModel_step+0x460>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fbb6 	bl	80004d8 <__aeabi_dmul>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4978      	ldr	r1, [pc, #480]	; (8001f54 <EngTrModel_step+0x47c>)
 8001d72:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001d76:	4b77      	ldr	r3, [pc, #476]	; (8001f54 <EngTrModel_step+0x47c>)
 8001d78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	f7fe fe10 	bl	80009a8 <__aeabi_dcmpeq>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d114      	bne.n	8001db8 <EngTrModel_step+0x2e0>
 8001d8e:	4b71      	ldr	r3, [pc, #452]	; (8001f54 <EngTrModel_step+0x47c>)
 8001d90:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d98:	f7fe fb9e 	bl	80004d8 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <EngTrModel_step+0x47c>)
 8001da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001daa:	f7fe fcbf 	bl	800072c <__aeabi_ddiv>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001db6:	e005      	b.n	8001dc4 <EngTrModel_step+0x2ec>
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001dc4:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <EngTrModel_step+0x47c>)
 8001dc6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001dca:	2314      	movs	r3, #20
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	4b64      	ldr	r3, [pc, #400]	; (8001f60 <EngTrModel_step+0x488>)
 8001dd0:	4a64      	ldr	r2, [pc, #400]	; (8001f64 <EngTrModel_step+0x48c>)
 8001dd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dd6:	f7ff fbf9 	bl	80015cc <look1_binlxpw>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4620      	mov	r0, r4
 8001de0:	4629      	mov	r1, r5
 8001de2:	f7fe fca3 	bl	800072c <__aeabi_ddiv>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001df6:	f7ff fd53 	bl	80018a0 <rt_powd_snf>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4955      	ldr	r1, [pc, #340]	; (8001f54 <EngTrModel_step+0x47c>)
 8001e00:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001e04:	2314      	movs	r3, #20
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	4b57      	ldr	r3, [pc, #348]	; (8001f68 <EngTrModel_step+0x490>)
 8001e0a:	4a56      	ldr	r2, [pc, #344]	; (8001f64 <EngTrModel_step+0x48c>)
 8001e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e10:	f7ff fbdc 	bl	80015cc <look1_binlxpw>
 8001e14:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001e18:	4b4e      	ldr	r3, [pc, #312]	; (8001f54 <EngTrModel_step+0x47c>)
 8001e1a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001e1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e22:	f7fe fb59 	bl	80004d8 <__aeabi_dmul>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e32:	f7fe fb51 	bl	80004d8 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4946      	ldr	r1, [pc, #280]	; (8001f54 <EngTrModel_step+0x47c>)
 8001e3c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001e40:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <EngTrModel_step+0x47c>)
 8001e42:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e46:	4949      	ldr	r1, [pc, #292]	; (8001f6c <EngTrModel_step+0x494>)
 8001e48:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001e4c:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <EngTrModel_step+0x47c>)
 8001e4e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e52:	4946      	ldr	r1, [pc, #280]	; (8001f6c <EngTrModel_step+0x494>)
 8001e54:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001e58:	4b45      	ldr	r3, [pc, #276]	; (8001f70 <EngTrModel_step+0x498>)
 8001e5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e5e:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <EngTrModel_step+0x47c>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	240a      	movs	r4, #10
 8001e66:	9404      	str	r4, [sp, #16]
 8001e68:	4c42      	ldr	r4, [pc, #264]	; (8001f74 <EngTrModel_step+0x49c>)
 8001e6a:	9403      	str	r4, [sp, #12]
 8001e6c:	4c42      	ldr	r4, [pc, #264]	; (8001f78 <EngTrModel_step+0x4a0>)
 8001e6e:	9402      	str	r4, [sp, #8]
 8001e70:	4c42      	ldr	r4, [pc, #264]	; (8001f7c <EngTrModel_step+0x4a4>)
 8001e72:	9401      	str	r4, [sp, #4]
 8001e74:	4c42      	ldr	r4, [pc, #264]	; (8001f80 <EngTrModel_step+0x4a8>)
 8001e76:	9400      	str	r4, [sp, #0]
 8001e78:	f7ff f9ac 	bl	80011d4 <look2_binlxpw>
 8001e7c:	4b35      	ldr	r3, [pc, #212]	; (8001f54 <EngTrModel_step+0x47c>)
 8001e7e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e82:	f7fe f971 	bl	8000168 <__aeabi_dsub>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	a32c      	add	r3, pc, #176	; (adr r3, 8001f40 <EngTrModel_step+0x468>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	f7fe fb20 	bl	80004d8 <__aeabi_dmul>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	a329      	add	r3, pc, #164	; (adr r3, 8001f48 <EngTrModel_step+0x470>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe fb17 	bl	80004d8 <__aeabi_dmul>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <EngTrModel_step+0x478>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe f958 	bl	800016c <__adddf3>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4923      	ldr	r1, [pc, #140]	; (8001f50 <EngTrModel_step+0x478>)
 8001ec2:	e9c1 2300 	strd	r2, r3, [r1]
 8001ec6:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <EngTrModel_step+0x47c>)
 8001ec8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	f7fe fd72 	bl	80009bc <__aeabi_dcmplt>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <EngTrModel_step+0x412>
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <EngTrModel_step+0x4ac>)
 8001ee4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001ee8:	e055      	b.n	8001f96 <EngTrModel_step+0x4be>
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <EngTrModel_step+0x47c>)
 8001eec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	f7fe fd7e 	bl	80009f8 <__aeabi_dcmpgt>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <EngTrModel_step+0x436>
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <EngTrModel_step+0x4b0>)
 8001f08:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f0c:	e043      	b.n	8001f96 <EngTrModel_step+0x4be>
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <EngTrModel_step+0x47c>)
 8001f10:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	f7fe fd44 	bl	80009a8 <__aeabi_dcmpeq>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d032      	beq.n	8001f8c <EngTrModel_step+0x4b4>
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f32:	e030      	b.n	8001f96 <EngTrModel_step+0x4be>
 8001f34:	f3af 8000 	nop.w
 8001f38:	3d70a3d7 	.word	0x3d70a3d7
 8001f3c:	4009d70a 	.word	0x4009d70a
 8001f40:	0865b653 	.word	0x0865b653
 8001f44:	4046bc6f 	.word	0x4046bc6f
 8001f48:	47ae147b 	.word	0x47ae147b
 8001f4c:	3fa47ae1 	.word	0x3fa47ae1
 8001f50:	20000258 	.word	0x20000258
 8001f54:	20000228 	.word	0x20000228
 8001f58:	0800cfe8 	.word	0x0800cfe8
 8001f5c:	0800cac0 	.word	0x0800cac0
 8001f60:	0800d008 	.word	0x0800d008
 8001f64:	0800d0b0 	.word	0x0800d0b0
 8001f68:	0800d158 	.word	0x0800d158
 8001f6c:	20000290 	.word	0x20000290
 8001f70:	20000280 	.word	0x20000280
 8001f74:	0800d208 	.word	0x0800d208
 8001f78:	0800cbd0 	.word	0x0800cbd0
 8001f7c:	0800cf90 	.word	0x0800cf90
 8001f80:	0800cf40 	.word	0x0800cf40
 8001f84:	bff00000 	.word	0xbff00000
 8001f88:	3ff00000 	.word	0x3ff00000
 8001f8c:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <EngTrModel_step+0x5a0>)
 8001f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f92:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f96:	4b39      	ldr	r3, [pc, #228]	; (800207c <EngTrModel_step+0x5a4>)
 8001f98:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001f9c:	a32e      	add	r3, pc, #184	; (adr r3, 8002058 <EngTrModel_step+0x580>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	f7fe fa99 	bl	80004d8 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4614      	mov	r4, r2
 8001fac:	461d      	mov	r5, r3
 8001fae:	4b33      	ldr	r3, [pc, #204]	; (800207c <EngTrModel_step+0x5a4>)
 8001fb0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fbc:	f7ff fc70 	bl	80018a0 <rt_powd_snf>
 8001fc0:	a327      	add	r3, pc, #156	; (adr r3, 8002060 <EngTrModel_step+0x588>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe fa87 	bl	80004d8 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <EngTrModel_step+0x5a8>)
 8001fd8:	f7fe f8c8 	bl	800016c <__adddf3>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <EngTrModel_step+0x5ac>)
 8001fe6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001fea:	f7fe f8bf 	bl	800016c <__adddf3>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ffa:	f7fe fa6d 	bl	80004d8 <__aeabi_dmul>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4620      	mov	r0, r4
 8002004:	4629      	mov	r1, r5
 8002006:	f7fe f8af 	bl	8000168 <__aeabi_dsub>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	a315      	add	r3, pc, #84	; (adr r3, 8002068 <EngTrModel_step+0x590>)
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	f7fe fa5e 	bl	80004d8 <__aeabi_dmul>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	a312      	add	r3, pc, #72	; (adr r3, 8002070 <EngTrModel_step+0x598>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe fa55 	bl	80004d8 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <EngTrModel_step+0x5b0>)
 8002038:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800203c:	f7fe f896 	bl	800016c <__adddf3>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4910      	ldr	r1, [pc, #64]	; (8002088 <EngTrModel_step+0x5b0>)
 8002046:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bdb0      	pop	{r4, r5, r7, pc}
 8002052:	bf00      	nop
 8002054:	f3af 8000 	nop.w
 8002058:	3d70a3d7 	.word	0x3d70a3d7
 800205c:	4009d70a 	.word	0x4009d70a
 8002060:	47ae147b 	.word	0x47ae147b
 8002064:	3f947ae1 	.word	0x3f947ae1
 8002068:	b3bfa695 	.word	0xb3bfa695
 800206c:	3fb52ad1 	.word	0x3fb52ad1
 8002070:	47ae147b 	.word	0x47ae147b
 8002074:	3fa47ae1 	.word	0x3fa47ae1
 8002078:	200005d0 	.word	0x200005d0
 800207c:	20000228 	.word	0x20000228
 8002080:	40440000 	.word	0x40440000
 8002084:	20000280 	.word	0x20000280
 8002088:	20000258 	.word	0x20000258

0800208c <EngTrModel_initialize>:
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
 8002090:	2008      	movs	r0, #8
 8002092:	f001 fae3 	bl	800365c <rt_InitInfAndNaN>
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <USER_GPIO_Define>:
 800209c:	b490      	push	{r4, r7}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4604      	mov	r4, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	4611      	mov	r1, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	4623      	mov	r3, r4
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	4603      	mov	r3, r0
 80020b0:	71bb      	strb	r3, [r7, #6]
 80020b2:	460b      	mov	r3, r1
 80020b4:	717b      	strb	r3, [r7, #5]
 80020b6:	4613      	mov	r3, r2
 80020b8:	713b      	strb	r3, [r7, #4]
 80020ba:	79bb      	ldrb	r3, [r7, #6]
 80020bc:	72fb      	strb	r3, [r7, #11]
 80020be:	2300      	movs	r3, #0
 80020c0:	72bb      	strb	r3, [r7, #10]
 80020c2:	79bb      	ldrb	r3, [r7, #6]
 80020c4:	2b07      	cmp	r3, #7
 80020c6:	d904      	bls.n	80020d2 <USER_GPIO_Define+0x36>
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	3b08      	subs	r3, #8
 80020cc:	72fb      	strb	r3, [r7, #11]
 80020ce:	2301      	movs	r3, #1
 80020d0:	72bb      	strb	r3, [r7, #10]
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10d      	bne.n	80020f4 <USER_GPIO_Define+0x58>
 80020d8:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <USER_GPIO_Define+0x148>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a41      	ldr	r2, [pc, #260]	; (80021e4 <USER_GPIO_Define+0x148>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	7abb      	ldrb	r3, [r7, #10]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020ec:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	e042      	b.n	800217a <USER_GPIO_Define+0xde>
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d10d      	bne.n	8002116 <USER_GPIO_Define+0x7a>
 80020fa:	4b3a      	ldr	r3, [pc, #232]	; (80021e4 <USER_GPIO_Define+0x148>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	4a39      	ldr	r2, [pc, #228]	; (80021e4 <USER_GPIO_Define+0x148>)
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	6193      	str	r3, [r2, #24]
 8002106:	7abb      	ldrb	r3, [r7, #10]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800210e:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e031      	b.n	800217a <USER_GPIO_Define+0xde>
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d10d      	bne.n	8002138 <USER_GPIO_Define+0x9c>
 800211c:	4b31      	ldr	r3, [pc, #196]	; (80021e4 <USER_GPIO_Define+0x148>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a30      	ldr	r2, [pc, #192]	; (80021e4 <USER_GPIO_Define+0x148>)
 8002122:	f043 0310 	orr.w	r3, r3, #16
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	7abb      	ldrb	r3, [r7, #10]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002130:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e020      	b.n	800217a <USER_GPIO_Define+0xde>
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d10d      	bne.n	800215a <USER_GPIO_Define+0xbe>
 800213e:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <USER_GPIO_Define+0x148>)
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <USER_GPIO_Define+0x148>)
 8002144:	f043 0320 	orr.w	r3, r3, #32
 8002148:	6193      	str	r3, [r2, #24]
 800214a:	7abb      	ldrb	r3, [r7, #10]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002152:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e00f      	b.n	800217a <USER_GPIO_Define+0xde>
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2b04      	cmp	r3, #4
 800215e:	d10c      	bne.n	800217a <USER_GPIO_Define+0xde>
 8002160:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <USER_GPIO_Define+0x148>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <USER_GPIO_Define+0x148>)
 8002166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	7abb      	ldrb	r3, [r7, #10]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002174:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	797b      	ldrb	r3, [r7, #5]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d005      	beq.n	800218c <USER_GPIO_Define+0xf0>
 8002180:	797b      	ldrb	r3, [r7, #5]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d002      	beq.n	800218c <USER_GPIO_Define+0xf0>
 8002186:	797b      	ldrb	r3, [r7, #5]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d10b      	bne.n	80021a4 <USER_GPIO_Define+0x108>
 800218c:	793b      	ldrb	r3, [r7, #4]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d002      	beq.n	8002198 <USER_GPIO_Define+0xfc>
 8002192:	793b      	ldrb	r3, [r7, #4]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d105      	bne.n	80021a4 <USER_GPIO_Define+0x108>
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <USER_GPIO_Define+0x148>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <USER_GPIO_Define+0x148>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	7afa      	ldrb	r2, [r7, #11]
 80021aa:	0092      	lsls	r2, r2, #2
 80021ac:	210f      	movs	r1, #15
 80021ae:	fa01 f202 	lsl.w	r2, r1, r2
 80021b2:	43d2      	mvns	r2, r2
 80021b4:	401a      	ands	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	7979      	ldrb	r1, [r7, #5]
 80021c0:	7afa      	ldrb	r2, [r7, #11]
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	4091      	lsls	r1, r2
 80021c6:	7938      	ldrb	r0, [r7, #4]
 80021c8:	7afa      	ldrb	r2, [r7, #11]
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	3202      	adds	r2, #2
 80021ce:	fa00 f202 	lsl.w	r2, r0, r2
 80021d2:	430a      	orrs	r2, r1
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc90      	pop	{r4, r7}
 80021e2:	4770      	bx	lr
 80021e4:	40021000 	.word	0x40021000

080021e8 <USER_GPIO_Read>:
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	460a      	mov	r2, r1
 80021f2:	71fb      	strb	r3, [r7, #7]
 80021f4:	4613      	mov	r3, r2
 80021f6:	71bb      	strb	r3, [r7, #6]
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <USER_GPIO_Read+0x1c>
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <USER_GPIO_Read+0x70>)
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e016      	b.n	8002232 <USER_GPIO_Read+0x4a>
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d102      	bne.n	8002210 <USER_GPIO_Read+0x28>
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <USER_GPIO_Read+0x74>)
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	e010      	b.n	8002232 <USER_GPIO_Read+0x4a>
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d102      	bne.n	800221c <USER_GPIO_Read+0x34>
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <USER_GPIO_Read+0x78>)
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	e00a      	b.n	8002232 <USER_GPIO_Read+0x4a>
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2b03      	cmp	r3, #3
 8002220:	d102      	bne.n	8002228 <USER_GPIO_Read+0x40>
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <USER_GPIO_Read+0x7c>)
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	e004      	b.n	8002232 <USER_GPIO_Read+0x4a>
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	2b04      	cmp	r3, #4
 800222c:	d101      	bne.n	8002232 <USER_GPIO_Read+0x4a>
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <USER_GPIO_Read+0x80>)
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	79ba      	ldrb	r2, [r7, #6]
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f202 	lsl.w	r2, r1, r2
 800223e:	401a      	ands	r2, r3
 8002240:	79bb      	ldrb	r3, [r7, #6]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40010808 	.word	0x40010808
 800225c:	40010c08 	.word	0x40010c08
 8002260:	40011008 	.word	0x40011008
 8002264:	40011408 	.word	0x40011408
 8002268:	40011808 	.word	0x40011808

0800226c <USER_GPIO_Write>:
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	460b      	mov	r3, r1
 8002278:	71bb      	strb	r3, [r7, #6]
 800227a:	4613      	mov	r3, r2
 800227c:	717b      	strb	r3, [r7, #5]
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <USER_GPIO_Write+0x1e>
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <USER_GPIO_Write+0x84>)
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e016      	b.n	80022b8 <USER_GPIO_Write+0x4c>
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d102      	bne.n	8002296 <USER_GPIO_Write+0x2a>
 8002290:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <USER_GPIO_Write+0x88>)
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e010      	b.n	80022b8 <USER_GPIO_Write+0x4c>
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d102      	bne.n	80022a2 <USER_GPIO_Write+0x36>
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <USER_GPIO_Write+0x8c>)
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e00a      	b.n	80022b8 <USER_GPIO_Write+0x4c>
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d102      	bne.n	80022ae <USER_GPIO_Write+0x42>
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <USER_GPIO_Write+0x90>)
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	e004      	b.n	80022b8 <USER_GPIO_Write+0x4c>
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d101      	bne.n	80022b8 <USER_GPIO_Write+0x4c>
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <USER_GPIO_Write+0x94>)
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	797b      	ldrb	r3, [r7, #5]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <USER_GPIO_Write+0x66>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	7979      	ldrb	r1, [r7, #5]
 80022c4:	79ba      	ldrb	r2, [r7, #6]
 80022c6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ca:	431a      	orrs	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e009      	b.n	80022e6 <USER_GPIO_Write+0x7a>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	79ba      	ldrb	r2, [r7, #6]
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f202 	lsl.w	r2, r1, r2
 80022de:	43d2      	mvns	r2, r2
 80022e0:	401a      	ands	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	4001080c 	.word	0x4001080c
 80022f4:	40010c0c 	.word	0x40010c0c
 80022f8:	4001100c 	.word	0x4001100c
 80022fc:	4001140c 	.word	0x4001140c
 8002300:	4001180c 	.word	0x4001180c

08002304 <USER_GPIO_Toggle>:
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	460a      	mov	r2, r1
 800230e:	71fb      	strb	r3, [r7, #7]
 8002310:	4613      	mov	r3, r2
 8002312:	71bb      	strb	r3, [r7, #6]
 8002314:	79ba      	ldrb	r2, [r7, #6]
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff64 	bl	80021e8 <USER_GPIO_Read>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <USER_GPIO_Toggle+0x30>
 8002326:	79b9      	ldrb	r1, [r7, #6]
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	2200      	movs	r2, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff9d 	bl	800226c <USER_GPIO_Write>
 8002332:	e005      	b.n	8002340 <USER_GPIO_Toggle+0x3c>
 8002334:	79b9      	ldrb	r1, [r7, #6]
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2201      	movs	r2, #1
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ff96 	bl	800226c <USER_GPIO_Write>
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <USER_I2C_Init>:
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	460a      	mov	r2, r1
 8002352:	71fb      	strb	r3, [r7, #7]
 8002354:	4613      	mov	r3, r2
 8002356:	71bb      	strb	r3, [r7, #6]
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d12d      	bne.n	80023ba <USER_I2C_Init+0x72>
 800235e:	4b31      	ldr	r3, [pc, #196]	; (8002424 <USER_I2C_Init+0xdc>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4a30      	ldr	r2, [pc, #192]	; (8002424 <USER_I2C_Init+0xdc>)
 8002364:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002368:	61d3      	str	r3, [r2, #28]
 800236a:	2303      	movs	r3, #3
 800236c:	2203      	movs	r2, #3
 800236e:	2106      	movs	r1, #6
 8002370:	2001      	movs	r0, #1
 8002372:	f7ff fe93 	bl	800209c <USER_GPIO_Define>
 8002376:	2303      	movs	r3, #3
 8002378:	2203      	movs	r2, #3
 800237a:	2107      	movs	r1, #7
 800237c:	2001      	movs	r0, #1
 800237e:	f7ff fe8d 	bl	800209c <USER_GPIO_Define>
 8002382:	4b29      	ldr	r3, [pc, #164]	; (8002428 <USER_I2C_Init+0xe0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a28      	ldr	r2, [pc, #160]	; (8002428 <USER_I2C_Init+0xe0>)
 8002388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <USER_I2C_Init+0xe0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a25      	ldr	r2, [pc, #148]	; (8002428 <USER_I2C_Init+0xe0>)
 8002394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <USER_I2C_Init+0xe0>)
 800239c:	223f      	movs	r2, #63	; 0x3f
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	4a21      	ldr	r2, [pc, #132]	; (8002428 <USER_I2C_Init+0xe0>)
 80023a2:	79bb      	ldrb	r3, [r7, #6]
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <USER_I2C_Init+0xe0>)
 80023a8:	223f      	movs	r2, #63	; 0x3f
 80023aa:	621a      	str	r2, [r3, #32]
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <USER_I2C_Init+0xe0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <USER_I2C_Init+0xe0>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	e02f      	b.n	800241a <USER_I2C_Init+0xd2>
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d12c      	bne.n	800241a <USER_I2C_Init+0xd2>
 80023c0:	4b18      	ldr	r3, [pc, #96]	; (8002424 <USER_I2C_Init+0xdc>)
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	4a17      	ldr	r2, [pc, #92]	; (8002424 <USER_I2C_Init+0xdc>)
 80023c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023ca:	61d3      	str	r3, [r2, #28]
 80023cc:	2303      	movs	r3, #3
 80023ce:	2203      	movs	r2, #3
 80023d0:	210a      	movs	r1, #10
 80023d2:	2001      	movs	r0, #1
 80023d4:	f7ff fe62 	bl	800209c <USER_GPIO_Define>
 80023d8:	2303      	movs	r3, #3
 80023da:	2203      	movs	r2, #3
 80023dc:	210b      	movs	r1, #11
 80023de:	2001      	movs	r0, #1
 80023e0:	f7ff fe5c 	bl	800209c <USER_GPIO_Define>
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <USER_I2C_Init+0xe4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a10      	ldr	r2, [pc, #64]	; (800242c <USER_I2C_Init+0xe4>)
 80023ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <USER_I2C_Init+0xe4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <USER_I2C_Init+0xe4>)
 80023f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <USER_I2C_Init+0xe4>)
 80023fe:	223f      	movs	r2, #63	; 0x3f
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <USER_I2C_Init+0xe4>)
 8002404:	79bb      	ldrb	r3, [r7, #6]
 8002406:	61d3      	str	r3, [r2, #28]
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <USER_I2C_Init+0xe4>)
 800240a:	223f      	movs	r2, #63	; 0x3f
 800240c:	621a      	str	r2, [r3, #32]
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <USER_I2C_Init+0xe4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a06      	ldr	r2, [pc, #24]	; (800242c <USER_I2C_Init+0xe4>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	40005400 	.word	0x40005400
 800242c:	40005800 	.word	0x40005800

08002430 <USER_I2C_Start>:
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10d      	bne.n	800245c <USER_I2C_Start+0x2c>
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <USER_I2C_Start+0x58>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a10      	ldr	r2, [pc, #64]	; (8002488 <USER_I2C_Start+0x58>)
 8002446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	bf00      	nop
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <USER_I2C_Start+0x58>)
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f9      	beq.n	800244e <USER_I2C_Start+0x1e>
 800245a:	e00f      	b.n	800247c <USER_I2C_Start+0x4c>
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d10c      	bne.n	800247c <USER_I2C_Start+0x4c>
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <USER_I2C_Start+0x5c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <USER_I2C_Start+0x5c>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	bf00      	nop
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <USER_I2C_Start+0x5c>)
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f9      	beq.n	8002470 <USER_I2C_Start+0x40>
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40005400 	.word	0x40005400
 800248c:	40005800 	.word	0x40005800

08002490 <USER_I2C_Address>:
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
 800249a:	460b      	mov	r3, r1
 800249c:	71bb      	strb	r3, [r7, #6]
 800249e:	4613      	mov	r3, r2
 80024a0:	717b      	strb	r3, [r7, #5]
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d122      	bne.n	80024ee <USER_I2C_Address+0x5e>
 80024a8:	79ba      	ldrb	r2, [r7, #6]
 80024aa:	797b      	ldrb	r3, [r7, #5]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b26      	ldr	r3, [pc, #152]	; (800254c <USER_I2C_Address+0xbc>)
 80024b2:	611a      	str	r2, [r3, #16]
 80024b4:	bf00      	nop
 80024b6:	4b25      	ldr	r3, [pc, #148]	; (800254c <USER_I2C_Address+0xbc>)
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f9      	beq.n	80024b6 <USER_I2C_Address+0x26>
 80024c2:	e00d      	b.n	80024e0 <USER_I2C_Address+0x50>
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <USER_I2C_Address+0xbc>)
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	81fb      	strh	r3, [r7, #14]
 80024cc:	4b1f      	ldr	r3, [pc, #124]	; (800254c <USER_I2C_Address+0xbc>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	81fb      	strh	r3, [r7, #14]
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <USER_I2C_Address+0xbc>)
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d02c      	beq.n	800253a <USER_I2C_Address+0xaa>
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <USER_I2C_Address+0xbc>)
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1eb      	bne.n	80024c4 <USER_I2C_Address+0x34>
 80024ec:	e028      	b.n	8002540 <USER_I2C_Address+0xb0>
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d125      	bne.n	8002540 <USER_I2C_Address+0xb0>
 80024f4:	79ba      	ldrb	r2, [r7, #6]
 80024f6:	797b      	ldrb	r3, [r7, #5]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <USER_I2C_Address+0xc0>)
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	bf00      	nop
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <USER_I2C_Address+0xc0>)
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f9      	beq.n	8002502 <USER_I2C_Address+0x72>
 800250e:	e00d      	b.n	800252c <USER_I2C_Address+0x9c>
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <USER_I2C_Address+0xc0>)
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	b29b      	uxth	r3, r3
 8002516:	81fb      	strh	r3, [r7, #14]
 8002518:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <USER_I2C_Address+0xc0>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	b29b      	uxth	r3, r3
 800251e:	81fb      	strh	r3, [r7, #14]
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <USER_I2C_Address+0xc0>)
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <USER_I2C_Address+0xae>
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <USER_I2C_Address+0xc0>)
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1eb      	bne.n	8002510 <USER_I2C_Address+0x80>
 8002538:	e002      	b.n	8002540 <USER_I2C_Address+0xb0>
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <USER_I2C_Address+0xb0>
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40005400 	.word	0x40005400
 8002550:	40005800 	.word	0x40005800

08002554 <USER_I2C_Data>:
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	460a      	mov	r2, r1
 800255e:	71fb      	strb	r3, [r7, #7]
 8002560:	4613      	mov	r3, r2
 8002562:	71bb      	strb	r3, [r7, #6]
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d111      	bne.n	800258e <USER_I2C_Data+0x3a>
 800256a:	bf00      	nop
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <USER_I2C_Data+0x6c>)
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f9      	beq.n	800256c <USER_I2C_Data+0x18>
 8002578:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <USER_I2C_Data+0x6c>)
 800257a:	79bb      	ldrb	r3, [r7, #6]
 800257c:	6113      	str	r3, [r2, #16]
 800257e:	bf00      	nop
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <USER_I2C_Data+0x6c>)
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f9      	beq.n	8002580 <USER_I2C_Data+0x2c>
 800258c:	e013      	b.n	80025b6 <USER_I2C_Data+0x62>
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d110      	bne.n	80025b6 <USER_I2C_Data+0x62>
 8002594:	bf00      	nop
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <USER_I2C_Data+0x70>)
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f9      	beq.n	8002596 <USER_I2C_Data+0x42>
 80025a2:	4a08      	ldr	r2, [pc, #32]	; (80025c4 <USER_I2C_Data+0x70>)
 80025a4:	79bb      	ldrb	r3, [r7, #6]
 80025a6:	6113      	str	r3, [r2, #16]
 80025a8:	bf00      	nop
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <USER_I2C_Data+0x70>)
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f9      	beq.n	80025aa <USER_I2C_Data+0x56>
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	40005400 	.word	0x40005400
 80025c4:	40005800 	.word	0x40005800

080025c8 <USER_I2C_Stop>:
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10e      	bne.n	80025f6 <USER_I2C_Stop+0x2e>
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <USER_I2C_Stop+0x5c>)
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	81fb      	strh	r3, [r7, #14]
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <USER_I2C_Stop+0x5c>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	81fb      	strh	r3, [r7, #14]
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <USER_I2C_Stop+0x5c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0d      	ldr	r2, [pc, #52]	; (8002624 <USER_I2C_Stop+0x5c>)
 80025ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	e010      	b.n	8002618 <USER_I2C_Stop+0x50>
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d10d      	bne.n	8002618 <USER_I2C_Stop+0x50>
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <USER_I2C_Stop+0x60>)
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	b29b      	uxth	r3, r3
 8002602:	81fb      	strh	r3, [r7, #14]
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <USER_I2C_Stop+0x60>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	b29b      	uxth	r3, r3
 800260a:	81fb      	strh	r3, [r7, #14]
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <USER_I2C_Stop+0x60>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a05      	ldr	r2, [pc, #20]	; (8002628 <USER_I2C_Stop+0x60>)
 8002612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40005400 	.word	0x40005400
 8002628:	40005800 	.word	0x40005800

0800262c <USER_LEDS_Init>:
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
 8002630:	2300      	movs	r3, #0
 8002632:	2203      	movs	r2, #3
 8002634:	2102      	movs	r1, #2
 8002636:	2002      	movs	r0, #2
 8002638:	f7ff fd30 	bl	800209c <USER_GPIO_Define>
 800263c:	2200      	movs	r2, #0
 800263e:	2102      	movs	r1, #2
 8002640:	2002      	movs	r0, #2
 8002642:	f7ff fe13 	bl	800226c <USER_GPIO_Write>
 8002646:	2300      	movs	r3, #0
 8002648:	2203      	movs	r2, #3
 800264a:	2103      	movs	r1, #3
 800264c:	2002      	movs	r0, #2
 800264e:	f7ff fd25 	bl	800209c <USER_GPIO_Define>
 8002652:	2200      	movs	r2, #0
 8002654:	2103      	movs	r1, #3
 8002656:	2002      	movs	r0, #2
 8002658:	f7ff fe08 	bl	800226c <USER_GPIO_Write>
 800265c:	2001      	movs	r0, #1
 800265e:	f000 f9fd 	bl	8002a5c <USER_TIM_Init>
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}

08002666 <USER_MATRIX_KEYPAD_Init>:
 8002666:	b580      	push	{r7, lr}
 8002668:	af00      	add	r7, sp, #0
 800266a:	2300      	movs	r3, #0
 800266c:	2203      	movs	r2, #3
 800266e:	2105      	movs	r1, #5
 8002670:	2002      	movs	r0, #2
 8002672:	f7ff fd13 	bl	800209c <USER_GPIO_Define>
 8002676:	2201      	movs	r2, #1
 8002678:	2105      	movs	r1, #5
 800267a:	2002      	movs	r0, #2
 800267c:	f7ff fdf6 	bl	800226c <USER_GPIO_Write>
 8002680:	2300      	movs	r3, #0
 8002682:	2203      	movs	r2, #3
 8002684:	210c      	movs	r1, #12
 8002686:	2000      	movs	r0, #0
 8002688:	f7ff fd08 	bl	800209c <USER_GPIO_Define>
 800268c:	2201      	movs	r2, #1
 800268e:	210c      	movs	r1, #12
 8002690:	2000      	movs	r0, #0
 8002692:	f7ff fdeb 	bl	800226c <USER_GPIO_Write>
 8002696:	2300      	movs	r3, #0
 8002698:	2203      	movs	r2, #3
 800269a:	210b      	movs	r1, #11
 800269c:	2000      	movs	r0, #0
 800269e:	f7ff fcfd 	bl	800209c <USER_GPIO_Define>
 80026a2:	2201      	movs	r2, #1
 80026a4:	210b      	movs	r1, #11
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7ff fde0 	bl	800226c <USER_GPIO_Write>
 80026ac:	2300      	movs	r3, #0
 80026ae:	2203      	movs	r2, #3
 80026b0:	210c      	movs	r1, #12
 80026b2:	2001      	movs	r0, #1
 80026b4:	f7ff fcf2 	bl	800209c <USER_GPIO_Define>
 80026b8:	2201      	movs	r2, #1
 80026ba:	210c      	movs	r1, #12
 80026bc:	2001      	movs	r0, #1
 80026be:	f7ff fdd5 	bl	800226c <USER_GPIO_Write>
 80026c2:	2302      	movs	r3, #2
 80026c4:	2200      	movs	r2, #0
 80026c6:	2101      	movs	r1, #1
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7ff fce7 	bl	800209c <USER_GPIO_Define>
 80026ce:	2201      	movs	r2, #1
 80026d0:	2101      	movs	r1, #1
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff fdca 	bl	800226c <USER_GPIO_Write>
 80026d8:	2302      	movs	r3, #2
 80026da:	2200      	movs	r2, #0
 80026dc:	210f      	movs	r1, #15
 80026de:	2001      	movs	r0, #1
 80026e0:	f7ff fcdc 	bl	800209c <USER_GPIO_Define>
 80026e4:	2201      	movs	r2, #1
 80026e6:	210f      	movs	r1, #15
 80026e8:	2001      	movs	r0, #1
 80026ea:	f7ff fdbf 	bl	800226c <USER_GPIO_Write>
 80026ee:	2302      	movs	r3, #2
 80026f0:	2200      	movs	r2, #0
 80026f2:	210e      	movs	r1, #14
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7ff fcd1 	bl	800209c <USER_GPIO_Define>
 80026fa:	2201      	movs	r2, #1
 80026fc:	210e      	movs	r1, #14
 80026fe:	2001      	movs	r0, #1
 8002700:	f7ff fdb4 	bl	800226c <USER_GPIO_Write>
 8002704:	2302      	movs	r3, #2
 8002706:	2200      	movs	r2, #0
 8002708:	210d      	movs	r1, #13
 800270a:	2001      	movs	r0, #1
 800270c:	f7ff fcc6 	bl	800209c <USER_GPIO_Define>
 8002710:	2201      	movs	r2, #1
 8002712:	210d      	movs	r1, #13
 8002714:	2001      	movs	r0, #1
 8002716:	f7ff fda9 	bl	800226c <USER_GPIO_Write>
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <USER_MATRIX_KEYPAD_Read>:
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	234e      	movs	r3, #78	; 0x4e
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	2300      	movs	r3, #0
 800272c:	71bb      	strb	r3, [r7, #6]
 800272e:	e061      	b.n	80027f4 <USER_MATRIX_KEYPAD_Read+0xd4>
 8002730:	79bb      	ldrb	r3, [r7, #6]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d108      	bne.n	8002748 <USER_MATRIX_KEYPAD_Read+0x28>
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	4a33      	ldr	r2, [pc, #204]	; (8002808 <USER_MATRIX_KEYPAD_Read+0xe8>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	3310      	adds	r3, #16
 800273e:	2201      	movs	r2, #1
 8002740:	409a      	lsls	r2, r3
 8002742:	4b32      	ldr	r3, [pc, #200]	; (800280c <USER_MATRIX_KEYPAD_Read+0xec>)
 8002744:	611a      	str	r2, [r3, #16]
 8002746:	e013      	b.n	8002770 <USER_MATRIX_KEYPAD_Read+0x50>
 8002748:	79bb      	ldrb	r3, [r7, #6]
 800274a:	2b03      	cmp	r3, #3
 800274c:	d108      	bne.n	8002760 <USER_MATRIX_KEYPAD_Read+0x40>
 800274e:	79bb      	ldrb	r3, [r7, #6]
 8002750:	4a2d      	ldr	r2, [pc, #180]	; (8002808 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	3310      	adds	r3, #16
 8002756:	2201      	movs	r2, #1
 8002758:	409a      	lsls	r2, r3
 800275a:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <USER_MATRIX_KEYPAD_Read+0xf0>)
 800275c:	611a      	str	r2, [r3, #16]
 800275e:	e007      	b.n	8002770 <USER_MATRIX_KEYPAD_Read+0x50>
 8002760:	79bb      	ldrb	r3, [r7, #6]
 8002762:	4a29      	ldr	r2, [pc, #164]	; (8002808 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002764:	5cd3      	ldrb	r3, [r2, r3]
 8002766:	3310      	adds	r3, #16
 8002768:	2201      	movs	r2, #1
 800276a:	409a      	lsls	r2, r3
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <USER_MATRIX_KEYPAD_Read+0xf4>)
 800276e:	611a      	str	r2, [r3, #16]
 8002770:	2300      	movs	r3, #0
 8002772:	717b      	strb	r3, [r7, #5]
 8002774:	e015      	b.n	80027a2 <USER_MATRIX_KEYPAD_Read+0x82>
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <USER_MATRIX_KEYPAD_Read+0xf0>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	797a      	ldrb	r2, [r7, #5]
 800277c:	4926      	ldr	r1, [pc, #152]	; (8002818 <USER_MATRIX_KEYPAD_Read+0xf8>)
 800277e:	5c8a      	ldrb	r2, [r1, r2]
 8002780:	4611      	mov	r1, r2
 8002782:	2201      	movs	r2, #1
 8002784:	408a      	lsls	r2, r1
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d107      	bne.n	800279c <USER_MATRIX_KEYPAD_Read+0x7c>
 800278c:	79ba      	ldrb	r2, [r7, #6]
 800278e:	797b      	ldrb	r3, [r7, #5]
 8002790:	4922      	ldr	r1, [pc, #136]	; (800281c <USER_MATRIX_KEYPAD_Read+0xfc>)
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	440a      	add	r2, r1
 8002796:	4413      	add	r3, r2
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
 800279c:	797b      	ldrb	r3, [r7, #5]
 800279e:	3301      	adds	r3, #1
 80027a0:	717b      	strb	r3, [r7, #5]
 80027a2:	797b      	ldrb	r3, [r7, #5]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d9e6      	bls.n	8002776 <USER_MATRIX_KEYPAD_Read+0x56>
 80027a8:	79bb      	ldrb	r3, [r7, #6]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <USER_MATRIX_KEYPAD_Read+0xa2>
 80027ae:	79bb      	ldrb	r3, [r7, #6]
 80027b0:	4a15      	ldr	r2, [pc, #84]	; (8002808 <USER_MATRIX_KEYPAD_Read+0xe8>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	461a      	mov	r2, r3
 80027b6:	2301      	movs	r3, #1
 80027b8:	fa03 f202 	lsl.w	r2, r3, r2
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <USER_MATRIX_KEYPAD_Read+0xec>)
 80027be:	611a      	str	r2, [r3, #16]
 80027c0:	e015      	b.n	80027ee <USER_MATRIX_KEYPAD_Read+0xce>
 80027c2:	79bb      	ldrb	r3, [r7, #6]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d109      	bne.n	80027dc <USER_MATRIX_KEYPAD_Read+0xbc>
 80027c8:	79bb      	ldrb	r3, [r7, #6]
 80027ca:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <USER_MATRIX_KEYPAD_Read+0xe8>)
 80027cc:	5cd3      	ldrb	r3, [r2, r3]
 80027ce:	461a      	mov	r2, r3
 80027d0:	2301      	movs	r3, #1
 80027d2:	fa03 f202 	lsl.w	r2, r3, r2
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <USER_MATRIX_KEYPAD_Read+0xf0>)
 80027d8:	611a      	str	r2, [r3, #16]
 80027da:	e008      	b.n	80027ee <USER_MATRIX_KEYPAD_Read+0xce>
 80027dc:	79bb      	ldrb	r3, [r7, #6]
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <USER_MATRIX_KEYPAD_Read+0xe8>)
 80027e0:	5cd3      	ldrb	r3, [r2, r3]
 80027e2:	461a      	mov	r2, r3
 80027e4:	2301      	movs	r3, #1
 80027e6:	fa03 f202 	lsl.w	r2, r3, r2
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <USER_MATRIX_KEYPAD_Read+0xf4>)
 80027ec:	611a      	str	r2, [r3, #16]
 80027ee:	79bb      	ldrb	r3, [r7, #6]
 80027f0:	3301      	adds	r3, #1
 80027f2:	71bb      	strb	r3, [r7, #6]
 80027f4:	79bb      	ldrb	r3, [r7, #6]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d99a      	bls.n	8002730 <USER_MATRIX_KEYPAD_Read+0x10>
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000
 800280c:	40011000 	.word	0x40011000
 8002810:	40010c00 	.word	0x40010c00
 8002814:	40010800 	.word	0x40010800
 8002818:	20000004 	.word	0x20000004
 800281c:	20000008 	.word	0x20000008

08002820 <USER_OLED_Command_1_Byte>:
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	460a      	mov	r2, r1
 800282a:	71fb      	strb	r3, [r7, #7]
 800282c:	4613      	mov	r3, r2
 800282e:	71bb      	strb	r3, [r7, #6]
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fdfc 	bl	8002430 <USER_I2C_Start>
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	2200      	movs	r2, #0
 800283c:	2178      	movs	r1, #120	; 0x78
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fe26 	bl	8002490 <USER_I2C_Address>
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fe83 	bl	8002554 <USER_I2C_Data>
 800284e:	79ba      	ldrb	r2, [r7, #6]
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fe7d 	bl	8002554 <USER_I2C_Data>
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff feb3 	bl	80025c8 <USER_I2C_Stop>
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <USER_OLED_Command_2_Byte>:
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	6039      	str	r1, [r7, #0]
 8002874:	71fb      	strb	r3, [r7, #7]
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fdd7 	bl	8002430 <USER_I2C_Start>
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	2200      	movs	r2, #0
 8002886:	2178      	movs	r1, #120	; 0x78
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fe01 	bl	8002490 <USER_I2C_Address>
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fe5e 	bl	8002554 <USER_I2C_Data>
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e00b      	b.n	80028b6 <USER_OLED_Command_2_Byte+0x4c>
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fe52 	bl	8002554 <USER_I2C_Data>
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	3301      	adds	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d9f0      	bls.n	800289e <USER_OLED_Command_2_Byte+0x34>
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fe82 	bl	80025c8 <USER_I2C_Stop>
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <USER_OLED_Init>:
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	460a      	mov	r2, r1
 80028d6:	71fb      	strb	r3, [r7, #7]
 80028d8:	4613      	mov	r3, r2
 80028da:	71bb      	strb	r3, [r7, #6]
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	212d      	movs	r1, #45	; 0x2d
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fd31 	bl	8002348 <USER_I2C_Init>
 80028e6:	f643 73a8 	movw	r3, #16296	; 0x3fa8
 80028ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80028ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ffb8 	bl	800286a <USER_OLED_Command_2_Byte>
 80028fa:	23d3      	movs	r3, #211	; 0xd3
 80028fc:	843b      	strh	r3, [r7, #32]
 80028fe:	f107 0220 	add.w	r2, r7, #32
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ffaf 	bl	800286a <USER_OLED_Command_2_Byte>
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	2140      	movs	r1, #64	; 0x40
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff85 	bl	8002820 <USER_OLED_Command_1_Byte>
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	21a1      	movs	r1, #161	; 0xa1
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff ff80 	bl	8002820 <USER_OLED_Command_1_Byte>
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	21c8      	movs	r1, #200	; 0xc8
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff7b 	bl	8002820 <USER_OLED_Command_1_Byte>
 800292a:	23da      	movs	r3, #218	; 0xda
 800292c:	773b      	strb	r3, [r7, #28]
 800292e:	79bb      	ldrb	r3, [r7, #6]
 8002930:	777b      	strb	r3, [r7, #29]
 8002932:	f107 021c 	add.w	r2, r7, #28
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff95 	bl	800286a <USER_OLED_Command_2_Byte>
 8002940:	f647 7381 	movw	r3, #32641	; 0x7f81
 8002944:	833b      	strh	r3, [r7, #24]
 8002946:	f107 0218 	add.w	r2, r7, #24
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	4611      	mov	r1, r2
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ff8b 	bl	800286a <USER_OLED_Command_2_Byte>
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	21a4      	movs	r1, #164	; 0xa4
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff61 	bl	8002820 <USER_OLED_Command_1_Byte>
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	21a6      	movs	r1, #166	; 0xa6
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff5c 	bl	8002820 <USER_OLED_Command_1_Byte>
 8002968:	f248 03d5 	movw	r3, #32981	; 0x80d5
 800296c:	82bb      	strh	r3, [r7, #20]
 800296e:	f107 0214 	add.w	r2, r7, #20
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ff77 	bl	800286a <USER_OLED_Command_2_Byte>
 800297c:	f241 438d 	movw	r3, #5261	; 0x148d
 8002980:	823b      	strh	r3, [r7, #16]
 8002982:	f107 0210 	add.w	r2, r7, #16
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff6d 	bl	800286a <USER_OLED_Command_2_Byte>
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	21af      	movs	r1, #175	; 0xaf
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff43 	bl	8002820 <USER_OLED_Command_1_Byte>
 800299a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800299e:	81bb      	strh	r3, [r7, #12]
 80029a0:	f107 020c 	add.w	r2, r7, #12
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff5e 	bl	800286a <USER_OLED_Command_2_Byte>
 80029ae:	bf00      	nop
 80029b0:	3728      	adds	r7, #40	; 0x28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <USER_OLED_Init_64>:
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	71fb      	strb	r3, [r7, #7]
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	2112      	movs	r1, #18
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff81 	bl	80028cc <USER_OLED_Init>
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <USER_PWM_Init>:
#include "main.h"
#include "GPIO.h"
#include "TIMER.h"

void USER_PWM_Init( void )
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	af00      	add	r7, sp, #0
  USER_GPIO_Define( PORTB, 6, OUT_10, OUT_AF_PP );	 // Pin PB6 as alternate function push-pull, max speed 10 MHz
 80029d6:	2302      	movs	r3, #2
 80029d8:	2201      	movs	r2, #1
 80029da:	2106      	movs	r1, #6
 80029dc:	2001      	movs	r0, #1
 80029de:	f7ff fb5d 	bl	800209c <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 6, 0 );
 80029e2:	2200      	movs	r2, #0
 80029e4:	2106      	movs	r1, #6
 80029e6:	2001      	movs	r0, #1
 80029e8:	f7ff fc40 	bl	800226c <USER_GPIO_Write>

  USER_TIM_Init( TIM_4 );
 80029ec:	2002      	movs	r0, #2
 80029ee:	f000 f835 	bl	8002a5c <USER_TIM_Init>
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <USER_PWM_Generate>:

void USER_PWM_Generate( uint16_t PSC, uint16_t ARR, uint16_t CCR1 )
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	80fb      	strh	r3, [r7, #6]
 8002a02:	460b      	mov	r3, r1
 8002a04:	80bb      	strh	r3, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	807b      	strh	r3, [r7, #2]
  TIM4->PSC	=	PSC;				// Configure the prescaler, the period and the duty cycle
 8002a0a:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <USER_PWM_Generate+0x60>)
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	6293      	str	r3, [r2, #40]	; 0x28
  TIM4->ARR	=	ARR;				//	register values
 8002a10:	4a11      	ldr	r2, [pc, #68]	; (8002a58 <USER_PWM_Generate+0x60>)
 8002a12:	88bb      	ldrh	r3, [r7, #4]
 8002a14:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIM4->CCR1	=	CCR1;
 8002a16:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <USER_PWM_Generate+0x60>)
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	6353      	str	r3, [r2, #52]	; 0x34

  TIM4->EGR	|=	TIM_EGR_UG;			// Generate the UEV-event to load the period, the prescaler and
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <USER_PWM_Generate+0x60>)
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <USER_PWM_Generate+0x60>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6153      	str	r3, [r2, #20]
  							//	reset the counter

  TIM4->SR	&=	~(TIM_SR_UIF);			// Clear the Timer overflow UEV-event flag
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <USER_PWM_Generate+0x60>)
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <USER_PWM_Generate+0x60>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	6113      	str	r3, [r2, #16]

  TIM4->CCER	|=	TIM_CCER_CC1E;			// Enable the PWM signal output and set the polarity
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <USER_PWM_Generate+0x60>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <USER_PWM_Generate+0x60>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6213      	str	r3, [r2, #32]
  TIM4->CCER	&=	~(TIM_CCER_CC1P);
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <USER_PWM_Generate+0x60>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <USER_PWM_Generate+0x60>)
 8002a46:	f023 0302 	bic.w	r3, r3, #2
 8002a4a:	6213      	str	r3, [r2, #32]

  //while( !( TIM4->SR & TIM_SR_UIF ) );		// Wait for UIF
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40000800 	.word	0x40000800

08002a5c <USER_TIM_Init>:
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d12e      	bne.n	8002aca <USER_TIM_Init+0x6e>
 8002a6c:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <USER_TIM_Init+0x178>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	4a58      	ldr	r2, [pc, #352]	; (8002bd4 <USER_TIM_Init+0x178>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	61d3      	str	r3, [r2, #28]
 8002a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a82:	f023 0307 	bic.w	r3, r3, #7
 8002a86:	6093      	str	r3, [r2, #8]
 8002a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a92:	f023 0302 	bic.w	r3, r3, #2
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aa2:	f023 0310 	bic.w	r3, r3, #16
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ab2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	6113      	str	r3, [r2, #16]
 8002ac8:	e07e      	b.n	8002bc8 <USER_TIM_Init+0x16c>
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d130      	bne.n	8002b32 <USER_TIM_Init+0xd6>
 8002ad0:	4b40      	ldr	r3, [pc, #256]	; (8002bd4 <USER_TIM_Init+0x178>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	4a3f      	ldr	r2, [pc, #252]	; (8002bd4 <USER_TIM_Init+0x178>)
 8002ad6:	f043 0302 	orr.w	r3, r3, #2
 8002ada:	61d3      	str	r3, [r2, #28]
 8002adc:	4b3e      	ldr	r3, [pc, #248]	; (8002bd8 <USER_TIM_Init+0x17c>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4a3d      	ldr	r2, [pc, #244]	; (8002bd8 <USER_TIM_Init+0x17c>)
 8002ae2:	f023 0307 	bic.w	r3, r3, #7
 8002ae6:	6093      	str	r3, [r2, #8]
 8002ae8:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <USER_TIM_Init+0x17c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a3a      	ldr	r2, [pc, #232]	; (8002bd8 <USER_TIM_Init+0x17c>)
 8002aee:	f023 0302 	bic.w	r3, r3, #2
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b38      	ldr	r3, [pc, #224]	; (8002bd8 <USER_TIM_Init+0x17c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a37      	ldr	r2, [pc, #220]	; (8002bd8 <USER_TIM_Init+0x17c>)
 8002afa:	f023 0310 	bic.w	r3, r3, #16
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <USER_TIM_Init+0x17c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a34      	ldr	r2, [pc, #208]	; (8002bd8 <USER_TIM_Init+0x17c>)
 8002b06:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b32      	ldr	r3, [pc, #200]	; (8002bd8 <USER_TIM_Init+0x17c>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	4a31      	ldr	r2, [pc, #196]	; (8002bd8 <USER_TIM_Init+0x17c>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6113      	str	r3, [r2, #16]
 8002b18:	4b2f      	ldr	r3, [pc, #188]	; (8002bd8 <USER_TIM_Init+0x17c>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a2e      	ldr	r2, [pc, #184]	; (8002bd8 <USER_TIM_Init+0x17c>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	60d3      	str	r3, [r2, #12]
 8002b24:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <USER_TIM_Init+0x180>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2c      	ldr	r2, [pc, #176]	; (8002bdc <USER_TIM_Init+0x180>)
 8002b2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	e04a      	b.n	8002bc8 <USER_TIM_Init+0x16c>
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d147      	bne.n	8002bc8 <USER_TIM_Init+0x16c>
 8002b38:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <USER_TIM_Init+0x178>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	4a25      	ldr	r2, [pc, #148]	; (8002bd4 <USER_TIM_Init+0x178>)
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	61d3      	str	r3, [r2, #28]
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b4a:	f023 0302 	bic.w	r3, r3, #2
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b56:	f023 0304 	bic.w	r3, r3, #4
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b62:	f023 0310 	bic.w	r3, r3, #16
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b6e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a19      	ldr	r2, [pc, #100]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b86:	f023 0303 	bic.w	r3, r3, #3
 8002b8a:	6193      	str	r3, [r2, #24]
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b92:	f043 0308 	orr.w	r3, r3, #8
 8002b96:	6193      	str	r3, [r2, #24]
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <USER_TIM_Init+0x184>)
 8002b9e:	f023 0310 	bic.w	r3, r3, #16
 8002ba2:	6193      	str	r3, [r2, #24]
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <USER_TIM_Init+0x184>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	4a0d      	ldr	r2, [pc, #52]	; (8002be0 <USER_TIM_Init+0x184>)
 8002baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bae:	6193      	str	r3, [r2, #24]
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <USER_TIM_Init+0x184>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <USER_TIM_Init+0x184>)
 8002bb6:	f043 0320 	orr.w	r3, r3, #32
 8002bba:	6193      	str	r3, [r2, #24]
 8002bbc:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <USER_TIM_Init+0x184>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a07      	ldr	r2, [pc, #28]	; (8002be0 <USER_TIM_Init+0x184>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	40000800 	.word	0x40000800

08002be4 <USER_TIM_Delay>:
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	80bb      	strh	r3, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	807b      	strh	r3, [r7, #2]
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d128      	bne.n	8002c4e <USER_TIM_Delay+0x6a>
 8002bfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c00:	88bb      	ldrh	r3, [r7, #4]
 8002c02:	6293      	str	r3, [r2, #40]	; 0x28
 8002c04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c08:	887b      	ldrh	r3, [r7, #2]
 8002c0a:	6253      	str	r3, [r2, #36]	; 0x24
 8002c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	bf00      	nop
 8002c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f8      	beq.n	8002c1e <USER_TIM_Delay+0x3a>
 8002c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	6113      	str	r3, [r2, #16]
 8002c4c:	e01a      	b.n	8002c84 <USER_TIM_Delay+0xa0>
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d117      	bne.n	8002c84 <USER_TIM_Delay+0xa0>
 8002c54:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <USER_TIM_Delay+0xac>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d111      	bne.n	8002c84 <USER_TIM_Delay+0xa0>
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <USER_TIM_Delay+0xac>)
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10b      	bne.n	8002c84 <USER_TIM_Delay+0xa0>
 8002c6c:	4a08      	ldr	r2, [pc, #32]	; (8002c90 <USER_TIM_Delay+0xac>)
 8002c6e:	88bb      	ldrh	r3, [r7, #4]
 8002c70:	6293      	str	r3, [r2, #40]	; 0x28
 8002c72:	4a07      	ldr	r2, [pc, #28]	; (8002c90 <USER_TIM_Delay+0xac>)
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	6253      	str	r3, [r2, #36]	; 0x24
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <USER_TIM_Delay+0xac>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <USER_TIM_Delay+0xac>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40000400 	.word	0x40000400

08002c94 <TIM3_IRQHandler>:
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <TIM3_IRQHandler+0x3c>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <TIM3_IRQHandler+0x38>
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <TIM3_IRQHandler+0x3c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <TIM3_IRQHandler+0x3c>)
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <TIM3_IRQHandler+0x3c>)
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	4a06      	ldr	r2, [pc, #24]	; (8002cd0 <TIM3_IRQHandler+0x3c>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	6113      	str	r3, [r2, #16]
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	2002      	movs	r0, #2
 8002cc0:	f7ff fb20 	bl	8002304 <USER_GPIO_Toggle>
 8002cc4:	2103      	movs	r1, #3
 8002cc6:	2002      	movs	r0, #2
 8002cc8:	f7ff fb1c 	bl	8002304 <USER_GPIO_Toggle>
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40000400 	.word	0x40000400

08002cd4 <USER_USART_Init>:
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d138      	bne.n	8002d56 <USER_USART_Init+0x82>
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <USER_USART_Init+0x8c>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	4a1d      	ldr	r2, [pc, #116]	; (8002d60 <USER_USART_Init+0x8c>)
 8002cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cee:	6193      	str	r3, [r2, #24]
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	2109      	movs	r1, #9
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f7ff f9d0 	bl	800209c <USER_GPIO_Define>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	2200      	movs	r2, #0
 8002d00:	210a      	movs	r1, #10
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7ff f9ca 	bl	800209c <USER_GPIO_Define>
 8002d08:	2201      	movs	r2, #1
 8002d0a:	210a      	movs	r1, #10
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7ff faad 	bl	800226c <USER_GPIO_Write>
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <USER_USART_Init+0x90>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4a13      	ldr	r2, [pc, #76]	; (8002d64 <USER_USART_Init+0x90>)
 8002d18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d1c:	60d3      	str	r3, [r2, #12]
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <USER_USART_Init+0x90>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <USER_USART_Init+0x90>)
 8002d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d28:	60d3      	str	r3, [r2, #12]
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <USER_USART_Init+0x90>)
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <USER_USART_Init+0x90>)
 8002d30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d34:	6113      	str	r3, [r2, #16]
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <USER_USART_Init+0x90>)
 8002d38:	f240 222b 	movw	r2, #555	; 0x22b
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <USER_USART_Init+0x90>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <USER_USART_Init+0x90>)
 8002d44:	f043 0308 	orr.w	r3, r3, #8
 8002d48:	60d3      	str	r3, [r2, #12]
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <USER_USART_Init+0x90>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <USER_USART_Init+0x90>)
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	60d3      	str	r3, [r2, #12]
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40013800 	.word	0x40013800

08002d68 <_write>:
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e00f      	b.n	8002d9a <_write+0x32>
 8002d7a:	bf00      	nop
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <_write+0x48>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f9      	beq.n	8002d7c <_write+0x14>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	60ba      	str	r2, [r7, #8]
 8002d8e:	781a      	ldrb	r2, [r3, #0]
 8002d90:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <_write+0x48>)
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	3301      	adds	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	dbeb      	blt.n	8002d7a <_write+0x12>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40004400 	.word	0x40004400

08002db4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a06      	ldr	r2, [pc, #24]	; (8002ddc <vApplicationGetIdleTaskMemory+0x28>)
 8002dc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002dca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	200002a8 	.word	0x200002a8
 8002de0:	2000034c 	.word	0x2000034c

08002de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002de4:	b5b0      	push	{r4, r5, r7, lr}
 8002de6:	b09e      	sub	sp, #120	; 0x78
 8002de8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8002dea:	f000 fefb 	bl	8003be4 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */

  SystemClock_Config();
 8002dee:	f000 f873 	bl	8002ed8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8002df2:	f000 f8dd 	bl	8002fb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002df6:	f000 f8b1 	bl	8002f5c <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  USER_OLED_Init_64( I2C_2 );
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f7ff fddb 	bl	80029b6 <USER_OLED_Init_64>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */

  osMutexDef(Mutex1);
 8002e00:	2300      	movs	r3, #0
 8002e02:	673b      	str	r3, [r7, #112]	; 0x70
 8002e04:	2300      	movs	r3, #0
 8002e06:	677b      	str	r3, [r7, #116]	; 0x74
  Mutex1Handle = osMutexCreate(osMutex(Mutex1));
 8002e08:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f002 f9c0 	bl	8005192 <osMutexCreate>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4a27      	ldr	r2, [pc, #156]	; (8002eb4 <main+0xd0>)
 8002e16:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */

  osThreadDef(Task2, TASK_2_ADC_Read, osPriorityAboveNormal, 0, STACK_SIZE);
 8002e18:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <main+0xd4>)
 8002e1a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002e1e:	461d      	mov	r5, r3
 8002e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8002e2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f002 f94d 	bl	80050d2 <osThreadCreate>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4a20      	ldr	r2, [pc, #128]	; (8002ebc <main+0xd8>)
 8002e3c:	6013      	str	r3, [r2, #0]

  osThreadDef(Task4, TASK_4_MODEL_Step, osPriorityNormal, 0, STACK_SIZE);
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <main+0xdc>)
 8002e40:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002e44:	461d      	mov	r5, r3
 8002e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task4Handle = osThreadCreate(osThread(Task4), NULL);
 8002e52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f002 f93a 	bl	80050d2 <osThreadCreate>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <main+0xe0>)
 8002e62:	6013      	str	r3, [r2, #0]

  osThreadDef(Task3, TASK_3_UART_Read, osPriorityRealtime, 0, STACK_SIZE);
 8002e64:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <main+0xe4>)
 8002e66:	f107 041c 	add.w	r4, r7, #28
 8002e6a:	461d      	mov	r5, r3
 8002e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 f927 	bl	80050d2 <osThreadCreate>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <main+0xe8>)
 8002e88:	6013      	str	r3, [r2, #0]

  osThreadDef(Task1, TASK_1_MATRIX_KEYPAD_Read, osPriorityBelowNormal, 0, STACK_SIZE);
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <main+0xec>)
 8002e8c:	463c      	mov	r4, r7
 8002e8e:	461d      	mov	r5, r3
 8002e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8002e9c:	463b      	mov	r3, r7
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f002 f916 	bl	80050d2 <osThreadCreate>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <main+0xf0>)
 8002eaa:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */

  osKernelStart();
 8002eac:	f002 f8fa 	bl	80050a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002eb0:	e7fe      	b.n	8002eb0 <main+0xcc>
 8002eb2:	bf00      	nop
 8002eb4:	200005a4 	.word	0x200005a4
 8002eb8:	0800c7e8 	.word	0x0800c7e8
 8002ebc:	20000598 	.word	0x20000598
 8002ec0:	0800c80c 	.word	0x0800c80c
 8002ec4:	200005a0 	.word	0x200005a0
 8002ec8:	0800c830 	.word	0x0800c830
 8002ecc:	2000059c 	.word	0x2000059c
 8002ed0:	0800c854 	.word	0x0800c854
 8002ed4:	20000594 	.word	0x20000594

08002ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b090      	sub	sp, #64	; 0x40
 8002edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ede:	f107 0318 	add.w	r3, r7, #24
 8002ee2:	2228      	movs	r2, #40	; 0x28
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f005 f8da 	bl	80080a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002efa:	2302      	movs	r3, #2
 8002efc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002efe:	2301      	movs	r3, #1
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f02:	2310      	movs	r3, #16
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f06:	2302      	movs	r3, #2
 8002f08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002f0e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f14:	f107 0318 	add.w	r3, r7, #24
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f001 f933 	bl	8004184 <HAL_RCC_OscConfig>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002f24:	f000 fa80 	bl	8003428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f28:	230f      	movs	r3, #15
 8002f2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	2102      	movs	r1, #2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 fba0 	bl	8004688 <HAL_RCC_ClockConfig>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002f4e:	f000 fa6b 	bl	8003428 <Error_Handler>
  }
}
 8002f52:	bf00      	nop
 8002f54:	3740      	adds	r7, #64	; 0x40
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <MX_USART2_UART_Init+0x4c>)
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <MX_USART2_UART_Init+0x50>)
 8002f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <MX_USART2_UART_Init+0x4c>)
 8002f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <MX_USART2_UART_Init+0x4c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <MX_USART2_UART_Init+0x4c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <MX_USART2_UART_Init+0x4c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <MX_USART2_UART_Init+0x4c>)
 8002f82:	220c      	movs	r2, #12
 8002f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <MX_USART2_UART_Init+0x4c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <MX_USART2_UART_Init+0x4c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f92:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <MX_USART2_UART_Init+0x4c>)
 8002f94:	f001 ff80 	bl	8004e98 <HAL_UART_Init>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f9e:	f000 fa43 	bl	8003428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	2000054c 	.word	0x2000054c
 8002fac:	40004400 	.word	0x40004400

08002fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb6:	f107 0310 	add.w	r3, r7, #16
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fc4:	4b2d      	ldr	r3, [pc, #180]	; (800307c <MX_GPIO_Init+0xcc>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	4a2c      	ldr	r2, [pc, #176]	; (800307c <MX_GPIO_Init+0xcc>)
 8002fca:	f043 0310 	orr.w	r3, r3, #16
 8002fce:	6193      	str	r3, [r2, #24]
 8002fd0:	4b2a      	ldr	r3, [pc, #168]	; (800307c <MX_GPIO_Init+0xcc>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fdc:	4b27      	ldr	r3, [pc, #156]	; (800307c <MX_GPIO_Init+0xcc>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	4a26      	ldr	r2, [pc, #152]	; (800307c <MX_GPIO_Init+0xcc>)
 8002fe2:	f043 0320 	orr.w	r3, r3, #32
 8002fe6:	6193      	str	r3, [r2, #24]
 8002fe8:	4b24      	ldr	r3, [pc, #144]	; (800307c <MX_GPIO_Init+0xcc>)
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <MX_GPIO_Init+0xcc>)
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	4a20      	ldr	r2, [pc, #128]	; (800307c <MX_GPIO_Init+0xcc>)
 8002ffa:	f043 0304 	orr.w	r3, r3, #4
 8002ffe:	6193      	str	r3, [r2, #24]
 8003000:	4b1e      	ldr	r3, [pc, #120]	; (800307c <MX_GPIO_Init+0xcc>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <MX_GPIO_Init+0xcc>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	4a1a      	ldr	r2, [pc, #104]	; (800307c <MX_GPIO_Init+0xcc>)
 8003012:	f043 0308 	orr.w	r3, r3, #8
 8003016:	6193      	str	r3, [r2, #24]
 8003018:	4b18      	ldr	r3, [pc, #96]	; (800307c <MX_GPIO_Init+0xcc>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003024:	2200      	movs	r2, #0
 8003026:	2120      	movs	r1, #32
 8003028:	4815      	ldr	r0, [pc, #84]	; (8003080 <MX_GPIO_Init+0xd0>)
 800302a:	f001 f871 	bl	8004110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800302e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <MX_GPIO_Init+0xd4>)
 8003036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800303c:	f107 0310 	add.w	r3, r7, #16
 8003040:	4619      	mov	r1, r3
 8003042:	4811      	ldr	r0, [pc, #68]	; (8003088 <MX_GPIO_Init+0xd8>)
 8003044:	f000 fee0 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003048:	2320      	movs	r3, #32
 800304a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800304c:	2301      	movs	r3, #1
 800304e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003054:	2302      	movs	r3, #2
 8003056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003058:	f107 0310 	add.w	r3, r7, #16
 800305c:	4619      	mov	r1, r3
 800305e:	4808      	ldr	r0, [pc, #32]	; (8003080 <MX_GPIO_Init+0xd0>)
 8003060:	f000 fed2 	bl	8003e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003064:	2200      	movs	r2, #0
 8003066:	2105      	movs	r1, #5
 8003068:	2028      	movs	r0, #40	; 0x28
 800306a:	f000 fea2 	bl	8003db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800306e:	2028      	movs	r0, #40	; 0x28
 8003070:	f000 febb 	bl	8003dea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003074:	bf00      	nop
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	40010800 	.word	0x40010800
 8003084:	10110000 	.word	0x10110000
 8003088:	40011000 	.word	0x40011000

0800308c <TASK_1_MATRIX_KEYPAD_Read>:
 * micro servo direction and operation mode
 * based on the selected key.
 */

void TASK_1_MATRIX_KEYPAD_Read( void const * argument )
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  USER_USART_Init( USART_1 );
 8003094:	2000      	movs	r0, #0
 8003096:	f7ff fe1d 	bl	8002cd4 <USER_USART_Init>
  EngTrModel_initialize();
 800309a:	f7fe fff7 	bl	800208c <EngTrModel_initialize>

  USER_MATRIX_KEYPAD_Init();
 800309e:	f7ff fae2 	bl	8002666 <USER_MATRIX_KEYPAD_Init>
  USER_LEDS_Init();
 80030a2:	f7ff fac3 	bl	800262c <USER_LEDS_Init>
  USER_PWM_Init();
 80030a6:	f7ff fc94 	bl	80029d2 <USER_PWM_Init>

  uint32_t counter = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    printf("T1 DEBUG\r\n");
 80030ae:	4837      	ldr	r0, [pc, #220]	; (800318c <TASK_1_MATRIX_KEYPAD_Read+0x100>)
 80030b0:	f004 fef6 	bl	8007ea0 <puts>

    selectedKey = USER_MATRIX_KEYPAD_Read();
 80030b4:	f7ff fb34 	bl	8002720 <USER_MATRIX_KEYPAD_Read>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b34      	ldr	r3, [pc, #208]	; (8003190 <TASK_1_MATRIX_KEYPAD_Read+0x104>)
 80030be:	701a      	strb	r2, [r3, #0]

    if(selectedKey == '5')							// Brake action
 80030c0:	4b33      	ldr	r3, [pc, #204]	; (8003190 <TASK_1_MATRIX_KEYPAD_Read+0x104>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b35      	cmp	r3, #53	; 0x35
 80030c6:	d108      	bne.n	80030da <TASK_1_MATRIX_KEYPAD_Read+0x4e>
    {
      keyBrakeTorque = 100.0;							// Full brake torque
 80030c8:	4b32      	ldr	r3, [pc, #200]	; (8003194 <TASK_1_MATRIX_KEYPAD_Read+0x108>)
 80030ca:	4a33      	ldr	r2, [pc, #204]	; (8003198 <TASK_1_MATRIX_KEYPAD_Read+0x10c>)
 80030cc:	601a      	str	r2, [r3, #0]

      USER_TIM_Delay( TIM_3, TIM_PSC_200MS, TIM_CNT_200MS );			// LEDs blinking
 80030ce:	22e6      	movs	r2, #230	; 0xe6
 80030d0:	21c3      	movs	r1, #195	; 0xc3
 80030d2:	2001      	movs	r0, #1
 80030d4:	f7ff fd86 	bl	8002be4 <USER_TIM_Delay>
 80030d8:	e046      	b.n	8003168 <TASK_1_MATRIX_KEYPAD_Read+0xdc>
    }
    else if(selectedKey == '4' || selectedKey == '6')				// Left or right action
 80030da:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <TASK_1_MATRIX_KEYPAD_Read+0x104>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b34      	cmp	r3, #52	; 0x34
 80030e0:	d003      	beq.n	80030ea <TASK_1_MATRIX_KEYPAD_Read+0x5e>
 80030e2:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <TASK_1_MATRIX_KEYPAD_Read+0x104>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b36      	cmp	r3, #54	; 0x36
 80030e8:	d120      	bne.n	800312c <TASK_1_MATRIX_KEYPAD_Read+0xa0>
    {
      keyBrakeTorque = 50.0;							// Half brake torque
 80030ea:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <TASK_1_MATRIX_KEYPAD_Read+0x108>)
 80030ec:	4a2b      	ldr	r2, [pc, #172]	; (800319c <TASK_1_MATRIX_KEYPAD_Read+0x110>)
 80030ee:	601a      	str	r2, [r3, #0]

      if(selectedKey == '4')							// Left action
 80030f0:	4b27      	ldr	r3, [pc, #156]	; (8003190 <TASK_1_MATRIX_KEYPAD_Read+0x104>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b34      	cmp	r3, #52	; 0x34
 80030f6:	d10c      	bne.n	8003112 <TASK_1_MATRIX_KEYPAD_Read+0x86>
      {
	USER_GPIO_Write( PORTC, 2, 1 );						// Left LED turned on
 80030f8:	2201      	movs	r2, #1
 80030fa:	2102      	movs	r1, #2
 80030fc:	2002      	movs	r0, #2
 80030fe:	f7ff f8b5 	bl	800226c <USER_GPIO_Write>
	USER_PWM_Generate( PWM_PSC_20MS, PWM_ARR_20MS, PWM_CCRX_12_5 );		// The micro servo rotates to a 180° position
 8003102:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003106:	f64f 11ff 	movw	r1, #63999	; 0xf9ff
 800310a:	2013      	movs	r0, #19
 800310c:	f7ff fc74 	bl	80029f8 <USER_PWM_Generate>
      if(selectedKey == '4')							// Left action
 8003110:	e02a      	b.n	8003168 <TASK_1_MATRIX_KEYPAD_Read+0xdc>
      }
      else									// Right action
      {
	USER_GPIO_Write( PORTC, 3, 1 );						// Right LED turned on
 8003112:	2201      	movs	r2, #1
 8003114:	2103      	movs	r1, #3
 8003116:	2002      	movs	r0, #2
 8003118:	f7ff f8a8 	bl	800226c <USER_GPIO_Write>
	USER_PWM_Generate( PWM_PSC_20MS, PWM_ARR_20MS, PWM_CCRX_2_5 );		// The micro servo rotates to a 0° position
 800311c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003120:	f64f 11ff 	movw	r1, #63999	; 0xf9ff
 8003124:	2013      	movs	r0, #19
 8003126:	f7ff fc67 	bl	80029f8 <USER_PWM_Generate>
      if(selectedKey == '4')							// Left action
 800312a:	e01d      	b.n	8003168 <TASK_1_MATRIX_KEYPAD_Read+0xdc>
      }
    }
    else if(selectedKey == 'A')							// Select manual mode action
 800312c:	4b18      	ldr	r3, [pc, #96]	; (8003190 <TASK_1_MATRIX_KEYPAD_Read+0x104>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b41      	cmp	r3, #65	; 0x41
 8003132:	d103      	bne.n	800313c <TASK_1_MATRIX_KEYPAD_Read+0xb0>
    {
      operationMode = 0;							// Manual mode
 8003134:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <TASK_1_MATRIX_KEYPAD_Read+0x114>)
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e015      	b.n	8003168 <TASK_1_MATRIX_KEYPAD_Read+0xdc>
    }
    else if(selectedKey == 'B')							// Select simulation mode action
 800313c:	4b14      	ldr	r3, [pc, #80]	; (8003190 <TASK_1_MATRIX_KEYPAD_Read+0x104>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b42      	cmp	r3, #66	; 0x42
 8003142:	d103      	bne.n	800314c <TASK_1_MATRIX_KEYPAD_Read+0xc0>
    {
      operationMode = 1;							// Simulation mode
 8003144:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <TASK_1_MATRIX_KEYPAD_Read+0x114>)
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e00d      	b.n	8003168 <TASK_1_MATRIX_KEYPAD_Read+0xdc>
    }
    else									// No action
    {
      keyBrakeTorque = 0.0;							// No brake torque
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <TASK_1_MATRIX_KEYPAD_Read+0x108>)
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

      USER_GPIO_Write( PORTC, 2, 0 );						// LEDs turned off
 8003154:	2200      	movs	r2, #0
 8003156:	2102      	movs	r1, #2
 8003158:	2002      	movs	r0, #2
 800315a:	f7ff f887 	bl	800226c <USER_GPIO_Write>
      USER_GPIO_Write( PORTC, 3, 0 );
 800315e:	2200      	movs	r2, #0
 8003160:	2103      	movs	r1, #3
 8003162:	2002      	movs	r0, #2
 8003164:	f7ff f882 	bl	800226c <USER_GPIO_Write>
    }

    osDelay(PERIOD_TASK_1 - TICK_DIFF_TASK_1);
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	1c53      	adds	r3, r2, #1
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	461c      	mov	r4, r3
 8003178:	f001 ff9b 	bl	80050b2 <osKernelSysTick>
 800317c:	4603      	mov	r3, r0
 800317e:	1ae3      	subs	r3, r4, r3
 8003180:	330c      	adds	r3, #12
 8003182:	4618      	mov	r0, r3
 8003184:	f001 fff1 	bl	800516a <osDelay>
    printf("T1 DEBUG\r\n");
 8003188:	e791      	b.n	80030ae <TASK_1_MATRIX_KEYPAD_Read+0x22>
 800318a:	bf00      	nop
 800318c:	0800c870 	.word	0x0800c870
 8003190:	20000018 	.word	0x20000018
 8003194:	200005a8 	.word	0x200005a8
 8003198:	42c80000 	.word	0x42c80000
 800319c:	42480000 	.word	0x42480000
 80031a0:	200005b9 	.word	0x200005b9
 80031a4:	00000000 	.word	0x00000000

080031a8 <TASK_2_ADC_Read>:
 * and normalize it to within the range accepted by the model,
 * this for manual mode.
 */

void TASK_2_ADC_Read( void const * argument )
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  USER_ADC_Init( ADC_1 );
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fd ff6f 	bl	8001094 <USER_ADC_Init>

  uint32_t counter = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    printf("T2 DEBUG\r\n");
 80031ba:	481d      	ldr	r0, [pc, #116]	; (8003230 <TASK_2_ADC_Read+0x88>)
 80031bc:	f004 fe70 	bl	8007ea0 <puts>

    conversionData = USER_ADC_Convert( ADC_1 );
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7fd ffc7 	bl	8001154 <USER_ADC_Convert>
 80031c6:	4603      	mov	r3, r0
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <TASK_2_ADC_Read+0x8c>)
 80031cc:	801a      	strh	r2, [r3, #0]
    voltageValue = 0.00080586 * conversionData;
 80031ce:	4b19      	ldr	r3, [pc, #100]	; (8003234 <TASK_2_ADC_Read+0x8c>)
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f916 	bl	8000404 <__aeabi_i2d>
 80031d8:	a313      	add	r3, pc, #76	; (adr r3, 8003228 <TASK_2_ADC_Read+0x80>)
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f7fd f97b 	bl	80004d8 <__aeabi_dmul>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4610      	mov	r0, r2
 80031e8:	4619      	mov	r1, r3
 80031ea:	f7fd fc6d 	bl	8000ac8 <__aeabi_d2f>
 80031ee:	4603      	mov	r3, r0
 80031f0:	4a11      	ldr	r2, [pc, #68]	; (8003238 <TASK_2_ADC_Read+0x90>)
 80031f2:	6013      	str	r3, [r2, #0]
    potentiometerThrottle = scaleVoltageValue( voltageValue, 0, 3.3 );
 80031f4:	4b10      	ldr	r3, [pc, #64]	; (8003238 <TASK_2_ADC_Read+0x90>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a10      	ldr	r2, [pc, #64]	; (800323c <TASK_2_ADC_Read+0x94>)
 80031fa:	f04f 0100 	mov.w	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd ffc4 	bl	800118c <scaleVoltageValue>
 8003204:	4603      	mov	r3, r0
 8003206:	4a0e      	ldr	r2, [pc, #56]	; (8003240 <TASK_2_ADC_Read+0x98>)
 8003208:	6013      	str	r3, [r2, #0]

    osDelay(PERIOD_TASK_2 - TICK_DIFF_TASK_2);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	60fa      	str	r2, [r7, #12]
 8003210:	461a      	mov	r2, r3
 8003212:	00d2      	lsls	r2, r2, #3
 8003214:	18d4      	adds	r4, r2, r3
 8003216:	f001 ff4c 	bl	80050b2 <osKernelSysTick>
 800321a:	4603      	mov	r3, r0
 800321c:	1ae3      	subs	r3, r4, r3
 800321e:	3309      	adds	r3, #9
 8003220:	4618      	mov	r0, r3
 8003222:	f001 ffa2 	bl	800516a <osDelay>
    printf("T2 DEBUG\r\n");
 8003226:	e7c8      	b.n	80031ba <TASK_2_ADC_Read+0x12>
 8003228:	2c2e064e 	.word	0x2c2e064e
 800322c:	3f4a680b 	.word	0x3f4a680b
 8003230:	0800c87c 	.word	0x0800c87c
 8003234:	200005ac 	.word	0x200005ac
 8003238:	200005b0 	.word	0x200005b0
 800323c:	40533333 	.word	0x40533333
 8003240:	200005b4 	.word	0x200005b4

08003244 <TASK_3_UART_Read>:
/* Read the throttle value sent via UART by the Raspeberry Pi
 * for simulation mode.
 */

void TASK_3_UART_Read( void const * argument )
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    printf("T3 DEBUG\r\n");
 8003250:	480e      	ldr	r0, [pc, #56]	; (800328c <TASK_3_UART_Read+0x48>)
 8003252:	f004 fe25 	bl	8007ea0 <puts>

    if( USART1->SR & USART_SR_RXNE )						// If USART_DR is not empty
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <TASK_3_UART_Read+0x4c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d004      	beq.n	800326c <TASK_3_UART_Read+0x28>
    {
	receivedThrottle = USART1->DR;						// Receive data
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <TASK_3_UART_Read+0x4c>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <TASK_3_UART_Read+0x50>)
 800326a:	701a      	strb	r2, [r3, #0]
    }

    osDelay(PERIOD_TASK_3 - TICK_DIFF_TASK_3);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	60fa      	str	r2, [r7, #12]
 8003272:	461a      	mov	r2, r3
 8003274:	00d2      	lsls	r2, r2, #3
 8003276:	18d4      	adds	r4, r2, r3
 8003278:	f001 ff1b 	bl	80050b2 <osKernelSysTick>
 800327c:	4603      	mov	r3, r0
 800327e:	1ae3      	subs	r3, r4, r3
 8003280:	3303      	adds	r3, #3
 8003282:	4618      	mov	r0, r3
 8003284:	f001 ff71 	bl	800516a <osDelay>
    printf("T3 DEBUG\r\n");
 8003288:	e7e2      	b.n	8003250 <TASK_3_UART_Read+0xc>
 800328a:	bf00      	nop
 800328c:	0800c888 	.word	0x0800c888
 8003290:	40013800 	.word	0x40013800
 8003294:	200005b8 	.word	0x200005b8

08003298 <TASK_4_MODEL_Step>:
 * and the brake value, take a step and
 * sanitize the output values.
 */

void TASK_4_MODEL_Step( void const * argument )
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  for(;;)
  {
    printf("T4 DEBUG\r\n");
 80032a4:	484f      	ldr	r0, [pc, #316]	; (80033e4 <TASK_4_MODEL_Step+0x14c>)
 80032a6:	f004 fdfb 	bl	8007ea0 <puts>

    if(operationMode == 0)							// Manual mode
 80032aa:	4b4f      	ldr	r3, [pc, #316]	; (80033e8 <TASK_4_MODEL_Step+0x150>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <TASK_4_MODEL_Step+0x30>
    {
      EngTrModel_U.Throttle = potentiometerThrottle;				// Model feed with potentiometer throttle value
 80032b2:	4b4e      	ldr	r3, [pc, #312]	; (80033ec <TASK_4_MODEL_Step+0x154>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd f8b6 	bl	8000428 <__aeabi_f2d>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	494b      	ldr	r1, [pc, #300]	; (80033f0 <TASK_4_MODEL_Step+0x158>)
 80032c2:	e9c1 2300 	strd	r2, r3, [r1]
 80032c6:	e00d      	b.n	80032e4 <TASK_4_MODEL_Step+0x4c>
    }
    else									// Simulation mode
    {
      EngTrModel_U.Throttle = (float) receivedThrottle;				// Model feed with received throttle value
 80032c8:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <TASK_4_MODEL_Step+0x15c>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd fd01 	bl	8000cd4 <__aeabi_ui2f>
 80032d2:	4603      	mov	r3, r0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd f8a7 	bl	8000428 <__aeabi_f2d>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4944      	ldr	r1, [pc, #272]	; (80033f0 <TASK_4_MODEL_Step+0x158>)
 80032e0:	e9c1 2300 	strd	r2, r3, [r1]
    }

    EngTrModel_U.BrakeTorque = keyBrakeTorque;					// Model feed with brake value
 80032e4:	4b44      	ldr	r3, [pc, #272]	; (80033f8 <TASK_4_MODEL_Step+0x160>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f89d 	bl	8000428 <__aeabi_f2d>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	493f      	ldr	r1, [pc, #252]	; (80033f0 <TASK_4_MODEL_Step+0x158>)
 80032f4:	e9c1 2302 	strd	r2, r3, [r1, #8]

    EngTrModel_step();								// Take a step
 80032f8:	f7fe fbee 	bl	8001ad8 <EngTrModel_step>

    // Sanitize the output values

    if(isnan(EngTrModel_Y.VehicleSpeed) || EngTrModel_Y.VehicleSpeed < 0 || EngTrModel_Y.VehicleSpeed > 200)
 80032fc:	4b3f      	ldr	r3, [pc, #252]	; (80033fc <TASK_4_MODEL_Step+0x164>)
 80032fe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	f7fd fb81 	bl	8000a0c <__aeabi_dcmpun>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d116      	bne.n	800333e <TASK_4_MODEL_Step+0xa6>
 8003310:	4b3a      	ldr	r3, [pc, #232]	; (80033fc <TASK_4_MODEL_Step+0x164>)
 8003312:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	f7fd fb4d 	bl	80009bc <__aeabi_dcmplt>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <TASK_4_MODEL_Step+0xa6>
 8003328:	4b34      	ldr	r3, [pc, #208]	; (80033fc <TASK_4_MODEL_Step+0x164>)
 800332a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	4b33      	ldr	r3, [pc, #204]	; (8003400 <TASK_4_MODEL_Step+0x168>)
 8003334:	f7fd fb60 	bl	80009f8 <__aeabi_dcmpgt>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d006      	beq.n	800334c <TASK_4_MODEL_Step+0xb4>
    {
      EngTrModel_Y.VehicleSpeed = 0.0;
 800333e:	492f      	ldr	r1, [pc, #188]	; (80033fc <TASK_4_MODEL_Step+0x164>)
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9c1 2302 	strd	r2, r3, [r1, #8]
    }

    if(isnan(EngTrModel_Y.EngineSpeed) || EngTrModel_Y.EngineSpeed < 0)
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <TASK_4_MODEL_Step+0x164>)
 800334e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	f7fd fb59 	bl	8000a0c <__aeabi_dcmpun>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10b      	bne.n	8003378 <TASK_4_MODEL_Step+0xe0>
 8003360:	4b26      	ldr	r3, [pc, #152]	; (80033fc <TASK_4_MODEL_Step+0x164>)
 8003362:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	f7fd fb25 	bl	80009bc <__aeabi_dcmplt>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d006      	beq.n	8003386 <TASK_4_MODEL_Step+0xee>
    {
      EngTrModel_Y.EngineSpeed = 0.0;
 8003378:	4920      	ldr	r1, [pc, #128]	; (80033fc <TASK_4_MODEL_Step+0x164>)
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if(isnan(EngTrModel_Y.Gear) || EngTrModel_Y.Gear < 0)
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <TASK_4_MODEL_Step+0x164>)
 8003388:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	f7fd fb3c 	bl	8000a0c <__aeabi_dcmpun>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10b      	bne.n	80033b2 <TASK_4_MODEL_Step+0x11a>
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <TASK_4_MODEL_Step+0x164>)
 800339c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	f7fd fb08 	bl	80009bc <__aeabi_dcmplt>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d006      	beq.n	80033c0 <TASK_4_MODEL_Step+0x128>
    {
      EngTrModel_Y.Gear = 0.0;
 80033b2:	4912      	ldr	r1, [pc, #72]	; (80033fc <TASK_4_MODEL_Step+0x164>)
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }

    osDelay(PERIOD_TASK_4 - TICK_DIFF_TASK_4);
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	1c53      	adds	r3, r2, #1
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	461c      	mov	r4, r3
 80033d0:	f001 fe6f 	bl	80050b2 <osKernelSysTick>
 80033d4:	4603      	mov	r3, r0
 80033d6:	1ae3      	subs	r3, r4, r3
 80033d8:	3306      	adds	r3, #6
 80033da:	4618      	mov	r0, r3
 80033dc:	f001 fec5 	bl	800516a <osDelay>
    printf("T4 DEBUG\r\n");
 80033e0:	e760      	b.n	80032a4 <TASK_4_MODEL_Step+0xc>
 80033e2:	bf00      	nop
 80033e4:	0800c894 	.word	0x0800c894
 80033e8:	200005b9 	.word	0x200005b9
 80033ec:	200005b4 	.word	0x200005b4
 80033f0:	20000280 	.word	0x20000280
 80033f4:	200005b8 	.word	0x200005b8
 80033f8:	200005a8 	.word	0x200005a8
 80033fc:	20000290 	.word	0x20000290
 8003400:	40690000 	.word	0x40690000

08003404 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a04      	ldr	r2, [pc, #16]	; (8003424 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003416:	f000 fbfb 	bl	8003c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40000800 	.word	0x40000800

08003428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800342c:	b672      	cpsid	i
}
 800342e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003430:	e7fe      	b.n	8003430 <Error_Handler+0x8>
	...

08003434 <rtGetInf>:
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	2340      	movs	r3, #64	; 0x40
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b20      	cmp	r3, #32
 800344e:	d10a      	bne.n	8003466 <rtGetInf+0x32>
 8003450:	f000 f836 	bl	80034c0 <rtGetInfF>
 8003454:	4603      	mov	r3, r0
 8003456:	4618      	mov	r0, r3
 8003458:	f7fc ffe6 	bl	8000428 <__aeabi_f2d>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003464:	e022      	b.n	80034ac <rtGetInf+0x78>
 8003466:	2301      	movs	r3, #1
 8003468:	823b      	strh	r3, [r7, #16]
 800346a:	f107 0310 	add.w	r3, r7, #16
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b01      	cmp	r3, #1
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	74fb      	strb	r3, [r7, #19]
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <rtGetInf+0x54>
 8003482:	2b01      	cmp	r3, #1
 8003484:	d009      	beq.n	800349a <rtGetInf+0x66>
 8003486:	e011      	b.n	80034ac <rtGetInf+0x78>
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <rtGetInf+0x88>)
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	2300      	movs	r3, #0
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003494:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003498:	e008      	b.n	80034ac <rtGetInf+0x78>
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <rtGetInf+0x88>)
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80034aa:	bf00      	nop
 80034ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	3720      	adds	r7, #32
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	7ff00000 	.word	0x7ff00000

080034c0 <rtGetInfF>:
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <rtGetMinusInf>:
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	2340      	movs	r3, #64	; 0x40
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d10a      	bne.n	800350a <rtGetMinusInf+0x32>
 80034f4:	f000 f836 	bl	8003564 <rtGetMinusInfF>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fc ff94 	bl	8000428 <__aeabi_f2d>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003508:	e022      	b.n	8003550 <rtGetMinusInf+0x78>
 800350a:	2301      	movs	r3, #1
 800350c:	823b      	strh	r3, [r7, #16]
 800350e:	f107 0310 	add.w	r3, r7, #16
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b01      	cmp	r3, #1
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	74fb      	strb	r3, [r7, #19]
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <rtGetMinusInf+0x54>
 8003526:	2b01      	cmp	r3, #1
 8003528:	d009      	beq.n	800353e <rtGetMinusInf+0x66>
 800352a:	e011      	b.n	8003550 <rtGetMinusInf+0x78>
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <rtGetMinusInf+0x88>)
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003538:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800353c:	e008      	b.n	8003550 <rtGetMinusInf+0x78>
 800353e:	4b08      	ldr	r3, [pc, #32]	; (8003560 <rtGetMinusInf+0x88>)
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800354a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800354e:	bf00      	nop
 8003550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	fff00000 	.word	0xfff00000

08003564 <rtGetMinusInfF>:
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	4b04      	ldr	r3, [pc, #16]	; (800357c <rtGetMinusInfF+0x18>)
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	ff800000 	.word	0xff800000

08003580 <rtGetNaN>:
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	2340      	movs	r3, #64	; 0x40
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b20      	cmp	r3, #32
 800359a:	d10a      	bne.n	80035b2 <rtGetNaN+0x32>
 800359c:	f000 f838 	bl	8003610 <rtGetNaNF>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fc ff40 	bl	8000428 <__aeabi_f2d>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80035b0:	e024      	b.n	80035fc <rtGetNaN+0x7c>
 80035b2:	2301      	movs	r3, #1
 80035b4:	823b      	strh	r3, [r7, #16]
 80035b6:	f107 0310 	add.w	r3, r7, #16
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	74fb      	strb	r3, [r7, #19]
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <rtGetNaN+0x54>
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d009      	beq.n	80035e6 <rtGetNaN+0x66>
 80035d2:	e013      	b.n	80035fc <rtGetNaN+0x7c>
 80035d4:	4b0d      	ldr	r3, [pc, #52]	; (800360c <rtGetNaN+0x8c>)
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	2300      	movs	r3, #0
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80035e4:	e00a      	b.n	80035fc <rtGetNaN+0x7c>
 80035e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80035fa:	bf00      	nop
 80035fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	fff80000 	.word	0xfff80000

08003610 <rtGetNaNF>:
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	2301      	movs	r3, #1
 800361e:	80fb      	strh	r3, [r7, #6]
 8003620:	1dbb      	adds	r3, r7, #6
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	bf14      	ite	ne
 8003628:	2301      	movne	r3, #1
 800362a:	2300      	moveq	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <rtGetNaNF+0x2c>
 8003636:	2b01      	cmp	r3, #1
 8003638:	d003      	beq.n	8003642 <rtGetNaNF+0x32>
 800363a:	e006      	b.n	800364a <rtGetNaNF+0x3a>
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <rtGetNaNF+0x48>)
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	e003      	b.n	800364a <rtGetNaNF+0x3a>
 8003642:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	bf00      	nop
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	ffc00000 	.word	0xffc00000

0800365c <rt_InitInfAndNaN>:
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	f7ff ff8c 	bl	8003580 <rtGetNaN>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4911      	ldr	r1, [pc, #68]	; (80036b4 <rt_InitInfAndNaN+0x58>)
 800366e:	e9c1 2300 	strd	r2, r3, [r1]
 8003672:	f7ff ffcd 	bl	8003610 <rtGetNaNF>
 8003676:	4603      	mov	r3, r0
 8003678:	4a0f      	ldr	r2, [pc, #60]	; (80036b8 <rt_InitInfAndNaN+0x5c>)
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	f7ff feda 	bl	8003434 <rtGetInf>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	490d      	ldr	r1, [pc, #52]	; (80036bc <rt_InitInfAndNaN+0x60>)
 8003686:	e9c1 2300 	strd	r2, r3, [r1]
 800368a:	f7ff ff19 	bl	80034c0 <rtGetInfF>
 800368e:	4603      	mov	r3, r0
 8003690:	4a0b      	ldr	r2, [pc, #44]	; (80036c0 <rt_InitInfAndNaN+0x64>)
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	f7ff ff20 	bl	80034d8 <rtGetMinusInf>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4909      	ldr	r1, [pc, #36]	; (80036c4 <rt_InitInfAndNaN+0x68>)
 800369e:	e9c1 2300 	strd	r2, r3, [r1]
 80036a2:	f7ff ff5f 	bl	8003564 <rtGetMinusInfF>
 80036a6:	4603      	mov	r3, r0
 80036a8:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <rt_InitInfAndNaN+0x6c>)
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200005d0 	.word	0x200005d0
 80036b8:	200005e0 	.word	0x200005e0
 80036bc:	200005c0 	.word	0x200005c0
 80036c0:	200005d8 	.word	0x200005d8
 80036c4:	200005c8 	.word	0x200005c8
 80036c8:	200005dc 	.word	0x200005dc

080036cc <rtIsInf>:
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	e9c7 0100 	strd	r0, r1, [r7]
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <rtIsInf+0x40>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036e0:	f7fd f962 	bl	80009a8 <__aeabi_dcmpeq>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <rtIsInf+0x32>
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <rtIsInf+0x44>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036f4:	f7fd f958 	bl	80009a8 <__aeabi_dcmpeq>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <rtIsInf+0x36>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <rtIsInf+0x38>
 8003702:	2300      	movs	r3, #0
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	200005c0 	.word	0x200005c0
 8003710:	200005c8 	.word	0x200005c8

08003714 <rtIsNaN>:
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	; 0x28
 8003718:	af00      	add	r7, sp, #0
 800371a:	e9c7 0100 	strd	r0, r1, [r7]
 800371e:	2300      	movs	r3, #0
 8003720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003724:	2340      	movs	r3, #64	; 0x40
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	2b20      	cmp	r3, #32
 800372c:	d10b      	bne.n	8003746 <rtIsNaN+0x32>
 800372e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003732:	f7fd f9c9 	bl	8000ac8 <__aeabi_d2f>
 8003736:	4603      	mov	r3, r0
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f84d 	bl	80037d8 <rtIsNaNF>
 800373e:	4603      	mov	r3, r0
 8003740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003744:	e040      	b.n	80037c8 <rtIsNaN+0xb4>
 8003746:	2301      	movs	r3, #1
 8003748:	83bb      	strh	r3, [r7, #28]
 800374a:	f107 031c 	add.w	r3, r7, #28
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	7ffb      	ldrb	r3, [r7, #31]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <rtIsNaN+0x54>
 8003762:	2b01      	cmp	r3, #1
 8003764:	d018      	beq.n	8003798 <rtIsNaN+0x84>
 8003766:	e02f      	b.n	80037c8 <rtIsNaN+0xb4>
 8003768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800376c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <rtIsNaN+0xc0>)
 8003774:	4013      	ands	r3, r2
 8003776:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <rtIsNaN+0xc0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d109      	bne.n	8003790 <rtIsNaN+0x7c>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <rtIsNaN+0x78>
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <rtIsNaN+0x7c>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <rtIsNaN+0x7e>
 8003790:	2300      	movs	r3, #0
 8003792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003796:	e017      	b.n	80037c8 <rtIsNaN+0xb4>
 8003798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800379c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <rtIsNaN+0xc0>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <rtIsNaN+0xc0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d109      	bne.n	80037c0 <rtIsNaN+0xac>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <rtIsNaN+0xa8>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <rtIsNaN+0xac>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <rtIsNaN+0xae>
 80037c0:	2300      	movs	r3, #0
 80037c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80037c6:	bf00      	nop
 80037c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037cc:	4618      	mov	r0, r3
 80037ce:	3728      	adds	r7, #40	; 0x28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	7ff00000 	.word	0x7ff00000

080037d8 <rtIsNaNF>:
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 80037ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80037ee:	d106      	bne.n	80037fe <rtIsNaNF+0x26>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <rtIsNaNF+0x26>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <rtIsNaNF+0x28>
 80037fe:	2300      	movs	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <HAL_MspInit>:
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_MspInit+0x68>)
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	4a17      	ldr	r2, [pc, #92]	; (8003874 <HAL_MspInit+0x68>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	6193      	str	r3, [r2, #24]
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <HAL_MspInit+0x68>)
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_MspInit+0x68>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	4a11      	ldr	r2, [pc, #68]	; (8003874 <HAL_MspInit+0x68>)
 8003830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003834:	61d3      	str	r3, [r2, #28]
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <HAL_MspInit+0x68>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383e:	607b      	str	r3, [r7, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	210f      	movs	r1, #15
 8003846:	f06f 0001 	mvn.w	r0, #1
 800384a:	f000 fab2 	bl	8003db2 <HAL_NVIC_SetPriority>
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <HAL_MspInit+0x6c>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	4a04      	ldr	r2, [pc, #16]	; (8003878 <HAL_MspInit+0x6c>)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6053      	str	r3, [r2, #4]
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	40010000 	.word	0x40010000

0800387c <HAL_UART_MspInit>:
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	f107 0310 	add.w	r3, r7, #16
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a15      	ldr	r2, [pc, #84]	; (80038ec <HAL_UART_MspInit+0x70>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d123      	bne.n	80038e4 <HAL_UART_MspInit+0x68>
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <HAL_UART_MspInit+0x74>)
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <HAL_UART_MspInit+0x74>)
 80038a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a6:	61d3      	str	r3, [r2, #28]
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <HAL_UART_MspInit+0x74>)
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_UART_MspInit+0x74>)
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	4a0d      	ldr	r2, [pc, #52]	; (80038f0 <HAL_UART_MspInit+0x74>)
 80038ba:	f043 0304 	orr.w	r3, r3, #4
 80038be:	6193      	str	r3, [r2, #24]
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_UART_MspInit+0x74>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	230c      	movs	r3, #12
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	2302      	movs	r3, #2
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	2302      	movs	r3, #2
 80038d6:	61fb      	str	r3, [r7, #28]
 80038d8:	f107 0310 	add.w	r3, r7, #16
 80038dc:	4619      	mov	r1, r3
 80038de:	4805      	ldr	r0, [pc, #20]	; (80038f4 <HAL_UART_MspInit+0x78>)
 80038e0:	f000 fa92 	bl	8003e08 <HAL_GPIO_Init>
 80038e4:	bf00      	nop
 80038e6:	3720      	adds	r7, #32
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40004400 	.word	0x40004400
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40010800 	.word	0x40010800

080038f8 <HAL_InitTick>:
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08e      	sub	sp, #56	; 0x38
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	2300      	movs	r3, #0
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003904:	2300      	movs	r3, #0
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
 8003908:	2300      	movs	r3, #0
 800390a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800390e:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <HAL_InitTick+0xe8>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	4a33      	ldr	r2, [pc, #204]	; (80039e0 <HAL_InitTick+0xe8>)
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	61d3      	str	r3, [r2, #28]
 800391a:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <HAL_InitTick+0xe8>)
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f107 0210 	add.w	r2, r7, #16
 800392a:	f107 0314 	add.w	r3, r7, #20
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f001 f819 	bl	8004968 <HAL_RCC_GetClockConfig>
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <HAL_InitTick+0x50>
 8003940:	f000 ffea 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 8003944:	6378      	str	r0, [r7, #52]	; 0x34
 8003946:	e004      	b.n	8003952 <HAL_InitTick+0x5a>
 8003948:	f000 ffe6 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 800394c:	4603      	mov	r3, r0
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	637b      	str	r3, [r7, #52]	; 0x34
 8003952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003954:	4a23      	ldr	r2, [pc, #140]	; (80039e4 <HAL_InitTick+0xec>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	0c9b      	lsrs	r3, r3, #18
 800395c:	3b01      	subs	r3, #1
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003960:	4b21      	ldr	r3, [pc, #132]	; (80039e8 <HAL_InitTick+0xf0>)
 8003962:	4a22      	ldr	r2, [pc, #136]	; (80039ec <HAL_InitTick+0xf4>)
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_InitTick+0xf0>)
 8003968:	f240 32e7 	movw	r2, #999	; 0x3e7
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	4a1e      	ldr	r2, [pc, #120]	; (80039e8 <HAL_InitTick+0xf0>)
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	6053      	str	r3, [r2, #4]
 8003974:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <HAL_InitTick+0xf0>)
 8003976:	2200      	movs	r2, #0
 8003978:	611a      	str	r2, [r3, #16]
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_InitTick+0xf0>)
 800397c:	2200      	movs	r2, #0
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <HAL_InitTick+0xf0>)
 8003982:	2200      	movs	r2, #0
 8003984:	619a      	str	r2, [r3, #24]
 8003986:	4818      	ldr	r0, [pc, #96]	; (80039e8 <HAL_InitTick+0xf0>)
 8003988:	f001 f83c 	bl	8004a04 <HAL_TIM_Base_Init>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003992:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003996:	2b00      	cmp	r3, #0
 8003998:	d11b      	bne.n	80039d2 <HAL_InitTick+0xda>
 800399a:	4813      	ldr	r0, [pc, #76]	; (80039e8 <HAL_InitTick+0xf0>)
 800399c:	f001 f88a 	bl	8004ab4 <HAL_TIM_Base_Start_IT>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80039a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d111      	bne.n	80039d2 <HAL_InitTick+0xda>
 80039ae:	201e      	movs	r0, #30
 80039b0:	f000 fa1b 	bl	8003dea <HAL_NVIC_EnableIRQ>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b0f      	cmp	r3, #15
 80039b8:	d808      	bhi.n	80039cc <HAL_InitTick+0xd4>
 80039ba:	2200      	movs	r2, #0
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	201e      	movs	r0, #30
 80039c0:	f000 f9f7 	bl	8003db2 <HAL_NVIC_SetPriority>
 80039c4:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <HAL_InitTick+0xf8>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	e002      	b.n	80039d2 <HAL_InitTick+0xda>
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80039d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039d6:	4618      	mov	r0, r3
 80039d8:	3738      	adds	r7, #56	; 0x38
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
 80039e4:	431bde83 	.word	0x431bde83
 80039e8:	200005e4 	.word	0x200005e4
 80039ec:	40000800 	.word	0x40000800
 80039f0:	20000020 	.word	0x20000020

080039f4 <NMI_Handler>:
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	e7fe      	b.n	80039f8 <NMI_Handler+0x4>

080039fa <HardFault_Handler>:
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	e7fe      	b.n	80039fe <HardFault_Handler+0x4>

08003a00 <MemManage_Handler>:
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	e7fe      	b.n	8003a04 <MemManage_Handler+0x4>

08003a06 <BusFault_Handler>:
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	e7fe      	b.n	8003a0a <BusFault_Handler+0x4>

08003a0c <UsageFault_Handler>:
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	e7fe      	b.n	8003a10 <UsageFault_Handler+0x4>

08003a12 <DebugMon_Handler>:
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
	...

08003a20 <TIM4_IRQHandler>:
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	4802      	ldr	r0, [pc, #8]	; (8003a30 <TIM4_IRQHandler+0x10>)
 8003a26:	f001 f897 	bl	8004b58 <HAL_TIM_IRQHandler>
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200005e4 	.word	0x200005e4

08003a34 <EXTI15_10_IRQHandler>:
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a3c:	f000 fb80 	bl	8004140 <HAL_GPIO_EXTI_IRQHandler>
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <_getpid>:
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	2301      	movs	r3, #1
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <_kill>:
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
 8003a5c:	f004 fbc8 	bl	80081f0 <__errno>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2216      	movs	r2, #22
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <_exit>:
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	f04f 31ff 	mov.w	r1, #4294967295
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff ffe7 	bl	8003a52 <_kill>
 8003a84:	e7fe      	b.n	8003a84 <_exit+0x12>

08003a86 <_read>:
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e00a      	b.n	8003aae <_read+0x28>
 8003a98:	f3af 8000 	nop.w
 8003a9c:	4601      	mov	r1, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	60ba      	str	r2, [r7, #8]
 8003aa4:	b2ca      	uxtb	r2, r1
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	dbf0      	blt.n	8003a98 <_read+0x12>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <_close>:
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr

08003ad6 <_fstat>:
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <_isatty>:
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	2301      	movs	r3, #1
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <_lseek>:
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	2300      	movs	r3, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <_sbrk>:
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <_sbrk+0x5c>)
 8003b2a:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <_sbrk+0x60>)
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <_sbrk+0x64>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <_sbrk+0x22>
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <_sbrk+0x64>)
 8003b3e:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <_sbrk+0x68>)
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <_sbrk+0x64>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d207      	bcs.n	8003b60 <_sbrk+0x40>
 8003b50:	f004 fb4e 	bl	80081f0 <__errno>
 8003b54:	4603      	mov	r3, r0
 8003b56:	220c      	movs	r2, #12
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5e:	e009      	b.n	8003b74 <_sbrk+0x54>
 8003b60:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <_sbrk+0x64>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <_sbrk+0x64>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	4a05      	ldr	r2, [pc, #20]	; (8003b84 <_sbrk+0x64>)
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20005000 	.word	0x20005000
 8003b80:	00000400 	.word	0x00000400
 8003b84:	2000062c 	.word	0x2000062c
 8003b88:	200018d0 	.word	0x200018d0

08003b8c <SystemInit>:
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <Reset_Handler>:
 8003b98:	f7ff fff8 	bl	8003b8c <SystemInit>
 8003b9c:	480b      	ldr	r0, [pc, #44]	; (8003bcc <LoopFillZerobss+0xe>)
 8003b9e:	490c      	ldr	r1, [pc, #48]	; (8003bd0 <LoopFillZerobss+0x12>)
 8003ba0:	4a0c      	ldr	r2, [pc, #48]	; (8003bd4 <LoopFillZerobss+0x16>)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e002      	b.n	8003bac <LoopCopyDataInit>

08003ba6 <CopyDataInit>:
 8003ba6:	58d4      	ldr	r4, [r2, r3]
 8003ba8:	50c4      	str	r4, [r0, r3]
 8003baa:	3304      	adds	r3, #4

08003bac <LoopCopyDataInit>:
 8003bac:	18c4      	adds	r4, r0, r3
 8003bae:	428c      	cmp	r4, r1
 8003bb0:	d3f9      	bcc.n	8003ba6 <CopyDataInit>
 8003bb2:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <LoopFillZerobss+0x1a>)
 8003bb4:	4c09      	ldr	r4, [pc, #36]	; (8003bdc <LoopFillZerobss+0x1e>)
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e001      	b.n	8003bbe <LoopFillZerobss>

08003bba <FillZerobss>:
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	3204      	adds	r2, #4

08003bbe <LoopFillZerobss>:
 8003bbe:	42a2      	cmp	r2, r4
 8003bc0:	d3fb      	bcc.n	8003bba <FillZerobss>
 8003bc2:	f004 fb1b 	bl	80081fc <__libc_init_array>
 8003bc6:	f7ff f90d 	bl	8002de4 <main>
 8003bca:	4770      	bx	lr
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	20000208 	.word	0x20000208
 8003bd4:	0800d6a0 	.word	0x0800d6a0
 8003bd8:	20000208 	.word	0x20000208
 8003bdc:	200018cc 	.word	0x200018cc

08003be0 <ADC1_2_IRQHandler>:
 8003be0:	e7fe      	b.n	8003be0 <ADC1_2_IRQHandler>
	...

08003be4 <HAL_Init>:
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <HAL_Init+0x28>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <HAL_Init+0x28>)
 8003bee:	f043 0310 	orr.w	r3, r3, #16
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	2003      	movs	r0, #3
 8003bf6:	f000 f8d1 	bl	8003d9c <HAL_NVIC_SetPriorityGrouping>
 8003bfa:	200f      	movs	r0, #15
 8003bfc:	f7ff fe7c 	bl	80038f8 <HAL_InitTick>
 8003c00:	f7ff fe04 	bl	800380c <HAL_MspInit>
 8003c04:	2300      	movs	r3, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40022000 	.word	0x40022000

08003c10 <HAL_IncTick>:
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_IncTick+0x1c>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_IncTick+0x20>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	4a03      	ldr	r2, [pc, #12]	; (8003c30 <HAL_IncTick+0x20>)
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	20000024 	.word	0x20000024
 8003c30:	20000630 	.word	0x20000630

08003c34 <HAL_GetTick>:
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	4b02      	ldr	r3, [pc, #8]	; (8003c44 <HAL_GetTick+0x10>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	20000630 	.word	0x20000630

08003c48 <__NVIC_SetPriorityGrouping>:
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c64:	4013      	ands	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	021a      	lsls	r2, r3, #8
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	60d3      	str	r3, [r2, #12]
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <__NVIC_GetPriorityGrouping>:
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <__NVIC_EnableIRQ>:
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	db0b      	blt.n	8003cd6 <__NVIC_EnableIRQ+0x2a>
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	4906      	ldr	r1, [pc, #24]	; (8003ce0 <__NVIC_EnableIRQ+0x34>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2001      	movs	r0, #1
 8003cce:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	e000e100 	.word	0xe000e100

08003ce4 <__NVIC_SetPriority>:
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	6039      	str	r1, [r7, #0]
 8003cee:	71fb      	strb	r3, [r7, #7]
 8003cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	db0a      	blt.n	8003d0e <__NVIC_SetPriority+0x2a>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	490c      	ldr	r1, [pc, #48]	; (8003d30 <__NVIC_SetPriority+0x4c>)
 8003cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d02:	0112      	lsls	r2, r2, #4
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	440b      	add	r3, r1
 8003d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003d0c:	e00a      	b.n	8003d24 <__NVIC_SetPriority+0x40>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4908      	ldr	r1, [pc, #32]	; (8003d34 <__NVIC_SetPriority+0x50>)
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	3b04      	subs	r3, #4
 8003d1c:	0112      	lsls	r2, r2, #4
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	440b      	add	r3, r1
 8003d22:	761a      	strb	r2, [r3, #24]
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	e000e100 	.word	0xe000e100
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <NVIC_EncodePriority>:
 8003d38:	b480      	push	{r7}
 8003d3a:	b089      	sub	sp, #36	; 0x24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	61fb      	str	r3, [r7, #28]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f1c3 0307 	rsb	r3, r3, #7
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	bf28      	it	cs
 8003d56:	2304      	movcs	r3, #4
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	2b06      	cmp	r3, #6
 8003d60:	d902      	bls.n	8003d68 <NVIC_EncodePriority+0x30>
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3b03      	subs	r3, #3
 8003d66:	e000      	b.n	8003d6a <NVIC_EncodePriority+0x32>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43da      	mvns	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	f04f 31ff 	mov.w	r1, #4294967295
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8a:	43d9      	mvns	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	400b      	ands	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	3724      	adds	r7, #36	; 0x24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <HAL_NVIC_SetPriorityGrouping>:
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ff4f 	bl	8003c48 <__NVIC_SetPriorityGrouping>
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_NVIC_SetPriority>:
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b086      	sub	sp, #24
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	4603      	mov	r3, r0
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	73fb      	strb	r3, [r7, #15]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	f7ff ff64 	bl	8003c90 <__NVIC_GetPriorityGrouping>
 8003dc8:	6178      	str	r0, [r7, #20]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	6978      	ldr	r0, [r7, #20]
 8003dd0:	f7ff ffb2 	bl	8003d38 <NVIC_EncodePriority>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ff81 	bl	8003ce4 <__NVIC_SetPriority>
 8003de2:	bf00      	nop
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_NVIC_EnableIRQ>:
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	4603      	mov	r3, r0
 8003df2:	71fb      	strb	r3, [r7, #7]
 8003df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff57 	bl	8003cac <__NVIC_EnableIRQ>
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_GPIO_Init>:
 8003e08:	b480      	push	{r7}
 8003e0a:	b08b      	sub	sp, #44	; 0x2c
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	2300      	movs	r3, #0
 8003e18:	623b      	str	r3, [r7, #32]
 8003e1a:	e169      	b.n	80040f0 <HAL_GPIO_Init+0x2e8>
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	f040 8158 	bne.w	80040ea <HAL_GPIO_Init+0x2e2>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4a9a      	ldr	r2, [pc, #616]	; (80040a8 <HAL_GPIO_Init+0x2a0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d05e      	beq.n	8003f02 <HAL_GPIO_Init+0xfa>
 8003e44:	4a98      	ldr	r2, [pc, #608]	; (80040a8 <HAL_GPIO_Init+0x2a0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d875      	bhi.n	8003f36 <HAL_GPIO_Init+0x12e>
 8003e4a:	4a98      	ldr	r2, [pc, #608]	; (80040ac <HAL_GPIO_Init+0x2a4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d058      	beq.n	8003f02 <HAL_GPIO_Init+0xfa>
 8003e50:	4a96      	ldr	r2, [pc, #600]	; (80040ac <HAL_GPIO_Init+0x2a4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d86f      	bhi.n	8003f36 <HAL_GPIO_Init+0x12e>
 8003e56:	4a96      	ldr	r2, [pc, #600]	; (80040b0 <HAL_GPIO_Init+0x2a8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d052      	beq.n	8003f02 <HAL_GPIO_Init+0xfa>
 8003e5c:	4a94      	ldr	r2, [pc, #592]	; (80040b0 <HAL_GPIO_Init+0x2a8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d869      	bhi.n	8003f36 <HAL_GPIO_Init+0x12e>
 8003e62:	4a94      	ldr	r2, [pc, #592]	; (80040b4 <HAL_GPIO_Init+0x2ac>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d04c      	beq.n	8003f02 <HAL_GPIO_Init+0xfa>
 8003e68:	4a92      	ldr	r2, [pc, #584]	; (80040b4 <HAL_GPIO_Init+0x2ac>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d863      	bhi.n	8003f36 <HAL_GPIO_Init+0x12e>
 8003e6e:	4a92      	ldr	r2, [pc, #584]	; (80040b8 <HAL_GPIO_Init+0x2b0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d046      	beq.n	8003f02 <HAL_GPIO_Init+0xfa>
 8003e74:	4a90      	ldr	r2, [pc, #576]	; (80040b8 <HAL_GPIO_Init+0x2b0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d85d      	bhi.n	8003f36 <HAL_GPIO_Init+0x12e>
 8003e7a:	2b12      	cmp	r3, #18
 8003e7c:	d82a      	bhi.n	8003ed4 <HAL_GPIO_Init+0xcc>
 8003e7e:	2b12      	cmp	r3, #18
 8003e80:	d859      	bhi.n	8003f36 <HAL_GPIO_Init+0x12e>
 8003e82:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <HAL_GPIO_Init+0x80>)
 8003e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e88:	08003f03 	.word	0x08003f03
 8003e8c:	08003edd 	.word	0x08003edd
 8003e90:	08003eef 	.word	0x08003eef
 8003e94:	08003f31 	.word	0x08003f31
 8003e98:	08003f37 	.word	0x08003f37
 8003e9c:	08003f37 	.word	0x08003f37
 8003ea0:	08003f37 	.word	0x08003f37
 8003ea4:	08003f37 	.word	0x08003f37
 8003ea8:	08003f37 	.word	0x08003f37
 8003eac:	08003f37 	.word	0x08003f37
 8003eb0:	08003f37 	.word	0x08003f37
 8003eb4:	08003f37 	.word	0x08003f37
 8003eb8:	08003f37 	.word	0x08003f37
 8003ebc:	08003f37 	.word	0x08003f37
 8003ec0:	08003f37 	.word	0x08003f37
 8003ec4:	08003f37 	.word	0x08003f37
 8003ec8:	08003f37 	.word	0x08003f37
 8003ecc:	08003ee5 	.word	0x08003ee5
 8003ed0:	08003ef9 	.word	0x08003ef9
 8003ed4:	4a79      	ldr	r2, [pc, #484]	; (80040bc <HAL_GPIO_Init+0x2b4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <HAL_GPIO_Init+0xfa>
 8003eda:	e02c      	b.n	8003f36 <HAL_GPIO_Init+0x12e>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	623b      	str	r3, [r7, #32]
 8003ee2:	e029      	b.n	8003f38 <HAL_GPIO_Init+0x130>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	623b      	str	r3, [r7, #32]
 8003eec:	e024      	b.n	8003f38 <HAL_GPIO_Init+0x130>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	623b      	str	r3, [r7, #32]
 8003ef6:	e01f      	b.n	8003f38 <HAL_GPIO_Init+0x130>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	330c      	adds	r3, #12
 8003efe:	623b      	str	r3, [r7, #32]
 8003f00:	e01a      	b.n	8003f38 <HAL_GPIO_Init+0x130>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d102      	bne.n	8003f10 <HAL_GPIO_Init+0x108>
 8003f0a:	2304      	movs	r3, #4
 8003f0c:	623b      	str	r3, [r7, #32]
 8003f0e:	e013      	b.n	8003f38 <HAL_GPIO_Init+0x130>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d105      	bne.n	8003f24 <HAL_GPIO_Init+0x11c>
 8003f18:	2308      	movs	r3, #8
 8003f1a:	623b      	str	r3, [r7, #32]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	611a      	str	r2, [r3, #16]
 8003f22:	e009      	b.n	8003f38 <HAL_GPIO_Init+0x130>
 8003f24:	2308      	movs	r3, #8
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	615a      	str	r2, [r3, #20]
 8003f2e:	e003      	b.n	8003f38 <HAL_GPIO_Init+0x130>
 8003f30:	2300      	movs	r3, #0
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	e000      	b.n	8003f38 <HAL_GPIO_Init+0x130>
 8003f36:	bf00      	nop
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2bff      	cmp	r3, #255	; 0xff
 8003f3c:	d801      	bhi.n	8003f42 <HAL_GPIO_Init+0x13a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	e001      	b.n	8003f46 <HAL_GPIO_Init+0x13e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3304      	adds	r3, #4
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2bff      	cmp	r3, #255	; 0xff
 8003f4c:	d802      	bhi.n	8003f54 <HAL_GPIO_Init+0x14c>
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	e002      	b.n	8003f5a <HAL_GPIO_Init+0x152>
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	3b08      	subs	r3, #8
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	210f      	movs	r1, #15
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	6a39      	ldr	r1, [r7, #32]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	fa01 f303 	lsl.w	r3, r1, r3
 8003f74:	431a      	orrs	r2, r3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80b1 	beq.w	80040ea <HAL_GPIO_Init+0x2e2>
 8003f88:	4b4d      	ldr	r3, [pc, #308]	; (80040c0 <HAL_GPIO_Init+0x2b8>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	4a4c      	ldr	r2, [pc, #304]	; (80040c0 <HAL_GPIO_Init+0x2b8>)
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	6193      	str	r3, [r2, #24]
 8003f94:	4b4a      	ldr	r3, [pc, #296]	; (80040c0 <HAL_GPIO_Init+0x2b8>)
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4a48      	ldr	r2, [pc, #288]	; (80040c4 <HAL_GPIO_Init+0x2bc>)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	089b      	lsrs	r3, r3, #2
 8003fa6:	3302      	adds	r3, #2
 8003fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	220f      	movs	r2, #15
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a40      	ldr	r2, [pc, #256]	; (80040c8 <HAL_GPIO_Init+0x2c0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <HAL_GPIO_Init+0x1ec>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a3f      	ldr	r2, [pc, #252]	; (80040cc <HAL_GPIO_Init+0x2c4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_GPIO_Init+0x1e8>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3e      	ldr	r2, [pc, #248]	; (80040d0 <HAL_GPIO_Init+0x2c8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <HAL_GPIO_Init+0x1e4>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3d      	ldr	r2, [pc, #244]	; (80040d4 <HAL_GPIO_Init+0x2cc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d101      	bne.n	8003fe8 <HAL_GPIO_Init+0x1e0>
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e006      	b.n	8003ff6 <HAL_GPIO_Init+0x1ee>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	e004      	b.n	8003ff6 <HAL_GPIO_Init+0x1ee>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e002      	b.n	8003ff6 <HAL_GPIO_Init+0x1ee>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_GPIO_Init+0x1ee>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff8:	f002 0203 	and.w	r2, r2, #3
 8003ffc:	0092      	lsls	r2, r2, #2
 8003ffe:	4093      	lsls	r3, r2
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	492f      	ldr	r1, [pc, #188]	; (80040c4 <HAL_GPIO_Init+0x2bc>)
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	3302      	adds	r3, #2
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d006      	beq.n	800402e <HAL_GPIO_Init+0x226>
 8004020:	4b2d      	ldr	r3, [pc, #180]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	492c      	ldr	r1, [pc, #176]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	608b      	str	r3, [r1, #8]
 800402c:	e006      	b.n	800403c <HAL_GPIO_Init+0x234>
 800402e:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	43db      	mvns	r3, r3
 8004036:	4928      	ldr	r1, [pc, #160]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 8004038:	4013      	ands	r3, r2
 800403a:	608b      	str	r3, [r1, #8]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d006      	beq.n	8004056 <HAL_GPIO_Init+0x24e>
 8004048:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	4922      	ldr	r1, [pc, #136]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	60cb      	str	r3, [r1, #12]
 8004054:	e006      	b.n	8004064 <HAL_GPIO_Init+0x25c>
 8004056:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	43db      	mvns	r3, r3
 800405e:	491e      	ldr	r1, [pc, #120]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 8004060:	4013      	ands	r3, r2
 8004062:	60cb      	str	r3, [r1, #12]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d006      	beq.n	800407e <HAL_GPIO_Init+0x276>
 8004070:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	4918      	ldr	r1, [pc, #96]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
 800407c:	e006      	b.n	800408c <HAL_GPIO_Init+0x284>
 800407e:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	43db      	mvns	r3, r3
 8004086:	4914      	ldr	r1, [pc, #80]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 8004088:	4013      	ands	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d021      	beq.n	80040dc <HAL_GPIO_Init+0x2d4>
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	490e      	ldr	r1, [pc, #56]	; (80040d8 <HAL_GPIO_Init+0x2d0>)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	600b      	str	r3, [r1, #0]
 80040a4:	e021      	b.n	80040ea <HAL_GPIO_Init+0x2e2>
 80040a6:	bf00      	nop
 80040a8:	10320000 	.word	0x10320000
 80040ac:	10310000 	.word	0x10310000
 80040b0:	10220000 	.word	0x10220000
 80040b4:	10210000 	.word	0x10210000
 80040b8:	10120000 	.word	0x10120000
 80040bc:	10110000 	.word	0x10110000
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40010800 	.word	0x40010800
 80040cc:	40010c00 	.word	0x40010c00
 80040d0:	40011000 	.word	0x40011000
 80040d4:	40011400 	.word	0x40011400
 80040d8:	40010400 	.word	0x40010400
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_GPIO_Init+0x304>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	4909      	ldr	r1, [pc, #36]	; (800410c <HAL_GPIO_Init+0x304>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	3301      	adds	r3, #1
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	fa22 f303 	lsr.w	r3, r2, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f47f ae8e 	bne.w	8003e1c <HAL_GPIO_Init+0x14>
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	372c      	adds	r7, #44	; 0x2c
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr
 800410c:	40010400 	.word	0x40010400

08004110 <HAL_GPIO_WritePin>:
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	807b      	strh	r3, [r7, #2]
 800411c:	4613      	mov	r3, r2
 800411e:	707b      	strb	r3, [r7, #1]
 8004120:	787b      	ldrb	r3, [r7, #1]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_GPIO_WritePin+0x1e>
 8004126:	887a      	ldrh	r2, [r7, #2]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	611a      	str	r2, [r3, #16]
 800412c:	e003      	b.n	8004136 <HAL_GPIO_WritePin+0x26>
 800412e:	887b      	ldrh	r3, [r7, #2]
 8004130:	041a      	lsls	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	611a      	str	r2, [r3, #16]
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <HAL_GPIO_EXTI_IRQHandler>:
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	80fb      	strh	r3, [r7, #6]
 800414a:	4b08      	ldr	r3, [pc, #32]	; (800416c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	4013      	ands	r3, r2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d006      	beq.n	8004164 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8004156:	4a05      	ldr	r2, [pc, #20]	; (800416c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	6153      	str	r3, [r2, #20]
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f806 	bl	8004170 <HAL_GPIO_EXTI_Callback>
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40010400 	.word	0x40010400

08004170 <HAL_GPIO_EXTI_Callback>:
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	80fb      	strh	r3, [r7, #6]
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <HAL_RCC_OscConfig>:
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x12>
 8004192:	2301      	movs	r3, #1
 8004194:	e272      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8087 	beq.w	80042b2 <HAL_RCC_OscConfig+0x12e>
 80041a4:	4b92      	ldr	r3, [pc, #584]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d00c      	beq.n	80041ca <HAL_RCC_OscConfig+0x46>
 80041b0:	4b8f      	ldr	r3, [pc, #572]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d112      	bne.n	80041e2 <HAL_RCC_OscConfig+0x5e>
 80041bc:	4b8c      	ldr	r3, [pc, #560]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c8:	d10b      	bne.n	80041e2 <HAL_RCC_OscConfig+0x5e>
 80041ca:	4b89      	ldr	r3, [pc, #548]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d06c      	beq.n	80042b0 <HAL_RCC_OscConfig+0x12c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d168      	bne.n	80042b0 <HAL_RCC_OscConfig+0x12c>
 80041de:	2301      	movs	r3, #1
 80041e0:	e24c      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ea:	d106      	bne.n	80041fa <HAL_RCC_OscConfig+0x76>
 80041ec:	4b80      	ldr	r3, [pc, #512]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a7f      	ldr	r2, [pc, #508]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	e02e      	b.n	8004258 <HAL_RCC_OscConfig+0xd4>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x98>
 8004202:	4b7b      	ldr	r3, [pc, #492]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a7a      	ldr	r2, [pc, #488]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b78      	ldr	r3, [pc, #480]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a77      	ldr	r2, [pc, #476]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e01d      	b.n	8004258 <HAL_RCC_OscConfig+0xd4>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0xbc>
 8004226:	4b72      	ldr	r3, [pc, #456]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a71      	ldr	r2, [pc, #452]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800422c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b6f      	ldr	r3, [pc, #444]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a6e      	ldr	r2, [pc, #440]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0xd4>
 8004240:	4b6b      	ldr	r3, [pc, #428]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a6a      	ldr	r2, [pc, #424]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b68      	ldr	r3, [pc, #416]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a67      	ldr	r2, [pc, #412]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d013      	beq.n	8004288 <HAL_RCC_OscConfig+0x104>
 8004260:	f7ff fce8 	bl	8003c34 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0xf6>
 8004268:	f7ff fce4 	bl	8003c34 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0xf6>
 8004276:	2303      	movs	r3, #3
 8004278:	e200      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 800427a:	4b5d      	ldr	r3, [pc, #372]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0xe4>
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0x12e>
 8004288:	f7ff fcd4 	bl	8003c34 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x11e>
 8004290:	f7ff fcd0 	bl	8003c34 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x11e>
 800429e:	2303      	movs	r3, #3
 80042a0:	e1ec      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 80042a2:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x10c>
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x12e>
 80042b0:	bf00      	nop
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d063      	beq.n	8004386 <HAL_RCC_OscConfig+0x202>
 80042be:	4b4c      	ldr	r3, [pc, #304]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <HAL_RCC_OscConfig+0x15e>
 80042ca:	4b49      	ldr	r3, [pc, #292]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d11c      	bne.n	8004310 <HAL_RCC_OscConfig+0x18c>
 80042d6:	4b46      	ldr	r3, [pc, #280]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d116      	bne.n	8004310 <HAL_RCC_OscConfig+0x18c>
 80042e2:	4b43      	ldr	r3, [pc, #268]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_RCC_OscConfig+0x176>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d001      	beq.n	80042fa <HAL_RCC_OscConfig+0x176>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e1c0      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 80042fa:	4b3d      	ldr	r3, [pc, #244]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4939      	ldr	r1, [pc, #228]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
 800430e:	e03a      	b.n	8004386 <HAL_RCC_OscConfig+0x202>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_OscConfig+0x1d6>
 8004318:	4b36      	ldr	r3, [pc, #216]	; (80043f4 <HAL_RCC_OscConfig+0x270>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	f7ff fc89 	bl	8003c34 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x1b4>
 8004326:	f7ff fc85 	bl	8003c34 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x1b4>
 8004334:	2303      	movs	r3, #3
 8004336:	e1a1      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 8004338:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x1a2>
 8004344:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4927      	ldr	r1, [pc, #156]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004354:	4313      	orrs	r3, r2
 8004356:	600b      	str	r3, [r1, #0]
 8004358:	e015      	b.n	8004386 <HAL_RCC_OscConfig+0x202>
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <HAL_RCC_OscConfig+0x270>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f7ff fc68 	bl	8003c34 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x1f6>
 8004368:	f7ff fc64 	bl	8003c34 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x1f6>
 8004376:	2303      	movs	r3, #3
 8004378:	e180      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 800437a:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x1e4>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d03a      	beq.n	8004408 <HAL_RCC_OscConfig+0x284>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d019      	beq.n	80043ce <HAL_RCC_OscConfig+0x24a>
 800439a:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	f7ff fc48 	bl	8003c34 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x236>
 80043a8:	f7ff fc44 	bl	8003c34 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x236>
 80043b6:	2303      	movs	r3, #3
 80043b8:	e160      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 80043ba:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x224>
 80043c6:	2001      	movs	r0, #1
 80043c8:	f000 fafe 	bl	80049c8 <RCC_Delay>
 80043cc:	e01c      	b.n	8004408 <HAL_RCC_OscConfig+0x284>
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	f7ff fc2e 	bl	8003c34 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]
 80043da:	e00f      	b.n	80043fc <HAL_RCC_OscConfig+0x278>
 80043dc:	f7ff fc2a 	bl	8003c34 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d908      	bls.n	80043fc <HAL_RCC_OscConfig+0x278>
 80043ea:	2303      	movs	r3, #3
 80043ec:	e146      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	42420000 	.word	0x42420000
 80043f8:	42420480 	.word	0x42420480
 80043fc:	4b92      	ldr	r3, [pc, #584]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e9      	bne.n	80043dc <HAL_RCC_OscConfig+0x258>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80a6 	beq.w	8004562 <HAL_RCC_OscConfig+0x3de>
 8004416:	2300      	movs	r3, #0
 8004418:	75fb      	strb	r3, [r7, #23]
 800441a:	4b8b      	ldr	r3, [pc, #556]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10d      	bne.n	8004442 <HAL_RCC_OscConfig+0x2be>
 8004426:	4b88      	ldr	r3, [pc, #544]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	4a87      	ldr	r2, [pc, #540]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004430:	61d3      	str	r3, [r2, #28]
 8004432:	4b85      	ldr	r3, [pc, #532]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2301      	movs	r3, #1
 8004440:	75fb      	strb	r3, [r7, #23]
 8004442:	4b82      	ldr	r3, [pc, #520]	; (800464c <HAL_RCC_OscConfig+0x4c8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d118      	bne.n	8004480 <HAL_RCC_OscConfig+0x2fc>
 800444e:	4b7f      	ldr	r3, [pc, #508]	; (800464c <HAL_RCC_OscConfig+0x4c8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a7e      	ldr	r2, [pc, #504]	; (800464c <HAL_RCC_OscConfig+0x4c8>)
 8004454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	f7ff fbeb 	bl	8003c34 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x2f0>
 8004462:	f7ff fbe7 	bl	8003c34 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b64      	cmp	r3, #100	; 0x64
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x2f0>
 8004470:	2303      	movs	r3, #3
 8004472:	e103      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 8004474:	4b75      	ldr	r3, [pc, #468]	; (800464c <HAL_RCC_OscConfig+0x4c8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x2de>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d106      	bne.n	8004496 <HAL_RCC_OscConfig+0x312>
 8004488:	4b6f      	ldr	r3, [pc, #444]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4a6e      	ldr	r2, [pc, #440]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6213      	str	r3, [r2, #32]
 8004494:	e02d      	b.n	80044f2 <HAL_RCC_OscConfig+0x36e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x334>
 800449e:	4b6a      	ldr	r3, [pc, #424]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	4a69      	ldr	r2, [pc, #420]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	f023 0301 	bic.w	r3, r3, #1
 80044a8:	6213      	str	r3, [r2, #32]
 80044aa:	4b67      	ldr	r3, [pc, #412]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	4a66      	ldr	r2, [pc, #408]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044b0:	f023 0304 	bic.w	r3, r3, #4
 80044b4:	6213      	str	r3, [r2, #32]
 80044b6:	e01c      	b.n	80044f2 <HAL_RCC_OscConfig+0x36e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b05      	cmp	r3, #5
 80044be:	d10c      	bne.n	80044da <HAL_RCC_OscConfig+0x356>
 80044c0:	4b61      	ldr	r3, [pc, #388]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4a60      	ldr	r2, [pc, #384]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044c6:	f043 0304 	orr.w	r3, r3, #4
 80044ca:	6213      	str	r3, [r2, #32]
 80044cc:	4b5e      	ldr	r3, [pc, #376]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	4a5d      	ldr	r2, [pc, #372]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6213      	str	r3, [r2, #32]
 80044d8:	e00b      	b.n	80044f2 <HAL_RCC_OscConfig+0x36e>
 80044da:	4b5b      	ldr	r3, [pc, #364]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	4a5a      	ldr	r2, [pc, #360]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	6213      	str	r3, [r2, #32]
 80044e6:	4b58      	ldr	r3, [pc, #352]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	4a57      	ldr	r2, [pc, #348]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044ec:	f023 0304 	bic.w	r3, r3, #4
 80044f0:	6213      	str	r3, [r2, #32]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d015      	beq.n	8004526 <HAL_RCC_OscConfig+0x3a2>
 80044fa:	f7ff fb9b 	bl	8003c34 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]
 8004500:	e00a      	b.n	8004518 <HAL_RCC_OscConfig+0x394>
 8004502:	f7ff fb97 	bl	8003c34 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x394>
 8004514:	2303      	movs	r3, #3
 8004516:	e0b1      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 8004518:	4b4b      	ldr	r3, [pc, #300]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0ee      	beq.n	8004502 <HAL_RCC_OscConfig+0x37e>
 8004524:	e014      	b.n	8004550 <HAL_RCC_OscConfig+0x3cc>
 8004526:	f7ff fb85 	bl	8003c34 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]
 800452c:	e00a      	b.n	8004544 <HAL_RCC_OscConfig+0x3c0>
 800452e:	f7ff fb81 	bl	8003c34 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x3c0>
 8004540:	2303      	movs	r3, #3
 8004542:	e09b      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 8004544:	4b40      	ldr	r3, [pc, #256]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1ee      	bne.n	800452e <HAL_RCC_OscConfig+0x3aa>
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d105      	bne.n	8004562 <HAL_RCC_OscConfig+0x3de>
 8004556:	4b3c      	ldr	r3, [pc, #240]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4a3b      	ldr	r2, [pc, #236]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800455c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004560:	61d3      	str	r3, [r2, #28]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8087 	beq.w	800467a <HAL_RCC_OscConfig+0x4f6>
 800456c:	4b36      	ldr	r3, [pc, #216]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 030c 	and.w	r3, r3, #12
 8004574:	2b08      	cmp	r3, #8
 8004576:	d061      	beq.n	800463c <HAL_RCC_OscConfig+0x4b8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d146      	bne.n	800460e <HAL_RCC_OscConfig+0x48a>
 8004580:	4b33      	ldr	r3, [pc, #204]	; (8004650 <HAL_RCC_OscConfig+0x4cc>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	f7ff fb55 	bl	8003c34 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x41c>
 800458e:	f7ff fb51 	bl	8003c34 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x41c>
 800459c:	2303      	movs	r3, #3
 800459e:	e06d      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 80045a0:	4b29      	ldr	r3, [pc, #164]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f0      	bne.n	800458e <HAL_RCC_OscConfig+0x40a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b4:	d108      	bne.n	80045c8 <HAL_RCC_OscConfig+0x444>
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	4921      	ldr	r1, [pc, #132]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
 80045c8:	4b1f      	ldr	r3, [pc, #124]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a19      	ldr	r1, [r3, #32]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	430b      	orrs	r3, r1
 80045da:	491b      	ldr	r1, [pc, #108]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
 80045e0:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCC_OscConfig+0x4cc>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	f7ff fb25 	bl	8003c34 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x47c>
 80045ee:	f7ff fb21 	bl	8003c34 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x47c>
 80045fc:	2303      	movs	r3, #3
 80045fe:	e03d      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x46a>
 800460c:	e035      	b.n	800467a <HAL_RCC_OscConfig+0x4f6>
 800460e:	4b10      	ldr	r3, [pc, #64]	; (8004650 <HAL_RCC_OscConfig+0x4cc>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	f7ff fb0e 	bl	8003c34 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x4aa>
 800461c:	f7ff fb0a 	bl	8003c34 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x4aa>
 800462a:	2303      	movs	r3, #3
 800462c:	e026      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x498>
 800463a:	e01e      	b.n	800467a <HAL_RCC_OscConfig+0x4f6>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d107      	bne.n	8004654 <HAL_RCC_OscConfig+0x4d0>
 8004644:	2301      	movs	r3, #1
 8004646:	e019      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 8004648:	40021000 	.word	0x40021000
 800464c:	40007000 	.word	0x40007000
 8004650:	42420060 	.word	0x42420060
 8004654:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCC_OscConfig+0x500>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	429a      	cmp	r2, r3
 8004666:	d106      	bne.n	8004676 <HAL_RCC_OscConfig+0x4f2>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	429a      	cmp	r2, r3
 8004674:	d001      	beq.n	800467a <HAL_RCC_OscConfig+0x4f6>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 800467a:	2300      	movs	r3, #0
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000

08004688 <HAL_RCC_ClockConfig>:
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_ClockConfig+0x14>
 8004698:	2301      	movs	r3, #1
 800469a:	e0d0      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
 800469c:	4b6a      	ldr	r3, [pc, #424]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d910      	bls.n	80046cc <HAL_RCC_ClockConfig+0x44>
 80046aa:	4b67      	ldr	r3, [pc, #412]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 0207 	bic.w	r2, r3, #7
 80046b2:	4965      	ldr	r1, [pc, #404]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]
 80046ba:	4b63      	ldr	r3, [pc, #396]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_ClockConfig+0x44>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0b8      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d020      	beq.n	800471a <HAL_RCC_ClockConfig+0x92>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x68>
 80046e4:	4b59      	ldr	r3, [pc, #356]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	4a58      	ldr	r2, [pc, #352]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046ee:	6053      	str	r3, [r2, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x80>
 80046fc:	4b53      	ldr	r3, [pc, #332]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4a52      	ldr	r2, [pc, #328]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004706:	6053      	str	r3, [r2, #4]
 8004708:	4b50      	ldr	r3, [pc, #320]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	494d      	ldr	r1, [pc, #308]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	604b      	str	r3, [r1, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d040      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x120>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0xb6>
 800472e:	4b47      	ldr	r3, [pc, #284]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d115      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
 800473a:	2301      	movs	r3, #1
 800473c:	e07f      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xce>
 8004746:	4b41      	ldr	r3, [pc, #260]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
 8004752:	2301      	movs	r3, #1
 8004754:	e073      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
 8004756:	4b3d      	ldr	r3, [pc, #244]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
 8004762:	2301      	movs	r3, #1
 8004764:	e06b      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
 8004766:	4b39      	ldr	r3, [pc, #228]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f023 0203 	bic.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4936      	ldr	r1, [pc, #216]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
 8004778:	f7ff fa5c 	bl	8003c34 <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	e00a      	b.n	8004796 <HAL_RCC_ClockConfig+0x10e>
 8004780:	f7ff fa58 	bl	8003c34 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	; 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_ClockConfig+0x10e>
 8004792:	2303      	movs	r3, #3
 8004794:	e053      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
 8004796:	4b2d      	ldr	r3, [pc, #180]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f003 020c 	and.w	r2, r3, #12
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1eb      	bne.n	8004780 <HAL_RCC_ClockConfig+0xf8>
 80047a8:	4b27      	ldr	r3, [pc, #156]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d210      	bcs.n	80047d8 <HAL_RCC_ClockConfig+0x150>
 80047b6:	4b24      	ldr	r3, [pc, #144]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 0207 	bic.w	r2, r3, #7
 80047be:	4922      	ldr	r1, [pc, #136]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]
 80047c6:	4b20      	ldr	r3, [pc, #128]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x150>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e032      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x16e>
 80047e4:	4b19      	ldr	r3, [pc, #100]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4916      	ldr	r1, [pc, #88]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	604b      	str	r3, [r1, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <HAL_RCC_ClockConfig+0x18e>
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	490e      	ldr	r1, [pc, #56]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	604b      	str	r3, [r1, #4]
 8004816:	f000 f821 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800481a:	4602      	mov	r2, r0
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	091b      	lsrs	r3, r3, #4
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	490a      	ldr	r1, [pc, #40]	; (8004850 <HAL_RCC_ClockConfig+0x1c8>)
 8004828:	5ccb      	ldrb	r3, [r1, r3]
 800482a:	fa22 f303 	lsr.w	r3, r2, r3
 800482e:	4a09      	ldr	r2, [pc, #36]	; (8004854 <HAL_RCC_ClockConfig+0x1cc>)
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RCC_ClockConfig+0x1d0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff f85e 	bl	80038f8 <HAL_InitTick>
 800483c:	2300      	movs	r3, #0
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40022000 	.word	0x40022000
 800484c:	40021000 	.word	0x40021000
 8004850:	0800d210 	.word	0x0800d210
 8004854:	2000001c 	.word	0x2000001c
 8004858:	20000020 	.word	0x20000020

0800485c <HAL_RCC_GetSysClockFreq>:
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	2300      	movs	r3, #0
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	2b04      	cmp	r3, #4
 8004884:	d002      	beq.n	800488c <HAL_RCC_GetSysClockFreq+0x30>
 8004886:	2b08      	cmp	r3, #8
 8004888:	d003      	beq.n	8004892 <HAL_RCC_GetSysClockFreq+0x36>
 800488a:	e027      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x80>
 800488c:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	e027      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x86>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	0c9b      	lsrs	r3, r3, #18
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800489c:	5cd3      	ldrb	r3, [r2, r3]
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x70>
 80048aa:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	0c5b      	lsrs	r3, r3, #17
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	4a11      	ldr	r2, [pc, #68]	; (80048fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80048b6:	5cd3      	ldrb	r3, [r2, r3]
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a0d      	ldr	r2, [pc, #52]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80048be:	fb03 f202 	mul.w	r2, r3, r2
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	e004      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0x7a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a0c      	ldr	r2, [pc, #48]	; (8004900 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048d0:	fb02 f303 	mul.w	r3, r2, r3
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	e002      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x86>
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	bf00      	nop
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4618      	mov	r0, r3
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000
 80048f4:	007a1200 	.word	0x007a1200
 80048f8:	0800d228 	.word	0x0800d228
 80048fc:	0800d238 	.word	0x0800d238
 8004900:	003d0900 	.word	0x003d0900

08004904 <HAL_RCC_GetHCLKFreq>:
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
 8004908:	4b02      	ldr	r3, [pc, #8]	; (8004914 <HAL_RCC_GetHCLKFreq+0x10>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr
 8004914:	2000001c 	.word	0x2000001c

08004918 <HAL_RCC_GetPCLK1Freq>:
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
 800491c:	f7ff fff2 	bl	8004904 <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4903      	ldr	r1, [pc, #12]	; (800493c <HAL_RCC_GetPCLK1Freq+0x24>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
 8004934:	4618      	mov	r0, r3
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40021000 	.word	0x40021000
 800493c:	0800d220 	.word	0x0800d220

08004940 <HAL_RCC_GetPCLK2Freq>:
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
 8004944:	f7ff ffde 	bl	8004904 <HAL_RCC_GetHCLKFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	0adb      	lsrs	r3, r3, #11
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4903      	ldr	r1, [pc, #12]	; (8004964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40021000 	.word	0x40021000
 8004964:	0800d220 	.word	0x0800d220

08004968 <HAL_RCC_GetClockConfig>:
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	220f      	movs	r2, #15
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <HAL_RCC_GetClockConfig+0x58>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 0203 	and.w	r2, r3, #3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	605a      	str	r2, [r3, #4]
 8004984:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <HAL_RCC_GetClockConfig+0x58>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCC_GetClockConfig+0x58>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <HAL_RCC_GetClockConfig+0x58>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	08db      	lsrs	r3, r3, #3
 80049a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	611a      	str	r2, [r3, #16]
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_RCC_GetClockConfig+0x5c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0207 	and.w	r2, r3, #7
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40022000 	.word	0x40022000

080049c8 <RCC_Delay>:
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <RCC_Delay+0x34>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a0a      	ldr	r2, [pc, #40]	; (8004a00 <RCC_Delay+0x38>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	0a5b      	lsrs	r3, r3, #9
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	bf00      	nop
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1e5a      	subs	r2, r3, #1
 80049ea:	60fa      	str	r2, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1f9      	bne.n	80049e4 <RCC_Delay+0x1c>
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	2000001c 	.word	0x2000001c
 8004a00:	10624dd3 	.word	0x10624dd3

08004a04 <HAL_TIM_Base_Init>:
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_TIM_Base_Init+0x12>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e041      	b.n	8004a9a <HAL_TIM_Base_Init+0x96>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_TIM_Base_Init+0x2c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f839 	bl	8004aa2 <HAL_TIM_Base_MspInit>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f000 f9b4 	bl	8004db0 <TIM_Base_SetConfig>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a98:	2300      	movs	r3, #0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_TIM_Base_MspInit>:
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIM_Base_Start_IT>:
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d001      	beq.n	8004acc <HAL_TIM_Base_Start_IT+0x18>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e03a      	b.n	8004b42 <HAL_TIM_Base_Start_IT+0x8e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	60da      	str	r2, [r3, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_TIM_Base_Start_IT+0x98>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x58>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af6:	d009      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x58>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <HAL_TIM_Base_Start_IT+0x9c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x58>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d111      	bne.n	8004b30 <HAL_TIM_Base_Start_IT+0x7c>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d010      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0x8c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e007      	b.n	8004b40 <HAL_TIM_Base_Start_IT+0x8c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	2300      	movs	r3, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40000400 	.word	0x40000400
 8004b54:	40000800 	.word	0x40000800

08004b58 <HAL_TIM_IRQHandler>:
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d122      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x5c>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d11b      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x5c>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0202 	mvn.w	r2, #2
 8004b84:	611a      	str	r2, [r3, #16]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	771a      	strb	r2, [r3, #28]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_TIM_IRQHandler+0x4a>
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f8ed 	bl	8004d7a <HAL_TIM_IC_CaptureCallback>
 8004ba0:	e005      	b.n	8004bae <HAL_TIM_IRQHandler+0x56>
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f8e0 	bl	8004d68 <HAL_TIM_OC_DelayElapsedCallback>
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f8ef 	bl	8004d8c <HAL_TIM_PWM_PulseFinishedCallback>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	771a      	strb	r2, [r3, #28]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d122      	bne.n	8004c08 <HAL_TIM_IRQHandler+0xb0>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d11b      	bne.n	8004c08 <HAL_TIM_IRQHandler+0xb0>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0204 	mvn.w	r2, #4
 8004bd8:	611a      	str	r2, [r3, #16]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	771a      	strb	r2, [r3, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x9e>
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8c3 	bl	8004d7a <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0xaa>
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f8b6 	bl	8004d68 <HAL_TIM_OC_DelayElapsedCallback>
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f8c5 	bl	8004d8c <HAL_TIM_PWM_PulseFinishedCallback>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d122      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x104>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d11b      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x104>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0208 	mvn.w	r2, #8
 8004c2c:	611a      	str	r2, [r3, #16]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2204      	movs	r2, #4
 8004c32:	771a      	strb	r2, [r3, #28]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0xf2>
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f899 	bl	8004d7a <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0xfe>
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f88c 	bl	8004d68 <HAL_TIM_OC_DelayElapsedCallback>
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f89b 	bl	8004d8c <HAL_TIM_PWM_PulseFinishedCallback>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b10      	cmp	r3, #16
 8004c68:	d122      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x158>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d11b      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x158>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0210 	mvn.w	r2, #16
 8004c80:	611a      	str	r2, [r3, #16]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2208      	movs	r2, #8
 8004c86:	771a      	strb	r2, [r3, #28]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0x146>
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f86f 	bl	8004d7a <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0x152>
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f862 	bl	8004d68 <HAL_TIM_OC_DelayElapsedCallback>
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f871 	bl	8004d8c <HAL_TIM_PWM_PulseFinishedCallback>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d10e      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x184>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d107      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x184>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0201 	mvn.w	r2, #1
 8004cd4:	611a      	str	r2, [r3, #16]
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fe fb94 	bl	8003404 <HAL_TIM_PeriodElapsedCallback>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d10e      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x1b0>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf4:	2b80      	cmp	r3, #128	; 0x80
 8004cf6:	d107      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x1b0>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d00:	611a      	str	r2, [r3, #16]
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f8bf 	bl	8004e86 <HAL_TIMEx_BreakCallback>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d10e      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x1dc>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	d107      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x1dc>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d2c:	611a      	str	r2, [r3, #16]
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f835 	bl	8004d9e <HAL_TIM_TriggerCallback>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d10e      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x208>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d107      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x208>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0220 	mvn.w	r2, #32
 8004d58:	611a      	str	r2, [r3, #16]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f88a 	bl	8004e74 <HAL_TIMEx_CommutCallback>
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_OC_DelayElapsedCallback>:
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr

08004d7a <HAL_TIM_IC_CaptureCallback>:
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIM_PWM_PulseFinishedCallback>:
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <HAL_TIM_TriggerCallback>:
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <TIM_Base_SetConfig>:
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a29      	ldr	r2, [pc, #164]	; (8004e68 <TIM_Base_SetConfig+0xb8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00b      	beq.n	8004de0 <TIM_Base_SetConfig+0x30>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dce:	d007      	beq.n	8004de0 <TIM_Base_SetConfig+0x30>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <TIM_Base_SetConfig+0xbc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_Base_SetConfig+0x30>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <TIM_Base_SetConfig+0xc0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d108      	bne.n	8004df2 <TIM_Base_SetConfig+0x42>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <TIM_Base_SetConfig+0xb8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00b      	beq.n	8004e12 <TIM_Base_SetConfig+0x62>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e00:	d007      	beq.n	8004e12 <TIM_Base_SetConfig+0x62>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a19      	ldr	r2, [pc, #100]	; (8004e6c <TIM_Base_SetConfig+0xbc>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d003      	beq.n	8004e12 <TIM_Base_SetConfig+0x62>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <TIM_Base_SetConfig+0xc0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d108      	bne.n	8004e24 <TIM_Base_SetConfig+0x74>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	629a      	str	r2, [r3, #40]	; 0x28
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a07      	ldr	r2, [pc, #28]	; (8004e68 <TIM_Base_SetConfig+0xb8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d103      	bne.n	8004e58 <TIM_Base_SetConfig+0xa8>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	615a      	str	r2, [r3, #20]
 8004e5e:	bf00      	nop
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800

08004e74 <HAL_TIMEx_CommutCallback>:
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr

08004e86 <HAL_TIMEx_BreakCallback>:
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr

08004e98 <HAL_UART_Init>:
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_UART_Init+0x12>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e042      	b.n	8004f30 <HAL_UART_Init+0x98>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_UART_Init+0x2c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fe fcdc 	bl	800387c <HAL_UART_MspInit>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2224      	movs	r2, #36	; 0x24
 8004ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eda:	60da      	str	r2, [r3, #12]
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f82b 	bl	8004f38 <UART_SetConfig>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef0:	611a      	str	r2, [r3, #16]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f00:	615a      	str	r2, [r3, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	645a      	str	r2, [r3, #68]	; 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f2e:	2300      	movs	r3, #0
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <UART_SetConfig>:
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	611a      	str	r2, [r3, #16]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f72:	f023 030c 	bic.w	r3, r3, #12
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	60d3      	str	r3, [r2, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	615a      	str	r2, [r3, #20]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a2c      	ldr	r2, [pc, #176]	; (800504c <UART_SetConfig+0x114>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d103      	bne.n	8004fa8 <UART_SetConfig+0x70>
 8004fa0:	f7ff fcce 	bl	8004940 <HAL_RCC_GetPCLK2Freq>
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	e002      	b.n	8004fae <UART_SetConfig+0x76>
 8004fa8:	f7ff fcb6 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009a      	lsls	r2, r3, #2
 8004fb8:	441a      	add	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	4a22      	ldr	r2, [pc, #136]	; (8005050 <UART_SetConfig+0x118>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	0119      	lsls	r1, r3, #4
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009a      	lsls	r2, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <UART_SetConfig+0x118>)
 8004fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	2064      	movs	r0, #100	; 0x64
 8004fee:	fb00 f303 	mul.w	r3, r0, r3
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	3332      	adds	r3, #50	; 0x32
 8004ff8:	4a15      	ldr	r2, [pc, #84]	; (8005050 <UART_SetConfig+0x118>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005004:	4419      	add	r1, r3
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	009a      	lsls	r2, r3, #2
 8005010:	441a      	add	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	fbb2 f2f3 	udiv	r2, r2, r3
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <UART_SetConfig+0x118>)
 800501e:	fba3 0302 	umull	r0, r3, r3, r2
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	2064      	movs	r0, #100	; 0x64
 8005026:	fb00 f303 	mul.w	r3, r0, r3
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	3332      	adds	r3, #50	; 0x32
 8005030:	4a07      	ldr	r2, [pc, #28]	; (8005050 <UART_SetConfig+0x118>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	f003 020f 	and.w	r2, r3, #15
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	440a      	add	r2, r1
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40013800 	.word	0x40013800
 8005050:	51eb851f 	.word	0x51eb851f

08005054 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005066:	2b84      	cmp	r3, #132	; 0x84
 8005068:	d005      	beq.n	8005076 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800506a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4413      	add	r3, r2
 8005072:	3303      	adds	r3, #3
 8005074:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005076:	68fb      	ldr	r3, [r7, #12]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr

08005082 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005088:	f3ef 8305 	mrs	r3, IPSR
 800508c:	607b      	str	r3, [r7, #4]
  return(result);
 800508e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf14      	ite	ne
 8005094:	2301      	movne	r3, #1
 8005096:	2300      	moveq	r3, #0
 8005098:	b2db      	uxtb	r3, r3
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr

080050a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050a8:	f000 fe6c 	bl	8005d84 <vTaskStartScheduler>
  
  return osOK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80050b6:	f7ff ffe4 	bl	8005082 <inHandlerMode>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80050c0:	f000 ff82 	bl	8005fc8 <xTaskGetTickCountFromISR>
 80050c4:	4603      	mov	r3, r0
 80050c6:	e002      	b.n	80050ce <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80050c8:	f000 ff70 	bl	8005fac <xTaskGetTickCount>
 80050cc:	4603      	mov	r3, r0
  }
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050d4:	b089      	sub	sp, #36	; 0x24
 80050d6:	af04      	add	r7, sp, #16
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d020      	beq.n	8005126 <osThreadCreate+0x54>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01c      	beq.n	8005126 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685c      	ldr	r4, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691e      	ldr	r6, [r3, #16]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff ffa8 	bl	8005054 <makeFreeRtosPriority>
 8005104:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800510e:	9202      	str	r2, [sp, #8]
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	9100      	str	r1, [sp, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	4632      	mov	r2, r6
 8005118:	4629      	mov	r1, r5
 800511a:	4620      	mov	r0, r4
 800511c:	f000 fc5c 	bl	80059d8 <xTaskCreateStatic>
 8005120:	4603      	mov	r3, r0
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e01c      	b.n	8005160 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685c      	ldr	r4, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005132:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff ff8a 	bl	8005054 <makeFreeRtosPriority>
 8005140:	4602      	mov	r2, r0
 8005142:	f107 030c 	add.w	r3, r7, #12
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	9200      	str	r2, [sp, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	4632      	mov	r2, r6
 800514e:	4629      	mov	r1, r5
 8005150:	4620      	mov	r0, r4
 8005152:	f000 fc9d 	bl	8005a90 <xTaskCreate>
 8005156:	4603      	mov	r3, r0
 8005158:	2b01      	cmp	r3, #1
 800515a:	d001      	beq.n	8005160 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	e000      	b.n	8005162 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005160:	68fb      	ldr	r3, [r7, #12]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800516a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <osDelay+0x16>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	e000      	b.n	8005182 <osDelay+0x18>
 8005180:	2301      	movs	r3, #1
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fdca 	bl	8005d1c <vTaskDelay>
  
  return osOK;
 8005188:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	4619      	mov	r1, r3
 80051a8:	2001      	movs	r0, #1
 80051aa:	f000 fa27 	bl	80055fc <xQueueCreateMutexStatic>
 80051ae:	4603      	mov	r3, r0
 80051b0:	e003      	b.n	80051ba <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80051b2:	2001      	movs	r0, #1
 80051b4:	f000 fa0a 	bl	80055cc <xQueueCreateMutex>
 80051b8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f103 0208 	add.w	r2, r3, #8
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f04f 32ff 	mov.w	r2, #4294967295
 80051da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f103 0208 	add.w	r2, r3, #8
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f103 0208 	add.w	r2, r3, #8
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr

08005200 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr

08005218 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	601a      	str	r2, [r3, #0]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr

0800525e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d103      	bne.n	800527e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e00c      	b.n	8005298 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3308      	adds	r3, #8
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	e002      	b.n	800528c <vListInsert+0x2e>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	d2f6      	bcs.n	8005286 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	601a      	str	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr

080052ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6892      	ldr	r2, [r2, #8]
 80052e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6852      	ldr	r2, [r2, #4]
 80052ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d103      	bne.n	8005302 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	1e5a      	subs	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005346:	bf00      	nop
 8005348:	e7fe      	b.n	8005348 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800534a:	f001 fb4f 	bl	80069ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	68f9      	ldr	r1, [r7, #12]
 8005358:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800535a:	fb01 f303 	mul.w	r3, r1, r3
 800535e:	441a      	add	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537a:	3b01      	subs	r3, #1
 800537c:	68f9      	ldr	r1, [r7, #12]
 800537e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	441a      	add	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	22ff      	movs	r2, #255	; 0xff
 800538e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	22ff      	movs	r2, #255	; 0xff
 8005396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d114      	bne.n	80053ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01a      	beq.n	80053de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3310      	adds	r3, #16
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 ff61 	bl	8006274 <xTaskRemoveFromEventList>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d012      	beq.n	80053de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053b8:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <xQueueGenericReset+0xcc>)
 80053ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	e009      	b.n	80053de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3310      	adds	r3, #16
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fef7 	bl	80051c2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3324      	adds	r3, #36	; 0x24
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fef2 	bl	80051c2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053de:	f001 fb35 	bl	8006a4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053e2:	2301      	movs	r3, #1
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	e000ed04 	.word	0xe000ed04

080053f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08e      	sub	sp, #56	; 0x38
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005416:	bf00      	nop
 8005418:	e7fe      	b.n	8005418 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <xQueueGenericCreateStatic+0x52>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <xQueueGenericCreateStatic+0x56>
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <xQueueGenericCreateStatic+0x58>
 8005446:	2300      	movs	r3, #0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	623b      	str	r3, [r7, #32]
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <xQueueGenericCreateStatic+0x7e>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <xQueueGenericCreateStatic+0x82>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <xQueueGenericCreateStatic+0x84>
 8005472:	2300      	movs	r3, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	61fb      	str	r3, [r7, #28]
}
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800548e:	2348      	movs	r3, #72	; 0x48
 8005490:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b48      	cmp	r3, #72	; 0x48
 8005496:	d00a      	beq.n	80054ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	61bb      	str	r3, [r7, #24]
}
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00d      	beq.n	80054d4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054c0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f843 	bl	800555a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3730      	adds	r7, #48	; 0x30
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b08a      	sub	sp, #40	; 0x28
 80054e2:	af02      	add	r7, sp, #8
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	4613      	mov	r3, r2
 80054ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10a      	bne.n	8005508 <xQueueGenericCreate+0x2a>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	613b      	str	r3, [r7, #16]
}
 8005504:	bf00      	nop
 8005506:	e7fe      	b.n	8005506 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	e004      	b.n	800551e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	fb02 f303 	mul.w	r3, r2, r3
 800551c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	3348      	adds	r3, #72	; 0x48
 8005522:	4618      	mov	r0, r3
 8005524:	f001 fb62 	bl	8006bec <pvPortMalloc>
 8005528:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00f      	beq.n	8005550 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	3348      	adds	r3, #72	; 0x48
 8005534:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800553e:	79fa      	ldrb	r2, [r7, #7]
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	4613      	mov	r3, r2
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f805 	bl	800555a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005550:	69bb      	ldr	r3, [r7, #24]
	}
 8005552:	4618      	mov	r0, r3
 8005554:	3720      	adds	r7, #32
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
 8005566:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	e002      	b.n	800557c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005588:	2101      	movs	r1, #1
 800558a:	69b8      	ldr	r0, [r7, #24]
 800558c:	f7ff fec8 	bl	8005320 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005590:	bf00      	nop
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00e      	beq.n	80055c4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80055b8:	2300      	movs	r3, #0
 80055ba:	2200      	movs	r2, #0
 80055bc:	2100      	movs	r1, #0
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f838 	bl	8005634 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80055c4:	bf00      	nop
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80055d6:	2301      	movs	r3, #1
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	461a      	mov	r2, r3
 80055e2:	6939      	ldr	r1, [r7, #16]
 80055e4:	6978      	ldr	r0, [r7, #20]
 80055e6:	f7ff ff7a 	bl	80054de <xQueueGenericCreate>
 80055ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7ff ffd3 	bl	8005598 <prvInitialiseMutex>

		return pxNewQueue;
 80055f2:	68fb      	ldr	r3, [r7, #12]
	}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af02      	add	r7, sp, #8
 8005602:	4603      	mov	r3, r0
 8005604:	6039      	str	r1, [r7, #0]
 8005606:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005608:	2301      	movs	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2200      	movs	r2, #0
 8005618:	6939      	ldr	r1, [r7, #16]
 800561a:	6978      	ldr	r0, [r7, #20]
 800561c:	f7ff fee8 	bl	80053f0 <xQueueGenericCreateStatic>
 8005620:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f7ff ffb8 	bl	8005598 <prvInitialiseMutex>

		return pxNewQueue;
 8005628:	68fb      	ldr	r3, [r7, #12]
	}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08e      	sub	sp, #56	; 0x38
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005642:	2300      	movs	r3, #0
 8005644:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10a      	bne.n	8005666 <xQueueGenericSend+0x32>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005662:	bf00      	nop
 8005664:	e7fe      	b.n	8005664 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d103      	bne.n	8005674 <xQueueGenericSend+0x40>
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <xQueueGenericSend+0x44>
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <xQueueGenericSend+0x46>
 8005678:	2300      	movs	r3, #0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10a      	bne.n	8005694 <xQueueGenericSend+0x60>
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005690:	bf00      	nop
 8005692:	e7fe      	b.n	8005692 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d103      	bne.n	80056a2 <xQueueGenericSend+0x6e>
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <xQueueGenericSend+0x72>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <xQueueGenericSend+0x74>
 80056a6:	2300      	movs	r3, #0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	623b      	str	r3, [r7, #32]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056c2:	f000 ff9b 	bl	80065fc <xTaskGetSchedulerState>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <xQueueGenericSend+0x9e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <xQueueGenericSend+0xa2>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <xQueueGenericSend+0xa4>
 80056d6:	2300      	movs	r3, #0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	61fb      	str	r3, [r7, #28]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056f2:	f001 f97b 	bl	80069ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fe:	429a      	cmp	r2, r3
 8005700:	d302      	bcc.n	8005708 <xQueueGenericSend+0xd4>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b02      	cmp	r3, #2
 8005706:	d129      	bne.n	800575c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800570e:	f000 f88f 	bl	8005830 <prvCopyDataToQueue>
 8005712:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2b00      	cmp	r3, #0
 800571a:	d010      	beq.n	800573e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571e:	3324      	adds	r3, #36	; 0x24
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fda7 	bl	8006274 <xTaskRemoveFromEventList>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d013      	beq.n	8005754 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800572c:	4b3f      	ldr	r3, [pc, #252]	; (800582c <xQueueGenericSend+0x1f8>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	e00a      	b.n	8005754 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d007      	beq.n	8005754 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005744:	4b39      	ldr	r3, [pc, #228]	; (800582c <xQueueGenericSend+0x1f8>)
 8005746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005754:	f001 f97a 	bl	8006a4c <vPortExitCritical>
				return pdPASS;
 8005758:	2301      	movs	r3, #1
 800575a:	e063      	b.n	8005824 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d103      	bne.n	800576a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005762:	f001 f973 	bl	8006a4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005766:	2300      	movs	r3, #0
 8005768:	e05c      	b.n	8005824 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576c:	2b00      	cmp	r3, #0
 800576e:	d106      	bne.n	800577e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005770:	f107 0314 	add.w	r3, r7, #20
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fddf 	bl	8006338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800577a:	2301      	movs	r3, #1
 800577c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800577e:	f001 f965 	bl	8006a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005782:	f000 fb69 	bl	8005e58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005786:	f001 f931 	bl	80069ec <vPortEnterCritical>
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005790:	b25b      	sxtb	r3, r3
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d103      	bne.n	80057a0 <xQueueGenericSend+0x16c>
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057a6:	b25b      	sxtb	r3, r3
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d103      	bne.n	80057b6 <xQueueGenericSend+0x182>
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b6:	f001 f949 	bl	8006a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057ba:	1d3a      	adds	r2, r7, #4
 80057bc:	f107 0314 	add.w	r3, r7, #20
 80057c0:	4611      	mov	r1, r2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fdce 	bl	8006364 <xTaskCheckForTimeOut>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d124      	bne.n	8005818 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057d0:	f000 f8ea 	bl	80059a8 <prvIsQueueFull>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d018      	beq.n	800580c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	3310      	adds	r3, #16
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	4611      	mov	r1, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fd22 	bl	800622c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ea:	f000 f88b 	bl	8005904 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057ee:	f000 fb41 	bl	8005e74 <xTaskResumeAll>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f47f af7c 	bne.w	80056f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80057fa:	4b0c      	ldr	r3, [pc, #48]	; (800582c <xQueueGenericSend+0x1f8>)
 80057fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	e772      	b.n	80056f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800580c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800580e:	f000 f879 	bl	8005904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005812:	f000 fb2f 	bl	8005e74 <xTaskResumeAll>
 8005816:	e76c      	b.n	80056f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800581a:	f000 f873 	bl	8005904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800581e:	f000 fb29 	bl	8005e74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005822:	2300      	movs	r3, #0
		}
	}
}
 8005824:	4618      	mov	r0, r3
 8005826:	3738      	adds	r7, #56	; 0x38
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10d      	bne.n	800586a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d14d      	bne.n	80058f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 feec 	bl	8006638 <xTaskPriorityDisinherit>
 8005860:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	e043      	b.n	80058f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d119      	bne.n	80058a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6898      	ldr	r0, [r3, #8]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	461a      	mov	r2, r3
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	f002 fcf3 	bl	8008266 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	441a      	add	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	d32b      	bcc.n	80058f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	609a      	str	r2, [r3, #8]
 80058a2:	e026      	b.n	80058f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68d8      	ldr	r0, [r3, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	461a      	mov	r2, r3
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	f002 fcd9 	bl	8008266 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	425b      	negs	r3, r3
 80058be:	441a      	add	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d207      	bcs.n	80058e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	425b      	negs	r3, r3
 80058da:	441a      	add	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d105      	bne.n	80058f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058fa:	697b      	ldr	r3, [r7, #20]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800590c:	f001 f86e 	bl	80069ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005916:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005918:	e011      	b.n	800593e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	d012      	beq.n	8005948 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3324      	adds	r3, #36	; 0x24
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fca4 	bl	8006274 <xTaskRemoveFromEventList>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005932:	f000 fd79 	bl	8006428 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	3b01      	subs	r3, #1
 800593a:	b2db      	uxtb	r3, r3
 800593c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800593e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005942:	2b00      	cmp	r3, #0
 8005944:	dce9      	bgt.n	800591a <prvUnlockQueue+0x16>
 8005946:	e000      	b.n	800594a <prvUnlockQueue+0x46>
					break;
 8005948:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	22ff      	movs	r2, #255	; 0xff
 800594e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005952:	f001 f87b 	bl	8006a4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005956:	f001 f849 	bl	80069ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005960:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005962:	e011      	b.n	8005988 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d012      	beq.n	8005992 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3310      	adds	r3, #16
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fc7f 	bl	8006274 <xTaskRemoveFromEventList>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800597c:	f000 fd54 	bl	8006428 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005980:	7bbb      	ldrb	r3, [r7, #14]
 8005982:	3b01      	subs	r3, #1
 8005984:	b2db      	uxtb	r3, r3
 8005986:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800598c:	2b00      	cmp	r3, #0
 800598e:	dce9      	bgt.n	8005964 <prvUnlockQueue+0x60>
 8005990:	e000      	b.n	8005994 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005992:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	22ff      	movs	r2, #255	; 0xff
 8005998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800599c:	f001 f856 	bl	8006a4c <vPortExitCritical>
}
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059b0:	f001 f81c 	bl	80069ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059bc:	429a      	cmp	r2, r3
 80059be:	d102      	bne.n	80059c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059c0:	2301      	movs	r3, #1
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	e001      	b.n	80059ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059ca:	f001 f83f 	bl	8006a4c <vPortExitCritical>

	return xReturn;
 80059ce:	68fb      	ldr	r3, [r7, #12]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08e      	sub	sp, #56	; 0x38
 80059dc:	af04      	add	r7, sp, #16
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10a      	bne.n	8005a02 <xTaskCreateStatic+0x2a>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	623b      	str	r3, [r7, #32]
}
 80059fe:	bf00      	nop
 8005a00:	e7fe      	b.n	8005a00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10a      	bne.n	8005a1e <xTaskCreateStatic+0x46>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	61fb      	str	r3, [r7, #28]
}
 8005a1a:	bf00      	nop
 8005a1c:	e7fe      	b.n	8005a1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a1e:	23a4      	movs	r3, #164	; 0xa4
 8005a20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2ba4      	cmp	r3, #164	; 0xa4
 8005a26:	d00a      	beq.n	8005a3e <xTaskCreateStatic+0x66>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	61bb      	str	r3, [r7, #24]
}
 8005a3a:	bf00      	nop
 8005a3c:	e7fe      	b.n	8005a3c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01e      	beq.n	8005a82 <xTaskCreateStatic+0xaa>
 8005a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d01b      	beq.n	8005a82 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	9303      	str	r3, [sp, #12]
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	9302      	str	r3, [sp, #8]
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 f851 	bl	8005b1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a7c:	f000 f8e4 	bl	8005c48 <prvAddNewTaskToReadyList>
 8005a80:	e001      	b.n	8005a86 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a86:	697b      	ldr	r3, [r7, #20]
	}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3728      	adds	r7, #40	; 0x28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08c      	sub	sp, #48	; 0x30
 8005a94:	af04      	add	r7, sp, #16
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f001 f8a1 	bl	8006bec <pvPortMalloc>
 8005aaa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00e      	beq.n	8005ad0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005ab2:	20a4      	movs	r0, #164	; 0xa4
 8005ab4:	f001 f89a 	bl	8006bec <pvPortMalloc>
 8005ab8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8005ac6:	e005      	b.n	8005ad4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ac8:	6978      	ldr	r0, [r7, #20]
 8005aca:	f001 f953 	bl	8006d74 <vPortFree>
 8005ace:	e001      	b.n	8005ad4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d017      	beq.n	8005b0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ae2:	88fa      	ldrh	r2, [r7, #6]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	9303      	str	r3, [sp, #12]
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	9302      	str	r3, [sp, #8]
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f80f 	bl	8005b1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005afe:	69f8      	ldr	r0, [r7, #28]
 8005b00:	f000 f8a2 	bl	8005c48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b04:	2301      	movs	r3, #1
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	e002      	b.n	8005b10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b10:	69bb      	ldr	r3, [r7, #24]
	}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b34:	3b01      	subs	r3, #1
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	f023 0307 	bic.w	r3, r3, #7
 8005b42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	617b      	str	r3, [r7, #20]
}
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
 8005b68:	e012      	b.n	8005b90 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	4413      	add	r3, r2
 8005b70:	7819      	ldrb	r1, [r3, #0]
 8005b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	3334      	adds	r3, #52	; 0x34
 8005b7a:	460a      	mov	r2, r1
 8005b7c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d006      	beq.n	8005b98 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	2b13      	cmp	r3, #19
 8005b94:	d9e9      	bls.n	8005b6a <prvInitialiseNewTask+0x4e>
 8005b96:	e000      	b.n	8005b9a <prvInitialiseNewTask+0x7e>
		{
			break;
 8005b98:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	2b06      	cmp	r3, #6
 8005ba6:	d901      	bls.n	8005bac <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ba8:	2306      	movs	r3, #6
 8005baa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb6:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	2200      	movs	r2, #0
 8005bbc:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff fb1c 	bl	8005200 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	3318      	adds	r3, #24
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff fb17 	bl	8005200 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	f1c3 0207 	rsb	r2, r3, #7
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005be6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	3350      	adds	r3, #80	; 0x50
 8005bfc:	224c      	movs	r2, #76	; 0x4c
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f002 fa4d 	bl	80080a0 <memset>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	4a0c      	ldr	r2, [pc, #48]	; (8005c3c <prvInitialiseNewTask+0x120>)
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	4a0c      	ldr	r2, [pc, #48]	; (8005c40 <prvInitialiseNewTask+0x124>)
 8005c10:	659a      	str	r2, [r3, #88]	; 0x58
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	4a0b      	ldr	r2, [pc, #44]	; (8005c44 <prvInitialiseNewTask+0x128>)
 8005c16:	65da      	str	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	68f9      	ldr	r1, [r7, #12]
 8005c1c:	69b8      	ldr	r0, [r7, #24]
 8005c1e:	f000 fdf7 	bl	8006810 <pxPortInitialiseStack>
 8005c22:	4602      	mov	r2, r0
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c34:	bf00      	nop
 8005c36:	3720      	adds	r7, #32
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	20001780 	.word	0x20001780
 8005c40:	200017e8 	.word	0x200017e8
 8005c44:	20001850 	.word	0x20001850

08005c48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c50:	f000 fecc 	bl	80069ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c54:	4b2a      	ldr	r3, [pc, #168]	; (8005d00 <prvAddNewTaskToReadyList+0xb8>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	4a29      	ldr	r2, [pc, #164]	; (8005d00 <prvAddNewTaskToReadyList+0xb8>)
 8005c5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c5e:	4b29      	ldr	r3, [pc, #164]	; (8005d04 <prvAddNewTaskToReadyList+0xbc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c66:	4a27      	ldr	r2, [pc, #156]	; (8005d04 <prvAddNewTaskToReadyList+0xbc>)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c6c:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <prvAddNewTaskToReadyList+0xb8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d110      	bne.n	8005c96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c74:	f000 fbfc 	bl	8006470 <prvInitialiseTaskLists>
 8005c78:	e00d      	b.n	8005c96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c7a:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <prvAddNewTaskToReadyList+0xc0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d109      	bne.n	8005c96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c82:	4b20      	ldr	r3, [pc, #128]	; (8005d04 <prvAddNewTaskToReadyList+0xbc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d802      	bhi.n	8005c96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c90:	4a1c      	ldr	r2, [pc, #112]	; (8005d04 <prvAddNewTaskToReadyList+0xbc>)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c96:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <prvAddNewTaskToReadyList+0xc4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	4a1b      	ldr	r2, [pc, #108]	; (8005d0c <prvAddNewTaskToReadyList+0xc4>)
 8005c9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	409a      	lsls	r2, r3
 8005ca8:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <prvAddNewTaskToReadyList+0xc8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	4a18      	ldr	r2, [pc, #96]	; (8005d10 <prvAddNewTaskToReadyList+0xc8>)
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4a15      	ldr	r2, [pc, #84]	; (8005d14 <prvAddNewTaskToReadyList+0xcc>)
 8005cc0:	441a      	add	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4610      	mov	r0, r2
 8005cca:	f7ff faa5 	bl	8005218 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cce:	f000 febd 	bl	8006a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <prvAddNewTaskToReadyList+0xc0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00e      	beq.n	8005cf8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <prvAddNewTaskToReadyList+0xbc>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d207      	bcs.n	8005cf8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <prvAddNewTaskToReadyList+0xd0>)
 8005cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cf8:	bf00      	nop
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20000734 	.word	0x20000734
 8005d04:	20000634 	.word	0x20000634
 8005d08:	20000740 	.word	0x20000740
 8005d0c:	20000750 	.word	0x20000750
 8005d10:	2000073c 	.word	0x2000073c
 8005d14:	20000638 	.word	0x20000638
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d017      	beq.n	8005d5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <vTaskDelay+0x60>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <vTaskDelay+0x30>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	60bb      	str	r3, [r7, #8]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d4c:	f000 f884 	bl	8005e58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d50:	2100      	movs	r1, #0
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fcf6 	bl	8006744 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d58:	f000 f88c 	bl	8005e74 <xTaskResumeAll>
 8005d5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d107      	bne.n	8005d74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005d64:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <vTaskDelay+0x64>)
 8005d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	2000075c 	.word	0x2000075c
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	; 0x28
 8005d88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d92:	463a      	mov	r2, r7
 8005d94:	1d39      	adds	r1, r7, #4
 8005d96:	f107 0308 	add.w	r3, r7, #8
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fd f80a 	bl	8002db4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	9202      	str	r2, [sp, #8]
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	2300      	movs	r3, #0
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	2300      	movs	r3, #0
 8005db0:	460a      	mov	r2, r1
 8005db2:	4921      	ldr	r1, [pc, #132]	; (8005e38 <vTaskStartScheduler+0xb4>)
 8005db4:	4821      	ldr	r0, [pc, #132]	; (8005e3c <vTaskStartScheduler+0xb8>)
 8005db6:	f7ff fe0f 	bl	80059d8 <xTaskCreateStatic>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	4a20      	ldr	r2, [pc, #128]	; (8005e40 <vTaskStartScheduler+0xbc>)
 8005dbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005dc0:	4b1f      	ldr	r3, [pc, #124]	; (8005e40 <vTaskStartScheduler+0xbc>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	e001      	b.n	8005dd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d11b      	bne.n	8005e10 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	613b      	str	r3, [r7, #16]
}
 8005dea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005dec:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <vTaskStartScheduler+0xc0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3350      	adds	r3, #80	; 0x50
 8005df2:	4a15      	ldr	r2, [pc, #84]	; (8005e48 <vTaskStartScheduler+0xc4>)
 8005df4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005df6:	4b15      	ldr	r3, [pc, #84]	; (8005e4c <vTaskStartScheduler+0xc8>)
 8005df8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dfe:	4b14      	ldr	r3, [pc, #80]	; (8005e50 <vTaskStartScheduler+0xcc>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005e04:	4b13      	ldr	r3, [pc, #76]	; (8005e54 <vTaskStartScheduler+0xd0>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e0a:	f000 fd7d 	bl	8006908 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e0e:	e00e      	b.n	8005e2e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e16:	d10a      	bne.n	8005e2e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	60fb      	str	r3, [r7, #12]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <vTaskStartScheduler+0xa8>
}
 8005e2e:	bf00      	nop
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	0800c9c8 	.word	0x0800c9c8
 8005e3c:	08006441 	.word	0x08006441
 8005e40:	20000758 	.word	0x20000758
 8005e44:	20000634 	.word	0x20000634
 8005e48:	20000084 	.word	0x20000084
 8005e4c:	20000754 	.word	0x20000754
 8005e50:	20000740 	.word	0x20000740
 8005e54:	20000738 	.word	0x20000738

08005e58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e5c:	4b04      	ldr	r3, [pc, #16]	; (8005e70 <vTaskSuspendAll+0x18>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3301      	adds	r3, #1
 8005e62:	4a03      	ldr	r2, [pc, #12]	; (8005e70 <vTaskSuspendAll+0x18>)
 8005e64:	6013      	str	r3, [r2, #0]
}
 8005e66:	bf00      	nop
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	2000075c 	.word	0x2000075c

08005e74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e82:	4b41      	ldr	r3, [pc, #260]	; (8005f88 <xTaskResumeAll+0x114>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	603b      	str	r3, [r7, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ea0:	f000 fda4 	bl	80069ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ea4:	4b38      	ldr	r3, [pc, #224]	; (8005f88 <xTaskResumeAll+0x114>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	4a37      	ldr	r2, [pc, #220]	; (8005f88 <xTaskResumeAll+0x114>)
 8005eac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eae:	4b36      	ldr	r3, [pc, #216]	; (8005f88 <xTaskResumeAll+0x114>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d161      	bne.n	8005f7a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005eb6:	4b35      	ldr	r3, [pc, #212]	; (8005f8c <xTaskResumeAll+0x118>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d05d      	beq.n	8005f7a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ebe:	e02e      	b.n	8005f1e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005ec0:	4b33      	ldr	r3, [pc, #204]	; (8005f90 <xTaskResumeAll+0x11c>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3318      	adds	r3, #24
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff f9fe 	bl	80052ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff f9f9 	bl	80052ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	4b2b      	ldr	r3, [pc, #172]	; (8005f94 <xTaskResumeAll+0x120>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	4a2a      	ldr	r2, [pc, #168]	; (8005f94 <xTaskResumeAll+0x120>)
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4a27      	ldr	r2, [pc, #156]	; (8005f98 <xTaskResumeAll+0x124>)
 8005efc:	441a      	add	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f7ff f987 	bl	8005218 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0e:	4b23      	ldr	r3, [pc, #140]	; (8005f9c <xTaskResumeAll+0x128>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d302      	bcc.n	8005f1e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005f18:	4b21      	ldr	r3, [pc, #132]	; (8005fa0 <xTaskResumeAll+0x12c>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f1e:	4b1c      	ldr	r3, [pc, #112]	; (8005f90 <xTaskResumeAll+0x11c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1cc      	bne.n	8005ec0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f2c:	f000 fb42 	bl	80065b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005f30:	4b1c      	ldr	r3, [pc, #112]	; (8005fa4 <xTaskResumeAll+0x130>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d010      	beq.n	8005f5e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f3c:	f000 f856 	bl	8005fec <xTaskIncrementTick>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005f46:	4b16      	ldr	r3, [pc, #88]	; (8005fa0 <xTaskResumeAll+0x12c>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f1      	bne.n	8005f3c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005f58:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <xTaskResumeAll+0x130>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f5e:	4b10      	ldr	r3, [pc, #64]	; (8005fa0 <xTaskResumeAll+0x12c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d009      	beq.n	8005f7a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f66:	2301      	movs	r3, #1
 8005f68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f6a:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <xTaskResumeAll+0x134>)
 8005f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f7a:	f000 fd67 	bl	8006a4c <vPortExitCritical>

	return xAlreadyYielded;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	2000075c 	.word	0x2000075c
 8005f8c:	20000734 	.word	0x20000734
 8005f90:	200006f4 	.word	0x200006f4
 8005f94:	2000073c 	.word	0x2000073c
 8005f98:	20000638 	.word	0x20000638
 8005f9c:	20000634 	.word	0x20000634
 8005fa0:	20000748 	.word	0x20000748
 8005fa4:	20000744 	.word	0x20000744
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005fb2:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <xTaskGetTickCount+0x18>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fb8:	687b      	ldr	r3, [r7, #4]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr
 8005fc4:	20000738 	.word	0x20000738

08005fc8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fce:	f000 fdcf 	bl	8006b70 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005fd6:	4b04      	ldr	r3, [pc, #16]	; (8005fe8 <xTaskGetTickCountFromISR+0x20>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fdc:	683b      	ldr	r3, [r7, #0]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000738 	.word	0x20000738

08005fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ff6:	4b51      	ldr	r3, [pc, #324]	; (800613c <xTaskIncrementTick+0x150>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f040 808d 	bne.w	800611a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006000:	4b4f      	ldr	r3, [pc, #316]	; (8006140 <xTaskIncrementTick+0x154>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006008:	4a4d      	ldr	r2, [pc, #308]	; (8006140 <xTaskIncrementTick+0x154>)
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d120      	bne.n	8006056 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006014:	4b4b      	ldr	r3, [pc, #300]	; (8006144 <xTaskIncrementTick+0x158>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <xTaskIncrementTick+0x48>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	603b      	str	r3, [r7, #0]
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <xTaskIncrementTick+0x46>
 8006034:	4b43      	ldr	r3, [pc, #268]	; (8006144 <xTaskIncrementTick+0x158>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	4b43      	ldr	r3, [pc, #268]	; (8006148 <xTaskIncrementTick+0x15c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a41      	ldr	r2, [pc, #260]	; (8006144 <xTaskIncrementTick+0x158>)
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	4a41      	ldr	r2, [pc, #260]	; (8006148 <xTaskIncrementTick+0x15c>)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	4b40      	ldr	r3, [pc, #256]	; (800614c <xTaskIncrementTick+0x160>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3301      	adds	r3, #1
 800604e:	4a3f      	ldr	r2, [pc, #252]	; (800614c <xTaskIncrementTick+0x160>)
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	f000 faaf 	bl	80065b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006056:	4b3e      	ldr	r3, [pc, #248]	; (8006150 <xTaskIncrementTick+0x164>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	429a      	cmp	r2, r3
 800605e:	d34d      	bcc.n	80060fc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006060:	4b38      	ldr	r3, [pc, #224]	; (8006144 <xTaskIncrementTick+0x158>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <xTaskIncrementTick+0x82>
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <xTaskIncrementTick+0x84>
 800606e:	2300      	movs	r3, #0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d004      	beq.n	800607e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006074:	4b36      	ldr	r3, [pc, #216]	; (8006150 <xTaskIncrementTick+0x164>)
 8006076:	f04f 32ff 	mov.w	r2, #4294967295
 800607a:	601a      	str	r2, [r3, #0]
					break;
 800607c:	e03e      	b.n	80060fc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800607e:	4b31      	ldr	r3, [pc, #196]	; (8006144 <xTaskIncrementTick+0x158>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	429a      	cmp	r2, r3
 8006094:	d203      	bcs.n	800609e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006096:	4a2e      	ldr	r2, [pc, #184]	; (8006150 <xTaskIncrementTick+0x164>)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6013      	str	r3, [r2, #0]
						break;
 800609c:	e02e      	b.n	80060fc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	3304      	adds	r3, #4
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff f913 	bl	80052ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d004      	beq.n	80060ba <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	3318      	adds	r3, #24
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff f90a 	bl	80052ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060be:	2201      	movs	r2, #1
 80060c0:	409a      	lsls	r2, r3
 80060c2:	4b24      	ldr	r3, [pc, #144]	; (8006154 <xTaskIncrementTick+0x168>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	4a22      	ldr	r2, [pc, #136]	; (8006154 <xTaskIncrementTick+0x168>)
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4a1f      	ldr	r2, [pc, #124]	; (8006158 <xTaskIncrementTick+0x16c>)
 80060da:	441a      	add	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f7ff f898 	bl	8005218 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	4b1b      	ldr	r3, [pc, #108]	; (800615c <xTaskIncrementTick+0x170>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d3b4      	bcc.n	8006060 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80060f6:	2301      	movs	r3, #1
 80060f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060fa:	e7b1      	b.n	8006060 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060fc:	4b17      	ldr	r3, [pc, #92]	; (800615c <xTaskIncrementTick+0x170>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006102:	4915      	ldr	r1, [pc, #84]	; (8006158 <xTaskIncrementTick+0x16c>)
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d907      	bls.n	8006124 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006114:	2301      	movs	r3, #1
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	e004      	b.n	8006124 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800611a:	4b11      	ldr	r3, [pc, #68]	; (8006160 <xTaskIncrementTick+0x174>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	4a0f      	ldr	r2, [pc, #60]	; (8006160 <xTaskIncrementTick+0x174>)
 8006122:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006124:	4b0f      	ldr	r3, [pc, #60]	; (8006164 <xTaskIncrementTick+0x178>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800612c:	2301      	movs	r3, #1
 800612e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006130:	697b      	ldr	r3, [r7, #20]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	2000075c 	.word	0x2000075c
 8006140:	20000738 	.word	0x20000738
 8006144:	200006ec 	.word	0x200006ec
 8006148:	200006f0 	.word	0x200006f0
 800614c:	2000074c 	.word	0x2000074c
 8006150:	20000754 	.word	0x20000754
 8006154:	2000073c 	.word	0x2000073c
 8006158:	20000638 	.word	0x20000638
 800615c:	20000634 	.word	0x20000634
 8006160:	20000744 	.word	0x20000744
 8006164:	20000748 	.word	0x20000748

08006168 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800616e:	4b29      	ldr	r3, [pc, #164]	; (8006214 <vTaskSwitchContext+0xac>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006176:	4b28      	ldr	r3, [pc, #160]	; (8006218 <vTaskSwitchContext+0xb0>)
 8006178:	2201      	movs	r2, #1
 800617a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800617c:	e044      	b.n	8006208 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800617e:	4b26      	ldr	r3, [pc, #152]	; (8006218 <vTaskSwitchContext+0xb0>)
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006184:	4b25      	ldr	r3, [pc, #148]	; (800621c <vTaskSwitchContext+0xb4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	fab3 f383 	clz	r3, r3
 8006190:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006192:	7afb      	ldrb	r3, [r7, #11]
 8006194:	f1c3 031f 	rsb	r3, r3, #31
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	4921      	ldr	r1, [pc, #132]	; (8006220 <vTaskSwitchContext+0xb8>)
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	607b      	str	r3, [r7, #4]
}
 80061c0:	bf00      	nop
 80061c2:	e7fe      	b.n	80061c2 <vTaskSwitchContext+0x5a>
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4613      	mov	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4a14      	ldr	r2, [pc, #80]	; (8006220 <vTaskSwitchContext+0xb8>)
 80061d0:	4413      	add	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	605a      	str	r2, [r3, #4]
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	3308      	adds	r3, #8
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d104      	bne.n	80061f4 <vTaskSwitchContext+0x8c>
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	605a      	str	r2, [r3, #4]
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	4a0a      	ldr	r2, [pc, #40]	; (8006224 <vTaskSwitchContext+0xbc>)
 80061fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061fe:	4b09      	ldr	r3, [pc, #36]	; (8006224 <vTaskSwitchContext+0xbc>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3350      	adds	r3, #80	; 0x50
 8006204:	4a08      	ldr	r2, [pc, #32]	; (8006228 <vTaskSwitchContext+0xc0>)
 8006206:	6013      	str	r3, [r2, #0]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	bc80      	pop	{r7}
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	2000075c 	.word	0x2000075c
 8006218:	20000748 	.word	0x20000748
 800621c:	2000073c 	.word	0x2000073c
 8006220:	20000638 	.word	0x20000638
 8006224:	20000634 	.word	0x20000634
 8006228:	20000084 	.word	0x20000084

0800622c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	60fb      	str	r3, [r7, #12]
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006252:	4b07      	ldr	r3, [pc, #28]	; (8006270 <vTaskPlaceOnEventList+0x44>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3318      	adds	r3, #24
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fe ffff 	bl	800525e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006260:	2101      	movs	r1, #1
 8006262:	6838      	ldr	r0, [r7, #0]
 8006264:	f000 fa6e 	bl	8006744 <prvAddCurrentTaskToDelayedList>
}
 8006268:	bf00      	nop
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20000634 	.word	0x20000634

08006274 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10a      	bne.n	80062a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	60fb      	str	r3, [r7, #12]
}
 800629c:	bf00      	nop
 800629e:	e7fe      	b.n	800629e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	3318      	adds	r3, #24
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff f812 	bl	80052ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <xTaskRemoveFromEventList+0xac>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d11c      	bne.n	80062ec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff f809 	bl	80052ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	2201      	movs	r2, #1
 80062c2:	409a      	lsls	r2, r3
 80062c4:	4b17      	ldr	r3, [pc, #92]	; (8006324 <xTaskRemoveFromEventList+0xb0>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	4a16      	ldr	r2, [pc, #88]	; (8006324 <xTaskRemoveFromEventList+0xb0>)
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4a13      	ldr	r2, [pc, #76]	; (8006328 <xTaskRemoveFromEventList+0xb4>)
 80062dc:	441a      	add	r2, r3
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	3304      	adds	r3, #4
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f7fe ff97 	bl	8005218 <vListInsertEnd>
 80062ea:	e005      	b.n	80062f8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	3318      	adds	r3, #24
 80062f0:	4619      	mov	r1, r3
 80062f2:	480e      	ldr	r0, [pc, #56]	; (800632c <xTaskRemoveFromEventList+0xb8>)
 80062f4:	f7fe ff90 	bl	8005218 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <xTaskRemoveFromEventList+0xbc>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	429a      	cmp	r2, r3
 8006304:	d905      	bls.n	8006312 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006306:	2301      	movs	r3, #1
 8006308:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800630a:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <xTaskRemoveFromEventList+0xc0>)
 800630c:	2201      	movs	r2, #1
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	e001      	b.n	8006316 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006312:	2300      	movs	r3, #0
 8006314:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006316:	697b      	ldr	r3, [r7, #20]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	2000075c 	.word	0x2000075c
 8006324:	2000073c 	.word	0x2000073c
 8006328:	20000638 	.word	0x20000638
 800632c:	200006f4 	.word	0x200006f4
 8006330:	20000634 	.word	0x20000634
 8006334:	20000748 	.word	0x20000748

08006338 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006340:	4b06      	ldr	r3, [pc, #24]	; (800635c <vTaskInternalSetTimeOutState+0x24>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006348:	4b05      	ldr	r3, [pc, #20]	; (8006360 <vTaskInternalSetTimeOutState+0x28>)
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	605a      	str	r2, [r3, #4]
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	2000074c 	.word	0x2000074c
 8006360:	20000738 	.word	0x20000738

08006364 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	613b      	str	r3, [r7, #16]
}
 8006386:	bf00      	nop
 8006388:	e7fe      	b.n	8006388 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	60fb      	str	r3, [r7, #12]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80063a6:	f000 fb21 	bl	80069ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063aa:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <xTaskCheckForTimeOut+0xbc>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d102      	bne.n	80063ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61fb      	str	r3, [r7, #28]
 80063c8:	e023      	b.n	8006412 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b15      	ldr	r3, [pc, #84]	; (8006424 <xTaskCheckForTimeOut+0xc0>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d007      	beq.n	80063e6 <xTaskCheckForTimeOut+0x82>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d302      	bcc.n	80063e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063e0:	2301      	movs	r3, #1
 80063e2:	61fb      	str	r3, [r7, #28]
 80063e4:	e015      	b.n	8006412 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d20b      	bcs.n	8006408 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	1ad2      	subs	r2, r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff ff9b 	bl	8006338 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	e004      	b.n	8006412 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800640e:	2301      	movs	r3, #1
 8006410:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006412:	f000 fb1b 	bl	8006a4c <vPortExitCritical>

	return xReturn;
 8006416:	69fb      	ldr	r3, [r7, #28]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3720      	adds	r7, #32
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20000738 	.word	0x20000738
 8006424:	2000074c 	.word	0x2000074c

08006428 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800642c:	4b03      	ldr	r3, [pc, #12]	; (800643c <vTaskMissedYield+0x14>)
 800642e:	2201      	movs	r2, #1
 8006430:	601a      	str	r2, [r3, #0]
}
 8006432:	bf00      	nop
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20000748 	.word	0x20000748

08006440 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006448:	f000 f852 	bl	80064f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800644c:	4b06      	ldr	r3, [pc, #24]	; (8006468 <prvIdleTask+0x28>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d9f9      	bls.n	8006448 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006454:	4b05      	ldr	r3, [pc, #20]	; (800646c <prvIdleTask+0x2c>)
 8006456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006464:	e7f0      	b.n	8006448 <prvIdleTask+0x8>
 8006466:	bf00      	nop
 8006468:	20000638 	.word	0x20000638
 800646c:	e000ed04 	.word	0xe000ed04

08006470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006476:	2300      	movs	r3, #0
 8006478:	607b      	str	r3, [r7, #4]
 800647a:	e00c      	b.n	8006496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4a12      	ldr	r2, [pc, #72]	; (80064d0 <prvInitialiseTaskLists+0x60>)
 8006488:	4413      	add	r3, r2
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe fe99 	bl	80051c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3301      	adds	r3, #1
 8006494:	607b      	str	r3, [r7, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b06      	cmp	r3, #6
 800649a:	d9ef      	bls.n	800647c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800649c:	480d      	ldr	r0, [pc, #52]	; (80064d4 <prvInitialiseTaskLists+0x64>)
 800649e:	f7fe fe90 	bl	80051c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064a2:	480d      	ldr	r0, [pc, #52]	; (80064d8 <prvInitialiseTaskLists+0x68>)
 80064a4:	f7fe fe8d 	bl	80051c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064a8:	480c      	ldr	r0, [pc, #48]	; (80064dc <prvInitialiseTaskLists+0x6c>)
 80064aa:	f7fe fe8a 	bl	80051c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064ae:	480c      	ldr	r0, [pc, #48]	; (80064e0 <prvInitialiseTaskLists+0x70>)
 80064b0:	f7fe fe87 	bl	80051c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064b4:	480b      	ldr	r0, [pc, #44]	; (80064e4 <prvInitialiseTaskLists+0x74>)
 80064b6:	f7fe fe84 	bl	80051c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064ba:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <prvInitialiseTaskLists+0x78>)
 80064bc:	4a05      	ldr	r2, [pc, #20]	; (80064d4 <prvInitialiseTaskLists+0x64>)
 80064be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064c0:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <prvInitialiseTaskLists+0x7c>)
 80064c2:	4a05      	ldr	r2, [pc, #20]	; (80064d8 <prvInitialiseTaskLists+0x68>)
 80064c4:	601a      	str	r2, [r3, #0]
}
 80064c6:	bf00      	nop
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20000638 	.word	0x20000638
 80064d4:	200006c4 	.word	0x200006c4
 80064d8:	200006d8 	.word	0x200006d8
 80064dc:	200006f4 	.word	0x200006f4
 80064e0:	20000708 	.word	0x20000708
 80064e4:	20000720 	.word	0x20000720
 80064e8:	200006ec 	.word	0x200006ec
 80064ec:	200006f0 	.word	0x200006f0

080064f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064f6:	e019      	b.n	800652c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064f8:	f000 fa78 	bl	80069ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80064fc:	4b10      	ldr	r3, [pc, #64]	; (8006540 <prvCheckTasksWaitingTermination+0x50>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3304      	adds	r3, #4
 8006508:	4618      	mov	r0, r3
 800650a:	f7fe fee0 	bl	80052ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800650e:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <prvCheckTasksWaitingTermination+0x54>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3b01      	subs	r3, #1
 8006514:	4a0b      	ldr	r2, [pc, #44]	; (8006544 <prvCheckTasksWaitingTermination+0x54>)
 8006516:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006518:	4b0b      	ldr	r3, [pc, #44]	; (8006548 <prvCheckTasksWaitingTermination+0x58>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3b01      	subs	r3, #1
 800651e:	4a0a      	ldr	r2, [pc, #40]	; (8006548 <prvCheckTasksWaitingTermination+0x58>)
 8006520:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006522:	f000 fa93 	bl	8006a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f810 	bl	800654c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800652c:	4b06      	ldr	r3, [pc, #24]	; (8006548 <prvCheckTasksWaitingTermination+0x58>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e1      	bne.n	80064f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20000708 	.word	0x20000708
 8006544:	20000734 	.word	0x20000734
 8006548:	2000071c 	.word	0x2000071c

0800654c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3350      	adds	r3, #80	; 0x50
 8006558:	4618      	mov	r0, r3
 800655a:	f001 fdbd 	bl	80080d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d108      	bne.n	800657a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fc01 	bl	8006d74 <vPortFree>
				vPortFree( pxTCB );
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fbfe 	bl	8006d74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006578:	e018      	b.n	80065ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006580:	2b01      	cmp	r3, #1
 8006582:	d103      	bne.n	800658c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fbf5 	bl	8006d74 <vPortFree>
	}
 800658a:	e00f      	b.n	80065ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006592:	2b02      	cmp	r3, #2
 8006594:	d00a      	beq.n	80065ac <prvDeleteTCB+0x60>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60fb      	str	r3, [r7, #12]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <prvDeleteTCB+0x5e>
	}
 80065ac:	bf00      	nop
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ba:	4b0e      	ldr	r3, [pc, #56]	; (80065f4 <prvResetNextTaskUnblockTime+0x40>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <prvResetNextTaskUnblockTime+0x14>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e000      	b.n	80065ca <prvResetNextTaskUnblockTime+0x16>
 80065c8:	2300      	movs	r3, #0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d004      	beq.n	80065d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065ce:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <prvResetNextTaskUnblockTime+0x44>)
 80065d0:	f04f 32ff 	mov.w	r2, #4294967295
 80065d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065d6:	e008      	b.n	80065ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065d8:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <prvResetNextTaskUnblockTime+0x40>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	4a04      	ldr	r2, [pc, #16]	; (80065f8 <prvResetNextTaskUnblockTime+0x44>)
 80065e8:	6013      	str	r3, [r2, #0]
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr
 80065f4:	200006ec 	.word	0x200006ec
 80065f8:	20000754 	.word	0x20000754

080065fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <xTaskGetSchedulerState+0x34>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d102      	bne.n	8006610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800660a:	2301      	movs	r3, #1
 800660c:	607b      	str	r3, [r7, #4]
 800660e:	e008      	b.n	8006622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006610:	4b08      	ldr	r3, [pc, #32]	; (8006634 <xTaskGetSchedulerState+0x38>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006618:	2302      	movs	r3, #2
 800661a:	607b      	str	r3, [r7, #4]
 800661c:	e001      	b.n	8006622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800661e:	2300      	movs	r3, #0
 8006620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006622:	687b      	ldr	r3, [r7, #4]
	}
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	bc80      	pop	{r7}
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	20000740 	.word	0x20000740
 8006634:	2000075c 	.word	0x2000075c

08006638 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006644:	2300      	movs	r3, #0
 8006646:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d06e      	beq.n	800672c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800664e:	4b3a      	ldr	r3, [pc, #232]	; (8006738 <xTaskPriorityDisinherit+0x100>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	429a      	cmp	r2, r3
 8006656:	d00a      	beq.n	800666e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	60fb      	str	r3, [r7, #12]
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	60bb      	str	r3, [r7, #8]
}
 8006688:	bf00      	nop
 800668a:	e7fe      	b.n	800668a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006690:	1e5a      	subs	r2, r3, #1
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669e:	429a      	cmp	r2, r3
 80066a0:	d044      	beq.n	800672c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d140      	bne.n	800672c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	3304      	adds	r3, #4
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe fe0d 	bl	80052ce <uxListRemove>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d115      	bne.n	80066e6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066be:	491f      	ldr	r1, [pc, #124]	; (800673c <xTaskPriorityDisinherit+0x104>)
 80066c0:	4613      	mov	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <xTaskPriorityDisinherit+0xae>
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	2201      	movs	r2, #1
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	43da      	mvns	r2, r3
 80066dc:	4b18      	ldr	r3, [pc, #96]	; (8006740 <xTaskPriorityDisinherit+0x108>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4013      	ands	r3, r2
 80066e2:	4a17      	ldr	r2, [pc, #92]	; (8006740 <xTaskPriorityDisinherit+0x108>)
 80066e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	f1c3 0207 	rsb	r2, r3, #7
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	2201      	movs	r2, #1
 8006700:	409a      	lsls	r2, r3
 8006702:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <xTaskPriorityDisinherit+0x108>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	4a0d      	ldr	r2, [pc, #52]	; (8006740 <xTaskPriorityDisinherit+0x108>)
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4a08      	ldr	r2, [pc, #32]	; (800673c <xTaskPriorityDisinherit+0x104>)
 800671a:	441a      	add	r2, r3
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f7fe fd78 	bl	8005218 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006728:	2301      	movs	r3, #1
 800672a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800672c:	697b      	ldr	r3, [r7, #20]
	}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000634 	.word	0x20000634
 800673c:	20000638 	.word	0x20000638
 8006740:	2000073c 	.word	0x2000073c

08006744 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800674e:	4b29      	ldr	r3, [pc, #164]	; (80067f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006754:	4b28      	ldr	r3, [pc, #160]	; (80067f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3304      	adds	r3, #4
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe fdb7 	bl	80052ce <uxListRemove>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10b      	bne.n	800677e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006766:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	2201      	movs	r2, #1
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	43da      	mvns	r2, r3
 8006774:	4b21      	ldr	r3, [pc, #132]	; (80067fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4013      	ands	r3, r2
 800677a:	4a20      	ldr	r2, [pc, #128]	; (80067fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800677c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d10a      	bne.n	800679c <prvAddCurrentTaskToDelayedList+0x58>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800678c:	4b1a      	ldr	r3, [pc, #104]	; (80067f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3304      	adds	r3, #4
 8006792:	4619      	mov	r1, r3
 8006794:	481a      	ldr	r0, [pc, #104]	; (8006800 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006796:	f7fe fd3f 	bl	8005218 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800679a:	e026      	b.n	80067ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4413      	add	r3, r2
 80067a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067a4:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d209      	bcs.n	80067c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067b4:	4b13      	ldr	r3, [pc, #76]	; (8006804 <prvAddCurrentTaskToDelayedList+0xc0>)
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3304      	adds	r3, #4
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f7fe fd4c 	bl	800525e <vListInsert>
}
 80067c6:	e010      	b.n	80067ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067c8:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <prvAddCurrentTaskToDelayedList+0xc4>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3304      	adds	r3, #4
 80067d2:	4619      	mov	r1, r3
 80067d4:	4610      	mov	r0, r2
 80067d6:	f7fe fd42 	bl	800525e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067da:	4b0c      	ldr	r3, [pc, #48]	; (800680c <prvAddCurrentTaskToDelayedList+0xc8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d202      	bcs.n	80067ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80067e4:	4a09      	ldr	r2, [pc, #36]	; (800680c <prvAddCurrentTaskToDelayedList+0xc8>)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	6013      	str	r3, [r2, #0]
}
 80067ea:	bf00      	nop
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000738 	.word	0x20000738
 80067f8:	20000634 	.word	0x20000634
 80067fc:	2000073c 	.word	0x2000073c
 8006800:	20000720 	.word	0x20000720
 8006804:	200006f0 	.word	0x200006f0
 8006808:	200006ec 	.word	0x200006ec
 800680c:	20000754 	.word	0x20000754

08006810 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3b04      	subs	r3, #4
 8006820:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3b04      	subs	r3, #4
 800682e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f023 0201 	bic.w	r2, r3, #1
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3b04      	subs	r3, #4
 800683e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006840:	4a08      	ldr	r2, [pc, #32]	; (8006864 <pxPortInitialiseStack+0x54>)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3b14      	subs	r3, #20
 800684a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3b20      	subs	r3, #32
 8006856:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006858:	68fb      	ldr	r3, [r7, #12]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr
 8006864:	08006869 	.word	0x08006869

08006868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800686e:	2300      	movs	r3, #0
 8006870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006872:	4b12      	ldr	r3, [pc, #72]	; (80068bc <prvTaskExitError+0x54>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687a:	d00a      	beq.n	8006892 <prvTaskExitError+0x2a>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	60fb      	str	r3, [r7, #12]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <prvTaskExitError+0x28>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	60bb      	str	r3, [r7, #8]
}
 80068a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068a6:	bf00      	nop
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0fc      	beq.n	80068a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc80      	pop	{r7}
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	20000028 	.word	0x20000028

080068c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <pxCurrentTCBConst2>)
 80068c2:	6819      	ldr	r1, [r3, #0]
 80068c4:	6808      	ldr	r0, [r1, #0]
 80068c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068ca:	f380 8809 	msr	PSP, r0
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f04f 0000 	mov.w	r0, #0
 80068d6:	f380 8811 	msr	BASEPRI, r0
 80068da:	f04e 0e0d 	orr.w	lr, lr, #13
 80068de:	4770      	bx	lr

080068e0 <pxCurrentTCBConst2>:
 80068e0:	20000634 	.word	0x20000634
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop

080068e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80068e8:	4806      	ldr	r0, [pc, #24]	; (8006904 <prvPortStartFirstTask+0x1c>)
 80068ea:	6800      	ldr	r0, [r0, #0]
 80068ec:	6800      	ldr	r0, [r0, #0]
 80068ee:	f380 8808 	msr	MSP, r0
 80068f2:	b662      	cpsie	i
 80068f4:	b661      	cpsie	f
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	df00      	svc	0
 8006900:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006902:	bf00      	nop
 8006904:	e000ed08 	.word	0xe000ed08

08006908 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800690e:	4b32      	ldr	r3, [pc, #200]	; (80069d8 <xPortStartScheduler+0xd0>)
 8006910:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	b2db      	uxtb	r3, r3
 8006918:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	22ff      	movs	r2, #255	; 0xff
 800691e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	b2db      	uxtb	r3, r3
 800692c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006930:	b2da      	uxtb	r2, r3
 8006932:	4b2a      	ldr	r3, [pc, #168]	; (80069dc <xPortStartScheduler+0xd4>)
 8006934:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006936:	4b2a      	ldr	r3, [pc, #168]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006938:	2207      	movs	r2, #7
 800693a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800693c:	e009      	b.n	8006952 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800693e:	4b28      	ldr	r3, [pc, #160]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3b01      	subs	r3, #1
 8006944:	4a26      	ldr	r2, [pc, #152]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006946:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	b2db      	uxtb	r3, r3
 8006950:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695a:	2b80      	cmp	r3, #128	; 0x80
 800695c:	d0ef      	beq.n	800693e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800695e:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f1c3 0307 	rsb	r3, r3, #7
 8006966:	2b04      	cmp	r3, #4
 8006968:	d00a      	beq.n	8006980 <xPortStartScheduler+0x78>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	60bb      	str	r3, [r7, #8]
}
 800697c:	bf00      	nop
 800697e:	e7fe      	b.n	800697e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006980:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006988:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800698a:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <xPortStartScheduler+0xd8>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006992:	4a13      	ldr	r2, [pc, #76]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006994:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	b2da      	uxtb	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800699e:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <xPortStartScheduler+0xdc>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a10      	ldr	r2, [pc, #64]	; (80069e4 <xPortStartScheduler+0xdc>)
 80069a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069aa:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <xPortStartScheduler+0xdc>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a0d      	ldr	r2, [pc, #52]	; (80069e4 <xPortStartScheduler+0xdc>)
 80069b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069b6:	f000 f8b9 	bl	8006b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069ba:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <xPortStartScheduler+0xe0>)
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069c0:	f7ff ff92 	bl	80068e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069c4:	f7ff fbd0 	bl	8006168 <vTaskSwitchContext>
	prvTaskExitError();
 80069c8:	f7ff ff4e 	bl	8006868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	e000e400 	.word	0xe000e400
 80069dc:	20000760 	.word	0x20000760
 80069e0:	20000764 	.word	0x20000764
 80069e4:	e000ed20 	.word	0xe000ed20
 80069e8:	20000028 	.word	0x20000028

080069ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	607b      	str	r3, [r7, #4]
}
 8006a04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a06:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <vPortEnterCritical+0x58>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	4a0d      	ldr	r2, [pc, #52]	; (8006a44 <vPortEnterCritical+0x58>)
 8006a0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a10:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <vPortEnterCritical+0x58>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d10f      	bne.n	8006a38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a18:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <vPortEnterCritical+0x5c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	603b      	str	r3, [r7, #0]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <vPortEnterCritical+0x4a>
	}
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bc80      	pop	{r7}
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20000028 	.word	0x20000028
 8006a48:	e000ed04 	.word	0xe000ed04

08006a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a52:	4b11      	ldr	r3, [pc, #68]	; (8006a98 <vPortExitCritical+0x4c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10a      	bne.n	8006a70 <vPortExitCritical+0x24>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	607b      	str	r3, [r7, #4]
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a70:	4b09      	ldr	r3, [pc, #36]	; (8006a98 <vPortExitCritical+0x4c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	4a08      	ldr	r2, [pc, #32]	; (8006a98 <vPortExitCritical+0x4c>)
 8006a78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a7a:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <vPortExitCritical+0x4c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d105      	bne.n	8006a8e <vPortExitCritical+0x42>
 8006a82:	2300      	movs	r3, #0
 8006a84:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr
 8006a98:	20000028 	.word	0x20000028
 8006a9c:	00000000 	.word	0x00000000

08006aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006aa0:	f3ef 8009 	mrs	r0, PSP
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4b0d      	ldr	r3, [pc, #52]	; (8006ae0 <pxCurrentTCBConst>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ab0:	6010      	str	r0, [r2, #0]
 8006ab2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006ab6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006aba:	f380 8811 	msr	BASEPRI, r0
 8006abe:	f7ff fb53 	bl	8006168 <vTaskSwitchContext>
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f380 8811 	msr	BASEPRI, r0
 8006aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006ace:	6819      	ldr	r1, [r3, #0]
 8006ad0:	6808      	ldr	r0, [r1, #0]
 8006ad2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ad6:	f380 8809 	msr	PSP, r0
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	4770      	bx	lr

08006ae0 <pxCurrentTCBConst>:
 8006ae0:	20000634 	.word	0x20000634
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop

08006ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	607b      	str	r3, [r7, #4]
}
 8006b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b02:	f7ff fa73 	bl	8005fec <xTaskIncrementTick>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b0c:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <SysTick_Handler+0x40>)
 8006b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	2300      	movs	r3, #0
 8006b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f383 8811 	msr	BASEPRI, r3
}
 8006b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b30:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <vPortSetupTimerInterrupt+0x30>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b36:	4b0a      	ldr	r3, [pc, #40]	; (8006b60 <vPortSetupTimerInterrupt+0x34>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b3c:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <vPortSetupTimerInterrupt+0x38>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <vPortSetupTimerInterrupt+0x3c>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	099b      	lsrs	r3, r3, #6
 8006b48:	4a08      	ldr	r2, [pc, #32]	; (8006b6c <vPortSetupTimerInterrupt+0x40>)
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b4e:	4b03      	ldr	r3, [pc, #12]	; (8006b5c <vPortSetupTimerInterrupt+0x30>)
 8006b50:	2207      	movs	r2, #7
 8006b52:	601a      	str	r2, [r3, #0]
}
 8006b54:	bf00      	nop
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	e000e010 	.word	0xe000e010
 8006b60:	e000e018 	.word	0xe000e018
 8006b64:	2000001c 	.word	0x2000001c
 8006b68:	10624dd3 	.word	0x10624dd3
 8006b6c:	e000e014 	.word	0xe000e014

08006b70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b76:	f3ef 8305 	mrs	r3, IPSR
 8006b7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b0f      	cmp	r3, #15
 8006b80:	d914      	bls.n	8006bac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b82:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <vPortValidateInterruptPriority+0x6c>)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b8c:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <vPortValidateInterruptPriority+0x70>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	7afa      	ldrb	r2, [r7, #11]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d20a      	bcs.n	8006bac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	607b      	str	r3, [r7, #4]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bac:	4b0d      	ldr	r3, [pc, #52]	; (8006be4 <vPortValidateInterruptPriority+0x74>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <vPortValidateInterruptPriority+0x78>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d90a      	bls.n	8006bd2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	603b      	str	r3, [r7, #0]
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <vPortValidateInterruptPriority+0x60>
	}
 8006bd2:	bf00      	nop
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc80      	pop	{r7}
 8006bda:	4770      	bx	lr
 8006bdc:	e000e3f0 	.word	0xe000e3f0
 8006be0:	20000760 	.word	0x20000760
 8006be4:	e000ed0c 	.word	0xe000ed0c
 8006be8:	20000764 	.word	0x20000764

08006bec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08a      	sub	sp, #40	; 0x28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bf8:	f7ff f92e 	bl	8005e58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bfc:	4b58      	ldr	r3, [pc, #352]	; (8006d60 <pvPortMalloc+0x174>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c04:	f000 f910 	bl	8006e28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c08:	4b56      	ldr	r3, [pc, #344]	; (8006d64 <pvPortMalloc+0x178>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 808e 	bne.w	8006d32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01d      	beq.n	8006c58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4413      	add	r3, r2
 8006c22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d014      	beq.n	8006c58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f023 0307 	bic.w	r3, r3, #7
 8006c34:	3308      	adds	r3, #8
 8006c36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <pvPortMalloc+0x6c>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	617b      	str	r3, [r7, #20]
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d069      	beq.n	8006d32 <pvPortMalloc+0x146>
 8006c5e:	4b42      	ldr	r3, [pc, #264]	; (8006d68 <pvPortMalloc+0x17c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d864      	bhi.n	8006d32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c68:	4b40      	ldr	r3, [pc, #256]	; (8006d6c <pvPortMalloc+0x180>)
 8006c6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c6c:	4b3f      	ldr	r3, [pc, #252]	; (8006d6c <pvPortMalloc+0x180>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c72:	e004      	b.n	8006c7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d903      	bls.n	8006c90 <pvPortMalloc+0xa4>
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1f1      	bne.n	8006c74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c90:	4b33      	ldr	r3, [pc, #204]	; (8006d60 <pvPortMalloc+0x174>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d04b      	beq.n	8006d32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2208      	movs	r2, #8
 8006ca0:	4413      	add	r3, r2
 8006ca2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	1ad2      	subs	r2, r2, r3
 8006cb4:	2308      	movs	r3, #8
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d91f      	bls.n	8006cfc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <pvPortMalloc+0xf8>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	613b      	str	r3, [r7, #16]
}
 8006ce0:	bf00      	nop
 8006ce2:	e7fe      	b.n	8006ce2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	1ad2      	subs	r2, r2, r3
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cf6:	69b8      	ldr	r0, [r7, #24]
 8006cf8:	f000 f8f8 	bl	8006eec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cfc:	4b1a      	ldr	r3, [pc, #104]	; (8006d68 <pvPortMalloc+0x17c>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <pvPortMalloc+0x17c>)
 8006d08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d0a:	4b17      	ldr	r3, [pc, #92]	; (8006d68 <pvPortMalloc+0x17c>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4b18      	ldr	r3, [pc, #96]	; (8006d70 <pvPortMalloc+0x184>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d203      	bcs.n	8006d1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d16:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <pvPortMalloc+0x17c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a15      	ldr	r2, [pc, #84]	; (8006d70 <pvPortMalloc+0x184>)
 8006d1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	4b10      	ldr	r3, [pc, #64]	; (8006d64 <pvPortMalloc+0x178>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	2200      	movs	r2, #0
 8006d30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d32:	f7ff f89f 	bl	8005e74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <pvPortMalloc+0x16a>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	60fb      	str	r3, [r7, #12]
}
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <pvPortMalloc+0x168>
	return pvReturn;
 8006d56:	69fb      	ldr	r3, [r7, #28]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3728      	adds	r7, #40	; 0x28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20001770 	.word	0x20001770
 8006d64:	2000177c 	.word	0x2000177c
 8006d68:	20001774 	.word	0x20001774
 8006d6c:	20001768 	.word	0x20001768
 8006d70:	20001778 	.word	0x20001778

08006d74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d048      	beq.n	8006e18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d86:	2308      	movs	r3, #8
 8006d88:	425b      	negs	r3, r3
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	4b21      	ldr	r3, [pc, #132]	; (8006e20 <vPortFree+0xac>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10a      	bne.n	8006db8 <vPortFree+0x44>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	60fb      	str	r3, [r7, #12]
}
 8006db4:	bf00      	nop
 8006db6:	e7fe      	b.n	8006db6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <vPortFree+0x62>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	60bb      	str	r3, [r7, #8]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	4b11      	ldr	r3, [pc, #68]	; (8006e20 <vPortFree+0xac>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4013      	ands	r3, r2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d019      	beq.n	8006e18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d115      	bne.n	8006e18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <vPortFree+0xac>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	43db      	mvns	r3, r3
 8006df6:	401a      	ands	r2, r3
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006dfc:	f7ff f82c 	bl	8005e58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	4b07      	ldr	r3, [pc, #28]	; (8006e24 <vPortFree+0xb0>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4413      	add	r3, r2
 8006e0a:	4a06      	ldr	r2, [pc, #24]	; (8006e24 <vPortFree+0xb0>)
 8006e0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e0e:	6938      	ldr	r0, [r7, #16]
 8006e10:	f000 f86c 	bl	8006eec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e14:	f7ff f82e 	bl	8005e74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e18:	bf00      	nop
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	2000177c 	.word	0x2000177c
 8006e24:	20001774 	.word	0x20001774

08006e28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e34:	4b27      	ldr	r3, [pc, #156]	; (8006ed4 <prvHeapInit+0xac>)
 8006e36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00c      	beq.n	8006e5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3307      	adds	r3, #7
 8006e46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0307 	bic.w	r3, r3, #7
 8006e4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	4a1f      	ldr	r2, [pc, #124]	; (8006ed4 <prvHeapInit+0xac>)
 8006e58:	4413      	add	r3, r2
 8006e5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e60:	4a1d      	ldr	r2, [pc, #116]	; (8006ed8 <prvHeapInit+0xb0>)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e66:	4b1c      	ldr	r3, [pc, #112]	; (8006ed8 <prvHeapInit+0xb0>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	4413      	add	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e74:	2208      	movs	r2, #8
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	1a9b      	subs	r3, r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0307 	bic.w	r3, r3, #7
 8006e82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4a15      	ldr	r2, [pc, #84]	; (8006edc <prvHeapInit+0xb4>)
 8006e88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e8a:	4b14      	ldr	r3, [pc, #80]	; (8006edc <prvHeapInit+0xb4>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e92:	4b12      	ldr	r3, [pc, #72]	; (8006edc <prvHeapInit+0xb4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2200      	movs	r2, #0
 8006e98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	1ad2      	subs	r2, r2, r3
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <prvHeapInit+0xb4>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	4a0a      	ldr	r2, [pc, #40]	; (8006ee0 <prvHeapInit+0xb8>)
 8006eb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	4a09      	ldr	r2, [pc, #36]	; (8006ee4 <prvHeapInit+0xbc>)
 8006ebe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ec0:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <prvHeapInit+0xc0>)
 8006ec2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ec6:	601a      	str	r2, [r3, #0]
}
 8006ec8:	bf00      	nop
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bc80      	pop	{r7}
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	20000768 	.word	0x20000768
 8006ed8:	20001768 	.word	0x20001768
 8006edc:	20001770 	.word	0x20001770
 8006ee0:	20001778 	.word	0x20001778
 8006ee4:	20001774 	.word	0x20001774
 8006ee8:	2000177c 	.word	0x2000177c

08006eec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ef4:	4b27      	ldr	r3, [pc, #156]	; (8006f94 <prvInsertBlockIntoFreeList+0xa8>)
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	e002      	b.n	8006f00 <prvInsertBlockIntoFreeList+0x14>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d8f7      	bhi.n	8006efa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	4413      	add	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d108      	bne.n	8006f2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	441a      	add	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	441a      	add	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d118      	bne.n	8006f74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <prvInsertBlockIntoFreeList+0xac>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d00d      	beq.n	8006f6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	441a      	add	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	e008      	b.n	8006f7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <prvInsertBlockIntoFreeList+0xac>)
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	e003      	b.n	8006f7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d002      	beq.n	8006f8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f8a:	bf00      	nop
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr
 8006f94:	20001768 	.word	0x20001768
 8006f98:	20001770 	.word	0x20001770

08006f9c <__cvt>:
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa2:	461f      	mov	r7, r3
 8006fa4:	bfbb      	ittet	lt
 8006fa6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006faa:	461f      	movlt	r7, r3
 8006fac:	2300      	movge	r3, #0
 8006fae:	232d      	movlt	r3, #45	; 0x2d
 8006fb0:	b088      	sub	sp, #32
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fb6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006fb8:	7013      	strb	r3, [r2, #0]
 8006fba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fbc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006fc0:	f023 0820 	bic.w	r8, r3, #32
 8006fc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fc8:	d005      	beq.n	8006fd6 <__cvt+0x3a>
 8006fca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006fce:	d100      	bne.n	8006fd2 <__cvt+0x36>
 8006fd0:	3501      	adds	r5, #1
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	e000      	b.n	8006fd8 <__cvt+0x3c>
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	aa07      	add	r2, sp, #28
 8006fda:	9204      	str	r2, [sp, #16]
 8006fdc:	aa06      	add	r2, sp, #24
 8006fde:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006fe2:	e9cd 3500 	strd	r3, r5, [sp]
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	463b      	mov	r3, r7
 8006fea:	f001 f9d9 	bl	80083a0 <_dtoa_r>
 8006fee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	d102      	bne.n	8006ffc <__cvt+0x60>
 8006ff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ff8:	07db      	lsls	r3, r3, #31
 8006ffa:	d522      	bpl.n	8007042 <__cvt+0xa6>
 8006ffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007000:	eb06 0905 	add.w	r9, r6, r5
 8007004:	d110      	bne.n	8007028 <__cvt+0x8c>
 8007006:	7833      	ldrb	r3, [r6, #0]
 8007008:	2b30      	cmp	r3, #48	; 0x30
 800700a:	d10a      	bne.n	8007022 <__cvt+0x86>
 800700c:	2200      	movs	r2, #0
 800700e:	2300      	movs	r3, #0
 8007010:	4620      	mov	r0, r4
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 fcc8 	bl	80009a8 <__aeabi_dcmpeq>
 8007018:	b918      	cbnz	r0, 8007022 <__cvt+0x86>
 800701a:	f1c5 0501 	rsb	r5, r5, #1
 800701e:	f8ca 5000 	str.w	r5, [sl]
 8007022:	f8da 3000 	ldr.w	r3, [sl]
 8007026:	4499      	add	r9, r3
 8007028:	2200      	movs	r2, #0
 800702a:	2300      	movs	r3, #0
 800702c:	4620      	mov	r0, r4
 800702e:	4639      	mov	r1, r7
 8007030:	f7f9 fcba 	bl	80009a8 <__aeabi_dcmpeq>
 8007034:	b108      	cbz	r0, 800703a <__cvt+0x9e>
 8007036:	f8cd 901c 	str.w	r9, [sp, #28]
 800703a:	2230      	movs	r2, #48	; 0x30
 800703c:	9b07      	ldr	r3, [sp, #28]
 800703e:	454b      	cmp	r3, r9
 8007040:	d307      	bcc.n	8007052 <__cvt+0xb6>
 8007042:	4630      	mov	r0, r6
 8007044:	9b07      	ldr	r3, [sp, #28]
 8007046:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007048:	1b9b      	subs	r3, r3, r6
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	b008      	add	sp, #32
 800704e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007052:	1c59      	adds	r1, r3, #1
 8007054:	9107      	str	r1, [sp, #28]
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	e7f0      	b.n	800703c <__cvt+0xa0>

0800705a <__exponent>:
 800705a:	4603      	mov	r3, r0
 800705c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800705e:	2900      	cmp	r1, #0
 8007060:	f803 2b02 	strb.w	r2, [r3], #2
 8007064:	bfb6      	itet	lt
 8007066:	222d      	movlt	r2, #45	; 0x2d
 8007068:	222b      	movge	r2, #43	; 0x2b
 800706a:	4249      	neglt	r1, r1
 800706c:	2909      	cmp	r1, #9
 800706e:	7042      	strb	r2, [r0, #1]
 8007070:	dd2a      	ble.n	80070c8 <__exponent+0x6e>
 8007072:	f10d 0207 	add.w	r2, sp, #7
 8007076:	4617      	mov	r7, r2
 8007078:	260a      	movs	r6, #10
 800707a:	fb91 f5f6 	sdiv	r5, r1, r6
 800707e:	4694      	mov	ip, r2
 8007080:	fb06 1415 	mls	r4, r6, r5, r1
 8007084:	3430      	adds	r4, #48	; 0x30
 8007086:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800708a:	460c      	mov	r4, r1
 800708c:	2c63      	cmp	r4, #99	; 0x63
 800708e:	4629      	mov	r1, r5
 8007090:	f102 32ff 	add.w	r2, r2, #4294967295
 8007094:	dcf1      	bgt.n	800707a <__exponent+0x20>
 8007096:	3130      	adds	r1, #48	; 0x30
 8007098:	f1ac 0402 	sub.w	r4, ip, #2
 800709c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80070a0:	4622      	mov	r2, r4
 80070a2:	1c41      	adds	r1, r0, #1
 80070a4:	42ba      	cmp	r2, r7
 80070a6:	d30a      	bcc.n	80070be <__exponent+0x64>
 80070a8:	f10d 0209 	add.w	r2, sp, #9
 80070ac:	eba2 020c 	sub.w	r2, r2, ip
 80070b0:	42bc      	cmp	r4, r7
 80070b2:	bf88      	it	hi
 80070b4:	2200      	movhi	r2, #0
 80070b6:	4413      	add	r3, r2
 80070b8:	1a18      	subs	r0, r3, r0
 80070ba:	b003      	add	sp, #12
 80070bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80070c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80070c6:	e7ed      	b.n	80070a4 <__exponent+0x4a>
 80070c8:	2330      	movs	r3, #48	; 0x30
 80070ca:	3130      	adds	r1, #48	; 0x30
 80070cc:	7083      	strb	r3, [r0, #2]
 80070ce:	70c1      	strb	r1, [r0, #3]
 80070d0:	1d03      	adds	r3, r0, #4
 80070d2:	e7f1      	b.n	80070b8 <__exponent+0x5e>

080070d4 <_printf_float>:
 80070d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d8:	b091      	sub	sp, #68	; 0x44
 80070da:	460c      	mov	r4, r1
 80070dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80070e0:	4616      	mov	r6, r2
 80070e2:	461f      	mov	r7, r3
 80070e4:	4605      	mov	r5, r0
 80070e6:	f000 ffe3 	bl	80080b0 <_localeconv_r>
 80070ea:	6803      	ldr	r3, [r0, #0]
 80070ec:	4618      	mov	r0, r3
 80070ee:	9309      	str	r3, [sp, #36]	; 0x24
 80070f0:	f7f9 f82e 	bl	8000150 <strlen>
 80070f4:	2300      	movs	r3, #0
 80070f6:	930e      	str	r3, [sp, #56]	; 0x38
 80070f8:	f8d8 3000 	ldr.w	r3, [r8]
 80070fc:	900a      	str	r0, [sp, #40]	; 0x28
 80070fe:	3307      	adds	r3, #7
 8007100:	f023 0307 	bic.w	r3, r3, #7
 8007104:	f103 0208 	add.w	r2, r3, #8
 8007108:	f894 9018 	ldrb.w	r9, [r4, #24]
 800710c:	f8d4 b000 	ldr.w	fp, [r4]
 8007110:	f8c8 2000 	str.w	r2, [r8]
 8007114:	e9d3 a800 	ldrd	sl, r8, [r3]
 8007118:	4652      	mov	r2, sl
 800711a:	4643      	mov	r3, r8
 800711c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007120:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007124:	930b      	str	r3, [sp, #44]	; 0x2c
 8007126:	f04f 32ff 	mov.w	r2, #4294967295
 800712a:	4650      	mov	r0, sl
 800712c:	4b9c      	ldr	r3, [pc, #624]	; (80073a0 <_printf_float+0x2cc>)
 800712e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007130:	f7f9 fc6c 	bl	8000a0c <__aeabi_dcmpun>
 8007134:	bb70      	cbnz	r0, 8007194 <_printf_float+0xc0>
 8007136:	f04f 32ff 	mov.w	r2, #4294967295
 800713a:	4650      	mov	r0, sl
 800713c:	4b98      	ldr	r3, [pc, #608]	; (80073a0 <_printf_float+0x2cc>)
 800713e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007140:	f7f9 fc46 	bl	80009d0 <__aeabi_dcmple>
 8007144:	bb30      	cbnz	r0, 8007194 <_printf_float+0xc0>
 8007146:	2200      	movs	r2, #0
 8007148:	2300      	movs	r3, #0
 800714a:	4650      	mov	r0, sl
 800714c:	4641      	mov	r1, r8
 800714e:	f7f9 fc35 	bl	80009bc <__aeabi_dcmplt>
 8007152:	b110      	cbz	r0, 800715a <_printf_float+0x86>
 8007154:	232d      	movs	r3, #45	; 0x2d
 8007156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800715a:	4a92      	ldr	r2, [pc, #584]	; (80073a4 <_printf_float+0x2d0>)
 800715c:	4b92      	ldr	r3, [pc, #584]	; (80073a8 <_printf_float+0x2d4>)
 800715e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007162:	bf94      	ite	ls
 8007164:	4690      	movls	r8, r2
 8007166:	4698      	movhi	r8, r3
 8007168:	2303      	movs	r3, #3
 800716a:	f04f 0a00 	mov.w	sl, #0
 800716e:	6123      	str	r3, [r4, #16]
 8007170:	f02b 0304 	bic.w	r3, fp, #4
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	4633      	mov	r3, r6
 8007178:	4621      	mov	r1, r4
 800717a:	4628      	mov	r0, r5
 800717c:	9700      	str	r7, [sp, #0]
 800717e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007180:	f000 f9d6 	bl	8007530 <_printf_common>
 8007184:	3001      	adds	r0, #1
 8007186:	f040 8090 	bne.w	80072aa <_printf_float+0x1d6>
 800718a:	f04f 30ff 	mov.w	r0, #4294967295
 800718e:	b011      	add	sp, #68	; 0x44
 8007190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007194:	4652      	mov	r2, sl
 8007196:	4643      	mov	r3, r8
 8007198:	4650      	mov	r0, sl
 800719a:	4641      	mov	r1, r8
 800719c:	f7f9 fc36 	bl	8000a0c <__aeabi_dcmpun>
 80071a0:	b148      	cbz	r0, 80071b6 <_printf_float+0xe2>
 80071a2:	f1b8 0f00 	cmp.w	r8, #0
 80071a6:	bfb8      	it	lt
 80071a8:	232d      	movlt	r3, #45	; 0x2d
 80071aa:	4a80      	ldr	r2, [pc, #512]	; (80073ac <_printf_float+0x2d8>)
 80071ac:	bfb8      	it	lt
 80071ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071b2:	4b7f      	ldr	r3, [pc, #508]	; (80073b0 <_printf_float+0x2dc>)
 80071b4:	e7d3      	b.n	800715e <_printf_float+0x8a>
 80071b6:	6863      	ldr	r3, [r4, #4]
 80071b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	d142      	bne.n	8007246 <_printf_float+0x172>
 80071c0:	2306      	movs	r3, #6
 80071c2:	6063      	str	r3, [r4, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	9206      	str	r2, [sp, #24]
 80071c8:	aa0e      	add	r2, sp, #56	; 0x38
 80071ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80071ce:	aa0d      	add	r2, sp, #52	; 0x34
 80071d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80071d4:	9203      	str	r2, [sp, #12]
 80071d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80071da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80071de:	6023      	str	r3, [r4, #0]
 80071e0:	6863      	ldr	r3, [r4, #4]
 80071e2:	4652      	mov	r2, sl
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	4628      	mov	r0, r5
 80071e8:	4643      	mov	r3, r8
 80071ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80071ec:	f7ff fed6 	bl	8006f9c <__cvt>
 80071f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071f2:	4680      	mov	r8, r0
 80071f4:	2947      	cmp	r1, #71	; 0x47
 80071f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80071f8:	d108      	bne.n	800720c <_printf_float+0x138>
 80071fa:	1cc8      	adds	r0, r1, #3
 80071fc:	db02      	blt.n	8007204 <_printf_float+0x130>
 80071fe:	6863      	ldr	r3, [r4, #4]
 8007200:	4299      	cmp	r1, r3
 8007202:	dd40      	ble.n	8007286 <_printf_float+0x1b2>
 8007204:	f1a9 0902 	sub.w	r9, r9, #2
 8007208:	fa5f f989 	uxtb.w	r9, r9
 800720c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007210:	d81f      	bhi.n	8007252 <_printf_float+0x17e>
 8007212:	464a      	mov	r2, r9
 8007214:	3901      	subs	r1, #1
 8007216:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800721a:	910d      	str	r1, [sp, #52]	; 0x34
 800721c:	f7ff ff1d 	bl	800705a <__exponent>
 8007220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007222:	4682      	mov	sl, r0
 8007224:	1813      	adds	r3, r2, r0
 8007226:	2a01      	cmp	r2, #1
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	dc02      	bgt.n	8007232 <_printf_float+0x15e>
 800722c:	6822      	ldr	r2, [r4, #0]
 800722e:	07d2      	lsls	r2, r2, #31
 8007230:	d501      	bpl.n	8007236 <_printf_float+0x162>
 8007232:	3301      	adds	r3, #1
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800723a:	2b00      	cmp	r3, #0
 800723c:	d09b      	beq.n	8007176 <_printf_float+0xa2>
 800723e:	232d      	movs	r3, #45	; 0x2d
 8007240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007244:	e797      	b.n	8007176 <_printf_float+0xa2>
 8007246:	2947      	cmp	r1, #71	; 0x47
 8007248:	d1bc      	bne.n	80071c4 <_printf_float+0xf0>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1ba      	bne.n	80071c4 <_printf_float+0xf0>
 800724e:	2301      	movs	r3, #1
 8007250:	e7b7      	b.n	80071c2 <_printf_float+0xee>
 8007252:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007256:	d118      	bne.n	800728a <_printf_float+0x1b6>
 8007258:	2900      	cmp	r1, #0
 800725a:	6863      	ldr	r3, [r4, #4]
 800725c:	dd0b      	ble.n	8007276 <_printf_float+0x1a2>
 800725e:	6121      	str	r1, [r4, #16]
 8007260:	b913      	cbnz	r3, 8007268 <_printf_float+0x194>
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	07d0      	lsls	r0, r2, #31
 8007266:	d502      	bpl.n	800726e <_printf_float+0x19a>
 8007268:	3301      	adds	r3, #1
 800726a:	440b      	add	r3, r1
 800726c:	6123      	str	r3, [r4, #16]
 800726e:	f04f 0a00 	mov.w	sl, #0
 8007272:	65a1      	str	r1, [r4, #88]	; 0x58
 8007274:	e7df      	b.n	8007236 <_printf_float+0x162>
 8007276:	b913      	cbnz	r3, 800727e <_printf_float+0x1aa>
 8007278:	6822      	ldr	r2, [r4, #0]
 800727a:	07d2      	lsls	r2, r2, #31
 800727c:	d501      	bpl.n	8007282 <_printf_float+0x1ae>
 800727e:	3302      	adds	r3, #2
 8007280:	e7f4      	b.n	800726c <_printf_float+0x198>
 8007282:	2301      	movs	r3, #1
 8007284:	e7f2      	b.n	800726c <_printf_float+0x198>
 8007286:	f04f 0967 	mov.w	r9, #103	; 0x67
 800728a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800728c:	4299      	cmp	r1, r3
 800728e:	db05      	blt.n	800729c <_printf_float+0x1c8>
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	6121      	str	r1, [r4, #16]
 8007294:	07d8      	lsls	r0, r3, #31
 8007296:	d5ea      	bpl.n	800726e <_printf_float+0x19a>
 8007298:	1c4b      	adds	r3, r1, #1
 800729a:	e7e7      	b.n	800726c <_printf_float+0x198>
 800729c:	2900      	cmp	r1, #0
 800729e:	bfcc      	ite	gt
 80072a0:	2201      	movgt	r2, #1
 80072a2:	f1c1 0202 	rsble	r2, r1, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	e7e0      	b.n	800726c <_printf_float+0x198>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	055a      	lsls	r2, r3, #21
 80072ae:	d407      	bmi.n	80072c0 <_printf_float+0x1ec>
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	4642      	mov	r2, r8
 80072b4:	4631      	mov	r1, r6
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b8      	blx	r7
 80072ba:	3001      	adds	r0, #1
 80072bc:	d12b      	bne.n	8007316 <_printf_float+0x242>
 80072be:	e764      	b.n	800718a <_printf_float+0xb6>
 80072c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80072c4:	f240 80dd 	bls.w	8007482 <_printf_float+0x3ae>
 80072c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072cc:	2200      	movs	r2, #0
 80072ce:	2300      	movs	r3, #0
 80072d0:	f7f9 fb6a 	bl	80009a8 <__aeabi_dcmpeq>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d033      	beq.n	8007340 <_printf_float+0x26c>
 80072d8:	2301      	movs	r3, #1
 80072da:	4631      	mov	r1, r6
 80072dc:	4628      	mov	r0, r5
 80072de:	4a35      	ldr	r2, [pc, #212]	; (80073b4 <_printf_float+0x2e0>)
 80072e0:	47b8      	blx	r7
 80072e2:	3001      	adds	r0, #1
 80072e4:	f43f af51 	beq.w	800718a <_printf_float+0xb6>
 80072e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072ec:	429a      	cmp	r2, r3
 80072ee:	db02      	blt.n	80072f6 <_printf_float+0x222>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	07d8      	lsls	r0, r3, #31
 80072f4:	d50f      	bpl.n	8007316 <_printf_float+0x242>
 80072f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072fa:	4631      	mov	r1, r6
 80072fc:	4628      	mov	r0, r5
 80072fe:	47b8      	blx	r7
 8007300:	3001      	adds	r0, #1
 8007302:	f43f af42 	beq.w	800718a <_printf_float+0xb6>
 8007306:	f04f 0800 	mov.w	r8, #0
 800730a:	f104 091a 	add.w	r9, r4, #26
 800730e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007310:	3b01      	subs	r3, #1
 8007312:	4543      	cmp	r3, r8
 8007314:	dc09      	bgt.n	800732a <_printf_float+0x256>
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	079b      	lsls	r3, r3, #30
 800731a:	f100 8104 	bmi.w	8007526 <_printf_float+0x452>
 800731e:	68e0      	ldr	r0, [r4, #12]
 8007320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007322:	4298      	cmp	r0, r3
 8007324:	bfb8      	it	lt
 8007326:	4618      	movlt	r0, r3
 8007328:	e731      	b.n	800718e <_printf_float+0xba>
 800732a:	2301      	movs	r3, #1
 800732c:	464a      	mov	r2, r9
 800732e:	4631      	mov	r1, r6
 8007330:	4628      	mov	r0, r5
 8007332:	47b8      	blx	r7
 8007334:	3001      	adds	r0, #1
 8007336:	f43f af28 	beq.w	800718a <_printf_float+0xb6>
 800733a:	f108 0801 	add.w	r8, r8, #1
 800733e:	e7e6      	b.n	800730e <_printf_float+0x23a>
 8007340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007342:	2b00      	cmp	r3, #0
 8007344:	dc38      	bgt.n	80073b8 <_printf_float+0x2e4>
 8007346:	2301      	movs	r3, #1
 8007348:	4631      	mov	r1, r6
 800734a:	4628      	mov	r0, r5
 800734c:	4a19      	ldr	r2, [pc, #100]	; (80073b4 <_printf_float+0x2e0>)
 800734e:	47b8      	blx	r7
 8007350:	3001      	adds	r0, #1
 8007352:	f43f af1a 	beq.w	800718a <_printf_float+0xb6>
 8007356:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800735a:	4313      	orrs	r3, r2
 800735c:	d102      	bne.n	8007364 <_printf_float+0x290>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	07d9      	lsls	r1, r3, #31
 8007362:	d5d8      	bpl.n	8007316 <_printf_float+0x242>
 8007364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007368:	4631      	mov	r1, r6
 800736a:	4628      	mov	r0, r5
 800736c:	47b8      	blx	r7
 800736e:	3001      	adds	r0, #1
 8007370:	f43f af0b 	beq.w	800718a <_printf_float+0xb6>
 8007374:	f04f 0900 	mov.w	r9, #0
 8007378:	f104 0a1a 	add.w	sl, r4, #26
 800737c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800737e:	425b      	negs	r3, r3
 8007380:	454b      	cmp	r3, r9
 8007382:	dc01      	bgt.n	8007388 <_printf_float+0x2b4>
 8007384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007386:	e794      	b.n	80072b2 <_printf_float+0x1de>
 8007388:	2301      	movs	r3, #1
 800738a:	4652      	mov	r2, sl
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	47b8      	blx	r7
 8007392:	3001      	adds	r0, #1
 8007394:	f43f aef9 	beq.w	800718a <_printf_float+0xb6>
 8007398:	f109 0901 	add.w	r9, r9, #1
 800739c:	e7ee      	b.n	800737c <_printf_float+0x2a8>
 800739e:	bf00      	nop
 80073a0:	7fefffff 	.word	0x7fefffff
 80073a4:	0800d23a 	.word	0x0800d23a
 80073a8:	0800d23e 	.word	0x0800d23e
 80073ac:	0800d242 	.word	0x0800d242
 80073b0:	0800d246 	.word	0x0800d246
 80073b4:	0800d24a 	.word	0x0800d24a
 80073b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073bc:	429a      	cmp	r2, r3
 80073be:	bfa8      	it	ge
 80073c0:	461a      	movge	r2, r3
 80073c2:	2a00      	cmp	r2, #0
 80073c4:	4691      	mov	r9, r2
 80073c6:	dc37      	bgt.n	8007438 <_printf_float+0x364>
 80073c8:	f04f 0b00 	mov.w	fp, #0
 80073cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073d0:	f104 021a 	add.w	r2, r4, #26
 80073d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80073d8:	ebaa 0309 	sub.w	r3, sl, r9
 80073dc:	455b      	cmp	r3, fp
 80073de:	dc33      	bgt.n	8007448 <_printf_float+0x374>
 80073e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80073e4:	429a      	cmp	r2, r3
 80073e6:	db3b      	blt.n	8007460 <_printf_float+0x38c>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	07da      	lsls	r2, r3, #31
 80073ec:	d438      	bmi.n	8007460 <_printf_float+0x38c>
 80073ee:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80073f2:	eba2 0903 	sub.w	r9, r2, r3
 80073f6:	eba2 020a 	sub.w	r2, r2, sl
 80073fa:	4591      	cmp	r9, r2
 80073fc:	bfa8      	it	ge
 80073fe:	4691      	movge	r9, r2
 8007400:	f1b9 0f00 	cmp.w	r9, #0
 8007404:	dc34      	bgt.n	8007470 <_printf_float+0x39c>
 8007406:	f04f 0800 	mov.w	r8, #0
 800740a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800740e:	f104 0a1a 	add.w	sl, r4, #26
 8007412:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	eba3 0309 	sub.w	r3, r3, r9
 800741c:	4543      	cmp	r3, r8
 800741e:	f77f af7a 	ble.w	8007316 <_printf_float+0x242>
 8007422:	2301      	movs	r3, #1
 8007424:	4652      	mov	r2, sl
 8007426:	4631      	mov	r1, r6
 8007428:	4628      	mov	r0, r5
 800742a:	47b8      	blx	r7
 800742c:	3001      	adds	r0, #1
 800742e:	f43f aeac 	beq.w	800718a <_printf_float+0xb6>
 8007432:	f108 0801 	add.w	r8, r8, #1
 8007436:	e7ec      	b.n	8007412 <_printf_float+0x33e>
 8007438:	4613      	mov	r3, r2
 800743a:	4631      	mov	r1, r6
 800743c:	4642      	mov	r2, r8
 800743e:	4628      	mov	r0, r5
 8007440:	47b8      	blx	r7
 8007442:	3001      	adds	r0, #1
 8007444:	d1c0      	bne.n	80073c8 <_printf_float+0x2f4>
 8007446:	e6a0      	b.n	800718a <_printf_float+0xb6>
 8007448:	2301      	movs	r3, #1
 800744a:	4631      	mov	r1, r6
 800744c:	4628      	mov	r0, r5
 800744e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007450:	47b8      	blx	r7
 8007452:	3001      	adds	r0, #1
 8007454:	f43f ae99 	beq.w	800718a <_printf_float+0xb6>
 8007458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800745a:	f10b 0b01 	add.w	fp, fp, #1
 800745e:	e7b9      	b.n	80073d4 <_printf_float+0x300>
 8007460:	4631      	mov	r1, r6
 8007462:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007466:	4628      	mov	r0, r5
 8007468:	47b8      	blx	r7
 800746a:	3001      	adds	r0, #1
 800746c:	d1bf      	bne.n	80073ee <_printf_float+0x31a>
 800746e:	e68c      	b.n	800718a <_printf_float+0xb6>
 8007470:	464b      	mov	r3, r9
 8007472:	4631      	mov	r1, r6
 8007474:	4628      	mov	r0, r5
 8007476:	eb08 020a 	add.w	r2, r8, sl
 800747a:	47b8      	blx	r7
 800747c:	3001      	adds	r0, #1
 800747e:	d1c2      	bne.n	8007406 <_printf_float+0x332>
 8007480:	e683      	b.n	800718a <_printf_float+0xb6>
 8007482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007484:	2a01      	cmp	r2, #1
 8007486:	dc01      	bgt.n	800748c <_printf_float+0x3b8>
 8007488:	07db      	lsls	r3, r3, #31
 800748a:	d539      	bpl.n	8007500 <_printf_float+0x42c>
 800748c:	2301      	movs	r3, #1
 800748e:	4642      	mov	r2, r8
 8007490:	4631      	mov	r1, r6
 8007492:	4628      	mov	r0, r5
 8007494:	47b8      	blx	r7
 8007496:	3001      	adds	r0, #1
 8007498:	f43f ae77 	beq.w	800718a <_printf_float+0xb6>
 800749c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074a0:	4631      	mov	r1, r6
 80074a2:	4628      	mov	r0, r5
 80074a4:	47b8      	blx	r7
 80074a6:	3001      	adds	r0, #1
 80074a8:	f43f ae6f 	beq.w	800718a <_printf_float+0xb6>
 80074ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074b0:	2200      	movs	r2, #0
 80074b2:	2300      	movs	r3, #0
 80074b4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80074b8:	f7f9 fa76 	bl	80009a8 <__aeabi_dcmpeq>
 80074bc:	b9d8      	cbnz	r0, 80074f6 <_printf_float+0x422>
 80074be:	f109 33ff 	add.w	r3, r9, #4294967295
 80074c2:	f108 0201 	add.w	r2, r8, #1
 80074c6:	4631      	mov	r1, r6
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b8      	blx	r7
 80074cc:	3001      	adds	r0, #1
 80074ce:	d10e      	bne.n	80074ee <_printf_float+0x41a>
 80074d0:	e65b      	b.n	800718a <_printf_float+0xb6>
 80074d2:	2301      	movs	r3, #1
 80074d4:	464a      	mov	r2, r9
 80074d6:	4631      	mov	r1, r6
 80074d8:	4628      	mov	r0, r5
 80074da:	47b8      	blx	r7
 80074dc:	3001      	adds	r0, #1
 80074de:	f43f ae54 	beq.w	800718a <_printf_float+0xb6>
 80074e2:	f108 0801 	add.w	r8, r8, #1
 80074e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074e8:	3b01      	subs	r3, #1
 80074ea:	4543      	cmp	r3, r8
 80074ec:	dcf1      	bgt.n	80074d2 <_printf_float+0x3fe>
 80074ee:	4653      	mov	r3, sl
 80074f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074f4:	e6de      	b.n	80072b4 <_printf_float+0x1e0>
 80074f6:	f04f 0800 	mov.w	r8, #0
 80074fa:	f104 091a 	add.w	r9, r4, #26
 80074fe:	e7f2      	b.n	80074e6 <_printf_float+0x412>
 8007500:	2301      	movs	r3, #1
 8007502:	4642      	mov	r2, r8
 8007504:	e7df      	b.n	80074c6 <_printf_float+0x3f2>
 8007506:	2301      	movs	r3, #1
 8007508:	464a      	mov	r2, r9
 800750a:	4631      	mov	r1, r6
 800750c:	4628      	mov	r0, r5
 800750e:	47b8      	blx	r7
 8007510:	3001      	adds	r0, #1
 8007512:	f43f ae3a 	beq.w	800718a <_printf_float+0xb6>
 8007516:	f108 0801 	add.w	r8, r8, #1
 800751a:	68e3      	ldr	r3, [r4, #12]
 800751c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800751e:	1a5b      	subs	r3, r3, r1
 8007520:	4543      	cmp	r3, r8
 8007522:	dcf0      	bgt.n	8007506 <_printf_float+0x432>
 8007524:	e6fb      	b.n	800731e <_printf_float+0x24a>
 8007526:	f04f 0800 	mov.w	r8, #0
 800752a:	f104 0919 	add.w	r9, r4, #25
 800752e:	e7f4      	b.n	800751a <_printf_float+0x446>

08007530 <_printf_common>:
 8007530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007534:	4616      	mov	r6, r2
 8007536:	4699      	mov	r9, r3
 8007538:	688a      	ldr	r2, [r1, #8]
 800753a:	690b      	ldr	r3, [r1, #16]
 800753c:	4607      	mov	r7, r0
 800753e:	4293      	cmp	r3, r2
 8007540:	bfb8      	it	lt
 8007542:	4613      	movlt	r3, r2
 8007544:	6033      	str	r3, [r6, #0]
 8007546:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800754a:	460c      	mov	r4, r1
 800754c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007550:	b10a      	cbz	r2, 8007556 <_printf_common+0x26>
 8007552:	3301      	adds	r3, #1
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	0699      	lsls	r1, r3, #26
 800755a:	bf42      	ittt	mi
 800755c:	6833      	ldrmi	r3, [r6, #0]
 800755e:	3302      	addmi	r3, #2
 8007560:	6033      	strmi	r3, [r6, #0]
 8007562:	6825      	ldr	r5, [r4, #0]
 8007564:	f015 0506 	ands.w	r5, r5, #6
 8007568:	d106      	bne.n	8007578 <_printf_common+0x48>
 800756a:	f104 0a19 	add.w	sl, r4, #25
 800756e:	68e3      	ldr	r3, [r4, #12]
 8007570:	6832      	ldr	r2, [r6, #0]
 8007572:	1a9b      	subs	r3, r3, r2
 8007574:	42ab      	cmp	r3, r5
 8007576:	dc2b      	bgt.n	80075d0 <_printf_common+0xa0>
 8007578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800757c:	1e13      	subs	r3, r2, #0
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	bf18      	it	ne
 8007582:	2301      	movne	r3, #1
 8007584:	0692      	lsls	r2, r2, #26
 8007586:	d430      	bmi.n	80075ea <_printf_common+0xba>
 8007588:	4649      	mov	r1, r9
 800758a:	4638      	mov	r0, r7
 800758c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007590:	47c0      	blx	r8
 8007592:	3001      	adds	r0, #1
 8007594:	d023      	beq.n	80075de <_printf_common+0xae>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	6922      	ldr	r2, [r4, #16]
 800759a:	f003 0306 	and.w	r3, r3, #6
 800759e:	2b04      	cmp	r3, #4
 80075a0:	bf14      	ite	ne
 80075a2:	2500      	movne	r5, #0
 80075a4:	6833      	ldreq	r3, [r6, #0]
 80075a6:	f04f 0600 	mov.w	r6, #0
 80075aa:	bf08      	it	eq
 80075ac:	68e5      	ldreq	r5, [r4, #12]
 80075ae:	f104 041a 	add.w	r4, r4, #26
 80075b2:	bf08      	it	eq
 80075b4:	1aed      	subeq	r5, r5, r3
 80075b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80075ba:	bf08      	it	eq
 80075bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075c0:	4293      	cmp	r3, r2
 80075c2:	bfc4      	itt	gt
 80075c4:	1a9b      	subgt	r3, r3, r2
 80075c6:	18ed      	addgt	r5, r5, r3
 80075c8:	42b5      	cmp	r5, r6
 80075ca:	d11a      	bne.n	8007602 <_printf_common+0xd2>
 80075cc:	2000      	movs	r0, #0
 80075ce:	e008      	b.n	80075e2 <_printf_common+0xb2>
 80075d0:	2301      	movs	r3, #1
 80075d2:	4652      	mov	r2, sl
 80075d4:	4649      	mov	r1, r9
 80075d6:	4638      	mov	r0, r7
 80075d8:	47c0      	blx	r8
 80075da:	3001      	adds	r0, #1
 80075dc:	d103      	bne.n	80075e6 <_printf_common+0xb6>
 80075de:	f04f 30ff 	mov.w	r0, #4294967295
 80075e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e6:	3501      	adds	r5, #1
 80075e8:	e7c1      	b.n	800756e <_printf_common+0x3e>
 80075ea:	2030      	movs	r0, #48	; 0x30
 80075ec:	18e1      	adds	r1, r4, r3
 80075ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075f8:	4422      	add	r2, r4
 80075fa:	3302      	adds	r3, #2
 80075fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007600:	e7c2      	b.n	8007588 <_printf_common+0x58>
 8007602:	2301      	movs	r3, #1
 8007604:	4622      	mov	r2, r4
 8007606:	4649      	mov	r1, r9
 8007608:	4638      	mov	r0, r7
 800760a:	47c0      	blx	r8
 800760c:	3001      	adds	r0, #1
 800760e:	d0e6      	beq.n	80075de <_printf_common+0xae>
 8007610:	3601      	adds	r6, #1
 8007612:	e7d9      	b.n	80075c8 <_printf_common+0x98>

08007614 <_printf_i>:
 8007614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007618:	7e0f      	ldrb	r7, [r1, #24]
 800761a:	4691      	mov	r9, r2
 800761c:	2f78      	cmp	r7, #120	; 0x78
 800761e:	4680      	mov	r8, r0
 8007620:	460c      	mov	r4, r1
 8007622:	469a      	mov	sl, r3
 8007624:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007626:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800762a:	d807      	bhi.n	800763c <_printf_i+0x28>
 800762c:	2f62      	cmp	r7, #98	; 0x62
 800762e:	d80a      	bhi.n	8007646 <_printf_i+0x32>
 8007630:	2f00      	cmp	r7, #0
 8007632:	f000 80d5 	beq.w	80077e0 <_printf_i+0x1cc>
 8007636:	2f58      	cmp	r7, #88	; 0x58
 8007638:	f000 80c1 	beq.w	80077be <_printf_i+0x1aa>
 800763c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007644:	e03a      	b.n	80076bc <_printf_i+0xa8>
 8007646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800764a:	2b15      	cmp	r3, #21
 800764c:	d8f6      	bhi.n	800763c <_printf_i+0x28>
 800764e:	a101      	add	r1, pc, #4	; (adr r1, 8007654 <_printf_i+0x40>)
 8007650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007654:	080076ad 	.word	0x080076ad
 8007658:	080076c1 	.word	0x080076c1
 800765c:	0800763d 	.word	0x0800763d
 8007660:	0800763d 	.word	0x0800763d
 8007664:	0800763d 	.word	0x0800763d
 8007668:	0800763d 	.word	0x0800763d
 800766c:	080076c1 	.word	0x080076c1
 8007670:	0800763d 	.word	0x0800763d
 8007674:	0800763d 	.word	0x0800763d
 8007678:	0800763d 	.word	0x0800763d
 800767c:	0800763d 	.word	0x0800763d
 8007680:	080077c7 	.word	0x080077c7
 8007684:	080076ed 	.word	0x080076ed
 8007688:	08007781 	.word	0x08007781
 800768c:	0800763d 	.word	0x0800763d
 8007690:	0800763d 	.word	0x0800763d
 8007694:	080077e9 	.word	0x080077e9
 8007698:	0800763d 	.word	0x0800763d
 800769c:	080076ed 	.word	0x080076ed
 80076a0:	0800763d 	.word	0x0800763d
 80076a4:	0800763d 	.word	0x0800763d
 80076a8:	08007789 	.word	0x08007789
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	1d1a      	adds	r2, r3, #4
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	602a      	str	r2, [r5, #0]
 80076b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076bc:	2301      	movs	r3, #1
 80076be:	e0a0      	b.n	8007802 <_printf_i+0x1ee>
 80076c0:	6820      	ldr	r0, [r4, #0]
 80076c2:	682b      	ldr	r3, [r5, #0]
 80076c4:	0607      	lsls	r7, r0, #24
 80076c6:	f103 0104 	add.w	r1, r3, #4
 80076ca:	6029      	str	r1, [r5, #0]
 80076cc:	d501      	bpl.n	80076d2 <_printf_i+0xbe>
 80076ce:	681e      	ldr	r6, [r3, #0]
 80076d0:	e003      	b.n	80076da <_printf_i+0xc6>
 80076d2:	0646      	lsls	r6, r0, #25
 80076d4:	d5fb      	bpl.n	80076ce <_printf_i+0xba>
 80076d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80076da:	2e00      	cmp	r6, #0
 80076dc:	da03      	bge.n	80076e6 <_printf_i+0xd2>
 80076de:	232d      	movs	r3, #45	; 0x2d
 80076e0:	4276      	negs	r6, r6
 80076e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e6:	230a      	movs	r3, #10
 80076e8:	4859      	ldr	r0, [pc, #356]	; (8007850 <_printf_i+0x23c>)
 80076ea:	e012      	b.n	8007712 <_printf_i+0xfe>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	6820      	ldr	r0, [r4, #0]
 80076f0:	1d19      	adds	r1, r3, #4
 80076f2:	6029      	str	r1, [r5, #0]
 80076f4:	0605      	lsls	r5, r0, #24
 80076f6:	d501      	bpl.n	80076fc <_printf_i+0xe8>
 80076f8:	681e      	ldr	r6, [r3, #0]
 80076fa:	e002      	b.n	8007702 <_printf_i+0xee>
 80076fc:	0641      	lsls	r1, r0, #25
 80076fe:	d5fb      	bpl.n	80076f8 <_printf_i+0xe4>
 8007700:	881e      	ldrh	r6, [r3, #0]
 8007702:	2f6f      	cmp	r7, #111	; 0x6f
 8007704:	bf0c      	ite	eq
 8007706:	2308      	moveq	r3, #8
 8007708:	230a      	movne	r3, #10
 800770a:	4851      	ldr	r0, [pc, #324]	; (8007850 <_printf_i+0x23c>)
 800770c:	2100      	movs	r1, #0
 800770e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007712:	6865      	ldr	r5, [r4, #4]
 8007714:	2d00      	cmp	r5, #0
 8007716:	bfa8      	it	ge
 8007718:	6821      	ldrge	r1, [r4, #0]
 800771a:	60a5      	str	r5, [r4, #8]
 800771c:	bfa4      	itt	ge
 800771e:	f021 0104 	bicge.w	r1, r1, #4
 8007722:	6021      	strge	r1, [r4, #0]
 8007724:	b90e      	cbnz	r6, 800772a <_printf_i+0x116>
 8007726:	2d00      	cmp	r5, #0
 8007728:	d04b      	beq.n	80077c2 <_printf_i+0x1ae>
 800772a:	4615      	mov	r5, r2
 800772c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007730:	fb03 6711 	mls	r7, r3, r1, r6
 8007734:	5dc7      	ldrb	r7, [r0, r7]
 8007736:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800773a:	4637      	mov	r7, r6
 800773c:	42bb      	cmp	r3, r7
 800773e:	460e      	mov	r6, r1
 8007740:	d9f4      	bls.n	800772c <_printf_i+0x118>
 8007742:	2b08      	cmp	r3, #8
 8007744:	d10b      	bne.n	800775e <_printf_i+0x14a>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	07de      	lsls	r6, r3, #31
 800774a:	d508      	bpl.n	800775e <_printf_i+0x14a>
 800774c:	6923      	ldr	r3, [r4, #16]
 800774e:	6861      	ldr	r1, [r4, #4]
 8007750:	4299      	cmp	r1, r3
 8007752:	bfde      	ittt	le
 8007754:	2330      	movle	r3, #48	; 0x30
 8007756:	f805 3c01 	strble.w	r3, [r5, #-1]
 800775a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800775e:	1b52      	subs	r2, r2, r5
 8007760:	6122      	str	r2, [r4, #16]
 8007762:	464b      	mov	r3, r9
 8007764:	4621      	mov	r1, r4
 8007766:	4640      	mov	r0, r8
 8007768:	f8cd a000 	str.w	sl, [sp]
 800776c:	aa03      	add	r2, sp, #12
 800776e:	f7ff fedf 	bl	8007530 <_printf_common>
 8007772:	3001      	adds	r0, #1
 8007774:	d14a      	bne.n	800780c <_printf_i+0x1f8>
 8007776:	f04f 30ff 	mov.w	r0, #4294967295
 800777a:	b004      	add	sp, #16
 800777c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	f043 0320 	orr.w	r3, r3, #32
 8007786:	6023      	str	r3, [r4, #0]
 8007788:	2778      	movs	r7, #120	; 0x78
 800778a:	4832      	ldr	r0, [pc, #200]	; (8007854 <_printf_i+0x240>)
 800778c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	6829      	ldr	r1, [r5, #0]
 8007794:	061f      	lsls	r7, r3, #24
 8007796:	f851 6b04 	ldr.w	r6, [r1], #4
 800779a:	d402      	bmi.n	80077a2 <_printf_i+0x18e>
 800779c:	065f      	lsls	r7, r3, #25
 800779e:	bf48      	it	mi
 80077a0:	b2b6      	uxthmi	r6, r6
 80077a2:	07df      	lsls	r7, r3, #31
 80077a4:	bf48      	it	mi
 80077a6:	f043 0320 	orrmi.w	r3, r3, #32
 80077aa:	6029      	str	r1, [r5, #0]
 80077ac:	bf48      	it	mi
 80077ae:	6023      	strmi	r3, [r4, #0]
 80077b0:	b91e      	cbnz	r6, 80077ba <_printf_i+0x1a6>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	f023 0320 	bic.w	r3, r3, #32
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	2310      	movs	r3, #16
 80077bc:	e7a6      	b.n	800770c <_printf_i+0xf8>
 80077be:	4824      	ldr	r0, [pc, #144]	; (8007850 <_printf_i+0x23c>)
 80077c0:	e7e4      	b.n	800778c <_printf_i+0x178>
 80077c2:	4615      	mov	r5, r2
 80077c4:	e7bd      	b.n	8007742 <_printf_i+0x12e>
 80077c6:	682b      	ldr	r3, [r5, #0]
 80077c8:	6826      	ldr	r6, [r4, #0]
 80077ca:	1d18      	adds	r0, r3, #4
 80077cc:	6961      	ldr	r1, [r4, #20]
 80077ce:	6028      	str	r0, [r5, #0]
 80077d0:	0635      	lsls	r5, r6, #24
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	d501      	bpl.n	80077da <_printf_i+0x1c6>
 80077d6:	6019      	str	r1, [r3, #0]
 80077d8:	e002      	b.n	80077e0 <_printf_i+0x1cc>
 80077da:	0670      	lsls	r0, r6, #25
 80077dc:	d5fb      	bpl.n	80077d6 <_printf_i+0x1c2>
 80077de:	8019      	strh	r1, [r3, #0]
 80077e0:	2300      	movs	r3, #0
 80077e2:	4615      	mov	r5, r2
 80077e4:	6123      	str	r3, [r4, #16]
 80077e6:	e7bc      	b.n	8007762 <_printf_i+0x14e>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	2100      	movs	r1, #0
 80077ec:	1d1a      	adds	r2, r3, #4
 80077ee:	602a      	str	r2, [r5, #0]
 80077f0:	681d      	ldr	r5, [r3, #0]
 80077f2:	6862      	ldr	r2, [r4, #4]
 80077f4:	4628      	mov	r0, r5
 80077f6:	f000 fd28 	bl	800824a <memchr>
 80077fa:	b108      	cbz	r0, 8007800 <_printf_i+0x1ec>
 80077fc:	1b40      	subs	r0, r0, r5
 80077fe:	6060      	str	r0, [r4, #4]
 8007800:	6863      	ldr	r3, [r4, #4]
 8007802:	6123      	str	r3, [r4, #16]
 8007804:	2300      	movs	r3, #0
 8007806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800780a:	e7aa      	b.n	8007762 <_printf_i+0x14e>
 800780c:	462a      	mov	r2, r5
 800780e:	4649      	mov	r1, r9
 8007810:	4640      	mov	r0, r8
 8007812:	6923      	ldr	r3, [r4, #16]
 8007814:	47d0      	blx	sl
 8007816:	3001      	adds	r0, #1
 8007818:	d0ad      	beq.n	8007776 <_printf_i+0x162>
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	079b      	lsls	r3, r3, #30
 800781e:	d413      	bmi.n	8007848 <_printf_i+0x234>
 8007820:	68e0      	ldr	r0, [r4, #12]
 8007822:	9b03      	ldr	r3, [sp, #12]
 8007824:	4298      	cmp	r0, r3
 8007826:	bfb8      	it	lt
 8007828:	4618      	movlt	r0, r3
 800782a:	e7a6      	b.n	800777a <_printf_i+0x166>
 800782c:	2301      	movs	r3, #1
 800782e:	4632      	mov	r2, r6
 8007830:	4649      	mov	r1, r9
 8007832:	4640      	mov	r0, r8
 8007834:	47d0      	blx	sl
 8007836:	3001      	adds	r0, #1
 8007838:	d09d      	beq.n	8007776 <_printf_i+0x162>
 800783a:	3501      	adds	r5, #1
 800783c:	68e3      	ldr	r3, [r4, #12]
 800783e:	9903      	ldr	r1, [sp, #12]
 8007840:	1a5b      	subs	r3, r3, r1
 8007842:	42ab      	cmp	r3, r5
 8007844:	dcf2      	bgt.n	800782c <_printf_i+0x218>
 8007846:	e7eb      	b.n	8007820 <_printf_i+0x20c>
 8007848:	2500      	movs	r5, #0
 800784a:	f104 0619 	add.w	r6, r4, #25
 800784e:	e7f5      	b.n	800783c <_printf_i+0x228>
 8007850:	0800d24c 	.word	0x0800d24c
 8007854:	0800d25d 	.word	0x0800d25d

08007858 <_scanf_float>:
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	b087      	sub	sp, #28
 800785e:	9303      	str	r3, [sp, #12]
 8007860:	688b      	ldr	r3, [r1, #8]
 8007862:	4617      	mov	r7, r2
 8007864:	1e5a      	subs	r2, r3, #1
 8007866:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800786a:	bf85      	ittet	hi
 800786c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007870:	195b      	addhi	r3, r3, r5
 8007872:	2300      	movls	r3, #0
 8007874:	9302      	strhi	r3, [sp, #8]
 8007876:	bf88      	it	hi
 8007878:	f240 135d 	movwhi	r3, #349	; 0x15d
 800787c:	468b      	mov	fp, r1
 800787e:	f04f 0500 	mov.w	r5, #0
 8007882:	bf8c      	ite	hi
 8007884:	608b      	strhi	r3, [r1, #8]
 8007886:	9302      	strls	r3, [sp, #8]
 8007888:	680b      	ldr	r3, [r1, #0]
 800788a:	4680      	mov	r8, r0
 800788c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007890:	f84b 3b1c 	str.w	r3, [fp], #28
 8007894:	460c      	mov	r4, r1
 8007896:	465e      	mov	r6, fp
 8007898:	46aa      	mov	sl, r5
 800789a:	46a9      	mov	r9, r5
 800789c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80078a0:	9501      	str	r5, [sp, #4]
 80078a2:	68a2      	ldr	r2, [r4, #8]
 80078a4:	b152      	cbz	r2, 80078bc <_scanf_float+0x64>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b4e      	cmp	r3, #78	; 0x4e
 80078ac:	d864      	bhi.n	8007978 <_scanf_float+0x120>
 80078ae:	2b40      	cmp	r3, #64	; 0x40
 80078b0:	d83c      	bhi.n	800792c <_scanf_float+0xd4>
 80078b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80078b6:	b2c8      	uxtb	r0, r1
 80078b8:	280e      	cmp	r0, #14
 80078ba:	d93a      	bls.n	8007932 <_scanf_float+0xda>
 80078bc:	f1b9 0f00 	cmp.w	r9, #0
 80078c0:	d003      	beq.n	80078ca <_scanf_float+0x72>
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078ce:	f1ba 0f01 	cmp.w	sl, #1
 80078d2:	f200 8113 	bhi.w	8007afc <_scanf_float+0x2a4>
 80078d6:	455e      	cmp	r6, fp
 80078d8:	f200 8105 	bhi.w	8007ae6 <_scanf_float+0x28e>
 80078dc:	2501      	movs	r5, #1
 80078de:	4628      	mov	r0, r5
 80078e0:	b007      	add	sp, #28
 80078e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80078ea:	2a0d      	cmp	r2, #13
 80078ec:	d8e6      	bhi.n	80078bc <_scanf_float+0x64>
 80078ee:	a101      	add	r1, pc, #4	; (adr r1, 80078f4 <_scanf_float+0x9c>)
 80078f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80078f4:	08007a33 	.word	0x08007a33
 80078f8:	080078bd 	.word	0x080078bd
 80078fc:	080078bd 	.word	0x080078bd
 8007900:	080078bd 	.word	0x080078bd
 8007904:	08007a93 	.word	0x08007a93
 8007908:	08007a6b 	.word	0x08007a6b
 800790c:	080078bd 	.word	0x080078bd
 8007910:	080078bd 	.word	0x080078bd
 8007914:	08007a41 	.word	0x08007a41
 8007918:	080078bd 	.word	0x080078bd
 800791c:	080078bd 	.word	0x080078bd
 8007920:	080078bd 	.word	0x080078bd
 8007924:	080078bd 	.word	0x080078bd
 8007928:	080079f9 	.word	0x080079f9
 800792c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007930:	e7db      	b.n	80078ea <_scanf_float+0x92>
 8007932:	290e      	cmp	r1, #14
 8007934:	d8c2      	bhi.n	80078bc <_scanf_float+0x64>
 8007936:	a001      	add	r0, pc, #4	; (adr r0, 800793c <_scanf_float+0xe4>)
 8007938:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800793c:	080079eb 	.word	0x080079eb
 8007940:	080078bd 	.word	0x080078bd
 8007944:	080079eb 	.word	0x080079eb
 8007948:	08007a7f 	.word	0x08007a7f
 800794c:	080078bd 	.word	0x080078bd
 8007950:	08007999 	.word	0x08007999
 8007954:	080079d5 	.word	0x080079d5
 8007958:	080079d5 	.word	0x080079d5
 800795c:	080079d5 	.word	0x080079d5
 8007960:	080079d5 	.word	0x080079d5
 8007964:	080079d5 	.word	0x080079d5
 8007968:	080079d5 	.word	0x080079d5
 800796c:	080079d5 	.word	0x080079d5
 8007970:	080079d5 	.word	0x080079d5
 8007974:	080079d5 	.word	0x080079d5
 8007978:	2b6e      	cmp	r3, #110	; 0x6e
 800797a:	d809      	bhi.n	8007990 <_scanf_float+0x138>
 800797c:	2b60      	cmp	r3, #96	; 0x60
 800797e:	d8b2      	bhi.n	80078e6 <_scanf_float+0x8e>
 8007980:	2b54      	cmp	r3, #84	; 0x54
 8007982:	d077      	beq.n	8007a74 <_scanf_float+0x21c>
 8007984:	2b59      	cmp	r3, #89	; 0x59
 8007986:	d199      	bne.n	80078bc <_scanf_float+0x64>
 8007988:	2d07      	cmp	r5, #7
 800798a:	d197      	bne.n	80078bc <_scanf_float+0x64>
 800798c:	2508      	movs	r5, #8
 800798e:	e029      	b.n	80079e4 <_scanf_float+0x18c>
 8007990:	2b74      	cmp	r3, #116	; 0x74
 8007992:	d06f      	beq.n	8007a74 <_scanf_float+0x21c>
 8007994:	2b79      	cmp	r3, #121	; 0x79
 8007996:	e7f6      	b.n	8007986 <_scanf_float+0x12e>
 8007998:	6821      	ldr	r1, [r4, #0]
 800799a:	05c8      	lsls	r0, r1, #23
 800799c:	d51a      	bpl.n	80079d4 <_scanf_float+0x17c>
 800799e:	9b02      	ldr	r3, [sp, #8]
 80079a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80079a4:	6021      	str	r1, [r4, #0]
 80079a6:	f109 0901 	add.w	r9, r9, #1
 80079aa:	b11b      	cbz	r3, 80079b4 <_scanf_float+0x15c>
 80079ac:	3b01      	subs	r3, #1
 80079ae:	3201      	adds	r2, #1
 80079b0:	9302      	str	r3, [sp, #8]
 80079b2:	60a2      	str	r2, [r4, #8]
 80079b4:	68a3      	ldr	r3, [r4, #8]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	60a3      	str	r3, [r4, #8]
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	3301      	adds	r3, #1
 80079be:	6123      	str	r3, [r4, #16]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	607b      	str	r3, [r7, #4]
 80079c8:	f340 8084 	ble.w	8007ad4 <_scanf_float+0x27c>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	3301      	adds	r3, #1
 80079d0:	603b      	str	r3, [r7, #0]
 80079d2:	e766      	b.n	80078a2 <_scanf_float+0x4a>
 80079d4:	eb1a 0f05 	cmn.w	sl, r5
 80079d8:	f47f af70 	bne.w	80078bc <_scanf_float+0x64>
 80079dc:	6822      	ldr	r2, [r4, #0]
 80079de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80079e2:	6022      	str	r2, [r4, #0]
 80079e4:	f806 3b01 	strb.w	r3, [r6], #1
 80079e8:	e7e4      	b.n	80079b4 <_scanf_float+0x15c>
 80079ea:	6822      	ldr	r2, [r4, #0]
 80079ec:	0610      	lsls	r0, r2, #24
 80079ee:	f57f af65 	bpl.w	80078bc <_scanf_float+0x64>
 80079f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079f6:	e7f4      	b.n	80079e2 <_scanf_float+0x18a>
 80079f8:	f1ba 0f00 	cmp.w	sl, #0
 80079fc:	d10e      	bne.n	8007a1c <_scanf_float+0x1c4>
 80079fe:	f1b9 0f00 	cmp.w	r9, #0
 8007a02:	d10e      	bne.n	8007a22 <_scanf_float+0x1ca>
 8007a04:	6822      	ldr	r2, [r4, #0]
 8007a06:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a0a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a0e:	d108      	bne.n	8007a22 <_scanf_float+0x1ca>
 8007a10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a14:	f04f 0a01 	mov.w	sl, #1
 8007a18:	6022      	str	r2, [r4, #0]
 8007a1a:	e7e3      	b.n	80079e4 <_scanf_float+0x18c>
 8007a1c:	f1ba 0f02 	cmp.w	sl, #2
 8007a20:	d055      	beq.n	8007ace <_scanf_float+0x276>
 8007a22:	2d01      	cmp	r5, #1
 8007a24:	d002      	beq.n	8007a2c <_scanf_float+0x1d4>
 8007a26:	2d04      	cmp	r5, #4
 8007a28:	f47f af48 	bne.w	80078bc <_scanf_float+0x64>
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	b2ed      	uxtb	r5, r5
 8007a30:	e7d8      	b.n	80079e4 <_scanf_float+0x18c>
 8007a32:	f1ba 0f01 	cmp.w	sl, #1
 8007a36:	f47f af41 	bne.w	80078bc <_scanf_float+0x64>
 8007a3a:	f04f 0a02 	mov.w	sl, #2
 8007a3e:	e7d1      	b.n	80079e4 <_scanf_float+0x18c>
 8007a40:	b97d      	cbnz	r5, 8007a62 <_scanf_float+0x20a>
 8007a42:	f1b9 0f00 	cmp.w	r9, #0
 8007a46:	f47f af3c 	bne.w	80078c2 <_scanf_float+0x6a>
 8007a4a:	6822      	ldr	r2, [r4, #0]
 8007a4c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a50:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a54:	f47f af39 	bne.w	80078ca <_scanf_float+0x72>
 8007a58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a5c:	2501      	movs	r5, #1
 8007a5e:	6022      	str	r2, [r4, #0]
 8007a60:	e7c0      	b.n	80079e4 <_scanf_float+0x18c>
 8007a62:	2d03      	cmp	r5, #3
 8007a64:	d0e2      	beq.n	8007a2c <_scanf_float+0x1d4>
 8007a66:	2d05      	cmp	r5, #5
 8007a68:	e7de      	b.n	8007a28 <_scanf_float+0x1d0>
 8007a6a:	2d02      	cmp	r5, #2
 8007a6c:	f47f af26 	bne.w	80078bc <_scanf_float+0x64>
 8007a70:	2503      	movs	r5, #3
 8007a72:	e7b7      	b.n	80079e4 <_scanf_float+0x18c>
 8007a74:	2d06      	cmp	r5, #6
 8007a76:	f47f af21 	bne.w	80078bc <_scanf_float+0x64>
 8007a7a:	2507      	movs	r5, #7
 8007a7c:	e7b2      	b.n	80079e4 <_scanf_float+0x18c>
 8007a7e:	6822      	ldr	r2, [r4, #0]
 8007a80:	0591      	lsls	r1, r2, #22
 8007a82:	f57f af1b 	bpl.w	80078bc <_scanf_float+0x64>
 8007a86:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007a8a:	6022      	str	r2, [r4, #0]
 8007a8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a90:	e7a8      	b.n	80079e4 <_scanf_float+0x18c>
 8007a92:	6822      	ldr	r2, [r4, #0]
 8007a94:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007a98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007a9c:	d006      	beq.n	8007aac <_scanf_float+0x254>
 8007a9e:	0550      	lsls	r0, r2, #21
 8007aa0:	f57f af0c 	bpl.w	80078bc <_scanf_float+0x64>
 8007aa4:	f1b9 0f00 	cmp.w	r9, #0
 8007aa8:	f43f af0f 	beq.w	80078ca <_scanf_float+0x72>
 8007aac:	0591      	lsls	r1, r2, #22
 8007aae:	bf58      	it	pl
 8007ab0:	9901      	ldrpl	r1, [sp, #4]
 8007ab2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ab6:	bf58      	it	pl
 8007ab8:	eba9 0101 	subpl.w	r1, r9, r1
 8007abc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007ac0:	f04f 0900 	mov.w	r9, #0
 8007ac4:	bf58      	it	pl
 8007ac6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007aca:	6022      	str	r2, [r4, #0]
 8007acc:	e78a      	b.n	80079e4 <_scanf_float+0x18c>
 8007ace:	f04f 0a03 	mov.w	sl, #3
 8007ad2:	e787      	b.n	80079e4 <_scanf_float+0x18c>
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007adc:	4798      	blx	r3
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f43f aedf 	beq.w	80078a2 <_scanf_float+0x4a>
 8007ae4:	e6ea      	b.n	80078bc <_scanf_float+0x64>
 8007ae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007aea:	463a      	mov	r2, r7
 8007aec:	4640      	mov	r0, r8
 8007aee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007af2:	4798      	blx	r3
 8007af4:	6923      	ldr	r3, [r4, #16]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	6123      	str	r3, [r4, #16]
 8007afa:	e6ec      	b.n	80078d6 <_scanf_float+0x7e>
 8007afc:	1e6b      	subs	r3, r5, #1
 8007afe:	2b06      	cmp	r3, #6
 8007b00:	d825      	bhi.n	8007b4e <_scanf_float+0x2f6>
 8007b02:	2d02      	cmp	r5, #2
 8007b04:	d836      	bhi.n	8007b74 <_scanf_float+0x31c>
 8007b06:	455e      	cmp	r6, fp
 8007b08:	f67f aee8 	bls.w	80078dc <_scanf_float+0x84>
 8007b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b10:	463a      	mov	r2, r7
 8007b12:	4640      	mov	r0, r8
 8007b14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b18:	4798      	blx	r3
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	6123      	str	r3, [r4, #16]
 8007b20:	e7f1      	b.n	8007b06 <_scanf_float+0x2ae>
 8007b22:	9802      	ldr	r0, [sp, #8]
 8007b24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007b2c:	463a      	mov	r2, r7
 8007b2e:	9002      	str	r0, [sp, #8]
 8007b30:	4640      	mov	r0, r8
 8007b32:	4798      	blx	r3
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	6123      	str	r3, [r4, #16]
 8007b3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b3e:	fa5f fa8a 	uxtb.w	sl, sl
 8007b42:	f1ba 0f02 	cmp.w	sl, #2
 8007b46:	d1ec      	bne.n	8007b22 <_scanf_float+0x2ca>
 8007b48:	3d03      	subs	r5, #3
 8007b4a:	b2ed      	uxtb	r5, r5
 8007b4c:	1b76      	subs	r6, r6, r5
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	05da      	lsls	r2, r3, #23
 8007b52:	d52f      	bpl.n	8007bb4 <_scanf_float+0x35c>
 8007b54:	055b      	lsls	r3, r3, #21
 8007b56:	d510      	bpl.n	8007b7a <_scanf_float+0x322>
 8007b58:	455e      	cmp	r6, fp
 8007b5a:	f67f aebf 	bls.w	80078dc <_scanf_float+0x84>
 8007b5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b62:	463a      	mov	r2, r7
 8007b64:	4640      	mov	r0, r8
 8007b66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b6a:	4798      	blx	r3
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	6123      	str	r3, [r4, #16]
 8007b72:	e7f1      	b.n	8007b58 <_scanf_float+0x300>
 8007b74:	46aa      	mov	sl, r5
 8007b76:	9602      	str	r6, [sp, #8]
 8007b78:	e7df      	b.n	8007b3a <_scanf_float+0x2e2>
 8007b7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	2965      	cmp	r1, #101	; 0x65
 8007b82:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b86:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b8a:	6123      	str	r3, [r4, #16]
 8007b8c:	d00c      	beq.n	8007ba8 <_scanf_float+0x350>
 8007b8e:	2945      	cmp	r1, #69	; 0x45
 8007b90:	d00a      	beq.n	8007ba8 <_scanf_float+0x350>
 8007b92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b96:	463a      	mov	r2, r7
 8007b98:	4640      	mov	r0, r8
 8007b9a:	4798      	blx	r3
 8007b9c:	6923      	ldr	r3, [r4, #16]
 8007b9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	1eb5      	subs	r5, r6, #2
 8007ba6:	6123      	str	r3, [r4, #16]
 8007ba8:	463a      	mov	r2, r7
 8007baa:	4640      	mov	r0, r8
 8007bac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bb0:	4798      	blx	r3
 8007bb2:	462e      	mov	r6, r5
 8007bb4:	6825      	ldr	r5, [r4, #0]
 8007bb6:	f015 0510 	ands.w	r5, r5, #16
 8007bba:	d155      	bne.n	8007c68 <_scanf_float+0x410>
 8007bbc:	7035      	strb	r5, [r6, #0]
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bc8:	d11d      	bne.n	8007c06 <_scanf_float+0x3ae>
 8007bca:	9b01      	ldr	r3, [sp, #4]
 8007bcc:	454b      	cmp	r3, r9
 8007bce:	eba3 0209 	sub.w	r2, r3, r9
 8007bd2:	d125      	bne.n	8007c20 <_scanf_float+0x3c8>
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4659      	mov	r1, fp
 8007bd8:	4640      	mov	r0, r8
 8007bda:	f002 fd75 	bl	800a6c8 <_strtod_r>
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	f8d4 c000 	ldr.w	ip, [r4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f01c 0f02 	tst.w	ip, #2
 8007bea:	4606      	mov	r6, r0
 8007bec:	460f      	mov	r7, r1
 8007bee:	f103 0204 	add.w	r2, r3, #4
 8007bf2:	d020      	beq.n	8007c36 <_scanf_float+0x3de>
 8007bf4:	9903      	ldr	r1, [sp, #12]
 8007bf6:	600a      	str	r2, [r1, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	e9c3 6700 	strd	r6, r7, [r3]
 8007bfe:	68e3      	ldr	r3, [r4, #12]
 8007c00:	3301      	adds	r3, #1
 8007c02:	60e3      	str	r3, [r4, #12]
 8007c04:	e66b      	b.n	80078de <_scanf_float+0x86>
 8007c06:	9b04      	ldr	r3, [sp, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d0e3      	beq.n	8007bd4 <_scanf_float+0x37c>
 8007c0c:	9905      	ldr	r1, [sp, #20]
 8007c0e:	230a      	movs	r3, #10
 8007c10:	462a      	mov	r2, r5
 8007c12:	4640      	mov	r0, r8
 8007c14:	3101      	adds	r1, #1
 8007c16:	f002 fddb 	bl	800a7d0 <_strtol_r>
 8007c1a:	9b04      	ldr	r3, [sp, #16]
 8007c1c:	9e05      	ldr	r6, [sp, #20]
 8007c1e:	1ac2      	subs	r2, r0, r3
 8007c20:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007c24:	429e      	cmp	r6, r3
 8007c26:	bf28      	it	cs
 8007c28:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	490f      	ldr	r1, [pc, #60]	; (8007c6c <_scanf_float+0x414>)
 8007c30:	f000 f93e 	bl	8007eb0 <siprintf>
 8007c34:	e7ce      	b.n	8007bd4 <_scanf_float+0x37c>
 8007c36:	f01c 0f04 	tst.w	ip, #4
 8007c3a:	d1db      	bne.n	8007bf4 <_scanf_float+0x39c>
 8007c3c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007c40:	f8cc 2000 	str.w	r2, [ip]
 8007c44:	f8d3 8000 	ldr.w	r8, [r3]
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	f7f8 fede 	bl	8000a0c <__aeabi_dcmpun>
 8007c50:	b128      	cbz	r0, 8007c5e <_scanf_float+0x406>
 8007c52:	4807      	ldr	r0, [pc, #28]	; (8007c70 <_scanf_float+0x418>)
 8007c54:	f000 fb16 	bl	8008284 <nanf>
 8007c58:	f8c8 0000 	str.w	r0, [r8]
 8007c5c:	e7cf      	b.n	8007bfe <_scanf_float+0x3a6>
 8007c5e:	4630      	mov	r0, r6
 8007c60:	4639      	mov	r1, r7
 8007c62:	f7f8 ff31 	bl	8000ac8 <__aeabi_d2f>
 8007c66:	e7f7      	b.n	8007c58 <_scanf_float+0x400>
 8007c68:	2500      	movs	r5, #0
 8007c6a:	e638      	b.n	80078de <_scanf_float+0x86>
 8007c6c:	0800d26e 	.word	0x0800d26e
 8007c70:	0800d605 	.word	0x0800d605

08007c74 <std>:
 8007c74:	2300      	movs	r3, #0
 8007c76:	b510      	push	{r4, lr}
 8007c78:	4604      	mov	r4, r0
 8007c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c82:	6083      	str	r3, [r0, #8]
 8007c84:	8181      	strh	r1, [r0, #12]
 8007c86:	6643      	str	r3, [r0, #100]	; 0x64
 8007c88:	81c2      	strh	r2, [r0, #14]
 8007c8a:	6183      	str	r3, [r0, #24]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	2208      	movs	r2, #8
 8007c90:	305c      	adds	r0, #92	; 0x5c
 8007c92:	f000 fa05 	bl	80080a0 <memset>
 8007c96:	4b0d      	ldr	r3, [pc, #52]	; (8007ccc <std+0x58>)
 8007c98:	6224      	str	r4, [r4, #32]
 8007c9a:	6263      	str	r3, [r4, #36]	; 0x24
 8007c9c:	4b0c      	ldr	r3, [pc, #48]	; (8007cd0 <std+0x5c>)
 8007c9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ca0:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <std+0x60>)
 8007ca2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ca4:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <std+0x64>)
 8007ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8007ca8:	4b0c      	ldr	r3, [pc, #48]	; (8007cdc <std+0x68>)
 8007caa:	429c      	cmp	r4, r3
 8007cac:	d006      	beq.n	8007cbc <std+0x48>
 8007cae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007cb2:	4294      	cmp	r4, r2
 8007cb4:	d002      	beq.n	8007cbc <std+0x48>
 8007cb6:	33d0      	adds	r3, #208	; 0xd0
 8007cb8:	429c      	cmp	r4, r3
 8007cba:	d105      	bne.n	8007cc8 <std+0x54>
 8007cbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc4:	f000 babe 	b.w	8008244 <__retarget_lock_init_recursive>
 8007cc8:	bd10      	pop	{r4, pc}
 8007cca:	bf00      	nop
 8007ccc:	08007ef1 	.word	0x08007ef1
 8007cd0:	08007f13 	.word	0x08007f13
 8007cd4:	08007f4b 	.word	0x08007f4b
 8007cd8:	08007f6f 	.word	0x08007f6f
 8007cdc:	20001780 	.word	0x20001780

08007ce0 <stdio_exit_handler>:
 8007ce0:	4a02      	ldr	r2, [pc, #8]	; (8007cec <stdio_exit_handler+0xc>)
 8007ce2:	4903      	ldr	r1, [pc, #12]	; (8007cf0 <stdio_exit_handler+0x10>)
 8007ce4:	4803      	ldr	r0, [pc, #12]	; (8007cf4 <stdio_exit_handler+0x14>)
 8007ce6:	f000 b869 	b.w	8007dbc <_fwalk_sglue>
 8007cea:	bf00      	nop
 8007cec:	2000002c 	.word	0x2000002c
 8007cf0:	0800ae0d 	.word	0x0800ae0d
 8007cf4:	20000038 	.word	0x20000038

08007cf8 <cleanup_stdio>:
 8007cf8:	6841      	ldr	r1, [r0, #4]
 8007cfa:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <cleanup_stdio+0x34>)
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	4299      	cmp	r1, r3
 8007d00:	4604      	mov	r4, r0
 8007d02:	d001      	beq.n	8007d08 <cleanup_stdio+0x10>
 8007d04:	f003 f882 	bl	800ae0c <_fflush_r>
 8007d08:	68a1      	ldr	r1, [r4, #8]
 8007d0a:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <cleanup_stdio+0x38>)
 8007d0c:	4299      	cmp	r1, r3
 8007d0e:	d002      	beq.n	8007d16 <cleanup_stdio+0x1e>
 8007d10:	4620      	mov	r0, r4
 8007d12:	f003 f87b 	bl	800ae0c <_fflush_r>
 8007d16:	68e1      	ldr	r1, [r4, #12]
 8007d18:	4b06      	ldr	r3, [pc, #24]	; (8007d34 <cleanup_stdio+0x3c>)
 8007d1a:	4299      	cmp	r1, r3
 8007d1c:	d004      	beq.n	8007d28 <cleanup_stdio+0x30>
 8007d1e:	4620      	mov	r0, r4
 8007d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d24:	f003 b872 	b.w	800ae0c <_fflush_r>
 8007d28:	bd10      	pop	{r4, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20001780 	.word	0x20001780
 8007d30:	200017e8 	.word	0x200017e8
 8007d34:	20001850 	.word	0x20001850

08007d38 <global_stdio_init.part.0>:
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	4b0b      	ldr	r3, [pc, #44]	; (8007d68 <global_stdio_init.part.0+0x30>)
 8007d3c:	4c0b      	ldr	r4, [pc, #44]	; (8007d6c <global_stdio_init.part.0+0x34>)
 8007d3e:	4a0c      	ldr	r2, [pc, #48]	; (8007d70 <global_stdio_init.part.0+0x38>)
 8007d40:	4620      	mov	r0, r4
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	2104      	movs	r1, #4
 8007d46:	2200      	movs	r2, #0
 8007d48:	f7ff ff94 	bl	8007c74 <std>
 8007d4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d50:	2201      	movs	r2, #1
 8007d52:	2109      	movs	r1, #9
 8007d54:	f7ff ff8e 	bl	8007c74 <std>
 8007d58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d62:	2112      	movs	r1, #18
 8007d64:	f7ff bf86 	b.w	8007c74 <std>
 8007d68:	200018b8 	.word	0x200018b8
 8007d6c:	20001780 	.word	0x20001780
 8007d70:	08007ce1 	.word	0x08007ce1

08007d74 <__sfp_lock_acquire>:
 8007d74:	4801      	ldr	r0, [pc, #4]	; (8007d7c <__sfp_lock_acquire+0x8>)
 8007d76:	f000 ba66 	b.w	8008246 <__retarget_lock_acquire_recursive>
 8007d7a:	bf00      	nop
 8007d7c:	200018c1 	.word	0x200018c1

08007d80 <__sfp_lock_release>:
 8007d80:	4801      	ldr	r0, [pc, #4]	; (8007d88 <__sfp_lock_release+0x8>)
 8007d82:	f000 ba61 	b.w	8008248 <__retarget_lock_release_recursive>
 8007d86:	bf00      	nop
 8007d88:	200018c1 	.word	0x200018c1

08007d8c <__sinit>:
 8007d8c:	b510      	push	{r4, lr}
 8007d8e:	4604      	mov	r4, r0
 8007d90:	f7ff fff0 	bl	8007d74 <__sfp_lock_acquire>
 8007d94:	6a23      	ldr	r3, [r4, #32]
 8007d96:	b11b      	cbz	r3, 8007da0 <__sinit+0x14>
 8007d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d9c:	f7ff bff0 	b.w	8007d80 <__sfp_lock_release>
 8007da0:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <__sinit+0x28>)
 8007da2:	6223      	str	r3, [r4, #32]
 8007da4:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <__sinit+0x2c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1f5      	bne.n	8007d98 <__sinit+0xc>
 8007dac:	f7ff ffc4 	bl	8007d38 <global_stdio_init.part.0>
 8007db0:	e7f2      	b.n	8007d98 <__sinit+0xc>
 8007db2:	bf00      	nop
 8007db4:	08007cf9 	.word	0x08007cf9
 8007db8:	200018b8 	.word	0x200018b8

08007dbc <_fwalk_sglue>:
 8007dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	4688      	mov	r8, r1
 8007dc4:	4614      	mov	r4, r2
 8007dc6:	2600      	movs	r6, #0
 8007dc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dcc:	f1b9 0901 	subs.w	r9, r9, #1
 8007dd0:	d505      	bpl.n	8007dde <_fwalk_sglue+0x22>
 8007dd2:	6824      	ldr	r4, [r4, #0]
 8007dd4:	2c00      	cmp	r4, #0
 8007dd6:	d1f7      	bne.n	8007dc8 <_fwalk_sglue+0xc>
 8007dd8:	4630      	mov	r0, r6
 8007dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dde:	89ab      	ldrh	r3, [r5, #12]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d907      	bls.n	8007df4 <_fwalk_sglue+0x38>
 8007de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007de8:	3301      	adds	r3, #1
 8007dea:	d003      	beq.n	8007df4 <_fwalk_sglue+0x38>
 8007dec:	4629      	mov	r1, r5
 8007dee:	4638      	mov	r0, r7
 8007df0:	47c0      	blx	r8
 8007df2:	4306      	orrs	r6, r0
 8007df4:	3568      	adds	r5, #104	; 0x68
 8007df6:	e7e9      	b.n	8007dcc <_fwalk_sglue+0x10>

08007df8 <_puts_r>:
 8007df8:	6a03      	ldr	r3, [r0, #32]
 8007dfa:	b570      	push	{r4, r5, r6, lr}
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	460e      	mov	r6, r1
 8007e00:	6884      	ldr	r4, [r0, #8]
 8007e02:	b90b      	cbnz	r3, 8007e08 <_puts_r+0x10>
 8007e04:	f7ff ffc2 	bl	8007d8c <__sinit>
 8007e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e0a:	07db      	lsls	r3, r3, #31
 8007e0c:	d405      	bmi.n	8007e1a <_puts_r+0x22>
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	0598      	lsls	r0, r3, #22
 8007e12:	d402      	bmi.n	8007e1a <_puts_r+0x22>
 8007e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e16:	f000 fa16 	bl	8008246 <__retarget_lock_acquire_recursive>
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	0719      	lsls	r1, r3, #28
 8007e1e:	d513      	bpl.n	8007e48 <_puts_r+0x50>
 8007e20:	6923      	ldr	r3, [r4, #16]
 8007e22:	b18b      	cbz	r3, 8007e48 <_puts_r+0x50>
 8007e24:	3e01      	subs	r6, #1
 8007e26:	68a3      	ldr	r3, [r4, #8]
 8007e28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	60a3      	str	r3, [r4, #8]
 8007e30:	b9e9      	cbnz	r1, 8007e6e <_puts_r+0x76>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	da2e      	bge.n	8007e94 <_puts_r+0x9c>
 8007e36:	4622      	mov	r2, r4
 8007e38:	210a      	movs	r1, #10
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f000 f89b 	bl	8007f76 <__swbuf_r>
 8007e40:	3001      	adds	r0, #1
 8007e42:	d007      	beq.n	8007e54 <_puts_r+0x5c>
 8007e44:	250a      	movs	r5, #10
 8007e46:	e007      	b.n	8007e58 <_puts_r+0x60>
 8007e48:	4621      	mov	r1, r4
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f000 f8d0 	bl	8007ff0 <__swsetup_r>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d0e7      	beq.n	8007e24 <_puts_r+0x2c>
 8007e54:	f04f 35ff 	mov.w	r5, #4294967295
 8007e58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e5a:	07da      	lsls	r2, r3, #31
 8007e5c:	d405      	bmi.n	8007e6a <_puts_r+0x72>
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	059b      	lsls	r3, r3, #22
 8007e62:	d402      	bmi.n	8007e6a <_puts_r+0x72>
 8007e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e66:	f000 f9ef 	bl	8008248 <__retarget_lock_release_recursive>
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	bd70      	pop	{r4, r5, r6, pc}
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	da04      	bge.n	8007e7c <_puts_r+0x84>
 8007e72:	69a2      	ldr	r2, [r4, #24]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	dc06      	bgt.n	8007e86 <_puts_r+0x8e>
 8007e78:	290a      	cmp	r1, #10
 8007e7a:	d004      	beq.n	8007e86 <_puts_r+0x8e>
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	6022      	str	r2, [r4, #0]
 8007e82:	7019      	strb	r1, [r3, #0]
 8007e84:	e7cf      	b.n	8007e26 <_puts_r+0x2e>
 8007e86:	4622      	mov	r2, r4
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f000 f874 	bl	8007f76 <__swbuf_r>
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d1c9      	bne.n	8007e26 <_puts_r+0x2e>
 8007e92:	e7df      	b.n	8007e54 <_puts_r+0x5c>
 8007e94:	250a      	movs	r5, #10
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	6022      	str	r2, [r4, #0]
 8007e9c:	701d      	strb	r5, [r3, #0]
 8007e9e:	e7db      	b.n	8007e58 <_puts_r+0x60>

08007ea0 <puts>:
 8007ea0:	4b02      	ldr	r3, [pc, #8]	; (8007eac <puts+0xc>)
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	6818      	ldr	r0, [r3, #0]
 8007ea6:	f7ff bfa7 	b.w	8007df8 <_puts_r>
 8007eaa:	bf00      	nop
 8007eac:	20000084 	.word	0x20000084

08007eb0 <siprintf>:
 8007eb0:	b40e      	push	{r1, r2, r3}
 8007eb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eb6:	b500      	push	{lr}
 8007eb8:	b09c      	sub	sp, #112	; 0x70
 8007eba:	ab1d      	add	r3, sp, #116	; 0x74
 8007ebc:	9002      	str	r0, [sp, #8]
 8007ebe:	9006      	str	r0, [sp, #24]
 8007ec0:	9107      	str	r1, [sp, #28]
 8007ec2:	9104      	str	r1, [sp, #16]
 8007ec4:	4808      	ldr	r0, [pc, #32]	; (8007ee8 <siprintf+0x38>)
 8007ec6:	4909      	ldr	r1, [pc, #36]	; (8007eec <siprintf+0x3c>)
 8007ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ecc:	9105      	str	r1, [sp, #20]
 8007ece:	6800      	ldr	r0, [r0, #0]
 8007ed0:	a902      	add	r1, sp, #8
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	f002 fcd8 	bl	800a888 <_svfiprintf_r>
 8007ed8:	2200      	movs	r2, #0
 8007eda:	9b02      	ldr	r3, [sp, #8]
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	b01c      	add	sp, #112	; 0x70
 8007ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ee4:	b003      	add	sp, #12
 8007ee6:	4770      	bx	lr
 8007ee8:	20000084 	.word	0x20000084
 8007eec:	ffff0208 	.word	0xffff0208

08007ef0 <__sread>:
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef8:	f000 f956 	bl	80081a8 <_read_r>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	bfab      	itete	ge
 8007f00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f02:	89a3      	ldrhlt	r3, [r4, #12]
 8007f04:	181b      	addge	r3, r3, r0
 8007f06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f0a:	bfac      	ite	ge
 8007f0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f0e:	81a3      	strhlt	r3, [r4, #12]
 8007f10:	bd10      	pop	{r4, pc}

08007f12 <__swrite>:
 8007f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f16:	461f      	mov	r7, r3
 8007f18:	898b      	ldrh	r3, [r1, #12]
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	05db      	lsls	r3, r3, #23
 8007f1e:	460c      	mov	r4, r1
 8007f20:	4616      	mov	r6, r2
 8007f22:	d505      	bpl.n	8007f30 <__swrite+0x1e>
 8007f24:	2302      	movs	r3, #2
 8007f26:	2200      	movs	r2, #0
 8007f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2c:	f000 f92a 	bl	8008184 <_lseek_r>
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	4632      	mov	r2, r6
 8007f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f38:	81a3      	strh	r3, [r4, #12]
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	463b      	mov	r3, r7
 8007f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f46:	f000 b941 	b.w	80081cc <_write_r>

08007f4a <__sseek>:
 8007f4a:	b510      	push	{r4, lr}
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f52:	f000 f917 	bl	8008184 <_lseek_r>
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	bf15      	itete	ne
 8007f5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f66:	81a3      	strheq	r3, [r4, #12]
 8007f68:	bf18      	it	ne
 8007f6a:	81a3      	strhne	r3, [r4, #12]
 8007f6c:	bd10      	pop	{r4, pc}

08007f6e <__sclose>:
 8007f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f72:	f000 b8a1 	b.w	80080b8 <_close_r>

08007f76 <__swbuf_r>:
 8007f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f78:	460e      	mov	r6, r1
 8007f7a:	4614      	mov	r4, r2
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	b118      	cbz	r0, 8007f88 <__swbuf_r+0x12>
 8007f80:	6a03      	ldr	r3, [r0, #32]
 8007f82:	b90b      	cbnz	r3, 8007f88 <__swbuf_r+0x12>
 8007f84:	f7ff ff02 	bl	8007d8c <__sinit>
 8007f88:	69a3      	ldr	r3, [r4, #24]
 8007f8a:	60a3      	str	r3, [r4, #8]
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	071a      	lsls	r2, r3, #28
 8007f90:	d525      	bpl.n	8007fde <__swbuf_r+0x68>
 8007f92:	6923      	ldr	r3, [r4, #16]
 8007f94:	b31b      	cbz	r3, 8007fde <__swbuf_r+0x68>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	6922      	ldr	r2, [r4, #16]
 8007f9a:	b2f6      	uxtb	r6, r6
 8007f9c:	1a98      	subs	r0, r3, r2
 8007f9e:	6963      	ldr	r3, [r4, #20]
 8007fa0:	4637      	mov	r7, r6
 8007fa2:	4283      	cmp	r3, r0
 8007fa4:	dc04      	bgt.n	8007fb0 <__swbuf_r+0x3a>
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	4628      	mov	r0, r5
 8007faa:	f002 ff2f 	bl	800ae0c <_fflush_r>
 8007fae:	b9e0      	cbnz	r0, 8007fea <__swbuf_r+0x74>
 8007fb0:	68a3      	ldr	r3, [r4, #8]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	60a3      	str	r3, [r4, #8]
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	6022      	str	r2, [r4, #0]
 8007fbc:	701e      	strb	r6, [r3, #0]
 8007fbe:	6962      	ldr	r2, [r4, #20]
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d004      	beq.n	8007fd0 <__swbuf_r+0x5a>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	07db      	lsls	r3, r3, #31
 8007fca:	d506      	bpl.n	8007fda <__swbuf_r+0x64>
 8007fcc:	2e0a      	cmp	r6, #10
 8007fce:	d104      	bne.n	8007fda <__swbuf_r+0x64>
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f002 ff1a 	bl	800ae0c <_fflush_r>
 8007fd8:	b938      	cbnz	r0, 8007fea <__swbuf_r+0x74>
 8007fda:	4638      	mov	r0, r7
 8007fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f000 f805 	bl	8007ff0 <__swsetup_r>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d0d5      	beq.n	8007f96 <__swbuf_r+0x20>
 8007fea:	f04f 37ff 	mov.w	r7, #4294967295
 8007fee:	e7f4      	b.n	8007fda <__swbuf_r+0x64>

08007ff0 <__swsetup_r>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	4b2a      	ldr	r3, [pc, #168]	; (800809c <__swsetup_r+0xac>)
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	6818      	ldr	r0, [r3, #0]
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	b118      	cbz	r0, 8008004 <__swsetup_r+0x14>
 8007ffc:	6a03      	ldr	r3, [r0, #32]
 8007ffe:	b90b      	cbnz	r3, 8008004 <__swsetup_r+0x14>
 8008000:	f7ff fec4 	bl	8007d8c <__sinit>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800800a:	0718      	lsls	r0, r3, #28
 800800c:	d422      	bmi.n	8008054 <__swsetup_r+0x64>
 800800e:	06d9      	lsls	r1, r3, #27
 8008010:	d407      	bmi.n	8008022 <__swsetup_r+0x32>
 8008012:	2309      	movs	r3, #9
 8008014:	602b      	str	r3, [r5, #0]
 8008016:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800801a:	f04f 30ff 	mov.w	r0, #4294967295
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	e034      	b.n	800808c <__swsetup_r+0x9c>
 8008022:	0758      	lsls	r0, r3, #29
 8008024:	d512      	bpl.n	800804c <__swsetup_r+0x5c>
 8008026:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008028:	b141      	cbz	r1, 800803c <__swsetup_r+0x4c>
 800802a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800802e:	4299      	cmp	r1, r3
 8008030:	d002      	beq.n	8008038 <__swsetup_r+0x48>
 8008032:	4628      	mov	r0, r5
 8008034:	f000 ff98 	bl	8008f68 <_free_r>
 8008038:	2300      	movs	r3, #0
 800803a:	6363      	str	r3, [r4, #52]	; 0x34
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008042:	81a3      	strh	r3, [r4, #12]
 8008044:	2300      	movs	r3, #0
 8008046:	6063      	str	r3, [r4, #4]
 8008048:	6923      	ldr	r3, [r4, #16]
 800804a:	6023      	str	r3, [r4, #0]
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	f043 0308 	orr.w	r3, r3, #8
 8008052:	81a3      	strh	r3, [r4, #12]
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	b94b      	cbnz	r3, 800806c <__swsetup_r+0x7c>
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800805e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008062:	d003      	beq.n	800806c <__swsetup_r+0x7c>
 8008064:	4621      	mov	r1, r4
 8008066:	4628      	mov	r0, r5
 8008068:	f002 ff1d 	bl	800aea6 <__smakebuf_r>
 800806c:	89a0      	ldrh	r0, [r4, #12]
 800806e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008072:	f010 0301 	ands.w	r3, r0, #1
 8008076:	d00a      	beq.n	800808e <__swsetup_r+0x9e>
 8008078:	2300      	movs	r3, #0
 800807a:	60a3      	str	r3, [r4, #8]
 800807c:	6963      	ldr	r3, [r4, #20]
 800807e:	425b      	negs	r3, r3
 8008080:	61a3      	str	r3, [r4, #24]
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	b943      	cbnz	r3, 8008098 <__swsetup_r+0xa8>
 8008086:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800808a:	d1c4      	bne.n	8008016 <__swsetup_r+0x26>
 800808c:	bd38      	pop	{r3, r4, r5, pc}
 800808e:	0781      	lsls	r1, r0, #30
 8008090:	bf58      	it	pl
 8008092:	6963      	ldrpl	r3, [r4, #20]
 8008094:	60a3      	str	r3, [r4, #8]
 8008096:	e7f4      	b.n	8008082 <__swsetup_r+0x92>
 8008098:	2000      	movs	r0, #0
 800809a:	e7f7      	b.n	800808c <__swsetup_r+0x9c>
 800809c:	20000084 	.word	0x20000084

080080a0 <memset>:
 80080a0:	4603      	mov	r3, r0
 80080a2:	4402      	add	r2, r0
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d100      	bne.n	80080aa <memset+0xa>
 80080a8:	4770      	bx	lr
 80080aa:	f803 1b01 	strb.w	r1, [r3], #1
 80080ae:	e7f9      	b.n	80080a4 <memset+0x4>

080080b0 <_localeconv_r>:
 80080b0:	4800      	ldr	r0, [pc, #0]	; (80080b4 <_localeconv_r+0x4>)
 80080b2:	4770      	bx	lr
 80080b4:	20000178 	.word	0x20000178

080080b8 <_close_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	2300      	movs	r3, #0
 80080bc:	4d05      	ldr	r5, [pc, #20]	; (80080d4 <_close_r+0x1c>)
 80080be:	4604      	mov	r4, r0
 80080c0:	4608      	mov	r0, r1
 80080c2:	602b      	str	r3, [r5, #0]
 80080c4:	f7fb fcfc 	bl	8003ac0 <_close>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d102      	bne.n	80080d2 <_close_r+0x1a>
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	b103      	cbz	r3, 80080d2 <_close_r+0x1a>
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	200018bc 	.word	0x200018bc

080080d8 <_reclaim_reent>:
 80080d8:	4b29      	ldr	r3, [pc, #164]	; (8008180 <_reclaim_reent+0xa8>)
 80080da:	b570      	push	{r4, r5, r6, lr}
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4604      	mov	r4, r0
 80080e0:	4283      	cmp	r3, r0
 80080e2:	d04b      	beq.n	800817c <_reclaim_reent+0xa4>
 80080e4:	69c3      	ldr	r3, [r0, #28]
 80080e6:	b143      	cbz	r3, 80080fa <_reclaim_reent+0x22>
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d144      	bne.n	8008178 <_reclaim_reent+0xa0>
 80080ee:	69e3      	ldr	r3, [r4, #28]
 80080f0:	6819      	ldr	r1, [r3, #0]
 80080f2:	b111      	cbz	r1, 80080fa <_reclaim_reent+0x22>
 80080f4:	4620      	mov	r0, r4
 80080f6:	f000 ff37 	bl	8008f68 <_free_r>
 80080fa:	6961      	ldr	r1, [r4, #20]
 80080fc:	b111      	cbz	r1, 8008104 <_reclaim_reent+0x2c>
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 ff32 	bl	8008f68 <_free_r>
 8008104:	69e1      	ldr	r1, [r4, #28]
 8008106:	b111      	cbz	r1, 800810e <_reclaim_reent+0x36>
 8008108:	4620      	mov	r0, r4
 800810a:	f000 ff2d 	bl	8008f68 <_free_r>
 800810e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008110:	b111      	cbz	r1, 8008118 <_reclaim_reent+0x40>
 8008112:	4620      	mov	r0, r4
 8008114:	f000 ff28 	bl	8008f68 <_free_r>
 8008118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800811a:	b111      	cbz	r1, 8008122 <_reclaim_reent+0x4a>
 800811c:	4620      	mov	r0, r4
 800811e:	f000 ff23 	bl	8008f68 <_free_r>
 8008122:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008124:	b111      	cbz	r1, 800812c <_reclaim_reent+0x54>
 8008126:	4620      	mov	r0, r4
 8008128:	f000 ff1e 	bl	8008f68 <_free_r>
 800812c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800812e:	b111      	cbz	r1, 8008136 <_reclaim_reent+0x5e>
 8008130:	4620      	mov	r0, r4
 8008132:	f000 ff19 	bl	8008f68 <_free_r>
 8008136:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008138:	b111      	cbz	r1, 8008140 <_reclaim_reent+0x68>
 800813a:	4620      	mov	r0, r4
 800813c:	f000 ff14 	bl	8008f68 <_free_r>
 8008140:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008142:	b111      	cbz	r1, 800814a <_reclaim_reent+0x72>
 8008144:	4620      	mov	r0, r4
 8008146:	f000 ff0f 	bl	8008f68 <_free_r>
 800814a:	6a23      	ldr	r3, [r4, #32]
 800814c:	b1b3      	cbz	r3, 800817c <_reclaim_reent+0xa4>
 800814e:	4620      	mov	r0, r4
 8008150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008154:	4718      	bx	r3
 8008156:	5949      	ldr	r1, [r1, r5]
 8008158:	b941      	cbnz	r1, 800816c <_reclaim_reent+0x94>
 800815a:	3504      	adds	r5, #4
 800815c:	69e3      	ldr	r3, [r4, #28]
 800815e:	2d80      	cmp	r5, #128	; 0x80
 8008160:	68d9      	ldr	r1, [r3, #12]
 8008162:	d1f8      	bne.n	8008156 <_reclaim_reent+0x7e>
 8008164:	4620      	mov	r0, r4
 8008166:	f000 feff 	bl	8008f68 <_free_r>
 800816a:	e7c0      	b.n	80080ee <_reclaim_reent+0x16>
 800816c:	680e      	ldr	r6, [r1, #0]
 800816e:	4620      	mov	r0, r4
 8008170:	f000 fefa 	bl	8008f68 <_free_r>
 8008174:	4631      	mov	r1, r6
 8008176:	e7ef      	b.n	8008158 <_reclaim_reent+0x80>
 8008178:	2500      	movs	r5, #0
 800817a:	e7ef      	b.n	800815c <_reclaim_reent+0x84>
 800817c:	bd70      	pop	{r4, r5, r6, pc}
 800817e:	bf00      	nop
 8008180:	20000084 	.word	0x20000084

08008184 <_lseek_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4604      	mov	r4, r0
 8008188:	4608      	mov	r0, r1
 800818a:	4611      	mov	r1, r2
 800818c:	2200      	movs	r2, #0
 800818e:	4d05      	ldr	r5, [pc, #20]	; (80081a4 <_lseek_r+0x20>)
 8008190:	602a      	str	r2, [r5, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	f7fb fcb8 	bl	8003b08 <_lseek>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_lseek_r+0x1e>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_lseek_r+0x1e>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	200018bc 	.word	0x200018bc

080081a8 <_read_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4604      	mov	r4, r0
 80081ac:	4608      	mov	r0, r1
 80081ae:	4611      	mov	r1, r2
 80081b0:	2200      	movs	r2, #0
 80081b2:	4d05      	ldr	r5, [pc, #20]	; (80081c8 <_read_r+0x20>)
 80081b4:	602a      	str	r2, [r5, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f7fb fc65 	bl	8003a86 <_read>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_read_r+0x1e>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_read_r+0x1e>
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	200018bc 	.word	0x200018bc

080081cc <_write_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4604      	mov	r4, r0
 80081d0:	4608      	mov	r0, r1
 80081d2:	4611      	mov	r1, r2
 80081d4:	2200      	movs	r2, #0
 80081d6:	4d05      	ldr	r5, [pc, #20]	; (80081ec <_write_r+0x20>)
 80081d8:	602a      	str	r2, [r5, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	f7fa fdc4 	bl	8002d68 <_write>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_write_r+0x1e>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_write_r+0x1e>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	200018bc 	.word	0x200018bc

080081f0 <__errno>:
 80081f0:	4b01      	ldr	r3, [pc, #4]	; (80081f8 <__errno+0x8>)
 80081f2:	6818      	ldr	r0, [r3, #0]
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	20000084 	.word	0x20000084

080081fc <__libc_init_array>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	2600      	movs	r6, #0
 8008200:	4d0c      	ldr	r5, [pc, #48]	; (8008234 <__libc_init_array+0x38>)
 8008202:	4c0d      	ldr	r4, [pc, #52]	; (8008238 <__libc_init_array+0x3c>)
 8008204:	1b64      	subs	r4, r4, r5
 8008206:	10a4      	asrs	r4, r4, #2
 8008208:	42a6      	cmp	r6, r4
 800820a:	d109      	bne.n	8008220 <__libc_init_array+0x24>
 800820c:	f004 fada 	bl	800c7c4 <_init>
 8008210:	2600      	movs	r6, #0
 8008212:	4d0a      	ldr	r5, [pc, #40]	; (800823c <__libc_init_array+0x40>)
 8008214:	4c0a      	ldr	r4, [pc, #40]	; (8008240 <__libc_init_array+0x44>)
 8008216:	1b64      	subs	r4, r4, r5
 8008218:	10a4      	asrs	r4, r4, #2
 800821a:	42a6      	cmp	r6, r4
 800821c:	d105      	bne.n	800822a <__libc_init_array+0x2e>
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	f855 3b04 	ldr.w	r3, [r5], #4
 8008224:	4798      	blx	r3
 8008226:	3601      	adds	r6, #1
 8008228:	e7ee      	b.n	8008208 <__libc_init_array+0xc>
 800822a:	f855 3b04 	ldr.w	r3, [r5], #4
 800822e:	4798      	blx	r3
 8008230:	3601      	adds	r6, #1
 8008232:	e7f2      	b.n	800821a <__libc_init_array+0x1e>
 8008234:	0800d698 	.word	0x0800d698
 8008238:	0800d698 	.word	0x0800d698
 800823c:	0800d698 	.word	0x0800d698
 8008240:	0800d69c 	.word	0x0800d69c

08008244 <__retarget_lock_init_recursive>:
 8008244:	4770      	bx	lr

08008246 <__retarget_lock_acquire_recursive>:
 8008246:	4770      	bx	lr

08008248 <__retarget_lock_release_recursive>:
 8008248:	4770      	bx	lr

0800824a <memchr>:
 800824a:	4603      	mov	r3, r0
 800824c:	b510      	push	{r4, lr}
 800824e:	b2c9      	uxtb	r1, r1
 8008250:	4402      	add	r2, r0
 8008252:	4293      	cmp	r3, r2
 8008254:	4618      	mov	r0, r3
 8008256:	d101      	bne.n	800825c <memchr+0x12>
 8008258:	2000      	movs	r0, #0
 800825a:	e003      	b.n	8008264 <memchr+0x1a>
 800825c:	7804      	ldrb	r4, [r0, #0]
 800825e:	3301      	adds	r3, #1
 8008260:	428c      	cmp	r4, r1
 8008262:	d1f6      	bne.n	8008252 <memchr+0x8>
 8008264:	bd10      	pop	{r4, pc}

08008266 <memcpy>:
 8008266:	440a      	add	r2, r1
 8008268:	4291      	cmp	r1, r2
 800826a:	f100 33ff 	add.w	r3, r0, #4294967295
 800826e:	d100      	bne.n	8008272 <memcpy+0xc>
 8008270:	4770      	bx	lr
 8008272:	b510      	push	{r4, lr}
 8008274:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008278:	4291      	cmp	r1, r2
 800827a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800827e:	d1f9      	bne.n	8008274 <memcpy+0xe>
 8008280:	bd10      	pop	{r4, pc}
	...

08008284 <nanf>:
 8008284:	4800      	ldr	r0, [pc, #0]	; (8008288 <nanf+0x4>)
 8008286:	4770      	bx	lr
 8008288:	7fc00000 	.word	0x7fc00000

0800828c <quorem>:
 800828c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	6903      	ldr	r3, [r0, #16]
 8008292:	690c      	ldr	r4, [r1, #16]
 8008294:	4607      	mov	r7, r0
 8008296:	42a3      	cmp	r3, r4
 8008298:	db7f      	blt.n	800839a <quorem+0x10e>
 800829a:	3c01      	subs	r4, #1
 800829c:	f100 0514 	add.w	r5, r0, #20
 80082a0:	f101 0814 	add.w	r8, r1, #20
 80082a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082a8:	9301      	str	r3, [sp, #4]
 80082aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082b2:	3301      	adds	r3, #1
 80082b4:	429a      	cmp	r2, r3
 80082b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80082ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80082be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082c2:	d331      	bcc.n	8008328 <quorem+0x9c>
 80082c4:	f04f 0e00 	mov.w	lr, #0
 80082c8:	4640      	mov	r0, r8
 80082ca:	46ac      	mov	ip, r5
 80082cc:	46f2      	mov	sl, lr
 80082ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80082d2:	b293      	uxth	r3, r2
 80082d4:	fb06 e303 	mla	r3, r6, r3, lr
 80082d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082dc:	0c1a      	lsrs	r2, r3, #16
 80082de:	b29b      	uxth	r3, r3
 80082e0:	fb06 220e 	mla	r2, r6, lr, r2
 80082e4:	ebaa 0303 	sub.w	r3, sl, r3
 80082e8:	f8dc a000 	ldr.w	sl, [ip]
 80082ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082f0:	fa1f fa8a 	uxth.w	sl, sl
 80082f4:	4453      	add	r3, sl
 80082f6:	f8dc a000 	ldr.w	sl, [ip]
 80082fa:	b292      	uxth	r2, r2
 80082fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008304:	b29b      	uxth	r3, r3
 8008306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800830a:	4581      	cmp	r9, r0
 800830c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008310:	f84c 3b04 	str.w	r3, [ip], #4
 8008314:	d2db      	bcs.n	80082ce <quorem+0x42>
 8008316:	f855 300b 	ldr.w	r3, [r5, fp]
 800831a:	b92b      	cbnz	r3, 8008328 <quorem+0x9c>
 800831c:	9b01      	ldr	r3, [sp, #4]
 800831e:	3b04      	subs	r3, #4
 8008320:	429d      	cmp	r5, r3
 8008322:	461a      	mov	r2, r3
 8008324:	d32d      	bcc.n	8008382 <quorem+0xf6>
 8008326:	613c      	str	r4, [r7, #16]
 8008328:	4638      	mov	r0, r7
 800832a:	f001 f9dd 	bl	80096e8 <__mcmp>
 800832e:	2800      	cmp	r0, #0
 8008330:	db23      	blt.n	800837a <quorem+0xee>
 8008332:	4629      	mov	r1, r5
 8008334:	2000      	movs	r0, #0
 8008336:	3601      	adds	r6, #1
 8008338:	f858 2b04 	ldr.w	r2, [r8], #4
 800833c:	f8d1 c000 	ldr.w	ip, [r1]
 8008340:	b293      	uxth	r3, r2
 8008342:	1ac3      	subs	r3, r0, r3
 8008344:	0c12      	lsrs	r2, r2, #16
 8008346:	fa1f f08c 	uxth.w	r0, ip
 800834a:	4403      	add	r3, r0
 800834c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008350:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008354:	b29b      	uxth	r3, r3
 8008356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800835a:	45c1      	cmp	r9, r8
 800835c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008360:	f841 3b04 	str.w	r3, [r1], #4
 8008364:	d2e8      	bcs.n	8008338 <quorem+0xac>
 8008366:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800836a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800836e:	b922      	cbnz	r2, 800837a <quorem+0xee>
 8008370:	3b04      	subs	r3, #4
 8008372:	429d      	cmp	r5, r3
 8008374:	461a      	mov	r2, r3
 8008376:	d30a      	bcc.n	800838e <quorem+0x102>
 8008378:	613c      	str	r4, [r7, #16]
 800837a:	4630      	mov	r0, r6
 800837c:	b003      	add	sp, #12
 800837e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008382:	6812      	ldr	r2, [r2, #0]
 8008384:	3b04      	subs	r3, #4
 8008386:	2a00      	cmp	r2, #0
 8008388:	d1cd      	bne.n	8008326 <quorem+0x9a>
 800838a:	3c01      	subs	r4, #1
 800838c:	e7c8      	b.n	8008320 <quorem+0x94>
 800838e:	6812      	ldr	r2, [r2, #0]
 8008390:	3b04      	subs	r3, #4
 8008392:	2a00      	cmp	r2, #0
 8008394:	d1f0      	bne.n	8008378 <quorem+0xec>
 8008396:	3c01      	subs	r4, #1
 8008398:	e7eb      	b.n	8008372 <quorem+0xe6>
 800839a:	2000      	movs	r0, #0
 800839c:	e7ee      	b.n	800837c <quorem+0xf0>
	...

080083a0 <_dtoa_r>:
 80083a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	4616      	mov	r6, r2
 80083a6:	461f      	mov	r7, r3
 80083a8:	69c4      	ldr	r4, [r0, #28]
 80083aa:	b099      	sub	sp, #100	; 0x64
 80083ac:	4605      	mov	r5, r0
 80083ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80083b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80083b6:	b974      	cbnz	r4, 80083d6 <_dtoa_r+0x36>
 80083b8:	2010      	movs	r0, #16
 80083ba:	f000 fe1d 	bl	8008ff8 <malloc>
 80083be:	4602      	mov	r2, r0
 80083c0:	61e8      	str	r0, [r5, #28]
 80083c2:	b920      	cbnz	r0, 80083ce <_dtoa_r+0x2e>
 80083c4:	21ef      	movs	r1, #239	; 0xef
 80083c6:	4bac      	ldr	r3, [pc, #688]	; (8008678 <_dtoa_r+0x2d8>)
 80083c8:	48ac      	ldr	r0, [pc, #688]	; (800867c <_dtoa_r+0x2dc>)
 80083ca:	f002 fe0d 	bl	800afe8 <__assert_func>
 80083ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083d2:	6004      	str	r4, [r0, #0]
 80083d4:	60c4      	str	r4, [r0, #12]
 80083d6:	69eb      	ldr	r3, [r5, #28]
 80083d8:	6819      	ldr	r1, [r3, #0]
 80083da:	b151      	cbz	r1, 80083f2 <_dtoa_r+0x52>
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	2301      	movs	r3, #1
 80083e0:	4093      	lsls	r3, r2
 80083e2:	604a      	str	r2, [r1, #4]
 80083e4:	608b      	str	r3, [r1, #8]
 80083e6:	4628      	mov	r0, r5
 80083e8:	f000 fefa 	bl	80091e0 <_Bfree>
 80083ec:	2200      	movs	r2, #0
 80083ee:	69eb      	ldr	r3, [r5, #28]
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	1e3b      	subs	r3, r7, #0
 80083f4:	bfaf      	iteee	ge
 80083f6:	2300      	movge	r3, #0
 80083f8:	2201      	movlt	r2, #1
 80083fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083fe:	9305      	strlt	r3, [sp, #20]
 8008400:	bfa8      	it	ge
 8008402:	f8c8 3000 	strge.w	r3, [r8]
 8008406:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800840a:	4b9d      	ldr	r3, [pc, #628]	; (8008680 <_dtoa_r+0x2e0>)
 800840c:	bfb8      	it	lt
 800840e:	f8c8 2000 	strlt.w	r2, [r8]
 8008412:	ea33 0309 	bics.w	r3, r3, r9
 8008416:	d119      	bne.n	800844c <_dtoa_r+0xac>
 8008418:	f242 730f 	movw	r3, #9999	; 0x270f
 800841c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008424:	4333      	orrs	r3, r6
 8008426:	f000 8589 	beq.w	8008f3c <_dtoa_r+0xb9c>
 800842a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800842c:	b953      	cbnz	r3, 8008444 <_dtoa_r+0xa4>
 800842e:	4b95      	ldr	r3, [pc, #596]	; (8008684 <_dtoa_r+0x2e4>)
 8008430:	e023      	b.n	800847a <_dtoa_r+0xda>
 8008432:	4b95      	ldr	r3, [pc, #596]	; (8008688 <_dtoa_r+0x2e8>)
 8008434:	9303      	str	r3, [sp, #12]
 8008436:	3308      	adds	r3, #8
 8008438:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	9803      	ldr	r0, [sp, #12]
 800843e:	b019      	add	sp, #100	; 0x64
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	4b8f      	ldr	r3, [pc, #572]	; (8008684 <_dtoa_r+0x2e4>)
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	3303      	adds	r3, #3
 800844a:	e7f5      	b.n	8008438 <_dtoa_r+0x98>
 800844c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008450:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008458:	2200      	movs	r2, #0
 800845a:	2300      	movs	r3, #0
 800845c:	f7f8 faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8008460:	4680      	mov	r8, r0
 8008462:	b160      	cbz	r0, 800847e <_dtoa_r+0xde>
 8008464:	2301      	movs	r3, #1
 8008466:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 8562 	beq.w	8008f36 <_dtoa_r+0xb96>
 8008472:	4b86      	ldr	r3, [pc, #536]	; (800868c <_dtoa_r+0x2ec>)
 8008474:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008476:	6013      	str	r3, [r2, #0]
 8008478:	3b01      	subs	r3, #1
 800847a:	9303      	str	r3, [sp, #12]
 800847c:	e7de      	b.n	800843c <_dtoa_r+0x9c>
 800847e:	ab16      	add	r3, sp, #88	; 0x58
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	ab17      	add	r3, sp, #92	; 0x5c
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	4628      	mov	r0, r5
 8008488:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800848c:	f001 fa3c 	bl	8009908 <__d2b>
 8008490:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008494:	4682      	mov	sl, r0
 8008496:	2c00      	cmp	r4, #0
 8008498:	d07e      	beq.n	8008598 <_dtoa_r+0x1f8>
 800849a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800849e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80084a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80084ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80084b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80084b4:	4619      	mov	r1, r3
 80084b6:	2200      	movs	r2, #0
 80084b8:	4b75      	ldr	r3, [pc, #468]	; (8008690 <_dtoa_r+0x2f0>)
 80084ba:	f7f7 fe55 	bl	8000168 <__aeabi_dsub>
 80084be:	a368      	add	r3, pc, #416	; (adr r3, 8008660 <_dtoa_r+0x2c0>)
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f7f8 f808 	bl	80004d8 <__aeabi_dmul>
 80084c8:	a367      	add	r3, pc, #412	; (adr r3, 8008668 <_dtoa_r+0x2c8>)
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	f7f7 fe4d 	bl	800016c <__adddf3>
 80084d2:	4606      	mov	r6, r0
 80084d4:	4620      	mov	r0, r4
 80084d6:	460f      	mov	r7, r1
 80084d8:	f7f7 ff94 	bl	8000404 <__aeabi_i2d>
 80084dc:	a364      	add	r3, pc, #400	; (adr r3, 8008670 <_dtoa_r+0x2d0>)
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	f7f7 fff9 	bl	80004d8 <__aeabi_dmul>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4630      	mov	r0, r6
 80084ec:	4639      	mov	r1, r7
 80084ee:	f7f7 fe3d 	bl	800016c <__adddf3>
 80084f2:	4606      	mov	r6, r0
 80084f4:	460f      	mov	r7, r1
 80084f6:	f7f8 fa9f 	bl	8000a38 <__aeabi_d2iz>
 80084fa:	2200      	movs	r2, #0
 80084fc:	4683      	mov	fp, r0
 80084fe:	2300      	movs	r3, #0
 8008500:	4630      	mov	r0, r6
 8008502:	4639      	mov	r1, r7
 8008504:	f7f8 fa5a 	bl	80009bc <__aeabi_dcmplt>
 8008508:	b148      	cbz	r0, 800851e <_dtoa_r+0x17e>
 800850a:	4658      	mov	r0, fp
 800850c:	f7f7 ff7a 	bl	8000404 <__aeabi_i2d>
 8008510:	4632      	mov	r2, r6
 8008512:	463b      	mov	r3, r7
 8008514:	f7f8 fa48 	bl	80009a8 <__aeabi_dcmpeq>
 8008518:	b908      	cbnz	r0, 800851e <_dtoa_r+0x17e>
 800851a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800851e:	f1bb 0f16 	cmp.w	fp, #22
 8008522:	d857      	bhi.n	80085d4 <_dtoa_r+0x234>
 8008524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008528:	4b5a      	ldr	r3, [pc, #360]	; (8008694 <_dtoa_r+0x2f4>)
 800852a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	f7f8 fa43 	bl	80009bc <__aeabi_dcmplt>
 8008536:	2800      	cmp	r0, #0
 8008538:	d04e      	beq.n	80085d8 <_dtoa_r+0x238>
 800853a:	2300      	movs	r3, #0
 800853c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008540:	930f      	str	r3, [sp, #60]	; 0x3c
 8008542:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008544:	1b1b      	subs	r3, r3, r4
 8008546:	1e5a      	subs	r2, r3, #1
 8008548:	bf46      	itte	mi
 800854a:	f1c3 0901 	rsbmi	r9, r3, #1
 800854e:	2300      	movmi	r3, #0
 8008550:	f04f 0900 	movpl.w	r9, #0
 8008554:	9209      	str	r2, [sp, #36]	; 0x24
 8008556:	bf48      	it	mi
 8008558:	9309      	strmi	r3, [sp, #36]	; 0x24
 800855a:	f1bb 0f00 	cmp.w	fp, #0
 800855e:	db3d      	blt.n	80085dc <_dtoa_r+0x23c>
 8008560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008562:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008566:	445b      	add	r3, fp
 8008568:	9309      	str	r3, [sp, #36]	; 0x24
 800856a:	2300      	movs	r3, #0
 800856c:	930a      	str	r3, [sp, #40]	; 0x28
 800856e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008570:	2b09      	cmp	r3, #9
 8008572:	d867      	bhi.n	8008644 <_dtoa_r+0x2a4>
 8008574:	2b05      	cmp	r3, #5
 8008576:	bfc4      	itt	gt
 8008578:	3b04      	subgt	r3, #4
 800857a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800857c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800857e:	bfc8      	it	gt
 8008580:	2400      	movgt	r4, #0
 8008582:	f1a3 0302 	sub.w	r3, r3, #2
 8008586:	bfd8      	it	le
 8008588:	2401      	movle	r4, #1
 800858a:	2b03      	cmp	r3, #3
 800858c:	f200 8086 	bhi.w	800869c <_dtoa_r+0x2fc>
 8008590:	e8df f003 	tbb	[pc, r3]
 8008594:	5637392c 	.word	0x5637392c
 8008598:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800859c:	441c      	add	r4, r3
 800859e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80085a2:	2b20      	cmp	r3, #32
 80085a4:	bfc1      	itttt	gt
 80085a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80085aa:	fa09 f903 	lslgt.w	r9, r9, r3
 80085ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80085b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80085b6:	bfd6      	itet	le
 80085b8:	f1c3 0320 	rsble	r3, r3, #32
 80085bc:	ea49 0003 	orrgt.w	r0, r9, r3
 80085c0:	fa06 f003 	lslle.w	r0, r6, r3
 80085c4:	f7f7 ff0e 	bl	80003e4 <__aeabi_ui2d>
 80085c8:	2201      	movs	r2, #1
 80085ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80085ce:	3c01      	subs	r4, #1
 80085d0:	9213      	str	r2, [sp, #76]	; 0x4c
 80085d2:	e76f      	b.n	80084b4 <_dtoa_r+0x114>
 80085d4:	2301      	movs	r3, #1
 80085d6:	e7b3      	b.n	8008540 <_dtoa_r+0x1a0>
 80085d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80085da:	e7b2      	b.n	8008542 <_dtoa_r+0x1a2>
 80085dc:	f1cb 0300 	rsb	r3, fp, #0
 80085e0:	930a      	str	r3, [sp, #40]	; 0x28
 80085e2:	2300      	movs	r3, #0
 80085e4:	eba9 090b 	sub.w	r9, r9, fp
 80085e8:	930e      	str	r3, [sp, #56]	; 0x38
 80085ea:	e7c0      	b.n	800856e <_dtoa_r+0x1ce>
 80085ec:	2300      	movs	r3, #0
 80085ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	dc55      	bgt.n	80086a2 <_dtoa_r+0x302>
 80085f6:	2301      	movs	r3, #1
 80085f8:	461a      	mov	r2, r3
 80085fa:	9306      	str	r3, [sp, #24]
 80085fc:	9308      	str	r3, [sp, #32]
 80085fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8008600:	e00b      	b.n	800861a <_dtoa_r+0x27a>
 8008602:	2301      	movs	r3, #1
 8008604:	e7f3      	b.n	80085ee <_dtoa_r+0x24e>
 8008606:	2300      	movs	r3, #0
 8008608:	930b      	str	r3, [sp, #44]	; 0x2c
 800860a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800860c:	445b      	add	r3, fp
 800860e:	9306      	str	r3, [sp, #24]
 8008610:	3301      	adds	r3, #1
 8008612:	2b01      	cmp	r3, #1
 8008614:	9308      	str	r3, [sp, #32]
 8008616:	bfb8      	it	lt
 8008618:	2301      	movlt	r3, #1
 800861a:	2100      	movs	r1, #0
 800861c:	2204      	movs	r2, #4
 800861e:	69e8      	ldr	r0, [r5, #28]
 8008620:	f102 0614 	add.w	r6, r2, #20
 8008624:	429e      	cmp	r6, r3
 8008626:	d940      	bls.n	80086aa <_dtoa_r+0x30a>
 8008628:	6041      	str	r1, [r0, #4]
 800862a:	4628      	mov	r0, r5
 800862c:	f000 fd98 	bl	8009160 <_Balloc>
 8008630:	9003      	str	r0, [sp, #12]
 8008632:	2800      	cmp	r0, #0
 8008634:	d13c      	bne.n	80086b0 <_dtoa_r+0x310>
 8008636:	4602      	mov	r2, r0
 8008638:	f240 11af 	movw	r1, #431	; 0x1af
 800863c:	4b16      	ldr	r3, [pc, #88]	; (8008698 <_dtoa_r+0x2f8>)
 800863e:	e6c3      	b.n	80083c8 <_dtoa_r+0x28>
 8008640:	2301      	movs	r3, #1
 8008642:	e7e1      	b.n	8008608 <_dtoa_r+0x268>
 8008644:	2401      	movs	r4, #1
 8008646:	2300      	movs	r3, #0
 8008648:	940b      	str	r4, [sp, #44]	; 0x2c
 800864a:	9322      	str	r3, [sp, #136]	; 0x88
 800864c:	f04f 33ff 	mov.w	r3, #4294967295
 8008650:	2200      	movs	r2, #0
 8008652:	9306      	str	r3, [sp, #24]
 8008654:	9308      	str	r3, [sp, #32]
 8008656:	2312      	movs	r3, #18
 8008658:	e7d1      	b.n	80085fe <_dtoa_r+0x25e>
 800865a:	bf00      	nop
 800865c:	f3af 8000 	nop.w
 8008660:	636f4361 	.word	0x636f4361
 8008664:	3fd287a7 	.word	0x3fd287a7
 8008668:	8b60c8b3 	.word	0x8b60c8b3
 800866c:	3fc68a28 	.word	0x3fc68a28
 8008670:	509f79fb 	.word	0x509f79fb
 8008674:	3fd34413 	.word	0x3fd34413
 8008678:	0800d280 	.word	0x0800d280
 800867c:	0800d297 	.word	0x0800d297
 8008680:	7ff00000 	.word	0x7ff00000
 8008684:	0800d27c 	.word	0x0800d27c
 8008688:	0800d273 	.word	0x0800d273
 800868c:	0800d24b 	.word	0x0800d24b
 8008690:	3ff80000 	.word	0x3ff80000
 8008694:	0800d388 	.word	0x0800d388
 8008698:	0800d2ef 	.word	0x0800d2ef
 800869c:	2301      	movs	r3, #1
 800869e:	930b      	str	r3, [sp, #44]	; 0x2c
 80086a0:	e7d4      	b.n	800864c <_dtoa_r+0x2ac>
 80086a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80086a4:	9306      	str	r3, [sp, #24]
 80086a6:	9308      	str	r3, [sp, #32]
 80086a8:	e7b7      	b.n	800861a <_dtoa_r+0x27a>
 80086aa:	3101      	adds	r1, #1
 80086ac:	0052      	lsls	r2, r2, #1
 80086ae:	e7b7      	b.n	8008620 <_dtoa_r+0x280>
 80086b0:	69eb      	ldr	r3, [r5, #28]
 80086b2:	9a03      	ldr	r2, [sp, #12]
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	9b08      	ldr	r3, [sp, #32]
 80086b8:	2b0e      	cmp	r3, #14
 80086ba:	f200 80a8 	bhi.w	800880e <_dtoa_r+0x46e>
 80086be:	2c00      	cmp	r4, #0
 80086c0:	f000 80a5 	beq.w	800880e <_dtoa_r+0x46e>
 80086c4:	f1bb 0f00 	cmp.w	fp, #0
 80086c8:	dd34      	ble.n	8008734 <_dtoa_r+0x394>
 80086ca:	4b9a      	ldr	r3, [pc, #616]	; (8008934 <_dtoa_r+0x594>)
 80086cc:	f00b 020f 	and.w	r2, fp, #15
 80086d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80086d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80086e0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80086e4:	d016      	beq.n	8008714 <_dtoa_r+0x374>
 80086e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086ea:	4b93      	ldr	r3, [pc, #588]	; (8008938 <_dtoa_r+0x598>)
 80086ec:	2703      	movs	r7, #3
 80086ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086f2:	f7f8 f81b 	bl	800072c <__aeabi_ddiv>
 80086f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086fa:	f004 040f 	and.w	r4, r4, #15
 80086fe:	4e8e      	ldr	r6, [pc, #568]	; (8008938 <_dtoa_r+0x598>)
 8008700:	b954      	cbnz	r4, 8008718 <_dtoa_r+0x378>
 8008702:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800870a:	f7f8 f80f 	bl	800072c <__aeabi_ddiv>
 800870e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008712:	e029      	b.n	8008768 <_dtoa_r+0x3c8>
 8008714:	2702      	movs	r7, #2
 8008716:	e7f2      	b.n	80086fe <_dtoa_r+0x35e>
 8008718:	07e1      	lsls	r1, r4, #31
 800871a:	d508      	bpl.n	800872e <_dtoa_r+0x38e>
 800871c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008720:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008724:	f7f7 fed8 	bl	80004d8 <__aeabi_dmul>
 8008728:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800872c:	3701      	adds	r7, #1
 800872e:	1064      	asrs	r4, r4, #1
 8008730:	3608      	adds	r6, #8
 8008732:	e7e5      	b.n	8008700 <_dtoa_r+0x360>
 8008734:	f000 80a5 	beq.w	8008882 <_dtoa_r+0x4e2>
 8008738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800873c:	f1cb 0400 	rsb	r4, fp, #0
 8008740:	4b7c      	ldr	r3, [pc, #496]	; (8008934 <_dtoa_r+0x594>)
 8008742:	f004 020f 	and.w	r2, r4, #15
 8008746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	f7f7 fec3 	bl	80004d8 <__aeabi_dmul>
 8008752:	2702      	movs	r7, #2
 8008754:	2300      	movs	r3, #0
 8008756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800875a:	4e77      	ldr	r6, [pc, #476]	; (8008938 <_dtoa_r+0x598>)
 800875c:	1124      	asrs	r4, r4, #4
 800875e:	2c00      	cmp	r4, #0
 8008760:	f040 8084 	bne.w	800886c <_dtoa_r+0x4cc>
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1d2      	bne.n	800870e <_dtoa_r+0x36e>
 8008768:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800876c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008772:	2b00      	cmp	r3, #0
 8008774:	f000 8087 	beq.w	8008886 <_dtoa_r+0x4e6>
 8008778:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800877c:	2200      	movs	r2, #0
 800877e:	4b6f      	ldr	r3, [pc, #444]	; (800893c <_dtoa_r+0x59c>)
 8008780:	f7f8 f91c 	bl	80009bc <__aeabi_dcmplt>
 8008784:	2800      	cmp	r0, #0
 8008786:	d07e      	beq.n	8008886 <_dtoa_r+0x4e6>
 8008788:	9b08      	ldr	r3, [sp, #32]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d07b      	beq.n	8008886 <_dtoa_r+0x4e6>
 800878e:	9b06      	ldr	r3, [sp, #24]
 8008790:	2b00      	cmp	r3, #0
 8008792:	dd38      	ble.n	8008806 <_dtoa_r+0x466>
 8008794:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008798:	2200      	movs	r2, #0
 800879a:	4b69      	ldr	r3, [pc, #420]	; (8008940 <_dtoa_r+0x5a0>)
 800879c:	f7f7 fe9c 	bl	80004d8 <__aeabi_dmul>
 80087a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087a4:	9c06      	ldr	r4, [sp, #24]
 80087a6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80087aa:	3701      	adds	r7, #1
 80087ac:	4638      	mov	r0, r7
 80087ae:	f7f7 fe29 	bl	8000404 <__aeabi_i2d>
 80087b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087b6:	f7f7 fe8f 	bl	80004d8 <__aeabi_dmul>
 80087ba:	2200      	movs	r2, #0
 80087bc:	4b61      	ldr	r3, [pc, #388]	; (8008944 <_dtoa_r+0x5a4>)
 80087be:	f7f7 fcd5 	bl	800016c <__adddf3>
 80087c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80087c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087ca:	9611      	str	r6, [sp, #68]	; 0x44
 80087cc:	2c00      	cmp	r4, #0
 80087ce:	d15d      	bne.n	800888c <_dtoa_r+0x4ec>
 80087d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087d4:	2200      	movs	r2, #0
 80087d6:	4b5c      	ldr	r3, [pc, #368]	; (8008948 <_dtoa_r+0x5a8>)
 80087d8:	f7f7 fcc6 	bl	8000168 <__aeabi_dsub>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087e4:	4633      	mov	r3, r6
 80087e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087e8:	f7f8 f906 	bl	80009f8 <__aeabi_dcmpgt>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	f040 8295 	bne.w	8008d1c <_dtoa_r+0x97c>
 80087f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80087fc:	f7f8 f8de 	bl	80009bc <__aeabi_dcmplt>
 8008800:	2800      	cmp	r0, #0
 8008802:	f040 8289 	bne.w	8008d18 <_dtoa_r+0x978>
 8008806:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800880a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800880e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008810:	2b00      	cmp	r3, #0
 8008812:	f2c0 8151 	blt.w	8008ab8 <_dtoa_r+0x718>
 8008816:	f1bb 0f0e 	cmp.w	fp, #14
 800881a:	f300 814d 	bgt.w	8008ab8 <_dtoa_r+0x718>
 800881e:	4b45      	ldr	r3, [pc, #276]	; (8008934 <_dtoa_r+0x594>)
 8008820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008824:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008828:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800882c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800882e:	2b00      	cmp	r3, #0
 8008830:	f280 80da 	bge.w	80089e8 <_dtoa_r+0x648>
 8008834:	9b08      	ldr	r3, [sp, #32]
 8008836:	2b00      	cmp	r3, #0
 8008838:	f300 80d6 	bgt.w	80089e8 <_dtoa_r+0x648>
 800883c:	f040 826b 	bne.w	8008d16 <_dtoa_r+0x976>
 8008840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008844:	2200      	movs	r2, #0
 8008846:	4b40      	ldr	r3, [pc, #256]	; (8008948 <_dtoa_r+0x5a8>)
 8008848:	f7f7 fe46 	bl	80004d8 <__aeabi_dmul>
 800884c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008850:	f7f8 f8c8 	bl	80009e4 <__aeabi_dcmpge>
 8008854:	9c08      	ldr	r4, [sp, #32]
 8008856:	4626      	mov	r6, r4
 8008858:	2800      	cmp	r0, #0
 800885a:	f040 8241 	bne.w	8008ce0 <_dtoa_r+0x940>
 800885e:	2331      	movs	r3, #49	; 0x31
 8008860:	9f03      	ldr	r7, [sp, #12]
 8008862:	f10b 0b01 	add.w	fp, fp, #1
 8008866:	f807 3b01 	strb.w	r3, [r7], #1
 800886a:	e23d      	b.n	8008ce8 <_dtoa_r+0x948>
 800886c:	07e2      	lsls	r2, r4, #31
 800886e:	d505      	bpl.n	800887c <_dtoa_r+0x4dc>
 8008870:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008874:	f7f7 fe30 	bl	80004d8 <__aeabi_dmul>
 8008878:	2301      	movs	r3, #1
 800887a:	3701      	adds	r7, #1
 800887c:	1064      	asrs	r4, r4, #1
 800887e:	3608      	adds	r6, #8
 8008880:	e76d      	b.n	800875e <_dtoa_r+0x3be>
 8008882:	2702      	movs	r7, #2
 8008884:	e770      	b.n	8008768 <_dtoa_r+0x3c8>
 8008886:	46d8      	mov	r8, fp
 8008888:	9c08      	ldr	r4, [sp, #32]
 800888a:	e78f      	b.n	80087ac <_dtoa_r+0x40c>
 800888c:	9903      	ldr	r1, [sp, #12]
 800888e:	4b29      	ldr	r3, [pc, #164]	; (8008934 <_dtoa_r+0x594>)
 8008890:	4421      	add	r1, r4
 8008892:	9112      	str	r1, [sp, #72]	; 0x48
 8008894:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008896:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800889a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800889e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088a2:	2900      	cmp	r1, #0
 80088a4:	d054      	beq.n	8008950 <_dtoa_r+0x5b0>
 80088a6:	2000      	movs	r0, #0
 80088a8:	4928      	ldr	r1, [pc, #160]	; (800894c <_dtoa_r+0x5ac>)
 80088aa:	f7f7 ff3f 	bl	800072c <__aeabi_ddiv>
 80088ae:	463b      	mov	r3, r7
 80088b0:	4632      	mov	r2, r6
 80088b2:	f7f7 fc59 	bl	8000168 <__aeabi_dsub>
 80088b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088ba:	9f03      	ldr	r7, [sp, #12]
 80088bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088c0:	f7f8 f8ba 	bl	8000a38 <__aeabi_d2iz>
 80088c4:	4604      	mov	r4, r0
 80088c6:	f7f7 fd9d 	bl	8000404 <__aeabi_i2d>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088d2:	f7f7 fc49 	bl	8000168 <__aeabi_dsub>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	3430      	adds	r4, #48	; 0x30
 80088dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088e4:	f807 4b01 	strb.w	r4, [r7], #1
 80088e8:	f7f8 f868 	bl	80009bc <__aeabi_dcmplt>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d173      	bne.n	80089d8 <_dtoa_r+0x638>
 80088f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088f4:	2000      	movs	r0, #0
 80088f6:	4911      	ldr	r1, [pc, #68]	; (800893c <_dtoa_r+0x59c>)
 80088f8:	f7f7 fc36 	bl	8000168 <__aeabi_dsub>
 80088fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008900:	f7f8 f85c 	bl	80009bc <__aeabi_dcmplt>
 8008904:	2800      	cmp	r0, #0
 8008906:	f040 80b6 	bne.w	8008a76 <_dtoa_r+0x6d6>
 800890a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800890c:	429f      	cmp	r7, r3
 800890e:	f43f af7a 	beq.w	8008806 <_dtoa_r+0x466>
 8008912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008916:	2200      	movs	r2, #0
 8008918:	4b09      	ldr	r3, [pc, #36]	; (8008940 <_dtoa_r+0x5a0>)
 800891a:	f7f7 fddd 	bl	80004d8 <__aeabi_dmul>
 800891e:	2200      	movs	r2, #0
 8008920:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008928:	4b05      	ldr	r3, [pc, #20]	; (8008940 <_dtoa_r+0x5a0>)
 800892a:	f7f7 fdd5 	bl	80004d8 <__aeabi_dmul>
 800892e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008932:	e7c3      	b.n	80088bc <_dtoa_r+0x51c>
 8008934:	0800d388 	.word	0x0800d388
 8008938:	0800d360 	.word	0x0800d360
 800893c:	3ff00000 	.word	0x3ff00000
 8008940:	40240000 	.word	0x40240000
 8008944:	401c0000 	.word	0x401c0000
 8008948:	40140000 	.word	0x40140000
 800894c:	3fe00000 	.word	0x3fe00000
 8008950:	4630      	mov	r0, r6
 8008952:	4639      	mov	r1, r7
 8008954:	f7f7 fdc0 	bl	80004d8 <__aeabi_dmul>
 8008958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800895a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800895e:	9c03      	ldr	r4, [sp, #12]
 8008960:	9314      	str	r3, [sp, #80]	; 0x50
 8008962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008966:	f7f8 f867 	bl	8000a38 <__aeabi_d2iz>
 800896a:	9015      	str	r0, [sp, #84]	; 0x54
 800896c:	f7f7 fd4a 	bl	8000404 <__aeabi_i2d>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008978:	f7f7 fbf6 	bl	8000168 <__aeabi_dsub>
 800897c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800897e:	4606      	mov	r6, r0
 8008980:	3330      	adds	r3, #48	; 0x30
 8008982:	f804 3b01 	strb.w	r3, [r4], #1
 8008986:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008988:	460f      	mov	r7, r1
 800898a:	429c      	cmp	r4, r3
 800898c:	f04f 0200 	mov.w	r2, #0
 8008990:	d124      	bne.n	80089dc <_dtoa_r+0x63c>
 8008992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008996:	4baf      	ldr	r3, [pc, #700]	; (8008c54 <_dtoa_r+0x8b4>)
 8008998:	f7f7 fbe8 	bl	800016c <__adddf3>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4630      	mov	r0, r6
 80089a2:	4639      	mov	r1, r7
 80089a4:	f7f8 f828 	bl	80009f8 <__aeabi_dcmpgt>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d163      	bne.n	8008a74 <_dtoa_r+0x6d4>
 80089ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089b0:	2000      	movs	r0, #0
 80089b2:	49a8      	ldr	r1, [pc, #672]	; (8008c54 <_dtoa_r+0x8b4>)
 80089b4:	f7f7 fbd8 	bl	8000168 <__aeabi_dsub>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4630      	mov	r0, r6
 80089be:	4639      	mov	r1, r7
 80089c0:	f7f7 fffc 	bl	80009bc <__aeabi_dcmplt>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	f43f af1e 	beq.w	8008806 <_dtoa_r+0x466>
 80089ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80089cc:	1e7b      	subs	r3, r7, #1
 80089ce:	9314      	str	r3, [sp, #80]	; 0x50
 80089d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80089d4:	2b30      	cmp	r3, #48	; 0x30
 80089d6:	d0f8      	beq.n	80089ca <_dtoa_r+0x62a>
 80089d8:	46c3      	mov	fp, r8
 80089da:	e03b      	b.n	8008a54 <_dtoa_r+0x6b4>
 80089dc:	4b9e      	ldr	r3, [pc, #632]	; (8008c58 <_dtoa_r+0x8b8>)
 80089de:	f7f7 fd7b 	bl	80004d8 <__aeabi_dmul>
 80089e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089e6:	e7bc      	b.n	8008962 <_dtoa_r+0x5c2>
 80089e8:	9f03      	ldr	r7, [sp, #12]
 80089ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80089ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089f2:	4640      	mov	r0, r8
 80089f4:	4649      	mov	r1, r9
 80089f6:	f7f7 fe99 	bl	800072c <__aeabi_ddiv>
 80089fa:	f7f8 f81d 	bl	8000a38 <__aeabi_d2iz>
 80089fe:	4604      	mov	r4, r0
 8008a00:	f7f7 fd00 	bl	8000404 <__aeabi_i2d>
 8008a04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a08:	f7f7 fd66 	bl	80004d8 <__aeabi_dmul>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4640      	mov	r0, r8
 8008a12:	4649      	mov	r1, r9
 8008a14:	f7f7 fba8 	bl	8000168 <__aeabi_dsub>
 8008a18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008a1c:	f807 6b01 	strb.w	r6, [r7], #1
 8008a20:	9e03      	ldr	r6, [sp, #12]
 8008a22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008a26:	1bbe      	subs	r6, r7, r6
 8008a28:	45b4      	cmp	ip, r6
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	d136      	bne.n	8008a9e <_dtoa_r+0x6fe>
 8008a30:	f7f7 fb9c 	bl	800016c <__adddf3>
 8008a34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a38:	4680      	mov	r8, r0
 8008a3a:	4689      	mov	r9, r1
 8008a3c:	f7f7 ffdc 	bl	80009f8 <__aeabi_dcmpgt>
 8008a40:	bb58      	cbnz	r0, 8008a9a <_dtoa_r+0x6fa>
 8008a42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a46:	4640      	mov	r0, r8
 8008a48:	4649      	mov	r1, r9
 8008a4a:	f7f7 ffad 	bl	80009a8 <__aeabi_dcmpeq>
 8008a4e:	b108      	cbz	r0, 8008a54 <_dtoa_r+0x6b4>
 8008a50:	07e3      	lsls	r3, r4, #31
 8008a52:	d422      	bmi.n	8008a9a <_dtoa_r+0x6fa>
 8008a54:	4651      	mov	r1, sl
 8008a56:	4628      	mov	r0, r5
 8008a58:	f000 fbc2 	bl	80091e0 <_Bfree>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a60:	703b      	strb	r3, [r7, #0]
 8008a62:	f10b 0301 	add.w	r3, fp, #1
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f43f ace6 	beq.w	800843c <_dtoa_r+0x9c>
 8008a70:	601f      	str	r7, [r3, #0]
 8008a72:	e4e3      	b.n	800843c <_dtoa_r+0x9c>
 8008a74:	4627      	mov	r7, r4
 8008a76:	463b      	mov	r3, r7
 8008a78:	461f      	mov	r7, r3
 8008a7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a7e:	2a39      	cmp	r2, #57	; 0x39
 8008a80:	d107      	bne.n	8008a92 <_dtoa_r+0x6f2>
 8008a82:	9a03      	ldr	r2, [sp, #12]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d1f7      	bne.n	8008a78 <_dtoa_r+0x6d8>
 8008a88:	2230      	movs	r2, #48	; 0x30
 8008a8a:	9903      	ldr	r1, [sp, #12]
 8008a8c:	f108 0801 	add.w	r8, r8, #1
 8008a90:	700a      	strb	r2, [r1, #0]
 8008a92:	781a      	ldrb	r2, [r3, #0]
 8008a94:	3201      	adds	r2, #1
 8008a96:	701a      	strb	r2, [r3, #0]
 8008a98:	e79e      	b.n	80089d8 <_dtoa_r+0x638>
 8008a9a:	46d8      	mov	r8, fp
 8008a9c:	e7eb      	b.n	8008a76 <_dtoa_r+0x6d6>
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	4b6d      	ldr	r3, [pc, #436]	; (8008c58 <_dtoa_r+0x8b8>)
 8008aa2:	f7f7 fd19 	bl	80004d8 <__aeabi_dmul>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4680      	mov	r8, r0
 8008aac:	4689      	mov	r9, r1
 8008aae:	f7f7 ff7b 	bl	80009a8 <__aeabi_dcmpeq>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d09b      	beq.n	80089ee <_dtoa_r+0x64e>
 8008ab6:	e7cd      	b.n	8008a54 <_dtoa_r+0x6b4>
 8008ab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008aba:	2a00      	cmp	r2, #0
 8008abc:	f000 80c4 	beq.w	8008c48 <_dtoa_r+0x8a8>
 8008ac0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ac2:	2a01      	cmp	r2, #1
 8008ac4:	f300 80a8 	bgt.w	8008c18 <_dtoa_r+0x878>
 8008ac8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	f000 80a0 	beq.w	8008c10 <_dtoa_r+0x870>
 8008ad0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ad4:	464f      	mov	r7, r9
 8008ad6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ada:	2101      	movs	r1, #1
 8008adc:	441a      	add	r2, r3
 8008ade:	4628      	mov	r0, r5
 8008ae0:	4499      	add	r9, r3
 8008ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ae4:	f000 fc7c 	bl	80093e0 <__i2b>
 8008ae8:	4606      	mov	r6, r0
 8008aea:	b15f      	cbz	r7, 8008b04 <_dtoa_r+0x764>
 8008aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	dd08      	ble.n	8008b04 <_dtoa_r+0x764>
 8008af2:	42bb      	cmp	r3, r7
 8008af4:	bfa8      	it	ge
 8008af6:	463b      	movge	r3, r7
 8008af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008afa:	eba9 0903 	sub.w	r9, r9, r3
 8008afe:	1aff      	subs	r7, r7, r3
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	9309      	str	r3, [sp, #36]	; 0x24
 8008b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b06:	b1f3      	cbz	r3, 8008b46 <_dtoa_r+0x7a6>
 8008b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 80a0 	beq.w	8008c50 <_dtoa_r+0x8b0>
 8008b10:	2c00      	cmp	r4, #0
 8008b12:	dd10      	ble.n	8008b36 <_dtoa_r+0x796>
 8008b14:	4631      	mov	r1, r6
 8008b16:	4622      	mov	r2, r4
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f000 fd1f 	bl	800955c <__pow5mult>
 8008b1e:	4652      	mov	r2, sl
 8008b20:	4601      	mov	r1, r0
 8008b22:	4606      	mov	r6, r0
 8008b24:	4628      	mov	r0, r5
 8008b26:	f000 fc71 	bl	800940c <__multiply>
 8008b2a:	4680      	mov	r8, r0
 8008b2c:	4651      	mov	r1, sl
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f000 fb56 	bl	80091e0 <_Bfree>
 8008b34:	46c2      	mov	sl, r8
 8008b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b38:	1b1a      	subs	r2, r3, r4
 8008b3a:	d004      	beq.n	8008b46 <_dtoa_r+0x7a6>
 8008b3c:	4651      	mov	r1, sl
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f000 fd0c 	bl	800955c <__pow5mult>
 8008b44:	4682      	mov	sl, r0
 8008b46:	2101      	movs	r1, #1
 8008b48:	4628      	mov	r0, r5
 8008b4a:	f000 fc49 	bl	80093e0 <__i2b>
 8008b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b50:	4604      	mov	r4, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f340 8082 	ble.w	8008c5c <_dtoa_r+0x8bc>
 8008b58:	461a      	mov	r2, r3
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f000 fcfd 	bl	800955c <__pow5mult>
 8008b62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b64:	4604      	mov	r4, r0
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	dd7b      	ble.n	8008c62 <_dtoa_r+0x8c2>
 8008b6a:	f04f 0800 	mov.w	r8, #0
 8008b6e:	6923      	ldr	r3, [r4, #16]
 8008b70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b74:	6918      	ldr	r0, [r3, #16]
 8008b76:	f000 fbe5 	bl	8009344 <__hi0bits>
 8008b7a:	f1c0 0020 	rsb	r0, r0, #32
 8008b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b80:	4418      	add	r0, r3
 8008b82:	f010 001f 	ands.w	r0, r0, #31
 8008b86:	f000 8092 	beq.w	8008cae <_dtoa_r+0x90e>
 8008b8a:	f1c0 0320 	rsb	r3, r0, #32
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	f340 8085 	ble.w	8008c9e <_dtoa_r+0x8fe>
 8008b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b96:	f1c0 001c 	rsb	r0, r0, #28
 8008b9a:	4403      	add	r3, r0
 8008b9c:	4481      	add	r9, r0
 8008b9e:	4407      	add	r7, r0
 8008ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ba2:	f1b9 0f00 	cmp.w	r9, #0
 8008ba6:	dd05      	ble.n	8008bb4 <_dtoa_r+0x814>
 8008ba8:	4651      	mov	r1, sl
 8008baa:	464a      	mov	r2, r9
 8008bac:	4628      	mov	r0, r5
 8008bae:	f000 fd2f 	bl	8009610 <__lshift>
 8008bb2:	4682      	mov	sl, r0
 8008bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	dd05      	ble.n	8008bc6 <_dtoa_r+0x826>
 8008bba:	4621      	mov	r1, r4
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f000 fd26 	bl	8009610 <__lshift>
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d072      	beq.n	8008cb2 <_dtoa_r+0x912>
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4650      	mov	r0, sl
 8008bd0:	f000 fd8a 	bl	80096e8 <__mcmp>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	da6c      	bge.n	8008cb2 <_dtoa_r+0x912>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4651      	mov	r1, sl
 8008bdc:	220a      	movs	r2, #10
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 fb20 	bl	8009224 <__multadd>
 8008be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008be6:	4682      	mov	sl, r0
 8008be8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 81ac 	beq.w	8008f4a <_dtoa_r+0xbaa>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	220a      	movs	r2, #10
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f000 fb13 	bl	8009224 <__multadd>
 8008bfe:	9b06      	ldr	r3, [sp, #24]
 8008c00:	4606      	mov	r6, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f300 8093 	bgt.w	8008d2e <_dtoa_r+0x98e>
 8008c08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	dc59      	bgt.n	8008cc2 <_dtoa_r+0x922>
 8008c0e:	e08e      	b.n	8008d2e <_dtoa_r+0x98e>
 8008c10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c16:	e75d      	b.n	8008ad4 <_dtoa_r+0x734>
 8008c18:	9b08      	ldr	r3, [sp, #32]
 8008c1a:	1e5c      	subs	r4, r3, #1
 8008c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c1e:	42a3      	cmp	r3, r4
 8008c20:	bfbf      	itttt	lt
 8008c22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c24:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008c26:	1ae3      	sublt	r3, r4, r3
 8008c28:	18d2      	addlt	r2, r2, r3
 8008c2a:	bfa8      	it	ge
 8008c2c:	1b1c      	subge	r4, r3, r4
 8008c2e:	9b08      	ldr	r3, [sp, #32]
 8008c30:	bfbe      	ittt	lt
 8008c32:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008c34:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008c36:	2400      	movlt	r4, #0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bfb5      	itete	lt
 8008c3c:	eba9 0703 	sublt.w	r7, r9, r3
 8008c40:	464f      	movge	r7, r9
 8008c42:	2300      	movlt	r3, #0
 8008c44:	9b08      	ldrge	r3, [sp, #32]
 8008c46:	e747      	b.n	8008ad8 <_dtoa_r+0x738>
 8008c48:	464f      	mov	r7, r9
 8008c4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008c4e:	e74c      	b.n	8008aea <_dtoa_r+0x74a>
 8008c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c52:	e773      	b.n	8008b3c <_dtoa_r+0x79c>
 8008c54:	3fe00000 	.word	0x3fe00000
 8008c58:	40240000 	.word	0x40240000
 8008c5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	dc18      	bgt.n	8008c94 <_dtoa_r+0x8f4>
 8008c62:	9b04      	ldr	r3, [sp, #16]
 8008c64:	b9b3      	cbnz	r3, 8008c94 <_dtoa_r+0x8f4>
 8008c66:	9b05      	ldr	r3, [sp, #20]
 8008c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c6c:	b993      	cbnz	r3, 8008c94 <_dtoa_r+0x8f4>
 8008c6e:	9b05      	ldr	r3, [sp, #20]
 8008c70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c74:	0d1b      	lsrs	r3, r3, #20
 8008c76:	051b      	lsls	r3, r3, #20
 8008c78:	b17b      	cbz	r3, 8008c9a <_dtoa_r+0x8fa>
 8008c7a:	f04f 0801 	mov.w	r8, #1
 8008c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c80:	f109 0901 	add.w	r9, r9, #1
 8008c84:	3301      	adds	r3, #1
 8008c86:	9309      	str	r3, [sp, #36]	; 0x24
 8008c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f47f af6f 	bne.w	8008b6e <_dtoa_r+0x7ce>
 8008c90:	2001      	movs	r0, #1
 8008c92:	e774      	b.n	8008b7e <_dtoa_r+0x7de>
 8008c94:	f04f 0800 	mov.w	r8, #0
 8008c98:	e7f6      	b.n	8008c88 <_dtoa_r+0x8e8>
 8008c9a:	4698      	mov	r8, r3
 8008c9c:	e7f4      	b.n	8008c88 <_dtoa_r+0x8e8>
 8008c9e:	d080      	beq.n	8008ba2 <_dtoa_r+0x802>
 8008ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ca2:	331c      	adds	r3, #28
 8008ca4:	441a      	add	r2, r3
 8008ca6:	4499      	add	r9, r3
 8008ca8:	441f      	add	r7, r3
 8008caa:	9209      	str	r2, [sp, #36]	; 0x24
 8008cac:	e779      	b.n	8008ba2 <_dtoa_r+0x802>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	e7f6      	b.n	8008ca0 <_dtoa_r+0x900>
 8008cb2:	9b08      	ldr	r3, [sp, #32]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	dc34      	bgt.n	8008d22 <_dtoa_r+0x982>
 8008cb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	dd31      	ble.n	8008d22 <_dtoa_r+0x982>
 8008cbe:	9b08      	ldr	r3, [sp, #32]
 8008cc0:	9306      	str	r3, [sp, #24]
 8008cc2:	9b06      	ldr	r3, [sp, #24]
 8008cc4:	b963      	cbnz	r3, 8008ce0 <_dtoa_r+0x940>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	2205      	movs	r2, #5
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f000 faaa 	bl	8009224 <__multadd>
 8008cd0:	4601      	mov	r1, r0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4650      	mov	r0, sl
 8008cd6:	f000 fd07 	bl	80096e8 <__mcmp>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	f73f adbf 	bgt.w	800885e <_dtoa_r+0x4be>
 8008ce0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ce2:	9f03      	ldr	r7, [sp, #12]
 8008ce4:	ea6f 0b03 	mvn.w	fp, r3
 8008ce8:	f04f 0800 	mov.w	r8, #0
 8008cec:	4621      	mov	r1, r4
 8008cee:	4628      	mov	r0, r5
 8008cf0:	f000 fa76 	bl	80091e0 <_Bfree>
 8008cf4:	2e00      	cmp	r6, #0
 8008cf6:	f43f aead 	beq.w	8008a54 <_dtoa_r+0x6b4>
 8008cfa:	f1b8 0f00 	cmp.w	r8, #0
 8008cfe:	d005      	beq.n	8008d0c <_dtoa_r+0x96c>
 8008d00:	45b0      	cmp	r8, r6
 8008d02:	d003      	beq.n	8008d0c <_dtoa_r+0x96c>
 8008d04:	4641      	mov	r1, r8
 8008d06:	4628      	mov	r0, r5
 8008d08:	f000 fa6a 	bl	80091e0 <_Bfree>
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f000 fa66 	bl	80091e0 <_Bfree>
 8008d14:	e69e      	b.n	8008a54 <_dtoa_r+0x6b4>
 8008d16:	2400      	movs	r4, #0
 8008d18:	4626      	mov	r6, r4
 8008d1a:	e7e1      	b.n	8008ce0 <_dtoa_r+0x940>
 8008d1c:	46c3      	mov	fp, r8
 8008d1e:	4626      	mov	r6, r4
 8008d20:	e59d      	b.n	800885e <_dtoa_r+0x4be>
 8008d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 80c8 	beq.w	8008eba <_dtoa_r+0xb1a>
 8008d2a:	9b08      	ldr	r3, [sp, #32]
 8008d2c:	9306      	str	r3, [sp, #24]
 8008d2e:	2f00      	cmp	r7, #0
 8008d30:	dd05      	ble.n	8008d3e <_dtoa_r+0x99e>
 8008d32:	4631      	mov	r1, r6
 8008d34:	463a      	mov	r2, r7
 8008d36:	4628      	mov	r0, r5
 8008d38:	f000 fc6a 	bl	8009610 <__lshift>
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	f1b8 0f00 	cmp.w	r8, #0
 8008d42:	d05b      	beq.n	8008dfc <_dtoa_r+0xa5c>
 8008d44:	4628      	mov	r0, r5
 8008d46:	6871      	ldr	r1, [r6, #4]
 8008d48:	f000 fa0a 	bl	8009160 <_Balloc>
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	b928      	cbnz	r0, 8008d5c <_dtoa_r+0x9bc>
 8008d50:	4602      	mov	r2, r0
 8008d52:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008d56:	4b81      	ldr	r3, [pc, #516]	; (8008f5c <_dtoa_r+0xbbc>)
 8008d58:	f7ff bb36 	b.w	80083c8 <_dtoa_r+0x28>
 8008d5c:	6932      	ldr	r2, [r6, #16]
 8008d5e:	f106 010c 	add.w	r1, r6, #12
 8008d62:	3202      	adds	r2, #2
 8008d64:	0092      	lsls	r2, r2, #2
 8008d66:	300c      	adds	r0, #12
 8008d68:	f7ff fa7d 	bl	8008266 <memcpy>
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	4639      	mov	r1, r7
 8008d70:	4628      	mov	r0, r5
 8008d72:	f000 fc4d 	bl	8009610 <__lshift>
 8008d76:	46b0      	mov	r8, r6
 8008d78:	4606      	mov	r6, r0
 8008d7a:	9b03      	ldr	r3, [sp, #12]
 8008d7c:	9a03      	ldr	r2, [sp, #12]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	9308      	str	r3, [sp, #32]
 8008d82:	9b06      	ldr	r3, [sp, #24]
 8008d84:	4413      	add	r3, r2
 8008d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d88:	9b04      	ldr	r3, [sp, #16]
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d90:	9b08      	ldr	r3, [sp, #32]
 8008d92:	4621      	mov	r1, r4
 8008d94:	3b01      	subs	r3, #1
 8008d96:	4650      	mov	r0, sl
 8008d98:	9304      	str	r3, [sp, #16]
 8008d9a:	f7ff fa77 	bl	800828c <quorem>
 8008d9e:	4641      	mov	r1, r8
 8008da0:	9006      	str	r0, [sp, #24]
 8008da2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008da6:	4650      	mov	r0, sl
 8008da8:	f000 fc9e 	bl	80096e8 <__mcmp>
 8008dac:	4632      	mov	r2, r6
 8008dae:	9009      	str	r0, [sp, #36]	; 0x24
 8008db0:	4621      	mov	r1, r4
 8008db2:	4628      	mov	r0, r5
 8008db4:	f000 fcb4 	bl	8009720 <__mdiff>
 8008db8:	68c2      	ldr	r2, [r0, #12]
 8008dba:	4607      	mov	r7, r0
 8008dbc:	bb02      	cbnz	r2, 8008e00 <_dtoa_r+0xa60>
 8008dbe:	4601      	mov	r1, r0
 8008dc0:	4650      	mov	r0, sl
 8008dc2:	f000 fc91 	bl	80096e8 <__mcmp>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	4639      	mov	r1, r7
 8008dca:	4628      	mov	r0, r5
 8008dcc:	920c      	str	r2, [sp, #48]	; 0x30
 8008dce:	f000 fa07 	bl	80091e0 <_Bfree>
 8008dd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008dd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dd6:	9f08      	ldr	r7, [sp, #32]
 8008dd8:	ea43 0102 	orr.w	r1, r3, r2
 8008ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dde:	4319      	orrs	r1, r3
 8008de0:	d110      	bne.n	8008e04 <_dtoa_r+0xa64>
 8008de2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008de6:	d029      	beq.n	8008e3c <_dtoa_r+0xa9c>
 8008de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	dd02      	ble.n	8008df4 <_dtoa_r+0xa54>
 8008dee:	9b06      	ldr	r3, [sp, #24]
 8008df0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	f883 9000 	strb.w	r9, [r3]
 8008dfa:	e777      	b.n	8008cec <_dtoa_r+0x94c>
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	e7ba      	b.n	8008d76 <_dtoa_r+0x9d6>
 8008e00:	2201      	movs	r2, #1
 8008e02:	e7e1      	b.n	8008dc8 <_dtoa_r+0xa28>
 8008e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	db04      	blt.n	8008e14 <_dtoa_r+0xa74>
 8008e0a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008e0c:	430b      	orrs	r3, r1
 8008e0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e10:	430b      	orrs	r3, r1
 8008e12:	d120      	bne.n	8008e56 <_dtoa_r+0xab6>
 8008e14:	2a00      	cmp	r2, #0
 8008e16:	dded      	ble.n	8008df4 <_dtoa_r+0xa54>
 8008e18:	4651      	mov	r1, sl
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	f000 fbf7 	bl	8009610 <__lshift>
 8008e22:	4621      	mov	r1, r4
 8008e24:	4682      	mov	sl, r0
 8008e26:	f000 fc5f 	bl	80096e8 <__mcmp>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	dc03      	bgt.n	8008e36 <_dtoa_r+0xa96>
 8008e2e:	d1e1      	bne.n	8008df4 <_dtoa_r+0xa54>
 8008e30:	f019 0f01 	tst.w	r9, #1
 8008e34:	d0de      	beq.n	8008df4 <_dtoa_r+0xa54>
 8008e36:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e3a:	d1d8      	bne.n	8008dee <_dtoa_r+0xa4e>
 8008e3c:	2339      	movs	r3, #57	; 0x39
 8008e3e:	9a04      	ldr	r2, [sp, #16]
 8008e40:	7013      	strb	r3, [r2, #0]
 8008e42:	463b      	mov	r3, r7
 8008e44:	461f      	mov	r7, r3
 8008e46:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	2a39      	cmp	r2, #57	; 0x39
 8008e4e:	d06b      	beq.n	8008f28 <_dtoa_r+0xb88>
 8008e50:	3201      	adds	r2, #1
 8008e52:	701a      	strb	r2, [r3, #0]
 8008e54:	e74a      	b.n	8008cec <_dtoa_r+0x94c>
 8008e56:	2a00      	cmp	r2, #0
 8008e58:	dd07      	ble.n	8008e6a <_dtoa_r+0xaca>
 8008e5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e5e:	d0ed      	beq.n	8008e3c <_dtoa_r+0xa9c>
 8008e60:	9a04      	ldr	r2, [sp, #16]
 8008e62:	f109 0301 	add.w	r3, r9, #1
 8008e66:	7013      	strb	r3, [r2, #0]
 8008e68:	e740      	b.n	8008cec <_dtoa_r+0x94c>
 8008e6a:	9b08      	ldr	r3, [sp, #32]
 8008e6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e6e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d042      	beq.n	8008efc <_dtoa_r+0xb5c>
 8008e76:	4651      	mov	r1, sl
 8008e78:	2300      	movs	r3, #0
 8008e7a:	220a      	movs	r2, #10
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f000 f9d1 	bl	8009224 <__multadd>
 8008e82:	45b0      	cmp	r8, r6
 8008e84:	4682      	mov	sl, r0
 8008e86:	f04f 0300 	mov.w	r3, #0
 8008e8a:	f04f 020a 	mov.w	r2, #10
 8008e8e:	4641      	mov	r1, r8
 8008e90:	4628      	mov	r0, r5
 8008e92:	d107      	bne.n	8008ea4 <_dtoa_r+0xb04>
 8008e94:	f000 f9c6 	bl	8009224 <__multadd>
 8008e98:	4680      	mov	r8, r0
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	9b08      	ldr	r3, [sp, #32]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	9308      	str	r3, [sp, #32]
 8008ea2:	e775      	b.n	8008d90 <_dtoa_r+0x9f0>
 8008ea4:	f000 f9be 	bl	8009224 <__multadd>
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4680      	mov	r8, r0
 8008eac:	2300      	movs	r3, #0
 8008eae:	220a      	movs	r2, #10
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f000 f9b7 	bl	8009224 <__multadd>
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	e7f0      	b.n	8008e9c <_dtoa_r+0xafc>
 8008eba:	9b08      	ldr	r3, [sp, #32]
 8008ebc:	9306      	str	r3, [sp, #24]
 8008ebe:	9f03      	ldr	r7, [sp, #12]
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	4650      	mov	r0, sl
 8008ec4:	f7ff f9e2 	bl	800828c <quorem>
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ece:	f807 9b01 	strb.w	r9, [r7], #1
 8008ed2:	1afa      	subs	r2, r7, r3
 8008ed4:	9b06      	ldr	r3, [sp, #24]
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	dd07      	ble.n	8008eea <_dtoa_r+0xb4a>
 8008eda:	4651      	mov	r1, sl
 8008edc:	2300      	movs	r3, #0
 8008ede:	220a      	movs	r2, #10
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f000 f99f 	bl	8009224 <__multadd>
 8008ee6:	4682      	mov	sl, r0
 8008ee8:	e7ea      	b.n	8008ec0 <_dtoa_r+0xb20>
 8008eea:	9b06      	ldr	r3, [sp, #24]
 8008eec:	f04f 0800 	mov.w	r8, #0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	bfcc      	ite	gt
 8008ef4:	461f      	movgt	r7, r3
 8008ef6:	2701      	movle	r7, #1
 8008ef8:	9b03      	ldr	r3, [sp, #12]
 8008efa:	441f      	add	r7, r3
 8008efc:	4651      	mov	r1, sl
 8008efe:	2201      	movs	r2, #1
 8008f00:	4628      	mov	r0, r5
 8008f02:	f000 fb85 	bl	8009610 <__lshift>
 8008f06:	4621      	mov	r1, r4
 8008f08:	4682      	mov	sl, r0
 8008f0a:	f000 fbed 	bl	80096e8 <__mcmp>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	dc97      	bgt.n	8008e42 <_dtoa_r+0xaa2>
 8008f12:	d102      	bne.n	8008f1a <_dtoa_r+0xb7a>
 8008f14:	f019 0f01 	tst.w	r9, #1
 8008f18:	d193      	bne.n	8008e42 <_dtoa_r+0xaa2>
 8008f1a:	463b      	mov	r3, r7
 8008f1c:	461f      	mov	r7, r3
 8008f1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f22:	2a30      	cmp	r2, #48	; 0x30
 8008f24:	d0fa      	beq.n	8008f1c <_dtoa_r+0xb7c>
 8008f26:	e6e1      	b.n	8008cec <_dtoa_r+0x94c>
 8008f28:	9a03      	ldr	r2, [sp, #12]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d18a      	bne.n	8008e44 <_dtoa_r+0xaa4>
 8008f2e:	2331      	movs	r3, #49	; 0x31
 8008f30:	f10b 0b01 	add.w	fp, fp, #1
 8008f34:	e797      	b.n	8008e66 <_dtoa_r+0xac6>
 8008f36:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <_dtoa_r+0xbc0>)
 8008f38:	f7ff ba9f 	b.w	800847a <_dtoa_r+0xda>
 8008f3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f47f aa77 	bne.w	8008432 <_dtoa_r+0x92>
 8008f44:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <_dtoa_r+0xbc4>)
 8008f46:	f7ff ba98 	b.w	800847a <_dtoa_r+0xda>
 8008f4a:	9b06      	ldr	r3, [sp, #24]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dcb6      	bgt.n	8008ebe <_dtoa_r+0xb1e>
 8008f50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	f73f aeb5 	bgt.w	8008cc2 <_dtoa_r+0x922>
 8008f58:	e7b1      	b.n	8008ebe <_dtoa_r+0xb1e>
 8008f5a:	bf00      	nop
 8008f5c:	0800d2ef 	.word	0x0800d2ef
 8008f60:	0800d24a 	.word	0x0800d24a
 8008f64:	0800d273 	.word	0x0800d273

08008f68 <_free_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	2900      	cmp	r1, #0
 8008f6e:	d040      	beq.n	8008ff2 <_free_r+0x8a>
 8008f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f74:	1f0c      	subs	r4, r1, #4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	bfb8      	it	lt
 8008f7a:	18e4      	addlt	r4, r4, r3
 8008f7c:	f000 f8e4 	bl	8009148 <__malloc_lock>
 8008f80:	4a1c      	ldr	r2, [pc, #112]	; (8008ff4 <_free_r+0x8c>)
 8008f82:	6813      	ldr	r3, [r2, #0]
 8008f84:	b933      	cbnz	r3, 8008f94 <_free_r+0x2c>
 8008f86:	6063      	str	r3, [r4, #4]
 8008f88:	6014      	str	r4, [r2, #0]
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f90:	f000 b8e0 	b.w	8009154 <__malloc_unlock>
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	d908      	bls.n	8008faa <_free_r+0x42>
 8008f98:	6820      	ldr	r0, [r4, #0]
 8008f9a:	1821      	adds	r1, r4, r0
 8008f9c:	428b      	cmp	r3, r1
 8008f9e:	bf01      	itttt	eq
 8008fa0:	6819      	ldreq	r1, [r3, #0]
 8008fa2:	685b      	ldreq	r3, [r3, #4]
 8008fa4:	1809      	addeq	r1, r1, r0
 8008fa6:	6021      	streq	r1, [r4, #0]
 8008fa8:	e7ed      	b.n	8008f86 <_free_r+0x1e>
 8008faa:	461a      	mov	r2, r3
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	b10b      	cbz	r3, 8008fb4 <_free_r+0x4c>
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	d9fa      	bls.n	8008faa <_free_r+0x42>
 8008fb4:	6811      	ldr	r1, [r2, #0]
 8008fb6:	1850      	adds	r0, r2, r1
 8008fb8:	42a0      	cmp	r0, r4
 8008fba:	d10b      	bne.n	8008fd4 <_free_r+0x6c>
 8008fbc:	6820      	ldr	r0, [r4, #0]
 8008fbe:	4401      	add	r1, r0
 8008fc0:	1850      	adds	r0, r2, r1
 8008fc2:	4283      	cmp	r3, r0
 8008fc4:	6011      	str	r1, [r2, #0]
 8008fc6:	d1e0      	bne.n	8008f8a <_free_r+0x22>
 8008fc8:	6818      	ldr	r0, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	4408      	add	r0, r1
 8008fce:	6010      	str	r0, [r2, #0]
 8008fd0:	6053      	str	r3, [r2, #4]
 8008fd2:	e7da      	b.n	8008f8a <_free_r+0x22>
 8008fd4:	d902      	bls.n	8008fdc <_free_r+0x74>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	602b      	str	r3, [r5, #0]
 8008fda:	e7d6      	b.n	8008f8a <_free_r+0x22>
 8008fdc:	6820      	ldr	r0, [r4, #0]
 8008fde:	1821      	adds	r1, r4, r0
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	bf01      	itttt	eq
 8008fe4:	6819      	ldreq	r1, [r3, #0]
 8008fe6:	685b      	ldreq	r3, [r3, #4]
 8008fe8:	1809      	addeq	r1, r1, r0
 8008fea:	6021      	streq	r1, [r4, #0]
 8008fec:	6063      	str	r3, [r4, #4]
 8008fee:	6054      	str	r4, [r2, #4]
 8008ff0:	e7cb      	b.n	8008f8a <_free_r+0x22>
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	200018c4 	.word	0x200018c4

08008ff8 <malloc>:
 8008ff8:	4b02      	ldr	r3, [pc, #8]	; (8009004 <malloc+0xc>)
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	f000 b823 	b.w	8009048 <_malloc_r>
 8009002:	bf00      	nop
 8009004:	20000084 	.word	0x20000084

08009008 <sbrk_aligned>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	4e0e      	ldr	r6, [pc, #56]	; (8009044 <sbrk_aligned+0x3c>)
 800900c:	460c      	mov	r4, r1
 800900e:	6831      	ldr	r1, [r6, #0]
 8009010:	4605      	mov	r5, r0
 8009012:	b911      	cbnz	r1, 800901a <sbrk_aligned+0x12>
 8009014:	f001 ffd2 	bl	800afbc <_sbrk_r>
 8009018:	6030      	str	r0, [r6, #0]
 800901a:	4621      	mov	r1, r4
 800901c:	4628      	mov	r0, r5
 800901e:	f001 ffcd 	bl	800afbc <_sbrk_r>
 8009022:	1c43      	adds	r3, r0, #1
 8009024:	d00a      	beq.n	800903c <sbrk_aligned+0x34>
 8009026:	1cc4      	adds	r4, r0, #3
 8009028:	f024 0403 	bic.w	r4, r4, #3
 800902c:	42a0      	cmp	r0, r4
 800902e:	d007      	beq.n	8009040 <sbrk_aligned+0x38>
 8009030:	1a21      	subs	r1, r4, r0
 8009032:	4628      	mov	r0, r5
 8009034:	f001 ffc2 	bl	800afbc <_sbrk_r>
 8009038:	3001      	adds	r0, #1
 800903a:	d101      	bne.n	8009040 <sbrk_aligned+0x38>
 800903c:	f04f 34ff 	mov.w	r4, #4294967295
 8009040:	4620      	mov	r0, r4
 8009042:	bd70      	pop	{r4, r5, r6, pc}
 8009044:	200018c8 	.word	0x200018c8

08009048 <_malloc_r>:
 8009048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800904c:	1ccd      	adds	r5, r1, #3
 800904e:	f025 0503 	bic.w	r5, r5, #3
 8009052:	3508      	adds	r5, #8
 8009054:	2d0c      	cmp	r5, #12
 8009056:	bf38      	it	cc
 8009058:	250c      	movcc	r5, #12
 800905a:	2d00      	cmp	r5, #0
 800905c:	4607      	mov	r7, r0
 800905e:	db01      	blt.n	8009064 <_malloc_r+0x1c>
 8009060:	42a9      	cmp	r1, r5
 8009062:	d905      	bls.n	8009070 <_malloc_r+0x28>
 8009064:	230c      	movs	r3, #12
 8009066:	2600      	movs	r6, #0
 8009068:	603b      	str	r3, [r7, #0]
 800906a:	4630      	mov	r0, r6
 800906c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009070:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009144 <_malloc_r+0xfc>
 8009074:	f000 f868 	bl	8009148 <__malloc_lock>
 8009078:	f8d8 3000 	ldr.w	r3, [r8]
 800907c:	461c      	mov	r4, r3
 800907e:	bb5c      	cbnz	r4, 80090d8 <_malloc_r+0x90>
 8009080:	4629      	mov	r1, r5
 8009082:	4638      	mov	r0, r7
 8009084:	f7ff ffc0 	bl	8009008 <sbrk_aligned>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	4604      	mov	r4, r0
 800908c:	d155      	bne.n	800913a <_malloc_r+0xf2>
 800908e:	f8d8 4000 	ldr.w	r4, [r8]
 8009092:	4626      	mov	r6, r4
 8009094:	2e00      	cmp	r6, #0
 8009096:	d145      	bne.n	8009124 <_malloc_r+0xdc>
 8009098:	2c00      	cmp	r4, #0
 800909a:	d048      	beq.n	800912e <_malloc_r+0xe6>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	4631      	mov	r1, r6
 80090a0:	4638      	mov	r0, r7
 80090a2:	eb04 0903 	add.w	r9, r4, r3
 80090a6:	f001 ff89 	bl	800afbc <_sbrk_r>
 80090aa:	4581      	cmp	r9, r0
 80090ac:	d13f      	bne.n	800912e <_malloc_r+0xe6>
 80090ae:	6821      	ldr	r1, [r4, #0]
 80090b0:	4638      	mov	r0, r7
 80090b2:	1a6d      	subs	r5, r5, r1
 80090b4:	4629      	mov	r1, r5
 80090b6:	f7ff ffa7 	bl	8009008 <sbrk_aligned>
 80090ba:	3001      	adds	r0, #1
 80090bc:	d037      	beq.n	800912e <_malloc_r+0xe6>
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	442b      	add	r3, r5
 80090c2:	6023      	str	r3, [r4, #0]
 80090c4:	f8d8 3000 	ldr.w	r3, [r8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d038      	beq.n	800913e <_malloc_r+0xf6>
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	42a2      	cmp	r2, r4
 80090d0:	d12b      	bne.n	800912a <_malloc_r+0xe2>
 80090d2:	2200      	movs	r2, #0
 80090d4:	605a      	str	r2, [r3, #4]
 80090d6:	e00f      	b.n	80090f8 <_malloc_r+0xb0>
 80090d8:	6822      	ldr	r2, [r4, #0]
 80090da:	1b52      	subs	r2, r2, r5
 80090dc:	d41f      	bmi.n	800911e <_malloc_r+0xd6>
 80090de:	2a0b      	cmp	r2, #11
 80090e0:	d917      	bls.n	8009112 <_malloc_r+0xca>
 80090e2:	1961      	adds	r1, r4, r5
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	6025      	str	r5, [r4, #0]
 80090e8:	bf18      	it	ne
 80090ea:	6059      	strne	r1, [r3, #4]
 80090ec:	6863      	ldr	r3, [r4, #4]
 80090ee:	bf08      	it	eq
 80090f0:	f8c8 1000 	streq.w	r1, [r8]
 80090f4:	5162      	str	r2, [r4, r5]
 80090f6:	604b      	str	r3, [r1, #4]
 80090f8:	4638      	mov	r0, r7
 80090fa:	f104 060b 	add.w	r6, r4, #11
 80090fe:	f000 f829 	bl	8009154 <__malloc_unlock>
 8009102:	f026 0607 	bic.w	r6, r6, #7
 8009106:	1d23      	adds	r3, r4, #4
 8009108:	1af2      	subs	r2, r6, r3
 800910a:	d0ae      	beq.n	800906a <_malloc_r+0x22>
 800910c:	1b9b      	subs	r3, r3, r6
 800910e:	50a3      	str	r3, [r4, r2]
 8009110:	e7ab      	b.n	800906a <_malloc_r+0x22>
 8009112:	42a3      	cmp	r3, r4
 8009114:	6862      	ldr	r2, [r4, #4]
 8009116:	d1dd      	bne.n	80090d4 <_malloc_r+0x8c>
 8009118:	f8c8 2000 	str.w	r2, [r8]
 800911c:	e7ec      	b.n	80090f8 <_malloc_r+0xb0>
 800911e:	4623      	mov	r3, r4
 8009120:	6864      	ldr	r4, [r4, #4]
 8009122:	e7ac      	b.n	800907e <_malloc_r+0x36>
 8009124:	4634      	mov	r4, r6
 8009126:	6876      	ldr	r6, [r6, #4]
 8009128:	e7b4      	b.n	8009094 <_malloc_r+0x4c>
 800912a:	4613      	mov	r3, r2
 800912c:	e7cc      	b.n	80090c8 <_malloc_r+0x80>
 800912e:	230c      	movs	r3, #12
 8009130:	4638      	mov	r0, r7
 8009132:	603b      	str	r3, [r7, #0]
 8009134:	f000 f80e 	bl	8009154 <__malloc_unlock>
 8009138:	e797      	b.n	800906a <_malloc_r+0x22>
 800913a:	6025      	str	r5, [r4, #0]
 800913c:	e7dc      	b.n	80090f8 <_malloc_r+0xb0>
 800913e:	605b      	str	r3, [r3, #4]
 8009140:	deff      	udf	#255	; 0xff
 8009142:	bf00      	nop
 8009144:	200018c4 	.word	0x200018c4

08009148 <__malloc_lock>:
 8009148:	4801      	ldr	r0, [pc, #4]	; (8009150 <__malloc_lock+0x8>)
 800914a:	f7ff b87c 	b.w	8008246 <__retarget_lock_acquire_recursive>
 800914e:	bf00      	nop
 8009150:	200018c0 	.word	0x200018c0

08009154 <__malloc_unlock>:
 8009154:	4801      	ldr	r0, [pc, #4]	; (800915c <__malloc_unlock+0x8>)
 8009156:	f7ff b877 	b.w	8008248 <__retarget_lock_release_recursive>
 800915a:	bf00      	nop
 800915c:	200018c0 	.word	0x200018c0

08009160 <_Balloc>:
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	69c6      	ldr	r6, [r0, #28]
 8009164:	4604      	mov	r4, r0
 8009166:	460d      	mov	r5, r1
 8009168:	b976      	cbnz	r6, 8009188 <_Balloc+0x28>
 800916a:	2010      	movs	r0, #16
 800916c:	f7ff ff44 	bl	8008ff8 <malloc>
 8009170:	4602      	mov	r2, r0
 8009172:	61e0      	str	r0, [r4, #28]
 8009174:	b920      	cbnz	r0, 8009180 <_Balloc+0x20>
 8009176:	216b      	movs	r1, #107	; 0x6b
 8009178:	4b17      	ldr	r3, [pc, #92]	; (80091d8 <_Balloc+0x78>)
 800917a:	4818      	ldr	r0, [pc, #96]	; (80091dc <_Balloc+0x7c>)
 800917c:	f001 ff34 	bl	800afe8 <__assert_func>
 8009180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009184:	6006      	str	r6, [r0, #0]
 8009186:	60c6      	str	r6, [r0, #12]
 8009188:	69e6      	ldr	r6, [r4, #28]
 800918a:	68f3      	ldr	r3, [r6, #12]
 800918c:	b183      	cbz	r3, 80091b0 <_Balloc+0x50>
 800918e:	69e3      	ldr	r3, [r4, #28]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009196:	b9b8      	cbnz	r0, 80091c8 <_Balloc+0x68>
 8009198:	2101      	movs	r1, #1
 800919a:	fa01 f605 	lsl.w	r6, r1, r5
 800919e:	1d72      	adds	r2, r6, #5
 80091a0:	4620      	mov	r0, r4
 80091a2:	0092      	lsls	r2, r2, #2
 80091a4:	f001 ff3e 	bl	800b024 <_calloc_r>
 80091a8:	b160      	cbz	r0, 80091c4 <_Balloc+0x64>
 80091aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091ae:	e00e      	b.n	80091ce <_Balloc+0x6e>
 80091b0:	2221      	movs	r2, #33	; 0x21
 80091b2:	2104      	movs	r1, #4
 80091b4:	4620      	mov	r0, r4
 80091b6:	f001 ff35 	bl	800b024 <_calloc_r>
 80091ba:	69e3      	ldr	r3, [r4, #28]
 80091bc:	60f0      	str	r0, [r6, #12]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e4      	bne.n	800918e <_Balloc+0x2e>
 80091c4:	2000      	movs	r0, #0
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	6802      	ldr	r2, [r0, #0]
 80091ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091ce:	2300      	movs	r3, #0
 80091d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091d4:	e7f7      	b.n	80091c6 <_Balloc+0x66>
 80091d6:	bf00      	nop
 80091d8:	0800d280 	.word	0x0800d280
 80091dc:	0800d300 	.word	0x0800d300

080091e0 <_Bfree>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	69c6      	ldr	r6, [r0, #28]
 80091e4:	4605      	mov	r5, r0
 80091e6:	460c      	mov	r4, r1
 80091e8:	b976      	cbnz	r6, 8009208 <_Bfree+0x28>
 80091ea:	2010      	movs	r0, #16
 80091ec:	f7ff ff04 	bl	8008ff8 <malloc>
 80091f0:	4602      	mov	r2, r0
 80091f2:	61e8      	str	r0, [r5, #28]
 80091f4:	b920      	cbnz	r0, 8009200 <_Bfree+0x20>
 80091f6:	218f      	movs	r1, #143	; 0x8f
 80091f8:	4b08      	ldr	r3, [pc, #32]	; (800921c <_Bfree+0x3c>)
 80091fa:	4809      	ldr	r0, [pc, #36]	; (8009220 <_Bfree+0x40>)
 80091fc:	f001 fef4 	bl	800afe8 <__assert_func>
 8009200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009204:	6006      	str	r6, [r0, #0]
 8009206:	60c6      	str	r6, [r0, #12]
 8009208:	b13c      	cbz	r4, 800921a <_Bfree+0x3a>
 800920a:	69eb      	ldr	r3, [r5, #28]
 800920c:	6862      	ldr	r2, [r4, #4]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009214:	6021      	str	r1, [r4, #0]
 8009216:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800921a:	bd70      	pop	{r4, r5, r6, pc}
 800921c:	0800d280 	.word	0x0800d280
 8009220:	0800d300 	.word	0x0800d300

08009224 <__multadd>:
 8009224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009228:	4607      	mov	r7, r0
 800922a:	460c      	mov	r4, r1
 800922c:	461e      	mov	r6, r3
 800922e:	2000      	movs	r0, #0
 8009230:	690d      	ldr	r5, [r1, #16]
 8009232:	f101 0c14 	add.w	ip, r1, #20
 8009236:	f8dc 3000 	ldr.w	r3, [ip]
 800923a:	3001      	adds	r0, #1
 800923c:	b299      	uxth	r1, r3
 800923e:	fb02 6101 	mla	r1, r2, r1, r6
 8009242:	0c1e      	lsrs	r6, r3, #16
 8009244:	0c0b      	lsrs	r3, r1, #16
 8009246:	fb02 3306 	mla	r3, r2, r6, r3
 800924a:	b289      	uxth	r1, r1
 800924c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009250:	4285      	cmp	r5, r0
 8009252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009256:	f84c 1b04 	str.w	r1, [ip], #4
 800925a:	dcec      	bgt.n	8009236 <__multadd+0x12>
 800925c:	b30e      	cbz	r6, 80092a2 <__multadd+0x7e>
 800925e:	68a3      	ldr	r3, [r4, #8]
 8009260:	42ab      	cmp	r3, r5
 8009262:	dc19      	bgt.n	8009298 <__multadd+0x74>
 8009264:	6861      	ldr	r1, [r4, #4]
 8009266:	4638      	mov	r0, r7
 8009268:	3101      	adds	r1, #1
 800926a:	f7ff ff79 	bl	8009160 <_Balloc>
 800926e:	4680      	mov	r8, r0
 8009270:	b928      	cbnz	r0, 800927e <__multadd+0x5a>
 8009272:	4602      	mov	r2, r0
 8009274:	21ba      	movs	r1, #186	; 0xba
 8009276:	4b0c      	ldr	r3, [pc, #48]	; (80092a8 <__multadd+0x84>)
 8009278:	480c      	ldr	r0, [pc, #48]	; (80092ac <__multadd+0x88>)
 800927a:	f001 feb5 	bl	800afe8 <__assert_func>
 800927e:	6922      	ldr	r2, [r4, #16]
 8009280:	f104 010c 	add.w	r1, r4, #12
 8009284:	3202      	adds	r2, #2
 8009286:	0092      	lsls	r2, r2, #2
 8009288:	300c      	adds	r0, #12
 800928a:	f7fe ffec 	bl	8008266 <memcpy>
 800928e:	4621      	mov	r1, r4
 8009290:	4638      	mov	r0, r7
 8009292:	f7ff ffa5 	bl	80091e0 <_Bfree>
 8009296:	4644      	mov	r4, r8
 8009298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800929c:	3501      	adds	r5, #1
 800929e:	615e      	str	r6, [r3, #20]
 80092a0:	6125      	str	r5, [r4, #16]
 80092a2:	4620      	mov	r0, r4
 80092a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a8:	0800d2ef 	.word	0x0800d2ef
 80092ac:	0800d300 	.word	0x0800d300

080092b0 <__s2b>:
 80092b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b4:	4615      	mov	r5, r2
 80092b6:	2209      	movs	r2, #9
 80092b8:	461f      	mov	r7, r3
 80092ba:	3308      	adds	r3, #8
 80092bc:	460c      	mov	r4, r1
 80092be:	fb93 f3f2 	sdiv	r3, r3, r2
 80092c2:	4606      	mov	r6, r0
 80092c4:	2201      	movs	r2, #1
 80092c6:	2100      	movs	r1, #0
 80092c8:	429a      	cmp	r2, r3
 80092ca:	db09      	blt.n	80092e0 <__s2b+0x30>
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7ff ff47 	bl	8009160 <_Balloc>
 80092d2:	b940      	cbnz	r0, 80092e6 <__s2b+0x36>
 80092d4:	4602      	mov	r2, r0
 80092d6:	21d3      	movs	r1, #211	; 0xd3
 80092d8:	4b18      	ldr	r3, [pc, #96]	; (800933c <__s2b+0x8c>)
 80092da:	4819      	ldr	r0, [pc, #100]	; (8009340 <__s2b+0x90>)
 80092dc:	f001 fe84 	bl	800afe8 <__assert_func>
 80092e0:	0052      	lsls	r2, r2, #1
 80092e2:	3101      	adds	r1, #1
 80092e4:	e7f0      	b.n	80092c8 <__s2b+0x18>
 80092e6:	9b08      	ldr	r3, [sp, #32]
 80092e8:	2d09      	cmp	r5, #9
 80092ea:	6143      	str	r3, [r0, #20]
 80092ec:	f04f 0301 	mov.w	r3, #1
 80092f0:	6103      	str	r3, [r0, #16]
 80092f2:	dd16      	ble.n	8009322 <__s2b+0x72>
 80092f4:	f104 0909 	add.w	r9, r4, #9
 80092f8:	46c8      	mov	r8, r9
 80092fa:	442c      	add	r4, r5
 80092fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009300:	4601      	mov	r1, r0
 8009302:	220a      	movs	r2, #10
 8009304:	4630      	mov	r0, r6
 8009306:	3b30      	subs	r3, #48	; 0x30
 8009308:	f7ff ff8c 	bl	8009224 <__multadd>
 800930c:	45a0      	cmp	r8, r4
 800930e:	d1f5      	bne.n	80092fc <__s2b+0x4c>
 8009310:	f1a5 0408 	sub.w	r4, r5, #8
 8009314:	444c      	add	r4, r9
 8009316:	1b2d      	subs	r5, r5, r4
 8009318:	1963      	adds	r3, r4, r5
 800931a:	42bb      	cmp	r3, r7
 800931c:	db04      	blt.n	8009328 <__s2b+0x78>
 800931e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009322:	2509      	movs	r5, #9
 8009324:	340a      	adds	r4, #10
 8009326:	e7f6      	b.n	8009316 <__s2b+0x66>
 8009328:	f814 3b01 	ldrb.w	r3, [r4], #1
 800932c:	4601      	mov	r1, r0
 800932e:	220a      	movs	r2, #10
 8009330:	4630      	mov	r0, r6
 8009332:	3b30      	subs	r3, #48	; 0x30
 8009334:	f7ff ff76 	bl	8009224 <__multadd>
 8009338:	e7ee      	b.n	8009318 <__s2b+0x68>
 800933a:	bf00      	nop
 800933c:	0800d2ef 	.word	0x0800d2ef
 8009340:	0800d300 	.word	0x0800d300

08009344 <__hi0bits>:
 8009344:	0c02      	lsrs	r2, r0, #16
 8009346:	0412      	lsls	r2, r2, #16
 8009348:	4603      	mov	r3, r0
 800934a:	b9ca      	cbnz	r2, 8009380 <__hi0bits+0x3c>
 800934c:	0403      	lsls	r3, r0, #16
 800934e:	2010      	movs	r0, #16
 8009350:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009354:	bf04      	itt	eq
 8009356:	021b      	lsleq	r3, r3, #8
 8009358:	3008      	addeq	r0, #8
 800935a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800935e:	bf04      	itt	eq
 8009360:	011b      	lsleq	r3, r3, #4
 8009362:	3004      	addeq	r0, #4
 8009364:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009368:	bf04      	itt	eq
 800936a:	009b      	lsleq	r3, r3, #2
 800936c:	3002      	addeq	r0, #2
 800936e:	2b00      	cmp	r3, #0
 8009370:	db05      	blt.n	800937e <__hi0bits+0x3a>
 8009372:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009376:	f100 0001 	add.w	r0, r0, #1
 800937a:	bf08      	it	eq
 800937c:	2020      	moveq	r0, #32
 800937e:	4770      	bx	lr
 8009380:	2000      	movs	r0, #0
 8009382:	e7e5      	b.n	8009350 <__hi0bits+0xc>

08009384 <__lo0bits>:
 8009384:	6803      	ldr	r3, [r0, #0]
 8009386:	4602      	mov	r2, r0
 8009388:	f013 0007 	ands.w	r0, r3, #7
 800938c:	d00b      	beq.n	80093a6 <__lo0bits+0x22>
 800938e:	07d9      	lsls	r1, r3, #31
 8009390:	d421      	bmi.n	80093d6 <__lo0bits+0x52>
 8009392:	0798      	lsls	r0, r3, #30
 8009394:	bf49      	itett	mi
 8009396:	085b      	lsrmi	r3, r3, #1
 8009398:	089b      	lsrpl	r3, r3, #2
 800939a:	2001      	movmi	r0, #1
 800939c:	6013      	strmi	r3, [r2, #0]
 800939e:	bf5c      	itt	pl
 80093a0:	2002      	movpl	r0, #2
 80093a2:	6013      	strpl	r3, [r2, #0]
 80093a4:	4770      	bx	lr
 80093a6:	b299      	uxth	r1, r3
 80093a8:	b909      	cbnz	r1, 80093ae <__lo0bits+0x2a>
 80093aa:	2010      	movs	r0, #16
 80093ac:	0c1b      	lsrs	r3, r3, #16
 80093ae:	b2d9      	uxtb	r1, r3
 80093b0:	b909      	cbnz	r1, 80093b6 <__lo0bits+0x32>
 80093b2:	3008      	adds	r0, #8
 80093b4:	0a1b      	lsrs	r3, r3, #8
 80093b6:	0719      	lsls	r1, r3, #28
 80093b8:	bf04      	itt	eq
 80093ba:	091b      	lsreq	r3, r3, #4
 80093bc:	3004      	addeq	r0, #4
 80093be:	0799      	lsls	r1, r3, #30
 80093c0:	bf04      	itt	eq
 80093c2:	089b      	lsreq	r3, r3, #2
 80093c4:	3002      	addeq	r0, #2
 80093c6:	07d9      	lsls	r1, r3, #31
 80093c8:	d403      	bmi.n	80093d2 <__lo0bits+0x4e>
 80093ca:	085b      	lsrs	r3, r3, #1
 80093cc:	f100 0001 	add.w	r0, r0, #1
 80093d0:	d003      	beq.n	80093da <__lo0bits+0x56>
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	4770      	bx	lr
 80093d6:	2000      	movs	r0, #0
 80093d8:	4770      	bx	lr
 80093da:	2020      	movs	r0, #32
 80093dc:	4770      	bx	lr
	...

080093e0 <__i2b>:
 80093e0:	b510      	push	{r4, lr}
 80093e2:	460c      	mov	r4, r1
 80093e4:	2101      	movs	r1, #1
 80093e6:	f7ff febb 	bl	8009160 <_Balloc>
 80093ea:	4602      	mov	r2, r0
 80093ec:	b928      	cbnz	r0, 80093fa <__i2b+0x1a>
 80093ee:	f240 1145 	movw	r1, #325	; 0x145
 80093f2:	4b04      	ldr	r3, [pc, #16]	; (8009404 <__i2b+0x24>)
 80093f4:	4804      	ldr	r0, [pc, #16]	; (8009408 <__i2b+0x28>)
 80093f6:	f001 fdf7 	bl	800afe8 <__assert_func>
 80093fa:	2301      	movs	r3, #1
 80093fc:	6144      	str	r4, [r0, #20]
 80093fe:	6103      	str	r3, [r0, #16]
 8009400:	bd10      	pop	{r4, pc}
 8009402:	bf00      	nop
 8009404:	0800d2ef 	.word	0x0800d2ef
 8009408:	0800d300 	.word	0x0800d300

0800940c <__multiply>:
 800940c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009410:	4691      	mov	r9, r2
 8009412:	690a      	ldr	r2, [r1, #16]
 8009414:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009418:	460c      	mov	r4, r1
 800941a:	429a      	cmp	r2, r3
 800941c:	bfbe      	ittt	lt
 800941e:	460b      	movlt	r3, r1
 8009420:	464c      	movlt	r4, r9
 8009422:	4699      	movlt	r9, r3
 8009424:	6927      	ldr	r7, [r4, #16]
 8009426:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800942a:	68a3      	ldr	r3, [r4, #8]
 800942c:	6861      	ldr	r1, [r4, #4]
 800942e:	eb07 060a 	add.w	r6, r7, sl
 8009432:	42b3      	cmp	r3, r6
 8009434:	b085      	sub	sp, #20
 8009436:	bfb8      	it	lt
 8009438:	3101      	addlt	r1, #1
 800943a:	f7ff fe91 	bl	8009160 <_Balloc>
 800943e:	b930      	cbnz	r0, 800944e <__multiply+0x42>
 8009440:	4602      	mov	r2, r0
 8009442:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009446:	4b43      	ldr	r3, [pc, #268]	; (8009554 <__multiply+0x148>)
 8009448:	4843      	ldr	r0, [pc, #268]	; (8009558 <__multiply+0x14c>)
 800944a:	f001 fdcd 	bl	800afe8 <__assert_func>
 800944e:	f100 0514 	add.w	r5, r0, #20
 8009452:	462b      	mov	r3, r5
 8009454:	2200      	movs	r2, #0
 8009456:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800945a:	4543      	cmp	r3, r8
 800945c:	d321      	bcc.n	80094a2 <__multiply+0x96>
 800945e:	f104 0314 	add.w	r3, r4, #20
 8009462:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009466:	f109 0314 	add.w	r3, r9, #20
 800946a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800946e:	9202      	str	r2, [sp, #8]
 8009470:	1b3a      	subs	r2, r7, r4
 8009472:	3a15      	subs	r2, #21
 8009474:	f022 0203 	bic.w	r2, r2, #3
 8009478:	3204      	adds	r2, #4
 800947a:	f104 0115 	add.w	r1, r4, #21
 800947e:	428f      	cmp	r7, r1
 8009480:	bf38      	it	cc
 8009482:	2204      	movcc	r2, #4
 8009484:	9201      	str	r2, [sp, #4]
 8009486:	9a02      	ldr	r2, [sp, #8]
 8009488:	9303      	str	r3, [sp, #12]
 800948a:	429a      	cmp	r2, r3
 800948c:	d80c      	bhi.n	80094a8 <__multiply+0x9c>
 800948e:	2e00      	cmp	r6, #0
 8009490:	dd03      	ble.n	800949a <__multiply+0x8e>
 8009492:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009496:	2b00      	cmp	r3, #0
 8009498:	d05a      	beq.n	8009550 <__multiply+0x144>
 800949a:	6106      	str	r6, [r0, #16]
 800949c:	b005      	add	sp, #20
 800949e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a2:	f843 2b04 	str.w	r2, [r3], #4
 80094a6:	e7d8      	b.n	800945a <__multiply+0x4e>
 80094a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80094ac:	f1ba 0f00 	cmp.w	sl, #0
 80094b0:	d023      	beq.n	80094fa <__multiply+0xee>
 80094b2:	46a9      	mov	r9, r5
 80094b4:	f04f 0c00 	mov.w	ip, #0
 80094b8:	f104 0e14 	add.w	lr, r4, #20
 80094bc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80094c0:	f8d9 1000 	ldr.w	r1, [r9]
 80094c4:	fa1f fb82 	uxth.w	fp, r2
 80094c8:	b289      	uxth	r1, r1
 80094ca:	fb0a 110b 	mla	r1, sl, fp, r1
 80094ce:	4461      	add	r1, ip
 80094d0:	f8d9 c000 	ldr.w	ip, [r9]
 80094d4:	0c12      	lsrs	r2, r2, #16
 80094d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80094da:	fb0a c202 	mla	r2, sl, r2, ip
 80094de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094e2:	b289      	uxth	r1, r1
 80094e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094e8:	4577      	cmp	r7, lr
 80094ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094ee:	f849 1b04 	str.w	r1, [r9], #4
 80094f2:	d8e3      	bhi.n	80094bc <__multiply+0xb0>
 80094f4:	9a01      	ldr	r2, [sp, #4]
 80094f6:	f845 c002 	str.w	ip, [r5, r2]
 80094fa:	9a03      	ldr	r2, [sp, #12]
 80094fc:	3304      	adds	r3, #4
 80094fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009502:	f1b9 0f00 	cmp.w	r9, #0
 8009506:	d021      	beq.n	800954c <__multiply+0x140>
 8009508:	46ae      	mov	lr, r5
 800950a:	f04f 0a00 	mov.w	sl, #0
 800950e:	6829      	ldr	r1, [r5, #0]
 8009510:	f104 0c14 	add.w	ip, r4, #20
 8009514:	f8bc b000 	ldrh.w	fp, [ip]
 8009518:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800951c:	b289      	uxth	r1, r1
 800951e:	fb09 220b 	mla	r2, r9, fp, r2
 8009522:	4452      	add	r2, sl
 8009524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009528:	f84e 1b04 	str.w	r1, [lr], #4
 800952c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009530:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009534:	f8be 1000 	ldrh.w	r1, [lr]
 8009538:	4567      	cmp	r7, ip
 800953a:	fb09 110a 	mla	r1, r9, sl, r1
 800953e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009542:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009546:	d8e5      	bhi.n	8009514 <__multiply+0x108>
 8009548:	9a01      	ldr	r2, [sp, #4]
 800954a:	50a9      	str	r1, [r5, r2]
 800954c:	3504      	adds	r5, #4
 800954e:	e79a      	b.n	8009486 <__multiply+0x7a>
 8009550:	3e01      	subs	r6, #1
 8009552:	e79c      	b.n	800948e <__multiply+0x82>
 8009554:	0800d2ef 	.word	0x0800d2ef
 8009558:	0800d300 	.word	0x0800d300

0800955c <__pow5mult>:
 800955c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009560:	4615      	mov	r5, r2
 8009562:	f012 0203 	ands.w	r2, r2, #3
 8009566:	4606      	mov	r6, r0
 8009568:	460f      	mov	r7, r1
 800956a:	d007      	beq.n	800957c <__pow5mult+0x20>
 800956c:	4c25      	ldr	r4, [pc, #148]	; (8009604 <__pow5mult+0xa8>)
 800956e:	3a01      	subs	r2, #1
 8009570:	2300      	movs	r3, #0
 8009572:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009576:	f7ff fe55 	bl	8009224 <__multadd>
 800957a:	4607      	mov	r7, r0
 800957c:	10ad      	asrs	r5, r5, #2
 800957e:	d03d      	beq.n	80095fc <__pow5mult+0xa0>
 8009580:	69f4      	ldr	r4, [r6, #28]
 8009582:	b97c      	cbnz	r4, 80095a4 <__pow5mult+0x48>
 8009584:	2010      	movs	r0, #16
 8009586:	f7ff fd37 	bl	8008ff8 <malloc>
 800958a:	4602      	mov	r2, r0
 800958c:	61f0      	str	r0, [r6, #28]
 800958e:	b928      	cbnz	r0, 800959c <__pow5mult+0x40>
 8009590:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009594:	4b1c      	ldr	r3, [pc, #112]	; (8009608 <__pow5mult+0xac>)
 8009596:	481d      	ldr	r0, [pc, #116]	; (800960c <__pow5mult+0xb0>)
 8009598:	f001 fd26 	bl	800afe8 <__assert_func>
 800959c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095a0:	6004      	str	r4, [r0, #0]
 80095a2:	60c4      	str	r4, [r0, #12]
 80095a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80095a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095ac:	b94c      	cbnz	r4, 80095c2 <__pow5mult+0x66>
 80095ae:	f240 2171 	movw	r1, #625	; 0x271
 80095b2:	4630      	mov	r0, r6
 80095b4:	f7ff ff14 	bl	80093e0 <__i2b>
 80095b8:	2300      	movs	r3, #0
 80095ba:	4604      	mov	r4, r0
 80095bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80095c0:	6003      	str	r3, [r0, #0]
 80095c2:	f04f 0900 	mov.w	r9, #0
 80095c6:	07eb      	lsls	r3, r5, #31
 80095c8:	d50a      	bpl.n	80095e0 <__pow5mult+0x84>
 80095ca:	4639      	mov	r1, r7
 80095cc:	4622      	mov	r2, r4
 80095ce:	4630      	mov	r0, r6
 80095d0:	f7ff ff1c 	bl	800940c <__multiply>
 80095d4:	4680      	mov	r8, r0
 80095d6:	4639      	mov	r1, r7
 80095d8:	4630      	mov	r0, r6
 80095da:	f7ff fe01 	bl	80091e0 <_Bfree>
 80095de:	4647      	mov	r7, r8
 80095e0:	106d      	asrs	r5, r5, #1
 80095e2:	d00b      	beq.n	80095fc <__pow5mult+0xa0>
 80095e4:	6820      	ldr	r0, [r4, #0]
 80095e6:	b938      	cbnz	r0, 80095f8 <__pow5mult+0x9c>
 80095e8:	4622      	mov	r2, r4
 80095ea:	4621      	mov	r1, r4
 80095ec:	4630      	mov	r0, r6
 80095ee:	f7ff ff0d 	bl	800940c <__multiply>
 80095f2:	6020      	str	r0, [r4, #0]
 80095f4:	f8c0 9000 	str.w	r9, [r0]
 80095f8:	4604      	mov	r4, r0
 80095fa:	e7e4      	b.n	80095c6 <__pow5mult+0x6a>
 80095fc:	4638      	mov	r0, r7
 80095fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009602:	bf00      	nop
 8009604:	0800d450 	.word	0x0800d450
 8009608:	0800d280 	.word	0x0800d280
 800960c:	0800d300 	.word	0x0800d300

08009610 <__lshift>:
 8009610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009614:	460c      	mov	r4, r1
 8009616:	4607      	mov	r7, r0
 8009618:	4691      	mov	r9, r2
 800961a:	6923      	ldr	r3, [r4, #16]
 800961c:	6849      	ldr	r1, [r1, #4]
 800961e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009622:	68a3      	ldr	r3, [r4, #8]
 8009624:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009628:	f108 0601 	add.w	r6, r8, #1
 800962c:	42b3      	cmp	r3, r6
 800962e:	db0b      	blt.n	8009648 <__lshift+0x38>
 8009630:	4638      	mov	r0, r7
 8009632:	f7ff fd95 	bl	8009160 <_Balloc>
 8009636:	4605      	mov	r5, r0
 8009638:	b948      	cbnz	r0, 800964e <__lshift+0x3e>
 800963a:	4602      	mov	r2, r0
 800963c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009640:	4b27      	ldr	r3, [pc, #156]	; (80096e0 <__lshift+0xd0>)
 8009642:	4828      	ldr	r0, [pc, #160]	; (80096e4 <__lshift+0xd4>)
 8009644:	f001 fcd0 	bl	800afe8 <__assert_func>
 8009648:	3101      	adds	r1, #1
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	e7ee      	b.n	800962c <__lshift+0x1c>
 800964e:	2300      	movs	r3, #0
 8009650:	f100 0114 	add.w	r1, r0, #20
 8009654:	f100 0210 	add.w	r2, r0, #16
 8009658:	4618      	mov	r0, r3
 800965a:	4553      	cmp	r3, sl
 800965c:	db33      	blt.n	80096c6 <__lshift+0xb6>
 800965e:	6920      	ldr	r0, [r4, #16]
 8009660:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009664:	f104 0314 	add.w	r3, r4, #20
 8009668:	f019 091f 	ands.w	r9, r9, #31
 800966c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009670:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009674:	d02b      	beq.n	80096ce <__lshift+0xbe>
 8009676:	468a      	mov	sl, r1
 8009678:	2200      	movs	r2, #0
 800967a:	f1c9 0e20 	rsb	lr, r9, #32
 800967e:	6818      	ldr	r0, [r3, #0]
 8009680:	fa00 f009 	lsl.w	r0, r0, r9
 8009684:	4310      	orrs	r0, r2
 8009686:	f84a 0b04 	str.w	r0, [sl], #4
 800968a:	f853 2b04 	ldr.w	r2, [r3], #4
 800968e:	459c      	cmp	ip, r3
 8009690:	fa22 f20e 	lsr.w	r2, r2, lr
 8009694:	d8f3      	bhi.n	800967e <__lshift+0x6e>
 8009696:	ebac 0304 	sub.w	r3, ip, r4
 800969a:	3b15      	subs	r3, #21
 800969c:	f023 0303 	bic.w	r3, r3, #3
 80096a0:	3304      	adds	r3, #4
 80096a2:	f104 0015 	add.w	r0, r4, #21
 80096a6:	4584      	cmp	ip, r0
 80096a8:	bf38      	it	cc
 80096aa:	2304      	movcc	r3, #4
 80096ac:	50ca      	str	r2, [r1, r3]
 80096ae:	b10a      	cbz	r2, 80096b4 <__lshift+0xa4>
 80096b0:	f108 0602 	add.w	r6, r8, #2
 80096b4:	3e01      	subs	r6, #1
 80096b6:	4638      	mov	r0, r7
 80096b8:	4621      	mov	r1, r4
 80096ba:	612e      	str	r6, [r5, #16]
 80096bc:	f7ff fd90 	bl	80091e0 <_Bfree>
 80096c0:	4628      	mov	r0, r5
 80096c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80096ca:	3301      	adds	r3, #1
 80096cc:	e7c5      	b.n	800965a <__lshift+0x4a>
 80096ce:	3904      	subs	r1, #4
 80096d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d4:	459c      	cmp	ip, r3
 80096d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80096da:	d8f9      	bhi.n	80096d0 <__lshift+0xc0>
 80096dc:	e7ea      	b.n	80096b4 <__lshift+0xa4>
 80096de:	bf00      	nop
 80096e0:	0800d2ef 	.word	0x0800d2ef
 80096e4:	0800d300 	.word	0x0800d300

080096e8 <__mcmp>:
 80096e8:	4603      	mov	r3, r0
 80096ea:	690a      	ldr	r2, [r1, #16]
 80096ec:	6900      	ldr	r0, [r0, #16]
 80096ee:	b530      	push	{r4, r5, lr}
 80096f0:	1a80      	subs	r0, r0, r2
 80096f2:	d10d      	bne.n	8009710 <__mcmp+0x28>
 80096f4:	3314      	adds	r3, #20
 80096f6:	3114      	adds	r1, #20
 80096f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80096fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009700:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009704:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009708:	4295      	cmp	r5, r2
 800970a:	d002      	beq.n	8009712 <__mcmp+0x2a>
 800970c:	d304      	bcc.n	8009718 <__mcmp+0x30>
 800970e:	2001      	movs	r0, #1
 8009710:	bd30      	pop	{r4, r5, pc}
 8009712:	42a3      	cmp	r3, r4
 8009714:	d3f4      	bcc.n	8009700 <__mcmp+0x18>
 8009716:	e7fb      	b.n	8009710 <__mcmp+0x28>
 8009718:	f04f 30ff 	mov.w	r0, #4294967295
 800971c:	e7f8      	b.n	8009710 <__mcmp+0x28>
	...

08009720 <__mdiff>:
 8009720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	460d      	mov	r5, r1
 8009726:	4607      	mov	r7, r0
 8009728:	4611      	mov	r1, r2
 800972a:	4628      	mov	r0, r5
 800972c:	4614      	mov	r4, r2
 800972e:	f7ff ffdb 	bl	80096e8 <__mcmp>
 8009732:	1e06      	subs	r6, r0, #0
 8009734:	d111      	bne.n	800975a <__mdiff+0x3a>
 8009736:	4631      	mov	r1, r6
 8009738:	4638      	mov	r0, r7
 800973a:	f7ff fd11 	bl	8009160 <_Balloc>
 800973e:	4602      	mov	r2, r0
 8009740:	b928      	cbnz	r0, 800974e <__mdiff+0x2e>
 8009742:	f240 2137 	movw	r1, #567	; 0x237
 8009746:	4b3a      	ldr	r3, [pc, #232]	; (8009830 <__mdiff+0x110>)
 8009748:	483a      	ldr	r0, [pc, #232]	; (8009834 <__mdiff+0x114>)
 800974a:	f001 fc4d 	bl	800afe8 <__assert_func>
 800974e:	2301      	movs	r3, #1
 8009750:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009754:	4610      	mov	r0, r2
 8009756:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975a:	bfa4      	itt	ge
 800975c:	4623      	movge	r3, r4
 800975e:	462c      	movge	r4, r5
 8009760:	4638      	mov	r0, r7
 8009762:	6861      	ldr	r1, [r4, #4]
 8009764:	bfa6      	itte	ge
 8009766:	461d      	movge	r5, r3
 8009768:	2600      	movge	r6, #0
 800976a:	2601      	movlt	r6, #1
 800976c:	f7ff fcf8 	bl	8009160 <_Balloc>
 8009770:	4602      	mov	r2, r0
 8009772:	b918      	cbnz	r0, 800977c <__mdiff+0x5c>
 8009774:	f240 2145 	movw	r1, #581	; 0x245
 8009778:	4b2d      	ldr	r3, [pc, #180]	; (8009830 <__mdiff+0x110>)
 800977a:	e7e5      	b.n	8009748 <__mdiff+0x28>
 800977c:	f102 0814 	add.w	r8, r2, #20
 8009780:	46c2      	mov	sl, r8
 8009782:	f04f 0c00 	mov.w	ip, #0
 8009786:	6927      	ldr	r7, [r4, #16]
 8009788:	60c6      	str	r6, [r0, #12]
 800978a:	692e      	ldr	r6, [r5, #16]
 800978c:	f104 0014 	add.w	r0, r4, #20
 8009790:	f105 0914 	add.w	r9, r5, #20
 8009794:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009798:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800979c:	3410      	adds	r4, #16
 800979e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80097a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80097a6:	fa1f f18b 	uxth.w	r1, fp
 80097aa:	4461      	add	r1, ip
 80097ac:	fa1f fc83 	uxth.w	ip, r3
 80097b0:	0c1b      	lsrs	r3, r3, #16
 80097b2:	eba1 010c 	sub.w	r1, r1, ip
 80097b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80097be:	b289      	uxth	r1, r1
 80097c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80097c4:	454e      	cmp	r6, r9
 80097c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80097ca:	f84a 1b04 	str.w	r1, [sl], #4
 80097ce:	d8e6      	bhi.n	800979e <__mdiff+0x7e>
 80097d0:	1b73      	subs	r3, r6, r5
 80097d2:	3b15      	subs	r3, #21
 80097d4:	f023 0303 	bic.w	r3, r3, #3
 80097d8:	3515      	adds	r5, #21
 80097da:	3304      	adds	r3, #4
 80097dc:	42ae      	cmp	r6, r5
 80097de:	bf38      	it	cc
 80097e0:	2304      	movcc	r3, #4
 80097e2:	4418      	add	r0, r3
 80097e4:	4443      	add	r3, r8
 80097e6:	461e      	mov	r6, r3
 80097e8:	4605      	mov	r5, r0
 80097ea:	4575      	cmp	r5, lr
 80097ec:	d30e      	bcc.n	800980c <__mdiff+0xec>
 80097ee:	f10e 0103 	add.w	r1, lr, #3
 80097f2:	1a09      	subs	r1, r1, r0
 80097f4:	f021 0103 	bic.w	r1, r1, #3
 80097f8:	3803      	subs	r0, #3
 80097fa:	4586      	cmp	lr, r0
 80097fc:	bf38      	it	cc
 80097fe:	2100      	movcc	r1, #0
 8009800:	440b      	add	r3, r1
 8009802:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009806:	b189      	cbz	r1, 800982c <__mdiff+0x10c>
 8009808:	6117      	str	r7, [r2, #16]
 800980a:	e7a3      	b.n	8009754 <__mdiff+0x34>
 800980c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009810:	fa1f f188 	uxth.w	r1, r8
 8009814:	4461      	add	r1, ip
 8009816:	140c      	asrs	r4, r1, #16
 8009818:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800981c:	b289      	uxth	r1, r1
 800981e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009822:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009826:	f846 1b04 	str.w	r1, [r6], #4
 800982a:	e7de      	b.n	80097ea <__mdiff+0xca>
 800982c:	3f01      	subs	r7, #1
 800982e:	e7e8      	b.n	8009802 <__mdiff+0xe2>
 8009830:	0800d2ef 	.word	0x0800d2ef
 8009834:	0800d300 	.word	0x0800d300

08009838 <__ulp>:
 8009838:	4b0e      	ldr	r3, [pc, #56]	; (8009874 <__ulp+0x3c>)
 800983a:	400b      	ands	r3, r1
 800983c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009840:	2b00      	cmp	r3, #0
 8009842:	dc08      	bgt.n	8009856 <__ulp+0x1e>
 8009844:	425b      	negs	r3, r3
 8009846:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800984a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800984e:	da04      	bge.n	800985a <__ulp+0x22>
 8009850:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009854:	4113      	asrs	r3, r2
 8009856:	2200      	movs	r2, #0
 8009858:	e008      	b.n	800986c <__ulp+0x34>
 800985a:	f1a2 0314 	sub.w	r3, r2, #20
 800985e:	2b1e      	cmp	r3, #30
 8009860:	bfd6      	itet	le
 8009862:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009866:	2201      	movgt	r2, #1
 8009868:	40da      	lsrle	r2, r3
 800986a:	2300      	movs	r3, #0
 800986c:	4619      	mov	r1, r3
 800986e:	4610      	mov	r0, r2
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	7ff00000 	.word	0x7ff00000

08009878 <__b2d>:
 8009878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987a:	6905      	ldr	r5, [r0, #16]
 800987c:	f100 0714 	add.w	r7, r0, #20
 8009880:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009884:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009888:	1f2e      	subs	r6, r5, #4
 800988a:	4620      	mov	r0, r4
 800988c:	f7ff fd5a 	bl	8009344 <__hi0bits>
 8009890:	f1c0 0220 	rsb	r2, r0, #32
 8009894:	280a      	cmp	r0, #10
 8009896:	4603      	mov	r3, r0
 8009898:	f8df c068 	ldr.w	ip, [pc, #104]	; 8009904 <__b2d+0x8c>
 800989c:	600a      	str	r2, [r1, #0]
 800989e:	dc12      	bgt.n	80098c6 <__b2d+0x4e>
 80098a0:	f1c0 0e0b 	rsb	lr, r0, #11
 80098a4:	fa24 f20e 	lsr.w	r2, r4, lr
 80098a8:	42b7      	cmp	r7, r6
 80098aa:	ea42 010c 	orr.w	r1, r2, ip
 80098ae:	bf2c      	ite	cs
 80098b0:	2200      	movcs	r2, #0
 80098b2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80098b6:	3315      	adds	r3, #21
 80098b8:	fa04 f303 	lsl.w	r3, r4, r3
 80098bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80098c0:	431a      	orrs	r2, r3
 80098c2:	4610      	mov	r0, r2
 80098c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c6:	42b7      	cmp	r7, r6
 80098c8:	bf2e      	itee	cs
 80098ca:	2200      	movcs	r2, #0
 80098cc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80098d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80098d4:	3b0b      	subs	r3, #11
 80098d6:	d012      	beq.n	80098fe <__b2d+0x86>
 80098d8:	f1c3 0520 	rsb	r5, r3, #32
 80098dc:	fa22 f105 	lsr.w	r1, r2, r5
 80098e0:	409c      	lsls	r4, r3
 80098e2:	430c      	orrs	r4, r1
 80098e4:	42be      	cmp	r6, r7
 80098e6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80098ea:	bf94      	ite	ls
 80098ec:	2400      	movls	r4, #0
 80098ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80098f2:	409a      	lsls	r2, r3
 80098f4:	40ec      	lsrs	r4, r5
 80098f6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80098fa:	4322      	orrs	r2, r4
 80098fc:	e7e1      	b.n	80098c2 <__b2d+0x4a>
 80098fe:	ea44 010c 	orr.w	r1, r4, ip
 8009902:	e7de      	b.n	80098c2 <__b2d+0x4a>
 8009904:	3ff00000 	.word	0x3ff00000

08009908 <__d2b>:
 8009908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800990a:	2101      	movs	r1, #1
 800990c:	4617      	mov	r7, r2
 800990e:	461c      	mov	r4, r3
 8009910:	9e08      	ldr	r6, [sp, #32]
 8009912:	f7ff fc25 	bl	8009160 <_Balloc>
 8009916:	4605      	mov	r5, r0
 8009918:	b930      	cbnz	r0, 8009928 <__d2b+0x20>
 800991a:	4602      	mov	r2, r0
 800991c:	f240 310f 	movw	r1, #783	; 0x30f
 8009920:	4b22      	ldr	r3, [pc, #136]	; (80099ac <__d2b+0xa4>)
 8009922:	4823      	ldr	r0, [pc, #140]	; (80099b0 <__d2b+0xa8>)
 8009924:	f001 fb60 	bl	800afe8 <__assert_func>
 8009928:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800992c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009930:	bb24      	cbnz	r4, 800997c <__d2b+0x74>
 8009932:	2f00      	cmp	r7, #0
 8009934:	9301      	str	r3, [sp, #4]
 8009936:	d026      	beq.n	8009986 <__d2b+0x7e>
 8009938:	4668      	mov	r0, sp
 800993a:	9700      	str	r7, [sp, #0]
 800993c:	f7ff fd22 	bl	8009384 <__lo0bits>
 8009940:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009944:	b1e8      	cbz	r0, 8009982 <__d2b+0x7a>
 8009946:	f1c0 0320 	rsb	r3, r0, #32
 800994a:	fa02 f303 	lsl.w	r3, r2, r3
 800994e:	430b      	orrs	r3, r1
 8009950:	40c2      	lsrs	r2, r0
 8009952:	616b      	str	r3, [r5, #20]
 8009954:	9201      	str	r2, [sp, #4]
 8009956:	9b01      	ldr	r3, [sp, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	bf14      	ite	ne
 800995c:	2102      	movne	r1, #2
 800995e:	2101      	moveq	r1, #1
 8009960:	61ab      	str	r3, [r5, #24]
 8009962:	6129      	str	r1, [r5, #16]
 8009964:	b1bc      	cbz	r4, 8009996 <__d2b+0x8e>
 8009966:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800996a:	4404      	add	r4, r0
 800996c:	6034      	str	r4, [r6, #0]
 800996e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009974:	6018      	str	r0, [r3, #0]
 8009976:	4628      	mov	r0, r5
 8009978:	b003      	add	sp, #12
 800997a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800997c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009980:	e7d7      	b.n	8009932 <__d2b+0x2a>
 8009982:	6169      	str	r1, [r5, #20]
 8009984:	e7e7      	b.n	8009956 <__d2b+0x4e>
 8009986:	a801      	add	r0, sp, #4
 8009988:	f7ff fcfc 	bl	8009384 <__lo0bits>
 800998c:	9b01      	ldr	r3, [sp, #4]
 800998e:	2101      	movs	r1, #1
 8009990:	616b      	str	r3, [r5, #20]
 8009992:	3020      	adds	r0, #32
 8009994:	e7e5      	b.n	8009962 <__d2b+0x5a>
 8009996:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800999a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800999e:	6030      	str	r0, [r6, #0]
 80099a0:	6918      	ldr	r0, [r3, #16]
 80099a2:	f7ff fccf 	bl	8009344 <__hi0bits>
 80099a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80099aa:	e7e2      	b.n	8009972 <__d2b+0x6a>
 80099ac:	0800d2ef 	.word	0x0800d2ef
 80099b0:	0800d300 	.word	0x0800d300

080099b4 <__ratio>:
 80099b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b8:	4688      	mov	r8, r1
 80099ba:	4669      	mov	r1, sp
 80099bc:	4681      	mov	r9, r0
 80099be:	f7ff ff5b 	bl	8009878 <__b2d>
 80099c2:	460f      	mov	r7, r1
 80099c4:	4604      	mov	r4, r0
 80099c6:	460d      	mov	r5, r1
 80099c8:	4640      	mov	r0, r8
 80099ca:	a901      	add	r1, sp, #4
 80099cc:	f7ff ff54 	bl	8009878 <__b2d>
 80099d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80099d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80099d8:	468b      	mov	fp, r1
 80099da:	eba3 0c02 	sub.w	ip, r3, r2
 80099de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80099e2:	1a9b      	subs	r3, r3, r2
 80099e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	bfd5      	itete	le
 80099ec:	460a      	movle	r2, r1
 80099ee:	462a      	movgt	r2, r5
 80099f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80099f4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80099f8:	bfd8      	it	le
 80099fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80099fe:	465b      	mov	r3, fp
 8009a00:	4602      	mov	r2, r0
 8009a02:	4639      	mov	r1, r7
 8009a04:	4620      	mov	r0, r4
 8009a06:	f7f6 fe91 	bl	800072c <__aeabi_ddiv>
 8009a0a:	b003      	add	sp, #12
 8009a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a10 <__copybits>:
 8009a10:	3901      	subs	r1, #1
 8009a12:	b570      	push	{r4, r5, r6, lr}
 8009a14:	1149      	asrs	r1, r1, #5
 8009a16:	6914      	ldr	r4, [r2, #16]
 8009a18:	3101      	adds	r1, #1
 8009a1a:	f102 0314 	add.w	r3, r2, #20
 8009a1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009a26:	1f05      	subs	r5, r0, #4
 8009a28:	42a3      	cmp	r3, r4
 8009a2a:	d30c      	bcc.n	8009a46 <__copybits+0x36>
 8009a2c:	1aa3      	subs	r3, r4, r2
 8009a2e:	3b11      	subs	r3, #17
 8009a30:	f023 0303 	bic.w	r3, r3, #3
 8009a34:	3211      	adds	r2, #17
 8009a36:	42a2      	cmp	r2, r4
 8009a38:	bf88      	it	hi
 8009a3a:	2300      	movhi	r3, #0
 8009a3c:	4418      	add	r0, r3
 8009a3e:	2300      	movs	r3, #0
 8009a40:	4288      	cmp	r0, r1
 8009a42:	d305      	bcc.n	8009a50 <__copybits+0x40>
 8009a44:	bd70      	pop	{r4, r5, r6, pc}
 8009a46:	f853 6b04 	ldr.w	r6, [r3], #4
 8009a4a:	f845 6f04 	str.w	r6, [r5, #4]!
 8009a4e:	e7eb      	b.n	8009a28 <__copybits+0x18>
 8009a50:	f840 3b04 	str.w	r3, [r0], #4
 8009a54:	e7f4      	b.n	8009a40 <__copybits+0x30>

08009a56 <__any_on>:
 8009a56:	f100 0214 	add.w	r2, r0, #20
 8009a5a:	6900      	ldr	r0, [r0, #16]
 8009a5c:	114b      	asrs	r3, r1, #5
 8009a5e:	4298      	cmp	r0, r3
 8009a60:	b510      	push	{r4, lr}
 8009a62:	db11      	blt.n	8009a88 <__any_on+0x32>
 8009a64:	dd0a      	ble.n	8009a7c <__any_on+0x26>
 8009a66:	f011 011f 	ands.w	r1, r1, #31
 8009a6a:	d007      	beq.n	8009a7c <__any_on+0x26>
 8009a6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a70:	fa24 f001 	lsr.w	r0, r4, r1
 8009a74:	fa00 f101 	lsl.w	r1, r0, r1
 8009a78:	428c      	cmp	r4, r1
 8009a7a:	d10b      	bne.n	8009a94 <__any_on+0x3e>
 8009a7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d803      	bhi.n	8009a8c <__any_on+0x36>
 8009a84:	2000      	movs	r0, #0
 8009a86:	bd10      	pop	{r4, pc}
 8009a88:	4603      	mov	r3, r0
 8009a8a:	e7f7      	b.n	8009a7c <__any_on+0x26>
 8009a8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a90:	2900      	cmp	r1, #0
 8009a92:	d0f5      	beq.n	8009a80 <__any_on+0x2a>
 8009a94:	2001      	movs	r0, #1
 8009a96:	e7f6      	b.n	8009a86 <__any_on+0x30>

08009a98 <sulp>:
 8009a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9c:	460f      	mov	r7, r1
 8009a9e:	4690      	mov	r8, r2
 8009aa0:	f7ff feca 	bl	8009838 <__ulp>
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	460d      	mov	r5, r1
 8009aa8:	f1b8 0f00 	cmp.w	r8, #0
 8009aac:	d011      	beq.n	8009ad2 <sulp+0x3a>
 8009aae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009ab2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dd0b      	ble.n	8009ad2 <sulp+0x3a>
 8009aba:	2400      	movs	r4, #0
 8009abc:	051b      	lsls	r3, r3, #20
 8009abe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009ac2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009ac6:	4622      	mov	r2, r4
 8009ac8:	462b      	mov	r3, r5
 8009aca:	f7f6 fd05 	bl	80004d8 <__aeabi_dmul>
 8009ace:	4604      	mov	r4, r0
 8009ad0:	460d      	mov	r5, r1
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ada:	0000      	movs	r0, r0
 8009adc:	0000      	movs	r0, r0
	...

08009ae0 <_strtod_l>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	b09f      	sub	sp, #124	; 0x7c
 8009ae6:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ae8:	2200      	movs	r2, #0
 8009aea:	4604      	mov	r4, r0
 8009aec:	921a      	str	r2, [sp, #104]	; 0x68
 8009aee:	460d      	mov	r5, r1
 8009af0:	f04f 0800 	mov.w	r8, #0
 8009af4:	f04f 0900 	mov.w	r9, #0
 8009af8:	460a      	mov	r2, r1
 8009afa:	9219      	str	r2, [sp, #100]	; 0x64
 8009afc:	7811      	ldrb	r1, [r2, #0]
 8009afe:	292b      	cmp	r1, #43	; 0x2b
 8009b00:	d04a      	beq.n	8009b98 <_strtod_l+0xb8>
 8009b02:	d838      	bhi.n	8009b76 <_strtod_l+0x96>
 8009b04:	290d      	cmp	r1, #13
 8009b06:	d832      	bhi.n	8009b6e <_strtod_l+0x8e>
 8009b08:	2908      	cmp	r1, #8
 8009b0a:	d832      	bhi.n	8009b72 <_strtod_l+0x92>
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	d03b      	beq.n	8009b88 <_strtod_l+0xa8>
 8009b10:	2200      	movs	r2, #0
 8009b12:	920e      	str	r2, [sp, #56]	; 0x38
 8009b14:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009b16:	7832      	ldrb	r2, [r6, #0]
 8009b18:	2a30      	cmp	r2, #48	; 0x30
 8009b1a:	f040 80b2 	bne.w	8009c82 <_strtod_l+0x1a2>
 8009b1e:	7872      	ldrb	r2, [r6, #1]
 8009b20:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009b24:	2a58      	cmp	r2, #88	; 0x58
 8009b26:	d16e      	bne.n	8009c06 <_strtod_l+0x126>
 8009b28:	9302      	str	r3, [sp, #8]
 8009b2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	ab1a      	add	r3, sp, #104	; 0x68
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	4a8c      	ldr	r2, [pc, #560]	; (8009d68 <_strtod_l+0x288>)
 8009b36:	ab1b      	add	r3, sp, #108	; 0x6c
 8009b38:	a919      	add	r1, sp, #100	; 0x64
 8009b3a:	f001 faef 	bl	800b11c <__gethex>
 8009b3e:	f010 070f 	ands.w	r7, r0, #15
 8009b42:	4605      	mov	r5, r0
 8009b44:	d005      	beq.n	8009b52 <_strtod_l+0x72>
 8009b46:	2f06      	cmp	r7, #6
 8009b48:	d128      	bne.n	8009b9c <_strtod_l+0xbc>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	3601      	adds	r6, #1
 8009b4e:	9619      	str	r6, [sp, #100]	; 0x64
 8009b50:	930e      	str	r3, [sp, #56]	; 0x38
 8009b52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f040 85a0 	bne.w	800a69a <_strtod_l+0xbba>
 8009b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b5c:	b1cb      	cbz	r3, 8009b92 <_strtod_l+0xb2>
 8009b5e:	4642      	mov	r2, r8
 8009b60:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009b64:	4610      	mov	r0, r2
 8009b66:	4619      	mov	r1, r3
 8009b68:	b01f      	add	sp, #124	; 0x7c
 8009b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6e:	2920      	cmp	r1, #32
 8009b70:	d1ce      	bne.n	8009b10 <_strtod_l+0x30>
 8009b72:	3201      	adds	r2, #1
 8009b74:	e7c1      	b.n	8009afa <_strtod_l+0x1a>
 8009b76:	292d      	cmp	r1, #45	; 0x2d
 8009b78:	d1ca      	bne.n	8009b10 <_strtod_l+0x30>
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	910e      	str	r1, [sp, #56]	; 0x38
 8009b7e:	1c51      	adds	r1, r2, #1
 8009b80:	9119      	str	r1, [sp, #100]	; 0x64
 8009b82:	7852      	ldrb	r2, [r2, #1]
 8009b84:	2a00      	cmp	r2, #0
 8009b86:	d1c5      	bne.n	8009b14 <_strtod_l+0x34>
 8009b88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b8a:	9519      	str	r5, [sp, #100]	; 0x64
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f040 8582 	bne.w	800a696 <_strtod_l+0xbb6>
 8009b92:	4642      	mov	r2, r8
 8009b94:	464b      	mov	r3, r9
 8009b96:	e7e5      	b.n	8009b64 <_strtod_l+0x84>
 8009b98:	2100      	movs	r1, #0
 8009b9a:	e7ef      	b.n	8009b7c <_strtod_l+0x9c>
 8009b9c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b9e:	b13a      	cbz	r2, 8009bb0 <_strtod_l+0xd0>
 8009ba0:	2135      	movs	r1, #53	; 0x35
 8009ba2:	a81c      	add	r0, sp, #112	; 0x70
 8009ba4:	f7ff ff34 	bl	8009a10 <__copybits>
 8009ba8:	4620      	mov	r0, r4
 8009baa:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009bac:	f7ff fb18 	bl	80091e0 <_Bfree>
 8009bb0:	3f01      	subs	r7, #1
 8009bb2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009bb4:	2f04      	cmp	r7, #4
 8009bb6:	d806      	bhi.n	8009bc6 <_strtod_l+0xe6>
 8009bb8:	e8df f007 	tbb	[pc, r7]
 8009bbc:	201d0314 	.word	0x201d0314
 8009bc0:	14          	.byte	0x14
 8009bc1:	00          	.byte	0x00
 8009bc2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009bc6:	05e9      	lsls	r1, r5, #23
 8009bc8:	bf48      	it	mi
 8009bca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009bce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bd2:	0d1b      	lsrs	r3, r3, #20
 8009bd4:	051b      	lsls	r3, r3, #20
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1bb      	bne.n	8009b52 <_strtod_l+0x72>
 8009bda:	f7fe fb09 	bl	80081f0 <__errno>
 8009bde:	2322      	movs	r3, #34	; 0x22
 8009be0:	6003      	str	r3, [r0, #0]
 8009be2:	e7b6      	b.n	8009b52 <_strtod_l+0x72>
 8009be4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009be8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009bec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009bf0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009bf4:	e7e7      	b.n	8009bc6 <_strtod_l+0xe6>
 8009bf6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009d6c <_strtod_l+0x28c>
 8009bfa:	e7e4      	b.n	8009bc6 <_strtod_l+0xe6>
 8009bfc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009c00:	f04f 38ff 	mov.w	r8, #4294967295
 8009c04:	e7df      	b.n	8009bc6 <_strtod_l+0xe6>
 8009c06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	9219      	str	r2, [sp, #100]	; 0x64
 8009c0c:	785b      	ldrb	r3, [r3, #1]
 8009c0e:	2b30      	cmp	r3, #48	; 0x30
 8009c10:	d0f9      	beq.n	8009c06 <_strtod_l+0x126>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d09d      	beq.n	8009b52 <_strtod_l+0x72>
 8009c16:	2301      	movs	r3, #1
 8009c18:	f04f 0a00 	mov.w	sl, #0
 8009c1c:	220a      	movs	r2, #10
 8009c1e:	46d3      	mov	fp, sl
 8009c20:	9305      	str	r3, [sp, #20]
 8009c22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c24:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009c28:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c2a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009c2c:	7806      	ldrb	r6, [r0, #0]
 8009c2e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009c32:	b2d9      	uxtb	r1, r3
 8009c34:	2909      	cmp	r1, #9
 8009c36:	d926      	bls.n	8009c86 <_strtod_l+0x1a6>
 8009c38:	2201      	movs	r2, #1
 8009c3a:	494d      	ldr	r1, [pc, #308]	; (8009d70 <_strtod_l+0x290>)
 8009c3c:	f001 f989 	bl	800af52 <strncmp>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d030      	beq.n	8009ca6 <_strtod_l+0x1c6>
 8009c44:	2000      	movs	r0, #0
 8009c46:	4632      	mov	r2, r6
 8009c48:	4603      	mov	r3, r0
 8009c4a:	465e      	mov	r6, fp
 8009c4c:	9008      	str	r0, [sp, #32]
 8009c4e:	2a65      	cmp	r2, #101	; 0x65
 8009c50:	d001      	beq.n	8009c56 <_strtod_l+0x176>
 8009c52:	2a45      	cmp	r2, #69	; 0x45
 8009c54:	d113      	bne.n	8009c7e <_strtod_l+0x19e>
 8009c56:	b91e      	cbnz	r6, 8009c60 <_strtod_l+0x180>
 8009c58:	9a05      	ldr	r2, [sp, #20]
 8009c5a:	4302      	orrs	r2, r0
 8009c5c:	d094      	beq.n	8009b88 <_strtod_l+0xa8>
 8009c5e:	2600      	movs	r6, #0
 8009c60:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009c62:	1c6a      	adds	r2, r5, #1
 8009c64:	9219      	str	r2, [sp, #100]	; 0x64
 8009c66:	786a      	ldrb	r2, [r5, #1]
 8009c68:	2a2b      	cmp	r2, #43	; 0x2b
 8009c6a:	d074      	beq.n	8009d56 <_strtod_l+0x276>
 8009c6c:	2a2d      	cmp	r2, #45	; 0x2d
 8009c6e:	d078      	beq.n	8009d62 <_strtod_l+0x282>
 8009c70:	f04f 0c00 	mov.w	ip, #0
 8009c74:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009c78:	2909      	cmp	r1, #9
 8009c7a:	d97f      	bls.n	8009d7c <_strtod_l+0x29c>
 8009c7c:	9519      	str	r5, [sp, #100]	; 0x64
 8009c7e:	2700      	movs	r7, #0
 8009c80:	e09e      	b.n	8009dc0 <_strtod_l+0x2e0>
 8009c82:	2300      	movs	r3, #0
 8009c84:	e7c8      	b.n	8009c18 <_strtod_l+0x138>
 8009c86:	f1bb 0f08 	cmp.w	fp, #8
 8009c8a:	bfd8      	it	le
 8009c8c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8009c8e:	f100 0001 	add.w	r0, r0, #1
 8009c92:	bfd6      	itet	le
 8009c94:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c98:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009c9c:	930a      	strle	r3, [sp, #40]	; 0x28
 8009c9e:	f10b 0b01 	add.w	fp, fp, #1
 8009ca2:	9019      	str	r0, [sp, #100]	; 0x64
 8009ca4:	e7c1      	b.n	8009c2a <_strtod_l+0x14a>
 8009ca6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	9219      	str	r2, [sp, #100]	; 0x64
 8009cac:	785a      	ldrb	r2, [r3, #1]
 8009cae:	f1bb 0f00 	cmp.w	fp, #0
 8009cb2:	d037      	beq.n	8009d24 <_strtod_l+0x244>
 8009cb4:	465e      	mov	r6, fp
 8009cb6:	9008      	str	r0, [sp, #32]
 8009cb8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009cbc:	2b09      	cmp	r3, #9
 8009cbe:	d912      	bls.n	8009ce6 <_strtod_l+0x206>
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e7c4      	b.n	8009c4e <_strtod_l+0x16e>
 8009cc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	9219      	str	r2, [sp, #100]	; 0x64
 8009ccc:	785a      	ldrb	r2, [r3, #1]
 8009cce:	2a30      	cmp	r2, #48	; 0x30
 8009cd0:	d0f8      	beq.n	8009cc4 <_strtod_l+0x1e4>
 8009cd2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009cd6:	2b08      	cmp	r3, #8
 8009cd8:	f200 84e4 	bhi.w	800a6a4 <_strtod_l+0xbc4>
 8009cdc:	9008      	str	r0, [sp, #32]
 8009cde:	2000      	movs	r0, #0
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ce4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ce6:	3a30      	subs	r2, #48	; 0x30
 8009ce8:	f100 0301 	add.w	r3, r0, #1
 8009cec:	d014      	beq.n	8009d18 <_strtod_l+0x238>
 8009cee:	9908      	ldr	r1, [sp, #32]
 8009cf0:	eb00 0c06 	add.w	ip, r0, r6
 8009cf4:	4419      	add	r1, r3
 8009cf6:	9108      	str	r1, [sp, #32]
 8009cf8:	4633      	mov	r3, r6
 8009cfa:	210a      	movs	r1, #10
 8009cfc:	4563      	cmp	r3, ip
 8009cfe:	d113      	bne.n	8009d28 <_strtod_l+0x248>
 8009d00:	1833      	adds	r3, r6, r0
 8009d02:	2b08      	cmp	r3, #8
 8009d04:	f106 0601 	add.w	r6, r6, #1
 8009d08:	4406      	add	r6, r0
 8009d0a:	dc1a      	bgt.n	8009d42 <_strtod_l+0x262>
 8009d0c:	230a      	movs	r3, #10
 8009d0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d10:	fb03 2301 	mla	r3, r3, r1, r2
 8009d14:	930a      	str	r3, [sp, #40]	; 0x28
 8009d16:	2300      	movs	r3, #0
 8009d18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	1c51      	adds	r1, r2, #1
 8009d1e:	9119      	str	r1, [sp, #100]	; 0x64
 8009d20:	7852      	ldrb	r2, [r2, #1]
 8009d22:	e7c9      	b.n	8009cb8 <_strtod_l+0x1d8>
 8009d24:	4658      	mov	r0, fp
 8009d26:	e7d2      	b.n	8009cce <_strtod_l+0x1ee>
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	f103 0301 	add.w	r3, r3, #1
 8009d2e:	dc03      	bgt.n	8009d38 <_strtod_l+0x258>
 8009d30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009d32:	434f      	muls	r7, r1
 8009d34:	970a      	str	r7, [sp, #40]	; 0x28
 8009d36:	e7e1      	b.n	8009cfc <_strtod_l+0x21c>
 8009d38:	2b10      	cmp	r3, #16
 8009d3a:	bfd8      	it	le
 8009d3c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009d40:	e7dc      	b.n	8009cfc <_strtod_l+0x21c>
 8009d42:	2e10      	cmp	r6, #16
 8009d44:	bfdc      	itt	le
 8009d46:	230a      	movle	r3, #10
 8009d48:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009d4c:	e7e3      	b.n	8009d16 <_strtod_l+0x236>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	9308      	str	r3, [sp, #32]
 8009d52:	2301      	movs	r3, #1
 8009d54:	e780      	b.n	8009c58 <_strtod_l+0x178>
 8009d56:	f04f 0c00 	mov.w	ip, #0
 8009d5a:	1caa      	adds	r2, r5, #2
 8009d5c:	9219      	str	r2, [sp, #100]	; 0x64
 8009d5e:	78aa      	ldrb	r2, [r5, #2]
 8009d60:	e788      	b.n	8009c74 <_strtod_l+0x194>
 8009d62:	f04f 0c01 	mov.w	ip, #1
 8009d66:	e7f8      	b.n	8009d5a <_strtod_l+0x27a>
 8009d68:	0800d460 	.word	0x0800d460
 8009d6c:	7ff00000 	.word	0x7ff00000
 8009d70:	0800d45c 	.word	0x0800d45c
 8009d74:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d76:	1c51      	adds	r1, r2, #1
 8009d78:	9119      	str	r1, [sp, #100]	; 0x64
 8009d7a:	7852      	ldrb	r2, [r2, #1]
 8009d7c:	2a30      	cmp	r2, #48	; 0x30
 8009d7e:	d0f9      	beq.n	8009d74 <_strtod_l+0x294>
 8009d80:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009d84:	2908      	cmp	r1, #8
 8009d86:	f63f af7a 	bhi.w	8009c7e <_strtod_l+0x19e>
 8009d8a:	3a30      	subs	r2, #48	; 0x30
 8009d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d90:	920c      	str	r2, [sp, #48]	; 0x30
 8009d92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d94:	1c57      	adds	r7, r2, #1
 8009d96:	9719      	str	r7, [sp, #100]	; 0x64
 8009d98:	7852      	ldrb	r2, [r2, #1]
 8009d9a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009d9e:	f1be 0f09 	cmp.w	lr, #9
 8009da2:	d938      	bls.n	8009e16 <_strtod_l+0x336>
 8009da4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009da6:	1a7f      	subs	r7, r7, r1
 8009da8:	2f08      	cmp	r7, #8
 8009daa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009dae:	dc03      	bgt.n	8009db8 <_strtod_l+0x2d8>
 8009db0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009db2:	428f      	cmp	r7, r1
 8009db4:	bfa8      	it	ge
 8009db6:	460f      	movge	r7, r1
 8009db8:	f1bc 0f00 	cmp.w	ip, #0
 8009dbc:	d000      	beq.n	8009dc0 <_strtod_l+0x2e0>
 8009dbe:	427f      	negs	r7, r7
 8009dc0:	2e00      	cmp	r6, #0
 8009dc2:	d14f      	bne.n	8009e64 <_strtod_l+0x384>
 8009dc4:	9905      	ldr	r1, [sp, #20]
 8009dc6:	4301      	orrs	r1, r0
 8009dc8:	f47f aec3 	bne.w	8009b52 <_strtod_l+0x72>
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f47f aedb 	bne.w	8009b88 <_strtod_l+0xa8>
 8009dd2:	2a69      	cmp	r2, #105	; 0x69
 8009dd4:	d029      	beq.n	8009e2a <_strtod_l+0x34a>
 8009dd6:	dc26      	bgt.n	8009e26 <_strtod_l+0x346>
 8009dd8:	2a49      	cmp	r2, #73	; 0x49
 8009dda:	d026      	beq.n	8009e2a <_strtod_l+0x34a>
 8009ddc:	2a4e      	cmp	r2, #78	; 0x4e
 8009dde:	f47f aed3 	bne.w	8009b88 <_strtod_l+0xa8>
 8009de2:	499a      	ldr	r1, [pc, #616]	; (800a04c <_strtod_l+0x56c>)
 8009de4:	a819      	add	r0, sp, #100	; 0x64
 8009de6:	f001 fbdb 	bl	800b5a0 <__match>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	f43f aecc 	beq.w	8009b88 <_strtod_l+0xa8>
 8009df0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b28      	cmp	r3, #40	; 0x28
 8009df6:	d12f      	bne.n	8009e58 <_strtod_l+0x378>
 8009df8:	4995      	ldr	r1, [pc, #596]	; (800a050 <_strtod_l+0x570>)
 8009dfa:	aa1c      	add	r2, sp, #112	; 0x70
 8009dfc:	a819      	add	r0, sp, #100	; 0x64
 8009dfe:	f001 fbe3 	bl	800b5c8 <__hexnan>
 8009e02:	2805      	cmp	r0, #5
 8009e04:	d128      	bne.n	8009e58 <_strtod_l+0x378>
 8009e06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e08:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009e0c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009e10:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009e14:	e69d      	b.n	8009b52 <_strtod_l+0x72>
 8009e16:	210a      	movs	r1, #10
 8009e18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e1a:	fb01 2107 	mla	r1, r1, r7, r2
 8009e1e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009e22:	9209      	str	r2, [sp, #36]	; 0x24
 8009e24:	e7b5      	b.n	8009d92 <_strtod_l+0x2b2>
 8009e26:	2a6e      	cmp	r2, #110	; 0x6e
 8009e28:	e7d9      	b.n	8009dde <_strtod_l+0x2fe>
 8009e2a:	498a      	ldr	r1, [pc, #552]	; (800a054 <_strtod_l+0x574>)
 8009e2c:	a819      	add	r0, sp, #100	; 0x64
 8009e2e:	f001 fbb7 	bl	800b5a0 <__match>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	f43f aea8 	beq.w	8009b88 <_strtod_l+0xa8>
 8009e38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e3a:	4987      	ldr	r1, [pc, #540]	; (800a058 <_strtod_l+0x578>)
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	a819      	add	r0, sp, #100	; 0x64
 8009e40:	9319      	str	r3, [sp, #100]	; 0x64
 8009e42:	f001 fbad 	bl	800b5a0 <__match>
 8009e46:	b910      	cbnz	r0, 8009e4e <_strtod_l+0x36e>
 8009e48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	9319      	str	r3, [sp, #100]	; 0x64
 8009e4e:	f04f 0800 	mov.w	r8, #0
 8009e52:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800a05c <_strtod_l+0x57c>
 8009e56:	e67c      	b.n	8009b52 <_strtod_l+0x72>
 8009e58:	4881      	ldr	r0, [pc, #516]	; (800a060 <_strtod_l+0x580>)
 8009e5a:	f001 f8bf 	bl	800afdc <nan>
 8009e5e:	4680      	mov	r8, r0
 8009e60:	4689      	mov	r9, r1
 8009e62:	e676      	b.n	8009b52 <_strtod_l+0x72>
 8009e64:	9b08      	ldr	r3, [sp, #32]
 8009e66:	f1bb 0f00 	cmp.w	fp, #0
 8009e6a:	bf08      	it	eq
 8009e6c:	46b3      	moveq	fp, r6
 8009e6e:	1afb      	subs	r3, r7, r3
 8009e70:	2e10      	cmp	r6, #16
 8009e72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e74:	4635      	mov	r5, r6
 8009e76:	9309      	str	r3, [sp, #36]	; 0x24
 8009e78:	bfa8      	it	ge
 8009e7a:	2510      	movge	r5, #16
 8009e7c:	f7f6 fab2 	bl	80003e4 <__aeabi_ui2d>
 8009e80:	2e09      	cmp	r6, #9
 8009e82:	4680      	mov	r8, r0
 8009e84:	4689      	mov	r9, r1
 8009e86:	dd13      	ble.n	8009eb0 <_strtod_l+0x3d0>
 8009e88:	4b76      	ldr	r3, [pc, #472]	; (800a064 <_strtod_l+0x584>)
 8009e8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009e8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009e92:	f7f6 fb21 	bl	80004d8 <__aeabi_dmul>
 8009e96:	4680      	mov	r8, r0
 8009e98:	4650      	mov	r0, sl
 8009e9a:	4689      	mov	r9, r1
 8009e9c:	f7f6 faa2 	bl	80003e4 <__aeabi_ui2d>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	f7f6 f960 	bl	800016c <__adddf3>
 8009eac:	4680      	mov	r8, r0
 8009eae:	4689      	mov	r9, r1
 8009eb0:	2e0f      	cmp	r6, #15
 8009eb2:	dc36      	bgt.n	8009f22 <_strtod_l+0x442>
 8009eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f43f ae4b 	beq.w	8009b52 <_strtod_l+0x72>
 8009ebc:	dd22      	ble.n	8009f04 <_strtod_l+0x424>
 8009ebe:	2b16      	cmp	r3, #22
 8009ec0:	dc09      	bgt.n	8009ed6 <_strtod_l+0x3f6>
 8009ec2:	4968      	ldr	r1, [pc, #416]	; (800a064 <_strtod_l+0x584>)
 8009ec4:	4642      	mov	r2, r8
 8009ec6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009eca:	464b      	mov	r3, r9
 8009ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ed0:	f7f6 fb02 	bl	80004d8 <__aeabi_dmul>
 8009ed4:	e7c3      	b.n	8009e5e <_strtod_l+0x37e>
 8009ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009edc:	4293      	cmp	r3, r2
 8009ede:	db20      	blt.n	8009f22 <_strtod_l+0x442>
 8009ee0:	4c60      	ldr	r4, [pc, #384]	; (800a064 <_strtod_l+0x584>)
 8009ee2:	f1c6 060f 	rsb	r6, r6, #15
 8009ee6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009eea:	4642      	mov	r2, r8
 8009eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ef0:	464b      	mov	r3, r9
 8009ef2:	f7f6 faf1 	bl	80004d8 <__aeabi_dmul>
 8009ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef8:	1b9e      	subs	r6, r3, r6
 8009efa:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009efe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f02:	e7e5      	b.n	8009ed0 <_strtod_l+0x3f0>
 8009f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f06:	3316      	adds	r3, #22
 8009f08:	db0b      	blt.n	8009f22 <_strtod_l+0x442>
 8009f0a:	9b08      	ldr	r3, [sp, #32]
 8009f0c:	4640      	mov	r0, r8
 8009f0e:	1bdf      	subs	r7, r3, r7
 8009f10:	4b54      	ldr	r3, [pc, #336]	; (800a064 <_strtod_l+0x584>)
 8009f12:	4649      	mov	r1, r9
 8009f14:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f1c:	f7f6 fc06 	bl	800072c <__aeabi_ddiv>
 8009f20:	e79d      	b.n	8009e5e <_strtod_l+0x37e>
 8009f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f24:	1b75      	subs	r5, r6, r5
 8009f26:	441d      	add	r5, r3
 8009f28:	2d00      	cmp	r5, #0
 8009f2a:	dd70      	ble.n	800a00e <_strtod_l+0x52e>
 8009f2c:	f015 030f 	ands.w	r3, r5, #15
 8009f30:	d00a      	beq.n	8009f48 <_strtod_l+0x468>
 8009f32:	494c      	ldr	r1, [pc, #304]	; (800a064 <_strtod_l+0x584>)
 8009f34:	4642      	mov	r2, r8
 8009f36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f3e:	464b      	mov	r3, r9
 8009f40:	f7f6 faca 	bl	80004d8 <__aeabi_dmul>
 8009f44:	4680      	mov	r8, r0
 8009f46:	4689      	mov	r9, r1
 8009f48:	f035 050f 	bics.w	r5, r5, #15
 8009f4c:	d04d      	beq.n	8009fea <_strtod_l+0x50a>
 8009f4e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009f52:	dd22      	ble.n	8009f9a <_strtod_l+0x4ba>
 8009f54:	2600      	movs	r6, #0
 8009f56:	46b3      	mov	fp, r6
 8009f58:	960b      	str	r6, [sp, #44]	; 0x2c
 8009f5a:	9608      	str	r6, [sp, #32]
 8009f5c:	2322      	movs	r3, #34	; 0x22
 8009f5e:	f04f 0800 	mov.w	r8, #0
 8009f62:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800a05c <_strtod_l+0x57c>
 8009f66:	6023      	str	r3, [r4, #0]
 8009f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f43f adf1 	beq.w	8009b52 <_strtod_l+0x72>
 8009f70:	4620      	mov	r0, r4
 8009f72:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f74:	f7ff f934 	bl	80091e0 <_Bfree>
 8009f78:	4620      	mov	r0, r4
 8009f7a:	9908      	ldr	r1, [sp, #32]
 8009f7c:	f7ff f930 	bl	80091e0 <_Bfree>
 8009f80:	4659      	mov	r1, fp
 8009f82:	4620      	mov	r0, r4
 8009f84:	f7ff f92c 	bl	80091e0 <_Bfree>
 8009f88:	4620      	mov	r0, r4
 8009f8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f8c:	f7ff f928 	bl	80091e0 <_Bfree>
 8009f90:	4631      	mov	r1, r6
 8009f92:	4620      	mov	r0, r4
 8009f94:	f7ff f924 	bl	80091e0 <_Bfree>
 8009f98:	e5db      	b.n	8009b52 <_strtod_l+0x72>
 8009f9a:	4b33      	ldr	r3, [pc, #204]	; (800a068 <_strtod_l+0x588>)
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	9305      	str	r3, [sp, #20]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	469a      	mov	sl, r3
 8009fa6:	112d      	asrs	r5, r5, #4
 8009fa8:	2d01      	cmp	r5, #1
 8009faa:	dc21      	bgt.n	8009ff0 <_strtod_l+0x510>
 8009fac:	b10b      	cbz	r3, 8009fb2 <_strtod_l+0x4d2>
 8009fae:	4680      	mov	r8, r0
 8009fb0:	4689      	mov	r9, r1
 8009fb2:	492d      	ldr	r1, [pc, #180]	; (800a068 <_strtod_l+0x588>)
 8009fb4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009fb8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009fbc:	4642      	mov	r2, r8
 8009fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fc2:	464b      	mov	r3, r9
 8009fc4:	f7f6 fa88 	bl	80004d8 <__aeabi_dmul>
 8009fc8:	4b24      	ldr	r3, [pc, #144]	; (800a05c <_strtod_l+0x57c>)
 8009fca:	460a      	mov	r2, r1
 8009fcc:	400b      	ands	r3, r1
 8009fce:	4927      	ldr	r1, [pc, #156]	; (800a06c <_strtod_l+0x58c>)
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	428b      	cmp	r3, r1
 8009fd4:	d8be      	bhi.n	8009f54 <_strtod_l+0x474>
 8009fd6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009fda:	428b      	cmp	r3, r1
 8009fdc:	bf86      	itte	hi
 8009fde:	f04f 38ff 	movhi.w	r8, #4294967295
 8009fe2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800a070 <_strtod_l+0x590>
 8009fe6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009fea:	2300      	movs	r3, #0
 8009fec:	9305      	str	r3, [sp, #20]
 8009fee:	e07b      	b.n	800a0e8 <_strtod_l+0x608>
 8009ff0:	07ea      	lsls	r2, r5, #31
 8009ff2:	d505      	bpl.n	800a000 <_strtod_l+0x520>
 8009ff4:	9b05      	ldr	r3, [sp, #20]
 8009ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffa:	f7f6 fa6d 	bl	80004d8 <__aeabi_dmul>
 8009ffe:	2301      	movs	r3, #1
 800a000:	9a05      	ldr	r2, [sp, #20]
 800a002:	f10a 0a01 	add.w	sl, sl, #1
 800a006:	3208      	adds	r2, #8
 800a008:	106d      	asrs	r5, r5, #1
 800a00a:	9205      	str	r2, [sp, #20]
 800a00c:	e7cc      	b.n	8009fa8 <_strtod_l+0x4c8>
 800a00e:	d0ec      	beq.n	8009fea <_strtod_l+0x50a>
 800a010:	426d      	negs	r5, r5
 800a012:	f015 020f 	ands.w	r2, r5, #15
 800a016:	d00a      	beq.n	800a02e <_strtod_l+0x54e>
 800a018:	4b12      	ldr	r3, [pc, #72]	; (800a064 <_strtod_l+0x584>)
 800a01a:	4640      	mov	r0, r8
 800a01c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a020:	4649      	mov	r1, r9
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	f7f6 fb81 	bl	800072c <__aeabi_ddiv>
 800a02a:	4680      	mov	r8, r0
 800a02c:	4689      	mov	r9, r1
 800a02e:	112d      	asrs	r5, r5, #4
 800a030:	d0db      	beq.n	8009fea <_strtod_l+0x50a>
 800a032:	2d1f      	cmp	r5, #31
 800a034:	dd1e      	ble.n	800a074 <_strtod_l+0x594>
 800a036:	2600      	movs	r6, #0
 800a038:	46b3      	mov	fp, r6
 800a03a:	960b      	str	r6, [sp, #44]	; 0x2c
 800a03c:	9608      	str	r6, [sp, #32]
 800a03e:	2322      	movs	r3, #34	; 0x22
 800a040:	f04f 0800 	mov.w	r8, #0
 800a044:	f04f 0900 	mov.w	r9, #0
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	e78d      	b.n	8009f68 <_strtod_l+0x488>
 800a04c:	0800d247 	.word	0x0800d247
 800a050:	0800d474 	.word	0x0800d474
 800a054:	0800d23f 	.word	0x0800d23f
 800a058:	0800d276 	.word	0x0800d276
 800a05c:	7ff00000 	.word	0x7ff00000
 800a060:	0800d605 	.word	0x0800d605
 800a064:	0800d388 	.word	0x0800d388
 800a068:	0800d360 	.word	0x0800d360
 800a06c:	7ca00000 	.word	0x7ca00000
 800a070:	7fefffff 	.word	0x7fefffff
 800a074:	f015 0310 	ands.w	r3, r5, #16
 800a078:	bf18      	it	ne
 800a07a:	236a      	movne	r3, #106	; 0x6a
 800a07c:	4640      	mov	r0, r8
 800a07e:	9305      	str	r3, [sp, #20]
 800a080:	4649      	mov	r1, r9
 800a082:	2300      	movs	r3, #0
 800a084:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800a350 <_strtod_l+0x870>
 800a088:	07ea      	lsls	r2, r5, #31
 800a08a:	d504      	bpl.n	800a096 <_strtod_l+0x5b6>
 800a08c:	e9da 2300 	ldrd	r2, r3, [sl]
 800a090:	f7f6 fa22 	bl	80004d8 <__aeabi_dmul>
 800a094:	2301      	movs	r3, #1
 800a096:	106d      	asrs	r5, r5, #1
 800a098:	f10a 0a08 	add.w	sl, sl, #8
 800a09c:	d1f4      	bne.n	800a088 <_strtod_l+0x5a8>
 800a09e:	b10b      	cbz	r3, 800a0a4 <_strtod_l+0x5c4>
 800a0a0:	4680      	mov	r8, r0
 800a0a2:	4689      	mov	r9, r1
 800a0a4:	9b05      	ldr	r3, [sp, #20]
 800a0a6:	b1bb      	cbz	r3, 800a0d8 <_strtod_l+0x5f8>
 800a0a8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a0ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	4649      	mov	r1, r9
 800a0b4:	dd10      	ble.n	800a0d8 <_strtod_l+0x5f8>
 800a0b6:	2b1f      	cmp	r3, #31
 800a0b8:	f340 8128 	ble.w	800a30c <_strtod_l+0x82c>
 800a0bc:	2b34      	cmp	r3, #52	; 0x34
 800a0be:	bfd8      	it	le
 800a0c0:	f04f 33ff 	movle.w	r3, #4294967295
 800a0c4:	f04f 0800 	mov.w	r8, #0
 800a0c8:	bfcf      	iteee	gt
 800a0ca:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a0ce:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a0d2:	4093      	lslle	r3, r2
 800a0d4:	ea03 0901 	andle.w	r9, r3, r1
 800a0d8:	2200      	movs	r2, #0
 800a0da:	2300      	movs	r3, #0
 800a0dc:	4640      	mov	r0, r8
 800a0de:	4649      	mov	r1, r9
 800a0e0:	f7f6 fc62 	bl	80009a8 <__aeabi_dcmpeq>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d1a6      	bne.n	800a036 <_strtod_l+0x556>
 800a0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ea:	465a      	mov	r2, fp
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	4633      	mov	r3, r6
 800a0f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0f4:	f7ff f8dc 	bl	80092b0 <__s2b>
 800a0f8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	f43f af2a 	beq.w	8009f54 <_strtod_l+0x474>
 800a100:	2600      	movs	r6, #0
 800a102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a104:	9b08      	ldr	r3, [sp, #32]
 800a106:	2a00      	cmp	r2, #0
 800a108:	eba3 0307 	sub.w	r3, r3, r7
 800a10c:	bfa8      	it	ge
 800a10e:	2300      	movge	r3, #0
 800a110:	46b3      	mov	fp, r6
 800a112:	9312      	str	r3, [sp, #72]	; 0x48
 800a114:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a118:	9316      	str	r3, [sp, #88]	; 0x58
 800a11a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a11c:	4620      	mov	r0, r4
 800a11e:	6859      	ldr	r1, [r3, #4]
 800a120:	f7ff f81e 	bl	8009160 <_Balloc>
 800a124:	9008      	str	r0, [sp, #32]
 800a126:	2800      	cmp	r0, #0
 800a128:	f43f af18 	beq.w	8009f5c <_strtod_l+0x47c>
 800a12c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a12e:	300c      	adds	r0, #12
 800a130:	691a      	ldr	r2, [r3, #16]
 800a132:	f103 010c 	add.w	r1, r3, #12
 800a136:	3202      	adds	r2, #2
 800a138:	0092      	lsls	r2, r2, #2
 800a13a:	f7fe f894 	bl	8008266 <memcpy>
 800a13e:	ab1c      	add	r3, sp, #112	; 0x70
 800a140:	9301      	str	r3, [sp, #4]
 800a142:	ab1b      	add	r3, sp, #108	; 0x6c
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	4642      	mov	r2, r8
 800a148:	464b      	mov	r3, r9
 800a14a:	4620      	mov	r0, r4
 800a14c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800a150:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800a154:	f7ff fbd8 	bl	8009908 <__d2b>
 800a158:	901a      	str	r0, [sp, #104]	; 0x68
 800a15a:	2800      	cmp	r0, #0
 800a15c:	f43f aefe 	beq.w	8009f5c <_strtod_l+0x47c>
 800a160:	2101      	movs	r1, #1
 800a162:	4620      	mov	r0, r4
 800a164:	f7ff f93c 	bl	80093e0 <__i2b>
 800a168:	4683      	mov	fp, r0
 800a16a:	2800      	cmp	r0, #0
 800a16c:	f43f aef6 	beq.w	8009f5c <_strtod_l+0x47c>
 800a170:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a172:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a174:	2f00      	cmp	r7, #0
 800a176:	bfab      	itete	ge
 800a178:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800a17a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a17c:	eb07 0a03 	addge.w	sl, r7, r3
 800a180:	1bdd      	sublt	r5, r3, r7
 800a182:	9b05      	ldr	r3, [sp, #20]
 800a184:	bfa8      	it	ge
 800a186:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a188:	eba7 0703 	sub.w	r7, r7, r3
 800a18c:	4417      	add	r7, r2
 800a18e:	4b71      	ldr	r3, [pc, #452]	; (800a354 <_strtod_l+0x874>)
 800a190:	f107 37ff 	add.w	r7, r7, #4294967295
 800a194:	bfb8      	it	lt
 800a196:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800a19a:	429f      	cmp	r7, r3
 800a19c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a1a0:	f280 80c7 	bge.w	800a332 <_strtod_l+0x852>
 800a1a4:	1bdb      	subs	r3, r3, r7
 800a1a6:	2b1f      	cmp	r3, #31
 800a1a8:	f04f 0101 	mov.w	r1, #1
 800a1ac:	eba2 0203 	sub.w	r2, r2, r3
 800a1b0:	f300 80b3 	bgt.w	800a31a <_strtod_l+0x83a>
 800a1b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a1b8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	9310      	str	r3, [sp, #64]	; 0x40
 800a1be:	eb0a 0702 	add.w	r7, sl, r2
 800a1c2:	9b05      	ldr	r3, [sp, #20]
 800a1c4:	45ba      	cmp	sl, r7
 800a1c6:	4415      	add	r5, r2
 800a1c8:	441d      	add	r5, r3
 800a1ca:	4653      	mov	r3, sl
 800a1cc:	bfa8      	it	ge
 800a1ce:	463b      	movge	r3, r7
 800a1d0:	42ab      	cmp	r3, r5
 800a1d2:	bfa8      	it	ge
 800a1d4:	462b      	movge	r3, r5
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	bfc2      	ittt	gt
 800a1da:	1aff      	subgt	r7, r7, r3
 800a1dc:	1aed      	subgt	r5, r5, r3
 800a1de:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a1e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	dd17      	ble.n	800a218 <_strtod_l+0x738>
 800a1e8:	4659      	mov	r1, fp
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f7ff f9b5 	bl	800955c <__pow5mult>
 800a1f2:	4683      	mov	fp, r0
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	f43f aeb1 	beq.w	8009f5c <_strtod_l+0x47c>
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a1fe:	4620      	mov	r0, r4
 800a200:	f7ff f904 	bl	800940c <__multiply>
 800a204:	900a      	str	r0, [sp, #40]	; 0x28
 800a206:	2800      	cmp	r0, #0
 800a208:	f43f aea8 	beq.w	8009f5c <_strtod_l+0x47c>
 800a20c:	4620      	mov	r0, r4
 800a20e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a210:	f7fe ffe6 	bl	80091e0 <_Bfree>
 800a214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a216:	931a      	str	r3, [sp, #104]	; 0x68
 800a218:	2f00      	cmp	r7, #0
 800a21a:	f300 808f 	bgt.w	800a33c <_strtod_l+0x85c>
 800a21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a220:	2b00      	cmp	r3, #0
 800a222:	dd08      	ble.n	800a236 <_strtod_l+0x756>
 800a224:	4620      	mov	r0, r4
 800a226:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a228:	9908      	ldr	r1, [sp, #32]
 800a22a:	f7ff f997 	bl	800955c <__pow5mult>
 800a22e:	9008      	str	r0, [sp, #32]
 800a230:	2800      	cmp	r0, #0
 800a232:	f43f ae93 	beq.w	8009f5c <_strtod_l+0x47c>
 800a236:	2d00      	cmp	r5, #0
 800a238:	dd08      	ble.n	800a24c <_strtod_l+0x76c>
 800a23a:	462a      	mov	r2, r5
 800a23c:	4620      	mov	r0, r4
 800a23e:	9908      	ldr	r1, [sp, #32]
 800a240:	f7ff f9e6 	bl	8009610 <__lshift>
 800a244:	9008      	str	r0, [sp, #32]
 800a246:	2800      	cmp	r0, #0
 800a248:	f43f ae88 	beq.w	8009f5c <_strtod_l+0x47c>
 800a24c:	f1ba 0f00 	cmp.w	sl, #0
 800a250:	dd08      	ble.n	800a264 <_strtod_l+0x784>
 800a252:	4659      	mov	r1, fp
 800a254:	4652      	mov	r2, sl
 800a256:	4620      	mov	r0, r4
 800a258:	f7ff f9da 	bl	8009610 <__lshift>
 800a25c:	4683      	mov	fp, r0
 800a25e:	2800      	cmp	r0, #0
 800a260:	f43f ae7c 	beq.w	8009f5c <_strtod_l+0x47c>
 800a264:	4620      	mov	r0, r4
 800a266:	9a08      	ldr	r2, [sp, #32]
 800a268:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a26a:	f7ff fa59 	bl	8009720 <__mdiff>
 800a26e:	4606      	mov	r6, r0
 800a270:	2800      	cmp	r0, #0
 800a272:	f43f ae73 	beq.w	8009f5c <_strtod_l+0x47c>
 800a276:	2500      	movs	r5, #0
 800a278:	68c3      	ldr	r3, [r0, #12]
 800a27a:	4659      	mov	r1, fp
 800a27c:	60c5      	str	r5, [r0, #12]
 800a27e:	930a      	str	r3, [sp, #40]	; 0x28
 800a280:	f7ff fa32 	bl	80096e8 <__mcmp>
 800a284:	42a8      	cmp	r0, r5
 800a286:	da6b      	bge.n	800a360 <_strtod_l+0x880>
 800a288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a28a:	ea53 0308 	orrs.w	r3, r3, r8
 800a28e:	f040 808f 	bne.w	800a3b0 <_strtod_l+0x8d0>
 800a292:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a296:	2b00      	cmp	r3, #0
 800a298:	f040 808a 	bne.w	800a3b0 <_strtod_l+0x8d0>
 800a29c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2a0:	0d1b      	lsrs	r3, r3, #20
 800a2a2:	051b      	lsls	r3, r3, #20
 800a2a4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a2a8:	f240 8082 	bls.w	800a3b0 <_strtod_l+0x8d0>
 800a2ac:	6973      	ldr	r3, [r6, #20]
 800a2ae:	b913      	cbnz	r3, 800a2b6 <_strtod_l+0x7d6>
 800a2b0:	6933      	ldr	r3, [r6, #16]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	dd7c      	ble.n	800a3b0 <_strtod_l+0x8d0>
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f7ff f9a8 	bl	8009610 <__lshift>
 800a2c0:	4659      	mov	r1, fp
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	f7ff fa10 	bl	80096e8 <__mcmp>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	dd71      	ble.n	800a3b0 <_strtod_l+0x8d0>
 800a2cc:	9905      	ldr	r1, [sp, #20]
 800a2ce:	464b      	mov	r3, r9
 800a2d0:	4a21      	ldr	r2, [pc, #132]	; (800a358 <_strtod_l+0x878>)
 800a2d2:	2900      	cmp	r1, #0
 800a2d4:	f000 808d 	beq.w	800a3f2 <_strtod_l+0x912>
 800a2d8:	ea02 0109 	and.w	r1, r2, r9
 800a2dc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a2e0:	f300 8087 	bgt.w	800a3f2 <_strtod_l+0x912>
 800a2e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a2e8:	f77f aea9 	ble.w	800a03e <_strtod_l+0x55e>
 800a2ec:	4640      	mov	r0, r8
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	4b1a      	ldr	r3, [pc, #104]	; (800a35c <_strtod_l+0x87c>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f7f6 f8f0 	bl	80004d8 <__aeabi_dmul>
 800a2f8:	4b17      	ldr	r3, [pc, #92]	; (800a358 <_strtod_l+0x878>)
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	400b      	ands	r3, r1
 800a2fe:	4689      	mov	r9, r1
 800a300:	2b00      	cmp	r3, #0
 800a302:	f47f ae35 	bne.w	8009f70 <_strtod_l+0x490>
 800a306:	2322      	movs	r3, #34	; 0x22
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	e631      	b.n	8009f70 <_strtod_l+0x490>
 800a30c:	f04f 32ff 	mov.w	r2, #4294967295
 800a310:	fa02 f303 	lsl.w	r3, r2, r3
 800a314:	ea03 0808 	and.w	r8, r3, r8
 800a318:	e6de      	b.n	800a0d8 <_strtod_l+0x5f8>
 800a31a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800a31e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800a322:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800a326:	37e2      	adds	r7, #226	; 0xe2
 800a328:	fa01 f307 	lsl.w	r3, r1, r7
 800a32c:	9310      	str	r3, [sp, #64]	; 0x40
 800a32e:	9113      	str	r1, [sp, #76]	; 0x4c
 800a330:	e745      	b.n	800a1be <_strtod_l+0x6de>
 800a332:	2300      	movs	r3, #0
 800a334:	9310      	str	r3, [sp, #64]	; 0x40
 800a336:	2301      	movs	r3, #1
 800a338:	9313      	str	r3, [sp, #76]	; 0x4c
 800a33a:	e740      	b.n	800a1be <_strtod_l+0x6de>
 800a33c:	463a      	mov	r2, r7
 800a33e:	4620      	mov	r0, r4
 800a340:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a342:	f7ff f965 	bl	8009610 <__lshift>
 800a346:	901a      	str	r0, [sp, #104]	; 0x68
 800a348:	2800      	cmp	r0, #0
 800a34a:	f47f af68 	bne.w	800a21e <_strtod_l+0x73e>
 800a34e:	e605      	b.n	8009f5c <_strtod_l+0x47c>
 800a350:	0800d488 	.word	0x0800d488
 800a354:	fffffc02 	.word	0xfffffc02
 800a358:	7ff00000 	.word	0x7ff00000
 800a35c:	39500000 	.word	0x39500000
 800a360:	46ca      	mov	sl, r9
 800a362:	d165      	bne.n	800a430 <_strtod_l+0x950>
 800a364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a366:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a36a:	b352      	cbz	r2, 800a3c2 <_strtod_l+0x8e2>
 800a36c:	4a9e      	ldr	r2, [pc, #632]	; (800a5e8 <_strtod_l+0xb08>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d12a      	bne.n	800a3c8 <_strtod_l+0x8e8>
 800a372:	9b05      	ldr	r3, [sp, #20]
 800a374:	4641      	mov	r1, r8
 800a376:	b1fb      	cbz	r3, 800a3b8 <_strtod_l+0x8d8>
 800a378:	4b9c      	ldr	r3, [pc, #624]	; (800a5ec <_strtod_l+0xb0c>)
 800a37a:	f04f 32ff 	mov.w	r2, #4294967295
 800a37e:	ea09 0303 	and.w	r3, r9, r3
 800a382:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a386:	d81a      	bhi.n	800a3be <_strtod_l+0x8de>
 800a388:	0d1b      	lsrs	r3, r3, #20
 800a38a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a38e:	fa02 f303 	lsl.w	r3, r2, r3
 800a392:	4299      	cmp	r1, r3
 800a394:	d118      	bne.n	800a3c8 <_strtod_l+0x8e8>
 800a396:	4b96      	ldr	r3, [pc, #600]	; (800a5f0 <_strtod_l+0xb10>)
 800a398:	459a      	cmp	sl, r3
 800a39a:	d102      	bne.n	800a3a2 <_strtod_l+0x8c2>
 800a39c:	3101      	adds	r1, #1
 800a39e:	f43f addd 	beq.w	8009f5c <_strtod_l+0x47c>
 800a3a2:	f04f 0800 	mov.w	r8, #0
 800a3a6:	4b91      	ldr	r3, [pc, #580]	; (800a5ec <_strtod_l+0xb0c>)
 800a3a8:	ea0a 0303 	and.w	r3, sl, r3
 800a3ac:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a3b0:	9b05      	ldr	r3, [sp, #20]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d19a      	bne.n	800a2ec <_strtod_l+0x80c>
 800a3b6:	e5db      	b.n	8009f70 <_strtod_l+0x490>
 800a3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3bc:	e7e9      	b.n	800a392 <_strtod_l+0x8b2>
 800a3be:	4613      	mov	r3, r2
 800a3c0:	e7e7      	b.n	800a392 <_strtod_l+0x8b2>
 800a3c2:	ea53 0308 	orrs.w	r3, r3, r8
 800a3c6:	d081      	beq.n	800a2cc <_strtod_l+0x7ec>
 800a3c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3ca:	b1e3      	cbz	r3, 800a406 <_strtod_l+0x926>
 800a3cc:	ea13 0f0a 	tst.w	r3, sl
 800a3d0:	d0ee      	beq.n	800a3b0 <_strtod_l+0x8d0>
 800a3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d4:	4640      	mov	r0, r8
 800a3d6:	4649      	mov	r1, r9
 800a3d8:	9a05      	ldr	r2, [sp, #20]
 800a3da:	b1c3      	cbz	r3, 800a40e <_strtod_l+0x92e>
 800a3dc:	f7ff fb5c 	bl	8009a98 <sulp>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a3e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a3e8:	f7f5 fec0 	bl	800016c <__adddf3>
 800a3ec:	4680      	mov	r8, r0
 800a3ee:	4689      	mov	r9, r1
 800a3f0:	e7de      	b.n	800a3b0 <_strtod_l+0x8d0>
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a3f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a3fc:	f04f 38ff 	mov.w	r8, #4294967295
 800a400:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a404:	e7d4      	b.n	800a3b0 <_strtod_l+0x8d0>
 800a406:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a408:	ea13 0f08 	tst.w	r3, r8
 800a40c:	e7e0      	b.n	800a3d0 <_strtod_l+0x8f0>
 800a40e:	f7ff fb43 	bl	8009a98 <sulp>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a418:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a41a:	f7f5 fea5 	bl	8000168 <__aeabi_dsub>
 800a41e:	2200      	movs	r2, #0
 800a420:	2300      	movs	r3, #0
 800a422:	4680      	mov	r8, r0
 800a424:	4689      	mov	r9, r1
 800a426:	f7f6 fabf 	bl	80009a8 <__aeabi_dcmpeq>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d0c0      	beq.n	800a3b0 <_strtod_l+0x8d0>
 800a42e:	e606      	b.n	800a03e <_strtod_l+0x55e>
 800a430:	4659      	mov	r1, fp
 800a432:	4630      	mov	r0, r6
 800a434:	f7ff fabe 	bl	80099b4 <__ratio>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a440:	2200      	movs	r2, #0
 800a442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a446:	f7f6 fac3 	bl	80009d0 <__aeabi_dcmple>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d06f      	beq.n	800a52e <_strtod_l+0xa4e>
 800a44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a450:	2b00      	cmp	r3, #0
 800a452:	d17c      	bne.n	800a54e <_strtod_l+0xa6e>
 800a454:	f1b8 0f00 	cmp.w	r8, #0
 800a458:	d159      	bne.n	800a50e <_strtod_l+0xa2e>
 800a45a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d17b      	bne.n	800a55a <_strtod_l+0xa7a>
 800a462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a466:	2200      	movs	r2, #0
 800a468:	4b62      	ldr	r3, [pc, #392]	; (800a5f4 <_strtod_l+0xb14>)
 800a46a:	f7f6 faa7 	bl	80009bc <__aeabi_dcmplt>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d15a      	bne.n	800a528 <_strtod_l+0xa48>
 800a472:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a476:	2200      	movs	r2, #0
 800a478:	4b5f      	ldr	r3, [pc, #380]	; (800a5f8 <_strtod_l+0xb18>)
 800a47a:	f7f6 f82d 	bl	80004d8 <__aeabi_dmul>
 800a47e:	4605      	mov	r5, r0
 800a480:	460f      	mov	r7, r1
 800a482:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a486:	9506      	str	r5, [sp, #24]
 800a488:	9307      	str	r3, [sp, #28]
 800a48a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a48e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a492:	4b56      	ldr	r3, [pc, #344]	; (800a5ec <_strtod_l+0xb0c>)
 800a494:	4a55      	ldr	r2, [pc, #340]	; (800a5ec <_strtod_l+0xb0c>)
 800a496:	ea0a 0303 	and.w	r3, sl, r3
 800a49a:	9313      	str	r3, [sp, #76]	; 0x4c
 800a49c:	4b57      	ldr	r3, [pc, #348]	; (800a5fc <_strtod_l+0xb1c>)
 800a49e:	ea0a 0202 	and.w	r2, sl, r2
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	f040 80b0 	bne.w	800a608 <_strtod_l+0xb28>
 800a4a8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a4ac:	4640      	mov	r0, r8
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	f7ff f9c2 	bl	8009838 <__ulp>
 800a4b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4b8:	f7f6 f80e 	bl	80004d8 <__aeabi_dmul>
 800a4bc:	4642      	mov	r2, r8
 800a4be:	464b      	mov	r3, r9
 800a4c0:	f7f5 fe54 	bl	800016c <__adddf3>
 800a4c4:	f8df a124 	ldr.w	sl, [pc, #292]	; 800a5ec <_strtod_l+0xb0c>
 800a4c8:	4a4d      	ldr	r2, [pc, #308]	; (800a600 <_strtod_l+0xb20>)
 800a4ca:	ea01 0a0a 	and.w	sl, r1, sl
 800a4ce:	4592      	cmp	sl, r2
 800a4d0:	4680      	mov	r8, r0
 800a4d2:	d948      	bls.n	800a566 <_strtod_l+0xa86>
 800a4d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4d6:	4b46      	ldr	r3, [pc, #280]	; (800a5f0 <_strtod_l+0xb10>)
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d103      	bne.n	800a4e4 <_strtod_l+0xa04>
 800a4dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4de:	3301      	adds	r3, #1
 800a4e0:	f43f ad3c 	beq.w	8009f5c <_strtod_l+0x47c>
 800a4e4:	f04f 38ff 	mov.w	r8, #4294967295
 800a4e8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800a5f0 <_strtod_l+0xb10>
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a4f0:	f7fe fe76 	bl	80091e0 <_Bfree>
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	9908      	ldr	r1, [sp, #32]
 800a4f8:	f7fe fe72 	bl	80091e0 <_Bfree>
 800a4fc:	4659      	mov	r1, fp
 800a4fe:	4620      	mov	r0, r4
 800a500:	f7fe fe6e 	bl	80091e0 <_Bfree>
 800a504:	4631      	mov	r1, r6
 800a506:	4620      	mov	r0, r4
 800a508:	f7fe fe6a 	bl	80091e0 <_Bfree>
 800a50c:	e605      	b.n	800a11a <_strtod_l+0x63a>
 800a50e:	f1b8 0f01 	cmp.w	r8, #1
 800a512:	d103      	bne.n	800a51c <_strtod_l+0xa3c>
 800a514:	f1b9 0f00 	cmp.w	r9, #0
 800a518:	f43f ad91 	beq.w	800a03e <_strtod_l+0x55e>
 800a51c:	2200      	movs	r2, #0
 800a51e:	4b39      	ldr	r3, [pc, #228]	; (800a604 <_strtod_l+0xb24>)
 800a520:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a522:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a526:	e016      	b.n	800a556 <_strtod_l+0xa76>
 800a528:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a52a:	4f33      	ldr	r7, [pc, #204]	; (800a5f8 <_strtod_l+0xb18>)
 800a52c:	e7a9      	b.n	800a482 <_strtod_l+0x9a2>
 800a52e:	4b32      	ldr	r3, [pc, #200]	; (800a5f8 <_strtod_l+0xb18>)
 800a530:	2200      	movs	r2, #0
 800a532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a536:	f7f5 ffcf 	bl	80004d8 <__aeabi_dmul>
 800a53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a53c:	4605      	mov	r5, r0
 800a53e:	460f      	mov	r7, r1
 800a540:	2b00      	cmp	r3, #0
 800a542:	d09e      	beq.n	800a482 <_strtod_l+0x9a2>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a54c:	e79d      	b.n	800a48a <_strtod_l+0x9aa>
 800a54e:	2200      	movs	r2, #0
 800a550:	4b28      	ldr	r3, [pc, #160]	; (800a5f4 <_strtod_l+0xb14>)
 800a552:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a556:	4f27      	ldr	r7, [pc, #156]	; (800a5f4 <_strtod_l+0xb14>)
 800a558:	e797      	b.n	800a48a <_strtod_l+0x9aa>
 800a55a:	2200      	movs	r2, #0
 800a55c:	4b29      	ldr	r3, [pc, #164]	; (800a604 <_strtod_l+0xb24>)
 800a55e:	4645      	mov	r5, r8
 800a560:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a564:	e7f7      	b.n	800a556 <_strtod_l+0xa76>
 800a566:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800a56a:	9b05      	ldr	r3, [sp, #20]
 800a56c:	46ca      	mov	sl, r9
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1bc      	bne.n	800a4ec <_strtod_l+0xa0c>
 800a572:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a576:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a578:	0d1b      	lsrs	r3, r3, #20
 800a57a:	051b      	lsls	r3, r3, #20
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d1b5      	bne.n	800a4ec <_strtod_l+0xa0c>
 800a580:	4628      	mov	r0, r5
 800a582:	4639      	mov	r1, r7
 800a584:	f7f6 fd4e 	bl	8001024 <__aeabi_d2lz>
 800a588:	f7f5 ff78 	bl	800047c <__aeabi_l2d>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4628      	mov	r0, r5
 800a592:	4639      	mov	r1, r7
 800a594:	f7f5 fde8 	bl	8000168 <__aeabi_dsub>
 800a598:	460b      	mov	r3, r1
 800a59a:	4602      	mov	r2, r0
 800a59c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800a5a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5a6:	ea4a 0a08 	orr.w	sl, sl, r8
 800a5aa:	ea5a 0a03 	orrs.w	sl, sl, r3
 800a5ae:	d06c      	beq.n	800a68a <_strtod_l+0xbaa>
 800a5b0:	a309      	add	r3, pc, #36	; (adr r3, 800a5d8 <_strtod_l+0xaf8>)
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	f7f6 fa01 	bl	80009bc <__aeabi_dcmplt>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	f47f acd8 	bne.w	8009f70 <_strtod_l+0x490>
 800a5c0:	a307      	add	r3, pc, #28	; (adr r3, 800a5e0 <_strtod_l+0xb00>)
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5ca:	f7f6 fa15 	bl	80009f8 <__aeabi_dcmpgt>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d08c      	beq.n	800a4ec <_strtod_l+0xa0c>
 800a5d2:	e4cd      	b.n	8009f70 <_strtod_l+0x490>
 800a5d4:	f3af 8000 	nop.w
 800a5d8:	94a03595 	.word	0x94a03595
 800a5dc:	3fdfffff 	.word	0x3fdfffff
 800a5e0:	35afe535 	.word	0x35afe535
 800a5e4:	3fe00000 	.word	0x3fe00000
 800a5e8:	000fffff 	.word	0x000fffff
 800a5ec:	7ff00000 	.word	0x7ff00000
 800a5f0:	7fefffff 	.word	0x7fefffff
 800a5f4:	3ff00000 	.word	0x3ff00000
 800a5f8:	3fe00000 	.word	0x3fe00000
 800a5fc:	7fe00000 	.word	0x7fe00000
 800a600:	7c9fffff 	.word	0x7c9fffff
 800a604:	bff00000 	.word	0xbff00000
 800a608:	9b05      	ldr	r3, [sp, #20]
 800a60a:	b333      	cbz	r3, 800a65a <_strtod_l+0xb7a>
 800a60c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a60e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a612:	d822      	bhi.n	800a65a <_strtod_l+0xb7a>
 800a614:	a328      	add	r3, pc, #160	; (adr r3, 800a6b8 <_strtod_l+0xbd8>)
 800a616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61a:	4628      	mov	r0, r5
 800a61c:	4639      	mov	r1, r7
 800a61e:	f7f6 f9d7 	bl	80009d0 <__aeabi_dcmple>
 800a622:	b1a0      	cbz	r0, 800a64e <_strtod_l+0xb6e>
 800a624:	4639      	mov	r1, r7
 800a626:	4628      	mov	r0, r5
 800a628:	f7f6 fa2e 	bl	8000a88 <__aeabi_d2uiz>
 800a62c:	2801      	cmp	r0, #1
 800a62e:	bf38      	it	cc
 800a630:	2001      	movcc	r0, #1
 800a632:	f7f5 fed7 	bl	80003e4 <__aeabi_ui2d>
 800a636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a638:	4605      	mov	r5, r0
 800a63a:	460f      	mov	r7, r1
 800a63c:	bb03      	cbnz	r3, 800a680 <_strtod_l+0xba0>
 800a63e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a642:	9014      	str	r0, [sp, #80]	; 0x50
 800a644:	9315      	str	r3, [sp, #84]	; 0x54
 800a646:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a64a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a64e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a652:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a656:	1a9b      	subs	r3, r3, r2
 800a658:	9311      	str	r3, [sp, #68]	; 0x44
 800a65a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a65c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a65e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800a662:	f7ff f8e9 	bl	8009838 <__ulp>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	4640      	mov	r0, r8
 800a66c:	4649      	mov	r1, r9
 800a66e:	f7f5 ff33 	bl	80004d8 <__aeabi_dmul>
 800a672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a676:	f7f5 fd79 	bl	800016c <__adddf3>
 800a67a:	4680      	mov	r8, r0
 800a67c:	4689      	mov	r9, r1
 800a67e:	e774      	b.n	800a56a <_strtod_l+0xa8a>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a688:	e7dd      	b.n	800a646 <_strtod_l+0xb66>
 800a68a:	a30d      	add	r3, pc, #52	; (adr r3, 800a6c0 <_strtod_l+0xbe0>)
 800a68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a690:	f7f6 f994 	bl	80009bc <__aeabi_dcmplt>
 800a694:	e79b      	b.n	800a5ce <_strtod_l+0xaee>
 800a696:	2300      	movs	r3, #0
 800a698:	930e      	str	r3, [sp, #56]	; 0x38
 800a69a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a69c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a69e:	6013      	str	r3, [r2, #0]
 800a6a0:	f7ff ba5b 	b.w	8009b5a <_strtod_l+0x7a>
 800a6a4:	2a65      	cmp	r2, #101	; 0x65
 800a6a6:	f43f ab52 	beq.w	8009d4e <_strtod_l+0x26e>
 800a6aa:	2a45      	cmp	r2, #69	; 0x45
 800a6ac:	f43f ab4f 	beq.w	8009d4e <_strtod_l+0x26e>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	f7ff bb87 	b.w	8009dc4 <_strtod_l+0x2e4>
 800a6b6:	bf00      	nop
 800a6b8:	ffc00000 	.word	0xffc00000
 800a6bc:	41dfffff 	.word	0x41dfffff
 800a6c0:	94a03595 	.word	0x94a03595
 800a6c4:	3fcfffff 	.word	0x3fcfffff

0800a6c8 <_strtod_r>:
 800a6c8:	4b01      	ldr	r3, [pc, #4]	; (800a6d0 <_strtod_r+0x8>)
 800a6ca:	f7ff ba09 	b.w	8009ae0 <_strtod_l>
 800a6ce:	bf00      	nop
 800a6d0:	20000088 	.word	0x20000088

0800a6d4 <_strtol_l.constprop.0>:
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6da:	4686      	mov	lr, r0
 800a6dc:	4690      	mov	r8, r2
 800a6de:	d001      	beq.n	800a6e4 <_strtol_l.constprop.0+0x10>
 800a6e0:	2b24      	cmp	r3, #36	; 0x24
 800a6e2:	d906      	bls.n	800a6f2 <_strtol_l.constprop.0+0x1e>
 800a6e4:	f7fd fd84 	bl	80081f0 <__errno>
 800a6e8:	2316      	movs	r3, #22
 800a6ea:	6003      	str	r3, [r0, #0]
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f2:	460d      	mov	r5, r1
 800a6f4:	4835      	ldr	r0, [pc, #212]	; (800a7cc <_strtol_l.constprop.0+0xf8>)
 800a6f6:	462a      	mov	r2, r5
 800a6f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6fc:	5d06      	ldrb	r6, [r0, r4]
 800a6fe:	f016 0608 	ands.w	r6, r6, #8
 800a702:	d1f8      	bne.n	800a6f6 <_strtol_l.constprop.0+0x22>
 800a704:	2c2d      	cmp	r4, #45	; 0x2d
 800a706:	d12e      	bne.n	800a766 <_strtol_l.constprop.0+0x92>
 800a708:	2601      	movs	r6, #1
 800a70a:	782c      	ldrb	r4, [r5, #0]
 800a70c:	1c95      	adds	r5, r2, #2
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d057      	beq.n	800a7c2 <_strtol_l.constprop.0+0xee>
 800a712:	2b10      	cmp	r3, #16
 800a714:	d109      	bne.n	800a72a <_strtol_l.constprop.0+0x56>
 800a716:	2c30      	cmp	r4, #48	; 0x30
 800a718:	d107      	bne.n	800a72a <_strtol_l.constprop.0+0x56>
 800a71a:	782a      	ldrb	r2, [r5, #0]
 800a71c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a720:	2a58      	cmp	r2, #88	; 0x58
 800a722:	d149      	bne.n	800a7b8 <_strtol_l.constprop.0+0xe4>
 800a724:	2310      	movs	r3, #16
 800a726:	786c      	ldrb	r4, [r5, #1]
 800a728:	3502      	adds	r5, #2
 800a72a:	2200      	movs	r2, #0
 800a72c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a730:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a734:	fbbc f9f3 	udiv	r9, ip, r3
 800a738:	4610      	mov	r0, r2
 800a73a:	fb03 ca19 	mls	sl, r3, r9, ip
 800a73e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a742:	2f09      	cmp	r7, #9
 800a744:	d814      	bhi.n	800a770 <_strtol_l.constprop.0+0x9c>
 800a746:	463c      	mov	r4, r7
 800a748:	42a3      	cmp	r3, r4
 800a74a:	dd20      	ble.n	800a78e <_strtol_l.constprop.0+0xba>
 800a74c:	1c57      	adds	r7, r2, #1
 800a74e:	d007      	beq.n	800a760 <_strtol_l.constprop.0+0x8c>
 800a750:	4581      	cmp	r9, r0
 800a752:	d319      	bcc.n	800a788 <_strtol_l.constprop.0+0xb4>
 800a754:	d101      	bne.n	800a75a <_strtol_l.constprop.0+0x86>
 800a756:	45a2      	cmp	sl, r4
 800a758:	db16      	blt.n	800a788 <_strtol_l.constprop.0+0xb4>
 800a75a:	2201      	movs	r2, #1
 800a75c:	fb00 4003 	mla	r0, r0, r3, r4
 800a760:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a764:	e7eb      	b.n	800a73e <_strtol_l.constprop.0+0x6a>
 800a766:	2c2b      	cmp	r4, #43	; 0x2b
 800a768:	bf04      	itt	eq
 800a76a:	782c      	ldrbeq	r4, [r5, #0]
 800a76c:	1c95      	addeq	r5, r2, #2
 800a76e:	e7ce      	b.n	800a70e <_strtol_l.constprop.0+0x3a>
 800a770:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a774:	2f19      	cmp	r7, #25
 800a776:	d801      	bhi.n	800a77c <_strtol_l.constprop.0+0xa8>
 800a778:	3c37      	subs	r4, #55	; 0x37
 800a77a:	e7e5      	b.n	800a748 <_strtol_l.constprop.0+0x74>
 800a77c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a780:	2f19      	cmp	r7, #25
 800a782:	d804      	bhi.n	800a78e <_strtol_l.constprop.0+0xba>
 800a784:	3c57      	subs	r4, #87	; 0x57
 800a786:	e7df      	b.n	800a748 <_strtol_l.constprop.0+0x74>
 800a788:	f04f 32ff 	mov.w	r2, #4294967295
 800a78c:	e7e8      	b.n	800a760 <_strtol_l.constprop.0+0x8c>
 800a78e:	1c53      	adds	r3, r2, #1
 800a790:	d108      	bne.n	800a7a4 <_strtol_l.constprop.0+0xd0>
 800a792:	2322      	movs	r3, #34	; 0x22
 800a794:	4660      	mov	r0, ip
 800a796:	f8ce 3000 	str.w	r3, [lr]
 800a79a:	f1b8 0f00 	cmp.w	r8, #0
 800a79e:	d0a6      	beq.n	800a6ee <_strtol_l.constprop.0+0x1a>
 800a7a0:	1e69      	subs	r1, r5, #1
 800a7a2:	e006      	b.n	800a7b2 <_strtol_l.constprop.0+0xde>
 800a7a4:	b106      	cbz	r6, 800a7a8 <_strtol_l.constprop.0+0xd4>
 800a7a6:	4240      	negs	r0, r0
 800a7a8:	f1b8 0f00 	cmp.w	r8, #0
 800a7ac:	d09f      	beq.n	800a6ee <_strtol_l.constprop.0+0x1a>
 800a7ae:	2a00      	cmp	r2, #0
 800a7b0:	d1f6      	bne.n	800a7a0 <_strtol_l.constprop.0+0xcc>
 800a7b2:	f8c8 1000 	str.w	r1, [r8]
 800a7b6:	e79a      	b.n	800a6ee <_strtol_l.constprop.0+0x1a>
 800a7b8:	2430      	movs	r4, #48	; 0x30
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1b5      	bne.n	800a72a <_strtol_l.constprop.0+0x56>
 800a7be:	2308      	movs	r3, #8
 800a7c0:	e7b3      	b.n	800a72a <_strtol_l.constprop.0+0x56>
 800a7c2:	2c30      	cmp	r4, #48	; 0x30
 800a7c4:	d0a9      	beq.n	800a71a <_strtol_l.constprop.0+0x46>
 800a7c6:	230a      	movs	r3, #10
 800a7c8:	e7af      	b.n	800a72a <_strtol_l.constprop.0+0x56>
 800a7ca:	bf00      	nop
 800a7cc:	0800d4b1 	.word	0x0800d4b1

0800a7d0 <_strtol_r>:
 800a7d0:	f7ff bf80 	b.w	800a6d4 <_strtol_l.constprop.0>

0800a7d4 <__ssputs_r>:
 800a7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d8:	461f      	mov	r7, r3
 800a7da:	688e      	ldr	r6, [r1, #8]
 800a7dc:	4682      	mov	sl, r0
 800a7de:	42be      	cmp	r6, r7
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	4690      	mov	r8, r2
 800a7e4:	680b      	ldr	r3, [r1, #0]
 800a7e6:	d82c      	bhi.n	800a842 <__ssputs_r+0x6e>
 800a7e8:	898a      	ldrh	r2, [r1, #12]
 800a7ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7ee:	d026      	beq.n	800a83e <__ssputs_r+0x6a>
 800a7f0:	6965      	ldr	r5, [r4, #20]
 800a7f2:	6909      	ldr	r1, [r1, #16]
 800a7f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7f8:	eba3 0901 	sub.w	r9, r3, r1
 800a7fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a800:	1c7b      	adds	r3, r7, #1
 800a802:	444b      	add	r3, r9
 800a804:	106d      	asrs	r5, r5, #1
 800a806:	429d      	cmp	r5, r3
 800a808:	bf38      	it	cc
 800a80a:	461d      	movcc	r5, r3
 800a80c:	0553      	lsls	r3, r2, #21
 800a80e:	d527      	bpl.n	800a860 <__ssputs_r+0x8c>
 800a810:	4629      	mov	r1, r5
 800a812:	f7fe fc19 	bl	8009048 <_malloc_r>
 800a816:	4606      	mov	r6, r0
 800a818:	b360      	cbz	r0, 800a874 <__ssputs_r+0xa0>
 800a81a:	464a      	mov	r2, r9
 800a81c:	6921      	ldr	r1, [r4, #16]
 800a81e:	f7fd fd22 	bl	8008266 <memcpy>
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	6126      	str	r6, [r4, #16]
 800a830:	444e      	add	r6, r9
 800a832:	6026      	str	r6, [r4, #0]
 800a834:	463e      	mov	r6, r7
 800a836:	6165      	str	r5, [r4, #20]
 800a838:	eba5 0509 	sub.w	r5, r5, r9
 800a83c:	60a5      	str	r5, [r4, #8]
 800a83e:	42be      	cmp	r6, r7
 800a840:	d900      	bls.n	800a844 <__ssputs_r+0x70>
 800a842:	463e      	mov	r6, r7
 800a844:	4632      	mov	r2, r6
 800a846:	4641      	mov	r1, r8
 800a848:	6820      	ldr	r0, [r4, #0]
 800a84a:	f000 fb68 	bl	800af1e <memmove>
 800a84e:	2000      	movs	r0, #0
 800a850:	68a3      	ldr	r3, [r4, #8]
 800a852:	1b9b      	subs	r3, r3, r6
 800a854:	60a3      	str	r3, [r4, #8]
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	4433      	add	r3, r6
 800a85a:	6023      	str	r3, [r4, #0]
 800a85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a860:	462a      	mov	r2, r5
 800a862:	f000 ff5e 	bl	800b722 <_realloc_r>
 800a866:	4606      	mov	r6, r0
 800a868:	2800      	cmp	r0, #0
 800a86a:	d1e0      	bne.n	800a82e <__ssputs_r+0x5a>
 800a86c:	4650      	mov	r0, sl
 800a86e:	6921      	ldr	r1, [r4, #16]
 800a870:	f7fe fb7a 	bl	8008f68 <_free_r>
 800a874:	230c      	movs	r3, #12
 800a876:	f8ca 3000 	str.w	r3, [sl]
 800a87a:	89a3      	ldrh	r3, [r4, #12]
 800a87c:	f04f 30ff 	mov.w	r0, #4294967295
 800a880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a884:	81a3      	strh	r3, [r4, #12]
 800a886:	e7e9      	b.n	800a85c <__ssputs_r+0x88>

0800a888 <_svfiprintf_r>:
 800a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	4698      	mov	r8, r3
 800a88e:	898b      	ldrh	r3, [r1, #12]
 800a890:	4607      	mov	r7, r0
 800a892:	061b      	lsls	r3, r3, #24
 800a894:	460d      	mov	r5, r1
 800a896:	4614      	mov	r4, r2
 800a898:	b09d      	sub	sp, #116	; 0x74
 800a89a:	d50e      	bpl.n	800a8ba <_svfiprintf_r+0x32>
 800a89c:	690b      	ldr	r3, [r1, #16]
 800a89e:	b963      	cbnz	r3, 800a8ba <_svfiprintf_r+0x32>
 800a8a0:	2140      	movs	r1, #64	; 0x40
 800a8a2:	f7fe fbd1 	bl	8009048 <_malloc_r>
 800a8a6:	6028      	str	r0, [r5, #0]
 800a8a8:	6128      	str	r0, [r5, #16]
 800a8aa:	b920      	cbnz	r0, 800a8b6 <_svfiprintf_r+0x2e>
 800a8ac:	230c      	movs	r3, #12
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b4:	e0d0      	b.n	800aa58 <_svfiprintf_r+0x1d0>
 800a8b6:	2340      	movs	r3, #64	; 0x40
 800a8b8:	616b      	str	r3, [r5, #20]
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a8be:	2320      	movs	r3, #32
 800a8c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8c4:	2330      	movs	r3, #48	; 0x30
 800a8c6:	f04f 0901 	mov.w	r9, #1
 800a8ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8ce:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800aa70 <_svfiprintf_r+0x1e8>
 800a8d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8d6:	4623      	mov	r3, r4
 800a8d8:	469a      	mov	sl, r3
 800a8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8de:	b10a      	cbz	r2, 800a8e4 <_svfiprintf_r+0x5c>
 800a8e0:	2a25      	cmp	r2, #37	; 0x25
 800a8e2:	d1f9      	bne.n	800a8d8 <_svfiprintf_r+0x50>
 800a8e4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8e8:	d00b      	beq.n	800a902 <_svfiprintf_r+0x7a>
 800a8ea:	465b      	mov	r3, fp
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	4629      	mov	r1, r5
 800a8f0:	4638      	mov	r0, r7
 800a8f2:	f7ff ff6f 	bl	800a7d4 <__ssputs_r>
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	f000 80a9 	beq.w	800aa4e <_svfiprintf_r+0x1c6>
 800a8fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8fe:	445a      	add	r2, fp
 800a900:	9209      	str	r2, [sp, #36]	; 0x24
 800a902:	f89a 3000 	ldrb.w	r3, [sl]
 800a906:	2b00      	cmp	r3, #0
 800a908:	f000 80a1 	beq.w	800aa4e <_svfiprintf_r+0x1c6>
 800a90c:	2300      	movs	r3, #0
 800a90e:	f04f 32ff 	mov.w	r2, #4294967295
 800a912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a916:	f10a 0a01 	add.w	sl, sl, #1
 800a91a:	9304      	str	r3, [sp, #16]
 800a91c:	9307      	str	r3, [sp, #28]
 800a91e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a922:	931a      	str	r3, [sp, #104]	; 0x68
 800a924:	4654      	mov	r4, sl
 800a926:	2205      	movs	r2, #5
 800a928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a92c:	4850      	ldr	r0, [pc, #320]	; (800aa70 <_svfiprintf_r+0x1e8>)
 800a92e:	f7fd fc8c 	bl	800824a <memchr>
 800a932:	9a04      	ldr	r2, [sp, #16]
 800a934:	b9d8      	cbnz	r0, 800a96e <_svfiprintf_r+0xe6>
 800a936:	06d0      	lsls	r0, r2, #27
 800a938:	bf44      	itt	mi
 800a93a:	2320      	movmi	r3, #32
 800a93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a940:	0711      	lsls	r1, r2, #28
 800a942:	bf44      	itt	mi
 800a944:	232b      	movmi	r3, #43	; 0x2b
 800a946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a94a:	f89a 3000 	ldrb.w	r3, [sl]
 800a94e:	2b2a      	cmp	r3, #42	; 0x2a
 800a950:	d015      	beq.n	800a97e <_svfiprintf_r+0xf6>
 800a952:	4654      	mov	r4, sl
 800a954:	2000      	movs	r0, #0
 800a956:	f04f 0c0a 	mov.w	ip, #10
 800a95a:	9a07      	ldr	r2, [sp, #28]
 800a95c:	4621      	mov	r1, r4
 800a95e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a962:	3b30      	subs	r3, #48	; 0x30
 800a964:	2b09      	cmp	r3, #9
 800a966:	d94d      	bls.n	800aa04 <_svfiprintf_r+0x17c>
 800a968:	b1b0      	cbz	r0, 800a998 <_svfiprintf_r+0x110>
 800a96a:	9207      	str	r2, [sp, #28]
 800a96c:	e014      	b.n	800a998 <_svfiprintf_r+0x110>
 800a96e:	eba0 0308 	sub.w	r3, r0, r8
 800a972:	fa09 f303 	lsl.w	r3, r9, r3
 800a976:	4313      	orrs	r3, r2
 800a978:	46a2      	mov	sl, r4
 800a97a:	9304      	str	r3, [sp, #16]
 800a97c:	e7d2      	b.n	800a924 <_svfiprintf_r+0x9c>
 800a97e:	9b03      	ldr	r3, [sp, #12]
 800a980:	1d19      	adds	r1, r3, #4
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	9103      	str	r1, [sp, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	bfbb      	ittet	lt
 800a98a:	425b      	neglt	r3, r3
 800a98c:	f042 0202 	orrlt.w	r2, r2, #2
 800a990:	9307      	strge	r3, [sp, #28]
 800a992:	9307      	strlt	r3, [sp, #28]
 800a994:	bfb8      	it	lt
 800a996:	9204      	strlt	r2, [sp, #16]
 800a998:	7823      	ldrb	r3, [r4, #0]
 800a99a:	2b2e      	cmp	r3, #46	; 0x2e
 800a99c:	d10c      	bne.n	800a9b8 <_svfiprintf_r+0x130>
 800a99e:	7863      	ldrb	r3, [r4, #1]
 800a9a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9a2:	d134      	bne.n	800aa0e <_svfiprintf_r+0x186>
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	3402      	adds	r4, #2
 800a9a8:	1d1a      	adds	r2, r3, #4
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	9203      	str	r2, [sp, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	bfb8      	it	lt
 800a9b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9b6:	9305      	str	r3, [sp, #20]
 800a9b8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800aa74 <_svfiprintf_r+0x1ec>
 800a9bc:	2203      	movs	r2, #3
 800a9be:	4650      	mov	r0, sl
 800a9c0:	7821      	ldrb	r1, [r4, #0]
 800a9c2:	f7fd fc42 	bl	800824a <memchr>
 800a9c6:	b138      	cbz	r0, 800a9d8 <_svfiprintf_r+0x150>
 800a9c8:	2240      	movs	r2, #64	; 0x40
 800a9ca:	9b04      	ldr	r3, [sp, #16]
 800a9cc:	eba0 000a 	sub.w	r0, r0, sl
 800a9d0:	4082      	lsls	r2, r0
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	3401      	adds	r4, #1
 800a9d6:	9304      	str	r3, [sp, #16]
 800a9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9dc:	2206      	movs	r2, #6
 800a9de:	4826      	ldr	r0, [pc, #152]	; (800aa78 <_svfiprintf_r+0x1f0>)
 800a9e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9e4:	f7fd fc31 	bl	800824a <memchr>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d038      	beq.n	800aa5e <_svfiprintf_r+0x1d6>
 800a9ec:	4b23      	ldr	r3, [pc, #140]	; (800aa7c <_svfiprintf_r+0x1f4>)
 800a9ee:	bb1b      	cbnz	r3, 800aa38 <_svfiprintf_r+0x1b0>
 800a9f0:	9b03      	ldr	r3, [sp, #12]
 800a9f2:	3307      	adds	r3, #7
 800a9f4:	f023 0307 	bic.w	r3, r3, #7
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	9303      	str	r3, [sp, #12]
 800a9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9fe:	4433      	add	r3, r6
 800aa00:	9309      	str	r3, [sp, #36]	; 0x24
 800aa02:	e768      	b.n	800a8d6 <_svfiprintf_r+0x4e>
 800aa04:	460c      	mov	r4, r1
 800aa06:	2001      	movs	r0, #1
 800aa08:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa0c:	e7a6      	b.n	800a95c <_svfiprintf_r+0xd4>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f04f 0c0a 	mov.w	ip, #10
 800aa14:	4619      	mov	r1, r3
 800aa16:	3401      	adds	r4, #1
 800aa18:	9305      	str	r3, [sp, #20]
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa20:	3a30      	subs	r2, #48	; 0x30
 800aa22:	2a09      	cmp	r2, #9
 800aa24:	d903      	bls.n	800aa2e <_svfiprintf_r+0x1a6>
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d0c6      	beq.n	800a9b8 <_svfiprintf_r+0x130>
 800aa2a:	9105      	str	r1, [sp, #20]
 800aa2c:	e7c4      	b.n	800a9b8 <_svfiprintf_r+0x130>
 800aa2e:	4604      	mov	r4, r0
 800aa30:	2301      	movs	r3, #1
 800aa32:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa36:	e7f0      	b.n	800aa1a <_svfiprintf_r+0x192>
 800aa38:	ab03      	add	r3, sp, #12
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	462a      	mov	r2, r5
 800aa3e:	4638      	mov	r0, r7
 800aa40:	4b0f      	ldr	r3, [pc, #60]	; (800aa80 <_svfiprintf_r+0x1f8>)
 800aa42:	a904      	add	r1, sp, #16
 800aa44:	f7fc fb46 	bl	80070d4 <_printf_float>
 800aa48:	1c42      	adds	r2, r0, #1
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	d1d6      	bne.n	800a9fc <_svfiprintf_r+0x174>
 800aa4e:	89ab      	ldrh	r3, [r5, #12]
 800aa50:	065b      	lsls	r3, r3, #25
 800aa52:	f53f af2d 	bmi.w	800a8b0 <_svfiprintf_r+0x28>
 800aa56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa58:	b01d      	add	sp, #116	; 0x74
 800aa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5e:	ab03      	add	r3, sp, #12
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	462a      	mov	r2, r5
 800aa64:	4638      	mov	r0, r7
 800aa66:	4b06      	ldr	r3, [pc, #24]	; (800aa80 <_svfiprintf_r+0x1f8>)
 800aa68:	a904      	add	r1, sp, #16
 800aa6a:	f7fc fdd3 	bl	8007614 <_printf_i>
 800aa6e:	e7eb      	b.n	800aa48 <_svfiprintf_r+0x1c0>
 800aa70:	0800d5b1 	.word	0x0800d5b1
 800aa74:	0800d5b7 	.word	0x0800d5b7
 800aa78:	0800d5bb 	.word	0x0800d5bb
 800aa7c:	080070d5 	.word	0x080070d5
 800aa80:	0800a7d5 	.word	0x0800a7d5

0800aa84 <__sfputc_r>:
 800aa84:	6893      	ldr	r3, [r2, #8]
 800aa86:	b410      	push	{r4}
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	6093      	str	r3, [r2, #8]
 800aa8e:	da07      	bge.n	800aaa0 <__sfputc_r+0x1c>
 800aa90:	6994      	ldr	r4, [r2, #24]
 800aa92:	42a3      	cmp	r3, r4
 800aa94:	db01      	blt.n	800aa9a <__sfputc_r+0x16>
 800aa96:	290a      	cmp	r1, #10
 800aa98:	d102      	bne.n	800aaa0 <__sfputc_r+0x1c>
 800aa9a:	bc10      	pop	{r4}
 800aa9c:	f7fd ba6b 	b.w	8007f76 <__swbuf_r>
 800aaa0:	6813      	ldr	r3, [r2, #0]
 800aaa2:	1c58      	adds	r0, r3, #1
 800aaa4:	6010      	str	r0, [r2, #0]
 800aaa6:	7019      	strb	r1, [r3, #0]
 800aaa8:	4608      	mov	r0, r1
 800aaaa:	bc10      	pop	{r4}
 800aaac:	4770      	bx	lr

0800aaae <__sfputs_r>:
 800aaae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab0:	4606      	mov	r6, r0
 800aab2:	460f      	mov	r7, r1
 800aab4:	4614      	mov	r4, r2
 800aab6:	18d5      	adds	r5, r2, r3
 800aab8:	42ac      	cmp	r4, r5
 800aaba:	d101      	bne.n	800aac0 <__sfputs_r+0x12>
 800aabc:	2000      	movs	r0, #0
 800aabe:	e007      	b.n	800aad0 <__sfputs_r+0x22>
 800aac0:	463a      	mov	r2, r7
 800aac2:	4630      	mov	r0, r6
 800aac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac8:	f7ff ffdc 	bl	800aa84 <__sfputc_r>
 800aacc:	1c43      	adds	r3, r0, #1
 800aace:	d1f3      	bne.n	800aab8 <__sfputs_r+0xa>
 800aad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aad4 <_vfiprintf_r>:
 800aad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad8:	460d      	mov	r5, r1
 800aada:	4614      	mov	r4, r2
 800aadc:	4698      	mov	r8, r3
 800aade:	4606      	mov	r6, r0
 800aae0:	b09d      	sub	sp, #116	; 0x74
 800aae2:	b118      	cbz	r0, 800aaec <_vfiprintf_r+0x18>
 800aae4:	6a03      	ldr	r3, [r0, #32]
 800aae6:	b90b      	cbnz	r3, 800aaec <_vfiprintf_r+0x18>
 800aae8:	f7fd f950 	bl	8007d8c <__sinit>
 800aaec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaee:	07d9      	lsls	r1, r3, #31
 800aaf0:	d405      	bmi.n	800aafe <_vfiprintf_r+0x2a>
 800aaf2:	89ab      	ldrh	r3, [r5, #12]
 800aaf4:	059a      	lsls	r2, r3, #22
 800aaf6:	d402      	bmi.n	800aafe <_vfiprintf_r+0x2a>
 800aaf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aafa:	f7fd fba4 	bl	8008246 <__retarget_lock_acquire_recursive>
 800aafe:	89ab      	ldrh	r3, [r5, #12]
 800ab00:	071b      	lsls	r3, r3, #28
 800ab02:	d501      	bpl.n	800ab08 <_vfiprintf_r+0x34>
 800ab04:	692b      	ldr	r3, [r5, #16]
 800ab06:	b99b      	cbnz	r3, 800ab30 <_vfiprintf_r+0x5c>
 800ab08:	4629      	mov	r1, r5
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	f7fd fa70 	bl	8007ff0 <__swsetup_r>
 800ab10:	b170      	cbz	r0, 800ab30 <_vfiprintf_r+0x5c>
 800ab12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab14:	07dc      	lsls	r4, r3, #31
 800ab16:	d504      	bpl.n	800ab22 <_vfiprintf_r+0x4e>
 800ab18:	f04f 30ff 	mov.w	r0, #4294967295
 800ab1c:	b01d      	add	sp, #116	; 0x74
 800ab1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab22:	89ab      	ldrh	r3, [r5, #12]
 800ab24:	0598      	lsls	r0, r3, #22
 800ab26:	d4f7      	bmi.n	800ab18 <_vfiprintf_r+0x44>
 800ab28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab2a:	f7fd fb8d 	bl	8008248 <__retarget_lock_release_recursive>
 800ab2e:	e7f3      	b.n	800ab18 <_vfiprintf_r+0x44>
 800ab30:	2300      	movs	r3, #0
 800ab32:	9309      	str	r3, [sp, #36]	; 0x24
 800ab34:	2320      	movs	r3, #32
 800ab36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab3a:	2330      	movs	r3, #48	; 0x30
 800ab3c:	f04f 0901 	mov.w	r9, #1
 800ab40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800acf4 <_vfiprintf_r+0x220>
 800ab48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab4c:	4623      	mov	r3, r4
 800ab4e:	469a      	mov	sl, r3
 800ab50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab54:	b10a      	cbz	r2, 800ab5a <_vfiprintf_r+0x86>
 800ab56:	2a25      	cmp	r2, #37	; 0x25
 800ab58:	d1f9      	bne.n	800ab4e <_vfiprintf_r+0x7a>
 800ab5a:	ebba 0b04 	subs.w	fp, sl, r4
 800ab5e:	d00b      	beq.n	800ab78 <_vfiprintf_r+0xa4>
 800ab60:	465b      	mov	r3, fp
 800ab62:	4622      	mov	r2, r4
 800ab64:	4629      	mov	r1, r5
 800ab66:	4630      	mov	r0, r6
 800ab68:	f7ff ffa1 	bl	800aaae <__sfputs_r>
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	f000 80a9 	beq.w	800acc4 <_vfiprintf_r+0x1f0>
 800ab72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab74:	445a      	add	r2, fp
 800ab76:	9209      	str	r2, [sp, #36]	; 0x24
 800ab78:	f89a 3000 	ldrb.w	r3, [sl]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 80a1 	beq.w	800acc4 <_vfiprintf_r+0x1f0>
 800ab82:	2300      	movs	r3, #0
 800ab84:	f04f 32ff 	mov.w	r2, #4294967295
 800ab88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab8c:	f10a 0a01 	add.w	sl, sl, #1
 800ab90:	9304      	str	r3, [sp, #16]
 800ab92:	9307      	str	r3, [sp, #28]
 800ab94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab98:	931a      	str	r3, [sp, #104]	; 0x68
 800ab9a:	4654      	mov	r4, sl
 800ab9c:	2205      	movs	r2, #5
 800ab9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aba2:	4854      	ldr	r0, [pc, #336]	; (800acf4 <_vfiprintf_r+0x220>)
 800aba4:	f7fd fb51 	bl	800824a <memchr>
 800aba8:	9a04      	ldr	r2, [sp, #16]
 800abaa:	b9d8      	cbnz	r0, 800abe4 <_vfiprintf_r+0x110>
 800abac:	06d1      	lsls	r1, r2, #27
 800abae:	bf44      	itt	mi
 800abb0:	2320      	movmi	r3, #32
 800abb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abb6:	0713      	lsls	r3, r2, #28
 800abb8:	bf44      	itt	mi
 800abba:	232b      	movmi	r3, #43	; 0x2b
 800abbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abc0:	f89a 3000 	ldrb.w	r3, [sl]
 800abc4:	2b2a      	cmp	r3, #42	; 0x2a
 800abc6:	d015      	beq.n	800abf4 <_vfiprintf_r+0x120>
 800abc8:	4654      	mov	r4, sl
 800abca:	2000      	movs	r0, #0
 800abcc:	f04f 0c0a 	mov.w	ip, #10
 800abd0:	9a07      	ldr	r2, [sp, #28]
 800abd2:	4621      	mov	r1, r4
 800abd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abd8:	3b30      	subs	r3, #48	; 0x30
 800abda:	2b09      	cmp	r3, #9
 800abdc:	d94d      	bls.n	800ac7a <_vfiprintf_r+0x1a6>
 800abde:	b1b0      	cbz	r0, 800ac0e <_vfiprintf_r+0x13a>
 800abe0:	9207      	str	r2, [sp, #28]
 800abe2:	e014      	b.n	800ac0e <_vfiprintf_r+0x13a>
 800abe4:	eba0 0308 	sub.w	r3, r0, r8
 800abe8:	fa09 f303 	lsl.w	r3, r9, r3
 800abec:	4313      	orrs	r3, r2
 800abee:	46a2      	mov	sl, r4
 800abf0:	9304      	str	r3, [sp, #16]
 800abf2:	e7d2      	b.n	800ab9a <_vfiprintf_r+0xc6>
 800abf4:	9b03      	ldr	r3, [sp, #12]
 800abf6:	1d19      	adds	r1, r3, #4
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	9103      	str	r1, [sp, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bfbb      	ittet	lt
 800ac00:	425b      	neglt	r3, r3
 800ac02:	f042 0202 	orrlt.w	r2, r2, #2
 800ac06:	9307      	strge	r3, [sp, #28]
 800ac08:	9307      	strlt	r3, [sp, #28]
 800ac0a:	bfb8      	it	lt
 800ac0c:	9204      	strlt	r2, [sp, #16]
 800ac0e:	7823      	ldrb	r3, [r4, #0]
 800ac10:	2b2e      	cmp	r3, #46	; 0x2e
 800ac12:	d10c      	bne.n	800ac2e <_vfiprintf_r+0x15a>
 800ac14:	7863      	ldrb	r3, [r4, #1]
 800ac16:	2b2a      	cmp	r3, #42	; 0x2a
 800ac18:	d134      	bne.n	800ac84 <_vfiprintf_r+0x1b0>
 800ac1a:	9b03      	ldr	r3, [sp, #12]
 800ac1c:	3402      	adds	r4, #2
 800ac1e:	1d1a      	adds	r2, r3, #4
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	9203      	str	r2, [sp, #12]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	bfb8      	it	lt
 800ac28:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac2c:	9305      	str	r3, [sp, #20]
 800ac2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800acf8 <_vfiprintf_r+0x224>
 800ac32:	2203      	movs	r2, #3
 800ac34:	4650      	mov	r0, sl
 800ac36:	7821      	ldrb	r1, [r4, #0]
 800ac38:	f7fd fb07 	bl	800824a <memchr>
 800ac3c:	b138      	cbz	r0, 800ac4e <_vfiprintf_r+0x17a>
 800ac3e:	2240      	movs	r2, #64	; 0x40
 800ac40:	9b04      	ldr	r3, [sp, #16]
 800ac42:	eba0 000a 	sub.w	r0, r0, sl
 800ac46:	4082      	lsls	r2, r0
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	3401      	adds	r4, #1
 800ac4c:	9304      	str	r3, [sp, #16]
 800ac4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac52:	2206      	movs	r2, #6
 800ac54:	4829      	ldr	r0, [pc, #164]	; (800acfc <_vfiprintf_r+0x228>)
 800ac56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac5a:	f7fd faf6 	bl	800824a <memchr>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d03f      	beq.n	800ace2 <_vfiprintf_r+0x20e>
 800ac62:	4b27      	ldr	r3, [pc, #156]	; (800ad00 <_vfiprintf_r+0x22c>)
 800ac64:	bb1b      	cbnz	r3, 800acae <_vfiprintf_r+0x1da>
 800ac66:	9b03      	ldr	r3, [sp, #12]
 800ac68:	3307      	adds	r3, #7
 800ac6a:	f023 0307 	bic.w	r3, r3, #7
 800ac6e:	3308      	adds	r3, #8
 800ac70:	9303      	str	r3, [sp, #12]
 800ac72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac74:	443b      	add	r3, r7
 800ac76:	9309      	str	r3, [sp, #36]	; 0x24
 800ac78:	e768      	b.n	800ab4c <_vfiprintf_r+0x78>
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	2001      	movs	r0, #1
 800ac7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac82:	e7a6      	b.n	800abd2 <_vfiprintf_r+0xfe>
 800ac84:	2300      	movs	r3, #0
 800ac86:	f04f 0c0a 	mov.w	ip, #10
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	3401      	adds	r4, #1
 800ac8e:	9305      	str	r3, [sp, #20]
 800ac90:	4620      	mov	r0, r4
 800ac92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac96:	3a30      	subs	r2, #48	; 0x30
 800ac98:	2a09      	cmp	r2, #9
 800ac9a:	d903      	bls.n	800aca4 <_vfiprintf_r+0x1d0>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d0c6      	beq.n	800ac2e <_vfiprintf_r+0x15a>
 800aca0:	9105      	str	r1, [sp, #20]
 800aca2:	e7c4      	b.n	800ac2e <_vfiprintf_r+0x15a>
 800aca4:	4604      	mov	r4, r0
 800aca6:	2301      	movs	r3, #1
 800aca8:	fb0c 2101 	mla	r1, ip, r1, r2
 800acac:	e7f0      	b.n	800ac90 <_vfiprintf_r+0x1bc>
 800acae:	ab03      	add	r3, sp, #12
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	462a      	mov	r2, r5
 800acb4:	4630      	mov	r0, r6
 800acb6:	4b13      	ldr	r3, [pc, #76]	; (800ad04 <_vfiprintf_r+0x230>)
 800acb8:	a904      	add	r1, sp, #16
 800acba:	f7fc fa0b 	bl	80070d4 <_printf_float>
 800acbe:	4607      	mov	r7, r0
 800acc0:	1c78      	adds	r0, r7, #1
 800acc2:	d1d6      	bne.n	800ac72 <_vfiprintf_r+0x19e>
 800acc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acc6:	07d9      	lsls	r1, r3, #31
 800acc8:	d405      	bmi.n	800acd6 <_vfiprintf_r+0x202>
 800acca:	89ab      	ldrh	r3, [r5, #12]
 800accc:	059a      	lsls	r2, r3, #22
 800acce:	d402      	bmi.n	800acd6 <_vfiprintf_r+0x202>
 800acd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acd2:	f7fd fab9 	bl	8008248 <__retarget_lock_release_recursive>
 800acd6:	89ab      	ldrh	r3, [r5, #12]
 800acd8:	065b      	lsls	r3, r3, #25
 800acda:	f53f af1d 	bmi.w	800ab18 <_vfiprintf_r+0x44>
 800acde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ace0:	e71c      	b.n	800ab1c <_vfiprintf_r+0x48>
 800ace2:	ab03      	add	r3, sp, #12
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	462a      	mov	r2, r5
 800ace8:	4630      	mov	r0, r6
 800acea:	4b06      	ldr	r3, [pc, #24]	; (800ad04 <_vfiprintf_r+0x230>)
 800acec:	a904      	add	r1, sp, #16
 800acee:	f7fc fc91 	bl	8007614 <_printf_i>
 800acf2:	e7e4      	b.n	800acbe <_vfiprintf_r+0x1ea>
 800acf4:	0800d5b1 	.word	0x0800d5b1
 800acf8:	0800d5b7 	.word	0x0800d5b7
 800acfc:	0800d5bb 	.word	0x0800d5bb
 800ad00:	080070d5 	.word	0x080070d5
 800ad04:	0800aaaf 	.word	0x0800aaaf

0800ad08 <__sflush_r>:
 800ad08:	898a      	ldrh	r2, [r1, #12]
 800ad0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	0710      	lsls	r0, r2, #28
 800ad10:	460c      	mov	r4, r1
 800ad12:	d457      	bmi.n	800adc4 <__sflush_r+0xbc>
 800ad14:	684b      	ldr	r3, [r1, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	dc04      	bgt.n	800ad24 <__sflush_r+0x1c>
 800ad1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	dc01      	bgt.n	800ad24 <__sflush_r+0x1c>
 800ad20:	2000      	movs	r0, #0
 800ad22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad26:	2e00      	cmp	r6, #0
 800ad28:	d0fa      	beq.n	800ad20 <__sflush_r+0x18>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad30:	682f      	ldr	r7, [r5, #0]
 800ad32:	6a21      	ldr	r1, [r4, #32]
 800ad34:	602b      	str	r3, [r5, #0]
 800ad36:	d032      	beq.n	800ad9e <__sflush_r+0x96>
 800ad38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	075a      	lsls	r2, r3, #29
 800ad3e:	d505      	bpl.n	800ad4c <__sflush_r+0x44>
 800ad40:	6863      	ldr	r3, [r4, #4]
 800ad42:	1ac0      	subs	r0, r0, r3
 800ad44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad46:	b10b      	cbz	r3, 800ad4c <__sflush_r+0x44>
 800ad48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad4a:	1ac0      	subs	r0, r0, r3
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	4602      	mov	r2, r0
 800ad50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad52:	4628      	mov	r0, r5
 800ad54:	6a21      	ldr	r1, [r4, #32]
 800ad56:	47b0      	blx	r6
 800ad58:	1c43      	adds	r3, r0, #1
 800ad5a:	89a3      	ldrh	r3, [r4, #12]
 800ad5c:	d106      	bne.n	800ad6c <__sflush_r+0x64>
 800ad5e:	6829      	ldr	r1, [r5, #0]
 800ad60:	291d      	cmp	r1, #29
 800ad62:	d82b      	bhi.n	800adbc <__sflush_r+0xb4>
 800ad64:	4a28      	ldr	r2, [pc, #160]	; (800ae08 <__sflush_r+0x100>)
 800ad66:	410a      	asrs	r2, r1
 800ad68:	07d6      	lsls	r6, r2, #31
 800ad6a:	d427      	bmi.n	800adbc <__sflush_r+0xb4>
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	6062      	str	r2, [r4, #4]
 800ad70:	6922      	ldr	r2, [r4, #16]
 800ad72:	04d9      	lsls	r1, r3, #19
 800ad74:	6022      	str	r2, [r4, #0]
 800ad76:	d504      	bpl.n	800ad82 <__sflush_r+0x7a>
 800ad78:	1c42      	adds	r2, r0, #1
 800ad7a:	d101      	bne.n	800ad80 <__sflush_r+0x78>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	b903      	cbnz	r3, 800ad82 <__sflush_r+0x7a>
 800ad80:	6560      	str	r0, [r4, #84]	; 0x54
 800ad82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad84:	602f      	str	r7, [r5, #0]
 800ad86:	2900      	cmp	r1, #0
 800ad88:	d0ca      	beq.n	800ad20 <__sflush_r+0x18>
 800ad8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad8e:	4299      	cmp	r1, r3
 800ad90:	d002      	beq.n	800ad98 <__sflush_r+0x90>
 800ad92:	4628      	mov	r0, r5
 800ad94:	f7fe f8e8 	bl	8008f68 <_free_r>
 800ad98:	2000      	movs	r0, #0
 800ad9a:	6360      	str	r0, [r4, #52]	; 0x34
 800ad9c:	e7c1      	b.n	800ad22 <__sflush_r+0x1a>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	4628      	mov	r0, r5
 800ada2:	47b0      	blx	r6
 800ada4:	1c41      	adds	r1, r0, #1
 800ada6:	d1c8      	bne.n	800ad3a <__sflush_r+0x32>
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d0c5      	beq.n	800ad3a <__sflush_r+0x32>
 800adae:	2b1d      	cmp	r3, #29
 800adb0:	d001      	beq.n	800adb6 <__sflush_r+0xae>
 800adb2:	2b16      	cmp	r3, #22
 800adb4:	d101      	bne.n	800adba <__sflush_r+0xb2>
 800adb6:	602f      	str	r7, [r5, #0]
 800adb8:	e7b2      	b.n	800ad20 <__sflush_r+0x18>
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adc0:	81a3      	strh	r3, [r4, #12]
 800adc2:	e7ae      	b.n	800ad22 <__sflush_r+0x1a>
 800adc4:	690f      	ldr	r7, [r1, #16]
 800adc6:	2f00      	cmp	r7, #0
 800adc8:	d0aa      	beq.n	800ad20 <__sflush_r+0x18>
 800adca:	0793      	lsls	r3, r2, #30
 800adcc:	bf18      	it	ne
 800adce:	2300      	movne	r3, #0
 800add0:	680e      	ldr	r6, [r1, #0]
 800add2:	bf08      	it	eq
 800add4:	694b      	ldreq	r3, [r1, #20]
 800add6:	1bf6      	subs	r6, r6, r7
 800add8:	600f      	str	r7, [r1, #0]
 800adda:	608b      	str	r3, [r1, #8]
 800addc:	2e00      	cmp	r6, #0
 800adde:	dd9f      	ble.n	800ad20 <__sflush_r+0x18>
 800ade0:	4633      	mov	r3, r6
 800ade2:	463a      	mov	r2, r7
 800ade4:	4628      	mov	r0, r5
 800ade6:	6a21      	ldr	r1, [r4, #32]
 800ade8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800adec:	47e0      	blx	ip
 800adee:	2800      	cmp	r0, #0
 800adf0:	dc06      	bgt.n	800ae00 <__sflush_r+0xf8>
 800adf2:	89a3      	ldrh	r3, [r4, #12]
 800adf4:	f04f 30ff 	mov.w	r0, #4294967295
 800adf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adfc:	81a3      	strh	r3, [r4, #12]
 800adfe:	e790      	b.n	800ad22 <__sflush_r+0x1a>
 800ae00:	4407      	add	r7, r0
 800ae02:	1a36      	subs	r6, r6, r0
 800ae04:	e7ea      	b.n	800addc <__sflush_r+0xd4>
 800ae06:	bf00      	nop
 800ae08:	dfbffffe 	.word	0xdfbffffe

0800ae0c <_fflush_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	690b      	ldr	r3, [r1, #16]
 800ae10:	4605      	mov	r5, r0
 800ae12:	460c      	mov	r4, r1
 800ae14:	b913      	cbnz	r3, 800ae1c <_fflush_r+0x10>
 800ae16:	2500      	movs	r5, #0
 800ae18:	4628      	mov	r0, r5
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	b118      	cbz	r0, 800ae26 <_fflush_r+0x1a>
 800ae1e:	6a03      	ldr	r3, [r0, #32]
 800ae20:	b90b      	cbnz	r3, 800ae26 <_fflush_r+0x1a>
 800ae22:	f7fc ffb3 	bl	8007d8c <__sinit>
 800ae26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d0f3      	beq.n	800ae16 <_fflush_r+0xa>
 800ae2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae30:	07d0      	lsls	r0, r2, #31
 800ae32:	d404      	bmi.n	800ae3e <_fflush_r+0x32>
 800ae34:	0599      	lsls	r1, r3, #22
 800ae36:	d402      	bmi.n	800ae3e <_fflush_r+0x32>
 800ae38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae3a:	f7fd fa04 	bl	8008246 <__retarget_lock_acquire_recursive>
 800ae3e:	4628      	mov	r0, r5
 800ae40:	4621      	mov	r1, r4
 800ae42:	f7ff ff61 	bl	800ad08 <__sflush_r>
 800ae46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae48:	4605      	mov	r5, r0
 800ae4a:	07da      	lsls	r2, r3, #31
 800ae4c:	d4e4      	bmi.n	800ae18 <_fflush_r+0xc>
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	059b      	lsls	r3, r3, #22
 800ae52:	d4e1      	bmi.n	800ae18 <_fflush_r+0xc>
 800ae54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae56:	f7fd f9f7 	bl	8008248 <__retarget_lock_release_recursive>
 800ae5a:	e7dd      	b.n	800ae18 <_fflush_r+0xc>

0800ae5c <__swhatbuf_r>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	460c      	mov	r4, r1
 800ae60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae64:	4615      	mov	r5, r2
 800ae66:	2900      	cmp	r1, #0
 800ae68:	461e      	mov	r6, r3
 800ae6a:	b096      	sub	sp, #88	; 0x58
 800ae6c:	da0c      	bge.n	800ae88 <__swhatbuf_r+0x2c>
 800ae6e:	89a3      	ldrh	r3, [r4, #12]
 800ae70:	2100      	movs	r1, #0
 800ae72:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ae76:	bf0c      	ite	eq
 800ae78:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ae7c:	2340      	movne	r3, #64	; 0x40
 800ae7e:	2000      	movs	r0, #0
 800ae80:	6031      	str	r1, [r6, #0]
 800ae82:	602b      	str	r3, [r5, #0]
 800ae84:	b016      	add	sp, #88	; 0x58
 800ae86:	bd70      	pop	{r4, r5, r6, pc}
 800ae88:	466a      	mov	r2, sp
 800ae8a:	f000 f875 	bl	800af78 <_fstat_r>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	dbed      	blt.n	800ae6e <__swhatbuf_r+0x12>
 800ae92:	9901      	ldr	r1, [sp, #4]
 800ae94:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ae98:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ae9c:	4259      	negs	r1, r3
 800ae9e:	4159      	adcs	r1, r3
 800aea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aea4:	e7eb      	b.n	800ae7e <__swhatbuf_r+0x22>

0800aea6 <__smakebuf_r>:
 800aea6:	898b      	ldrh	r3, [r1, #12]
 800aea8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aeaa:	079d      	lsls	r5, r3, #30
 800aeac:	4606      	mov	r6, r0
 800aeae:	460c      	mov	r4, r1
 800aeb0:	d507      	bpl.n	800aec2 <__smakebuf_r+0x1c>
 800aeb2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aeb6:	6023      	str	r3, [r4, #0]
 800aeb8:	6123      	str	r3, [r4, #16]
 800aeba:	2301      	movs	r3, #1
 800aebc:	6163      	str	r3, [r4, #20]
 800aebe:	b002      	add	sp, #8
 800aec0:	bd70      	pop	{r4, r5, r6, pc}
 800aec2:	466a      	mov	r2, sp
 800aec4:	ab01      	add	r3, sp, #4
 800aec6:	f7ff ffc9 	bl	800ae5c <__swhatbuf_r>
 800aeca:	9900      	ldr	r1, [sp, #0]
 800aecc:	4605      	mov	r5, r0
 800aece:	4630      	mov	r0, r6
 800aed0:	f7fe f8ba 	bl	8009048 <_malloc_r>
 800aed4:	b948      	cbnz	r0, 800aeea <__smakebuf_r+0x44>
 800aed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeda:	059a      	lsls	r2, r3, #22
 800aedc:	d4ef      	bmi.n	800aebe <__smakebuf_r+0x18>
 800aede:	f023 0303 	bic.w	r3, r3, #3
 800aee2:	f043 0302 	orr.w	r3, r3, #2
 800aee6:	81a3      	strh	r3, [r4, #12]
 800aee8:	e7e3      	b.n	800aeb2 <__smakebuf_r+0xc>
 800aeea:	89a3      	ldrh	r3, [r4, #12]
 800aeec:	6020      	str	r0, [r4, #0]
 800aeee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aef2:	81a3      	strh	r3, [r4, #12]
 800aef4:	9b00      	ldr	r3, [sp, #0]
 800aef6:	6120      	str	r0, [r4, #16]
 800aef8:	6163      	str	r3, [r4, #20]
 800aefa:	9b01      	ldr	r3, [sp, #4]
 800aefc:	b15b      	cbz	r3, 800af16 <__smakebuf_r+0x70>
 800aefe:	4630      	mov	r0, r6
 800af00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af04:	f000 f84a 	bl	800af9c <_isatty_r>
 800af08:	b128      	cbz	r0, 800af16 <__smakebuf_r+0x70>
 800af0a:	89a3      	ldrh	r3, [r4, #12]
 800af0c:	f023 0303 	bic.w	r3, r3, #3
 800af10:	f043 0301 	orr.w	r3, r3, #1
 800af14:	81a3      	strh	r3, [r4, #12]
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	431d      	orrs	r5, r3
 800af1a:	81a5      	strh	r5, [r4, #12]
 800af1c:	e7cf      	b.n	800aebe <__smakebuf_r+0x18>

0800af1e <memmove>:
 800af1e:	4288      	cmp	r0, r1
 800af20:	b510      	push	{r4, lr}
 800af22:	eb01 0402 	add.w	r4, r1, r2
 800af26:	d902      	bls.n	800af2e <memmove+0x10>
 800af28:	4284      	cmp	r4, r0
 800af2a:	4623      	mov	r3, r4
 800af2c:	d807      	bhi.n	800af3e <memmove+0x20>
 800af2e:	1e43      	subs	r3, r0, #1
 800af30:	42a1      	cmp	r1, r4
 800af32:	d008      	beq.n	800af46 <memmove+0x28>
 800af34:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af38:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af3c:	e7f8      	b.n	800af30 <memmove+0x12>
 800af3e:	4601      	mov	r1, r0
 800af40:	4402      	add	r2, r0
 800af42:	428a      	cmp	r2, r1
 800af44:	d100      	bne.n	800af48 <memmove+0x2a>
 800af46:	bd10      	pop	{r4, pc}
 800af48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af4c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af50:	e7f7      	b.n	800af42 <memmove+0x24>

0800af52 <strncmp>:
 800af52:	b510      	push	{r4, lr}
 800af54:	b16a      	cbz	r2, 800af72 <strncmp+0x20>
 800af56:	3901      	subs	r1, #1
 800af58:	1884      	adds	r4, r0, r2
 800af5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af5e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800af62:	429a      	cmp	r2, r3
 800af64:	d103      	bne.n	800af6e <strncmp+0x1c>
 800af66:	42a0      	cmp	r0, r4
 800af68:	d001      	beq.n	800af6e <strncmp+0x1c>
 800af6a:	2a00      	cmp	r2, #0
 800af6c:	d1f5      	bne.n	800af5a <strncmp+0x8>
 800af6e:	1ad0      	subs	r0, r2, r3
 800af70:	bd10      	pop	{r4, pc}
 800af72:	4610      	mov	r0, r2
 800af74:	e7fc      	b.n	800af70 <strncmp+0x1e>
	...

0800af78 <_fstat_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	2300      	movs	r3, #0
 800af7c:	4d06      	ldr	r5, [pc, #24]	; (800af98 <_fstat_r+0x20>)
 800af7e:	4604      	mov	r4, r0
 800af80:	4608      	mov	r0, r1
 800af82:	4611      	mov	r1, r2
 800af84:	602b      	str	r3, [r5, #0]
 800af86:	f7f8 fda6 	bl	8003ad6 <_fstat>
 800af8a:	1c43      	adds	r3, r0, #1
 800af8c:	d102      	bne.n	800af94 <_fstat_r+0x1c>
 800af8e:	682b      	ldr	r3, [r5, #0]
 800af90:	b103      	cbz	r3, 800af94 <_fstat_r+0x1c>
 800af92:	6023      	str	r3, [r4, #0]
 800af94:	bd38      	pop	{r3, r4, r5, pc}
 800af96:	bf00      	nop
 800af98:	200018bc 	.word	0x200018bc

0800af9c <_isatty_r>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	2300      	movs	r3, #0
 800afa0:	4d05      	ldr	r5, [pc, #20]	; (800afb8 <_isatty_r+0x1c>)
 800afa2:	4604      	mov	r4, r0
 800afa4:	4608      	mov	r0, r1
 800afa6:	602b      	str	r3, [r5, #0]
 800afa8:	f7f8 fda4 	bl	8003af4 <_isatty>
 800afac:	1c43      	adds	r3, r0, #1
 800afae:	d102      	bne.n	800afb6 <_isatty_r+0x1a>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	b103      	cbz	r3, 800afb6 <_isatty_r+0x1a>
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	bd38      	pop	{r3, r4, r5, pc}
 800afb8:	200018bc 	.word	0x200018bc

0800afbc <_sbrk_r>:
 800afbc:	b538      	push	{r3, r4, r5, lr}
 800afbe:	2300      	movs	r3, #0
 800afc0:	4d05      	ldr	r5, [pc, #20]	; (800afd8 <_sbrk_r+0x1c>)
 800afc2:	4604      	mov	r4, r0
 800afc4:	4608      	mov	r0, r1
 800afc6:	602b      	str	r3, [r5, #0]
 800afc8:	f7f8 fdaa 	bl	8003b20 <_sbrk>
 800afcc:	1c43      	adds	r3, r0, #1
 800afce:	d102      	bne.n	800afd6 <_sbrk_r+0x1a>
 800afd0:	682b      	ldr	r3, [r5, #0]
 800afd2:	b103      	cbz	r3, 800afd6 <_sbrk_r+0x1a>
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	bd38      	pop	{r3, r4, r5, pc}
 800afd8:	200018bc 	.word	0x200018bc

0800afdc <nan>:
 800afdc:	2000      	movs	r0, #0
 800afde:	4901      	ldr	r1, [pc, #4]	; (800afe4 <nan+0x8>)
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	7ff80000 	.word	0x7ff80000

0800afe8 <__assert_func>:
 800afe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afea:	4614      	mov	r4, r2
 800afec:	461a      	mov	r2, r3
 800afee:	4b09      	ldr	r3, [pc, #36]	; (800b014 <__assert_func+0x2c>)
 800aff0:	4605      	mov	r5, r0
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68d8      	ldr	r0, [r3, #12]
 800aff6:	b14c      	cbz	r4, 800b00c <__assert_func+0x24>
 800aff8:	4b07      	ldr	r3, [pc, #28]	; (800b018 <__assert_func+0x30>)
 800affa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800affe:	9100      	str	r1, [sp, #0]
 800b000:	462b      	mov	r3, r5
 800b002:	4906      	ldr	r1, [pc, #24]	; (800b01c <__assert_func+0x34>)
 800b004:	f000 fbca 	bl	800b79c <fiprintf>
 800b008:	f000 fbda 	bl	800b7c0 <abort>
 800b00c:	4b04      	ldr	r3, [pc, #16]	; (800b020 <__assert_func+0x38>)
 800b00e:	461c      	mov	r4, r3
 800b010:	e7f3      	b.n	800affa <__assert_func+0x12>
 800b012:	bf00      	nop
 800b014:	20000084 	.word	0x20000084
 800b018:	0800d5ca 	.word	0x0800d5ca
 800b01c:	0800d5d7 	.word	0x0800d5d7
 800b020:	0800d605 	.word	0x0800d605

0800b024 <_calloc_r>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	fba1 5402 	umull	r5, r4, r1, r2
 800b02a:	b934      	cbnz	r4, 800b03a <_calloc_r+0x16>
 800b02c:	4629      	mov	r1, r5
 800b02e:	f7fe f80b 	bl	8009048 <_malloc_r>
 800b032:	4606      	mov	r6, r0
 800b034:	b928      	cbnz	r0, 800b042 <_calloc_r+0x1e>
 800b036:	4630      	mov	r0, r6
 800b038:	bd70      	pop	{r4, r5, r6, pc}
 800b03a:	220c      	movs	r2, #12
 800b03c:	2600      	movs	r6, #0
 800b03e:	6002      	str	r2, [r0, #0]
 800b040:	e7f9      	b.n	800b036 <_calloc_r+0x12>
 800b042:	462a      	mov	r2, r5
 800b044:	4621      	mov	r1, r4
 800b046:	f7fd f82b 	bl	80080a0 <memset>
 800b04a:	e7f4      	b.n	800b036 <_calloc_r+0x12>

0800b04c <rshift>:
 800b04c:	6903      	ldr	r3, [r0, #16]
 800b04e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b052:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b056:	f100 0414 	add.w	r4, r0, #20
 800b05a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b05e:	dd46      	ble.n	800b0ee <rshift+0xa2>
 800b060:	f011 011f 	ands.w	r1, r1, #31
 800b064:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b068:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b06c:	d10c      	bne.n	800b088 <rshift+0x3c>
 800b06e:	4629      	mov	r1, r5
 800b070:	f100 0710 	add.w	r7, r0, #16
 800b074:	42b1      	cmp	r1, r6
 800b076:	d335      	bcc.n	800b0e4 <rshift+0x98>
 800b078:	1a9b      	subs	r3, r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	1eea      	subs	r2, r5, #3
 800b07e:	4296      	cmp	r6, r2
 800b080:	bf38      	it	cc
 800b082:	2300      	movcc	r3, #0
 800b084:	4423      	add	r3, r4
 800b086:	e015      	b.n	800b0b4 <rshift+0x68>
 800b088:	46a1      	mov	r9, r4
 800b08a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b08e:	f1c1 0820 	rsb	r8, r1, #32
 800b092:	40cf      	lsrs	r7, r1
 800b094:	f105 0e04 	add.w	lr, r5, #4
 800b098:	4576      	cmp	r6, lr
 800b09a:	46f4      	mov	ip, lr
 800b09c:	d816      	bhi.n	800b0cc <rshift+0x80>
 800b09e:	1a9a      	subs	r2, r3, r2
 800b0a0:	0092      	lsls	r2, r2, #2
 800b0a2:	3a04      	subs	r2, #4
 800b0a4:	3501      	adds	r5, #1
 800b0a6:	42ae      	cmp	r6, r5
 800b0a8:	bf38      	it	cc
 800b0aa:	2200      	movcc	r2, #0
 800b0ac:	18a3      	adds	r3, r4, r2
 800b0ae:	50a7      	str	r7, [r4, r2]
 800b0b0:	b107      	cbz	r7, 800b0b4 <rshift+0x68>
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	42a3      	cmp	r3, r4
 800b0b6:	eba3 0204 	sub.w	r2, r3, r4
 800b0ba:	bf08      	it	eq
 800b0bc:	2300      	moveq	r3, #0
 800b0be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b0c2:	6102      	str	r2, [r0, #16]
 800b0c4:	bf08      	it	eq
 800b0c6:	6143      	streq	r3, [r0, #20]
 800b0c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0cc:	f8dc c000 	ldr.w	ip, [ip]
 800b0d0:	fa0c fc08 	lsl.w	ip, ip, r8
 800b0d4:	ea4c 0707 	orr.w	r7, ip, r7
 800b0d8:	f849 7b04 	str.w	r7, [r9], #4
 800b0dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0e0:	40cf      	lsrs	r7, r1
 800b0e2:	e7d9      	b.n	800b098 <rshift+0x4c>
 800b0e4:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0e8:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0ec:	e7c2      	b.n	800b074 <rshift+0x28>
 800b0ee:	4623      	mov	r3, r4
 800b0f0:	e7e0      	b.n	800b0b4 <rshift+0x68>

0800b0f2 <__hexdig_fun>:
 800b0f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b0f6:	2b09      	cmp	r3, #9
 800b0f8:	d802      	bhi.n	800b100 <__hexdig_fun+0xe>
 800b0fa:	3820      	subs	r0, #32
 800b0fc:	b2c0      	uxtb	r0, r0
 800b0fe:	4770      	bx	lr
 800b100:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b104:	2b05      	cmp	r3, #5
 800b106:	d801      	bhi.n	800b10c <__hexdig_fun+0x1a>
 800b108:	3847      	subs	r0, #71	; 0x47
 800b10a:	e7f7      	b.n	800b0fc <__hexdig_fun+0xa>
 800b10c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b110:	2b05      	cmp	r3, #5
 800b112:	d801      	bhi.n	800b118 <__hexdig_fun+0x26>
 800b114:	3827      	subs	r0, #39	; 0x27
 800b116:	e7f1      	b.n	800b0fc <__hexdig_fun+0xa>
 800b118:	2000      	movs	r0, #0
 800b11a:	4770      	bx	lr

0800b11c <__gethex>:
 800b11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b120:	4681      	mov	r9, r0
 800b122:	468a      	mov	sl, r1
 800b124:	4617      	mov	r7, r2
 800b126:	680a      	ldr	r2, [r1, #0]
 800b128:	b085      	sub	sp, #20
 800b12a:	f102 0b02 	add.w	fp, r2, #2
 800b12e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b132:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b136:	9302      	str	r3, [sp, #8]
 800b138:	32fe      	adds	r2, #254	; 0xfe
 800b13a:	eb02 030b 	add.w	r3, r2, fp
 800b13e:	46d8      	mov	r8, fp
 800b140:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	2830      	cmp	r0, #48	; 0x30
 800b148:	d0f7      	beq.n	800b13a <__gethex+0x1e>
 800b14a:	f7ff ffd2 	bl	800b0f2 <__hexdig_fun>
 800b14e:	4604      	mov	r4, r0
 800b150:	2800      	cmp	r0, #0
 800b152:	d138      	bne.n	800b1c6 <__gethex+0xaa>
 800b154:	2201      	movs	r2, #1
 800b156:	4640      	mov	r0, r8
 800b158:	49a7      	ldr	r1, [pc, #668]	; (800b3f8 <__gethex+0x2dc>)
 800b15a:	f7ff fefa 	bl	800af52 <strncmp>
 800b15e:	4606      	mov	r6, r0
 800b160:	2800      	cmp	r0, #0
 800b162:	d169      	bne.n	800b238 <__gethex+0x11c>
 800b164:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b168:	465d      	mov	r5, fp
 800b16a:	f7ff ffc2 	bl	800b0f2 <__hexdig_fun>
 800b16e:	2800      	cmp	r0, #0
 800b170:	d064      	beq.n	800b23c <__gethex+0x120>
 800b172:	465a      	mov	r2, fp
 800b174:	7810      	ldrb	r0, [r2, #0]
 800b176:	4690      	mov	r8, r2
 800b178:	2830      	cmp	r0, #48	; 0x30
 800b17a:	f102 0201 	add.w	r2, r2, #1
 800b17e:	d0f9      	beq.n	800b174 <__gethex+0x58>
 800b180:	f7ff ffb7 	bl	800b0f2 <__hexdig_fun>
 800b184:	2301      	movs	r3, #1
 800b186:	fab0 f480 	clz	r4, r0
 800b18a:	465e      	mov	r6, fp
 800b18c:	0964      	lsrs	r4, r4, #5
 800b18e:	9301      	str	r3, [sp, #4]
 800b190:	4642      	mov	r2, r8
 800b192:	4615      	mov	r5, r2
 800b194:	7828      	ldrb	r0, [r5, #0]
 800b196:	3201      	adds	r2, #1
 800b198:	f7ff ffab 	bl	800b0f2 <__hexdig_fun>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d1f8      	bne.n	800b192 <__gethex+0x76>
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	4994      	ldr	r1, [pc, #592]	; (800b3f8 <__gethex+0x2dc>)
 800b1a6:	f7ff fed4 	bl	800af52 <strncmp>
 800b1aa:	b978      	cbnz	r0, 800b1cc <__gethex+0xb0>
 800b1ac:	b946      	cbnz	r6, 800b1c0 <__gethex+0xa4>
 800b1ae:	1c6e      	adds	r6, r5, #1
 800b1b0:	4632      	mov	r2, r6
 800b1b2:	4615      	mov	r5, r2
 800b1b4:	7828      	ldrb	r0, [r5, #0]
 800b1b6:	3201      	adds	r2, #1
 800b1b8:	f7ff ff9b 	bl	800b0f2 <__hexdig_fun>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d1f8      	bne.n	800b1b2 <__gethex+0x96>
 800b1c0:	1b73      	subs	r3, r6, r5
 800b1c2:	009e      	lsls	r6, r3, #2
 800b1c4:	e004      	b.n	800b1d0 <__gethex+0xb4>
 800b1c6:	2400      	movs	r4, #0
 800b1c8:	4626      	mov	r6, r4
 800b1ca:	e7e1      	b.n	800b190 <__gethex+0x74>
 800b1cc:	2e00      	cmp	r6, #0
 800b1ce:	d1f7      	bne.n	800b1c0 <__gethex+0xa4>
 800b1d0:	782b      	ldrb	r3, [r5, #0]
 800b1d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1d6:	2b50      	cmp	r3, #80	; 0x50
 800b1d8:	d13d      	bne.n	800b256 <__gethex+0x13a>
 800b1da:	786b      	ldrb	r3, [r5, #1]
 800b1dc:	2b2b      	cmp	r3, #43	; 0x2b
 800b1de:	d02f      	beq.n	800b240 <__gethex+0x124>
 800b1e0:	2b2d      	cmp	r3, #45	; 0x2d
 800b1e2:	d031      	beq.n	800b248 <__gethex+0x12c>
 800b1e4:	f04f 0b00 	mov.w	fp, #0
 800b1e8:	1c69      	adds	r1, r5, #1
 800b1ea:	7808      	ldrb	r0, [r1, #0]
 800b1ec:	f7ff ff81 	bl	800b0f2 <__hexdig_fun>
 800b1f0:	1e42      	subs	r2, r0, #1
 800b1f2:	b2d2      	uxtb	r2, r2
 800b1f4:	2a18      	cmp	r2, #24
 800b1f6:	d82e      	bhi.n	800b256 <__gethex+0x13a>
 800b1f8:	f1a0 0210 	sub.w	r2, r0, #16
 800b1fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b200:	f7ff ff77 	bl	800b0f2 <__hexdig_fun>
 800b204:	f100 3cff 	add.w	ip, r0, #4294967295
 800b208:	fa5f fc8c 	uxtb.w	ip, ip
 800b20c:	f1bc 0f18 	cmp.w	ip, #24
 800b210:	d91d      	bls.n	800b24e <__gethex+0x132>
 800b212:	f1bb 0f00 	cmp.w	fp, #0
 800b216:	d000      	beq.n	800b21a <__gethex+0xfe>
 800b218:	4252      	negs	r2, r2
 800b21a:	4416      	add	r6, r2
 800b21c:	f8ca 1000 	str.w	r1, [sl]
 800b220:	b1dc      	cbz	r4, 800b25a <__gethex+0x13e>
 800b222:	9b01      	ldr	r3, [sp, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	bf14      	ite	ne
 800b228:	f04f 0800 	movne.w	r8, #0
 800b22c:	f04f 0806 	moveq.w	r8, #6
 800b230:	4640      	mov	r0, r8
 800b232:	b005      	add	sp, #20
 800b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b238:	4645      	mov	r5, r8
 800b23a:	4626      	mov	r6, r4
 800b23c:	2401      	movs	r4, #1
 800b23e:	e7c7      	b.n	800b1d0 <__gethex+0xb4>
 800b240:	f04f 0b00 	mov.w	fp, #0
 800b244:	1ca9      	adds	r1, r5, #2
 800b246:	e7d0      	b.n	800b1ea <__gethex+0xce>
 800b248:	f04f 0b01 	mov.w	fp, #1
 800b24c:	e7fa      	b.n	800b244 <__gethex+0x128>
 800b24e:	230a      	movs	r3, #10
 800b250:	fb03 0002 	mla	r0, r3, r2, r0
 800b254:	e7d0      	b.n	800b1f8 <__gethex+0xdc>
 800b256:	4629      	mov	r1, r5
 800b258:	e7e0      	b.n	800b21c <__gethex+0x100>
 800b25a:	4621      	mov	r1, r4
 800b25c:	eba5 0308 	sub.w	r3, r5, r8
 800b260:	3b01      	subs	r3, #1
 800b262:	2b07      	cmp	r3, #7
 800b264:	dc0a      	bgt.n	800b27c <__gethex+0x160>
 800b266:	4648      	mov	r0, r9
 800b268:	f7fd ff7a 	bl	8009160 <_Balloc>
 800b26c:	4604      	mov	r4, r0
 800b26e:	b940      	cbnz	r0, 800b282 <__gethex+0x166>
 800b270:	4602      	mov	r2, r0
 800b272:	21e4      	movs	r1, #228	; 0xe4
 800b274:	4b61      	ldr	r3, [pc, #388]	; (800b3fc <__gethex+0x2e0>)
 800b276:	4862      	ldr	r0, [pc, #392]	; (800b400 <__gethex+0x2e4>)
 800b278:	f7ff feb6 	bl	800afe8 <__assert_func>
 800b27c:	3101      	adds	r1, #1
 800b27e:	105b      	asrs	r3, r3, #1
 800b280:	e7ef      	b.n	800b262 <__gethex+0x146>
 800b282:	2300      	movs	r3, #0
 800b284:	469b      	mov	fp, r3
 800b286:	f100 0a14 	add.w	sl, r0, #20
 800b28a:	f8cd a004 	str.w	sl, [sp, #4]
 800b28e:	45a8      	cmp	r8, r5
 800b290:	d344      	bcc.n	800b31c <__gethex+0x200>
 800b292:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b296:	4658      	mov	r0, fp
 800b298:	f848 bb04 	str.w	fp, [r8], #4
 800b29c:	eba8 080a 	sub.w	r8, r8, sl
 800b2a0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800b2a4:	6122      	str	r2, [r4, #16]
 800b2a6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800b2aa:	f7fe f84b 	bl	8009344 <__hi0bits>
 800b2ae:	683d      	ldr	r5, [r7, #0]
 800b2b0:	eba8 0800 	sub.w	r8, r8, r0
 800b2b4:	45a8      	cmp	r8, r5
 800b2b6:	dd59      	ble.n	800b36c <__gethex+0x250>
 800b2b8:	eba8 0805 	sub.w	r8, r8, r5
 800b2bc:	4641      	mov	r1, r8
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f7fe fbc9 	bl	8009a56 <__any_on>
 800b2c4:	4683      	mov	fp, r0
 800b2c6:	b1b8      	cbz	r0, 800b2f8 <__gethex+0x1dc>
 800b2c8:	f04f 0b01 	mov.w	fp, #1
 800b2cc:	f108 33ff 	add.w	r3, r8, #4294967295
 800b2d0:	1159      	asrs	r1, r3, #5
 800b2d2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b2d6:	f003 021f 	and.w	r2, r3, #31
 800b2da:	fa0b f202 	lsl.w	r2, fp, r2
 800b2de:	420a      	tst	r2, r1
 800b2e0:	d00a      	beq.n	800b2f8 <__gethex+0x1dc>
 800b2e2:	455b      	cmp	r3, fp
 800b2e4:	dd06      	ble.n	800b2f4 <__gethex+0x1d8>
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f1a8 0102 	sub.w	r1, r8, #2
 800b2ec:	f7fe fbb3 	bl	8009a56 <__any_on>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d138      	bne.n	800b366 <__gethex+0x24a>
 800b2f4:	f04f 0b02 	mov.w	fp, #2
 800b2f8:	4641      	mov	r1, r8
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f7ff fea6 	bl	800b04c <rshift>
 800b300:	4446      	add	r6, r8
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	42b3      	cmp	r3, r6
 800b306:	da41      	bge.n	800b38c <__gethex+0x270>
 800b308:	4621      	mov	r1, r4
 800b30a:	4648      	mov	r0, r9
 800b30c:	f7fd ff68 	bl	80091e0 <_Bfree>
 800b310:	2300      	movs	r3, #0
 800b312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b314:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b318:	6013      	str	r3, [r2, #0]
 800b31a:	e789      	b.n	800b230 <__gethex+0x114>
 800b31c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b320:	2a2e      	cmp	r2, #46	; 0x2e
 800b322:	d014      	beq.n	800b34e <__gethex+0x232>
 800b324:	2b20      	cmp	r3, #32
 800b326:	d106      	bne.n	800b336 <__gethex+0x21a>
 800b328:	9b01      	ldr	r3, [sp, #4]
 800b32a:	f843 bb04 	str.w	fp, [r3], #4
 800b32e:	f04f 0b00 	mov.w	fp, #0
 800b332:	9301      	str	r3, [sp, #4]
 800b334:	465b      	mov	r3, fp
 800b336:	7828      	ldrb	r0, [r5, #0]
 800b338:	9303      	str	r3, [sp, #12]
 800b33a:	f7ff feda 	bl	800b0f2 <__hexdig_fun>
 800b33e:	9b03      	ldr	r3, [sp, #12]
 800b340:	f000 000f 	and.w	r0, r0, #15
 800b344:	4098      	lsls	r0, r3
 800b346:	ea4b 0b00 	orr.w	fp, fp, r0
 800b34a:	3304      	adds	r3, #4
 800b34c:	e79f      	b.n	800b28e <__gethex+0x172>
 800b34e:	45a8      	cmp	r8, r5
 800b350:	d8e8      	bhi.n	800b324 <__gethex+0x208>
 800b352:	2201      	movs	r2, #1
 800b354:	4628      	mov	r0, r5
 800b356:	4928      	ldr	r1, [pc, #160]	; (800b3f8 <__gethex+0x2dc>)
 800b358:	9303      	str	r3, [sp, #12]
 800b35a:	f7ff fdfa 	bl	800af52 <strncmp>
 800b35e:	9b03      	ldr	r3, [sp, #12]
 800b360:	2800      	cmp	r0, #0
 800b362:	d1df      	bne.n	800b324 <__gethex+0x208>
 800b364:	e793      	b.n	800b28e <__gethex+0x172>
 800b366:	f04f 0b03 	mov.w	fp, #3
 800b36a:	e7c5      	b.n	800b2f8 <__gethex+0x1dc>
 800b36c:	da0b      	bge.n	800b386 <__gethex+0x26a>
 800b36e:	eba5 0808 	sub.w	r8, r5, r8
 800b372:	4621      	mov	r1, r4
 800b374:	4642      	mov	r2, r8
 800b376:	4648      	mov	r0, r9
 800b378:	f7fe f94a 	bl	8009610 <__lshift>
 800b37c:	4604      	mov	r4, r0
 800b37e:	eba6 0608 	sub.w	r6, r6, r8
 800b382:	f100 0a14 	add.w	sl, r0, #20
 800b386:	f04f 0b00 	mov.w	fp, #0
 800b38a:	e7ba      	b.n	800b302 <__gethex+0x1e6>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	42b3      	cmp	r3, r6
 800b390:	dd74      	ble.n	800b47c <__gethex+0x360>
 800b392:	1b9e      	subs	r6, r3, r6
 800b394:	42b5      	cmp	r5, r6
 800b396:	dc35      	bgt.n	800b404 <__gethex+0x2e8>
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d023      	beq.n	800b3e6 <__gethex+0x2ca>
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d025      	beq.n	800b3ee <__gethex+0x2d2>
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d115      	bne.n	800b3d2 <__gethex+0x2b6>
 800b3a6:	42b5      	cmp	r5, r6
 800b3a8:	d113      	bne.n	800b3d2 <__gethex+0x2b6>
 800b3aa:	2d01      	cmp	r5, #1
 800b3ac:	d10b      	bne.n	800b3c6 <__gethex+0x2aa>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	9a02      	ldr	r2, [sp, #8]
 800b3b2:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b3b6:	6013      	str	r3, [r2, #0]
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	6123      	str	r3, [r4, #16]
 800b3bc:	f8ca 3000 	str.w	r3, [sl]
 800b3c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3c2:	601c      	str	r4, [r3, #0]
 800b3c4:	e734      	b.n	800b230 <__gethex+0x114>
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	1e69      	subs	r1, r5, #1
 800b3ca:	f7fe fb44 	bl	8009a56 <__any_on>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d1ed      	bne.n	800b3ae <__gethex+0x292>
 800b3d2:	4621      	mov	r1, r4
 800b3d4:	4648      	mov	r0, r9
 800b3d6:	f7fd ff03 	bl	80091e0 <_Bfree>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3de:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b3e2:	6013      	str	r3, [r2, #0]
 800b3e4:	e724      	b.n	800b230 <__gethex+0x114>
 800b3e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1f2      	bne.n	800b3d2 <__gethex+0x2b6>
 800b3ec:	e7df      	b.n	800b3ae <__gethex+0x292>
 800b3ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1dc      	bne.n	800b3ae <__gethex+0x292>
 800b3f4:	e7ed      	b.n	800b3d2 <__gethex+0x2b6>
 800b3f6:	bf00      	nop
 800b3f8:	0800d45c 	.word	0x0800d45c
 800b3fc:	0800d2ef 	.word	0x0800d2ef
 800b400:	0800d606 	.word	0x0800d606
 800b404:	f106 38ff 	add.w	r8, r6, #4294967295
 800b408:	f1bb 0f00 	cmp.w	fp, #0
 800b40c:	d133      	bne.n	800b476 <__gethex+0x35a>
 800b40e:	f1b8 0f00 	cmp.w	r8, #0
 800b412:	d004      	beq.n	800b41e <__gethex+0x302>
 800b414:	4641      	mov	r1, r8
 800b416:	4620      	mov	r0, r4
 800b418:	f7fe fb1d 	bl	8009a56 <__any_on>
 800b41c:	4683      	mov	fp, r0
 800b41e:	2301      	movs	r3, #1
 800b420:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b424:	f008 081f 	and.w	r8, r8, #31
 800b428:	fa03 f308 	lsl.w	r3, r3, r8
 800b42c:	f04f 0802 	mov.w	r8, #2
 800b430:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b434:	4631      	mov	r1, r6
 800b436:	4213      	tst	r3, r2
 800b438:	4620      	mov	r0, r4
 800b43a:	bf18      	it	ne
 800b43c:	f04b 0b02 	orrne.w	fp, fp, #2
 800b440:	1bad      	subs	r5, r5, r6
 800b442:	f7ff fe03 	bl	800b04c <rshift>
 800b446:	687e      	ldr	r6, [r7, #4]
 800b448:	f1bb 0f00 	cmp.w	fp, #0
 800b44c:	d04a      	beq.n	800b4e4 <__gethex+0x3c8>
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b02      	cmp	r3, #2
 800b452:	d016      	beq.n	800b482 <__gethex+0x366>
 800b454:	2b03      	cmp	r3, #3
 800b456:	d018      	beq.n	800b48a <__gethex+0x36e>
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d109      	bne.n	800b470 <__gethex+0x354>
 800b45c:	f01b 0f02 	tst.w	fp, #2
 800b460:	d006      	beq.n	800b470 <__gethex+0x354>
 800b462:	f8da 3000 	ldr.w	r3, [sl]
 800b466:	ea4b 0b03 	orr.w	fp, fp, r3
 800b46a:	f01b 0f01 	tst.w	fp, #1
 800b46e:	d10f      	bne.n	800b490 <__gethex+0x374>
 800b470:	f048 0810 	orr.w	r8, r8, #16
 800b474:	e036      	b.n	800b4e4 <__gethex+0x3c8>
 800b476:	f04f 0b01 	mov.w	fp, #1
 800b47a:	e7d0      	b.n	800b41e <__gethex+0x302>
 800b47c:	f04f 0801 	mov.w	r8, #1
 800b480:	e7e2      	b.n	800b448 <__gethex+0x32c>
 800b482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b484:	f1c3 0301 	rsb	r3, r3, #1
 800b488:	930f      	str	r3, [sp, #60]	; 0x3c
 800b48a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0ef      	beq.n	800b470 <__gethex+0x354>
 800b490:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b494:	f104 0214 	add.w	r2, r4, #20
 800b498:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b4a4:	4694      	mov	ip, r2
 800b4a6:	f852 1b04 	ldr.w	r1, [r2], #4
 800b4aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b4ae:	d01e      	beq.n	800b4ee <__gethex+0x3d2>
 800b4b0:	3101      	adds	r1, #1
 800b4b2:	f8cc 1000 	str.w	r1, [ip]
 800b4b6:	f1b8 0f02 	cmp.w	r8, #2
 800b4ba:	f104 0214 	add.w	r2, r4, #20
 800b4be:	d13d      	bne.n	800b53c <__gethex+0x420>
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	42ab      	cmp	r3, r5
 800b4c6:	d10b      	bne.n	800b4e0 <__gethex+0x3c4>
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	1169      	asrs	r1, r5, #5
 800b4cc:	f005 051f 	and.w	r5, r5, #31
 800b4d0:	fa03 f505 	lsl.w	r5, r3, r5
 800b4d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4d8:	421d      	tst	r5, r3
 800b4da:	bf18      	it	ne
 800b4dc:	f04f 0801 	movne.w	r8, #1
 800b4e0:	f048 0820 	orr.w	r8, r8, #32
 800b4e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4e6:	601c      	str	r4, [r3, #0]
 800b4e8:	9b02      	ldr	r3, [sp, #8]
 800b4ea:	601e      	str	r6, [r3, #0]
 800b4ec:	e6a0      	b.n	800b230 <__gethex+0x114>
 800b4ee:	4290      	cmp	r0, r2
 800b4f0:	f842 3c04 	str.w	r3, [r2, #-4]
 800b4f4:	d8d6      	bhi.n	800b4a4 <__gethex+0x388>
 800b4f6:	68a2      	ldr	r2, [r4, #8]
 800b4f8:	4593      	cmp	fp, r2
 800b4fa:	db17      	blt.n	800b52c <__gethex+0x410>
 800b4fc:	6861      	ldr	r1, [r4, #4]
 800b4fe:	4648      	mov	r0, r9
 800b500:	3101      	adds	r1, #1
 800b502:	f7fd fe2d 	bl	8009160 <_Balloc>
 800b506:	4682      	mov	sl, r0
 800b508:	b918      	cbnz	r0, 800b512 <__gethex+0x3f6>
 800b50a:	4602      	mov	r2, r0
 800b50c:	2184      	movs	r1, #132	; 0x84
 800b50e:	4b1a      	ldr	r3, [pc, #104]	; (800b578 <__gethex+0x45c>)
 800b510:	e6b1      	b.n	800b276 <__gethex+0x15a>
 800b512:	6922      	ldr	r2, [r4, #16]
 800b514:	f104 010c 	add.w	r1, r4, #12
 800b518:	3202      	adds	r2, #2
 800b51a:	0092      	lsls	r2, r2, #2
 800b51c:	300c      	adds	r0, #12
 800b51e:	f7fc fea2 	bl	8008266 <memcpy>
 800b522:	4621      	mov	r1, r4
 800b524:	4648      	mov	r0, r9
 800b526:	f7fd fe5b 	bl	80091e0 <_Bfree>
 800b52a:	4654      	mov	r4, sl
 800b52c:	6922      	ldr	r2, [r4, #16]
 800b52e:	1c51      	adds	r1, r2, #1
 800b530:	6121      	str	r1, [r4, #16]
 800b532:	2101      	movs	r1, #1
 800b534:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b538:	6151      	str	r1, [r2, #20]
 800b53a:	e7bc      	b.n	800b4b6 <__gethex+0x39a>
 800b53c:	6921      	ldr	r1, [r4, #16]
 800b53e:	4559      	cmp	r1, fp
 800b540:	dd0b      	ble.n	800b55a <__gethex+0x43e>
 800b542:	2101      	movs	r1, #1
 800b544:	4620      	mov	r0, r4
 800b546:	f7ff fd81 	bl	800b04c <rshift>
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	3601      	adds	r6, #1
 800b54e:	42b3      	cmp	r3, r6
 800b550:	f6ff aeda 	blt.w	800b308 <__gethex+0x1ec>
 800b554:	f04f 0801 	mov.w	r8, #1
 800b558:	e7c2      	b.n	800b4e0 <__gethex+0x3c4>
 800b55a:	f015 051f 	ands.w	r5, r5, #31
 800b55e:	d0f9      	beq.n	800b554 <__gethex+0x438>
 800b560:	9b01      	ldr	r3, [sp, #4]
 800b562:	f1c5 0520 	rsb	r5, r5, #32
 800b566:	441a      	add	r2, r3
 800b568:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b56c:	f7fd feea 	bl	8009344 <__hi0bits>
 800b570:	42a8      	cmp	r0, r5
 800b572:	dbe6      	blt.n	800b542 <__gethex+0x426>
 800b574:	e7ee      	b.n	800b554 <__gethex+0x438>
 800b576:	bf00      	nop
 800b578:	0800d2ef 	.word	0x0800d2ef

0800b57c <L_shift>:
 800b57c:	f1c2 0208 	rsb	r2, r2, #8
 800b580:	0092      	lsls	r2, r2, #2
 800b582:	b570      	push	{r4, r5, r6, lr}
 800b584:	f1c2 0620 	rsb	r6, r2, #32
 800b588:	6843      	ldr	r3, [r0, #4]
 800b58a:	6804      	ldr	r4, [r0, #0]
 800b58c:	fa03 f506 	lsl.w	r5, r3, r6
 800b590:	432c      	orrs	r4, r5
 800b592:	40d3      	lsrs	r3, r2
 800b594:	6004      	str	r4, [r0, #0]
 800b596:	f840 3f04 	str.w	r3, [r0, #4]!
 800b59a:	4288      	cmp	r0, r1
 800b59c:	d3f4      	bcc.n	800b588 <L_shift+0xc>
 800b59e:	bd70      	pop	{r4, r5, r6, pc}

0800b5a0 <__match>:
 800b5a0:	b530      	push	{r4, r5, lr}
 800b5a2:	6803      	ldr	r3, [r0, #0]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5aa:	b914      	cbnz	r4, 800b5b2 <__match+0x12>
 800b5ac:	6003      	str	r3, [r0, #0]
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	bd30      	pop	{r4, r5, pc}
 800b5b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b5ba:	2d19      	cmp	r5, #25
 800b5bc:	bf98      	it	ls
 800b5be:	3220      	addls	r2, #32
 800b5c0:	42a2      	cmp	r2, r4
 800b5c2:	d0f0      	beq.n	800b5a6 <__match+0x6>
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	e7f3      	b.n	800b5b0 <__match+0x10>

0800b5c8 <__hexnan>:
 800b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	2500      	movs	r5, #0
 800b5ce:	680b      	ldr	r3, [r1, #0]
 800b5d0:	4682      	mov	sl, r0
 800b5d2:	115e      	asrs	r6, r3, #5
 800b5d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5d8:	f013 031f 	ands.w	r3, r3, #31
 800b5dc:	bf18      	it	ne
 800b5de:	3604      	addne	r6, #4
 800b5e0:	1f37      	subs	r7, r6, #4
 800b5e2:	4690      	mov	r8, r2
 800b5e4:	46b9      	mov	r9, r7
 800b5e6:	463c      	mov	r4, r7
 800b5e8:	46ab      	mov	fp, r5
 800b5ea:	b087      	sub	sp, #28
 800b5ec:	6801      	ldr	r1, [r0, #0]
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5f4:	9502      	str	r5, [sp, #8]
 800b5f6:	784a      	ldrb	r2, [r1, #1]
 800b5f8:	1c4b      	adds	r3, r1, #1
 800b5fa:	9303      	str	r3, [sp, #12]
 800b5fc:	b342      	cbz	r2, 800b650 <__hexnan+0x88>
 800b5fe:	4610      	mov	r0, r2
 800b600:	9105      	str	r1, [sp, #20]
 800b602:	9204      	str	r2, [sp, #16]
 800b604:	f7ff fd75 	bl	800b0f2 <__hexdig_fun>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d14f      	bne.n	800b6ac <__hexnan+0xe4>
 800b60c:	9a04      	ldr	r2, [sp, #16]
 800b60e:	9905      	ldr	r1, [sp, #20]
 800b610:	2a20      	cmp	r2, #32
 800b612:	d818      	bhi.n	800b646 <__hexnan+0x7e>
 800b614:	9b02      	ldr	r3, [sp, #8]
 800b616:	459b      	cmp	fp, r3
 800b618:	dd13      	ble.n	800b642 <__hexnan+0x7a>
 800b61a:	454c      	cmp	r4, r9
 800b61c:	d206      	bcs.n	800b62c <__hexnan+0x64>
 800b61e:	2d07      	cmp	r5, #7
 800b620:	dc04      	bgt.n	800b62c <__hexnan+0x64>
 800b622:	462a      	mov	r2, r5
 800b624:	4649      	mov	r1, r9
 800b626:	4620      	mov	r0, r4
 800b628:	f7ff ffa8 	bl	800b57c <L_shift>
 800b62c:	4544      	cmp	r4, r8
 800b62e:	d950      	bls.n	800b6d2 <__hexnan+0x10a>
 800b630:	2300      	movs	r3, #0
 800b632:	f1a4 0904 	sub.w	r9, r4, #4
 800b636:	f844 3c04 	str.w	r3, [r4, #-4]
 800b63a:	461d      	mov	r5, r3
 800b63c:	464c      	mov	r4, r9
 800b63e:	f8cd b008 	str.w	fp, [sp, #8]
 800b642:	9903      	ldr	r1, [sp, #12]
 800b644:	e7d7      	b.n	800b5f6 <__hexnan+0x2e>
 800b646:	2a29      	cmp	r2, #41	; 0x29
 800b648:	d155      	bne.n	800b6f6 <__hexnan+0x12e>
 800b64a:	3102      	adds	r1, #2
 800b64c:	f8ca 1000 	str.w	r1, [sl]
 800b650:	f1bb 0f00 	cmp.w	fp, #0
 800b654:	d04f      	beq.n	800b6f6 <__hexnan+0x12e>
 800b656:	454c      	cmp	r4, r9
 800b658:	d206      	bcs.n	800b668 <__hexnan+0xa0>
 800b65a:	2d07      	cmp	r5, #7
 800b65c:	dc04      	bgt.n	800b668 <__hexnan+0xa0>
 800b65e:	462a      	mov	r2, r5
 800b660:	4649      	mov	r1, r9
 800b662:	4620      	mov	r0, r4
 800b664:	f7ff ff8a 	bl	800b57c <L_shift>
 800b668:	4544      	cmp	r4, r8
 800b66a:	d934      	bls.n	800b6d6 <__hexnan+0x10e>
 800b66c:	4623      	mov	r3, r4
 800b66e:	f1a8 0204 	sub.w	r2, r8, #4
 800b672:	f853 1b04 	ldr.w	r1, [r3], #4
 800b676:	429f      	cmp	r7, r3
 800b678:	f842 1f04 	str.w	r1, [r2, #4]!
 800b67c:	d2f9      	bcs.n	800b672 <__hexnan+0xaa>
 800b67e:	1b3b      	subs	r3, r7, r4
 800b680:	f023 0303 	bic.w	r3, r3, #3
 800b684:	3304      	adds	r3, #4
 800b686:	3e03      	subs	r6, #3
 800b688:	3401      	adds	r4, #1
 800b68a:	42a6      	cmp	r6, r4
 800b68c:	bf38      	it	cc
 800b68e:	2304      	movcc	r3, #4
 800b690:	2200      	movs	r2, #0
 800b692:	4443      	add	r3, r8
 800b694:	f843 2b04 	str.w	r2, [r3], #4
 800b698:	429f      	cmp	r7, r3
 800b69a:	d2fb      	bcs.n	800b694 <__hexnan+0xcc>
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	b91b      	cbnz	r3, 800b6a8 <__hexnan+0xe0>
 800b6a0:	4547      	cmp	r7, r8
 800b6a2:	d126      	bne.n	800b6f2 <__hexnan+0x12a>
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	603b      	str	r3, [r7, #0]
 800b6a8:	2005      	movs	r0, #5
 800b6aa:	e025      	b.n	800b6f8 <__hexnan+0x130>
 800b6ac:	3501      	adds	r5, #1
 800b6ae:	2d08      	cmp	r5, #8
 800b6b0:	f10b 0b01 	add.w	fp, fp, #1
 800b6b4:	dd06      	ble.n	800b6c4 <__hexnan+0xfc>
 800b6b6:	4544      	cmp	r4, r8
 800b6b8:	d9c3      	bls.n	800b642 <__hexnan+0x7a>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	2501      	movs	r5, #1
 800b6be:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6c2:	3c04      	subs	r4, #4
 800b6c4:	6822      	ldr	r2, [r4, #0]
 800b6c6:	f000 000f 	and.w	r0, r0, #15
 800b6ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b6ce:	6020      	str	r0, [r4, #0]
 800b6d0:	e7b7      	b.n	800b642 <__hexnan+0x7a>
 800b6d2:	2508      	movs	r5, #8
 800b6d4:	e7b5      	b.n	800b642 <__hexnan+0x7a>
 800b6d6:	9b01      	ldr	r3, [sp, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d0df      	beq.n	800b69c <__hexnan+0xd4>
 800b6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e0:	f1c3 0320 	rsb	r3, r3, #32
 800b6e4:	40da      	lsrs	r2, r3
 800b6e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	f846 3c04 	str.w	r3, [r6, #-4]
 800b6f0:	e7d4      	b.n	800b69c <__hexnan+0xd4>
 800b6f2:	3f04      	subs	r7, #4
 800b6f4:	e7d2      	b.n	800b69c <__hexnan+0xd4>
 800b6f6:	2004      	movs	r0, #4
 800b6f8:	b007      	add	sp, #28
 800b6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6fe <__ascii_mbtowc>:
 800b6fe:	b082      	sub	sp, #8
 800b700:	b901      	cbnz	r1, 800b704 <__ascii_mbtowc+0x6>
 800b702:	a901      	add	r1, sp, #4
 800b704:	b142      	cbz	r2, 800b718 <__ascii_mbtowc+0x1a>
 800b706:	b14b      	cbz	r3, 800b71c <__ascii_mbtowc+0x1e>
 800b708:	7813      	ldrb	r3, [r2, #0]
 800b70a:	600b      	str	r3, [r1, #0]
 800b70c:	7812      	ldrb	r2, [r2, #0]
 800b70e:	1e10      	subs	r0, r2, #0
 800b710:	bf18      	it	ne
 800b712:	2001      	movne	r0, #1
 800b714:	b002      	add	sp, #8
 800b716:	4770      	bx	lr
 800b718:	4610      	mov	r0, r2
 800b71a:	e7fb      	b.n	800b714 <__ascii_mbtowc+0x16>
 800b71c:	f06f 0001 	mvn.w	r0, #1
 800b720:	e7f8      	b.n	800b714 <__ascii_mbtowc+0x16>

0800b722 <_realloc_r>:
 800b722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b726:	4680      	mov	r8, r0
 800b728:	4614      	mov	r4, r2
 800b72a:	460e      	mov	r6, r1
 800b72c:	b921      	cbnz	r1, 800b738 <_realloc_r+0x16>
 800b72e:	4611      	mov	r1, r2
 800b730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b734:	f7fd bc88 	b.w	8009048 <_malloc_r>
 800b738:	b92a      	cbnz	r2, 800b746 <_realloc_r+0x24>
 800b73a:	f7fd fc15 	bl	8008f68 <_free_r>
 800b73e:	4625      	mov	r5, r4
 800b740:	4628      	mov	r0, r5
 800b742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b746:	f000 f842 	bl	800b7ce <_malloc_usable_size_r>
 800b74a:	4284      	cmp	r4, r0
 800b74c:	4607      	mov	r7, r0
 800b74e:	d802      	bhi.n	800b756 <_realloc_r+0x34>
 800b750:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b754:	d812      	bhi.n	800b77c <_realloc_r+0x5a>
 800b756:	4621      	mov	r1, r4
 800b758:	4640      	mov	r0, r8
 800b75a:	f7fd fc75 	bl	8009048 <_malloc_r>
 800b75e:	4605      	mov	r5, r0
 800b760:	2800      	cmp	r0, #0
 800b762:	d0ed      	beq.n	800b740 <_realloc_r+0x1e>
 800b764:	42bc      	cmp	r4, r7
 800b766:	4622      	mov	r2, r4
 800b768:	4631      	mov	r1, r6
 800b76a:	bf28      	it	cs
 800b76c:	463a      	movcs	r2, r7
 800b76e:	f7fc fd7a 	bl	8008266 <memcpy>
 800b772:	4631      	mov	r1, r6
 800b774:	4640      	mov	r0, r8
 800b776:	f7fd fbf7 	bl	8008f68 <_free_r>
 800b77a:	e7e1      	b.n	800b740 <_realloc_r+0x1e>
 800b77c:	4635      	mov	r5, r6
 800b77e:	e7df      	b.n	800b740 <_realloc_r+0x1e>

0800b780 <__ascii_wctomb>:
 800b780:	4603      	mov	r3, r0
 800b782:	4608      	mov	r0, r1
 800b784:	b141      	cbz	r1, 800b798 <__ascii_wctomb+0x18>
 800b786:	2aff      	cmp	r2, #255	; 0xff
 800b788:	d904      	bls.n	800b794 <__ascii_wctomb+0x14>
 800b78a:	228a      	movs	r2, #138	; 0x8a
 800b78c:	f04f 30ff 	mov.w	r0, #4294967295
 800b790:	601a      	str	r2, [r3, #0]
 800b792:	4770      	bx	lr
 800b794:	2001      	movs	r0, #1
 800b796:	700a      	strb	r2, [r1, #0]
 800b798:	4770      	bx	lr
	...

0800b79c <fiprintf>:
 800b79c:	b40e      	push	{r1, r2, r3}
 800b79e:	b503      	push	{r0, r1, lr}
 800b7a0:	4601      	mov	r1, r0
 800b7a2:	ab03      	add	r3, sp, #12
 800b7a4:	4805      	ldr	r0, [pc, #20]	; (800b7bc <fiprintf+0x20>)
 800b7a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7aa:	6800      	ldr	r0, [r0, #0]
 800b7ac:	9301      	str	r3, [sp, #4]
 800b7ae:	f7ff f991 	bl	800aad4 <_vfiprintf_r>
 800b7b2:	b002      	add	sp, #8
 800b7b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7b8:	b003      	add	sp, #12
 800b7ba:	4770      	bx	lr
 800b7bc:	20000084 	.word	0x20000084

0800b7c0 <abort>:
 800b7c0:	2006      	movs	r0, #6
 800b7c2:	b508      	push	{r3, lr}
 800b7c4:	f000 f834 	bl	800b830 <raise>
 800b7c8:	2001      	movs	r0, #1
 800b7ca:	f7f8 f952 	bl	8003a72 <_exit>

0800b7ce <_malloc_usable_size_r>:
 800b7ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7d2:	1f18      	subs	r0, r3, #4
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	bfbc      	itt	lt
 800b7d8:	580b      	ldrlt	r3, [r1, r0]
 800b7da:	18c0      	addlt	r0, r0, r3
 800b7dc:	4770      	bx	lr

0800b7de <_raise_r>:
 800b7de:	291f      	cmp	r1, #31
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	460d      	mov	r5, r1
 800b7e6:	d904      	bls.n	800b7f2 <_raise_r+0x14>
 800b7e8:	2316      	movs	r3, #22
 800b7ea:	6003      	str	r3, [r0, #0]
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f0:	bd38      	pop	{r3, r4, r5, pc}
 800b7f2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b7f4:	b112      	cbz	r2, 800b7fc <_raise_r+0x1e>
 800b7f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7fa:	b94b      	cbnz	r3, 800b810 <_raise_r+0x32>
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f000 f831 	bl	800b864 <_getpid_r>
 800b802:	462a      	mov	r2, r5
 800b804:	4601      	mov	r1, r0
 800b806:	4620      	mov	r0, r4
 800b808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b80c:	f000 b818 	b.w	800b840 <_kill_r>
 800b810:	2b01      	cmp	r3, #1
 800b812:	d00a      	beq.n	800b82a <_raise_r+0x4c>
 800b814:	1c59      	adds	r1, r3, #1
 800b816:	d103      	bne.n	800b820 <_raise_r+0x42>
 800b818:	2316      	movs	r3, #22
 800b81a:	6003      	str	r3, [r0, #0]
 800b81c:	2001      	movs	r0, #1
 800b81e:	e7e7      	b.n	800b7f0 <_raise_r+0x12>
 800b820:	2400      	movs	r4, #0
 800b822:	4628      	mov	r0, r5
 800b824:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b828:	4798      	blx	r3
 800b82a:	2000      	movs	r0, #0
 800b82c:	e7e0      	b.n	800b7f0 <_raise_r+0x12>
	...

0800b830 <raise>:
 800b830:	4b02      	ldr	r3, [pc, #8]	; (800b83c <raise+0xc>)
 800b832:	4601      	mov	r1, r0
 800b834:	6818      	ldr	r0, [r3, #0]
 800b836:	f7ff bfd2 	b.w	800b7de <_raise_r>
 800b83a:	bf00      	nop
 800b83c:	20000084 	.word	0x20000084

0800b840 <_kill_r>:
 800b840:	b538      	push	{r3, r4, r5, lr}
 800b842:	2300      	movs	r3, #0
 800b844:	4d06      	ldr	r5, [pc, #24]	; (800b860 <_kill_r+0x20>)
 800b846:	4604      	mov	r4, r0
 800b848:	4608      	mov	r0, r1
 800b84a:	4611      	mov	r1, r2
 800b84c:	602b      	str	r3, [r5, #0]
 800b84e:	f7f8 f900 	bl	8003a52 <_kill>
 800b852:	1c43      	adds	r3, r0, #1
 800b854:	d102      	bne.n	800b85c <_kill_r+0x1c>
 800b856:	682b      	ldr	r3, [r5, #0]
 800b858:	b103      	cbz	r3, 800b85c <_kill_r+0x1c>
 800b85a:	6023      	str	r3, [r4, #0]
 800b85c:	bd38      	pop	{r3, r4, r5, pc}
 800b85e:	bf00      	nop
 800b860:	200018bc 	.word	0x200018bc

0800b864 <_getpid_r>:
 800b864:	f7f8 b8ee 	b.w	8003a44 <_getpid>

0800b868 <pow>:
 800b868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b86c:	4614      	mov	r4, r2
 800b86e:	461d      	mov	r5, r3
 800b870:	4680      	mov	r8, r0
 800b872:	4689      	mov	r9, r1
 800b874:	f000 f9e4 	bl	800bc40 <__ieee754_pow>
 800b878:	4622      	mov	r2, r4
 800b87a:	4606      	mov	r6, r0
 800b87c:	460f      	mov	r7, r1
 800b87e:	462b      	mov	r3, r5
 800b880:	4620      	mov	r0, r4
 800b882:	4629      	mov	r1, r5
 800b884:	f7f5 f8c2 	bl	8000a0c <__aeabi_dcmpun>
 800b888:	bbc8      	cbnz	r0, 800b8fe <pow+0x96>
 800b88a:	2200      	movs	r2, #0
 800b88c:	2300      	movs	r3, #0
 800b88e:	4640      	mov	r0, r8
 800b890:	4649      	mov	r1, r9
 800b892:	f7f5 f889 	bl	80009a8 <__aeabi_dcmpeq>
 800b896:	b1b8      	cbz	r0, 800b8c8 <pow+0x60>
 800b898:	2200      	movs	r2, #0
 800b89a:	2300      	movs	r3, #0
 800b89c:	4620      	mov	r0, r4
 800b89e:	4629      	mov	r1, r5
 800b8a0:	f7f5 f882 	bl	80009a8 <__aeabi_dcmpeq>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d141      	bne.n	800b92c <pow+0xc4>
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	f000 f868 	bl	800b980 <finite>
 800b8b0:	b328      	cbz	r0, 800b8fe <pow+0x96>
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	f7f5 f87f 	bl	80009bc <__aeabi_dcmplt>
 800b8be:	b1f0      	cbz	r0, 800b8fe <pow+0x96>
 800b8c0:	f7fc fc96 	bl	80081f0 <__errno>
 800b8c4:	2322      	movs	r3, #34	; 0x22
 800b8c6:	e019      	b.n	800b8fc <pow+0x94>
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	4639      	mov	r1, r7
 800b8cc:	f000 f858 	bl	800b980 <finite>
 800b8d0:	b9c8      	cbnz	r0, 800b906 <pow+0x9e>
 800b8d2:	4640      	mov	r0, r8
 800b8d4:	4649      	mov	r1, r9
 800b8d6:	f000 f853 	bl	800b980 <finite>
 800b8da:	b1a0      	cbz	r0, 800b906 <pow+0x9e>
 800b8dc:	4620      	mov	r0, r4
 800b8de:	4629      	mov	r1, r5
 800b8e0:	f000 f84e 	bl	800b980 <finite>
 800b8e4:	b178      	cbz	r0, 800b906 <pow+0x9e>
 800b8e6:	4632      	mov	r2, r6
 800b8e8:	463b      	mov	r3, r7
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	4639      	mov	r1, r7
 800b8ee:	f7f5 f88d 	bl	8000a0c <__aeabi_dcmpun>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d0e4      	beq.n	800b8c0 <pow+0x58>
 800b8f6:	f7fc fc7b 	bl	80081f0 <__errno>
 800b8fa:	2321      	movs	r3, #33	; 0x21
 800b8fc:	6003      	str	r3, [r0, #0]
 800b8fe:	4630      	mov	r0, r6
 800b900:	4639      	mov	r1, r7
 800b902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b906:	2200      	movs	r2, #0
 800b908:	2300      	movs	r3, #0
 800b90a:	4630      	mov	r0, r6
 800b90c:	4639      	mov	r1, r7
 800b90e:	f7f5 f84b 	bl	80009a8 <__aeabi_dcmpeq>
 800b912:	2800      	cmp	r0, #0
 800b914:	d0f3      	beq.n	800b8fe <pow+0x96>
 800b916:	4640      	mov	r0, r8
 800b918:	4649      	mov	r1, r9
 800b91a:	f000 f831 	bl	800b980 <finite>
 800b91e:	2800      	cmp	r0, #0
 800b920:	d0ed      	beq.n	800b8fe <pow+0x96>
 800b922:	4620      	mov	r0, r4
 800b924:	4629      	mov	r1, r5
 800b926:	f000 f82b 	bl	800b980 <finite>
 800b92a:	e7c8      	b.n	800b8be <pow+0x56>
 800b92c:	2600      	movs	r6, #0
 800b92e:	4f01      	ldr	r7, [pc, #4]	; (800b934 <pow+0xcc>)
 800b930:	e7e5      	b.n	800b8fe <pow+0x96>
 800b932:	bf00      	nop
 800b934:	3ff00000 	.word	0x3ff00000

0800b938 <sqrt>:
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	4606      	mov	r6, r0
 800b93c:	460f      	mov	r7, r1
 800b93e:	f000 f825 	bl	800b98c <__ieee754_sqrt>
 800b942:	4632      	mov	r2, r6
 800b944:	4604      	mov	r4, r0
 800b946:	460d      	mov	r5, r1
 800b948:	463b      	mov	r3, r7
 800b94a:	4630      	mov	r0, r6
 800b94c:	4639      	mov	r1, r7
 800b94e:	f7f5 f85d 	bl	8000a0c <__aeabi_dcmpun>
 800b952:	b990      	cbnz	r0, 800b97a <sqrt+0x42>
 800b954:	2200      	movs	r2, #0
 800b956:	2300      	movs	r3, #0
 800b958:	4630      	mov	r0, r6
 800b95a:	4639      	mov	r1, r7
 800b95c:	f7f5 f82e 	bl	80009bc <__aeabi_dcmplt>
 800b960:	b158      	cbz	r0, 800b97a <sqrt+0x42>
 800b962:	f7fc fc45 	bl	80081f0 <__errno>
 800b966:	2321      	movs	r3, #33	; 0x21
 800b968:	2200      	movs	r2, #0
 800b96a:	6003      	str	r3, [r0, #0]
 800b96c:	2300      	movs	r3, #0
 800b96e:	4610      	mov	r0, r2
 800b970:	4619      	mov	r1, r3
 800b972:	f7f4 fedb 	bl	800072c <__aeabi_ddiv>
 800b976:	4604      	mov	r4, r0
 800b978:	460d      	mov	r5, r1
 800b97a:	4620      	mov	r0, r4
 800b97c:	4629      	mov	r1, r5
 800b97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b980 <finite>:
 800b980:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b984:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b988:	0fc0      	lsrs	r0, r0, #31
 800b98a:	4770      	bx	lr

0800b98c <__ieee754_sqrt>:
 800b98c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800bb30 <__ieee754_sqrt+0x1a4>
 800b990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b994:	ea3c 0c01 	bics.w	ip, ip, r1
 800b998:	460b      	mov	r3, r1
 800b99a:	4606      	mov	r6, r0
 800b99c:	460d      	mov	r5, r1
 800b99e:	460a      	mov	r2, r1
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	d10e      	bne.n	800b9c2 <__ieee754_sqrt+0x36>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	f7f4 fd97 	bl	80004d8 <__aeabi_dmul>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	f7f4 fbdb 	bl	800016c <__adddf3>
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	460d      	mov	r5, r1
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	4629      	mov	r1, r5
 800b9be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c2:	2900      	cmp	r1, #0
 800b9c4:	dc0d      	bgt.n	800b9e2 <__ieee754_sqrt+0x56>
 800b9c6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b9ca:	ea5c 0c00 	orrs.w	ip, ip, r0
 800b9ce:	d0f4      	beq.n	800b9ba <__ieee754_sqrt+0x2e>
 800b9d0:	b139      	cbz	r1, 800b9e2 <__ieee754_sqrt+0x56>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	f7f4 fbc8 	bl	8000168 <__aeabi_dsub>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	460b      	mov	r3, r1
 800b9dc:	f7f4 fea6 	bl	800072c <__aeabi_ddiv>
 800b9e0:	e7e9      	b.n	800b9b6 <__ieee754_sqrt+0x2a>
 800b9e2:	1512      	asrs	r2, r2, #20
 800b9e4:	f000 8089 	beq.w	800bafa <__ieee754_sqrt+0x16e>
 800b9e8:	2500      	movs	r5, #0
 800b9ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9ee:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b9f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9f6:	07d2      	lsls	r2, r2, #31
 800b9f8:	bf5c      	itt	pl
 800b9fa:	005b      	lslpl	r3, r3, #1
 800b9fc:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800ba00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba04:	bf58      	it	pl
 800ba06:	0064      	lslpl	r4, r4, #1
 800ba08:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ba0c:	0062      	lsls	r2, r4, #1
 800ba0e:	2016      	movs	r0, #22
 800ba10:	4629      	mov	r1, r5
 800ba12:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800ba16:	1076      	asrs	r6, r6, #1
 800ba18:	190f      	adds	r7, r1, r4
 800ba1a:	429f      	cmp	r7, r3
 800ba1c:	bfde      	ittt	le
 800ba1e:	1bdb      	suble	r3, r3, r7
 800ba20:	1939      	addle	r1, r7, r4
 800ba22:	192d      	addle	r5, r5, r4
 800ba24:	005b      	lsls	r3, r3, #1
 800ba26:	3801      	subs	r0, #1
 800ba28:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ba2c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ba30:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ba34:	d1f0      	bne.n	800ba18 <__ieee754_sqrt+0x8c>
 800ba36:	4604      	mov	r4, r0
 800ba38:	2720      	movs	r7, #32
 800ba3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800ba3e:	428b      	cmp	r3, r1
 800ba40:	eb0c 0e00 	add.w	lr, ip, r0
 800ba44:	dc02      	bgt.n	800ba4c <__ieee754_sqrt+0xc0>
 800ba46:	d113      	bne.n	800ba70 <__ieee754_sqrt+0xe4>
 800ba48:	4596      	cmp	lr, r2
 800ba4a:	d811      	bhi.n	800ba70 <__ieee754_sqrt+0xe4>
 800ba4c:	f1be 0f00 	cmp.w	lr, #0
 800ba50:	eb0e 000c 	add.w	r0, lr, ip
 800ba54:	da56      	bge.n	800bb04 <__ieee754_sqrt+0x178>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	db54      	blt.n	800bb04 <__ieee754_sqrt+0x178>
 800ba5a:	f101 0801 	add.w	r8, r1, #1
 800ba5e:	1a5b      	subs	r3, r3, r1
 800ba60:	4641      	mov	r1, r8
 800ba62:	4596      	cmp	lr, r2
 800ba64:	bf88      	it	hi
 800ba66:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ba6a:	eba2 020e 	sub.w	r2, r2, lr
 800ba6e:	4464      	add	r4, ip
 800ba70:	005b      	lsls	r3, r3, #1
 800ba72:	3f01      	subs	r7, #1
 800ba74:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ba78:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ba7c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ba80:	d1dd      	bne.n	800ba3e <__ieee754_sqrt+0xb2>
 800ba82:	4313      	orrs	r3, r2
 800ba84:	d01b      	beq.n	800babe <__ieee754_sqrt+0x132>
 800ba86:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800bb34 <__ieee754_sqrt+0x1a8>
 800ba8a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800bb38 <__ieee754_sqrt+0x1ac>
 800ba8e:	e9da 0100 	ldrd	r0, r1, [sl]
 800ba92:	e9db 2300 	ldrd	r2, r3, [fp]
 800ba96:	f7f4 fb67 	bl	8000168 <__aeabi_dsub>
 800ba9a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	4640      	mov	r0, r8
 800baa4:	4649      	mov	r1, r9
 800baa6:	f7f4 ff93 	bl	80009d0 <__aeabi_dcmple>
 800baaa:	b140      	cbz	r0, 800babe <__ieee754_sqrt+0x132>
 800baac:	e9da 0100 	ldrd	r0, r1, [sl]
 800bab0:	e9db 2300 	ldrd	r2, r3, [fp]
 800bab4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bab8:	d126      	bne.n	800bb08 <__ieee754_sqrt+0x17c>
 800baba:	463c      	mov	r4, r7
 800babc:	3501      	adds	r5, #1
 800babe:	106b      	asrs	r3, r5, #1
 800bac0:	0864      	lsrs	r4, r4, #1
 800bac2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bac6:	07ea      	lsls	r2, r5, #31
 800bac8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bacc:	bf48      	it	mi
 800bace:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800bad2:	4620      	mov	r0, r4
 800bad4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800bad8:	e76d      	b.n	800b9b6 <__ieee754_sqrt+0x2a>
 800bada:	0ae3      	lsrs	r3, r4, #11
 800badc:	3915      	subs	r1, #21
 800bade:	0564      	lsls	r4, r4, #21
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d0fa      	beq.n	800bada <__ieee754_sqrt+0x14e>
 800bae4:	02d8      	lsls	r0, r3, #11
 800bae6:	d50a      	bpl.n	800bafe <__ieee754_sqrt+0x172>
 800bae8:	f1c2 0020 	rsb	r0, r2, #32
 800baec:	fa24 f000 	lsr.w	r0, r4, r0
 800baf0:	1e55      	subs	r5, r2, #1
 800baf2:	4094      	lsls	r4, r2
 800baf4:	4303      	orrs	r3, r0
 800baf6:	1b4a      	subs	r2, r1, r5
 800baf8:	e776      	b.n	800b9e8 <__ieee754_sqrt+0x5c>
 800bafa:	4611      	mov	r1, r2
 800bafc:	e7f0      	b.n	800bae0 <__ieee754_sqrt+0x154>
 800bafe:	005b      	lsls	r3, r3, #1
 800bb00:	3201      	adds	r2, #1
 800bb02:	e7ef      	b.n	800bae4 <__ieee754_sqrt+0x158>
 800bb04:	4688      	mov	r8, r1
 800bb06:	e7aa      	b.n	800ba5e <__ieee754_sqrt+0xd2>
 800bb08:	f7f4 fb30 	bl	800016c <__adddf3>
 800bb0c:	e9da 8900 	ldrd	r8, r9, [sl]
 800bb10:	4602      	mov	r2, r0
 800bb12:	460b      	mov	r3, r1
 800bb14:	4640      	mov	r0, r8
 800bb16:	4649      	mov	r1, r9
 800bb18:	f7f4 ff50 	bl	80009bc <__aeabi_dcmplt>
 800bb1c:	b120      	cbz	r0, 800bb28 <__ieee754_sqrt+0x19c>
 800bb1e:	1ca1      	adds	r1, r4, #2
 800bb20:	bf08      	it	eq
 800bb22:	3501      	addeq	r5, #1
 800bb24:	3402      	adds	r4, #2
 800bb26:	e7ca      	b.n	800babe <__ieee754_sqrt+0x132>
 800bb28:	3401      	adds	r4, #1
 800bb2a:	f024 0401 	bic.w	r4, r4, #1
 800bb2e:	e7c6      	b.n	800babe <__ieee754_sqrt+0x132>
 800bb30:	7ff00000 	.word	0x7ff00000
 800bb34:	200001f8 	.word	0x200001f8
 800bb38:	20000200 	.word	0x20000200
 800bb3c:	00000000 	.word	0x00000000

0800bb40 <floor>:
 800bb40:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bb44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb48:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800bb4c:	2e13      	cmp	r6, #19
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4607      	mov	r7, r0
 800bb52:	460c      	mov	r4, r1
 800bb54:	4605      	mov	r5, r0
 800bb56:	dc32      	bgt.n	800bbbe <floor+0x7e>
 800bb58:	2e00      	cmp	r6, #0
 800bb5a:	da14      	bge.n	800bb86 <floor+0x46>
 800bb5c:	a334      	add	r3, pc, #208	; (adr r3, 800bc30 <floor+0xf0>)
 800bb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb62:	f7f4 fb03 	bl	800016c <__adddf3>
 800bb66:	2200      	movs	r2, #0
 800bb68:	2300      	movs	r3, #0
 800bb6a:	f7f4 ff45 	bl	80009f8 <__aeabi_dcmpgt>
 800bb6e:	b138      	cbz	r0, 800bb80 <floor+0x40>
 800bb70:	2c00      	cmp	r4, #0
 800bb72:	da56      	bge.n	800bc22 <floor+0xe2>
 800bb74:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800bb78:	4325      	orrs	r5, r4
 800bb7a:	d055      	beq.n	800bc28 <floor+0xe8>
 800bb7c:	2500      	movs	r5, #0
 800bb7e:	4c2e      	ldr	r4, [pc, #184]	; (800bc38 <floor+0xf8>)
 800bb80:	4623      	mov	r3, r4
 800bb82:	462f      	mov	r7, r5
 800bb84:	e025      	b.n	800bbd2 <floor+0x92>
 800bb86:	4a2d      	ldr	r2, [pc, #180]	; (800bc3c <floor+0xfc>)
 800bb88:	fa42 f806 	asr.w	r8, r2, r6
 800bb8c:	ea01 0208 	and.w	r2, r1, r8
 800bb90:	4302      	orrs	r2, r0
 800bb92:	d01e      	beq.n	800bbd2 <floor+0x92>
 800bb94:	a326      	add	r3, pc, #152	; (adr r3, 800bc30 <floor+0xf0>)
 800bb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9a:	f7f4 fae7 	bl	800016c <__adddf3>
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2300      	movs	r3, #0
 800bba2:	f7f4 ff29 	bl	80009f8 <__aeabi_dcmpgt>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d0ea      	beq.n	800bb80 <floor+0x40>
 800bbaa:	2c00      	cmp	r4, #0
 800bbac:	bfbe      	ittt	lt
 800bbae:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bbb2:	4133      	asrlt	r3, r6
 800bbb4:	18e4      	addlt	r4, r4, r3
 800bbb6:	2500      	movs	r5, #0
 800bbb8:	ea24 0408 	bic.w	r4, r4, r8
 800bbbc:	e7e0      	b.n	800bb80 <floor+0x40>
 800bbbe:	2e33      	cmp	r6, #51	; 0x33
 800bbc0:	dd0b      	ble.n	800bbda <floor+0x9a>
 800bbc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bbc6:	d104      	bne.n	800bbd2 <floor+0x92>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	f7f4 facf 	bl	800016c <__adddf3>
 800bbce:	4607      	mov	r7, r0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4638      	mov	r0, r7
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbda:	f04f 38ff 	mov.w	r8, #4294967295
 800bbde:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800bbe2:	fa28 f802 	lsr.w	r8, r8, r2
 800bbe6:	ea10 0f08 	tst.w	r0, r8
 800bbea:	d0f2      	beq.n	800bbd2 <floor+0x92>
 800bbec:	a310      	add	r3, pc, #64	; (adr r3, 800bc30 <floor+0xf0>)
 800bbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf2:	f7f4 fabb 	bl	800016c <__adddf3>
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	f7f4 fefd 	bl	80009f8 <__aeabi_dcmpgt>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d0be      	beq.n	800bb80 <floor+0x40>
 800bc02:	2c00      	cmp	r4, #0
 800bc04:	da0a      	bge.n	800bc1c <floor+0xdc>
 800bc06:	2e14      	cmp	r6, #20
 800bc08:	d101      	bne.n	800bc0e <floor+0xce>
 800bc0a:	3401      	adds	r4, #1
 800bc0c:	e006      	b.n	800bc1c <floor+0xdc>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bc14:	40b3      	lsls	r3, r6
 800bc16:	441d      	add	r5, r3
 800bc18:	42af      	cmp	r7, r5
 800bc1a:	d8f6      	bhi.n	800bc0a <floor+0xca>
 800bc1c:	ea25 0508 	bic.w	r5, r5, r8
 800bc20:	e7ae      	b.n	800bb80 <floor+0x40>
 800bc22:	2500      	movs	r5, #0
 800bc24:	462c      	mov	r4, r5
 800bc26:	e7ab      	b.n	800bb80 <floor+0x40>
 800bc28:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bc2c:	e7a8      	b.n	800bb80 <floor+0x40>
 800bc2e:	bf00      	nop
 800bc30:	8800759c 	.word	0x8800759c
 800bc34:	7e37e43c 	.word	0x7e37e43c
 800bc38:	bff00000 	.word	0xbff00000
 800bc3c:	000fffff 	.word	0x000fffff

0800bc40 <__ieee754_pow>:
 800bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc44:	b093      	sub	sp, #76	; 0x4c
 800bc46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc4a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800bc4e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800bc52:	4689      	mov	r9, r1
 800bc54:	ea56 0102 	orrs.w	r1, r6, r2
 800bc58:	4680      	mov	r8, r0
 800bc5a:	d111      	bne.n	800bc80 <__ieee754_pow+0x40>
 800bc5c:	1803      	adds	r3, r0, r0
 800bc5e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800bc62:	4152      	adcs	r2, r2
 800bc64:	4299      	cmp	r1, r3
 800bc66:	4b82      	ldr	r3, [pc, #520]	; (800be70 <__ieee754_pow+0x230>)
 800bc68:	4193      	sbcs	r3, r2
 800bc6a:	f080 84ba 	bcs.w	800c5e2 <__ieee754_pow+0x9a2>
 800bc6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc72:	4640      	mov	r0, r8
 800bc74:	4649      	mov	r1, r9
 800bc76:	f7f4 fa79 	bl	800016c <__adddf3>
 800bc7a:	4683      	mov	fp, r0
 800bc7c:	468c      	mov	ip, r1
 800bc7e:	e06f      	b.n	800bd60 <__ieee754_pow+0x120>
 800bc80:	4b7c      	ldr	r3, [pc, #496]	; (800be74 <__ieee754_pow+0x234>)
 800bc82:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800bc86:	429c      	cmp	r4, r3
 800bc88:	464d      	mov	r5, r9
 800bc8a:	4682      	mov	sl, r0
 800bc8c:	dc06      	bgt.n	800bc9c <__ieee754_pow+0x5c>
 800bc8e:	d101      	bne.n	800bc94 <__ieee754_pow+0x54>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d1ec      	bne.n	800bc6e <__ieee754_pow+0x2e>
 800bc94:	429e      	cmp	r6, r3
 800bc96:	dc01      	bgt.n	800bc9c <__ieee754_pow+0x5c>
 800bc98:	d10f      	bne.n	800bcba <__ieee754_pow+0x7a>
 800bc9a:	b172      	cbz	r2, 800bcba <__ieee754_pow+0x7a>
 800bc9c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bca0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bca4:	ea55 050a 	orrs.w	r5, r5, sl
 800bca8:	d1e1      	bne.n	800bc6e <__ieee754_pow+0x2e>
 800bcaa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bcae:	18db      	adds	r3, r3, r3
 800bcb0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bcb4:	4152      	adcs	r2, r2
 800bcb6:	429d      	cmp	r5, r3
 800bcb8:	e7d5      	b.n	800bc66 <__ieee754_pow+0x26>
 800bcba:	2d00      	cmp	r5, #0
 800bcbc:	da39      	bge.n	800bd32 <__ieee754_pow+0xf2>
 800bcbe:	4b6e      	ldr	r3, [pc, #440]	; (800be78 <__ieee754_pow+0x238>)
 800bcc0:	429e      	cmp	r6, r3
 800bcc2:	dc52      	bgt.n	800bd6a <__ieee754_pow+0x12a>
 800bcc4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bcc8:	429e      	cmp	r6, r3
 800bcca:	f340 849d 	ble.w	800c608 <__ieee754_pow+0x9c8>
 800bcce:	1533      	asrs	r3, r6, #20
 800bcd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bcd4:	2b14      	cmp	r3, #20
 800bcd6:	dd0f      	ble.n	800bcf8 <__ieee754_pow+0xb8>
 800bcd8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bcdc:	fa22 f103 	lsr.w	r1, r2, r3
 800bce0:	fa01 f303 	lsl.w	r3, r1, r3
 800bce4:	4293      	cmp	r3, r2
 800bce6:	f040 848f 	bne.w	800c608 <__ieee754_pow+0x9c8>
 800bcea:	f001 0101 	and.w	r1, r1, #1
 800bcee:	f1c1 0302 	rsb	r3, r1, #2
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	b182      	cbz	r2, 800bd18 <__ieee754_pow+0xd8>
 800bcf6:	e05d      	b.n	800bdb4 <__ieee754_pow+0x174>
 800bcf8:	2a00      	cmp	r2, #0
 800bcfa:	d159      	bne.n	800bdb0 <__ieee754_pow+0x170>
 800bcfc:	f1c3 0314 	rsb	r3, r3, #20
 800bd00:	fa46 f103 	asr.w	r1, r6, r3
 800bd04:	fa01 f303 	lsl.w	r3, r1, r3
 800bd08:	42b3      	cmp	r3, r6
 800bd0a:	f040 847a 	bne.w	800c602 <__ieee754_pow+0x9c2>
 800bd0e:	f001 0101 	and.w	r1, r1, #1
 800bd12:	f1c1 0302 	rsb	r3, r1, #2
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	4b58      	ldr	r3, [pc, #352]	; (800be7c <__ieee754_pow+0x23c>)
 800bd1a:	429e      	cmp	r6, r3
 800bd1c:	d132      	bne.n	800bd84 <__ieee754_pow+0x144>
 800bd1e:	2f00      	cmp	r7, #0
 800bd20:	f280 846b 	bge.w	800c5fa <__ieee754_pow+0x9ba>
 800bd24:	4642      	mov	r2, r8
 800bd26:	464b      	mov	r3, r9
 800bd28:	2000      	movs	r0, #0
 800bd2a:	4954      	ldr	r1, [pc, #336]	; (800be7c <__ieee754_pow+0x23c>)
 800bd2c:	f7f4 fcfe 	bl	800072c <__aeabi_ddiv>
 800bd30:	e7a3      	b.n	800bc7a <__ieee754_pow+0x3a>
 800bd32:	2300      	movs	r3, #0
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	2a00      	cmp	r2, #0
 800bd38:	d13c      	bne.n	800bdb4 <__ieee754_pow+0x174>
 800bd3a:	4b4e      	ldr	r3, [pc, #312]	; (800be74 <__ieee754_pow+0x234>)
 800bd3c:	429e      	cmp	r6, r3
 800bd3e:	d1eb      	bne.n	800bd18 <__ieee754_pow+0xd8>
 800bd40:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bd44:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bd48:	ea53 030a 	orrs.w	r3, r3, sl
 800bd4c:	f000 8449 	beq.w	800c5e2 <__ieee754_pow+0x9a2>
 800bd50:	4b4b      	ldr	r3, [pc, #300]	; (800be80 <__ieee754_pow+0x240>)
 800bd52:	429c      	cmp	r4, r3
 800bd54:	dd0b      	ble.n	800bd6e <__ieee754_pow+0x12e>
 800bd56:	2f00      	cmp	r7, #0
 800bd58:	f2c0 8449 	blt.w	800c5ee <__ieee754_pow+0x9ae>
 800bd5c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800bd60:	4658      	mov	r0, fp
 800bd62:	4661      	mov	r1, ip
 800bd64:	b013      	add	sp, #76	; 0x4c
 800bd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e7e2      	b.n	800bd34 <__ieee754_pow+0xf4>
 800bd6e:	2f00      	cmp	r7, #0
 800bd70:	f04f 0b00 	mov.w	fp, #0
 800bd74:	f04f 0c00 	mov.w	ip, #0
 800bd78:	daf2      	bge.n	800bd60 <__ieee754_pow+0x120>
 800bd7a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800bd7e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800bd82:	e7ed      	b.n	800bd60 <__ieee754_pow+0x120>
 800bd84:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800bd88:	d106      	bne.n	800bd98 <__ieee754_pow+0x158>
 800bd8a:	4642      	mov	r2, r8
 800bd8c:	464b      	mov	r3, r9
 800bd8e:	4640      	mov	r0, r8
 800bd90:	4649      	mov	r1, r9
 800bd92:	f7f4 fba1 	bl	80004d8 <__aeabi_dmul>
 800bd96:	e770      	b.n	800bc7a <__ieee754_pow+0x3a>
 800bd98:	4b3a      	ldr	r3, [pc, #232]	; (800be84 <__ieee754_pow+0x244>)
 800bd9a:	429f      	cmp	r7, r3
 800bd9c:	d10a      	bne.n	800bdb4 <__ieee754_pow+0x174>
 800bd9e:	2d00      	cmp	r5, #0
 800bda0:	db08      	blt.n	800bdb4 <__ieee754_pow+0x174>
 800bda2:	4640      	mov	r0, r8
 800bda4:	4649      	mov	r1, r9
 800bda6:	b013      	add	sp, #76	; 0x4c
 800bda8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdac:	f7ff bdee 	b.w	800b98c <__ieee754_sqrt>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	4640      	mov	r0, r8
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	f000 fc58 	bl	800c66c <fabs>
 800bdbc:	4683      	mov	fp, r0
 800bdbe:	468c      	mov	ip, r1
 800bdc0:	f1ba 0f00 	cmp.w	sl, #0
 800bdc4:	d128      	bne.n	800be18 <__ieee754_pow+0x1d8>
 800bdc6:	b124      	cbz	r4, 800bdd2 <__ieee754_pow+0x192>
 800bdc8:	4b2c      	ldr	r3, [pc, #176]	; (800be7c <__ieee754_pow+0x23c>)
 800bdca:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d122      	bne.n	800be18 <__ieee754_pow+0x1d8>
 800bdd2:	2f00      	cmp	r7, #0
 800bdd4:	da07      	bge.n	800bde6 <__ieee754_pow+0x1a6>
 800bdd6:	465a      	mov	r2, fp
 800bdd8:	4663      	mov	r3, ip
 800bdda:	2000      	movs	r0, #0
 800bddc:	4927      	ldr	r1, [pc, #156]	; (800be7c <__ieee754_pow+0x23c>)
 800bdde:	f7f4 fca5 	bl	800072c <__aeabi_ddiv>
 800bde2:	4683      	mov	fp, r0
 800bde4:	468c      	mov	ip, r1
 800bde6:	2d00      	cmp	r5, #0
 800bde8:	daba      	bge.n	800bd60 <__ieee754_pow+0x120>
 800bdea:	9b00      	ldr	r3, [sp, #0]
 800bdec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bdf0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bdf4:	431c      	orrs	r4, r3
 800bdf6:	d108      	bne.n	800be0a <__ieee754_pow+0x1ca>
 800bdf8:	465a      	mov	r2, fp
 800bdfa:	4663      	mov	r3, ip
 800bdfc:	4658      	mov	r0, fp
 800bdfe:	4661      	mov	r1, ip
 800be00:	f7f4 f9b2 	bl	8000168 <__aeabi_dsub>
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	e790      	b.n	800bd2c <__ieee754_pow+0xec>
 800be0a:	9b00      	ldr	r3, [sp, #0]
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d1a7      	bne.n	800bd60 <__ieee754_pow+0x120>
 800be10:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800be14:	469c      	mov	ip, r3
 800be16:	e7a3      	b.n	800bd60 <__ieee754_pow+0x120>
 800be18:	0feb      	lsrs	r3, r5, #31
 800be1a:	3b01      	subs	r3, #1
 800be1c:	930c      	str	r3, [sp, #48]	; 0x30
 800be1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be20:	9b00      	ldr	r3, [sp, #0]
 800be22:	4313      	orrs	r3, r2
 800be24:	d104      	bne.n	800be30 <__ieee754_pow+0x1f0>
 800be26:	4642      	mov	r2, r8
 800be28:	464b      	mov	r3, r9
 800be2a:	4640      	mov	r0, r8
 800be2c:	4649      	mov	r1, r9
 800be2e:	e7e7      	b.n	800be00 <__ieee754_pow+0x1c0>
 800be30:	4b15      	ldr	r3, [pc, #84]	; (800be88 <__ieee754_pow+0x248>)
 800be32:	429e      	cmp	r6, r3
 800be34:	f340 80f6 	ble.w	800c024 <__ieee754_pow+0x3e4>
 800be38:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800be3c:	429e      	cmp	r6, r3
 800be3e:	4b10      	ldr	r3, [pc, #64]	; (800be80 <__ieee754_pow+0x240>)
 800be40:	dd09      	ble.n	800be56 <__ieee754_pow+0x216>
 800be42:	429c      	cmp	r4, r3
 800be44:	dc0c      	bgt.n	800be60 <__ieee754_pow+0x220>
 800be46:	2f00      	cmp	r7, #0
 800be48:	da0c      	bge.n	800be64 <__ieee754_pow+0x224>
 800be4a:	2000      	movs	r0, #0
 800be4c:	b013      	add	sp, #76	; 0x4c
 800be4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be52:	f000 bcb2 	b.w	800c7ba <__math_oflow>
 800be56:	429c      	cmp	r4, r3
 800be58:	dbf5      	blt.n	800be46 <__ieee754_pow+0x206>
 800be5a:	4b08      	ldr	r3, [pc, #32]	; (800be7c <__ieee754_pow+0x23c>)
 800be5c:	429c      	cmp	r4, r3
 800be5e:	dd15      	ble.n	800be8c <__ieee754_pow+0x24c>
 800be60:	2f00      	cmp	r7, #0
 800be62:	dcf2      	bgt.n	800be4a <__ieee754_pow+0x20a>
 800be64:	2000      	movs	r0, #0
 800be66:	b013      	add	sp, #76	; 0x4c
 800be68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6c:	f000 bca0 	b.w	800c7b0 <__math_uflow>
 800be70:	fff00000 	.word	0xfff00000
 800be74:	7ff00000 	.word	0x7ff00000
 800be78:	433fffff 	.word	0x433fffff
 800be7c:	3ff00000 	.word	0x3ff00000
 800be80:	3fefffff 	.word	0x3fefffff
 800be84:	3fe00000 	.word	0x3fe00000
 800be88:	41e00000 	.word	0x41e00000
 800be8c:	4661      	mov	r1, ip
 800be8e:	2200      	movs	r2, #0
 800be90:	4658      	mov	r0, fp
 800be92:	4b5f      	ldr	r3, [pc, #380]	; (800c010 <__ieee754_pow+0x3d0>)
 800be94:	f7f4 f968 	bl	8000168 <__aeabi_dsub>
 800be98:	a355      	add	r3, pc, #340	; (adr r3, 800bff0 <__ieee754_pow+0x3b0>)
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	4604      	mov	r4, r0
 800bea0:	460d      	mov	r5, r1
 800bea2:	f7f4 fb19 	bl	80004d8 <__aeabi_dmul>
 800bea6:	a354      	add	r3, pc, #336	; (adr r3, 800bff8 <__ieee754_pow+0x3b8>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	4606      	mov	r6, r0
 800beae:	460f      	mov	r7, r1
 800beb0:	4620      	mov	r0, r4
 800beb2:	4629      	mov	r1, r5
 800beb4:	f7f4 fb10 	bl	80004d8 <__aeabi_dmul>
 800beb8:	2200      	movs	r2, #0
 800beba:	4682      	mov	sl, r0
 800bebc:	468b      	mov	fp, r1
 800bebe:	4620      	mov	r0, r4
 800bec0:	4629      	mov	r1, r5
 800bec2:	4b54      	ldr	r3, [pc, #336]	; (800c014 <__ieee754_pow+0x3d4>)
 800bec4:	f7f4 fb08 	bl	80004d8 <__aeabi_dmul>
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	a14c      	add	r1, pc, #304	; (adr r1, 800c000 <__ieee754_pow+0x3c0>)
 800bece:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bed2:	f7f4 f949 	bl	8000168 <__aeabi_dsub>
 800bed6:	4622      	mov	r2, r4
 800bed8:	462b      	mov	r3, r5
 800beda:	f7f4 fafd 	bl	80004d8 <__aeabi_dmul>
 800bede:	4602      	mov	r2, r0
 800bee0:	460b      	mov	r3, r1
 800bee2:	2000      	movs	r0, #0
 800bee4:	494c      	ldr	r1, [pc, #304]	; (800c018 <__ieee754_pow+0x3d8>)
 800bee6:	f7f4 f93f 	bl	8000168 <__aeabi_dsub>
 800beea:	4622      	mov	r2, r4
 800beec:	462b      	mov	r3, r5
 800beee:	4680      	mov	r8, r0
 800bef0:	4689      	mov	r9, r1
 800bef2:	4620      	mov	r0, r4
 800bef4:	4629      	mov	r1, r5
 800bef6:	f7f4 faef 	bl	80004d8 <__aeabi_dmul>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	4640      	mov	r0, r8
 800bf00:	4649      	mov	r1, r9
 800bf02:	f7f4 fae9 	bl	80004d8 <__aeabi_dmul>
 800bf06:	a340      	add	r3, pc, #256	; (adr r3, 800c008 <__ieee754_pow+0x3c8>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	f7f4 fae4 	bl	80004d8 <__aeabi_dmul>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4650      	mov	r0, sl
 800bf16:	4659      	mov	r1, fp
 800bf18:	f7f4 f926 	bl	8000168 <__aeabi_dsub>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4604      	mov	r4, r0
 800bf22:	460d      	mov	r5, r1
 800bf24:	4630      	mov	r0, r6
 800bf26:	4639      	mov	r1, r7
 800bf28:	f7f4 f920 	bl	800016c <__adddf3>
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	4632      	mov	r2, r6
 800bf30:	463b      	mov	r3, r7
 800bf32:	4682      	mov	sl, r0
 800bf34:	468b      	mov	fp, r1
 800bf36:	f7f4 f917 	bl	8000168 <__aeabi_dsub>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	4620      	mov	r0, r4
 800bf40:	4629      	mov	r1, r5
 800bf42:	f7f4 f911 	bl	8000168 <__aeabi_dsub>
 800bf46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bf4a:	9b00      	ldr	r3, [sp, #0]
 800bf4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf4e:	3b01      	subs	r3, #1
 800bf50:	4313      	orrs	r3, r2
 800bf52:	f04f 0600 	mov.w	r6, #0
 800bf56:	f04f 0200 	mov.w	r2, #0
 800bf5a:	bf0c      	ite	eq
 800bf5c:	4b2f      	ldreq	r3, [pc, #188]	; (800c01c <__ieee754_pow+0x3dc>)
 800bf5e:	4b2c      	ldrne	r3, [pc, #176]	; (800c010 <__ieee754_pow+0x3d0>)
 800bf60:	4604      	mov	r4, r0
 800bf62:	460d      	mov	r5, r1
 800bf64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf68:	e9cd 2300 	strd	r2, r3, [sp]
 800bf6c:	4632      	mov	r2, r6
 800bf6e:	463b      	mov	r3, r7
 800bf70:	f7f4 f8fa 	bl	8000168 <__aeabi_dsub>
 800bf74:	4652      	mov	r2, sl
 800bf76:	465b      	mov	r3, fp
 800bf78:	f7f4 faae 	bl	80004d8 <__aeabi_dmul>
 800bf7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf80:	4680      	mov	r8, r0
 800bf82:	4689      	mov	r9, r1
 800bf84:	4620      	mov	r0, r4
 800bf86:	4629      	mov	r1, r5
 800bf88:	f7f4 faa6 	bl	80004d8 <__aeabi_dmul>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	460b      	mov	r3, r1
 800bf90:	4640      	mov	r0, r8
 800bf92:	4649      	mov	r1, r9
 800bf94:	f7f4 f8ea 	bl	800016c <__adddf3>
 800bf98:	4632      	mov	r2, r6
 800bf9a:	463b      	mov	r3, r7
 800bf9c:	4680      	mov	r8, r0
 800bf9e:	4689      	mov	r9, r1
 800bfa0:	4650      	mov	r0, sl
 800bfa2:	4659      	mov	r1, fp
 800bfa4:	f7f4 fa98 	bl	80004d8 <__aeabi_dmul>
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	460d      	mov	r5, r1
 800bfac:	460b      	mov	r3, r1
 800bfae:	4602      	mov	r2, r0
 800bfb0:	4649      	mov	r1, r9
 800bfb2:	4640      	mov	r0, r8
 800bfb4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bfb8:	f7f4 f8d8 	bl	800016c <__adddf3>
 800bfbc:	4b18      	ldr	r3, [pc, #96]	; (800c020 <__ieee754_pow+0x3e0>)
 800bfbe:	4682      	mov	sl, r0
 800bfc0:	4299      	cmp	r1, r3
 800bfc2:	460f      	mov	r7, r1
 800bfc4:	460e      	mov	r6, r1
 800bfc6:	f340 82e7 	ble.w	800c598 <__ieee754_pow+0x958>
 800bfca:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bfce:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bfd2:	4303      	orrs	r3, r0
 800bfd4:	f000 81e2 	beq.w	800c39c <__ieee754_pow+0x75c>
 800bfd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	2300      	movs	r3, #0
 800bfe0:	f7f4 fcec 	bl	80009bc <__aeabi_dcmplt>
 800bfe4:	3800      	subs	r0, #0
 800bfe6:	bf18      	it	ne
 800bfe8:	2001      	movne	r0, #1
 800bfea:	e72f      	b.n	800be4c <__ieee754_pow+0x20c>
 800bfec:	f3af 8000 	nop.w
 800bff0:	60000000 	.word	0x60000000
 800bff4:	3ff71547 	.word	0x3ff71547
 800bff8:	f85ddf44 	.word	0xf85ddf44
 800bffc:	3e54ae0b 	.word	0x3e54ae0b
 800c000:	55555555 	.word	0x55555555
 800c004:	3fd55555 	.word	0x3fd55555
 800c008:	652b82fe 	.word	0x652b82fe
 800c00c:	3ff71547 	.word	0x3ff71547
 800c010:	3ff00000 	.word	0x3ff00000
 800c014:	3fd00000 	.word	0x3fd00000
 800c018:	3fe00000 	.word	0x3fe00000
 800c01c:	bff00000 	.word	0xbff00000
 800c020:	408fffff 	.word	0x408fffff
 800c024:	4bd4      	ldr	r3, [pc, #848]	; (800c378 <__ieee754_pow+0x738>)
 800c026:	2200      	movs	r2, #0
 800c028:	402b      	ands	r3, r5
 800c02a:	b943      	cbnz	r3, 800c03e <__ieee754_pow+0x3fe>
 800c02c:	4658      	mov	r0, fp
 800c02e:	4661      	mov	r1, ip
 800c030:	4bd2      	ldr	r3, [pc, #840]	; (800c37c <__ieee754_pow+0x73c>)
 800c032:	f7f4 fa51 	bl	80004d8 <__aeabi_dmul>
 800c036:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c03a:	4683      	mov	fp, r0
 800c03c:	460c      	mov	r4, r1
 800c03e:	1523      	asrs	r3, r4, #20
 800c040:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c044:	4413      	add	r3, r2
 800c046:	930b      	str	r3, [sp, #44]	; 0x2c
 800c048:	4bcd      	ldr	r3, [pc, #820]	; (800c380 <__ieee754_pow+0x740>)
 800c04a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c04e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c052:	429c      	cmp	r4, r3
 800c054:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c058:	dd08      	ble.n	800c06c <__ieee754_pow+0x42c>
 800c05a:	4bca      	ldr	r3, [pc, #808]	; (800c384 <__ieee754_pow+0x744>)
 800c05c:	429c      	cmp	r4, r3
 800c05e:	f340 8164 	ble.w	800c32a <__ieee754_pow+0x6ea>
 800c062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c064:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c068:	3301      	adds	r3, #1
 800c06a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c06c:	2600      	movs	r6, #0
 800c06e:	00f3      	lsls	r3, r6, #3
 800c070:	930d      	str	r3, [sp, #52]	; 0x34
 800c072:	4bc5      	ldr	r3, [pc, #788]	; (800c388 <__ieee754_pow+0x748>)
 800c074:	4658      	mov	r0, fp
 800c076:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c07a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c07e:	4629      	mov	r1, r5
 800c080:	461a      	mov	r2, r3
 800c082:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c086:	4623      	mov	r3, r4
 800c088:	f7f4 f86e 	bl	8000168 <__aeabi_dsub>
 800c08c:	46da      	mov	sl, fp
 800c08e:	462b      	mov	r3, r5
 800c090:	4652      	mov	r2, sl
 800c092:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c096:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c09a:	f7f4 f867 	bl	800016c <__adddf3>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	2000      	movs	r0, #0
 800c0a4:	49b9      	ldr	r1, [pc, #740]	; (800c38c <__ieee754_pow+0x74c>)
 800c0a6:	f7f4 fb41 	bl	800072c <__aeabi_ddiv>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c0b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c0b6:	f7f4 fa0f 	bl	80004d8 <__aeabi_dmul>
 800c0ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c0be:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c0c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	46ab      	mov	fp, r5
 800c0cc:	106d      	asrs	r5, r5, #1
 800c0ce:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c0d2:	9304      	str	r3, [sp, #16]
 800c0d4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c0d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c0dc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800c0e0:	4640      	mov	r0, r8
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	4614      	mov	r4, r2
 800c0e6:	461d      	mov	r5, r3
 800c0e8:	f7f4 f9f6 	bl	80004d8 <__aeabi_dmul>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c0f4:	f7f4 f838 	bl	8000168 <__aeabi_dsub>
 800c0f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c0fc:	4606      	mov	r6, r0
 800c0fe:	460f      	mov	r7, r1
 800c100:	4620      	mov	r0, r4
 800c102:	4629      	mov	r1, r5
 800c104:	f7f4 f830 	bl	8000168 <__aeabi_dsub>
 800c108:	4602      	mov	r2, r0
 800c10a:	460b      	mov	r3, r1
 800c10c:	4650      	mov	r0, sl
 800c10e:	4659      	mov	r1, fp
 800c110:	f7f4 f82a 	bl	8000168 <__aeabi_dsub>
 800c114:	4642      	mov	r2, r8
 800c116:	464b      	mov	r3, r9
 800c118:	f7f4 f9de 	bl	80004d8 <__aeabi_dmul>
 800c11c:	4602      	mov	r2, r0
 800c11e:	460b      	mov	r3, r1
 800c120:	4630      	mov	r0, r6
 800c122:	4639      	mov	r1, r7
 800c124:	f7f4 f820 	bl	8000168 <__aeabi_dsub>
 800c128:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c12c:	f7f4 f9d4 	bl	80004d8 <__aeabi_dmul>
 800c130:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c134:	4682      	mov	sl, r0
 800c136:	468b      	mov	fp, r1
 800c138:	4610      	mov	r0, r2
 800c13a:	4619      	mov	r1, r3
 800c13c:	f7f4 f9cc 	bl	80004d8 <__aeabi_dmul>
 800c140:	a37b      	add	r3, pc, #492	; (adr r3, 800c330 <__ieee754_pow+0x6f0>)
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	4604      	mov	r4, r0
 800c148:	460d      	mov	r5, r1
 800c14a:	f7f4 f9c5 	bl	80004d8 <__aeabi_dmul>
 800c14e:	a37a      	add	r3, pc, #488	; (adr r3, 800c338 <__ieee754_pow+0x6f8>)
 800c150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c154:	f7f4 f80a 	bl	800016c <__adddf3>
 800c158:	4622      	mov	r2, r4
 800c15a:	462b      	mov	r3, r5
 800c15c:	f7f4 f9bc 	bl	80004d8 <__aeabi_dmul>
 800c160:	a377      	add	r3, pc, #476	; (adr r3, 800c340 <__ieee754_pow+0x700>)
 800c162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c166:	f7f4 f801 	bl	800016c <__adddf3>
 800c16a:	4622      	mov	r2, r4
 800c16c:	462b      	mov	r3, r5
 800c16e:	f7f4 f9b3 	bl	80004d8 <__aeabi_dmul>
 800c172:	a375      	add	r3, pc, #468	; (adr r3, 800c348 <__ieee754_pow+0x708>)
 800c174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c178:	f7f3 fff8 	bl	800016c <__adddf3>
 800c17c:	4622      	mov	r2, r4
 800c17e:	462b      	mov	r3, r5
 800c180:	f7f4 f9aa 	bl	80004d8 <__aeabi_dmul>
 800c184:	a372      	add	r3, pc, #456	; (adr r3, 800c350 <__ieee754_pow+0x710>)
 800c186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18a:	f7f3 ffef 	bl	800016c <__adddf3>
 800c18e:	4622      	mov	r2, r4
 800c190:	462b      	mov	r3, r5
 800c192:	f7f4 f9a1 	bl	80004d8 <__aeabi_dmul>
 800c196:	a370      	add	r3, pc, #448	; (adr r3, 800c358 <__ieee754_pow+0x718>)
 800c198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19c:	f7f3 ffe6 	bl	800016c <__adddf3>
 800c1a0:	4622      	mov	r2, r4
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	460f      	mov	r7, r1
 800c1a6:	462b      	mov	r3, r5
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	f7f4 f994 	bl	80004d8 <__aeabi_dmul>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	4639      	mov	r1, r7
 800c1b8:	f7f4 f98e 	bl	80004d8 <__aeabi_dmul>
 800c1bc:	4604      	mov	r4, r0
 800c1be:	460d      	mov	r5, r1
 800c1c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1c4:	4642      	mov	r2, r8
 800c1c6:	464b      	mov	r3, r9
 800c1c8:	f7f3 ffd0 	bl	800016c <__adddf3>
 800c1cc:	4652      	mov	r2, sl
 800c1ce:	465b      	mov	r3, fp
 800c1d0:	f7f4 f982 	bl	80004d8 <__aeabi_dmul>
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	462b      	mov	r3, r5
 800c1d8:	f7f3 ffc8 	bl	800016c <__adddf3>
 800c1dc:	4642      	mov	r2, r8
 800c1de:	4606      	mov	r6, r0
 800c1e0:	460f      	mov	r7, r1
 800c1e2:	464b      	mov	r3, r9
 800c1e4:	4640      	mov	r0, r8
 800c1e6:	4649      	mov	r1, r9
 800c1e8:	f7f4 f976 	bl	80004d8 <__aeabi_dmul>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	4b66      	ldr	r3, [pc, #408]	; (800c390 <__ieee754_pow+0x750>)
 800c1f8:	f7f3 ffb8 	bl	800016c <__adddf3>
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	463b      	mov	r3, r7
 800c200:	f7f3 ffb4 	bl	800016c <__adddf3>
 800c204:	2400      	movs	r4, #0
 800c206:	460d      	mov	r5, r1
 800c208:	4622      	mov	r2, r4
 800c20a:	460b      	mov	r3, r1
 800c20c:	4640      	mov	r0, r8
 800c20e:	4649      	mov	r1, r9
 800c210:	f7f4 f962 	bl	80004d8 <__aeabi_dmul>
 800c214:	2200      	movs	r2, #0
 800c216:	4680      	mov	r8, r0
 800c218:	4689      	mov	r9, r1
 800c21a:	4620      	mov	r0, r4
 800c21c:	4629      	mov	r1, r5
 800c21e:	4b5c      	ldr	r3, [pc, #368]	; (800c390 <__ieee754_pow+0x750>)
 800c220:	f7f3 ffa2 	bl	8000168 <__aeabi_dsub>
 800c224:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c228:	f7f3 ff9e 	bl	8000168 <__aeabi_dsub>
 800c22c:	4602      	mov	r2, r0
 800c22e:	460b      	mov	r3, r1
 800c230:	4630      	mov	r0, r6
 800c232:	4639      	mov	r1, r7
 800c234:	f7f3 ff98 	bl	8000168 <__aeabi_dsub>
 800c238:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c23c:	f7f4 f94c 	bl	80004d8 <__aeabi_dmul>
 800c240:	4622      	mov	r2, r4
 800c242:	4606      	mov	r6, r0
 800c244:	460f      	mov	r7, r1
 800c246:	462b      	mov	r3, r5
 800c248:	4650      	mov	r0, sl
 800c24a:	4659      	mov	r1, fp
 800c24c:	f7f4 f944 	bl	80004d8 <__aeabi_dmul>
 800c250:	4602      	mov	r2, r0
 800c252:	460b      	mov	r3, r1
 800c254:	4630      	mov	r0, r6
 800c256:	4639      	mov	r1, r7
 800c258:	f7f3 ff88 	bl	800016c <__adddf3>
 800c25c:	2400      	movs	r4, #0
 800c25e:	4606      	mov	r6, r0
 800c260:	460f      	mov	r7, r1
 800c262:	4602      	mov	r2, r0
 800c264:	460b      	mov	r3, r1
 800c266:	4640      	mov	r0, r8
 800c268:	4649      	mov	r1, r9
 800c26a:	f7f3 ff7f 	bl	800016c <__adddf3>
 800c26e:	a33c      	add	r3, pc, #240	; (adr r3, 800c360 <__ieee754_pow+0x720>)
 800c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c274:	4620      	mov	r0, r4
 800c276:	460d      	mov	r5, r1
 800c278:	f7f4 f92e 	bl	80004d8 <__aeabi_dmul>
 800c27c:	4642      	mov	r2, r8
 800c27e:	464b      	mov	r3, r9
 800c280:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c284:	4620      	mov	r0, r4
 800c286:	4629      	mov	r1, r5
 800c288:	f7f3 ff6e 	bl	8000168 <__aeabi_dsub>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	4630      	mov	r0, r6
 800c292:	4639      	mov	r1, r7
 800c294:	f7f3 ff68 	bl	8000168 <__aeabi_dsub>
 800c298:	a333      	add	r3, pc, #204	; (adr r3, 800c368 <__ieee754_pow+0x728>)
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	f7f4 f91b 	bl	80004d8 <__aeabi_dmul>
 800c2a2:	a333      	add	r3, pc, #204	; (adr r3, 800c370 <__ieee754_pow+0x730>)
 800c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a8:	4606      	mov	r6, r0
 800c2aa:	460f      	mov	r7, r1
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	4629      	mov	r1, r5
 800c2b0:	f7f4 f912 	bl	80004d8 <__aeabi_dmul>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	4639      	mov	r1, r7
 800c2bc:	f7f3 ff56 	bl	800016c <__adddf3>
 800c2c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2c2:	4b34      	ldr	r3, [pc, #208]	; (800c394 <__ieee754_pow+0x754>)
 800c2c4:	4413      	add	r3, r2
 800c2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ca:	f7f3 ff4f 	bl	800016c <__adddf3>
 800c2ce:	4680      	mov	r8, r0
 800c2d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c2d2:	4689      	mov	r9, r1
 800c2d4:	f7f4 f896 	bl	8000404 <__aeabi_i2d>
 800c2d8:	4604      	mov	r4, r0
 800c2da:	460d      	mov	r5, r1
 800c2dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2e2:	4b2d      	ldr	r3, [pc, #180]	; (800c398 <__ieee754_pow+0x758>)
 800c2e4:	4413      	add	r3, r2
 800c2e6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c2ea:	4642      	mov	r2, r8
 800c2ec:	464b      	mov	r3, r9
 800c2ee:	f7f3 ff3d 	bl	800016c <__adddf3>
 800c2f2:	4632      	mov	r2, r6
 800c2f4:	463b      	mov	r3, r7
 800c2f6:	f7f3 ff39 	bl	800016c <__adddf3>
 800c2fa:	4622      	mov	r2, r4
 800c2fc:	462b      	mov	r3, r5
 800c2fe:	f7f3 ff35 	bl	800016c <__adddf3>
 800c302:	2000      	movs	r0, #0
 800c304:	4622      	mov	r2, r4
 800c306:	462b      	mov	r3, r5
 800c308:	4682      	mov	sl, r0
 800c30a:	468b      	mov	fp, r1
 800c30c:	f7f3 ff2c 	bl	8000168 <__aeabi_dsub>
 800c310:	4632      	mov	r2, r6
 800c312:	463b      	mov	r3, r7
 800c314:	f7f3 ff28 	bl	8000168 <__aeabi_dsub>
 800c318:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c31c:	f7f3 ff24 	bl	8000168 <__aeabi_dsub>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	4640      	mov	r0, r8
 800c326:	4649      	mov	r1, r9
 800c328:	e60b      	b.n	800bf42 <__ieee754_pow+0x302>
 800c32a:	2601      	movs	r6, #1
 800c32c:	e69f      	b.n	800c06e <__ieee754_pow+0x42e>
 800c32e:	bf00      	nop
 800c330:	4a454eef 	.word	0x4a454eef
 800c334:	3fca7e28 	.word	0x3fca7e28
 800c338:	93c9db65 	.word	0x93c9db65
 800c33c:	3fcd864a 	.word	0x3fcd864a
 800c340:	a91d4101 	.word	0xa91d4101
 800c344:	3fd17460 	.word	0x3fd17460
 800c348:	518f264d 	.word	0x518f264d
 800c34c:	3fd55555 	.word	0x3fd55555
 800c350:	db6fabff 	.word	0xdb6fabff
 800c354:	3fdb6db6 	.word	0x3fdb6db6
 800c358:	33333303 	.word	0x33333303
 800c35c:	3fe33333 	.word	0x3fe33333
 800c360:	e0000000 	.word	0xe0000000
 800c364:	3feec709 	.word	0x3feec709
 800c368:	dc3a03fd 	.word	0xdc3a03fd
 800c36c:	3feec709 	.word	0x3feec709
 800c370:	145b01f5 	.word	0x145b01f5
 800c374:	be3e2fe0 	.word	0xbe3e2fe0
 800c378:	7ff00000 	.word	0x7ff00000
 800c37c:	43400000 	.word	0x43400000
 800c380:	0003988e 	.word	0x0003988e
 800c384:	000bb679 	.word	0x000bb679
 800c388:	0800d668 	.word	0x0800d668
 800c38c:	3ff00000 	.word	0x3ff00000
 800c390:	40080000 	.word	0x40080000
 800c394:	0800d688 	.word	0x0800d688
 800c398:	0800d678 	.word	0x0800d678
 800c39c:	a39c      	add	r3, pc, #624	; (adr r3, 800c610 <__ieee754_pow+0x9d0>)
 800c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a2:	4640      	mov	r0, r8
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	f7f3 fee1 	bl	800016c <__adddf3>
 800c3aa:	4622      	mov	r2, r4
 800c3ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3b0:	462b      	mov	r3, r5
 800c3b2:	4650      	mov	r0, sl
 800c3b4:	4639      	mov	r1, r7
 800c3b6:	f7f3 fed7 	bl	8000168 <__aeabi_dsub>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c2:	f7f4 fb19 	bl	80009f8 <__aeabi_dcmpgt>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	f47f ae06 	bne.w	800bfd8 <__ieee754_pow+0x398>
 800c3cc:	4aa2      	ldr	r2, [pc, #648]	; (800c658 <__ieee754_pow+0xa18>)
 800c3ce:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	f340 8100 	ble.w	800c5d8 <__ieee754_pow+0x998>
 800c3d8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c3dc:	151b      	asrs	r3, r3, #20
 800c3de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c3e2:	fa4a fa03 	asr.w	sl, sl, r3
 800c3e6:	44b2      	add	sl, r6
 800c3e8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c3ec:	489b      	ldr	r0, [pc, #620]	; (800c65c <__ieee754_pow+0xa1c>)
 800c3ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c3f2:	4108      	asrs	r0, r1
 800c3f4:	ea00 030a 	and.w	r3, r0, sl
 800c3f8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c3fc:	f1c1 0114 	rsb	r1, r1, #20
 800c400:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c404:	fa4a fa01 	asr.w	sl, sl, r1
 800c408:	2e00      	cmp	r6, #0
 800c40a:	f04f 0200 	mov.w	r2, #0
 800c40e:	4620      	mov	r0, r4
 800c410:	4629      	mov	r1, r5
 800c412:	bfb8      	it	lt
 800c414:	f1ca 0a00 	rsblt	sl, sl, #0
 800c418:	f7f3 fea6 	bl	8000168 <__aeabi_dsub>
 800c41c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c424:	2400      	movs	r4, #0
 800c426:	4642      	mov	r2, r8
 800c428:	464b      	mov	r3, r9
 800c42a:	f7f3 fe9f 	bl	800016c <__adddf3>
 800c42e:	a37a      	add	r3, pc, #488	; (adr r3, 800c618 <__ieee754_pow+0x9d8>)
 800c430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c434:	4620      	mov	r0, r4
 800c436:	460d      	mov	r5, r1
 800c438:	f7f4 f84e 	bl	80004d8 <__aeabi_dmul>
 800c43c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c440:	4606      	mov	r6, r0
 800c442:	460f      	mov	r7, r1
 800c444:	4620      	mov	r0, r4
 800c446:	4629      	mov	r1, r5
 800c448:	f7f3 fe8e 	bl	8000168 <__aeabi_dsub>
 800c44c:	4602      	mov	r2, r0
 800c44e:	460b      	mov	r3, r1
 800c450:	4640      	mov	r0, r8
 800c452:	4649      	mov	r1, r9
 800c454:	f7f3 fe88 	bl	8000168 <__aeabi_dsub>
 800c458:	a371      	add	r3, pc, #452	; (adr r3, 800c620 <__ieee754_pow+0x9e0>)
 800c45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45e:	f7f4 f83b 	bl	80004d8 <__aeabi_dmul>
 800c462:	a371      	add	r3, pc, #452	; (adr r3, 800c628 <__ieee754_pow+0x9e8>)
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	4680      	mov	r8, r0
 800c46a:	4689      	mov	r9, r1
 800c46c:	4620      	mov	r0, r4
 800c46e:	4629      	mov	r1, r5
 800c470:	f7f4 f832 	bl	80004d8 <__aeabi_dmul>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	4640      	mov	r0, r8
 800c47a:	4649      	mov	r1, r9
 800c47c:	f7f3 fe76 	bl	800016c <__adddf3>
 800c480:	4604      	mov	r4, r0
 800c482:	460d      	mov	r5, r1
 800c484:	4602      	mov	r2, r0
 800c486:	460b      	mov	r3, r1
 800c488:	4630      	mov	r0, r6
 800c48a:	4639      	mov	r1, r7
 800c48c:	f7f3 fe6e 	bl	800016c <__adddf3>
 800c490:	4632      	mov	r2, r6
 800c492:	463b      	mov	r3, r7
 800c494:	4680      	mov	r8, r0
 800c496:	4689      	mov	r9, r1
 800c498:	f7f3 fe66 	bl	8000168 <__aeabi_dsub>
 800c49c:	4602      	mov	r2, r0
 800c49e:	460b      	mov	r3, r1
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	f7f3 fe60 	bl	8000168 <__aeabi_dsub>
 800c4a8:	4642      	mov	r2, r8
 800c4aa:	4606      	mov	r6, r0
 800c4ac:	460f      	mov	r7, r1
 800c4ae:	464b      	mov	r3, r9
 800c4b0:	4640      	mov	r0, r8
 800c4b2:	4649      	mov	r1, r9
 800c4b4:	f7f4 f810 	bl	80004d8 <__aeabi_dmul>
 800c4b8:	a35d      	add	r3, pc, #372	; (adr r3, 800c630 <__ieee754_pow+0x9f0>)
 800c4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4be:	4604      	mov	r4, r0
 800c4c0:	460d      	mov	r5, r1
 800c4c2:	f7f4 f809 	bl	80004d8 <__aeabi_dmul>
 800c4c6:	a35c      	add	r3, pc, #368	; (adr r3, 800c638 <__ieee754_pow+0x9f8>)
 800c4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4cc:	f7f3 fe4c 	bl	8000168 <__aeabi_dsub>
 800c4d0:	4622      	mov	r2, r4
 800c4d2:	462b      	mov	r3, r5
 800c4d4:	f7f4 f800 	bl	80004d8 <__aeabi_dmul>
 800c4d8:	a359      	add	r3, pc, #356	; (adr r3, 800c640 <__ieee754_pow+0xa00>)
 800c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4de:	f7f3 fe45 	bl	800016c <__adddf3>
 800c4e2:	4622      	mov	r2, r4
 800c4e4:	462b      	mov	r3, r5
 800c4e6:	f7f3 fff7 	bl	80004d8 <__aeabi_dmul>
 800c4ea:	a357      	add	r3, pc, #348	; (adr r3, 800c648 <__ieee754_pow+0xa08>)
 800c4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f0:	f7f3 fe3a 	bl	8000168 <__aeabi_dsub>
 800c4f4:	4622      	mov	r2, r4
 800c4f6:	462b      	mov	r3, r5
 800c4f8:	f7f3 ffee 	bl	80004d8 <__aeabi_dmul>
 800c4fc:	a354      	add	r3, pc, #336	; (adr r3, 800c650 <__ieee754_pow+0xa10>)
 800c4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c502:	f7f3 fe33 	bl	800016c <__adddf3>
 800c506:	4622      	mov	r2, r4
 800c508:	462b      	mov	r3, r5
 800c50a:	f7f3 ffe5 	bl	80004d8 <__aeabi_dmul>
 800c50e:	4602      	mov	r2, r0
 800c510:	460b      	mov	r3, r1
 800c512:	4640      	mov	r0, r8
 800c514:	4649      	mov	r1, r9
 800c516:	f7f3 fe27 	bl	8000168 <__aeabi_dsub>
 800c51a:	4604      	mov	r4, r0
 800c51c:	460d      	mov	r5, r1
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	4640      	mov	r0, r8
 800c524:	4649      	mov	r1, r9
 800c526:	f7f3 ffd7 	bl	80004d8 <__aeabi_dmul>
 800c52a:	2200      	movs	r2, #0
 800c52c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c534:	4620      	mov	r0, r4
 800c536:	4629      	mov	r1, r5
 800c538:	f7f3 fe16 	bl	8000168 <__aeabi_dsub>
 800c53c:	4602      	mov	r2, r0
 800c53e:	460b      	mov	r3, r1
 800c540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c544:	f7f4 f8f2 	bl	800072c <__aeabi_ddiv>
 800c548:	4632      	mov	r2, r6
 800c54a:	4604      	mov	r4, r0
 800c54c:	460d      	mov	r5, r1
 800c54e:	463b      	mov	r3, r7
 800c550:	4640      	mov	r0, r8
 800c552:	4649      	mov	r1, r9
 800c554:	f7f3 ffc0 	bl	80004d8 <__aeabi_dmul>
 800c558:	4632      	mov	r2, r6
 800c55a:	463b      	mov	r3, r7
 800c55c:	f7f3 fe06 	bl	800016c <__adddf3>
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	4620      	mov	r0, r4
 800c566:	4629      	mov	r1, r5
 800c568:	f7f3 fdfe 	bl	8000168 <__aeabi_dsub>
 800c56c:	4642      	mov	r2, r8
 800c56e:	464b      	mov	r3, r9
 800c570:	f7f3 fdfa 	bl	8000168 <__aeabi_dsub>
 800c574:	4602      	mov	r2, r0
 800c576:	460b      	mov	r3, r1
 800c578:	2000      	movs	r0, #0
 800c57a:	4939      	ldr	r1, [pc, #228]	; (800c660 <__ieee754_pow+0xa20>)
 800c57c:	f7f3 fdf4 	bl	8000168 <__aeabi_dsub>
 800c580:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c584:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c588:	da29      	bge.n	800c5de <__ieee754_pow+0x99e>
 800c58a:	4652      	mov	r2, sl
 800c58c:	f000 f874 	bl	800c678 <scalbn>
 800c590:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c594:	f7ff bbfd 	b.w	800bd92 <__ieee754_pow+0x152>
 800c598:	4b32      	ldr	r3, [pc, #200]	; (800c664 <__ieee754_pow+0xa24>)
 800c59a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c59e:	429f      	cmp	r7, r3
 800c5a0:	f77f af14 	ble.w	800c3cc <__ieee754_pow+0x78c>
 800c5a4:	4b30      	ldr	r3, [pc, #192]	; (800c668 <__ieee754_pow+0xa28>)
 800c5a6:	440b      	add	r3, r1
 800c5a8:	4303      	orrs	r3, r0
 800c5aa:	d009      	beq.n	800c5c0 <__ieee754_pow+0x980>
 800c5ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	f7f4 fa02 	bl	80009bc <__aeabi_dcmplt>
 800c5b8:	3800      	subs	r0, #0
 800c5ba:	bf18      	it	ne
 800c5bc:	2001      	movne	r0, #1
 800c5be:	e452      	b.n	800be66 <__ieee754_pow+0x226>
 800c5c0:	4622      	mov	r2, r4
 800c5c2:	462b      	mov	r3, r5
 800c5c4:	f7f3 fdd0 	bl	8000168 <__aeabi_dsub>
 800c5c8:	4642      	mov	r2, r8
 800c5ca:	464b      	mov	r3, r9
 800c5cc:	f7f4 fa0a 	bl	80009e4 <__aeabi_dcmpge>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	f43f aefb 	beq.w	800c3cc <__ieee754_pow+0x78c>
 800c5d6:	e7e9      	b.n	800c5ac <__ieee754_pow+0x96c>
 800c5d8:	f04f 0a00 	mov.w	sl, #0
 800c5dc:	e720      	b.n	800c420 <__ieee754_pow+0x7e0>
 800c5de:	4621      	mov	r1, r4
 800c5e0:	e7d6      	b.n	800c590 <__ieee754_pow+0x950>
 800c5e2:	f04f 0b00 	mov.w	fp, #0
 800c5e6:	f8df c078 	ldr.w	ip, [pc, #120]	; 800c660 <__ieee754_pow+0xa20>
 800c5ea:	f7ff bbb9 	b.w	800bd60 <__ieee754_pow+0x120>
 800c5ee:	f04f 0b00 	mov.w	fp, #0
 800c5f2:	f04f 0c00 	mov.w	ip, #0
 800c5f6:	f7ff bbb3 	b.w	800bd60 <__ieee754_pow+0x120>
 800c5fa:	4640      	mov	r0, r8
 800c5fc:	4649      	mov	r1, r9
 800c5fe:	f7ff bb3c 	b.w	800bc7a <__ieee754_pow+0x3a>
 800c602:	9200      	str	r2, [sp, #0]
 800c604:	f7ff bb88 	b.w	800bd18 <__ieee754_pow+0xd8>
 800c608:	2300      	movs	r3, #0
 800c60a:	f7ff bb72 	b.w	800bcf2 <__ieee754_pow+0xb2>
 800c60e:	bf00      	nop
 800c610:	652b82fe 	.word	0x652b82fe
 800c614:	3c971547 	.word	0x3c971547
 800c618:	00000000 	.word	0x00000000
 800c61c:	3fe62e43 	.word	0x3fe62e43
 800c620:	fefa39ef 	.word	0xfefa39ef
 800c624:	3fe62e42 	.word	0x3fe62e42
 800c628:	0ca86c39 	.word	0x0ca86c39
 800c62c:	be205c61 	.word	0xbe205c61
 800c630:	72bea4d0 	.word	0x72bea4d0
 800c634:	3e663769 	.word	0x3e663769
 800c638:	c5d26bf1 	.word	0xc5d26bf1
 800c63c:	3ebbbd41 	.word	0x3ebbbd41
 800c640:	af25de2c 	.word	0xaf25de2c
 800c644:	3f11566a 	.word	0x3f11566a
 800c648:	16bebd93 	.word	0x16bebd93
 800c64c:	3f66c16c 	.word	0x3f66c16c
 800c650:	5555553e 	.word	0x5555553e
 800c654:	3fc55555 	.word	0x3fc55555
 800c658:	3fe00000 	.word	0x3fe00000
 800c65c:	fff00000 	.word	0xfff00000
 800c660:	3ff00000 	.word	0x3ff00000
 800c664:	4090cbff 	.word	0x4090cbff
 800c668:	3f6f3400 	.word	0x3f6f3400

0800c66c <fabs>:
 800c66c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c670:	4619      	mov	r1, r3
 800c672:	4770      	bx	lr
 800c674:	0000      	movs	r0, r0
	...

0800c678 <scalbn>:
 800c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67a:	4616      	mov	r6, r2
 800c67c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c680:	4604      	mov	r4, r0
 800c682:	460d      	mov	r5, r1
 800c684:	460b      	mov	r3, r1
 800c686:	b992      	cbnz	r2, 800c6ae <scalbn+0x36>
 800c688:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c68c:	4303      	orrs	r3, r0
 800c68e:	d03c      	beq.n	800c70a <scalbn+0x92>
 800c690:	4b31      	ldr	r3, [pc, #196]	; (800c758 <scalbn+0xe0>)
 800c692:	2200      	movs	r2, #0
 800c694:	f7f3 ff20 	bl	80004d8 <__aeabi_dmul>
 800c698:	4b30      	ldr	r3, [pc, #192]	; (800c75c <scalbn+0xe4>)
 800c69a:	4604      	mov	r4, r0
 800c69c:	429e      	cmp	r6, r3
 800c69e:	460d      	mov	r5, r1
 800c6a0:	da0f      	bge.n	800c6c2 <scalbn+0x4a>
 800c6a2:	a329      	add	r3, pc, #164	; (adr r3, 800c748 <scalbn+0xd0>)
 800c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a8:	f7f3 ff16 	bl	80004d8 <__aeabi_dmul>
 800c6ac:	e006      	b.n	800c6bc <scalbn+0x44>
 800c6ae:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c6b2:	42ba      	cmp	r2, r7
 800c6b4:	d109      	bne.n	800c6ca <scalbn+0x52>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	f7f3 fd58 	bl	800016c <__adddf3>
 800c6bc:	4604      	mov	r4, r0
 800c6be:	460d      	mov	r5, r1
 800c6c0:	e023      	b.n	800c70a <scalbn+0x92>
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c6c8:	3a36      	subs	r2, #54	; 0x36
 800c6ca:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c6ce:	428e      	cmp	r6, r1
 800c6d0:	dd0e      	ble.n	800c6f0 <scalbn+0x78>
 800c6d2:	a31f      	add	r3, pc, #124	; (adr r3, 800c750 <scalbn+0xd8>)
 800c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c6dc:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c6e0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c6e4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c6e8:	481d      	ldr	r0, [pc, #116]	; (800c760 <scalbn+0xe8>)
 800c6ea:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c6ee:	e7db      	b.n	800c6a8 <scalbn+0x30>
 800c6f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c6f4:	4432      	add	r2, r6
 800c6f6:	428a      	cmp	r2, r1
 800c6f8:	dceb      	bgt.n	800c6d2 <scalbn+0x5a>
 800c6fa:	2a00      	cmp	r2, #0
 800c6fc:	dd08      	ble.n	800c710 <scalbn+0x98>
 800c6fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c702:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c706:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c70a:	4620      	mov	r0, r4
 800c70c:	4629      	mov	r1, r5
 800c70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c710:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c714:	da0c      	bge.n	800c730 <scalbn+0xb8>
 800c716:	a30c      	add	r3, pc, #48	; (adr r3, 800c748 <scalbn+0xd0>)
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c720:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c724:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c728:	480e      	ldr	r0, [pc, #56]	; (800c764 <scalbn+0xec>)
 800c72a:	f041 011f 	orr.w	r1, r1, #31
 800c72e:	e7bb      	b.n	800c6a8 <scalbn+0x30>
 800c730:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c734:	3236      	adds	r2, #54	; 0x36
 800c736:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c73a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c73e:	4620      	mov	r0, r4
 800c740:	4629      	mov	r1, r5
 800c742:	2200      	movs	r2, #0
 800c744:	4b08      	ldr	r3, [pc, #32]	; (800c768 <scalbn+0xf0>)
 800c746:	e7af      	b.n	800c6a8 <scalbn+0x30>
 800c748:	c2f8f359 	.word	0xc2f8f359
 800c74c:	01a56e1f 	.word	0x01a56e1f
 800c750:	8800759c 	.word	0x8800759c
 800c754:	7e37e43c 	.word	0x7e37e43c
 800c758:	43500000 	.word	0x43500000
 800c75c:	ffff3cb0 	.word	0xffff3cb0
 800c760:	8800759c 	.word	0x8800759c
 800c764:	c2f8f359 	.word	0xc2f8f359
 800c768:	3c900000 	.word	0x3c900000

0800c76c <with_errno>:
 800c76c:	b570      	push	{r4, r5, r6, lr}
 800c76e:	4604      	mov	r4, r0
 800c770:	460d      	mov	r5, r1
 800c772:	4616      	mov	r6, r2
 800c774:	f7fb fd3c 	bl	80081f0 <__errno>
 800c778:	4629      	mov	r1, r5
 800c77a:	6006      	str	r6, [r0, #0]
 800c77c:	4620      	mov	r0, r4
 800c77e:	bd70      	pop	{r4, r5, r6, pc}

0800c780 <xflow>:
 800c780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c782:	4615      	mov	r5, r2
 800c784:	461c      	mov	r4, r3
 800c786:	b180      	cbz	r0, 800c7aa <xflow+0x2a>
 800c788:	4610      	mov	r0, r2
 800c78a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c78e:	e9cd 0100 	strd	r0, r1, [sp]
 800c792:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c796:	4628      	mov	r0, r5
 800c798:	4621      	mov	r1, r4
 800c79a:	f7f3 fe9d 	bl	80004d8 <__aeabi_dmul>
 800c79e:	2222      	movs	r2, #34	; 0x22
 800c7a0:	b003      	add	sp, #12
 800c7a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7a6:	f7ff bfe1 	b.w	800c76c <with_errno>
 800c7aa:	4610      	mov	r0, r2
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	e7ee      	b.n	800c78e <xflow+0xe>

0800c7b0 <__math_uflow>:
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c7b6:	f7ff bfe3 	b.w	800c780 <xflow>

0800c7ba <__math_oflow>:
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c7c0:	f7ff bfde 	b.w	800c780 <xflow>

0800c7c4 <_init>:
 800c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c6:	bf00      	nop
 800c7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ca:	bc08      	pop	{r3}
 800c7cc:	469e      	mov	lr, r3
 800c7ce:	4770      	bx	lr

0800c7d0 <_fini>:
 800c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d2:	bf00      	nop
 800c7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d6:	bc08      	pop	{r3}
 800c7d8:	469e      	mov	lr, r3
 800c7da:	4770      	bx	lr
