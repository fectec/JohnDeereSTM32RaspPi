
MatrixKeyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d9c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ecc  08000ecc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ecc  08000ecc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ecc  08000ecc  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ecc  08000ecc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ecc  08000ecc  00010ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ed0  08000ed0  00010ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08000ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000007c  08000f50  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08000f50  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d2e  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000559  00000000  00000000  00020e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  00021370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f2  00000000  00000000  000214d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f53  00000000  00000000  000215ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000020a8  00000000  00000000  0002451d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009dc9  00000000  00000000  000265c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000aa8  00000000  00000000  00030390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00030e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000007c 	.word	0x2000007c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000eb4 	.word	0x08000eb4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000080 	.word	0x20000080
 800016c:	08000eb4 	.word	0x08000eb4

08000170 <main>:

void USER_RCC_ClockEnable( void );
void USER_GPIO_Init( void );

int main( void )
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* Loop forever */

  USER_RCC_ClockEnable( );
 8000174:	f000 f812 	bl	800019c <USER_RCC_ClockEnable>
  USER_GPIO_Init( );
 8000178:	f000 f82a 	bl	80001d0 <USER_GPIO_Init>
  USER_USART1_Init();
 800017c:	f000 f99c 	bl	80004b8 <USER_USART1_Init>

  for(;;)
  {
      selectedKey = USER_MATRIX_KEYBOARD_Read();
 8000180:	f000 f8cc 	bl	800031c <USER_MATRIX_KEYBOARD_Read>
 8000184:	4603      	mov	r3, r0
 8000186:	461a      	mov	r2, r3
 8000188:	4b03      	ldr	r3, [pc, #12]	; (8000198 <main+0x28>)
 800018a:	701a      	strb	r2, [r3, #0]
      printf("%c", selectedKey);
 800018c:	4b02      	ldr	r3, [pc, #8]	; (8000198 <main+0x28>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	4618      	mov	r0, r3
 8000192:	f000 facb 	bl	800072c <putchar>
      selectedKey = USER_MATRIX_KEYBOARD_Read();
 8000196:	e7f3      	b.n	8000180 <main+0x10>
 8000198:	20000098 	.word	0x20000098

0800019c <USER_RCC_ClockEnable>:
  }
}

void USER_RCC_ClockEnable( void )
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0

  // RCC_APB2ENR modified to IO port A clock enable

  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;		// To set IOPAEN bit
 80001a0:	4b0a      	ldr	r3, [pc, #40]	; (80001cc <USER_RCC_ClockEnable+0x30>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a09      	ldr	r2, [pc, #36]	; (80001cc <USER_RCC_ClockEnable+0x30>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]

  // RCC_APB2ENR modified to IO port B clock enable

  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;		// To set IOPBEN bit
 80001ac:	4b07      	ldr	r3, [pc, #28]	; (80001cc <USER_RCC_ClockEnable+0x30>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a06      	ldr	r2, [pc, #24]	; (80001cc <USER_RCC_ClockEnable+0x30>)
 80001b2:	f043 0308 	orr.w	r3, r3, #8
 80001b6:	6193      	str	r3, [r2, #24]

  // RCC_APB2ENR modified to enable the clock for USART1

  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;		// To set USART1EN bit
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <USER_RCC_ClockEnable+0x30>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <USER_RCC_ClockEnable+0x30>)
 80001be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001c2:	6193      	str	r3, [r2, #24]

}
 80001c4:	bf00      	nop
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	40021000 	.word	0x40021000

080001d0 <USER_GPIO_Init>:

void USER_GPIO_Init( void )
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
  // Pin PB1 as input pull up

  GPIOB->CRL	&=	~( GPIO_CRL_MODE1 )
 80001d4:	4b4f      	ldr	r3, [pc, #316]	; (8000314 <USER_GPIO_Init+0x144>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a4e      	ldr	r2, [pc, #312]	; (8000314 <USER_GPIO_Init+0x144>)
 80001da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80001de:	6013      	str	r3, [r2, #0]
		&	~( GPIO_CRL_CNF1_0 );

  GPIOB->CRL	|= 	 ( GPIO_CRL_CNF1_1 );
 80001e0:	4b4c      	ldr	r3, [pc, #304]	; (8000314 <USER_GPIO_Init+0x144>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a4b      	ldr	r2, [pc, #300]	; (8000314 <USER_GPIO_Init+0x144>)
 80001e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001ea:	6013      	str	r3, [r2, #0]
  GPIOB->ODR	|=	 ( GPIO_ODR1 );
 80001ec:	4b49      	ldr	r3, [pc, #292]	; (8000314 <USER_GPIO_Init+0x144>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4a48      	ldr	r2, [pc, #288]	; (8000314 <USER_GPIO_Init+0x144>)
 80001f2:	f043 0302 	orr.w	r3, r3, #2
 80001f6:	60d3      	str	r3, [r2, #12]

  // Pin PB15 as input pull up

  GPIOB->CRH	&=	~( GPIO_CRH_MODE15 )
 80001f8:	4b46      	ldr	r3, [pc, #280]	; (8000314 <USER_GPIO_Init+0x144>)
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	4a45      	ldr	r2, [pc, #276]	; (8000314 <USER_GPIO_Init+0x144>)
 80001fe:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8000202:	6053      	str	r3, [r2, #4]
		&	~( GPIO_CRH_CNF15_0 );

  GPIOB->CRH	|= 	 ( GPIO_CRH_CNF15_1 );
 8000204:	4b43      	ldr	r3, [pc, #268]	; (8000314 <USER_GPIO_Init+0x144>)
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	4a42      	ldr	r2, [pc, #264]	; (8000314 <USER_GPIO_Init+0x144>)
 800020a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800020e:	6053      	str	r3, [r2, #4]
  GPIOB->ODR	|=	 ( GPIO_ODR15 );
 8000210:	4b40      	ldr	r3, [pc, #256]	; (8000314 <USER_GPIO_Init+0x144>)
 8000212:	68db      	ldr	r3, [r3, #12]
 8000214:	4a3f      	ldr	r2, [pc, #252]	; (8000314 <USER_GPIO_Init+0x144>)
 8000216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800021a:	60d3      	str	r3, [r2, #12]

  // Pin PB14 as input pull up

  GPIOB->CRH	&=	~( GPIO_CRH_MODE14 )
 800021c:	4b3d      	ldr	r3, [pc, #244]	; (8000314 <USER_GPIO_Init+0x144>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	4a3c      	ldr	r2, [pc, #240]	; (8000314 <USER_GPIO_Init+0x144>)
 8000222:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000226:	6053      	str	r3, [r2, #4]
		&	~( GPIO_CRH_CNF14_0 );

  GPIOB->CRH	|= 	 ( GPIO_CRH_CNF14_1 );
 8000228:	4b3a      	ldr	r3, [pc, #232]	; (8000314 <USER_GPIO_Init+0x144>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	4a39      	ldr	r2, [pc, #228]	; (8000314 <USER_GPIO_Init+0x144>)
 800022e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000232:	6053      	str	r3, [r2, #4]
  GPIOB->ODR	|=	 ( GPIO_ODR14 );
 8000234:	4b37      	ldr	r3, [pc, #220]	; (8000314 <USER_GPIO_Init+0x144>)
 8000236:	68db      	ldr	r3, [r3, #12]
 8000238:	4a36      	ldr	r2, [pc, #216]	; (8000314 <USER_GPIO_Init+0x144>)
 800023a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800023e:	60d3      	str	r3, [r2, #12]

  // Pin PB13 as input pull up

  GPIOB->CRH	&=	~( GPIO_CRH_MODE13 )
 8000240:	4b34      	ldr	r3, [pc, #208]	; (8000314 <USER_GPIO_Init+0x144>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4a33      	ldr	r2, [pc, #204]	; (8000314 <USER_GPIO_Init+0x144>)
 8000246:	f023 73a8 	bic.w	r3, r3, #22020096	; 0x1500000
 800024a:	6053      	str	r3, [r2, #4]
		&	~( GPIO_CRH_CNF13_0 );

  GPIOB->CRH	|= 	 ( GPIO_CRH_CNF13_1 );
 800024c:	4b31      	ldr	r3, [pc, #196]	; (8000314 <USER_GPIO_Init+0x144>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a30      	ldr	r2, [pc, #192]	; (8000314 <USER_GPIO_Init+0x144>)
 8000252:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000256:	6053      	str	r3, [r2, #4]
  GPIOB->ODR	|=	 ( GPIO_ODR13 );
 8000258:	4b2e      	ldr	r3, [pc, #184]	; (8000314 <USER_GPIO_Init+0x144>)
 800025a:	68db      	ldr	r3, [r3, #12]
 800025c:	4a2d      	ldr	r2, [pc, #180]	; (8000314 <USER_GPIO_Init+0x144>)
 800025e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000262:	60d3      	str	r3, [r2, #12]

  // Pin PB10 as output

  GPIOB->CRH	&=	~( GPIO_CRH_CNF10 )
 8000264:	4b2b      	ldr	r3, [pc, #172]	; (8000314 <USER_GPIO_Init+0x144>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	4a2a      	ldr	r2, [pc, #168]	; (8000314 <USER_GPIO_Init+0x144>)
 800026a:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 800026e:	6053      	str	r3, [r2, #4]
		&	~( GPIO_CRH_MODE10_0 );

  GPIOB->CRH 	|=	 ( GPIO_CRH_MODE10_1 );
 8000270:	4b28      	ldr	r3, [pc, #160]	; (8000314 <USER_GPIO_Init+0x144>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	4a27      	ldr	r2, [pc, #156]	; (8000314 <USER_GPIO_Init+0x144>)
 8000276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800027a:	6053      	str	r3, [r2, #4]
  GPIOB->ODR 	|=	 ( GPIO_ODR_10 );
 800027c:	4b25      	ldr	r3, [pc, #148]	; (8000314 <USER_GPIO_Init+0x144>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	4a24      	ldr	r2, [pc, #144]	; (8000314 <USER_GPIO_Init+0x144>)
 8000282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000286:	60d3      	str	r3, [r2, #12]

  // Pin PB6 as output

  GPIOB->CRL	&=	~( GPIO_CRL_CNF6 )
 8000288:	4b22      	ldr	r3, [pc, #136]	; (8000314 <USER_GPIO_Init+0x144>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a21      	ldr	r2, [pc, #132]	; (8000314 <USER_GPIO_Init+0x144>)
 800028e:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000292:	6013      	str	r3, [r2, #0]
		&	~( GPIO_CRL_MODE6_0 );

  GPIOB->CRL 	|=	 ( GPIO_CRL_MODE6_1 );
 8000294:	4b1f      	ldr	r3, [pc, #124]	; (8000314 <USER_GPIO_Init+0x144>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a1e      	ldr	r2, [pc, #120]	; (8000314 <USER_GPIO_Init+0x144>)
 800029a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800029e:	6013      	str	r3, [r2, #0]
  GPIOB->ODR 	|=	 ( GPIO_ODR6 );
 80002a0:	4b1c      	ldr	r3, [pc, #112]	; (8000314 <USER_GPIO_Init+0x144>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	4a1b      	ldr	r2, [pc, #108]	; (8000314 <USER_GPIO_Init+0x144>)
 80002a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002aa:	60d3      	str	r3, [r2, #12]

  // Pin PB5 as output

  GPIOB->CRL	&=	~( GPIO_CRL_CNF5 )
 80002ac:	4b19      	ldr	r3, [pc, #100]	; (8000314 <USER_GPIO_Init+0x144>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a18      	ldr	r2, [pc, #96]	; (8000314 <USER_GPIO_Init+0x144>)
 80002b2:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80002b6:	6013      	str	r3, [r2, #0]
		&	~( GPIO_CRL_MODE5_0 );

  GPIOB->CRL 	|=	 ( GPIO_CRL_MODE5_1 );
 80002b8:	4b16      	ldr	r3, [pc, #88]	; (8000314 <USER_GPIO_Init+0x144>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a15      	ldr	r2, [pc, #84]	; (8000314 <USER_GPIO_Init+0x144>)
 80002be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c2:	6013      	str	r3, [r2, #0]
  GPIOB->ODR 	|=	 ( GPIO_ODR5 );
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <USER_GPIO_Init+0x144>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	4a12      	ldr	r2, [pc, #72]	; (8000314 <USER_GPIO_Init+0x144>)
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	60d3      	str	r3, [r2, #12]

  // Pin PB7 as output

  GPIOB->CRL	&=	~( GPIO_CRL_CNF7 )
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <USER_GPIO_Init+0x144>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a0f      	ldr	r2, [pc, #60]	; (8000314 <USER_GPIO_Init+0x144>)
 80002d6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80002da:	6013      	str	r3, [r2, #0]
		&	~( GPIO_CRL_MODE7_0 );

  GPIOB->CRL 	|=	 ( GPIO_CRL_MODE7_1 );
 80002dc:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <USER_GPIO_Init+0x144>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a0c      	ldr	r2, [pc, #48]	; (8000314 <USER_GPIO_Init+0x144>)
 80002e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e6:	6013      	str	r3, [r2, #0]
  GPIOB->ODR 	|=	 ( GPIO_ODR7 );
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <USER_GPIO_Init+0x144>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	4a09      	ldr	r2, [pc, #36]	; (8000314 <USER_GPIO_Init+0x144>)
 80002ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002f2:	60d3      	str	r3, [r2, #12]

  // Pin PA9 (USART1_TX) as alternate function output push-pull, max speed 10MHz

  GPIOA->CRH	&=	~( GPIO_CRH_CNF9_0 )
 80002f4:	4b08      	ldr	r3, [pc, #32]	; (8000318 <USER_GPIO_Init+0x148>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	4a07      	ldr	r2, [pc, #28]	; (8000318 <USER_GPIO_Init+0x148>)
 80002fa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80002fe:	6053      	str	r3, [r2, #4]
   		&	~( GPIO_CRH_MODE9 );

  GPIOA->CRH	|=	 ( GPIO_CRH_CNF9 )
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <USER_GPIO_Init+0x148>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a04      	ldr	r2, [pc, #16]	; (8000318 <USER_GPIO_Init+0x148>)
 8000306:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800030a:	6053      	str	r3, [r2, #4]
   		|	 ( GPIO_CRH_MODE9_0 );
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	40010c00 	.word	0x40010c00
 8000318:	40010800 	.word	0x40010800

0800031c <USER_MATRIX_KEYBOARD_Read>:
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};

char USER_MATRIX_KEYBOARD_Read(void) {
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0

  char selectedKey;

  for (unsigned short int i = 0; i < NUMBER_OF_ELEMENTS; i++) {
 8000322:	2300      	movs	r3, #0
 8000324:	80bb      	strh	r3, [r7, #4]
 8000326:	e032      	b.n	800038e <USER_MATRIX_KEYBOARD_Read+0x72>

      GPIOB->BSRR = (1 << (R_POSITIONS[i] + 16));
 8000328:	88bb      	ldrh	r3, [r7, #4]
 800032a:	4a1d      	ldr	r2, [pc, #116]	; (80003a0 <USER_MATRIX_KEYBOARD_Read+0x84>)
 800032c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000330:	3310      	adds	r3, #16
 8000332:	2201      	movs	r2, #1
 8000334:	409a      	lsls	r2, r3
 8000336:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <USER_MATRIX_KEYBOARD_Read+0x88>)
 8000338:	611a      	str	r2, [r3, #16]

      for (unsigned short int j = 0; j < NUMBER_OF_ELEMENTS; j++) {
 800033a:	2300      	movs	r3, #0
 800033c:	807b      	strh	r3, [r7, #2]
 800033e:	e016      	b.n	800036e <USER_MATRIX_KEYBOARD_Read+0x52>

	  if ((GPIOB->IDR & (1 << C_POSITIONS[j])) == 0) {
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <USER_MATRIX_KEYBOARD_Read+0x88>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	887a      	ldrh	r2, [r7, #2]
 8000346:	4918      	ldr	r1, [pc, #96]	; (80003a8 <USER_MATRIX_KEYBOARD_Read+0x8c>)
 8000348:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800034c:	4611      	mov	r1, r2
 800034e:	2201      	movs	r2, #1
 8000350:	408a      	lsls	r2, r1
 8000352:	4013      	ands	r3, r2
 8000354:	2b00      	cmp	r3, #0
 8000356:	d107      	bne.n	8000368 <USER_MATRIX_KEYBOARD_Read+0x4c>
	      selectedKey = keys[i][j];
 8000358:	88ba      	ldrh	r2, [r7, #4]
 800035a:	887b      	ldrh	r3, [r7, #2]
 800035c:	4913      	ldr	r1, [pc, #76]	; (80003ac <USER_MATRIX_KEYBOARD_Read+0x90>)
 800035e:	0092      	lsls	r2, r2, #2
 8000360:	440a      	add	r2, r1
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	71fb      	strb	r3, [r7, #7]
      for (unsigned short int j = 0; j < NUMBER_OF_ELEMENTS; j++) {
 8000368:	887b      	ldrh	r3, [r7, #2]
 800036a:	3301      	adds	r3, #1
 800036c:	807b      	strh	r3, [r7, #2]
 800036e:	887b      	ldrh	r3, [r7, #2]
 8000370:	2b03      	cmp	r3, #3
 8000372:	d9e5      	bls.n	8000340 <USER_MATRIX_KEYBOARD_Read+0x24>
	  }
      }

      GPIOB->BSRR = (1 << R_POSITIONS[i]);
 8000374:	88bb      	ldrh	r3, [r7, #4]
 8000376:	4a0a      	ldr	r2, [pc, #40]	; (80003a0 <USER_MATRIX_KEYBOARD_Read+0x84>)
 8000378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800037c:	461a      	mov	r2, r3
 800037e:	2301      	movs	r3, #1
 8000380:	fa03 f202 	lsl.w	r2, r3, r2
 8000384:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <USER_MATRIX_KEYBOARD_Read+0x88>)
 8000386:	611a      	str	r2, [r3, #16]
  for (unsigned short int i = 0; i < NUMBER_OF_ELEMENTS; i++) {
 8000388:	88bb      	ldrh	r3, [r7, #4]
 800038a:	3301      	adds	r3, #1
 800038c:	80bb      	strh	r3, [r7, #4]
 800038e:	88bb      	ldrh	r3, [r7, #4]
 8000390:	2b03      	cmp	r3, #3
 8000392:	d9c9      	bls.n	8000328 <USER_MATRIX_KEYBOARD_Read+0xc>
  }

  return selectedKey;
 8000394:	79fb      	ldrb	r3, [r7, #7]
}
 8000396:	4618      	mov	r0, r3
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	20000000 	.word	0x20000000
 80003a4:	40010c00 	.word	0x40010c00
 80003a8:	20000008 	.word	0x20000008
 80003ac:	20000010 	.word	0x20000010

080003b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
 80003c0:	e00a      	b.n	80003d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003c2:	f3af 8000 	nop.w
 80003c6:	4601      	mov	r1, r0
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	1c5a      	adds	r2, r3, #1
 80003cc:	60ba      	str	r2, [r7, #8]
 80003ce:	b2ca      	uxtb	r2, r1
 80003d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	3301      	adds	r3, #1
 80003d6:	617b      	str	r3, [r7, #20]
 80003d8:	697a      	ldr	r2, [r7, #20]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	429a      	cmp	r2, r3
 80003de:	dbf0      	blt.n	80003c2 <_read+0x12>
  }

  return len;
 80003e0:	687b      	ldr	r3, [r7, #4]
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3718      	adds	r7, #24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80003ea:	b480      	push	{r7}
 80003ec:	b083      	sub	sp, #12
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000410:	605a      	str	r2, [r3, #4]
  return 0;
 8000412:	2300      	movs	r3, #0
}
 8000414:	4618      	mov	r0, r3
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <_isatty>:

int _isatty(int file)
{
 800041e:	b480      	push	{r7}
 8000420:	b083      	sub	sp, #12
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000426:	2301      	movs	r3, #1
}
 8000428:	4618      	mov	r0, r3
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr

08000432 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000432:	b480      	push	{r7}
 8000434:	b085      	sub	sp, #20
 8000436:	af00      	add	r7, sp, #0
 8000438:	60f8      	str	r0, [r7, #12]
 800043a:	60b9      	str	r1, [r7, #8]
 800043c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	3714      	adds	r7, #20
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
	...

0800044c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000454:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <_sbrk+0x5c>)
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <_sbrk+0x60>)
 8000458:	1ad3      	subs	r3, r2, r3
 800045a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000460:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <_sbrk+0x64>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d102      	bne.n	800046e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <_sbrk+0x64>)
 800046a:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <_sbrk+0x68>)
 800046c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800046e:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <_sbrk+0x64>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4413      	add	r3, r2
 8000476:	693a      	ldr	r2, [r7, #16]
 8000478:	429a      	cmp	r2, r3
 800047a:	d207      	bcs.n	800048c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800047c:	f000 f9f0 	bl	8000860 <__errno>
 8000480:	4603      	mov	r3, r0
 8000482:	220c      	movs	r2, #12
 8000484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e009      	b.n	80004a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <_sbrk+0x64>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000492:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <_sbrk+0x64>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4413      	add	r3, r2
 800049a:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <_sbrk+0x64>)
 800049c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800049e:	68fb      	ldr	r3, [r7, #12]
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3718      	adds	r7, #24
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20005000 	.word	0x20005000
 80004ac:	00000400 	.word	0x00000400
 80004b0:	2000009c 	.word	0x2000009c
 80004b4:	200001f0 	.word	0x200001f0

080004b8 <USER_USART1_Init>:

#include "main.h"
#include "uart.h"

void USER_USART1_Init( void ) 
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
	
  USART1->CR1	|=	 USART_CR1_UE;		//	Step 1 - USART enabled
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <USER_USART1_Init+0x4c>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	4a10      	ldr	r2, [pc, #64]	; (8000504 <USER_USART1_Init+0x4c>)
 80004c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004c6:	60d3      	str	r3, [r2, #12]
  USART1->CR1	&=	~USART_CR1_M;		//	Step 2 - 8 Data bits
 80004c8:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <USER_USART1_Init+0x4c>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <USER_USART1_Init+0x4c>)
 80004ce:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80004d2:	f023 031f 	bic.w	r3, r3, #31
 80004d6:	60d3      	str	r3, [r2, #12]
  USART1->CR2	&=	~USART_CR2_STOP;	//	Step 3 - 1 Stop bit
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <USER_USART1_Init+0x4c>)
 80004da:	691b      	ldr	r3, [r3, #16]
 80004dc:	4a09      	ldr	r2, [pc, #36]	; (8000504 <USER_USART1_Init+0x4c>)
 80004de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80004e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80004e6:	6113      	str	r3, [r2, #16]
  USART1->BRR	 =	 USARTDIV;		//	Step 5 - Desired baud rate
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <USER_USART1_Init+0x4c>)
 80004ea:	2245      	movs	r2, #69	; 0x45
 80004ec:	609a      	str	r2, [r3, #8]
  USART1->CR1	|= 	 USART_CR1_TE;		//	Step 6 - Transmitter enabled
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <USER_USART1_Init+0x4c>)
 80004f0:	68db      	ldr	r3, [r3, #12]
 80004f2:	4a04      	ldr	r2, [pc, #16]	; (8000504 <USER_USART1_Init+0x4c>)
 80004f4:	f043 0308 	orr.w	r3, r3, #8
 80004f8:	60d3      	str	r3, [r2, #12]
	
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40013800 	.word	0x40013800

08000508 <_write>:
 *
 * It redirects standard output stream in C to USART peripheral
 * device */

int _write(int file, char *ptr, int len) 
{
 8000508:	b480      	push	{r7}
 800050a:	b087      	sub	sp, #28
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]

  int DataIdx;

  for( DataIdx = 0 ; DataIdx < len; DataIdx++ ) {
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e00f      	b.n	800053a <_write+0x32>
    while(!( USART1->SR & USART_SR_TXE ));	// Wait until USART_DR is empty
 800051a:	bf00      	nop
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <_write+0x48>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0f9      	beq.n	800051c <_write+0x14>
    USART1->DR = *ptr++;			// Transmit data
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	60ba      	str	r2, [r7, #8]
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <_write+0x48>)
 8000532:	605a      	str	r2, [r3, #4]
  for( DataIdx = 0 ; DataIdx < len; DataIdx++ ) {
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	3301      	adds	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	697a      	ldr	r2, [r7, #20]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	dbeb      	blt.n	800051a <_write+0x12>
  }

  return len;
 8000542:	687b      	ldr	r3, [r7, #4]
	
}
 8000544:	4618      	mov	r0, r3
 8000546:	371c      	adds	r7, #28
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40013800 	.word	0x40013800

08000554 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000554:	480d      	ldr	r0, [pc, #52]	; (800058c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000556:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000558:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <LoopForever+0x6>)
  ldr r1, =_edata
 800055e:	490d      	ldr	r1, [pc, #52]	; (8000594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000560:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <LoopForever+0xe>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000572:	4a0a      	ldr	r2, [pc, #40]	; (800059c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000574:	4c0a      	ldr	r4, [pc, #40]	; (80005a0 <LoopForever+0x16>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000582:	f000 f973 	bl	800086c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000586:	f7ff fdf3 	bl	8000170 <main>

0800058a <LoopForever>:

LoopForever:
  b LoopForever
 800058a:	e7fe      	b.n	800058a <LoopForever>
  ldr   r0, =_estack
 800058c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000594:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000598:	08000ed4 	.word	0x08000ed4
  ldr r2, =_sbss
 800059c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80005a0:	200001ec 	.word	0x200001ec

080005a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a4:	e7fe      	b.n	80005a4 <ADC1_2_IRQHandler>
	...

080005a8 <std>:
 80005a8:	2300      	movs	r3, #0
 80005aa:	b510      	push	{r4, lr}
 80005ac:	4604      	mov	r4, r0
 80005ae:	e9c0 3300 	strd	r3, r3, [r0]
 80005b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005b6:	6083      	str	r3, [r0, #8]
 80005b8:	8181      	strh	r1, [r0, #12]
 80005ba:	6643      	str	r3, [r0, #100]	; 0x64
 80005bc:	81c2      	strh	r2, [r0, #14]
 80005be:	6183      	str	r3, [r0, #24]
 80005c0:	4619      	mov	r1, r3
 80005c2:	2208      	movs	r2, #8
 80005c4:	305c      	adds	r0, #92	; 0x5c
 80005c6:	f000 f8fc 	bl	80007c2 <memset>
 80005ca:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <std+0x58>)
 80005cc:	6224      	str	r4, [r4, #32]
 80005ce:	6263      	str	r3, [r4, #36]	; 0x24
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <std+0x5c>)
 80005d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <std+0x60>)
 80005d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <std+0x64>)
 80005da:	6323      	str	r3, [r4, #48]	; 0x30
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <std+0x68>)
 80005de:	429c      	cmp	r4, r3
 80005e0:	d006      	beq.n	80005f0 <std+0x48>
 80005e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80005e6:	4294      	cmp	r4, r2
 80005e8:	d002      	beq.n	80005f0 <std+0x48>
 80005ea:	33d0      	adds	r3, #208	; 0xd0
 80005ec:	429c      	cmp	r4, r3
 80005ee:	d105      	bne.n	80005fc <std+0x54>
 80005f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80005f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005f8:	f000 b95c 	b.w	80008b4 <__retarget_lock_init_recursive>
 80005fc:	bd10      	pop	{r4, pc}
 80005fe:	bf00      	nop
 8000600:	0800073d 	.word	0x0800073d
 8000604:	0800075f 	.word	0x0800075f
 8000608:	08000797 	.word	0x08000797
 800060c:	080007bb 	.word	0x080007bb
 8000610:	200000a0 	.word	0x200000a0

08000614 <stdio_exit_handler>:
 8000614:	4a02      	ldr	r2, [pc, #8]	; (8000620 <stdio_exit_handler+0xc>)
 8000616:	4903      	ldr	r1, [pc, #12]	; (8000624 <stdio_exit_handler+0x10>)
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <stdio_exit_handler+0x14>)
 800061a:	f000 b869 	b.w	80006f0 <_fwalk_sglue>
 800061e:	bf00      	nop
 8000620:	20000020 	.word	0x20000020
 8000624:	08000ba9 	.word	0x08000ba9
 8000628:	2000002c 	.word	0x2000002c

0800062c <cleanup_stdio>:
 800062c:	6841      	ldr	r1, [r0, #4]
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <cleanup_stdio+0x34>)
 8000630:	b510      	push	{r4, lr}
 8000632:	4299      	cmp	r1, r3
 8000634:	4604      	mov	r4, r0
 8000636:	d001      	beq.n	800063c <cleanup_stdio+0x10>
 8000638:	f000 fab6 	bl	8000ba8 <_fflush_r>
 800063c:	68a1      	ldr	r1, [r4, #8]
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <cleanup_stdio+0x38>)
 8000640:	4299      	cmp	r1, r3
 8000642:	d002      	beq.n	800064a <cleanup_stdio+0x1e>
 8000644:	4620      	mov	r0, r4
 8000646:	f000 faaf 	bl	8000ba8 <_fflush_r>
 800064a:	68e1      	ldr	r1, [r4, #12]
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <cleanup_stdio+0x3c>)
 800064e:	4299      	cmp	r1, r3
 8000650:	d004      	beq.n	800065c <cleanup_stdio+0x30>
 8000652:	4620      	mov	r0, r4
 8000654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000658:	f000 baa6 	b.w	8000ba8 <_fflush_r>
 800065c:	bd10      	pop	{r4, pc}
 800065e:	bf00      	nop
 8000660:	200000a0 	.word	0x200000a0
 8000664:	20000108 	.word	0x20000108
 8000668:	20000170 	.word	0x20000170

0800066c <global_stdio_init.part.0>:
 800066c:	b510      	push	{r4, lr}
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <global_stdio_init.part.0+0x30>)
 8000670:	4c0b      	ldr	r4, [pc, #44]	; (80006a0 <global_stdio_init.part.0+0x34>)
 8000672:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <global_stdio_init.part.0+0x38>)
 8000674:	4620      	mov	r0, r4
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	2104      	movs	r1, #4
 800067a:	2200      	movs	r2, #0
 800067c:	f7ff ff94 	bl	80005a8 <std>
 8000680:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000684:	2201      	movs	r2, #1
 8000686:	2109      	movs	r1, #9
 8000688:	f7ff ff8e 	bl	80005a8 <std>
 800068c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000690:	2202      	movs	r2, #2
 8000692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000696:	2112      	movs	r1, #18
 8000698:	f7ff bf86 	b.w	80005a8 <std>
 800069c:	200001d8 	.word	0x200001d8
 80006a0:	200000a0 	.word	0x200000a0
 80006a4:	08000615 	.word	0x08000615

080006a8 <__sfp_lock_acquire>:
 80006a8:	4801      	ldr	r0, [pc, #4]	; (80006b0 <__sfp_lock_acquire+0x8>)
 80006aa:	f000 b904 	b.w	80008b6 <__retarget_lock_acquire_recursive>
 80006ae:	bf00      	nop
 80006b0:	200001e1 	.word	0x200001e1

080006b4 <__sfp_lock_release>:
 80006b4:	4801      	ldr	r0, [pc, #4]	; (80006bc <__sfp_lock_release+0x8>)
 80006b6:	f000 b8ff 	b.w	80008b8 <__retarget_lock_release_recursive>
 80006ba:	bf00      	nop
 80006bc:	200001e1 	.word	0x200001e1

080006c0 <__sinit>:
 80006c0:	b510      	push	{r4, lr}
 80006c2:	4604      	mov	r4, r0
 80006c4:	f7ff fff0 	bl	80006a8 <__sfp_lock_acquire>
 80006c8:	6a23      	ldr	r3, [r4, #32]
 80006ca:	b11b      	cbz	r3, 80006d4 <__sinit+0x14>
 80006cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d0:	f7ff bff0 	b.w	80006b4 <__sfp_lock_release>
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <__sinit+0x28>)
 80006d6:	6223      	str	r3, [r4, #32]
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <__sinit+0x2c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f5      	bne.n	80006cc <__sinit+0xc>
 80006e0:	f7ff ffc4 	bl	800066c <global_stdio_init.part.0>
 80006e4:	e7f2      	b.n	80006cc <__sinit+0xc>
 80006e6:	bf00      	nop
 80006e8:	0800062d 	.word	0x0800062d
 80006ec:	200001d8 	.word	0x200001d8

080006f0 <_fwalk_sglue>:
 80006f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006f4:	4607      	mov	r7, r0
 80006f6:	4688      	mov	r8, r1
 80006f8:	4614      	mov	r4, r2
 80006fa:	2600      	movs	r6, #0
 80006fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000700:	f1b9 0901 	subs.w	r9, r9, #1
 8000704:	d505      	bpl.n	8000712 <_fwalk_sglue+0x22>
 8000706:	6824      	ldr	r4, [r4, #0]
 8000708:	2c00      	cmp	r4, #0
 800070a:	d1f7      	bne.n	80006fc <_fwalk_sglue+0xc>
 800070c:	4630      	mov	r0, r6
 800070e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000712:	89ab      	ldrh	r3, [r5, #12]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d907      	bls.n	8000728 <_fwalk_sglue+0x38>
 8000718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800071c:	3301      	adds	r3, #1
 800071e:	d003      	beq.n	8000728 <_fwalk_sglue+0x38>
 8000720:	4629      	mov	r1, r5
 8000722:	4638      	mov	r0, r7
 8000724:	47c0      	blx	r8
 8000726:	4306      	orrs	r6, r0
 8000728:	3568      	adds	r5, #104	; 0x68
 800072a:	e7e9      	b.n	8000700 <_fwalk_sglue+0x10>

0800072c <putchar>:
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <putchar+0xc>)
 800072e:	4601      	mov	r1, r0
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	6882      	ldr	r2, [r0, #8]
 8000734:	f000 ba60 	b.w	8000bf8 <_putc_r>
 8000738:	20000078 	.word	0x20000078

0800073c <__sread>:
 800073c:	b510      	push	{r4, lr}
 800073e:	460c      	mov	r4, r1
 8000740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000744:	f000 f868 	bl	8000818 <_read_r>
 8000748:	2800      	cmp	r0, #0
 800074a:	bfab      	itete	ge
 800074c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800074e:	89a3      	ldrhlt	r3, [r4, #12]
 8000750:	181b      	addge	r3, r3, r0
 8000752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000756:	bfac      	ite	ge
 8000758:	6563      	strge	r3, [r4, #84]	; 0x54
 800075a:	81a3      	strhlt	r3, [r4, #12]
 800075c:	bd10      	pop	{r4, pc}

0800075e <__swrite>:
 800075e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000762:	461f      	mov	r7, r3
 8000764:	898b      	ldrh	r3, [r1, #12]
 8000766:	4605      	mov	r5, r0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	460c      	mov	r4, r1
 800076c:	4616      	mov	r6, r2
 800076e:	d505      	bpl.n	800077c <__swrite+0x1e>
 8000770:	2302      	movs	r3, #2
 8000772:	2200      	movs	r2, #0
 8000774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000778:	f000 f83c 	bl	80007f4 <_lseek_r>
 800077c:	89a3      	ldrh	r3, [r4, #12]
 800077e:	4632      	mov	r2, r6
 8000780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000784:	81a3      	strh	r3, [r4, #12]
 8000786:	4628      	mov	r0, r5
 8000788:	463b      	mov	r3, r7
 800078a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800078e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000792:	f000 b853 	b.w	800083c <_write_r>

08000796 <__sseek>:
 8000796:	b510      	push	{r4, lr}
 8000798:	460c      	mov	r4, r1
 800079a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800079e:	f000 f829 	bl	80007f4 <_lseek_r>
 80007a2:	1c43      	adds	r3, r0, #1
 80007a4:	89a3      	ldrh	r3, [r4, #12]
 80007a6:	bf15      	itete	ne
 80007a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80007aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80007ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80007b2:	81a3      	strheq	r3, [r4, #12]
 80007b4:	bf18      	it	ne
 80007b6:	81a3      	strhne	r3, [r4, #12]
 80007b8:	bd10      	pop	{r4, pc}

080007ba <__sclose>:
 80007ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007be:	f000 b809 	b.w	80007d4 <_close_r>

080007c2 <memset>:
 80007c2:	4603      	mov	r3, r0
 80007c4:	4402      	add	r2, r0
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d100      	bne.n	80007cc <memset+0xa>
 80007ca:	4770      	bx	lr
 80007cc:	f803 1b01 	strb.w	r1, [r3], #1
 80007d0:	e7f9      	b.n	80007c6 <memset+0x4>
	...

080007d4 <_close_r>:
 80007d4:	b538      	push	{r3, r4, r5, lr}
 80007d6:	2300      	movs	r3, #0
 80007d8:	4d05      	ldr	r5, [pc, #20]	; (80007f0 <_close_r+0x1c>)
 80007da:	4604      	mov	r4, r0
 80007dc:	4608      	mov	r0, r1
 80007de:	602b      	str	r3, [r5, #0]
 80007e0:	f7ff fe03 	bl	80003ea <_close>
 80007e4:	1c43      	adds	r3, r0, #1
 80007e6:	d102      	bne.n	80007ee <_close_r+0x1a>
 80007e8:	682b      	ldr	r3, [r5, #0]
 80007ea:	b103      	cbz	r3, 80007ee <_close_r+0x1a>
 80007ec:	6023      	str	r3, [r4, #0]
 80007ee:	bd38      	pop	{r3, r4, r5, pc}
 80007f0:	200001dc 	.word	0x200001dc

080007f4 <_lseek_r>:
 80007f4:	b538      	push	{r3, r4, r5, lr}
 80007f6:	4604      	mov	r4, r0
 80007f8:	4608      	mov	r0, r1
 80007fa:	4611      	mov	r1, r2
 80007fc:	2200      	movs	r2, #0
 80007fe:	4d05      	ldr	r5, [pc, #20]	; (8000814 <_lseek_r+0x20>)
 8000800:	602a      	str	r2, [r5, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	f7ff fe15 	bl	8000432 <_lseek>
 8000808:	1c43      	adds	r3, r0, #1
 800080a:	d102      	bne.n	8000812 <_lseek_r+0x1e>
 800080c:	682b      	ldr	r3, [r5, #0]
 800080e:	b103      	cbz	r3, 8000812 <_lseek_r+0x1e>
 8000810:	6023      	str	r3, [r4, #0]
 8000812:	bd38      	pop	{r3, r4, r5, pc}
 8000814:	200001dc 	.word	0x200001dc

08000818 <_read_r>:
 8000818:	b538      	push	{r3, r4, r5, lr}
 800081a:	4604      	mov	r4, r0
 800081c:	4608      	mov	r0, r1
 800081e:	4611      	mov	r1, r2
 8000820:	2200      	movs	r2, #0
 8000822:	4d05      	ldr	r5, [pc, #20]	; (8000838 <_read_r+0x20>)
 8000824:	602a      	str	r2, [r5, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	f7ff fdc2 	bl	80003b0 <_read>
 800082c:	1c43      	adds	r3, r0, #1
 800082e:	d102      	bne.n	8000836 <_read_r+0x1e>
 8000830:	682b      	ldr	r3, [r5, #0]
 8000832:	b103      	cbz	r3, 8000836 <_read_r+0x1e>
 8000834:	6023      	str	r3, [r4, #0]
 8000836:	bd38      	pop	{r3, r4, r5, pc}
 8000838:	200001dc 	.word	0x200001dc

0800083c <_write_r>:
 800083c:	b538      	push	{r3, r4, r5, lr}
 800083e:	4604      	mov	r4, r0
 8000840:	4608      	mov	r0, r1
 8000842:	4611      	mov	r1, r2
 8000844:	2200      	movs	r2, #0
 8000846:	4d05      	ldr	r5, [pc, #20]	; (800085c <_write_r+0x20>)
 8000848:	602a      	str	r2, [r5, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	f7ff fe5c 	bl	8000508 <_write>
 8000850:	1c43      	adds	r3, r0, #1
 8000852:	d102      	bne.n	800085a <_write_r+0x1e>
 8000854:	682b      	ldr	r3, [r5, #0]
 8000856:	b103      	cbz	r3, 800085a <_write_r+0x1e>
 8000858:	6023      	str	r3, [r4, #0]
 800085a:	bd38      	pop	{r3, r4, r5, pc}
 800085c:	200001dc 	.word	0x200001dc

08000860 <__errno>:
 8000860:	4b01      	ldr	r3, [pc, #4]	; (8000868 <__errno+0x8>)
 8000862:	6818      	ldr	r0, [r3, #0]
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000078 	.word	0x20000078

0800086c <__libc_init_array>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	2600      	movs	r6, #0
 8000870:	4d0c      	ldr	r5, [pc, #48]	; (80008a4 <__libc_init_array+0x38>)
 8000872:	4c0d      	ldr	r4, [pc, #52]	; (80008a8 <__libc_init_array+0x3c>)
 8000874:	1b64      	subs	r4, r4, r5
 8000876:	10a4      	asrs	r4, r4, #2
 8000878:	42a6      	cmp	r6, r4
 800087a:	d109      	bne.n	8000890 <__libc_init_array+0x24>
 800087c:	f000 fb1a 	bl	8000eb4 <_init>
 8000880:	2600      	movs	r6, #0
 8000882:	4d0a      	ldr	r5, [pc, #40]	; (80008ac <__libc_init_array+0x40>)
 8000884:	4c0a      	ldr	r4, [pc, #40]	; (80008b0 <__libc_init_array+0x44>)
 8000886:	1b64      	subs	r4, r4, r5
 8000888:	10a4      	asrs	r4, r4, #2
 800088a:	42a6      	cmp	r6, r4
 800088c:	d105      	bne.n	800089a <__libc_init_array+0x2e>
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f855 3b04 	ldr.w	r3, [r5], #4
 8000894:	4798      	blx	r3
 8000896:	3601      	adds	r6, #1
 8000898:	e7ee      	b.n	8000878 <__libc_init_array+0xc>
 800089a:	f855 3b04 	ldr.w	r3, [r5], #4
 800089e:	4798      	blx	r3
 80008a0:	3601      	adds	r6, #1
 80008a2:	e7f2      	b.n	800088a <__libc_init_array+0x1e>
 80008a4:	08000ecc 	.word	0x08000ecc
 80008a8:	08000ecc 	.word	0x08000ecc
 80008ac:	08000ecc 	.word	0x08000ecc
 80008b0:	08000ed0 	.word	0x08000ed0

080008b4 <__retarget_lock_init_recursive>:
 80008b4:	4770      	bx	lr

080008b6 <__retarget_lock_acquire_recursive>:
 80008b6:	4770      	bx	lr

080008b8 <__retarget_lock_release_recursive>:
 80008b8:	4770      	bx	lr
	...

080008bc <_free_r>:
 80008bc:	b538      	push	{r3, r4, r5, lr}
 80008be:	4605      	mov	r5, r0
 80008c0:	2900      	cmp	r1, #0
 80008c2:	d040      	beq.n	8000946 <_free_r+0x8a>
 80008c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008c8:	1f0c      	subs	r4, r1, #4
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	bfb8      	it	lt
 80008ce:	18e4      	addlt	r4, r4, r3
 80008d0:	f000 f8dc 	bl	8000a8c <__malloc_lock>
 80008d4:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <_free_r+0x8c>)
 80008d6:	6813      	ldr	r3, [r2, #0]
 80008d8:	b933      	cbnz	r3, 80008e8 <_free_r+0x2c>
 80008da:	6063      	str	r3, [r4, #4]
 80008dc:	6014      	str	r4, [r2, #0]
 80008de:	4628      	mov	r0, r5
 80008e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80008e4:	f000 b8d8 	b.w	8000a98 <__malloc_unlock>
 80008e8:	42a3      	cmp	r3, r4
 80008ea:	d908      	bls.n	80008fe <_free_r+0x42>
 80008ec:	6820      	ldr	r0, [r4, #0]
 80008ee:	1821      	adds	r1, r4, r0
 80008f0:	428b      	cmp	r3, r1
 80008f2:	bf01      	itttt	eq
 80008f4:	6819      	ldreq	r1, [r3, #0]
 80008f6:	685b      	ldreq	r3, [r3, #4]
 80008f8:	1809      	addeq	r1, r1, r0
 80008fa:	6021      	streq	r1, [r4, #0]
 80008fc:	e7ed      	b.n	80008da <_free_r+0x1e>
 80008fe:	461a      	mov	r2, r3
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	b10b      	cbz	r3, 8000908 <_free_r+0x4c>
 8000904:	42a3      	cmp	r3, r4
 8000906:	d9fa      	bls.n	80008fe <_free_r+0x42>
 8000908:	6811      	ldr	r1, [r2, #0]
 800090a:	1850      	adds	r0, r2, r1
 800090c:	42a0      	cmp	r0, r4
 800090e:	d10b      	bne.n	8000928 <_free_r+0x6c>
 8000910:	6820      	ldr	r0, [r4, #0]
 8000912:	4401      	add	r1, r0
 8000914:	1850      	adds	r0, r2, r1
 8000916:	4283      	cmp	r3, r0
 8000918:	6011      	str	r1, [r2, #0]
 800091a:	d1e0      	bne.n	80008de <_free_r+0x22>
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	4408      	add	r0, r1
 8000922:	6010      	str	r0, [r2, #0]
 8000924:	6053      	str	r3, [r2, #4]
 8000926:	e7da      	b.n	80008de <_free_r+0x22>
 8000928:	d902      	bls.n	8000930 <_free_r+0x74>
 800092a:	230c      	movs	r3, #12
 800092c:	602b      	str	r3, [r5, #0]
 800092e:	e7d6      	b.n	80008de <_free_r+0x22>
 8000930:	6820      	ldr	r0, [r4, #0]
 8000932:	1821      	adds	r1, r4, r0
 8000934:	428b      	cmp	r3, r1
 8000936:	bf01      	itttt	eq
 8000938:	6819      	ldreq	r1, [r3, #0]
 800093a:	685b      	ldreq	r3, [r3, #4]
 800093c:	1809      	addeq	r1, r1, r0
 800093e:	6021      	streq	r1, [r4, #0]
 8000940:	6063      	str	r3, [r4, #4]
 8000942:	6054      	str	r4, [r2, #4]
 8000944:	e7cb      	b.n	80008de <_free_r+0x22>
 8000946:	bd38      	pop	{r3, r4, r5, pc}
 8000948:	200001e4 	.word	0x200001e4

0800094c <sbrk_aligned>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	4e0e      	ldr	r6, [pc, #56]	; (8000988 <sbrk_aligned+0x3c>)
 8000950:	460c      	mov	r4, r1
 8000952:	6831      	ldr	r1, [r6, #0]
 8000954:	4605      	mov	r5, r0
 8000956:	b911      	cbnz	r1, 800095e <sbrk_aligned+0x12>
 8000958:	f000 fa18 	bl	8000d8c <_sbrk_r>
 800095c:	6030      	str	r0, [r6, #0]
 800095e:	4621      	mov	r1, r4
 8000960:	4628      	mov	r0, r5
 8000962:	f000 fa13 	bl	8000d8c <_sbrk_r>
 8000966:	1c43      	adds	r3, r0, #1
 8000968:	d00a      	beq.n	8000980 <sbrk_aligned+0x34>
 800096a:	1cc4      	adds	r4, r0, #3
 800096c:	f024 0403 	bic.w	r4, r4, #3
 8000970:	42a0      	cmp	r0, r4
 8000972:	d007      	beq.n	8000984 <sbrk_aligned+0x38>
 8000974:	1a21      	subs	r1, r4, r0
 8000976:	4628      	mov	r0, r5
 8000978:	f000 fa08 	bl	8000d8c <_sbrk_r>
 800097c:	3001      	adds	r0, #1
 800097e:	d101      	bne.n	8000984 <sbrk_aligned+0x38>
 8000980:	f04f 34ff 	mov.w	r4, #4294967295
 8000984:	4620      	mov	r0, r4
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	200001e8 	.word	0x200001e8

0800098c <_malloc_r>:
 800098c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000990:	1ccd      	adds	r5, r1, #3
 8000992:	f025 0503 	bic.w	r5, r5, #3
 8000996:	3508      	adds	r5, #8
 8000998:	2d0c      	cmp	r5, #12
 800099a:	bf38      	it	cc
 800099c:	250c      	movcc	r5, #12
 800099e:	2d00      	cmp	r5, #0
 80009a0:	4607      	mov	r7, r0
 80009a2:	db01      	blt.n	80009a8 <_malloc_r+0x1c>
 80009a4:	42a9      	cmp	r1, r5
 80009a6:	d905      	bls.n	80009b4 <_malloc_r+0x28>
 80009a8:	230c      	movs	r3, #12
 80009aa:	2600      	movs	r6, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4630      	mov	r0, r6
 80009b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000a88 <_malloc_r+0xfc>
 80009b8:	f000 f868 	bl	8000a8c <__malloc_lock>
 80009bc:	f8d8 3000 	ldr.w	r3, [r8]
 80009c0:	461c      	mov	r4, r3
 80009c2:	bb5c      	cbnz	r4, 8000a1c <_malloc_r+0x90>
 80009c4:	4629      	mov	r1, r5
 80009c6:	4638      	mov	r0, r7
 80009c8:	f7ff ffc0 	bl	800094c <sbrk_aligned>
 80009cc:	1c43      	adds	r3, r0, #1
 80009ce:	4604      	mov	r4, r0
 80009d0:	d155      	bne.n	8000a7e <_malloc_r+0xf2>
 80009d2:	f8d8 4000 	ldr.w	r4, [r8]
 80009d6:	4626      	mov	r6, r4
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d145      	bne.n	8000a68 <_malloc_r+0xdc>
 80009dc:	2c00      	cmp	r4, #0
 80009de:	d048      	beq.n	8000a72 <_malloc_r+0xe6>
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	4631      	mov	r1, r6
 80009e4:	4638      	mov	r0, r7
 80009e6:	eb04 0903 	add.w	r9, r4, r3
 80009ea:	f000 f9cf 	bl	8000d8c <_sbrk_r>
 80009ee:	4581      	cmp	r9, r0
 80009f0:	d13f      	bne.n	8000a72 <_malloc_r+0xe6>
 80009f2:	6821      	ldr	r1, [r4, #0]
 80009f4:	4638      	mov	r0, r7
 80009f6:	1a6d      	subs	r5, r5, r1
 80009f8:	4629      	mov	r1, r5
 80009fa:	f7ff ffa7 	bl	800094c <sbrk_aligned>
 80009fe:	3001      	adds	r0, #1
 8000a00:	d037      	beq.n	8000a72 <_malloc_r+0xe6>
 8000a02:	6823      	ldr	r3, [r4, #0]
 8000a04:	442b      	add	r3, r5
 8000a06:	6023      	str	r3, [r4, #0]
 8000a08:	f8d8 3000 	ldr.w	r3, [r8]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d038      	beq.n	8000a82 <_malloc_r+0xf6>
 8000a10:	685a      	ldr	r2, [r3, #4]
 8000a12:	42a2      	cmp	r2, r4
 8000a14:	d12b      	bne.n	8000a6e <_malloc_r+0xe2>
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	e00f      	b.n	8000a3c <_malloc_r+0xb0>
 8000a1c:	6822      	ldr	r2, [r4, #0]
 8000a1e:	1b52      	subs	r2, r2, r5
 8000a20:	d41f      	bmi.n	8000a62 <_malloc_r+0xd6>
 8000a22:	2a0b      	cmp	r2, #11
 8000a24:	d917      	bls.n	8000a56 <_malloc_r+0xca>
 8000a26:	1961      	adds	r1, r4, r5
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	6025      	str	r5, [r4, #0]
 8000a2c:	bf18      	it	ne
 8000a2e:	6059      	strne	r1, [r3, #4]
 8000a30:	6863      	ldr	r3, [r4, #4]
 8000a32:	bf08      	it	eq
 8000a34:	f8c8 1000 	streq.w	r1, [r8]
 8000a38:	5162      	str	r2, [r4, r5]
 8000a3a:	604b      	str	r3, [r1, #4]
 8000a3c:	4638      	mov	r0, r7
 8000a3e:	f104 060b 	add.w	r6, r4, #11
 8000a42:	f000 f829 	bl	8000a98 <__malloc_unlock>
 8000a46:	f026 0607 	bic.w	r6, r6, #7
 8000a4a:	1d23      	adds	r3, r4, #4
 8000a4c:	1af2      	subs	r2, r6, r3
 8000a4e:	d0ae      	beq.n	80009ae <_malloc_r+0x22>
 8000a50:	1b9b      	subs	r3, r3, r6
 8000a52:	50a3      	str	r3, [r4, r2]
 8000a54:	e7ab      	b.n	80009ae <_malloc_r+0x22>
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	6862      	ldr	r2, [r4, #4]
 8000a5a:	d1dd      	bne.n	8000a18 <_malloc_r+0x8c>
 8000a5c:	f8c8 2000 	str.w	r2, [r8]
 8000a60:	e7ec      	b.n	8000a3c <_malloc_r+0xb0>
 8000a62:	4623      	mov	r3, r4
 8000a64:	6864      	ldr	r4, [r4, #4]
 8000a66:	e7ac      	b.n	80009c2 <_malloc_r+0x36>
 8000a68:	4634      	mov	r4, r6
 8000a6a:	6876      	ldr	r6, [r6, #4]
 8000a6c:	e7b4      	b.n	80009d8 <_malloc_r+0x4c>
 8000a6e:	4613      	mov	r3, r2
 8000a70:	e7cc      	b.n	8000a0c <_malloc_r+0x80>
 8000a72:	230c      	movs	r3, #12
 8000a74:	4638      	mov	r0, r7
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	f000 f80e 	bl	8000a98 <__malloc_unlock>
 8000a7c:	e797      	b.n	80009ae <_malloc_r+0x22>
 8000a7e:	6025      	str	r5, [r4, #0]
 8000a80:	e7dc      	b.n	8000a3c <_malloc_r+0xb0>
 8000a82:	605b      	str	r3, [r3, #4]
 8000a84:	deff      	udf	#255	; 0xff
 8000a86:	bf00      	nop
 8000a88:	200001e4 	.word	0x200001e4

08000a8c <__malloc_lock>:
 8000a8c:	4801      	ldr	r0, [pc, #4]	; (8000a94 <__malloc_lock+0x8>)
 8000a8e:	f7ff bf12 	b.w	80008b6 <__retarget_lock_acquire_recursive>
 8000a92:	bf00      	nop
 8000a94:	200001e0 	.word	0x200001e0

08000a98 <__malloc_unlock>:
 8000a98:	4801      	ldr	r0, [pc, #4]	; (8000aa0 <__malloc_unlock+0x8>)
 8000a9a:	f7ff bf0d 	b.w	80008b8 <__retarget_lock_release_recursive>
 8000a9e:	bf00      	nop
 8000aa0:	200001e0 	.word	0x200001e0

08000aa4 <__sflush_r>:
 8000aa4:	898a      	ldrh	r2, [r1, #12]
 8000aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa8:	4605      	mov	r5, r0
 8000aaa:	0710      	lsls	r0, r2, #28
 8000aac:	460c      	mov	r4, r1
 8000aae:	d457      	bmi.n	8000b60 <__sflush_r+0xbc>
 8000ab0:	684b      	ldr	r3, [r1, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	dc04      	bgt.n	8000ac0 <__sflush_r+0x1c>
 8000ab6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	dc01      	bgt.n	8000ac0 <__sflush_r+0x1c>
 8000abc:	2000      	movs	r0, #0
 8000abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d0fa      	beq.n	8000abc <__sflush_r+0x18>
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000acc:	682f      	ldr	r7, [r5, #0]
 8000ace:	6a21      	ldr	r1, [r4, #32]
 8000ad0:	602b      	str	r3, [r5, #0]
 8000ad2:	d032      	beq.n	8000b3a <__sflush_r+0x96>
 8000ad4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ad6:	89a3      	ldrh	r3, [r4, #12]
 8000ad8:	075a      	lsls	r2, r3, #29
 8000ada:	d505      	bpl.n	8000ae8 <__sflush_r+0x44>
 8000adc:	6863      	ldr	r3, [r4, #4]
 8000ade:	1ac0      	subs	r0, r0, r3
 8000ae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ae2:	b10b      	cbz	r3, 8000ae8 <__sflush_r+0x44>
 8000ae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ae6:	1ac0      	subs	r0, r0, r3
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4602      	mov	r2, r0
 8000aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000aee:	4628      	mov	r0, r5
 8000af0:	6a21      	ldr	r1, [r4, #32]
 8000af2:	47b0      	blx	r6
 8000af4:	1c43      	adds	r3, r0, #1
 8000af6:	89a3      	ldrh	r3, [r4, #12]
 8000af8:	d106      	bne.n	8000b08 <__sflush_r+0x64>
 8000afa:	6829      	ldr	r1, [r5, #0]
 8000afc:	291d      	cmp	r1, #29
 8000afe:	d82b      	bhi.n	8000b58 <__sflush_r+0xb4>
 8000b00:	4a28      	ldr	r2, [pc, #160]	; (8000ba4 <__sflush_r+0x100>)
 8000b02:	410a      	asrs	r2, r1
 8000b04:	07d6      	lsls	r6, r2, #31
 8000b06:	d427      	bmi.n	8000b58 <__sflush_r+0xb4>
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6062      	str	r2, [r4, #4]
 8000b0c:	6922      	ldr	r2, [r4, #16]
 8000b0e:	04d9      	lsls	r1, r3, #19
 8000b10:	6022      	str	r2, [r4, #0]
 8000b12:	d504      	bpl.n	8000b1e <__sflush_r+0x7a>
 8000b14:	1c42      	adds	r2, r0, #1
 8000b16:	d101      	bne.n	8000b1c <__sflush_r+0x78>
 8000b18:	682b      	ldr	r3, [r5, #0]
 8000b1a:	b903      	cbnz	r3, 8000b1e <__sflush_r+0x7a>
 8000b1c:	6560      	str	r0, [r4, #84]	; 0x54
 8000b1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b20:	602f      	str	r7, [r5, #0]
 8000b22:	2900      	cmp	r1, #0
 8000b24:	d0ca      	beq.n	8000abc <__sflush_r+0x18>
 8000b26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	d002      	beq.n	8000b34 <__sflush_r+0x90>
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f7ff fec4 	bl	80008bc <_free_r>
 8000b34:	2000      	movs	r0, #0
 8000b36:	6360      	str	r0, [r4, #52]	; 0x34
 8000b38:	e7c1      	b.n	8000abe <__sflush_r+0x1a>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	4628      	mov	r0, r5
 8000b3e:	47b0      	blx	r6
 8000b40:	1c41      	adds	r1, r0, #1
 8000b42:	d1c8      	bne.n	8000ad6 <__sflush_r+0x32>
 8000b44:	682b      	ldr	r3, [r5, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0c5      	beq.n	8000ad6 <__sflush_r+0x32>
 8000b4a:	2b1d      	cmp	r3, #29
 8000b4c:	d001      	beq.n	8000b52 <__sflush_r+0xae>
 8000b4e:	2b16      	cmp	r3, #22
 8000b50:	d101      	bne.n	8000b56 <__sflush_r+0xb2>
 8000b52:	602f      	str	r7, [r5, #0]
 8000b54:	e7b2      	b.n	8000abc <__sflush_r+0x18>
 8000b56:	89a3      	ldrh	r3, [r4, #12]
 8000b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5c:	81a3      	strh	r3, [r4, #12]
 8000b5e:	e7ae      	b.n	8000abe <__sflush_r+0x1a>
 8000b60:	690f      	ldr	r7, [r1, #16]
 8000b62:	2f00      	cmp	r7, #0
 8000b64:	d0aa      	beq.n	8000abc <__sflush_r+0x18>
 8000b66:	0793      	lsls	r3, r2, #30
 8000b68:	bf18      	it	ne
 8000b6a:	2300      	movne	r3, #0
 8000b6c:	680e      	ldr	r6, [r1, #0]
 8000b6e:	bf08      	it	eq
 8000b70:	694b      	ldreq	r3, [r1, #20]
 8000b72:	1bf6      	subs	r6, r6, r7
 8000b74:	600f      	str	r7, [r1, #0]
 8000b76:	608b      	str	r3, [r1, #8]
 8000b78:	2e00      	cmp	r6, #0
 8000b7a:	dd9f      	ble.n	8000abc <__sflush_r+0x18>
 8000b7c:	4633      	mov	r3, r6
 8000b7e:	463a      	mov	r2, r7
 8000b80:	4628      	mov	r0, r5
 8000b82:	6a21      	ldr	r1, [r4, #32]
 8000b84:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000b88:	47e0      	blx	ip
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	dc06      	bgt.n	8000b9c <__sflush_r+0xf8>
 8000b8e:	89a3      	ldrh	r3, [r4, #12]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b98:	81a3      	strh	r3, [r4, #12]
 8000b9a:	e790      	b.n	8000abe <__sflush_r+0x1a>
 8000b9c:	4407      	add	r7, r0
 8000b9e:	1a36      	subs	r6, r6, r0
 8000ba0:	e7ea      	b.n	8000b78 <__sflush_r+0xd4>
 8000ba2:	bf00      	nop
 8000ba4:	dfbffffe 	.word	0xdfbffffe

08000ba8 <_fflush_r>:
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	690b      	ldr	r3, [r1, #16]
 8000bac:	4605      	mov	r5, r0
 8000bae:	460c      	mov	r4, r1
 8000bb0:	b913      	cbnz	r3, 8000bb8 <_fflush_r+0x10>
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	4628      	mov	r0, r5
 8000bb6:	bd38      	pop	{r3, r4, r5, pc}
 8000bb8:	b118      	cbz	r0, 8000bc2 <_fflush_r+0x1a>
 8000bba:	6a03      	ldr	r3, [r0, #32]
 8000bbc:	b90b      	cbnz	r3, 8000bc2 <_fflush_r+0x1a>
 8000bbe:	f7ff fd7f 	bl	80006c0 <__sinit>
 8000bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f3      	beq.n	8000bb2 <_fflush_r+0xa>
 8000bca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000bcc:	07d0      	lsls	r0, r2, #31
 8000bce:	d404      	bmi.n	8000bda <_fflush_r+0x32>
 8000bd0:	0599      	lsls	r1, r3, #22
 8000bd2:	d402      	bmi.n	8000bda <_fflush_r+0x32>
 8000bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bd6:	f7ff fe6e 	bl	80008b6 <__retarget_lock_acquire_recursive>
 8000bda:	4628      	mov	r0, r5
 8000bdc:	4621      	mov	r1, r4
 8000bde:	f7ff ff61 	bl	8000aa4 <__sflush_r>
 8000be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000be4:	4605      	mov	r5, r0
 8000be6:	07da      	lsls	r2, r3, #31
 8000be8:	d4e4      	bmi.n	8000bb4 <_fflush_r+0xc>
 8000bea:	89a3      	ldrh	r3, [r4, #12]
 8000bec:	059b      	lsls	r3, r3, #22
 8000bee:	d4e1      	bmi.n	8000bb4 <_fflush_r+0xc>
 8000bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bf2:	f7ff fe61 	bl	80008b8 <__retarget_lock_release_recursive>
 8000bf6:	e7dd      	b.n	8000bb4 <_fflush_r+0xc>

08000bf8 <_putc_r>:
 8000bf8:	b570      	push	{r4, r5, r6, lr}
 8000bfa:	460d      	mov	r5, r1
 8000bfc:	4614      	mov	r4, r2
 8000bfe:	4606      	mov	r6, r0
 8000c00:	b118      	cbz	r0, 8000c0a <_putc_r+0x12>
 8000c02:	6a03      	ldr	r3, [r0, #32]
 8000c04:	b90b      	cbnz	r3, 8000c0a <_putc_r+0x12>
 8000c06:	f7ff fd5b 	bl	80006c0 <__sinit>
 8000c0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c0c:	07d8      	lsls	r0, r3, #31
 8000c0e:	d405      	bmi.n	8000c1c <_putc_r+0x24>
 8000c10:	89a3      	ldrh	r3, [r4, #12]
 8000c12:	0599      	lsls	r1, r3, #22
 8000c14:	d402      	bmi.n	8000c1c <_putc_r+0x24>
 8000c16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c18:	f7ff fe4d 	bl	80008b6 <__retarget_lock_acquire_recursive>
 8000c1c:	68a3      	ldr	r3, [r4, #8]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	60a3      	str	r3, [r4, #8]
 8000c24:	da05      	bge.n	8000c32 <_putc_r+0x3a>
 8000c26:	69a2      	ldr	r2, [r4, #24]
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	db12      	blt.n	8000c52 <_putc_r+0x5a>
 8000c2c:	b2eb      	uxtb	r3, r5
 8000c2e:	2b0a      	cmp	r3, #10
 8000c30:	d00f      	beq.n	8000c52 <_putc_r+0x5a>
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	1c5a      	adds	r2, r3, #1
 8000c36:	6022      	str	r2, [r4, #0]
 8000c38:	701d      	strb	r5, [r3, #0]
 8000c3a:	b2ed      	uxtb	r5, r5
 8000c3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c3e:	07da      	lsls	r2, r3, #31
 8000c40:	d405      	bmi.n	8000c4e <_putc_r+0x56>
 8000c42:	89a3      	ldrh	r3, [r4, #12]
 8000c44:	059b      	lsls	r3, r3, #22
 8000c46:	d402      	bmi.n	8000c4e <_putc_r+0x56>
 8000c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c4a:	f7ff fe35 	bl	80008b8 <__retarget_lock_release_recursive>
 8000c4e:	4628      	mov	r0, r5
 8000c50:	bd70      	pop	{r4, r5, r6, pc}
 8000c52:	4629      	mov	r1, r5
 8000c54:	4622      	mov	r2, r4
 8000c56:	4630      	mov	r0, r6
 8000c58:	f000 f802 	bl	8000c60 <__swbuf_r>
 8000c5c:	4605      	mov	r5, r0
 8000c5e:	e7ed      	b.n	8000c3c <_putc_r+0x44>

08000c60 <__swbuf_r>:
 8000c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c62:	460e      	mov	r6, r1
 8000c64:	4614      	mov	r4, r2
 8000c66:	4605      	mov	r5, r0
 8000c68:	b118      	cbz	r0, 8000c72 <__swbuf_r+0x12>
 8000c6a:	6a03      	ldr	r3, [r0, #32]
 8000c6c:	b90b      	cbnz	r3, 8000c72 <__swbuf_r+0x12>
 8000c6e:	f7ff fd27 	bl	80006c0 <__sinit>
 8000c72:	69a3      	ldr	r3, [r4, #24]
 8000c74:	60a3      	str	r3, [r4, #8]
 8000c76:	89a3      	ldrh	r3, [r4, #12]
 8000c78:	071a      	lsls	r2, r3, #28
 8000c7a:	d525      	bpl.n	8000cc8 <__swbuf_r+0x68>
 8000c7c:	6923      	ldr	r3, [r4, #16]
 8000c7e:	b31b      	cbz	r3, 8000cc8 <__swbuf_r+0x68>
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	6922      	ldr	r2, [r4, #16]
 8000c84:	b2f6      	uxtb	r6, r6
 8000c86:	1a98      	subs	r0, r3, r2
 8000c88:	6963      	ldr	r3, [r4, #20]
 8000c8a:	4637      	mov	r7, r6
 8000c8c:	4283      	cmp	r3, r0
 8000c8e:	dc04      	bgt.n	8000c9a <__swbuf_r+0x3a>
 8000c90:	4621      	mov	r1, r4
 8000c92:	4628      	mov	r0, r5
 8000c94:	f7ff ff88 	bl	8000ba8 <_fflush_r>
 8000c98:	b9e0      	cbnz	r0, 8000cd4 <__swbuf_r+0x74>
 8000c9a:	68a3      	ldr	r3, [r4, #8]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	60a3      	str	r3, [r4, #8]
 8000ca0:	6823      	ldr	r3, [r4, #0]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	6022      	str	r2, [r4, #0]
 8000ca6:	701e      	strb	r6, [r3, #0]
 8000ca8:	6962      	ldr	r2, [r4, #20]
 8000caa:	1c43      	adds	r3, r0, #1
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d004      	beq.n	8000cba <__swbuf_r+0x5a>
 8000cb0:	89a3      	ldrh	r3, [r4, #12]
 8000cb2:	07db      	lsls	r3, r3, #31
 8000cb4:	d506      	bpl.n	8000cc4 <__swbuf_r+0x64>
 8000cb6:	2e0a      	cmp	r6, #10
 8000cb8:	d104      	bne.n	8000cc4 <__swbuf_r+0x64>
 8000cba:	4621      	mov	r1, r4
 8000cbc:	4628      	mov	r0, r5
 8000cbe:	f7ff ff73 	bl	8000ba8 <_fflush_r>
 8000cc2:	b938      	cbnz	r0, 8000cd4 <__swbuf_r+0x74>
 8000cc4:	4638      	mov	r0, r7
 8000cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cc8:	4621      	mov	r1, r4
 8000cca:	4628      	mov	r0, r5
 8000ccc:	f000 f806 	bl	8000cdc <__swsetup_r>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d0d5      	beq.n	8000c80 <__swbuf_r+0x20>
 8000cd4:	f04f 37ff 	mov.w	r7, #4294967295
 8000cd8:	e7f4      	b.n	8000cc4 <__swbuf_r+0x64>
	...

08000cdc <__swsetup_r>:
 8000cdc:	b538      	push	{r3, r4, r5, lr}
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <__swsetup_r+0xac>)
 8000ce0:	4605      	mov	r5, r0
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	460c      	mov	r4, r1
 8000ce6:	b118      	cbz	r0, 8000cf0 <__swsetup_r+0x14>
 8000ce8:	6a03      	ldr	r3, [r0, #32]
 8000cea:	b90b      	cbnz	r3, 8000cf0 <__swsetup_r+0x14>
 8000cec:	f7ff fce8 	bl	80006c0 <__sinit>
 8000cf0:	89a3      	ldrh	r3, [r4, #12]
 8000cf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000cf6:	0718      	lsls	r0, r3, #28
 8000cf8:	d422      	bmi.n	8000d40 <__swsetup_r+0x64>
 8000cfa:	06d9      	lsls	r1, r3, #27
 8000cfc:	d407      	bmi.n	8000d0e <__swsetup_r+0x32>
 8000cfe:	2309      	movs	r3, #9
 8000d00:	602b      	str	r3, [r5, #0]
 8000d02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000d06:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0a:	81a3      	strh	r3, [r4, #12]
 8000d0c:	e034      	b.n	8000d78 <__swsetup_r+0x9c>
 8000d0e:	0758      	lsls	r0, r3, #29
 8000d10:	d512      	bpl.n	8000d38 <__swsetup_r+0x5c>
 8000d12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d14:	b141      	cbz	r1, 8000d28 <__swsetup_r+0x4c>
 8000d16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	d002      	beq.n	8000d24 <__swsetup_r+0x48>
 8000d1e:	4628      	mov	r0, r5
 8000d20:	f7ff fdcc 	bl	80008bc <_free_r>
 8000d24:	2300      	movs	r3, #0
 8000d26:	6363      	str	r3, [r4, #52]	; 0x34
 8000d28:	89a3      	ldrh	r3, [r4, #12]
 8000d2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000d2e:	81a3      	strh	r3, [r4, #12]
 8000d30:	2300      	movs	r3, #0
 8000d32:	6063      	str	r3, [r4, #4]
 8000d34:	6923      	ldr	r3, [r4, #16]
 8000d36:	6023      	str	r3, [r4, #0]
 8000d38:	89a3      	ldrh	r3, [r4, #12]
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	81a3      	strh	r3, [r4, #12]
 8000d40:	6923      	ldr	r3, [r4, #16]
 8000d42:	b94b      	cbnz	r3, 8000d58 <__swsetup_r+0x7c>
 8000d44:	89a3      	ldrh	r3, [r4, #12]
 8000d46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d4e:	d003      	beq.n	8000d58 <__swsetup_r+0x7c>
 8000d50:	4621      	mov	r1, r4
 8000d52:	4628      	mov	r0, r5
 8000d54:	f000 f84f 	bl	8000df6 <__smakebuf_r>
 8000d58:	89a0      	ldrh	r0, [r4, #12]
 8000d5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d5e:	f010 0301 	ands.w	r3, r0, #1
 8000d62:	d00a      	beq.n	8000d7a <__swsetup_r+0x9e>
 8000d64:	2300      	movs	r3, #0
 8000d66:	60a3      	str	r3, [r4, #8]
 8000d68:	6963      	ldr	r3, [r4, #20]
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	61a3      	str	r3, [r4, #24]
 8000d6e:	6923      	ldr	r3, [r4, #16]
 8000d70:	b943      	cbnz	r3, 8000d84 <__swsetup_r+0xa8>
 8000d72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d76:	d1c4      	bne.n	8000d02 <__swsetup_r+0x26>
 8000d78:	bd38      	pop	{r3, r4, r5, pc}
 8000d7a:	0781      	lsls	r1, r0, #30
 8000d7c:	bf58      	it	pl
 8000d7e:	6963      	ldrpl	r3, [r4, #20]
 8000d80:	60a3      	str	r3, [r4, #8]
 8000d82:	e7f4      	b.n	8000d6e <__swsetup_r+0x92>
 8000d84:	2000      	movs	r0, #0
 8000d86:	e7f7      	b.n	8000d78 <__swsetup_r+0x9c>
 8000d88:	20000078 	.word	0x20000078

08000d8c <_sbrk_r>:
 8000d8c:	b538      	push	{r3, r4, r5, lr}
 8000d8e:	2300      	movs	r3, #0
 8000d90:	4d05      	ldr	r5, [pc, #20]	; (8000da8 <_sbrk_r+0x1c>)
 8000d92:	4604      	mov	r4, r0
 8000d94:	4608      	mov	r0, r1
 8000d96:	602b      	str	r3, [r5, #0]
 8000d98:	f7ff fb58 	bl	800044c <_sbrk>
 8000d9c:	1c43      	adds	r3, r0, #1
 8000d9e:	d102      	bne.n	8000da6 <_sbrk_r+0x1a>
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	b103      	cbz	r3, 8000da6 <_sbrk_r+0x1a>
 8000da4:	6023      	str	r3, [r4, #0]
 8000da6:	bd38      	pop	{r3, r4, r5, pc}
 8000da8:	200001dc 	.word	0x200001dc

08000dac <__swhatbuf_r>:
 8000dac:	b570      	push	{r4, r5, r6, lr}
 8000dae:	460c      	mov	r4, r1
 8000db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000db4:	4615      	mov	r5, r2
 8000db6:	2900      	cmp	r1, #0
 8000db8:	461e      	mov	r6, r3
 8000dba:	b096      	sub	sp, #88	; 0x58
 8000dbc:	da0c      	bge.n	8000dd8 <__swhatbuf_r+0x2c>
 8000dbe:	89a3      	ldrh	r3, [r4, #12]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000dc6:	bf0c      	ite	eq
 8000dc8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000dcc:	2340      	movne	r3, #64	; 0x40
 8000dce:	2000      	movs	r0, #0
 8000dd0:	6031      	str	r1, [r6, #0]
 8000dd2:	602b      	str	r3, [r5, #0]
 8000dd4:	b016      	add	sp, #88	; 0x58
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
 8000dd8:	466a      	mov	r2, sp
 8000dda:	f000 f849 	bl	8000e70 <_fstat_r>
 8000dde:	2800      	cmp	r0, #0
 8000de0:	dbed      	blt.n	8000dbe <__swhatbuf_r+0x12>
 8000de2:	9901      	ldr	r1, [sp, #4]
 8000de4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000de8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000dec:	4259      	negs	r1, r3
 8000dee:	4159      	adcs	r1, r3
 8000df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df4:	e7eb      	b.n	8000dce <__swhatbuf_r+0x22>

08000df6 <__smakebuf_r>:
 8000df6:	898b      	ldrh	r3, [r1, #12]
 8000df8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dfa:	079d      	lsls	r5, r3, #30
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	460c      	mov	r4, r1
 8000e00:	d507      	bpl.n	8000e12 <__smakebuf_r+0x1c>
 8000e02:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e06:	6023      	str	r3, [r4, #0]
 8000e08:	6123      	str	r3, [r4, #16]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	6163      	str	r3, [r4, #20]
 8000e0e:	b002      	add	sp, #8
 8000e10:	bd70      	pop	{r4, r5, r6, pc}
 8000e12:	466a      	mov	r2, sp
 8000e14:	ab01      	add	r3, sp, #4
 8000e16:	f7ff ffc9 	bl	8000dac <__swhatbuf_r>
 8000e1a:	9900      	ldr	r1, [sp, #0]
 8000e1c:	4605      	mov	r5, r0
 8000e1e:	4630      	mov	r0, r6
 8000e20:	f7ff fdb4 	bl	800098c <_malloc_r>
 8000e24:	b948      	cbnz	r0, 8000e3a <__smakebuf_r+0x44>
 8000e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e2a:	059a      	lsls	r2, r3, #22
 8000e2c:	d4ef      	bmi.n	8000e0e <__smakebuf_r+0x18>
 8000e2e:	f023 0303 	bic.w	r3, r3, #3
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	81a3      	strh	r3, [r4, #12]
 8000e38:	e7e3      	b.n	8000e02 <__smakebuf_r+0xc>
 8000e3a:	89a3      	ldrh	r3, [r4, #12]
 8000e3c:	6020      	str	r0, [r4, #0]
 8000e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e42:	81a3      	strh	r3, [r4, #12]
 8000e44:	9b00      	ldr	r3, [sp, #0]
 8000e46:	6120      	str	r0, [r4, #16]
 8000e48:	6163      	str	r3, [r4, #20]
 8000e4a:	9b01      	ldr	r3, [sp, #4]
 8000e4c:	b15b      	cbz	r3, 8000e66 <__smakebuf_r+0x70>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e54:	f000 f81e 	bl	8000e94 <_isatty_r>
 8000e58:	b128      	cbz	r0, 8000e66 <__smakebuf_r+0x70>
 8000e5a:	89a3      	ldrh	r3, [r4, #12]
 8000e5c:	f023 0303 	bic.w	r3, r3, #3
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	81a3      	strh	r3, [r4, #12]
 8000e66:	89a3      	ldrh	r3, [r4, #12]
 8000e68:	431d      	orrs	r5, r3
 8000e6a:	81a5      	strh	r5, [r4, #12]
 8000e6c:	e7cf      	b.n	8000e0e <__smakebuf_r+0x18>
	...

08000e70 <_fstat_r>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	2300      	movs	r3, #0
 8000e74:	4d06      	ldr	r5, [pc, #24]	; (8000e90 <_fstat_r+0x20>)
 8000e76:	4604      	mov	r4, r0
 8000e78:	4608      	mov	r0, r1
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	602b      	str	r3, [r5, #0]
 8000e7e:	f7ff fabf 	bl	8000400 <_fstat>
 8000e82:	1c43      	adds	r3, r0, #1
 8000e84:	d102      	bne.n	8000e8c <_fstat_r+0x1c>
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	b103      	cbz	r3, 8000e8c <_fstat_r+0x1c>
 8000e8a:	6023      	str	r3, [r4, #0]
 8000e8c:	bd38      	pop	{r3, r4, r5, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001dc 	.word	0x200001dc

08000e94 <_isatty_r>:
 8000e94:	b538      	push	{r3, r4, r5, lr}
 8000e96:	2300      	movs	r3, #0
 8000e98:	4d05      	ldr	r5, [pc, #20]	; (8000eb0 <_isatty_r+0x1c>)
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	602b      	str	r3, [r5, #0]
 8000ea0:	f7ff fabd 	bl	800041e <_isatty>
 8000ea4:	1c43      	adds	r3, r0, #1
 8000ea6:	d102      	bne.n	8000eae <_isatty_r+0x1a>
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	b103      	cbz	r3, 8000eae <_isatty_r+0x1a>
 8000eac:	6023      	str	r3, [r4, #0]
 8000eae:	bd38      	pop	{r3, r4, r5, pc}
 8000eb0:	200001dc 	.word	0x200001dc

08000eb4 <_init>:
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb6:	bf00      	nop
 8000eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eba:	bc08      	pop	{r3}
 8000ebc:	469e      	mov	lr, r3
 8000ebe:	4770      	bx	lr

08000ec0 <_fini>:
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	bf00      	nop
 8000ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec6:	bc08      	pop	{r3}
 8000ec8:	469e      	mov	lr, r3
 8000eca:	4770      	bx	lr
