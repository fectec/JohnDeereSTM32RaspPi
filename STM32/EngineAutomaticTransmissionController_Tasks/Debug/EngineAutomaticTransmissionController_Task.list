
EngineAutomaticTransmissionController_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092d4  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d10  08009408  08009408  00019408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a118  0800a118  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a118  0800a118  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a118  0800a118  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a118  0800a118  0001a118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a11c  0800a11c  0001a11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a120  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001f8  0800a318  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  0800a318  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY
 13 .debug_info   000044f2  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000159d  00000000  00000000  00024756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004e8  00000000  00000000  00025cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000368  00000000  00000000  000261e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004668  00000000  00000000  00026548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007535  00000000  00000000  0002abb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c64b  00000000  00000000  000320e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028f0  00000000  00000000  0003e730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00041020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001f8 	.word	0x200001f8
 800014c:	00000000 	.word	0x00000000
 8000150:	080093ec 	.word	0x080093ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001fc 	.word	0x200001fc
 800016c:	080093ec 	.word	0x080093ec

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_frsub>:
 8000b88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	e002      	b.n	8000b94 <__addsf3>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fsub>:
 8000b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b94 <__addsf3>:
 8000b94:	0042      	lsls	r2, r0, #1
 8000b96:	bf1f      	itttt	ne
 8000b98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b9c:	ea92 0f03 	teqne	r2, r3
 8000ba0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba8:	d06a      	beq.n	8000c80 <__addsf3+0xec>
 8000baa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bb2:	bfc1      	itttt	gt
 8000bb4:	18d2      	addgt	r2, r2, r3
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	4048      	eorgt	r0, r1
 8000bba:	4041      	eorgt	r1, r0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	2b19      	cmp	r3, #25
 8000bc2:	bf88      	it	hi
 8000bc4:	4770      	bxhi	lr
 8000bc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4249      	negne	r1, r1
 8000be6:	ea92 0f03 	teq	r2, r3
 8000bea:	d03f      	beq.n	8000c6c <__addsf3+0xd8>
 8000bec:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf4:	eb10 000c 	adds.w	r0, r0, ip
 8000bf8:	f1c3 0320 	rsb	r3, r3, #32
 8000bfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000c00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	d502      	bpl.n	8000c0c <__addsf3+0x78>
 8000c06:	4249      	negs	r1, r1
 8000c08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c10:	d313      	bcc.n	8000c3a <__addsf3+0xa6>
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c16:	d306      	bcc.n	8000c26 <__addsf3+0x92>
 8000c18:	0840      	lsrs	r0, r0, #1
 8000c1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1e:	f102 0201 	add.w	r2, r2, #1
 8000c22:	2afe      	cmp	r2, #254	; 0xfe
 8000c24:	d251      	bcs.n	8000cca <__addsf3+0x136>
 8000c26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	ea40 0003 	orr.w	r0, r0, r3
 8000c38:	4770      	bx	lr
 8000c3a:	0049      	lsls	r1, r1, #1
 8000c3c:	eb40 0000 	adc.w	r0, r0, r0
 8000c40:	3a01      	subs	r2, #1
 8000c42:	bf28      	it	cs
 8000c44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c48:	d2ed      	bcs.n	8000c26 <__addsf3+0x92>
 8000c4a:	fab0 fc80 	clz	ip, r0
 8000c4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c52:	ebb2 020c 	subs.w	r2, r2, ip
 8000c56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c5a:	bfaa      	itet	ge
 8000c5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c60:	4252      	neglt	r2, r2
 8000c62:	4318      	orrge	r0, r3
 8000c64:	bfbc      	itt	lt
 8000c66:	40d0      	lsrlt	r0, r2
 8000c68:	4318      	orrlt	r0, r3
 8000c6a:	4770      	bx	lr
 8000c6c:	f092 0f00 	teq	r2, #0
 8000c70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c74:	bf06      	itte	eq
 8000c76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c7a:	3201      	addeq	r2, #1
 8000c7c:	3b01      	subne	r3, #1
 8000c7e:	e7b5      	b.n	8000bec <__addsf3+0x58>
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d021      	beq.n	8000cd4 <__addsf3+0x140>
 8000c90:	ea92 0f03 	teq	r2, r3
 8000c94:	d004      	beq.n	8000ca0 <__addsf3+0x10c>
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	4608      	moveq	r0, r1
 8000c9e:	4770      	bx	lr
 8000ca0:	ea90 0f01 	teq	r0, r1
 8000ca4:	bf1c      	itt	ne
 8000ca6:	2000      	movne	r0, #0
 8000ca8:	4770      	bxne	lr
 8000caa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cae:	d104      	bne.n	8000cba <__addsf3+0x126>
 8000cb0:	0040      	lsls	r0, r0, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb8:	4770      	bx	lr
 8000cba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cbe:	bf3c      	itt	cc
 8000cc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bxcc	lr
 8000cc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd2:	4770      	bx	lr
 8000cd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd8:	bf16      	itet	ne
 8000cda:	4608      	movne	r0, r1
 8000cdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce0:	4601      	movne	r1, r0
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	bf06      	itte	eq
 8000ce6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cea:	ea90 0f01 	teqeq	r0, r1
 8000cee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_ui2f>:
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e004      	b.n	8000d04 <__aeabi_i2f+0x8>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_i2f>:
 8000cfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d00:	bf48      	it	mi
 8000d02:	4240      	negmi	r0, r0
 8000d04:	ea5f 0c00 	movs.w	ip, r0
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d10:	4601      	mov	r1, r0
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	e01c      	b.n	8000d52 <__aeabi_l2f+0x2a>

08000d18 <__aeabi_ul2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e00a      	b.n	8000d3c <__aeabi_l2f+0x14>
 8000d26:	bf00      	nop

08000d28 <__aeabi_l2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__aeabi_l2f+0x14>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	ea5f 0c01 	movs.w	ip, r1
 8000d40:	bf02      	ittt	eq
 8000d42:	4684      	moveq	ip, r0
 8000d44:	4601      	moveq	r1, r0
 8000d46:	2000      	moveq	r0, #0
 8000d48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d4c:	bf08      	it	eq
 8000d4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d56:	fabc f28c 	clz	r2, ip
 8000d5a:	3a08      	subs	r2, #8
 8000d5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d60:	db10      	blt.n	8000d84 <__aeabi_l2f+0x5c>
 8000d62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d66:	4463      	add	r3, ip
 8000d68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	f020 0001 	biceq.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	f102 0220 	add.w	r2, r2, #32
 8000d88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d94:	fa21 f202 	lsr.w	r2, r1, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_fmul>:
 8000da4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dac:	bf1e      	ittt	ne
 8000dae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000db2:	ea92 0f0c 	teqne	r2, ip
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d06f      	beq.n	8000e9c <__aeabi_fmul+0xf8>
 8000dbc:	441a      	add	r2, r3
 8000dbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc2:	0240      	lsls	r0, r0, #9
 8000dc4:	bf18      	it	ne
 8000dc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dca:	d01e      	beq.n	8000e0a <__aeabi_fmul+0x66>
 8000dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ddc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000de4:	bf3e      	ittt	cc
 8000de6:	0049      	lslcc	r1, r1, #1
 8000de8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	ea40 0001 	orr.w	r0, r0, r1
 8000df2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000df6:	2afd      	cmp	r2, #253	; 0xfd
 8000df8:	d81d      	bhi.n	8000e36 <__aeabi_fmul+0x92>
 8000dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e02:	bf08      	it	eq
 8000e04:	f020 0001 	biceq.w	r0, r0, #1
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e12:	bf08      	it	eq
 8000e14:	0249      	lsleq	r1, r1, #9
 8000e16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e1e:	3a7f      	subs	r2, #127	; 0x7f
 8000e20:	bfc2      	ittt	gt
 8000e22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2a:	4770      	bxgt	lr
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	3a01      	subs	r2, #1
 8000e36:	dc5d      	bgt.n	8000ef4 <__aeabi_fmul+0x150>
 8000e38:	f112 0f19 	cmn.w	r2, #25
 8000e3c:	bfdc      	itt	le
 8000e3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e42:	4770      	bxle	lr
 8000e44:	f1c2 0200 	rsb	r2, r2, #0
 8000e48:	0041      	lsls	r1, r0, #1
 8000e4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e4e:	f1c2 0220 	rsb	r2, r2, #32
 8000e52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e5a:	f140 0000 	adc.w	r0, r0, #0
 8000e5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e62:	bf08      	it	eq
 8000e64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e68:	4770      	bx	lr
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fmul+0xce>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xe6>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e78f      	b.n	8000dbc <__aeabi_fmul+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	bf18      	it	ne
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d00a      	beq.n	8000ec2 <__aeabi_fmul+0x11e>
 8000eac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb0:	bf18      	it	ne
 8000eb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eb6:	d1d8      	bne.n	8000e6a <__aeabi_fmul+0xc6>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	bf17      	itett	ne
 8000ec8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ecc:	4608      	moveq	r0, r1
 8000ece:	f091 0f00 	teqne	r1, #0
 8000ed2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ed6:	d014      	beq.n	8000f02 <__aeabi_fmul+0x15e>
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d101      	bne.n	8000ee2 <__aeabi_fmul+0x13e>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	d10f      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ee2:	ea93 0f0c 	teq	r3, ip
 8000ee6:	d103      	bne.n	8000ef0 <__aeabi_fmul+0x14c>
 8000ee8:	024b      	lsls	r3, r1, #9
 8000eea:	bf18      	it	ne
 8000eec:	4608      	movne	r0, r1
 8000eee:	d108      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ef0:	ea80 0001 	eor.w	r0, r0, r1
 8000ef4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f00:	4770      	bx	lr
 8000f02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_fdiv>:
 8000f0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f14:	bf1e      	ittt	ne
 8000f16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f1a:	ea92 0f0c 	teqne	r2, ip
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d069      	beq.n	8000ff8 <__aeabi_fdiv+0xec>
 8000f24:	eba2 0203 	sub.w	r2, r2, r3
 8000f28:	ea80 0c01 	eor.w	ip, r0, r1
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f32:	d037      	beq.n	8000fa4 <__aeabi_fdiv+0x98>
 8000f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f44:	428b      	cmp	r3, r1
 8000f46:	bf38      	it	cc
 8000f48:	005b      	lslcc	r3, r3, #1
 8000f4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f52:	428b      	cmp	r3, r1
 8000f54:	bf24      	itt	cs
 8000f56:	1a5b      	subcs	r3, r3, r1
 8000f58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f6e:	bf24      	itt	cs
 8000f70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f7c:	bf24      	itt	cs
 8000f7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	bf18      	it	ne
 8000f8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f8e:	d1e0      	bne.n	8000f52 <__aeabi_fdiv+0x46>
 8000f90:	2afd      	cmp	r2, #253	; 0xfd
 8000f92:	f63f af50 	bhi.w	8000e36 <__aeabi_fmul+0x92>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fa8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fac:	327f      	adds	r2, #127	; 0x7f
 8000fae:	bfc2      	ittt	gt
 8000fb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb8:	4770      	bxgt	lr
 8000fba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	e737      	b.n	8000e36 <__aeabi_fmul+0x92>
 8000fc6:	f092 0f00 	teq	r2, #0
 8000fca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fce:	bf02      	ittt	eq
 8000fd0:	0040      	lsleq	r0, r0, #1
 8000fd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fd6:	3a01      	subeq	r2, #1
 8000fd8:	d0f9      	beq.n	8000fce <__aeabi_fdiv+0xc2>
 8000fda:	ea40 000c 	orr.w	r0, r0, ip
 8000fde:	f093 0f00 	teq	r3, #0
 8000fe2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0049      	lsleq	r1, r1, #1
 8000fea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fee:	3b01      	subeq	r3, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xda>
 8000ff2:	ea41 010c 	orr.w	r1, r1, ip
 8000ff6:	e795      	b.n	8000f24 <__aeabi_fdiv+0x18>
 8000ff8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ffc:	ea92 0f0c 	teq	r2, ip
 8001000:	d108      	bne.n	8001014 <__aeabi_fdiv+0x108>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	f47f af7d 	bne.w	8000f02 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	f47f af70 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001010:	4608      	mov	r0, r1
 8001012:	e776      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001014:	ea93 0f0c 	teq	r3, ip
 8001018:	d104      	bne.n	8001024 <__aeabi_fdiv+0x118>
 800101a:	024b      	lsls	r3, r1, #9
 800101c:	f43f af4c 	beq.w	8000eb8 <__aeabi_fmul+0x114>
 8001020:	4608      	mov	r0, r1
 8001022:	e76e      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001024:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001028:	bf18      	it	ne
 800102a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800102e:	d1ca      	bne.n	8000fc6 <__aeabi_fdiv+0xba>
 8001030:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001034:	f47f af5c 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001038:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800103c:	f47f af3c 	bne.w	8000eb8 <__aeabi_fmul+0x114>
 8001040:	e75f      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001042:	bf00      	nop

08001044 <__aeabi_d2lz>:
 8001044:	b538      	push	{r3, r4, r5, lr}
 8001046:	4605      	mov	r5, r0
 8001048:	460c      	mov	r4, r1
 800104a:	2200      	movs	r2, #0
 800104c:	2300      	movs	r3, #0
 800104e:	4628      	mov	r0, r5
 8001050:	4621      	mov	r1, r4
 8001052:	f7ff fcc3 	bl	80009dc <__aeabi_dcmplt>
 8001056:	b928      	cbnz	r0, 8001064 <__aeabi_d2lz+0x20>
 8001058:	4628      	mov	r0, r5
 800105a:	4621      	mov	r1, r4
 800105c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001060:	f000 b80a 	b.w	8001078 <__aeabi_d2ulz>
 8001064:	4628      	mov	r0, r5
 8001066:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800106a:	f000 f805 	bl	8001078 <__aeabi_d2ulz>
 800106e:	4240      	negs	r0, r0
 8001070:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001074:	bd38      	pop	{r3, r4, r5, pc}
 8001076:	bf00      	nop

08001078 <__aeabi_d2ulz>:
 8001078:	b5d0      	push	{r4, r6, r7, lr}
 800107a:	2200      	movs	r2, #0
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <__aeabi_d2ulz+0x34>)
 800107e:	4606      	mov	r6, r0
 8001080:	460f      	mov	r7, r1
 8001082:	f7ff fa39 	bl	80004f8 <__aeabi_dmul>
 8001086:	f7ff fd0f 	bl	8000aa8 <__aeabi_d2uiz>
 800108a:	4604      	mov	r4, r0
 800108c:	f7ff f9ba 	bl	8000404 <__aeabi_ui2d>
 8001090:	2200      	movs	r2, #0
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <__aeabi_d2ulz+0x38>)
 8001094:	f7ff fa30 	bl	80004f8 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4630      	mov	r0, r6
 800109e:	4639      	mov	r1, r7
 80010a0:	f7ff f872 	bl	8000188 <__aeabi_dsub>
 80010a4:	f7ff fd00 	bl	8000aa8 <__aeabi_d2uiz>
 80010a8:	4621      	mov	r1, r4
 80010aa:	bdd0      	pop	{r4, r6, r7, pc}
 80010ac:	3df00000 	.word	0x3df00000
 80010b0:	41f00000 	.word	0x41f00000

080010b4 <USER_ADC_Init>:
#include "GPIO.h"

// Initialize ADC

void USER_ADC_Init( uint8_t ADC )
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  RCC->CFGR	|=	RCC_CFGR_ADCPRE;       		// Adjust ADC input clock
 80010be:	4b72      	ldr	r3, [pc, #456]	; (8001288 <USER_ADC_Init+0x1d4>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4a71      	ldr	r2, [pc, #452]	; (8001288 <USER_ADC_Init+0x1d4>)
 80010c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c8:	6053      	str	r3, [r2, #4]
  USER_GPIO_Define(PORTA, 0, INP, INP_AN);		// Pin PA0 as analog input
 80010ca:	2300      	movs	r3, #0
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2000      	movs	r0, #0
 80010d2:	f001 f8a3 	bl	800221c <USER_GPIO_Define>

  if( ADC == 0 )
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d143      	bne.n	8001164 <USER_ADC_Init+0xb0>
  {
    RCC->APB2ENR	|=	RCC_APB2ENR_ADC1EN;	// ADC1 clock enable
 80010dc:	4b6a      	ldr	r3, [pc, #424]	; (8001288 <USER_ADC_Init+0x1d4>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a69      	ldr	r2, [pc, #420]	; (8001288 <USER_ADC_Init+0x1d4>)
 80010e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e6:	6193      	str	r3, [r2, #24]

    ADC1->CR1		&=	~(ADC_CR1_DUALMOD);	// Step 1 - Select independent mode
 80010e8:	4b68      	ldr	r3, [pc, #416]	; (800128c <USER_ADC_Init+0x1d8>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a67      	ldr	r2, [pc, #412]	; (800128c <USER_ADC_Init+0x1d8>)
 80010ee:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80010f2:	6053      	str	r3, [r2, #4]
    ADC1->CR2		|=	ADC_CR2_CONT;		// Step 2 - Select conversion mode
 80010f4:	4b65      	ldr	r3, [pc, #404]	; (800128c <USER_ADC_Init+0x1d8>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4a64      	ldr	r2, [pc, #400]	; (800128c <USER_ADC_Init+0x1d8>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	6093      	str	r3, [r2, #8]
    ADC1->CR2		&= 	~(ADC_CR2_ALIGN);	//	and format for ADC result
 8001100:	4b62      	ldr	r3, [pc, #392]	; (800128c <USER_ADC_Init+0x1d8>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	4a61      	ldr	r2, [pc, #388]	; (800128c <USER_ADC_Init+0x1d8>)
 8001106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800110a:	6093      	str	r3, [r2, #8]
    ADC1->SMPR2		&= 	~(ADC_SMPR2_SMP0);	// Step 3 - Select the sample time for the
 800110c:	4b5f      	ldr	r3, [pc, #380]	; (800128c <USER_ADC_Init+0x1d8>)
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	4a5e      	ldr	r2, [pc, #376]	; (800128c <USER_ADC_Init+0x1d8>)
 8001112:	f023 0307 	bic.w	r3, r3, #7
 8001116:	6113      	str	r3, [r2, #16]
							//	ADC channel
    ADC1->SQR1		&= 	~(ADC_SQR1_L);		// Step 4 - Select the sequence and number of
 8001118:	4b5c      	ldr	r3, [pc, #368]	; (800128c <USER_ADC_Init+0x1d8>)
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	4a5b      	ldr	r2, [pc, #364]	; (800128c <USER_ADC_Init+0x1d8>)
 800111e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001122:	62d3      	str	r3, [r2, #44]	; 0x2c
							//	conversions for the ADC regular channels
    ADC1->SQR3		&= 	~(ADC_SQR3_SQ1);	// Step 5 - Select the channel for the first ADC
 8001124:	4b59      	ldr	r3, [pc, #356]	; (800128c <USER_ADC_Init+0x1d8>)
 8001126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001128:	4a58      	ldr	r2, [pc, #352]	; (800128c <USER_ADC_Init+0x1d8>)
 800112a:	f023 031f 	bic.w	r3, r3, #31
 800112e:	6353      	str	r3, [r2, #52]	; 0x34
							//	conversion
    ADC1->CR2		|=	ADC_CR2_ADON;		// Step 6 - Enable the ADC module
 8001130:	4b56      	ldr	r3, [pc, #344]	; (800128c <USER_ADC_Init+0x1d8>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4a55      	ldr	r2, [pc, #340]	; (800128c <USER_ADC_Init+0x1d8>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6093      	str	r3, [r2, #8]
    ADC1->CR2		|=	ADC_CR2_CAL;		// Step 7 - Perform a calibration after
 800113c:	4b53      	ldr	r3, [pc, #332]	; (800128c <USER_ADC_Init+0x1d8>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a52      	ldr	r2, [pc, #328]	; (800128c <USER_ADC_Init+0x1d8>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6093      	str	r3, [r2, #8]
							// 	each power-up
    while ( ADC1->CR2 & ADC_CR2_CAL );			// Step 8 - Wait until the bit is reset by
 8001148:	bf00      	nop
 800114a:	4b50      	ldr	r3, [pc, #320]	; (800128c <USER_ADC_Init+0x1d8>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f9      	bne.n	800114a <USER_ADC_Init+0x96>
							//	hardware after calibration is complete
    ADC1->CR2		|=	ADC_CR2_ADON;		// Step 9 - Start conversion
 8001156:	4b4d      	ldr	r3, [pc, #308]	; (800128c <USER_ADC_Init+0x1d8>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	4a4c      	ldr	r2, [pc, #304]	; (800128c <USER_ADC_Init+0x1d8>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6093      	str	r3, [r2, #8]

    while ( ADC3->CR2 & ADC_CR2_CAL );

    ADC3->CR2		|=	ADC_CR2_ADON;
  }
}
 8001162:	e08c      	b.n	800127e <USER_ADC_Init+0x1ca>
  else if( ADC == 1 )
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d143      	bne.n	80011f2 <USER_ADC_Init+0x13e>
    RCC->APB2ENR	|=	RCC_APB2ENR_ADC2EN;	// ADC2 clock enable
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <USER_ADC_Init+0x1d4>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a46      	ldr	r2, [pc, #280]	; (8001288 <USER_ADC_Init+0x1d4>)
 8001170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001174:	6193      	str	r3, [r2, #24]
    ADC2->CR1		&=	~(ADC_CR1_DUALMOD);
 8001176:	4b46      	ldr	r3, [pc, #280]	; (8001290 <USER_ADC_Init+0x1dc>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4a45      	ldr	r2, [pc, #276]	; (8001290 <USER_ADC_Init+0x1dc>)
 800117c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001180:	6053      	str	r3, [r2, #4]
    ADC2->CR2		|=	ADC_CR2_CONT;
 8001182:	4b43      	ldr	r3, [pc, #268]	; (8001290 <USER_ADC_Init+0x1dc>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	4a42      	ldr	r2, [pc, #264]	; (8001290 <USER_ADC_Init+0x1dc>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6093      	str	r3, [r2, #8]
    ADC2->CR2		&= 	~(ADC_CR2_ALIGN);
 800118e:	4b40      	ldr	r3, [pc, #256]	; (8001290 <USER_ADC_Init+0x1dc>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	4a3f      	ldr	r2, [pc, #252]	; (8001290 <USER_ADC_Init+0x1dc>)
 8001194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001198:	6093      	str	r3, [r2, #8]
    ADC2->SMPR2		&= 	~(ADC_SMPR2_SMP0);
 800119a:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <USER_ADC_Init+0x1dc>)
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	4a3c      	ldr	r2, [pc, #240]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011a0:	f023 0307 	bic.w	r3, r3, #7
 80011a4:	6113      	str	r3, [r2, #16]
    ADC2->SQR1		&= 	~(ADC_SQR1_L);
 80011a6:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	4a39      	ldr	r2, [pc, #228]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80011b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    ADC2->SQR3		&= 	~(ADC_SQR3_SQ1);
 80011b2:	4b37      	ldr	r3, [pc, #220]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b6:	4a36      	ldr	r2, [pc, #216]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011b8:	f023 031f 	bic.w	r3, r3, #31
 80011bc:	6353      	str	r3, [r2, #52]	; 0x34
    ADC2->CR2		|=	ADC_CR2_ADON;
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	4a33      	ldr	r2, [pc, #204]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6093      	str	r3, [r2, #8]
    ADC2->CR2		|=	ADC_CR2_CAL;
 80011ca:	4b31      	ldr	r3, [pc, #196]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	4a30      	ldr	r2, [pc, #192]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6093      	str	r3, [r2, #8]
    while ( ADC2->CR2 & ADC_CR2_CAL );
 80011d6:	bf00      	nop
 80011d8:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f9      	bne.n	80011d8 <USER_ADC_Init+0x124>
    ADC2->CR2		|=	ADC_CR2_ADON;
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4a29      	ldr	r2, [pc, #164]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6093      	str	r3, [r2, #8]
}
 80011f0:	e045      	b.n	800127e <USER_ADC_Init+0x1ca>
  else if( ADC == 2 )
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d142      	bne.n	800127e <USER_ADC_Init+0x1ca>
    RCC->APB2ENR	|=	RCC_APB2ENR_ADC3EN;	// ADC3 clock enable
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <USER_ADC_Init+0x1d4>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a22      	ldr	r2, [pc, #136]	; (8001288 <USER_ADC_Init+0x1d4>)
 80011fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001202:	6193      	str	r3, [r2, #24]
    ADC3->CR1		&=	~(ADC_CR1_DUALMOD);
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	4a22      	ldr	r2, [pc, #136]	; (8001294 <USER_ADC_Init+0x1e0>)
 800120a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800120e:	6053      	str	r3, [r2, #4]
    ADC3->CR2		|=	ADC_CR2_CONT;
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001216:	f043 0302 	orr.w	r3, r3, #2
 800121a:	6093      	str	r3, [r2, #8]
    ADC3->CR2		&= 	~(ADC_CR2_ALIGN);
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <USER_ADC_Init+0x1e0>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4a1c      	ldr	r2, [pc, #112]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001226:	6093      	str	r3, [r2, #8]
    ADC3->SMPR2		&= 	~(ADC_SMPR2_SMP0);
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <USER_ADC_Init+0x1e0>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4a19      	ldr	r2, [pc, #100]	; (8001294 <USER_ADC_Init+0x1e0>)
 800122e:	f023 0307 	bic.w	r3, r3, #7
 8001232:	6113      	str	r3, [r2, #16]
    ADC3->SQR1		&= 	~(ADC_SQR1_L);
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	4a16      	ldr	r2, [pc, #88]	; (8001294 <USER_ADC_Init+0x1e0>)
 800123a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800123e:	62d3      	str	r3, [r2, #44]	; 0x2c
    ADC3->SQR3		&= 	~(ADC_SQR3_SQ1);
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001244:	4a13      	ldr	r2, [pc, #76]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001246:	f023 031f 	bic.w	r3, r3, #31
 800124a:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->CR2		|=	ADC_CR2_ADON;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <USER_ADC_Init+0x1e0>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a10      	ldr	r2, [pc, #64]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6093      	str	r3, [r2, #8]
    ADC3->CR2		|=	ADC_CR2_CAL;
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <USER_ADC_Init+0x1e0>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <USER_ADC_Init+0x1e0>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6093      	str	r3, [r2, #8]
    while ( ADC3->CR2 & ADC_CR2_CAL );
 8001264:	bf00      	nop
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f9      	bne.n	8001266 <USER_ADC_Init+0x1b2>
    ADC3->CR2		|=	ADC_CR2_ADON;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	4a07      	ldr	r2, [pc, #28]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6093      	str	r3, [r2, #8]
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	40012400 	.word	0x40012400
 8001290:	40012800 	.word	0x40012800
 8001294:	40013c00 	.word	0x40013c00

08001298 <USER_ADC_Convert>:

// Convert Analog value to Digital using ADC

uint16_t USER_ADC_Convert( uint8_t ADC )
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if( ADC == 0 )
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d10a      	bne.n	80012be <USER_ADC_Convert+0x26>
  {
    while( !( ADC1->SR & ADC_SR_EOC ) );		// Wait for end of conversion
 80012a8:	bf00      	nop
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <USER_ADC_Convert+0x6c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f9      	beq.n	80012aa <USER_ADC_Convert+0x12>
    return ADC1->DR;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <USER_ADC_Convert+0x6c>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	e01c      	b.n	80012f8 <USER_ADC_Convert+0x60>
  }
  else if( ADC == 1 )
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d10a      	bne.n	80012da <USER_ADC_Convert+0x42>
  {
    while( !( ADC2->SR & ADC_SR_EOC ) );
 80012c4:	bf00      	nop
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <USER_ADC_Convert+0x70>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f9      	beq.n	80012c6 <USER_ADC_Convert+0x2e>
    return ADC2->DR;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <USER_ADC_Convert+0x70>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	e00e      	b.n	80012f8 <USER_ADC_Convert+0x60>
  }
  else if( ADC == 2 )
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d10a      	bne.n	80012f6 <USER_ADC_Convert+0x5e>
  {
    while( !( ADC3->SR & ADC_SR_EOC ) );
 80012e0:	bf00      	nop
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <USER_ADC_Convert+0x74>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f9      	beq.n	80012e2 <USER_ADC_Convert+0x4a>
    return ADC3->DR;
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <USER_ADC_Convert+0x74>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	e000      	b.n	80012f8 <USER_ADC_Convert+0x60>
  }

  return 0;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40012400 	.word	0x40012400
 8001308:	40012800 	.word	0x40012800
 800130c:	40013c00 	.word	0x40013c00

08001310 <scaleVoltageValue>:

// Scale ADC read voltage value to a range of 0 to 100

float scaleVoltageValue( float voltageValue, float min, float max )
{ 
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  float normalizedVoltageValue = (voltageValue - min) / (max - min) * 100;
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff fc36 	bl	8000b90 <__aeabi_fsub>
 8001324:	4603      	mov	r3, r0
 8001326:	461c      	mov	r4, r3
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fc30 	bl	8000b90 <__aeabi_fsub>
 8001330:	4603      	mov	r3, r0
 8001332:	4619      	mov	r1, r3
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff fde9 	bl	8000f0c <__aeabi_fdiv>
 800133a:	4603      	mov	r3, r0
 800133c:	4905      	ldr	r1, [pc, #20]	; (8001354 <scaleVoltageValue+0x44>)
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fd30 	bl	8000da4 <__aeabi_fmul>
 8001344:	4603      	mov	r3, r0
 8001346:	617b      	str	r3, [r7, #20]
  return normalizedVoltageValue;
 8001348:	697b      	ldr	r3, [r7, #20]
}
 800134a:	4618      	mov	r0, r3
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	42c80000 	.word	0x42c80000

08001358 <look2_binlxpw>:
/* Forward declaration for local functions */
static void EngTrModel_gear_state(const int32_T *sfEvent);
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b092      	sub	sp, #72	; 0x48
 800135c:	af00      	add	r7, sp, #0
 800135e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001362:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8001366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001370:	f7ff fb3e 	bl	80009f0 <__aeabi_dcmple>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d020      	beq.n	80013bc <look2_binlxpw+0x64>
    iLeft = 0U;
 800137a:	2300      	movs	r3, #0
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800137e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001388:	f7fe fefe 	bl	8000188 <__aeabi_dsub>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4614      	mov	r4, r2
 8001392:	461d      	mov	r5, r3
 8001394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001396:	3308      	adds	r3, #8
 8001398:	e9d3 0100 	ldrd	r0, r1, [r3]
 800139c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7fe fef1 	bl	8000188 <__aeabi_dsub>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4620      	mov	r0, r4
 80013ac:	4629      	mov	r1, r5
 80013ae:	f7ff f9cd 	bl	800074c <__aeabi_ddiv>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80013ba:	e08e      	b.n	80014da <look2_binlxpw+0x182>
  } else if (u0 < bp0[maxIndex[0U]]) {
 80013bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013c4:	4413      	add	r3, r2
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ce:	f7ff fb05 	bl	80009dc <__aeabi_dcmplt>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d04d      	beq.n	8001474 <look2_binlxpw+0x11c>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 80013d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	085b      	lsrs	r3, r3, #1
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[0U];
 80013e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 80013ea:	e016      	b.n	800141a <look2_binlxpw+0xc2>
      if (u0 < bp0[bpIdx]) {
 80013ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013f2:	4413      	add	r3, r2
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013fc:	f7ff faee 	bl	80009dc <__aeabi_dcmplt>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <look2_binlxpw+0xb4>
        iRght = bpIdx;
 8001406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800140a:	e001      	b.n	8001410 <look2_binlxpw+0xb8>
      } else {
        iLeft = bpIdx;
 800140c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8001410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001414:	4413      	add	r3, r2
 8001416:	085b      	lsrs	r3, r3, #1
 8001418:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 800141a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d8e3      	bhi.n	80013ec <look2_binlxpw+0x94>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800142a:	4413      	add	r3, r2
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001434:	f7fe fea8 	bl	8000188 <__aeabi_dsub>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4614      	mov	r4, r2
 800143e:	461d      	mov	r5, r3
 8001440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001442:	3301      	adds	r3, #1
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001448:	4413      	add	r3, r2
 800144a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001454:	4413      	add	r3, r2
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7fe fe95 	bl	8000188 <__aeabi_dsub>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4620      	mov	r0, r4
 8001464:	4629      	mov	r1, r5
 8001466:	f7ff f971 	bl	800074c <__aeabi_ddiv>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001472:	e032      	b.n	80014da <look2_binlxpw+0x182>
  } else {
    iLeft = maxIndex[0U] - 1U;
 8001474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3b01      	subs	r3, #1
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 800147c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001484:	3b01      	subs	r3, #1
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800148a:	4413      	add	r3, r2
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001494:	f7fe fe78 	bl	8000188 <__aeabi_dsub>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4614      	mov	r4, r2
 800149e:	461d      	mov	r5, r3
 80014a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014a8:	4413      	add	r3, r2
 80014aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80014b6:	3b01      	subs	r3, #1
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014bc:	4413      	add	r3, r2
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7fe fe61 	bl	8000188 <__aeabi_dsub>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4620      	mov	r0, r4
 80014cc:	4629      	mov	r1, r5
 80014ce:	f7ff f93d 	bl	800074c <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 80014da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80014de:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 80014e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e4:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 80014e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014f0:	f7ff fa7e 	bl	80009f0 <__aeabi_dcmple>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d020      	beq.n	800153c <look2_binlxpw+0x1e4>
    iLeft = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 80014fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001508:	f7fe fe3e 	bl	8000188 <__aeabi_dsub>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4614      	mov	r4, r2
 8001512:	461d      	mov	r5, r3
 8001514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001516:	3308      	adds	r3, #8
 8001518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800151c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7fe fe31 	bl	8000188 <__aeabi_dsub>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7ff f90d 	bl	800074c <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800153a:	e095      	b.n	8001668 <look2_binlxpw+0x310>
  } else if (u1 < bp1[maxIndex[1U]]) {
 800153c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800153e:	3304      	adds	r3, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001546:	4413      	add	r3, r2
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001550:	f7ff fa44 	bl	80009dc <__aeabi_dcmplt>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d04f      	beq.n	80015fa <look2_binlxpw+0x2a2>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 800155a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800155c:	3304      	adds	r3, #4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[1U];
 8001568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800156a:	3304      	adds	r3, #4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 8001570:	e016      	b.n	80015a0 <look2_binlxpw+0x248>
      if (u1 < bp1[bpIdx]) {
 8001572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001578:	4413      	add	r3, r2
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001582:	f7ff fa2b 	bl	80009dc <__aeabi_dcmplt>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <look2_binlxpw+0x23a>
        iRght = bpIdx;
 800158c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001590:	e001      	b.n	8001596 <look2_binlxpw+0x23e>
      } else {
        iLeft = bpIdx;
 8001592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001594:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8001596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159a:	4413      	add	r3, r2
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 80015a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d8e3      	bhi.n	8001572 <look2_binlxpw+0x21a>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 80015aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80015b0:	4413      	add	r3, r2
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015ba:	f7fe fde5 	bl	8000188 <__aeabi_dsub>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4614      	mov	r4, r2
 80015c4:	461d      	mov	r5, r3
 80015c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c8:	3301      	adds	r3, #1
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80015ce:	4413      	add	r3, r2
 80015d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80015da:	4413      	add	r3, r2
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7fe fdd2 	bl	8000188 <__aeabi_dsub>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7ff f8ae 	bl	800074c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80015f8:	e036      	b.n	8001668 <look2_binlxpw+0x310>
  } else {
    iLeft = maxIndex[1U] - 1U;
 80015fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015fc:	3304      	adds	r3, #4
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3b01      	subs	r3, #1
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 8001604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001606:	3304      	adds	r3, #4
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800160e:	3b01      	subs	r3, #1
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001614:	4413      	add	r3, r2
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800161e:	f7fe fdb3 	bl	8000188 <__aeabi_dsub>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4614      	mov	r4, r2
 8001628:	461d      	mov	r5, r3
 800162a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800162c:	3304      	adds	r3, #4
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001634:	4413      	add	r3, r2
 8001636:	e9d3 0100 	ldrd	r0, r1, [r3]
 800163a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800163c:	3304      	adds	r3, #4
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001644:	3b01      	subs	r3, #1
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800164a:	4413      	add	r3, r2
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe fd9a 	bl	8000188 <__aeabi_dsub>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4620      	mov	r0, r4
 800165a:	4629      	mov	r1, r5
 800165c:	f7ff f876 	bl	800074c <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800166c:	fb03 f202 	mul.w	r2, r3, r2
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	4413      	add	r3, r2
 8001674:	63bb      	str	r3, [r7, #56]	; 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 8001676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001678:	3301      	adds	r3, #1
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800167e:	4413      	add	r3, r2
 8001680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800168a:	4413      	add	r3, r2
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7fe fd7a 	bl	8000188 <__aeabi_dsub>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016a0:	f7fe ff2a 	bl	80004f8 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016b2:	4413      	add	r3, r2
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe fd68 	bl	800018c <__adddf3>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  bpIdx += stride;
 80016c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016c8:	4413      	add	r3, r2
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 80016cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ce:	3301      	adds	r3, #1
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016d4:	4413      	add	r3, r2
 80016d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016e0:	4413      	add	r3, r2
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7fe fd4f 	bl	8000188 <__aeabi_dsub>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016f6:	f7fe feff 	bl	80004f8 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001708:	4413      	add	r3, r2
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7fe fd3d 	bl	800018c <__adddf3>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800171e:	f7fe fd33 	bl	8000188 <__aeabi_dsub>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
          yL_1d) * frac + yL_1d;
 800172a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800172e:	f7fe fee3 	bl	80004f8 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800173e:	f7fe fd25 	bl	800018c <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
}
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	3748      	adds	r7, #72	; 0x48
 800174c:	46bd      	mov	sp, r7
 800174e:	bdb0      	pop	{r4, r5, r7, pc}

08001750 <look1_binlxpw>:

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001768:	f7ff f942 	bl	80009f0 <__aeabi_dcmple>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d020      	beq.n	80017b4 <look1_binlxpw+0x64>
    iLeft = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001780:	f7fe fd02 	bl	8000188 <__aeabi_dsub>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3308      	adds	r3, #8
 8001790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe fcf5 	bl	8000188 <__aeabi_dsub>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe ffd1 	bl	800074c <__aeabi_ddiv>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80017b2:	e087      	b.n	80018c4 <look1_binlxpw+0x174>
  } else if (u0 < bp0[maxIndex]) {
 80017b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017c4:	f7ff f90a 	bl	80009dc <__aeabi_dcmplt>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d04b      	beq.n	8001866 <look1_binlxpw+0x116>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 80017ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 80017d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017da:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 80017dc:	e016      	b.n	800180c <look1_binlxpw+0xbc>
      if (u0 < bp0[bpIdx]) {
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017ee:	f7ff f8f5 	bl	80009dc <__aeabi_dcmplt>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <look1_binlxpw+0xae>
        iRght = bpIdx;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	e001      	b.n	8001802 <look1_binlxpw+0xb2>
      } else {
        iLeft = bpIdx;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	4413      	add	r3, r2
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	617b      	str	r3, [r7, #20]
    while (iRght - iLeft > 1U) {
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b01      	cmp	r3, #1
 8001814:	d8e3      	bhi.n	80017de <look1_binlxpw+0x8e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001826:	f7fe fcaf 	bl	8000188 <__aeabi_dsub>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4614      	mov	r4, r2
 8001830:	461d      	mov	r5, r3
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	3301      	adds	r3, #1
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	4413      	add	r3, r2
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fc9c 	bl	8000188 <__aeabi_dsub>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f7fe ff78 	bl	800074c <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001864:	e02e      	b.n	80018c4 <look1_binlxpw+0x174>
  } else {
    iLeft = maxIndex - 1U;
 8001866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001868:	3b01      	subs	r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 800186c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800186e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001872:	3b01      	subs	r3, #1
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001882:	f7fe fc81 	bl	8000188 <__aeabi_dsub>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4614      	mov	r4, r2
 800188c:	461d      	mov	r5, r3
 800188e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800189a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800189c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80018a0:	3b01      	subs	r3, #1
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fc6c 	bl	8000188 <__aeabi_dsub>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe ff48 	bl	800074c <__aeabi_ddiv>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	3301      	adds	r3, #1
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fc53 	bl	8000188 <__aeabi_dsub>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018ee:	f7fe fe03 	bl	80004f8 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	4413      	add	r3, r2
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fc41 	bl	800018c <__adddf3>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
}
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bdb0      	pop	{r4, r5, r7, pc}

08001918 <EngTrModel_gear_state>:

/* Function for Chart: '<Root>/ShiftLogic' */
static void EngTrModel_gear_state(const int32_T *sfEvent)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  switch (EngTrModel_DW.is_gear_state) {
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 8001922:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001926:	3b01      	subs	r3, #1
 8001928:	2b03      	cmp	r3, #3
 800192a:	d86c      	bhi.n	8001a06 <EngTrModel_gear_state+0xee>
 800192c:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <EngTrModel_gear_state+0x1c>)
 800192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001932:	bf00      	nop
 8001934:	08001945 	.word	0x08001945
 8001938:	08001965 	.word	0x08001965
 800193c:	08001983 	.word	0x08001983
 8001940:	080019bd 	.word	0x080019bd
   case EngTrModel_IN_first:
    if (*sfEvent == EngTrModel_event_UP) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d155      	bne.n	80019f8 <EngTrModel_gear_state+0xe0>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 800194e:	2203      	movs	r2, #3
 8001950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 8001954:	492f      	ldr	r1, [pc, #188]	; (8001a14 <EngTrModel_gear_state+0xfc>)
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800195e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 8001962:	e049      	b.n	80019f8 <EngTrModel_gear_state+0xe0>

   case EngTrModel_IN_fourth:
    if (*sfEvent == EngTrModel_event_DOWN) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d147      	bne.n	80019fc <EngTrModel_gear_state+0xe4>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 800196c:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 800196e:	2204      	movs	r2, #4
 8001970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 8001974:	4927      	ldr	r1, [pc, #156]	; (8001a14 <EngTrModel_gear_state+0xfc>)
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <EngTrModel_gear_state+0x100>)
 800197c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 8001980:	e03c      	b.n	80019fc <EngTrModel_gear_state+0xe4>

   case EngTrModel_IN_second:
    switch (*sfEvent) {
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00c      	beq.n	80019a4 <EngTrModel_gear_state+0x8c>
 800198a:	2b01      	cmp	r3, #1
 800198c:	d138      	bne.n	8001a00 <EngTrModel_gear_state+0xe8>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 8001990:	2204      	movs	r2, #4
 8001992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 8001996:	491f      	ldr	r1, [pc, #124]	; (8001a14 <EngTrModel_gear_state+0xfc>)
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <EngTrModel_gear_state+0x100>)
 800199e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80019a2:	e00a      	b.n	80019ba <EngTrModel_gear_state+0xa2>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 1.0;
 80019ac:	4919      	ldr	r1, [pc, #100]	; (8001a14 <EngTrModel_gear_state+0xfc>)
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <EngTrModel_gear_state+0x104>)
 80019b4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80019b8:	bf00      	nop
    }
    break;
 80019ba:	e021      	b.n	8001a00 <EngTrModel_gear_state+0xe8>

   case EngTrModel_IN_third:
    switch (*sfEvent) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00c      	beq.n	80019de <EngTrModel_gear_state+0xc6>
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d11d      	bne.n	8001a04 <EngTrModel_gear_state+0xec>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_fourth;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 4.0;
 80019d0:	4910      	ldr	r1, [pc, #64]	; (8001a14 <EngTrModel_gear_state+0xfc>)
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <EngTrModel_gear_state+0x108>)
 80019d8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80019dc:	e00b      	b.n	80019f6 <EngTrModel_gear_state+0xde>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 80019e0:	2203      	movs	r2, #3
 80019e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 80019e6:	490b      	ldr	r1, [pc, #44]	; (8001a14 <EngTrModel_gear_state+0xfc>)
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80019f4:	bf00      	nop
    }
    break;
 80019f6:	e005      	b.n	8001a04 <EngTrModel_gear_state+0xec>
    break;
 80019f8:	bf00      	nop
 80019fa:	e004      	b.n	8001a06 <EngTrModel_gear_state+0xee>
    break;
 80019fc:	bf00      	nop
 80019fe:	e002      	b.n	8001a06 <EngTrModel_gear_state+0xee>
    break;
 8001a00:	bf00      	nop
 8001a02:	e000      	b.n	8001a06 <EngTrModel_gear_state+0xee>
    break;
 8001a04:	bf00      	nop
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000248 	.word	0x20000248
 8001a14:	20000218 	.word	0x20000218
 8001a18:	40080000 	.word	0x40080000
 8001a1c:	3ff00000 	.word	0x3ff00000
 8001a20:	40100000 	.word	0x40100000

08001a24 <rt_powd_snf>:

real_T rt_powd_snf(real_T u0, real_T u1)
{
 8001a24:	b5b0      	push	{r4, r5, r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001a2e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  real_T y;
  real_T tmp;
  real_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 8001a32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a36:	f001 fdbd 	bl	80035b4 <rtIsNaN>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d106      	bne.n	8001a4e <rt_powd_snf+0x2a>
 8001a40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a44:	f001 fdb6 	bl	80035b4 <rtIsNaN>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <rt_powd_snf+0x36>
    y = (rtNaN);
 8001a4e:	4b7e      	ldr	r3, [pc, #504]	; (8001c48 <rt_powd_snf+0x224>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a58:	e0ef      	b.n	8001c3a <rt_powd_snf+0x216>
  } else {
    tmp = fabs(u0);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp_0 = fabs(u1);
 8001a6e:	68bc      	ldr	r4, [r7, #8]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001a76:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 8001a7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a7e:	f001 fd75 	bl	800356c <rtIsInf>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d049      	beq.n	8001b1c <rt_powd_snf+0xf8>
      if (tmp == 1.0) {
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b6f      	ldr	r3, [pc, #444]	; (8001c4c <rt_powd_snf+0x228>)
 8001a8e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a92:	f7fe ff99 	bl	80009c8 <__aeabi_dcmpeq>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <rt_powd_snf+0x84>
        y = 1.0;
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4b6a      	ldr	r3, [pc, #424]	; (8001c4c <rt_powd_snf+0x228>)
 8001aa2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001aa6:	e0c8      	b.n	8001c3a <rt_powd_snf+0x216>
      } else if (tmp > 1.0) {
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <rt_powd_snf+0x228>)
 8001aae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ab2:	f7fe ffb1 	bl	8000a18 <__aeabi_dcmpgt>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d017      	beq.n	8001aec <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ac8:	f7fe ffa6 	bl	8000a18 <__aeabi_dcmpgt>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <rt_powd_snf+0xba>
          y = (rtInf);
 8001ad2:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <rt_powd_snf+0x22c>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001adc:	e0ad      	b.n	8001c3a <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001aea:	e0a6      	b.n	8001c3a <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001af8:	f7fe ff8e 	bl	8000a18 <__aeabi_dcmpgt>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <rt_powd_snf+0xec>
        y = 0.0;
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001b0e:	e094      	b.n	8001c3a <rt_powd_snf+0x216>
      } else {
        y = (rtInf);
 8001b10:	4b4f      	ldr	r3, [pc, #316]	; (8001c50 <rt_powd_snf+0x22c>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001b1a:	e08e      	b.n	8001c3a <rt_powd_snf+0x216>
      }
    } else if (tmp_0 == 0.0) {
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b28:	f7fe ff4e 	bl	80009c8 <__aeabi_dcmpeq>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <rt_powd_snf+0x11a>
      y = 1.0;
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <rt_powd_snf+0x228>)
 8001b38:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001b3c:	e07d      	b.n	8001c3a <rt_powd_snf+0x216>
    } else if (tmp_0 == 1.0) {
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <rt_powd_snf+0x228>)
 8001b44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b48:	f7fe ff3e 	bl	80009c8 <__aeabi_dcmpeq>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d01b      	beq.n	8001b8a <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b5e:	f7fe ff5b 	bl	8000a18 <__aeabi_dcmpgt>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d004      	beq.n	8001b72 <rt_powd_snf+0x14e>
        y = u0;
 8001b68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b6c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001b70:	e063      	b.n	8001c3a <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8001b72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b76:	f04f 0000 	mov.w	r0, #0
 8001b7a:	4934      	ldr	r1, [pc, #208]	; (8001c4c <rt_powd_snf+0x228>)
 8001b7c:	f7fe fde6 	bl	800074c <__aeabi_ddiv>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001b88:	e057      	b.n	8001c3a <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b96:	f7fe ff17 	bl	80009c8 <__aeabi_dcmpeq>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00a      	beq.n	8001bb6 <rt_powd_snf+0x192>
      y = u0 * u0;
 8001ba0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ba4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ba8:	f7fe fca6 	bl	80004f8 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001bb4:	e041      	b.n	8001c3a <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <rt_powd_snf+0x230>)
 8001bbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bc0:	f7fe ff02 	bl	80009c8 <__aeabi_dcmpeq>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d011      	beq.n	8001bee <rt_powd_snf+0x1ca>
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bd6:	f7fe ff15 	bl	8000a04 <__aeabi_dcmpge>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001be0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001be4:	f006 fcbe 	bl	8008564 <sqrt>
 8001be8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001bec:	e025      	b.n	8001c3a <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bfa:	f7fe feef 	bl	80009dc <__aeabi_dcmplt>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d012      	beq.n	8001c2a <rt_powd_snf+0x206>
 8001c04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c08:	f006 fdae 	bl	8008768 <floor>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c14:	f7fe ff00 	bl	8000a18 <__aeabi_dcmpgt>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <rt_powd_snf+0x206>
      y = (rtNaN);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <rt_powd_snf+0x224>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001c28:	e007      	b.n	8001c3a <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8001c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c32:	f006 fc2f 	bl	8008494 <pow>
 8001c36:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    }
  }

  return y;
 8001c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	3730      	adds	r7, #48	; 0x30
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bdb0      	pop	{r4, r5, r7, pc}
 8001c48:	200002e0 	.word	0x200002e0
 8001c4c:	3ff00000 	.word	0x3ff00000
 8001c50:	200002d0 	.word	0x200002d0
 8001c54:	3fe00000 	.word	0x3fe00000

08001c58 <EngTrModel_step>:

/* Model step function */
void EngTrModel_step(void)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b08c      	sub	sp, #48	; 0x30
 8001c5c:	af06      	add	r7, sp, #24
  int32_T sfEvent;
  real_T InterpDown;
  real_T InterpUp;

  /* DiscreteIntegrator: '<S1>/Discrete-Time Integrator' */
  EngTrModel_B.EngineRPM = EngTrModel_DW.DiscreteTimeIntegrator_DSTATE;
 8001c5e:	4b8c      	ldr	r3, [pc, #560]	; (8001e90 <EngTrModel_step+0x238>)
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	498b      	ldr	r1, [pc, #556]	; (8001e94 <EngTrModel_step+0x23c>)
 8001c66:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/EngineSpeed' */
  EngTrModel_Y.EngineSpeed = EngTrModel_B.EngineRPM;
 8001c6a:	4b8a      	ldr	r3, [pc, #552]	; (8001e94 <EngTrModel_step+0x23c>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	4989      	ldr	r1, [pc, #548]	; (8001e98 <EngTrModel_step+0x240>)
 8001c72:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S8>/ToLinearSpeed'
   */
  /* Unit Conversion - from: ft/min to: mph
     Expression: output = (0.0113636*input) + (0) */
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001c76:	4b86      	ldr	r3, [pc, #536]	; (8001e90 <EngTrModel_step+0x238>)
 8001c78:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 8001c7c:	a380      	add	r3, pc, #512	; (adr r3, 8001e80 <EngTrModel_step+0x228>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	f7fe fc39 	bl	80004f8 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001c8e:	a37e      	add	r3, pc, #504	; (adr r3, 8001e88 <EngTrModel_step+0x230>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fc30 	bl	80004f8 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 8001c9c:	497d      	ldr	r1, [pc, #500]	; (8001e94 <EngTrModel_step+0x23c>)
 8001c9e:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Chart: '<Root>/ShiftLogic' */
  sfEvent = EngTrModel_CALL_EVENT;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	607b      	str	r3, [r7, #4]
  if (EngTrModel_DW.temporalCounter_i1 < MAX_uint32_T) {
 8001ca8:	4b79      	ldr	r3, [pc, #484]	; (8001e90 <EngTrModel_step+0x238>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d004      	beq.n	8001cbc <EngTrModel_step+0x64>
    EngTrModel_DW.temporalCounter_i1++;
 8001cb2:	4b77      	ldr	r3, [pc, #476]	; (8001e90 <EngTrModel_step+0x238>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	4a75      	ldr	r2, [pc, #468]	; (8001e90 <EngTrModel_step+0x238>)
 8001cba:	61d3      	str	r3, [r2, #28]
  }

  if (EngTrModel_DW.is_active_c1_EngTrModel == 0U) {
 8001cbc:	4b74      	ldr	r3, [pc, #464]	; (8001e90 <EngTrModel_step+0x238>)
 8001cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d11a      	bne.n	8001cfc <EngTrModel_step+0xa4>
    EngTrModel_DW.is_active_c1_EngTrModel = 1U;
 8001cc6:	4b72      	ldr	r3, [pc, #456]	; (8001e90 <EngTrModel_step+0x238>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2020 	strb.w	r2, [r3, #32]
    EngTrModel_DW.is_active_gear_state = 1U;
 8001cce:	4b70      	ldr	r3, [pc, #448]	; (8001e90 <EngTrModel_step+0x238>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 8001cd6:	4b6e      	ldr	r3, [pc, #440]	; (8001e90 <EngTrModel_step+0x238>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    EngTrModel_B.Gear = 1.0;
 8001cde:	496d      	ldr	r1, [pc, #436]	; (8001e94 <EngTrModel_step+0x23c>)
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b6d      	ldr	r3, [pc, #436]	; (8001e9c <EngTrModel_step+0x244>)
 8001ce6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    EngTrModel_DW.is_active_selection_state = 1U;
 8001cea:	4b69      	ldr	r3, [pc, #420]	; (8001e90 <EngTrModel_step+0x238>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <EngTrModel_step+0x238>)
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001cfa:	e0e4      	b.n	8001ec6 <EngTrModel_step+0x26e>
  } else {
    if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001cfc:	4b64      	ldr	r3, [pc, #400]	; (8001e90 <EngTrModel_step+0x238>)
 8001cfe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <EngTrModel_step+0xb6>
      EngTrModel_gear_state(&sfEvent);
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fe05 	bl	8001918 <EngTrModel_gear_state>
    }

    if (EngTrModel_DW.is_active_selection_state != 0U) {
 8001d0e:	4b60      	ldr	r3, [pc, #384]	; (8001e90 <EngTrModel_step+0x238>)
 8001d10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80d6 	beq.w	8001ec6 <EngTrModel_step+0x26e>
      /* Outputs for Function Call SubSystem: '<S2>/ComputeThreshold' */
      /* Lookup_n-D: '<S5>/InterpDown' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpDown = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001d1a:	4b61      	ldr	r3, [pc, #388]	; (8001ea0 <EngTrModel_step+0x248>)
 8001d1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d20:	4b5c      	ldr	r3, [pc, #368]	; (8001e94 <EngTrModel_step+0x23c>)
 8001d22:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001d26:	2406      	movs	r4, #6
 8001d28:	9404      	str	r4, [sp, #16]
 8001d2a:	4c5e      	ldr	r4, [pc, #376]	; (8001ea4 <EngTrModel_step+0x24c>)
 8001d2c:	9403      	str	r4, [sp, #12]
 8001d2e:	4c5e      	ldr	r4, [pc, #376]	; (8001ea8 <EngTrModel_step+0x250>)
 8001d30:	9402      	str	r4, [sp, #8]
 8001d32:	4c5e      	ldr	r4, [pc, #376]	; (8001eac <EngTrModel_step+0x254>)
 8001d34:	9401      	str	r4, [sp, #4]
 8001d36:	4c5e      	ldr	r4, [pc, #376]	; (8001eb0 <EngTrModel_step+0x258>)
 8001d38:	9400      	str	r4, [sp, #0]
 8001d3a:	f7ff fb0d 	bl	8001358 <look2_binlxpw>
 8001d3e:	e9c7 0104 	strd	r0, r1, [r7, #16]
        EngTrModel_ConstP.InterpDown_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* Lookup_n-D: '<S5>/InterpUp' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpUp = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001d42:	4b57      	ldr	r3, [pc, #348]	; (8001ea0 <EngTrModel_step+0x248>)
 8001d44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d48:	4b52      	ldr	r3, [pc, #328]	; (8001e94 <EngTrModel_step+0x23c>)
 8001d4a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001d4e:	2406      	movs	r4, #6
 8001d50:	9404      	str	r4, [sp, #16]
 8001d52:	4c54      	ldr	r4, [pc, #336]	; (8001ea4 <EngTrModel_step+0x24c>)
 8001d54:	9403      	str	r4, [sp, #12]
 8001d56:	4c57      	ldr	r4, [pc, #348]	; (8001eb4 <EngTrModel_step+0x25c>)
 8001d58:	9402      	str	r4, [sp, #8]
 8001d5a:	4c54      	ldr	r4, [pc, #336]	; (8001eac <EngTrModel_step+0x254>)
 8001d5c:	9401      	str	r4, [sp, #4]
 8001d5e:	4c56      	ldr	r4, [pc, #344]	; (8001eb8 <EngTrModel_step+0x260>)
 8001d60:	9400      	str	r4, [sp, #0]
 8001d62:	f7ff faf9 	bl	8001358 <look2_binlxpw>
 8001d66:	e9c7 0102 	strd	r0, r1, [r7, #8]
        EngTrModel_ConstP.InterpUp_bp01Data, EngTrModel_ConstP.pooled2,
        EngTrModel_ConstP.InterpUp_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* End of Outputs for SubSystem: '<S2>/ComputeThreshold' */
      switch (EngTrModel_DW.is_selection_state) {
 8001d6a:	4b49      	ldr	r3, [pc, #292]	; (8001e90 <EngTrModel_step+0x238>)
 8001d6c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d05a      	beq.n	8001e2a <EngTrModel_step+0x1d2>
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	f300 80a6 	bgt.w	8001ec6 <EngTrModel_step+0x26e>
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d002      	beq.n	8001d84 <EngTrModel_step+0x12c>
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d02e      	beq.n	8001de0 <EngTrModel_step+0x188>
 8001d82:	e0a0      	b.n	8001ec6 <EngTrModel_step+0x26e>
       case EngTrModel_IN_downshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001d84:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <EngTrModel_step+0x238>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d919      	bls.n	8001dc0 <EngTrModel_step+0x168>
            (EngTrModel_B.VehicleSpeed <= InterpDown)) {
 8001d8c:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <EngTrModel_step+0x23c>)
 8001d8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001d92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d96:	f7fe fe35 	bl	8000a04 <__aeabi_dcmpge>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00f      	beq.n	8001dc0 <EngTrModel_step+0x168>
          sfEvent = EngTrModel_event_DOWN;
 8001da0:	2300      	movs	r3, #0
 8001da2:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001da4:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <EngTrModel_step+0x238>)
 8001da6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <EngTrModel_step+0x15e>
            EngTrModel_gear_state(&sfEvent);
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fdb1 	bl	8001918 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001db6:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <EngTrModel_step+0x238>)
 8001db8:	2202      	movs	r2, #2
 8001dba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001dbe:	e082      	b.n	8001ec6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
 8001dc0:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <EngTrModel_step+0x23c>)
 8001dc2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001dc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dca:	f7fe fe07 	bl	80009dc <__aeabi_dcmplt>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d100      	bne.n	8001dd6 <EngTrModel_step+0x17e>
        break;
 8001dd4:	e077      	b.n	8001ec6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <EngTrModel_step+0x238>)
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001dde:	e072      	b.n	8001ec6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_steady_state:
        if (EngTrModel_B.VehicleSpeed > InterpUp) {
 8001de0:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <EngTrModel_step+0x23c>)
 8001de2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001de6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dea:	f7fe fdf7 	bl	80009dc <__aeabi_dcmplt>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <EngTrModel_step+0x1ac>
          EngTrModel_DW.is_selection_state = EngTrModel_IN_upshifting;
 8001df4:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <EngTrModel_step+0x238>)
 8001df6:	2203      	movs	r2, #3
 8001df8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          EngTrModel_DW.temporalCounter_i1 = 0U;
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <EngTrModel_step+0x238>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
            EngTrModel_DW.temporalCounter_i1 = 0U;
          }
        }
        break;
 8001e02:	e060      	b.n	8001ec6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <EngTrModel_step+0x23c>)
 8001e06:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e0e:	f7fe fe03 	bl	8000a18 <__aeabi_dcmpgt>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d100      	bne.n	8001e1a <EngTrModel_step+0x1c2>
        break;
 8001e18:	e055      	b.n	8001ec6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <EngTrModel_step+0x238>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            EngTrModel_DW.temporalCounter_i1 = 0U;
 8001e22:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <EngTrModel_step+0x238>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	61da      	str	r2, [r3, #28]
        break;
 8001e28:	e04d      	b.n	8001ec6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_upshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <EngTrModel_step+0x238>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d919      	bls.n	8001e66 <EngTrModel_step+0x20e>
            (EngTrModel_B.VehicleSpeed >= InterpUp)) {
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <EngTrModel_step+0x23c>)
 8001e34:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001e38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e3c:	f7fe fdd8 	bl	80009f0 <__aeabi_dcmple>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00f      	beq.n	8001e66 <EngTrModel_step+0x20e>
          sfEvent = EngTrModel_event_UP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <EngTrModel_step+0x238>)
 8001e4c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <EngTrModel_step+0x204>
            EngTrModel_gear_state(&sfEvent);
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fd5e 	bl	8001918 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <EngTrModel_step+0x238>)
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001e64:	e02e      	b.n	8001ec4 <EngTrModel_step+0x26c>
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <EngTrModel_step+0x23c>)
 8001e68:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e70:	f7fe fdd2 	bl	8000a18 <__aeabi_dcmpgt>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d120      	bne.n	8001ebc <EngTrModel_step+0x264>
        break;
 8001e7a:	e023      	b.n	8001ec4 <EngTrModel_step+0x26c>
 8001e7c:	f3af 8000 	nop.w
 8001e80:	54442d18 	.word	0x54442d18
 8001e84:	401921fb 	.word	0x401921fb
 8001e88:	745d1746 	.word	0x745d1746
 8001e8c:	3f8745d1 	.word	0x3f8745d1
 8001e90:	20000248 	.word	0x20000248
 8001e94:	20000218 	.word	0x20000218
 8001e98:	20000280 	.word	0x20000280
 8001e9c:	3ff00000 	.word	0x3ff00000
 8001ea0:	20000270 	.word	0x20000270
 8001ea4:	08009c70 	.word	0x08009c70
 8001ea8:	08009440 	.word	0x08009440
 8001eac:	08009530 	.word	0x08009530
 8001eb0:	08009500 	.word	0x08009500
 8001eb4:	08009550 	.word	0x08009550
 8001eb8:	08009610 	.word	0x08009610
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001ebc:	4b84      	ldr	r3, [pc, #528]	; (80020d0 <EngTrModel_step+0x478>)
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001ec4:	bf00      	nop
  }

  /* End of Chart: '<Root>/ShiftLogic' */

  /* Lookup_n-D: '<S7>/Table' */
  InterpDown = look1_binlxpw(EngTrModel_B.Gear, EngTrModel_ConstP.pooled2,
 8001ec6:	4b83      	ldr	r3, [pc, #524]	; (80020d4 <EngTrModel_step+0x47c>)
 8001ec8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ecc:	2303      	movs	r3, #3
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	4b81      	ldr	r3, [pc, #516]	; (80020d8 <EngTrModel_step+0x480>)
 8001ed2:	4a82      	ldr	r2, [pc, #520]	; (80020dc <EngTrModel_step+0x484>)
 8001ed4:	f7ff fc3c 	bl	8001750 <look1_binlxpw>
 8001ed8:	e9c7 0104 	strd	r0, r1, [r7, #16]
    EngTrModel_ConstP.Table_tableData, 3U);

  /* Gain: '<S4>/FinalDriveRatio2' incorporates:
   *  DiscreteIntegrator: '<S4>/WheelSpeed'
   */
  EngTrModel_B.TransmissionRPM = 3.23 * EngTrModel_DW.WheelSpeed_DSTATE;
 8001edc:	4b7c      	ldr	r3, [pc, #496]	; (80020d0 <EngTrModel_step+0x478>)
 8001ede:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ee2:	a375      	add	r3, pc, #468	; (adr r3, 80020b8 <EngTrModel_step+0x460>)
 8001ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee8:	f7fe fb06 	bl	80004f8 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4978      	ldr	r1, [pc, #480]	; (80020d4 <EngTrModel_step+0x47c>)
 8001ef2:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Product: '<S6>/SpeedRatio' incorporates:
   *  Product: '<S7>/Product1'
   */
  if( EngTrModel_B.EngineRPM != 0)
 8001ef6:	4b77      	ldr	r3, [pc, #476]	; (80020d4 <EngTrModel_step+0x47c>)
 8001ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	f7fe fd60 	bl	80009c8 <__aeabi_dcmpeq>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d114      	bne.n	8001f38 <EngTrModel_step+0x2e0>
    InterpUp = InterpDown * EngTrModel_B.TransmissionRPM / EngTrModel_B.EngineRPM;
 8001f0e:	4b71      	ldr	r3, [pc, #452]	; (80020d4 <EngTrModel_step+0x47c>)
 8001f10:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001f14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f18:	f7fe faee 	bl	80004f8 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <EngTrModel_step+0x47c>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	f7fe fc0f 	bl	800074c <__aeabi_ddiv>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f36:	e005      	b.n	8001f44 <EngTrModel_step+0x2ec>
  else
    InterpUp = 0.0;
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Fcn: '<S6>/Impeller' incorporates:
   *  Lookup_n-D: '<S6>/FactorK'
   *  Product: '<S6>/Quotient'
   */
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001f44:	4b63      	ldr	r3, [pc, #396]	; (80020d4 <EngTrModel_step+0x47c>)
 8001f46:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001f4a:	2314      	movs	r3, #20
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	4b64      	ldr	r3, [pc, #400]	; (80020e0 <EngTrModel_step+0x488>)
 8001f50:	4a64      	ldr	r2, [pc, #400]	; (80020e4 <EngTrModel_step+0x48c>)
 8001f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f56:	f7ff fbfb 	bl	8001750 <look1_binlxpw>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe fbf3 	bl	800074c <__aeabi_ddiv>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f76:	f7ff fd55 	bl	8001a24 <rt_powd_snf>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4955      	ldr	r1, [pc, #340]	; (80020d4 <EngTrModel_step+0x47c>)
 8001f80:	e9c1 2306 	strd	r2, r3, [r1, #24]
                  EngTrModel_ConstP.FactorK_tableData, 20U), 2.0);

  /* Lookup_n-D: '<S6>/TorqueRatio' */
  InterpUp = look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001f84:	2314      	movs	r3, #20
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	4b57      	ldr	r3, [pc, #348]	; (80020e8 <EngTrModel_step+0x490>)
 8001f8a:	4a56      	ldr	r2, [pc, #344]	; (80020e4 <EngTrModel_step+0x48c>)
 8001f8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f90:	f7ff fbde 	bl	8001750 <look1_binlxpw>
 8001f94:	e9c7 0102 	strd	r0, r1, [r7, #8]
    EngTrModel_ConstP.TorqueRatio_tableData, 20U);

  /* Product: '<S7>/Product' incorporates:
   *  Product: '<S6>/Turbine'
   */
  EngTrModel_B.OutputTorque = EngTrModel_B.ImpellerTorque * InterpUp *
 8001f98:	4b4e      	ldr	r3, [pc, #312]	; (80020d4 <EngTrModel_step+0x47c>)
 8001f9a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fa2:	f7fe faa9 	bl	80004f8 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
 8001fae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fb2:	f7fe faa1 	bl	80004f8 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4946      	ldr	r1, [pc, #280]	; (80020d4 <EngTrModel_step+0x47c>)
 8001fbc:	e9c1 2308 	strd	r2, r3, [r1, #32]
    InterpDown;

  /* Outport: '<Root>/Gear' */
  EngTrModel_Y.Gear = EngTrModel_B.Gear;
 8001fc0:	4b44      	ldr	r3, [pc, #272]	; (80020d4 <EngTrModel_step+0x47c>)
 8001fc2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001fc6:	4949      	ldr	r1, [pc, #292]	; (80020ec <EngTrModel_step+0x494>)
 8001fc8:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Outport: '<Root>/VehicleSpeed' */
  EngTrModel_Y.VehicleSpeed = EngTrModel_B.VehicleSpeed;
 8001fcc:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <EngTrModel_step+0x47c>)
 8001fce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001fd2:	4946      	ldr	r1, [pc, #280]	; (80020ec <EngTrModel_step+0x494>)
 8001fd4:	e9c1 2302 	strd	r2, r3, [r1, #8]
   *  Gain: '<S1>/EnginePlusImpellerInertia'
   *  Inport: '<Root>/Throttle'
   *  Lookup_n-D: '<S1>/EngineTorque'
   *  Sum: '<S1>/Sum'
   */
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001fd8:	4b45      	ldr	r3, [pc, #276]	; (80020f0 <EngTrModel_step+0x498>)
 8001fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fde:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <EngTrModel_step+0x47c>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	240a      	movs	r4, #10
 8001fe6:	9404      	str	r4, [sp, #16]
 8001fe8:	4c42      	ldr	r4, [pc, #264]	; (80020f4 <EngTrModel_step+0x49c>)
 8001fea:	9403      	str	r4, [sp, #12]
 8001fec:	4c42      	ldr	r4, [pc, #264]	; (80020f8 <EngTrModel_step+0x4a0>)
 8001fee:	9402      	str	r4, [sp, #8]
 8001ff0:	4c42      	ldr	r4, [pc, #264]	; (80020fc <EngTrModel_step+0x4a4>)
 8001ff2:	9401      	str	r4, [sp, #4]
 8001ff4:	4c42      	ldr	r4, [pc, #264]	; (8002100 <EngTrModel_step+0x4a8>)
 8001ff6:	9400      	str	r4, [sp, #0]
 8001ff8:	f7ff f9ae 	bl	8001358 <look2_binlxpw>
    (EngTrModel_U.Throttle, EngTrModel_B.EngineRPM,
     EngTrModel_ConstP.EngineTorque_bp01Data,
     EngTrModel_ConstP.EngineTorque_bp02Data,
     EngTrModel_ConstP.EngineTorque_tableData,
     EngTrModel_ConstP.EngineTorque_maxIndex, 10U) - EngTrModel_B.ImpellerTorque)
 8001ffc:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <EngTrModel_step+0x47c>)
 8001ffe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002002:	f7fe f8c1 	bl	8000188 <__aeabi_dsub>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
    * 45.472138452209627 * 0.04;
 800200e:	a32c      	add	r3, pc, #176	; (adr r3, 80020c0 <EngTrModel_step+0x468>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe fa70 	bl	80004f8 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	a329      	add	r3, pc, #164	; (adr r3, 80020c8 <EngTrModel_step+0x470>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	f7fe fa67 	bl	80004f8 <__aeabi_dmul>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <EngTrModel_step+0x478>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	f7fe f8a8 	bl	800018c <__adddf3>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4923      	ldr	r1, [pc, #140]	; (80020d0 <EngTrModel_step+0x478>)
 8002042:	e9c1 2300 	strd	r2, r3, [r1]

  /* Signum: '<S4>/Sign' */
  if (EngTrModel_B.VehicleSpeed < 0.0) {
 8002046:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <EngTrModel_step+0x47c>)
 8002048:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	f7fe fcc2 	bl	80009dc <__aeabi_dcmplt>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <EngTrModel_step+0x412>
    InterpDown = -1.0;
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	4b28      	ldr	r3, [pc, #160]	; (8002104 <EngTrModel_step+0x4ac>)
 8002064:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002068:	e055      	b.n	8002116 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed > 0.0) {
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <EngTrModel_step+0x47c>)
 800206c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	f7fe fcce 	bl	8000a18 <__aeabi_dcmpgt>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <EngTrModel_step+0x436>
    InterpDown = 1.0;
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <EngTrModel_step+0x4b0>)
 8002088:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800208c:	e043      	b.n	8002116 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed == 0.0) {
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <EngTrModel_step+0x47c>)
 8002090:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	f7fe fc94 	bl	80009c8 <__aeabi_dcmpeq>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d032      	beq.n	800210c <EngTrModel_step+0x4b4>
    InterpDown = 0.0;
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80020b2:	e030      	b.n	8002116 <EngTrModel_step+0x4be>
 80020b4:	f3af 8000 	nop.w
 80020b8:	3d70a3d7 	.word	0x3d70a3d7
 80020bc:	4009d70a 	.word	0x4009d70a
 80020c0:	0865b653 	.word	0x0865b653
 80020c4:	4046bc6f 	.word	0x4046bc6f
 80020c8:	47ae147b 	.word	0x47ae147b
 80020cc:	3fa47ae1 	.word	0x3fa47ae1
 80020d0:	20000248 	.word	0x20000248
 80020d4:	20000218 	.word	0x20000218
 80020d8:	08009a58 	.word	0x08009a58
 80020dc:	08009530 	.word	0x08009530
 80020e0:	08009a78 	.word	0x08009a78
 80020e4:	08009b20 	.word	0x08009b20
 80020e8:	08009bc8 	.word	0x08009bc8
 80020ec:	20000280 	.word	0x20000280
 80020f0:	20000270 	.word	0x20000270
 80020f4:	08009c78 	.word	0x08009c78
 80020f8:	08009640 	.word	0x08009640
 80020fc:	08009a00 	.word	0x08009a00
 8002100:	080099b0 	.word	0x080099b0
 8002104:	bff00000 	.word	0xbff00000
 8002108:	3ff00000 	.word	0x3ff00000
  } else {
    InterpDown = (rtNaN);
 800210c:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <EngTrModel_step+0x5a0>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	e9c7 2304 	strd	r2, r3, [r7, #16]
   *  Inport: '<Root>/Brake'
   *  Product: '<S4>/SignedLoad'
   *  Sum: '<S4>/Sum'
   *  Sum: '<S4>/Sum1'
   */
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <EngTrModel_step+0x5a4>)
 8002118:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800211c:	a32e      	add	r3, pc, #184	; (adr r3, 80021d8 <EngTrModel_step+0x580>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	f7fe f9e9 	bl	80004f8 <__aeabi_dmul>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4614      	mov	r4, r2
 800212c:	461d      	mov	r5, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 800212e:	4b33      	ldr	r3, [pc, #204]	; (80021fc <EngTrModel_step+0x5a4>)
 8002130:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800213c:	f7ff fc72 	bl	8001a24 <rt_powd_snf>
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8002140:	a327      	add	r3, pc, #156	; (adr r3, 80021e0 <EngTrModel_step+0x588>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f7fe f9d7 	bl	80004f8 <__aeabi_dmul>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <EngTrModel_step+0x5a8>)
 8002158:	f7fe f818 	bl	800018c <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <EngTrModel_step+0x5ac>)
 8002166:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 800216a:	f7fe f80f 	bl	800018c <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8002176:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800217a:	f7fe f9bd 	bl	80004f8 <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8002182:	4620      	mov	r0, r4
 8002184:	4629      	mov	r1, r5
 8002186:	f7fd ffff 	bl	8000188 <__aeabi_dsub>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8002192:	a315      	add	r3, pc, #84	; (adr r3, 80021e8 <EngTrModel_step+0x590>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe f9ae 	bl	80004f8 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	a312      	add	r3, pc, #72	; (adr r3, 80021f0 <EngTrModel_step+0x598>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe f9a5 	bl	80004f8 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <EngTrModel_step+0x5b0>)
 80021b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021bc:	f7fd ffe6 	bl	800018c <__adddf3>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4910      	ldr	r1, [pc, #64]	; (8002208 <EngTrModel_step+0x5b0>)
 80021c6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bdb0      	pop	{r4, r5, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	f3af 8000 	nop.w
 80021d8:	3d70a3d7 	.word	0x3d70a3d7
 80021dc:	4009d70a 	.word	0x4009d70a
 80021e0:	47ae147b 	.word	0x47ae147b
 80021e4:	3f947ae1 	.word	0x3f947ae1
 80021e8:	b3bfa695 	.word	0xb3bfa695
 80021ec:	3fb52ad1 	.word	0x3fb52ad1
 80021f0:	47ae147b 	.word	0x47ae147b
 80021f4:	3fa47ae1 	.word	0x3fa47ae1
 80021f8:	200002e0 	.word	0x200002e0
 80021fc:	20000218 	.word	0x20000218
 8002200:	40440000 	.word	0x40440000
 8002204:	20000270 	.word	0x20000270
 8002208:	20000248 	.word	0x20000248

0800220c <EngTrModel_initialize>:

/* Model initialize function */
void EngTrModel_initialize(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8002210:	2008      	movs	r0, #8
 8002212:	f001 f973 	bl	80034fc <rt_InitInfAndNaN>
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <USER_GPIO_Define>:
#include "main.h"

// Define a pin

void USER_GPIO_Define( uint8_t port, uint8_t pin, uint8_t direction, uint8_t option )
{
 800221c:	b490      	push	{r4, r7}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	4604      	mov	r4, r0
 8002224:	4608      	mov	r0, r1
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	4623      	mov	r3, r4
 800222c:	71fb      	strb	r3, [r7, #7]
 800222e:	4603      	mov	r3, r0
 8002230:	71bb      	strb	r3, [r7, #6]
 8002232:	460b      	mov	r3, r1
 8002234:	717b      	strb	r3, [r7, #5]
 8002236:	4613      	mov	r3, r2
 8002238:	713b      	strb	r3, [r7, #4]
  volatile uint32_t * CR;
  uint8_t actual_pin = pin;
 800223a:	79bb      	ldrb	r3, [r7, #6]
 800223c:	72fb      	strb	r3, [r7, #11]
  uint8_t offset = 0x00;
 800223e:	2300      	movs	r3, #0
 8002240:	72bb      	strb	r3, [r7, #10]

  if( pin > 7 ) {
 8002242:	79bb      	ldrb	r3, [r7, #6]
 8002244:	2b07      	cmp	r3, #7
 8002246:	d904      	bls.n	8002252 <USER_GPIO_Define+0x36>
      actual_pin -= 8;
 8002248:	7afb      	ldrb	r3, [r7, #11]
 800224a:	3b08      	subs	r3, #8
 800224c:	72fb      	strb	r3, [r7, #11]
      offset = 0x01;
 800224e:	2301      	movs	r3, #1
 8002250:	72bb      	strb	r3, [r7, #10]
  }

  if( port == 0 )
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10d      	bne.n	8002274 <USER_GPIO_Define+0x58>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPAEN;			// IO port A clock enable
 8002258:	4b49      	ldr	r3, [pc, #292]	; (8002380 <USER_GPIO_Define+0x164>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4a48      	ldr	r2, [pc, #288]	; (8002380 <USER_GPIO_Define+0x164>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOA->CRL + offset);
 8002264:	7abb      	ldrb	r3, [r7, #10]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800226c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	e064      	b.n	800233e <USER_GPIO_Define+0x122>
  }
  else if( port == 1 )
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d10d      	bne.n	8002296 <USER_GPIO_Define+0x7a>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPBEN;			// IO port B clock enable
 800227a:	4b41      	ldr	r3, [pc, #260]	; (8002380 <USER_GPIO_Define+0x164>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	4a40      	ldr	r2, [pc, #256]	; (8002380 <USER_GPIO_Define+0x164>)
 8002280:	f043 0308 	orr.w	r3, r3, #8
 8002284:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOB->CRL + offset);
 8002286:	7abb      	ldrb	r3, [r7, #10]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800228e:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e053      	b.n	800233e <USER_GPIO_Define+0x122>
  }
  else if ( port == 2 )
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d10d      	bne.n	80022b8 <USER_GPIO_Define+0x9c>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPCEN;			// IO port C clock enable
 800229c:	4b38      	ldr	r3, [pc, #224]	; (8002380 <USER_GPIO_Define+0x164>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a37      	ldr	r2, [pc, #220]	; (8002380 <USER_GPIO_Define+0x164>)
 80022a2:	f043 0310 	orr.w	r3, r3, #16
 80022a6:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOC->CRL + offset);
 80022a8:	7abb      	ldrb	r3, [r7, #10]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022b0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e042      	b.n	800233e <USER_GPIO_Define+0x122>
  }
  else if ( port == 3 )
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d10d      	bne.n	80022da <USER_GPIO_Define+0xbe>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPDEN;			// IO port D clock enable
 80022be:	4b30      	ldr	r3, [pc, #192]	; (8002380 <USER_GPIO_Define+0x164>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	4a2f      	ldr	r2, [pc, #188]	; (8002380 <USER_GPIO_Define+0x164>)
 80022c4:	f043 0320 	orr.w	r3, r3, #32
 80022c8:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOD->CRL + offset);
 80022ca:	7abb      	ldrb	r3, [r7, #10]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022d2:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e031      	b.n	800233e <USER_GPIO_Define+0x122>
  }
  else if( port == 4 )
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d10d      	bne.n	80022fc <USER_GPIO_Define+0xe0>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPEEN;			// IO port E clock enable
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <USER_GPIO_Define+0x164>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4a26      	ldr	r2, [pc, #152]	; (8002380 <USER_GPIO_Define+0x164>)
 80022e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ea:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOE->CRL + offset);
 80022ec:	7abb      	ldrb	r3, [r7, #10]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022f4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	e020      	b.n	800233e <USER_GPIO_Define+0x122>
  }
  else if( port == 5 )
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d10d      	bne.n	800231e <USER_GPIO_Define+0x102>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPFEN;			// IO port F clock enable
 8002302:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <USER_GPIO_Define+0x164>)
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <USER_GPIO_Define+0x164>)
 8002308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230c:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOF->CRL + offset);
 800230e:	7abb      	ldrb	r3, [r7, #10]
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002316:	f503 338e 	add.w	r3, r3, #72704	; 0x11c00
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e00f      	b.n	800233e <USER_GPIO_Define+0x122>
  }
  else if( port == 6 )
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	2b06      	cmp	r3, #6
 8002322:	d10c      	bne.n	800233e <USER_GPIO_Define+0x122>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPGEN;			// IO port G clock enable
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <USER_GPIO_Define+0x164>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a15      	ldr	r2, [pc, #84]	; (8002380 <USER_GPIO_Define+0x164>)
 800232a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232e:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOG->CRL + offset);
 8002330:	7abb      	ldrb	r3, [r7, #10]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002338:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800233c:	60fb      	str	r3, [r7, #12]
  }

  *CR	&=	~( 0xF << (actual_pin * 4) );			// Reset the target pin
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	7afa      	ldrb	r2, [r7, #11]
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	210f      	movs	r1, #15
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	43d2      	mvns	r2, r2
 800234e:	401a      	ands	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]
  *CR	|=	( direction << (actual_pin * 4) )		// Set up the direction and the option for the pin
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	7979      	ldrb	r1, [r7, #5]
 800235a:	7afa      	ldrb	r2, [r7, #11]
 800235c:	0092      	lsls	r2, r2, #2
 800235e:	4091      	lsls	r1, r2
	|	( option << (actual_pin * 4 + 2) );
 8002360:	7938      	ldrb	r0, [r7, #4]
 8002362:	7afa      	ldrb	r2, [r7, #11]
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	3202      	adds	r2, #2
 8002368:	fa00 f202 	lsl.w	r2, r0, r2
 800236c:	430a      	orrs	r2, r1
  *CR	|=	( direction << (actual_pin * 4) )		// Set up the direction and the option for the pin
 800236e:	431a      	orrs	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	601a      	str	r2, [r3, #0]
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bc90      	pop	{r4, r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000

08002384 <USER_GPIO_Write>:
}

// Write a pin

void USER_GPIO_Write(uint8_t port, uint8_t pin, uint8_t state)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
 800238e:	460b      	mov	r3, r1
 8002390:	71bb      	strb	r3, [r7, #6]
 8002392:	4613      	mov	r3, r2
 8002394:	717b      	strb	r3, [r7, #5]
  volatile uint32_t * ODR;

  if( port == 0 ) {
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <USER_GPIO_Write+0x1e>
      ODR = (volatile uint32_t *) (&GPIOA->ODR);
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <USER_GPIO_Write+0x9c>)
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e022      	b.n	80023e8 <USER_GPIO_Write+0x64>
  }
  else if( port == 1 )
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d102      	bne.n	80023ae <USER_GPIO_Write+0x2a>
  {
      ODR = (volatile uint32_t *) (&GPIOB->ODR);
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <USER_GPIO_Write+0xa0>)
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e01c      	b.n	80023e8 <USER_GPIO_Write+0x64>
  }
  else if( port == 2 )
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d102      	bne.n	80023ba <USER_GPIO_Write+0x36>
  {
      ODR = (volatile uint32_t *) (&GPIOC->ODR);
 80023b4:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <USER_GPIO_Write+0xa4>)
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e016      	b.n	80023e8 <USER_GPIO_Write+0x64>
  }
  else if( port == 3 )
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d102      	bne.n	80023c6 <USER_GPIO_Write+0x42>
  {
      ODR = (volatile uint32_t *) (&GPIOD->ODR);
 80023c0:	4b1a      	ldr	r3, [pc, #104]	; (800242c <USER_GPIO_Write+0xa8>)
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e010      	b.n	80023e8 <USER_GPIO_Write+0x64>
  }
  else if( port == 4 )
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d102      	bne.n	80023d2 <USER_GPIO_Write+0x4e>
  {
      ODR = (volatile uint32_t *) (&GPIOE->ODR);
 80023cc:	4b18      	ldr	r3, [pc, #96]	; (8002430 <USER_GPIO_Write+0xac>)
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	e00a      	b.n	80023e8 <USER_GPIO_Write+0x64>
  }
  else if( port == 5 )
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d102      	bne.n	80023de <USER_GPIO_Write+0x5a>
  {
      ODR = (volatile uint32_t *) (&GPIOF->ODR);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <USER_GPIO_Write+0xb0>)
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e004      	b.n	80023e8 <USER_GPIO_Write+0x64>
  }
  else if( port == 6 )
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b06      	cmp	r3, #6
 80023e2:	d101      	bne.n	80023e8 <USER_GPIO_Write+0x64>
  {
      ODR = (volatile uint32_t *) (&GPIOG->ODR);
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <USER_GPIO_Write+0xb4>)
 80023e6:	60fb      	str	r3, [r7, #12]
  }

  state ? ( *ODR |= ( state << pin ) ) : ( *ODR &= ~( 1 << pin ) );
 80023e8:	797b      	ldrb	r3, [r7, #5]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <USER_GPIO_Write+0x7e>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	7979      	ldrb	r1, [r7, #5]
 80023f4:	79ba      	ldrb	r2, [r7, #6]
 80023f6:	fa01 f202 	lsl.w	r2, r1, r2
 80023fa:	431a      	orrs	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	e009      	b.n	8002416 <USER_GPIO_Write+0x92>
  state ? ( *ODR |= ( state << pin ) ) : ( *ODR &= ~( 1 << pin ) );
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	79ba      	ldrb	r2, [r7, #6]
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f202 	lsl.w	r2, r1, r2
 800240e:	43d2      	mvns	r2, r2
 8002410:	401a      	ands	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	4001080c 	.word	0x4001080c
 8002424:	40010c0c 	.word	0x40010c0c
 8002428:	4001100c 	.word	0x4001100c
 800242c:	4001140c 	.word	0x4001140c
 8002430:	4001180c 	.word	0x4001180c
 8002434:	40011c0c 	.word	0x40011c0c
 8002438:	4001200c 	.word	0x4001200c

0800243c <USER_I2C_Init>:
#include "GPIO.h"

// Initialize I2C

void USER_I2C_Init( uint8_t I2C, uint8_t speed_mode )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	460a      	mov	r2, r1
 8002446:	71fb      	strb	r3, [r7, #7]
 8002448:	4613      	mov	r3, r2
 800244a:	71bb      	strb	r3, [r7, #6]
  RCC->APB2ENR		|=	RCC_APB2ENR_AFIOEN;	// Alternate function I/O clock enable
 800244c:	4b35      	ldr	r3, [pc, #212]	; (8002524 <USER_I2C_Init+0xe8>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a34      	ldr	r2, [pc, #208]	; (8002524 <USER_I2C_Init+0xe8>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6193      	str	r3, [r2, #24]

  if( I2C == 0 )
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d12d      	bne.n	80024ba <USER_I2C_Init+0x7e>
  {
      RCC->APB1ENR 	|=	RCC_APB1ENR_I2C1EN;	// I2C1 clock enable
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <USER_I2C_Init+0xe8>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a30      	ldr	r2, [pc, #192]	; (8002524 <USER_I2C_Init+0xe8>)
 8002464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002468:	61d3      	str	r3, [r2, #28]

      USER_GPIO_Define( PORTB, 6, OUT_50, OUT_AF_OD );	// PB6 I2C1_SCL
 800246a:	2303      	movs	r3, #3
 800246c:	2203      	movs	r2, #3
 800246e:	2106      	movs	r1, #6
 8002470:	2001      	movs	r0, #1
 8002472:	f7ff fed3 	bl	800221c <USER_GPIO_Define>
      USER_GPIO_Define( PORTB, 7, OUT_50, OUT_AF_OD );	// PB7 I2C1_SDA
 8002476:	2303      	movs	r3, #3
 8002478:	2203      	movs	r2, #3
 800247a:	2107      	movs	r1, #7
 800247c:	2001      	movs	r0, #1
 800247e:	f7ff fecd 	bl	800221c <USER_GPIO_Define>

      I2C1->CR1		|=	I2C_CR1_SWRST;		// Software reset
 8002482:	4b29      	ldr	r3, [pc, #164]	; (8002528 <USER_I2C_Init+0xec>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a28      	ldr	r2, [pc, #160]	; (8002528 <USER_I2C_Init+0xec>)
 8002488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248c:	6013      	str	r3, [r2, #0]
      I2C1->CR1		&=	~I2C_CR1_SWRST;
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <USER_I2C_Init+0xec>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a25      	ldr	r2, [pc, #148]	; (8002528 <USER_I2C_Init+0xec>)
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	041b      	lsls	r3, r3, #16
 8002498:	6013      	str	r3, [r2, #0]

      I2C1->CR2		=	I2C_CR2_FREQ;		// Peripheral clock frequency of 8 MHz
 800249a:	4b23      	ldr	r3, [pc, #140]	; (8002528 <USER_I2C_Init+0xec>)
 800249c:	2208      	movs	r2, #8
 800249e:	605a      	str	r2, [r3, #4]

      I2C1->CCR		=	speed_mode;		// Clock control register in Fm/Sm mode
 80024a0:	4a21      	ldr	r2, [pc, #132]	; (8002528 <USER_I2C_Init+0xec>)
 80024a2:	79bb      	ldrb	r3, [r7, #6]
 80024a4:	61d3      	str	r3, [r2, #28]
      I2C1->TRISE	=	I2C_TRISE_TRISE;	// Maximum rise time in Fm/Sm mode (Master mode)
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <USER_I2C_Init+0xec>)
 80024a8:	2209      	movs	r2, #9
 80024aa:	621a      	str	r2, [r3, #32]

      I2C1->CR1		|=	I2C_CR1_PE;		// Peripheral enable
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <USER_I2C_Init+0xec>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <USER_I2C_Init+0xec>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6013      	str	r3, [r2, #0]
      I2C2->TRISE	=	I2C_TRISE_TRISE;

      I2C2->CR1		|=	I2C_CR1_PE;
  }

}
 80024b8:	e02f      	b.n	800251a <USER_I2C_Init+0xde>
  else if( I2C == 1 )
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d12c      	bne.n	800251a <USER_I2C_Init+0xde>
      RCC->APB1ENR 	|=	RCC_APB1ENR_I2C2EN;	// I2C2 clock enable
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <USER_I2C_Init+0xe8>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	4a17      	ldr	r2, [pc, #92]	; (8002524 <USER_I2C_Init+0xe8>)
 80024c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024ca:	61d3      	str	r3, [r2, #28]
      USER_GPIO_Define( PORTB, 10, OUT_50, OUT_AF_OD );	// PB10 I2C2_SCL
 80024cc:	2303      	movs	r3, #3
 80024ce:	2203      	movs	r2, #3
 80024d0:	210a      	movs	r1, #10
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7ff fea2 	bl	800221c <USER_GPIO_Define>
      USER_GPIO_Define( PORTB, 11, OUT_50, OUT_AF_OD );	// PB11 I2C2_SDA
 80024d8:	2303      	movs	r3, #3
 80024da:	2203      	movs	r2, #3
 80024dc:	210b      	movs	r1, #11
 80024de:	2001      	movs	r0, #1
 80024e0:	f7ff fe9c 	bl	800221c <USER_GPIO_Define>
      I2C2->CR1		|=	I2C_CR1_SWRST;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <USER_I2C_Init+0xf0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a10      	ldr	r2, [pc, #64]	; (800252c <USER_I2C_Init+0xf0>)
 80024ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ee:	6013      	str	r3, [r2, #0]
      I2C2->CR1		&=	~I2C_CR1_SWRST;
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <USER_I2C_Init+0xf0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <USER_I2C_Init+0xf0>)
 80024f6:	0c1b      	lsrs	r3, r3, #16
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	6013      	str	r3, [r2, #0]
      I2C2->CR2		=	I2C_CR2_FREQ;
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <USER_I2C_Init+0xf0>)
 80024fe:	2208      	movs	r2, #8
 8002500:	605a      	str	r2, [r3, #4]
      I2C2->CCR		=	speed_mode;
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <USER_I2C_Init+0xf0>)
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	61d3      	str	r3, [r2, #28]
      I2C2->TRISE	=	I2C_TRISE_TRISE;
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <USER_I2C_Init+0xf0>)
 800250a:	2209      	movs	r2, #9
 800250c:	621a      	str	r2, [r3, #32]
      I2C2->CR1		|=	I2C_CR1_PE;
 800250e:	4b07      	ldr	r3, [pc, #28]	; (800252c <USER_I2C_Init+0xf0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a06      	ldr	r2, [pc, #24]	; (800252c <USER_I2C_Init+0xf0>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6013      	str	r3, [r2, #0]
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	40005400 	.word	0x40005400
 800252c:	40005800 	.word	0x40005800

08002530 <USER_I2C_Start>:

// Start I2C

void USER_I2C_Start( uint8_t I2C )
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]

  if( I2C == 0 )
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10d      	bne.n	800255c <USER_I2C_Start+0x2c>
  {
      I2C1->CR1		|=	I2C_CR1_START;		// Start generation
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <USER_I2C_Start+0x58>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a10      	ldr	r2, [pc, #64]	; (8002588 <USER_I2C_Start+0x58>)
 8002546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254a:	6013      	str	r3, [r2, #0]
      while (! ( I2C1->SR1 & I2C_SR1_SB) );		// Set when a Start condition generated
 800254c:	bf00      	nop
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <USER_I2C_Start+0x58>)
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f9      	beq.n	800254e <USER_I2C_Start+0x1e>
  {
      I2C2->CR1		|=	I2C_CR1_START;
      while (! ( I2C2->SR1 & I2C_SR1_SB ) );
  }

}
 800255a:	e00f      	b.n	800257c <USER_I2C_Start+0x4c>
  else if ( I2C == 1 )
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d10c      	bne.n	800257c <USER_I2C_Start+0x4c>
      I2C2->CR1		|=	I2C_CR1_START;
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <USER_I2C_Start+0x5c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <USER_I2C_Start+0x5c>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6013      	str	r3, [r2, #0]
      while (! ( I2C2->SR1 & I2C_SR1_SB ) );
 800256e:	bf00      	nop
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <USER_I2C_Start+0x5c>)
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f9      	beq.n	8002570 <USER_I2C_Start+0x40>
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40005400 	.word	0x40005400
 800258c:	40005800 	.word	0x40005800

08002590 <USER_I2C_Address>:

// Send the address + R or W via I2C

void USER_I2C_Address( uint8_t I2C, uint8_t address, uint8_t RW )
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
 800259a:	460b      	mov	r3, r1
 800259c:	71bb      	strb	r3, [r7, #6]
 800259e:	4613      	mov	r3, r2
 80025a0:	717b      	strb	r3, [r7, #5]
  volatile uint16_t tmp;

  if( I2C == 0 )
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d122      	bne.n	80025ee <USER_I2C_Address+0x5e>
  {
      I2C1->DR = ( address | RW );
 80025a8:	79ba      	ldrb	r2, [r7, #6]
 80025aa:	797b      	ldrb	r3, [r7, #5]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <USER_I2C_Address+0xbc>)
 80025b2:	611a      	str	r2, [r3, #16]

      while( !( I2C1->SR1 & I2C_SR1_ADDR ) );		// ADDR flag is zero while address is mismatched or not received
 80025b4:	bf00      	nop
 80025b6:	4b25      	ldr	r3, [pc, #148]	; (800264c <USER_I2C_Address+0xbc>)
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f9      	beq.n	80025b6 <USER_I2C_Address+0x26>
      while ( I2C1->SR1 & I2C_SR1_ADDR )		// ADDR flag is set when received address matched
 80025c2:	e00d      	b.n	80025e0 <USER_I2C_Address+0x50>
      {
	  tmp = I2C1->SR1;				// Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag
 80025c4:	4b21      	ldr	r3, [pc, #132]	; (800264c <USER_I2C_Address+0xbc>)
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	81fb      	strh	r3, [r7, #14]
	  tmp = I2C1->SR2;
 80025cc:	4b1f      	ldr	r3, [pc, #124]	; (800264c <USER_I2C_Address+0xbc>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	81fb      	strh	r3, [r7, #14]

	  if( !( I2C1->SR1 & I2C_SR1_ADDR ) )
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <USER_I2C_Address+0xbc>)
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d02c      	beq.n	800263a <USER_I2C_Address+0xaa>
      while ( I2C1->SR1 & I2C_SR1_ADDR )		// ADDR flag is set when received address matched
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <USER_I2C_Address+0xbc>)
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1eb      	bne.n	80025c4 <USER_I2C_Address+0x34>
	      break;
	  }
      }
  }

}
 80025ec:	e028      	b.n	8002640 <USER_I2C_Address+0xb0>
  else if ( I2C == 1 )
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d125      	bne.n	8002640 <USER_I2C_Address+0xb0>
      I2C2->DR = ( address | RW );
 80025f4:	79ba      	ldrb	r2, [r7, #6]
 80025f6:	797b      	ldrb	r3, [r7, #5]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	4b14      	ldr	r3, [pc, #80]	; (8002650 <USER_I2C_Address+0xc0>)
 80025fe:	611a      	str	r2, [r3, #16]
      while( !( I2C2->SR1 & I2C_SR1_ADDR ) );
 8002600:	bf00      	nop
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <USER_I2C_Address+0xc0>)
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f9      	beq.n	8002602 <USER_I2C_Address+0x72>
      while ( I2C2->SR1 & I2C_SR1_ADDR )
 800260e:	e00d      	b.n	800262c <USER_I2C_Address+0x9c>
	  tmp = I2C2->SR1;
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <USER_I2C_Address+0xc0>)
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	b29b      	uxth	r3, r3
 8002616:	81fb      	strh	r3, [r7, #14]
	  tmp = I2C2->SR2;
 8002618:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <USER_I2C_Address+0xc0>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	b29b      	uxth	r3, r3
 800261e:	81fb      	strh	r3, [r7, #14]
	  if( !( I2C2->SR1 & I2C_SR1_ADDR ) )
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <USER_I2C_Address+0xc0>)
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <USER_I2C_Address+0xae>
      while ( I2C2->SR1 & I2C_SR1_ADDR )
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <USER_I2C_Address+0xc0>)
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1eb      	bne.n	8002610 <USER_I2C_Address+0x80>
}
 8002638:	e002      	b.n	8002640 <USER_I2C_Address+0xb0>
	      break;
 800263a:	bf00      	nop
 800263c:	e000      	b.n	8002640 <USER_I2C_Address+0xb0>
	      break;
 800263e:	bf00      	nop
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40005400 	.word	0x40005400
 8002650:	40005800 	.word	0x40005800

08002654 <USER_I2C_Data>:

// Send data via I2C

void USER_I2C_Data( uint8_t I2C, uint8_t data )
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	460a      	mov	r2, r1
 800265e:	71fb      	strb	r3, [r7, #7]
 8002660:	4613      	mov	r3, r2
 8002662:	71bb      	strb	r3, [r7, #6]

  if( I2C == 0 )
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d111      	bne.n	800268e <USER_I2C_Data+0x3a>
  {
      while( !( I2C1->SR1 & I2C_SR1_TXE ) );		// While data register not empty
 800266a:	bf00      	nop
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <USER_I2C_Data+0x6c>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f9      	beq.n	800266c <USER_I2C_Data+0x18>
      I2C1->DR = data;
 8002678:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <USER_I2C_Data+0x6c>)
 800267a:	79bb      	ldrb	r3, [r7, #6]
 800267c:	6113      	str	r3, [r2, #16]
      while( !( I2C1->SR1 & I2C_SR1_TXE ) );
 800267e:	bf00      	nop
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <USER_I2C_Data+0x6c>)
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f9      	beq.n	8002680 <USER_I2C_Data+0x2c>
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );		// While data register not empty
      I2C2->DR = data;
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );
  }

}
 800268c:	e013      	b.n	80026b6 <USER_I2C_Data+0x62>
  else if ( I2C == 1 )
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d110      	bne.n	80026b6 <USER_I2C_Data+0x62>
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );		// While data register not empty
 8002694:	bf00      	nop
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <USER_I2C_Data+0x70>)
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f9      	beq.n	8002696 <USER_I2C_Data+0x42>
      I2C2->DR = data;
 80026a2:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <USER_I2C_Data+0x70>)
 80026a4:	79bb      	ldrb	r3, [r7, #6]
 80026a6:	6113      	str	r3, [r2, #16]
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );
 80026a8:	bf00      	nop
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <USER_I2C_Data+0x70>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f9      	beq.n	80026aa <USER_I2C_Data+0x56>
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	40005400 	.word	0x40005400
 80026c4:	40005800 	.word	0x40005800

080026c8 <USER_I2C_Stop>:

// Stop I2C

void USER_I2C_Stop( uint8_t I2C )
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t tmp;

  if( I2C == 0 )
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10e      	bne.n	80026f6 <USER_I2C_Stop+0x2e>
  {
      tmp = I2C1->SR1;
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <USER_I2C_Stop+0x5c>)
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	81fb      	strh	r3, [r7, #14]
      tmp = I2C1->SR2;
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <USER_I2C_Stop+0x5c>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	81fb      	strh	r3, [r7, #14]
      I2C1->CR1		|=	I2C_CR1_STOP;		// Stop generation
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <USER_I2C_Stop+0x5c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <USER_I2C_Stop+0x5c>)
 80026ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f2:	6013      	str	r3, [r2, #0]
      tmp = I2C2->SR1;
      tmp = I2C2->SR2;
      I2C2->CR1		|=	I2C_CR1_STOP;		// Stop generation
  }

}
 80026f4:	e010      	b.n	8002718 <USER_I2C_Stop+0x50>
  else if ( I2C == 1 )
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d10d      	bne.n	8002718 <USER_I2C_Stop+0x50>
      tmp = I2C2->SR1;
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <USER_I2C_Stop+0x60>)
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	b29b      	uxth	r3, r3
 8002702:	81fb      	strh	r3, [r7, #14]
      tmp = I2C2->SR2;
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <USER_I2C_Stop+0x60>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	b29b      	uxth	r3, r3
 800270a:	81fb      	strh	r3, [r7, #14]
      I2C2->CR1		|=	I2C_CR1_STOP;		// Stop generation
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <USER_I2C_Stop+0x60>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a05      	ldr	r2, [pc, #20]	; (8002728 <USER_I2C_Stop+0x60>)
 8002712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002716:	6013      	str	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40005400 	.word	0x40005400
 8002728:	40005800 	.word	0x40005800

0800272c <USER_OLED_Command_1_Byte>:
#include "SYSTICK.h"

// Send a 1 byte command to the OLED

void USER_OLED_Command_1_Byte( uint8_t I2C, uint8_t data )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	460a      	mov	r2, r1
 8002736:	71fb      	strb	r3, [r7, #7]
 8002738:	4613      	mov	r3, r2
 800273a:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Start( I2C );
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fef6 	bl	8002530 <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	2200      	movs	r2, #0
 8002748:	2178      	movs	r1, #120	; 0x78
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ff20 	bl	8002590 <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x00 );				// Control function for a command
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff7d 	bl	8002654 <USER_I2C_Data>
  USER_I2C_Data( I2C, data );
 800275a:	79ba      	ldrb	r2, [r7, #6]
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff77 	bl	8002654 <USER_I2C_Data>

  USER_I2C_Stop( I2C );
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ffad 	bl	80026c8 <USER_I2C_Stop>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <USER_OLED_Command_2_Byte>:

// Send a 2 byte command to the OLED

void USER_OLED_Command_2_Byte( uint8_t I2C, uint8_t data[] )
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	6039      	str	r1, [r7, #0]
 8002780:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]

  USER_I2C_Start( I2C );
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fed1 	bl	8002530 <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	2200      	movs	r2, #0
 8002792:	2178      	movs	r1, #120	; 0x78
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fefb 	bl	8002590 <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x00 );	// Control function for a command
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff58 	bl	8002654 <USER_I2C_Data>

  for(i = 0; i < 2; i++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	e00b      	b.n	80027c2 <USER_OLED_Command_2_Byte+0x4c>
  {
      USER_I2C_Data( I2C, data[i] );
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff4c 	bl	8002654 <USER_I2C_Data>
  for(i = 0; i < 2; i++)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	3301      	adds	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d9f0      	bls.n	80027aa <USER_OLED_Command_2_Byte+0x34>
  }

  USER_I2C_Stop( I2C );
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff7c 	bl	80026c8 <USER_I2C_Stop>
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <USER_OLED_Init>:

// Initialize OLED

void USER_OLED_Init( uint8_t I2C, uint8_t screen_size )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	460a      	mov	r2, r1
 80027e2:	71fb      	strb	r3, [r7, #7]
 80027e4:	4613      	mov	r3, r2
 80027e6:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Init( I2C, I2C_FM );
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	212d      	movs	r1, #45	; 0x2d
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fe25 	bl	800243c <USER_I2C_Init>

  uint8_t cmd_1[] = {0xA8, 0x3F};
 80027f2:	f643 73a8 	movw	r3, #16296	; 0x3fa8
 80027f6:	84bb      	strh	r3, [r7, #36]	; 0x24
  USER_OLED_Command_2_Byte( I2C, cmd_1 );
 80027f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ffb8 	bl	8002776 <USER_OLED_Command_2_Byte>

  uint8_t cmd_2[] = {0xD3, 0x00};
 8002806:	23d3      	movs	r3, #211	; 0xd3
 8002808:	843b      	strh	r3, [r7, #32]
  USER_OLED_Command_2_Byte( I2C, cmd_2 );
 800280a:	f107 0220 	add.w	r2, r7, #32
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ffaf 	bl	8002776 <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0x40 );
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	2140      	movs	r1, #64	; 0x40
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff85 	bl	800272c <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xA1 );
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	21a1      	movs	r1, #161	; 0xa1
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff ff80 	bl	800272c <USER_OLED_Command_1_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xC8 );
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	21c8      	movs	r1, #200	; 0xc8
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff7b 	bl	800272c <USER_OLED_Command_1_Byte>

  uint8_t cmd_3[] = {0xDA, screen_size};
 8002836:	23da      	movs	r3, #218	; 0xda
 8002838:	773b      	strb	r3, [r7, #28]
 800283a:	79bb      	ldrb	r3, [r7, #6]
 800283c:	777b      	strb	r3, [r7, #29]
  USER_OLED_Command_2_Byte( I2C, cmd_3 );
 800283e:	f107 021c 	add.w	r2, r7, #28
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff95 	bl	8002776 <USER_OLED_Command_2_Byte>

  uint8_t cmd_4[] = {0x81, 0x7F};
 800284c:	f647 7381 	movw	r3, #32641	; 0x7f81
 8002850:	833b      	strh	r3, [r7, #24]
  USER_OLED_Command_2_Byte( I2C, cmd_4 );
 8002852:	f107 0218 	add.w	r2, r7, #24
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff8b 	bl	8002776 <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xA4 );
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	21a4      	movs	r1, #164	; 0xa4
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff61 	bl	800272c <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xA6 );
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	21a6      	movs	r1, #166	; 0xa6
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff5c 	bl	800272c <USER_OLED_Command_1_Byte>

  uint8_t cmd_5[] = {0xD5, 0x80};
 8002874:	f248 03d5 	movw	r3, #32981	; 0x80d5
 8002878:	82bb      	strh	r3, [r7, #20]
  USER_OLED_Command_2_Byte( I2C, cmd_5 );
 800287a:	f107 0214 	add.w	r2, r7, #20
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff77 	bl	8002776 <USER_OLED_Command_2_Byte>

  uint8_t cmd_6[] = {0x8D, 0x14};
 8002888:	f241 438d 	movw	r3, #5261	; 0x148d
 800288c:	823b      	strh	r3, [r7, #16]
  USER_OLED_Command_2_Byte( I2C, cmd_6 );
 800288e:	f107 0210 	add.w	r2, r7, #16
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff6d 	bl	8002776 <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xAF );
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	21af      	movs	r1, #175	; 0xaf
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff43 	bl	800272c <USER_OLED_Command_1_Byte>

  uint8_t cmd_7[] = {0x20, 0x10};
 80028a6:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80028aa:	81bb      	strh	r3, [r7, #12]
  USER_OLED_Command_2_Byte( I2C, cmd_7 );
 80028ac:	f107 020c 	add.w	r2, r7, #12
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff5e 	bl	8002776 <USER_OLED_Command_2_Byte>
}
 80028ba:	bf00      	nop
 80028bc:	3728      	adds	r7, #40	; 0x28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <USER_OLED_Init_64>:
}

// Initialize 128x64 OLED

void USER_OLED_Init_64( uint8_t I2C )
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	71fb      	strb	r3, [r7, #7]
  USER_OLED_Init(I2C, 0x12);
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	2112      	movs	r1, #18
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff81 	bl	80027d8 <USER_OLED_Init>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <USER_SYSTICK_Init>:
#include "main.h"

// Initialize SysTick

void USER_SYSTICK_Init( void )
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
    SYSTICK->CTRL	= 0;				// Clear register
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <USER_SYSTICK_Init+0x38>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
    SYSTICK->LOAD	= 0x00FFFFFF;			// Max start value
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <USER_SYSTICK_Init+0x38>)
 80028ec:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80028f0:	605a      	str	r2, [r3, #4]
    SYSTICK->VAL	= 0;				// Clear register
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <USER_SYSTICK_Init+0x38>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]

    SYSTICK->CTRL	|=	SYSTICK_CTRL_CLKSOURCE;	// Clock source is processor clock (AHB)
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <USER_SYSTICK_Init+0x38>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a06      	ldr	r2, [pc, #24]	; (8002918 <USER_SYSTICK_Init+0x38>)
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	6013      	str	r3, [r2, #0]
    SYSTICK->CTRL	|=	SYSTICK_CTRL_ENABLE;	// Counter enabled
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <USER_SYSTICK_Init+0x38>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a03      	ldr	r2, [pc, #12]	; (8002918 <USER_SYSTICK_Init+0x38>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	e000e010 	.word	0xe000e010

0800291c <USER_LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

// Function that initializes the LCD to 4 bits

void USER_LCD_Init(void){
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0

	// RCC_APB2ENR modified to IO port C clock enable

	RCC->APB2ENR	|=	RCC_APB2ENR_IOPCEN;	// To set IOPCEN bit
 8002922:	4b66      	ldr	r3, [pc, #408]	; (8002abc <USER_LCD_Init+0x1a0>)
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	4a65      	ldr	r2, [pc, #404]	; (8002abc <USER_LCD_Init+0x1a0>)
 8002928:	f043 0310 	orr.w	r3, r3, #16
 800292c:	6193      	str	r3, [r2, #24]

	int8_t const *p;

	// Configuration of all pins to the LCD as general-purpose output push-pull, 10 MHz speed

	GPIOC->CRL	&=	~( 0x3UL << 30U ) & ~( 0x2UL << 28U )
 800292e:	4b64      	ldr	r3, [pc, #400]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a63      	ldr	r2, [pc, #396]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002934:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002938:	6013      	str	r3, [r2, #0]
			& 	~( 0x3UL << 26U ) & ~( 0x2UL << 24U );
	GPIOC->CRL 	|= 	 ( 0x1UL << 28U )
 800293a:	4b61      	ldr	r3, [pc, #388]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a60      	ldr	r2, [pc, #384]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002940:	f043 5388 	orr.w	r3, r3, #285212672	; 0x11000000
 8002944:	6013      	str	r3, [r2, #0]
			|  	 ( 0x1UL << 24U );
	GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U )
 8002946:	4b5e      	ldr	r3, [pc, #376]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	495d      	ldr	r1, [pc, #372]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 800294c:	4b5d      	ldr	r3, [pc, #372]	; (8002ac4 <USER_LCD_Init+0x1a8>)
 800294e:	4013      	ands	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
			& 	~( 0x3UL << 14U ) & ~( 0x2UL << 12U )
			&	~( 0x3UL << 10U ) & ~( 0x2UL <<  8U )
			& 	~( 0x3UL <<  6U ) & ~( 0x2UL <<  4U )
			& 	~( 0x3UL <<  2U ) & ~( 0x2UL <<  0U );
	GPIOC->CRH	|= 	 ( 0x1UL << 16U )
 8002952:	4b5b      	ldr	r3, [pc, #364]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	495a      	ldr	r1, [pc, #360]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002958:	4b5b      	ldr	r3, [pc, #364]	; (8002ac8 <USER_LCD_Init+0x1ac>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
			|  	 ( 0x1UL << 12U )
			| 	 ( 0x1UL <<  8U )
			|  	 ( 0x1UL <<  4U )
			|  	 ( 0x1UL <<  0U );

	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 800295e:	4b58      	ldr	r3, [pc, #352]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002960:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002964:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_LOW;
 8002966:	4b56      	ldr	r3, [pc, #344]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002968:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800296c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_LOW;
 800296e:	4b54      	ldr	r3, [pc, #336]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002974:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 8002976:	4b52      	ldr	r3, [pc, #328]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002978:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800297c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_LOW;
 800297e:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002980:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002984:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002986:	4b4e      	ldr	r3, [pc, #312]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002988:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800298c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 800298e:	4b4c      	ldr	r3, [pc, #304]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002994:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_50MS, TIM_CNT_50MS );		//	50 ms
 8002996:	22e6      	movs	r2, #230	; 0xe6
 8002998:	2130      	movs	r1, #48	; 0x30
 800299a:	2000      	movs	r0, #0
 800299c:	f000 ffe6 	bl	800396c <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 80029a0:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 80029a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a6:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 80029a8:	4b45      	ldr	r3, [pc, #276]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 80029aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ae:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80029b0:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 80029b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029b6:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80029b8:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 80029ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029be:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 80029c0:	f000 f9a6 	bl	8002d10 <LCD_Pulse_EN>

	USER_TIM_Delay( TIM_2, TIM_PSC_5MS, TIM_CNT_5MS );		//	5 ms
 80029c4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80029c8:	2104      	movs	r1, #4
 80029ca:	2000      	movs	r0, #0
 80029cc:	f000 ffce 	bl	800396c <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 80029d0:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 80029d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d6:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 80029d8:	4b39      	ldr	r3, [pc, #228]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 80029da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029de:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80029e0:	4b37      	ldr	r3, [pc, #220]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 80029e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029e6:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80029e8:	4b35      	ldr	r3, [pc, #212]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 80029ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ee:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 80029f0:	f000 f98e 	bl	8002d10 <LCD_Pulse_EN>

	USER_TIM_Delay( TIM_2, TIM_PSC_100US, TIM_CNT_100US );		//	100 us
 80029f4:	f44f 4267 	mov.w	r2, #59136	; 0xe700
 80029f8:	2100      	movs	r1, #0
 80029fa:	2000      	movs	r0, #0
 80029fc:	f000 ffb6 	bl	800396c <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 8002a00:	4b2f      	ldr	r3, [pc, #188]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a06:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8002a08:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a0e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002a10:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002a12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a16:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8002a18:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a1e:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002a20:	f000 f976 	bl	8002d10 <LCD_Pulse_EN>
	while( LCD_Busy( ) );					//	Checking the busy flag
 8002a24:	bf00      	nop
 8002a26:	f000 f91f 	bl	8002c68 <LCD_Busy>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1fa      	bne.n	8002a26 <USER_LCD_Init+0x10a>

	/* Initial 'Function Set' to change 4-bit mode	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 8002a30:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a36:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8002a38:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002a40:	4b1f      	ldr	r3, [pc, #124]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a46:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <USER_LCD_Init+0x1a4>)
 8002a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4e:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002a50:	f000 f95e 	bl	8002d10 <LCD_Pulse_EN>
	while( LCD_Busy( ) );					//	Checking the busy flag
 8002a54:	bf00      	nop
 8002a56:	f000 f907 	bl	8002c68 <LCD_Busy>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1fa      	bne.n	8002a56 <USER_LCD_Init+0x13a>

	/* 'Function Set' (I=1, N and F as required)	*/

	LCD_Write_Cmd( 0x28U );					//	2-line display, 5x7 dot
 8002a60:	2028      	movs	r0, #40	; 0x28
 8002a62:	f000 f89b 	bl	8002b9c <LCD_Write_Cmd>

	/* 'Display ON/OFF Control' (D=0, C=0, B=0)	*/

	LCD_Write_Cmd( 0x08U );					//	Display, cursor and blinking off
 8002a66:	2008      	movs	r0, #8
 8002a68:	f000 f898 	bl	8002b9c <LCD_Write_Cmd>

	/* 'Clear Display' */

	LCD_Write_Cmd( 0x01U );//
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f000 f895 	bl	8002b9c <LCD_Write_Cmd>

	/* 'Entry Mode Set' (I/D and S as required)	*/

	LCD_Write_Cmd( 0x06U );					//	Cursor increment by 1, shift off
 8002a72:	2006      	movs	r0, #6
 8002a74:	f000 f892 	bl	8002b9c <LCD_Write_Cmd>

	/* Initialization Ends	*/

	LCD_Write_Cmd( 0x0FU );					//	Display, cursor and blinking on
 8002a78:	200f      	movs	r0, #15
 8002a7a:	f000 f88f 	bl	8002b9c <LCD_Write_Cmd>

	//	Load the character defined by the user into the CGRAM

	LCD_Write_Cmd( 0x40 );					//	Set the CGRAM address to 0
 8002a7e:	2040      	movs	r0, #64	; 0x40
 8002a80:	f000 f88c 	bl	8002b9c <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <USER_LCD_Init+0x1b0>)
 8002a86:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8002a88:	2300      	movs	r3, #0
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	e00c      	b.n	8002aa8 <USER_LCD_Init+0x18c>
		LCD_Put_Char( *p );
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f993 3000 	ldrsb.w	r3, [r3]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f894 	bl	8002bc4 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b3f      	cmp	r3, #63	; 0x3f
 8002aac:	d9ef      	bls.n	8002a8e <USER_LCD_Init+0x172>

	/*	Set DDRAM address in address	*/

	LCD_Write_Cmd( 0x80 );//
 8002aae:	2080      	movs	r0, #128	; 0x80
 8002ab0:	f000 f874 	bl	8002b9c <LCD_Write_Cmd>
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40011000 	.word	0x40011000
 8002ac4:	fff11111 	.word	0xfff11111
 8002ac8:	00011111 	.word	0x00011111
 8002acc:	08009c80 	.word	0x08009c80

08002ad0 <LCD_Out_Data4>:

// Function that generates a strobe on the LCD

void LCD_Out_Data4(uint8_t val)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )				//	Bit[0]
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d004      	beq.n	8002aee <LCD_Out_Data4+0x1e>
		GPIOC->BSRR	=	LCD_D4_PIN_HIGH;
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <LCD_Out_Data4+0x84>)
 8002ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aea:	611a      	str	r2, [r3, #16]
 8002aec:	e003      	b.n	8002af6 <LCD_Out_Data4+0x26>
	else
		GPIOC->BSRR	=	LCD_D4_PIN_LOW;
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <LCD_Out_Data4+0x84>)
 8002af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af4:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )				//	Bit[1]
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d004      	beq.n	8002b0a <LCD_Out_Data4+0x3a>
		GPIOC->BSRR	=	LCD_D5_PIN_HIGH;
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <LCD_Out_Data4+0x84>)
 8002b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b06:	611a      	str	r2, [r3, #16]
 8002b08:	e003      	b.n	8002b12 <LCD_Out_Data4+0x42>
	else
		GPIOC->BSRR	=	LCD_D5_PIN_LOW;
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <LCD_Out_Data4+0x84>)
 8002b0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b10:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )				//	Bit[2]
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <LCD_Out_Data4+0x56>
		GPIOC->BSRR	=	LCD_D6_PIN_HIGH;
 8002b1c:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <LCD_Out_Data4+0x84>)
 8002b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b22:	611a      	str	r2, [r3, #16]
 8002b24:	e003      	b.n	8002b2e <LCD_Out_Data4+0x5e>
	else
		GPIOC->BSRR	=	LCD_D6_PIN_LOW;
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <LCD_Out_Data4+0x84>)
 8002b28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b2c:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )				//	Bit[3]
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d004      	beq.n	8002b42 <LCD_Out_Data4+0x72>
		GPIOC->BSRR	=	LCD_D7_PIN_HIGH;
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <LCD_Out_Data4+0x84>)
 8002b3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b3e:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
}
 8002b40:	e003      	b.n	8002b4a <LCD_Out_Data4+0x7a>
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
 8002b42:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <LCD_Out_Data4+0x84>)
 8002b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b48:	611a      	str	r2, [r3, #16]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	40011000 	.word	0x40011000

08002b58 <LCD_Write_Byte>:

// Function that writes 1 byte of data to the LCD

void LCD_Write_Byte(uint8_t val)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ffb1 	bl	8002ad0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8002b6e:	f000 f8cf 	bl	8002d10 <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ffa8 	bl	8002ad0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8002b80:	f000 f8c6 	bl	8002d10 <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 8002b84:	bf00      	nop
 8002b86:	f000 f86f 	bl	8002c68 <LCD_Busy>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1fa      	bne.n	8002b86 <LCD_Write_Byte+0x2e>
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <LCD_Write_Cmd>:

// Function that writes a command to the LCD

void LCD_Write_Cmd( uint8_t val )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_LOW;			//	RS=0 (character selection)
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <LCD_Write_Cmd+0x24>)
 8002ba8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002bac:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ffd1 	bl	8002b58 <LCD_Write_Byte>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40011000 	.word	0x40011000

08002bc4 <LCD_Put_Char>:

// Write an ASCII character to the LCD

void LCD_Put_Char( uint8_t c )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_HIGH;		//	RS=1 (character selection)
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <LCD_Put_Char+0x20>)
 8002bd0:	2240      	movs	r2, #64	; 0x40
 8002bd2:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ffbe 	bl	8002b58 <LCD_Write_Byte>
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40011000 	.word	0x40011000

08002be8 <LCD_Set_Cursor>:

// Function that sets the cursor to a position on the LCD screen
// Minimum values for line and column must be 1

void LCD_Set_Cursor( uint8_t line, uint8_t column )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	460a      	mov	r2, r1
 8002bf2:	71fb      	strb	r3, [r7, #7]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	column--;
 8002bf8:	79bb      	ldrb	r3, [r7, #6]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	71bb      	strb	r3, [r7, #6]
	line--;
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	71fb      	strb	r3, [r7, #7]
	address = ( line * 0x40U ) + column;
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	019b      	lsls	r3, r3, #6
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	79bb      	ldrb	r3, [r7, #6]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3b80      	subs	r3, #128	; 0x80
 8002c1a:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff ffbc 	bl	8002b9c <LCD_Write_Cmd>
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <LCD_Put_Str>:

// Function that sends a string of ASCII characters to the LCD

void LCD_Put_Str( char * str )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	for( int16_t i = 0; i < 16; i++ )
 8002c34:	2300      	movs	r3, #0
 8002c36:	81fb      	strh	r3, [r7, #14]
 8002c38:	e00d      	b.n	8002c56 <LCD_Put_Str+0x2a>
		LCD_Put_Char( str[ i ] );			//	Send 1 byte to the LCD
 8002c3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ffbd 	bl	8002bc4 <LCD_Put_Char>
	for( int16_t i = 0; i < 16; i++ )
 8002c4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	81fb      	strh	r3, [r7, #14]
 8002c56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c5a:	2b0f      	cmp	r3, #15
 8002c5c:	dded      	ble.n	8002c3a <LCD_Put_Str+0xe>
}
 8002c5e:	bf00      	nop
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <LCD_Busy>:
}

// Function that causes delays on the LCD

char LCD_Busy( void )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	// Configuration of D7 as input floating

	GPIOC->CRH	&=	~( 0x2UL << 18U ) & ~( 0x3UL << 16U );
 8002c6c:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <LCD_Busy+0xa4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a26      	ldr	r2, [pc, #152]	; (8002d0c <LCD_Busy+0xa4>)
 8002c72:	f423 2330 	bic.w	r3, r3, #720896	; 0xb0000
 8002c76:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=   	 ( 0x1UL << 18U );
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <LCD_Busy+0xa4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <LCD_Busy+0xa4>)
 8002c7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c82:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 8002c84:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <LCD_Busy+0xa4>)
 8002c86:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c8a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_HIGH;
 8002c8c:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <LCD_Busy+0xa4>)
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_HIGH;
 8002c92:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <LCD_Busy+0xa4>)
 8002c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c98:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_100US, TIM_CNT_100US );	//	100 us
 8002c9a:	f44f 4267 	mov.w	r2, #59136	; 0xe700
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f000 fe63 	bl	800396c <USER_TIM_Delay>

	if(( GPIOC->IDR	& LCD_D7_PIN_HIGH )) 			//	If D7 is set, then
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <LCD_Busy+0xa4>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d015      	beq.n	8002cde <LCD_Busy+0x76>
	{
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <LCD_Busy+0xa4>)
 8002cb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cb8:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <LCD_Busy+0xa4>)
 8002cbc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002cc0:	611a      	str	r2, [r3, #16]

	// Configuration of D7 as output push-pull, 10 MHz speed

		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <LCD_Busy+0xa4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4a11      	ldr	r2, [pc, #68]	; (8002d0c <LCD_Busy+0xa4>)
 8002cc8:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8002ccc:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 8002cce:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <LCD_Busy+0xa4>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <LCD_Busy+0xa4>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6053      	str	r3, [r2, #4]

		return 1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e014      	b.n	8002d08 <LCD_Busy+0xa0>
	}
	else
	{
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <LCD_Busy+0xa4>)
 8002ce0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ce4:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <LCD_Busy+0xa4>)
 8002ce8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002cec:	611a      	str	r2, [r3, #16]

	// Configuration of D7 as output push-pull, 10 MHz speed

		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <LCD_Busy+0xa4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a06      	ldr	r2, [pc, #24]	; (8002d0c <LCD_Busy+0xa4>)
 8002cf4:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8002cf8:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <LCD_Busy+0xa4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4a03      	ldr	r2, [pc, #12]	; (8002d0c <LCD_Busy+0xa4>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d04:	6053      	str	r3, [r2, #4]

		return 0;
 8002d06:	2300      	movs	r3, #0
	}
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40011000 	.word	0x40011000

08002d10 <LCD_Pulse_EN>:

// Function that generates a pulse on the EN pin of the LCD

void LCD_Pulse_EN( void )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	LCD_EN_PIN_LOW;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <LCD_Pulse_EN+0x44>)
 8002d16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d1a:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_10US, TIM_CNT_10US );	//	10 us
 8002d1c:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8002d20:	2100      	movs	r1, #0
 8002d22:	2000      	movs	r0, #0
 8002d24:	f000 fe22 	bl	800396c <USER_TIM_Delay>

	GPIOC->BSRR	=	LCD_EN_PIN_HIGH;		//	Enable pin EN ON
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <LCD_Pulse_EN+0x44>)
 8002d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d2e:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_10US, TIM_CNT_10US );	//	10 us
 8002d30:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8002d34:	2100      	movs	r1, #0
 8002d36:	2000      	movs	r0, #0
 8002d38:	f000 fe18 	bl	800396c <USER_TIM_Delay>

	GPIOC->BSRR	=	LCD_EN_PIN_LOW;			//	Enable pin EN OFF
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <LCD_Pulse_EN+0x44>)
 8002d3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d42:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_1MS, TIM_CNT_1MS );	//	1 ms
 8002d44:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f000 fe0e 	bl	800396c <USER_TIM_Delay>
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40011000 	.word	0x40011000

08002d58 <main>:
void USER_RCC_ClockEnable( void );

/* Main function */

int main( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  TASK_1_MODEL_RCC_TIM_Init();
 8002d5c:	f000 f860 	bl	8002e20 <TASK_1_MODEL_RCC_TIM_Init>
  TASK_2_ADC_Init();
 8002d60:	f000 f869 	bl	8002e36 <TASK_2_ADC_Init>
  TASK_3_USART_Init();
 8002d64:	f000 f86e 	bl	8002e44 <TASK_3_USART_Init>
  TASK_4_LCD_Init();
 8002d68:	f000 f873 	bl	8002e52 <TASK_4_LCD_Init>
  TASK_5_MATRIX_KEYPAD_Init();
 8002d6c:	f000 f877 	bl	8002e5e <TASK_5_MATRIX_KEYPAD_Init>
  TASK_6_OLED_Init();
 8002d70:	f000 f87b 	bl	8002e6a <TASK_6_OLED_Init>

  for(;;)
  {
    // ADC

    TASK_7_ADC_Read();
 8002d74:	f000 f884 	bl	8002e80 <TASK_7_ADC_Read>

    // Matrix keypad

    TASK_8_MATRIX_KEYPAD_Read();
 8002d78:	f000 f8aa 	bl	8002ed0 <TASK_8_MATRIX_KEYPAD_Read>
    TASK_9_VOLTAGE_Normalize();
 8002d7c:	f000 f8ee 	bl	8002f5c <TASK_9_VOLTAGE_Normalize>

    // Update the values for the Throttle and Brake commands into the vehicle model

    TASK_10_MODEL_Feed();
 8002d80:	f000 f902 	bl	8002f88 <TASK_10_MODEL_Feed>

    // Send the output values

    TASK_11_MODEL_Send();
 8002d84:	f000 f920 	bl	8002fc8 <TASK_11_MODEL_Send>

    /* Extract the whole and decimal parts for Engine Speed and Vehicle Speed, and cast them alongside Gear to integers
    Write the messages to send to the LCD
    Display values on the LCD */

    TASK_12_LCD_Write();
 8002d88:	f000 f93a 	bl	8003000 <TASK_12_LCD_Write>
    TASK_7_ADC_Read();
 8002d8c:	e7f2      	b.n	8002d74 <main+0x1c>
	...

08002d90 <USER_RCC_Init>:
  }

}

void USER_RCC_Init( void )
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* System Clock (SYSCLK) configuration for 64 MHz */

  // Two wait states latency, if SYSCLK > 48 MHz

  FLASH->ACR	&=	~( 0x5UL << 0U );	
 8002d94:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <USER_RCC_Init+0x88>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <USER_RCC_Init+0x88>)
 8002d9a:	f023 0305 	bic.w	r3, r3, #5
 8002d9e:	6013      	str	r3, [r2, #0]
  FLASH->ACR	|=	( 0x2UL << 0U );	
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <USER_RCC_Init+0x88>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1c      	ldr	r2, [pc, #112]	; (8002e18 <USER_RCC_Init+0x88>)
 8002da6:	f043 0302 	orr.w	r3, r3, #2
 8002daa:	6013      	str	r3, [r2, #0]
  
  // PLL HSI clock /2 selected as PLL input clock
  
  RCC->CFGR	&=	~( 0x1UL << 16U )
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <USER_RCC_Init+0x8c>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a1a      	ldr	r2, [pc, #104]	; (8002e1c <USER_RCC_Init+0x8c>)
 8002db2:	f423 339d 	bic.w	r3, r3, #80384	; 0x13a00
 8002db6:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002dba:	6053      	str	r3, [r2, #4]
		&	~( 0x3UL << 8U )        // APB1 pre-scaler /2 (APB1 must not exceed 36 MHz)
		&	~( 0xFUL << 4U );	// AHB pre-scaler /1

  // PLL input clock x 16 (PLLMUL bits)

  RCC->CFGR	|=	( 0xFUL << 18U )	
 8002dbc:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <USER_RCC_Init+0x8c>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a16      	ldr	r2, [pc, #88]	; (8002e1c <USER_RCC_Init+0x8c>)
 8002dc2:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8002dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dca:	6053      	str	r3, [r2, #4]
		|	( 0X4UL << 8U );	// APB1 pre-scaler /2
  RCC->CR	|=	( 0x1UL << 24U );	// PLL2 ON
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <USER_RCC_Init+0x8c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <USER_RCC_Init+0x8c>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

  // Wait until PLL is locked

  while( !(RCC->CR & ~( 0x1UL << 25U )));
 8002dd8:	bf00      	nop
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <USER_RCC_Init+0x8c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f9      	beq.n	8002dda <USER_RCC_Init+0x4a>

  // PLL used as system clock (SW bits)

  RCC->CFGR	&=	~( 0x1UL << 0U );
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <USER_RCC_Init+0x8c>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4a0c      	ldr	r2, [pc, #48]	; (8002e1c <USER_RCC_Init+0x8c>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	6053      	str	r3, [r2, #4]
  RCC->CFGR	|=	( 0x2UL << 0U );
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <USER_RCC_Init+0x8c>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <USER_RCC_Init+0x8c>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	6053      	str	r3, [r2, #4]

  // Wait until PLL is switched

  while( 0x8UL != ( RCC->CFGR & 0xCUL ));
 8002dfe:	bf00      	nop
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <USER_RCC_Init+0x8c>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d1f9      	bne.n	8002e00 <USER_RCC_Init+0x70>
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40022000 	.word	0x40022000
 8002e1c:	40021000 	.word	0x40021000

08002e20 <TASK_1_MODEL_RCC_TIM_Init>:

void TASK_1_MODEL_RCC_TIM_Init( void )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  EngTrModel_initialize();
 8002e24:	f7ff f9f2 	bl	800220c <EngTrModel_initialize>
  USER_RCC_Init();
 8002e28:	f7ff ffb2 	bl	8002d90 <USER_RCC_Init>
  USER_TIM_Init( TIM_2 );
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f000 fce1 	bl	80037f4 <USER_TIM_Init>
  return;
 8002e32:	bf00      	nop
}
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <TASK_2_ADC_Init>:

void TASK_2_ADC_Init( void )
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	af00      	add	r7, sp, #0
  USER_ADC_Init( ADC_1 );
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fe f93a 	bl	80010b4 <USER_ADC_Init>
  return;
 8002e40:	bf00      	nop
}
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <TASK_3_USART_Init>:

void TASK_3_USART_Init( void )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  USER_USART_Init( USART_1 );
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f000 fe37 	bl	8003abc <USER_USART_Init>
  return;
 8002e4e:	bf00      	nop
}
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <TASK_4_LCD_Init>:

void TASK_4_LCD_Init( void )
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	af00      	add	r7, sp, #0
  USER_LCD_Init();
 8002e56:	f7ff fd61 	bl	800291c <USER_LCD_Init>
  return;
 8002e5a:	bf00      	nop
}
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <TASK_5_MATRIX_KEYPAD_Init>:

void TASK_5_MATRIX_KEYPAD_Init( void )
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	af00      	add	r7, sp, #0
  USER_MATRIX_KEYPAD_Init();
 8002e62:	f000 f95b 	bl	800311c <USER_MATRIX_KEYPAD_Init>
  return;
 8002e66:	bf00      	nop
}
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <TASK_6_OLED_Init>:

void TASK_6_OLED_Init( void )
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	af00      	add	r7, sp, #0
  USER_SYSTICK_Init();
 8002e6e:	f7ff fd37 	bl	80028e0 <USER_SYSTICK_Init>
  USER_OLED_Init_64( I2C_2 );
 8002e72:	2001      	movs	r0, #1
 8002e74:	f7ff fd25 	bl	80028c2 <USER_OLED_Init_64>

  return;
 8002e78:	bf00      	nop
}
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	0000      	movs	r0, r0
	...

08002e80 <TASK_7_ADC_Read>:

void TASK_7_ADC_Read( void )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  conversionData = USER_ADC_Convert( ADC_1 );
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fe fa07 	bl	8001298 <USER_ADC_Convert>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <TASK_7_ADC_Read+0x48>)
 8002e90:	801a      	strh	r2, [r3, #0]
  voltageValue = 0.00080586 * conversionData;
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <TASK_7_ADC_Read+0x48>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fac4 	bl	8000424 <__aeabi_i2d>
 8002e9c:	a308      	add	r3, pc, #32	; (adr r3, 8002ec0 <TASK_7_ADC_Read+0x40>)
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f7fd fb29 	bl	80004f8 <__aeabi_dmul>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	f7fd fe1b 	bl	8000ae8 <__aeabi_d2f>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <TASK_7_ADC_Read+0x4c>)
 8002eb6:	6013      	str	r3, [r2, #0]

  return;
 8002eb8:	bf00      	nop
}
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	f3af 8000 	nop.w
 8002ec0:	2c2e064e 	.word	0x2c2e064e
 8002ec4:	3f4a680b 	.word	0x3f4a680b
 8002ec8:	20000298 	.word	0x20000298
 8002ecc:	2000029c 	.word	0x2000029c

08002ed0 <TASK_8_MATRIX_KEYPAD_Read>:

void TASK_8_MATRIX_KEYPAD_Read( void )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  selectedKey = USER_MATRIX_KEYPAD_Read();
 8002ed4:	f000 f97e 	bl	80031d4 <USER_MATRIX_KEYPAD_Read>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <TASK_8_MATRIX_KEYPAD_Read+0x78>)
 8002ede:	701a      	strb	r2, [r3, #0]

  if(selectedKey == '5')
 8002ee0:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <TASK_8_MATRIX_KEYPAD_Read+0x78>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b35      	cmp	r3, #53	; 0x35
 8002ee6:	d106      	bne.n	8002ef6 <TASK_8_MATRIX_KEYPAD_Read+0x26>
  {
    keyBrakeTorque = 100.0;
 8002ee8:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <TASK_8_MATRIX_KEYPAD_Read+0x7c>)
 8002eea:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <TASK_8_MATRIX_KEYPAD_Read+0x80>)
 8002eec:	601a      	str	r2, [r3, #0]
    action = 'B';
 8002eee:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <TASK_8_MATRIX_KEYPAD_Read+0x84>)
 8002ef0:	2242      	movs	r2, #66	; 0x42
 8002ef2:	701a      	strb	r2, [r3, #0]
  {
    keyBrakeTorque = 0.0;
    action = 'F';
  }

  return;
 8002ef4:	e026      	b.n	8002f44 <TASK_8_MATRIX_KEYPAD_Read+0x74>
  else if(selectedKey == '4' || selectedKey == '6')
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <TASK_8_MATRIX_KEYPAD_Read+0x78>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b34      	cmp	r3, #52	; 0x34
 8002efc:	d003      	beq.n	8002f06 <TASK_8_MATRIX_KEYPAD_Read+0x36>
 8002efe:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <TASK_8_MATRIX_KEYPAD_Read+0x78>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b36      	cmp	r3, #54	; 0x36
 8002f04:	d116      	bne.n	8002f34 <TASK_8_MATRIX_KEYPAD_Read+0x64>
    voltageValue -= 1;
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <TASK_8_MATRIX_KEYPAD_Read+0x88>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fe3e 	bl	8000b90 <__aeabi_fsub>
 8002f14:	4603      	mov	r3, r0
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <TASK_8_MATRIX_KEYPAD_Read+0x88>)
 8002f1a:	601a      	str	r2, [r3, #0]
    if(selectedKey == '4')
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <TASK_8_MATRIX_KEYPAD_Read+0x78>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b34      	cmp	r3, #52	; 0x34
 8002f22:	d103      	bne.n	8002f2c <TASK_8_MATRIX_KEYPAD_Read+0x5c>
    action = 'L';
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <TASK_8_MATRIX_KEYPAD_Read+0x84>)
 8002f26:	224c      	movs	r2, #76	; 0x4c
 8002f28:	701a      	strb	r2, [r3, #0]
    if(selectedKey == '4')
 8002f2a:	e00a      	b.n	8002f42 <TASK_8_MATRIX_KEYPAD_Read+0x72>
    action = 'R';
 8002f2c:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <TASK_8_MATRIX_KEYPAD_Read+0x84>)
 8002f2e:	2252      	movs	r2, #82	; 0x52
 8002f30:	701a      	strb	r2, [r3, #0]
    if(selectedKey == '4')
 8002f32:	e006      	b.n	8002f42 <TASK_8_MATRIX_KEYPAD_Read+0x72>
    keyBrakeTorque = 0.0;
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <TASK_8_MATRIX_KEYPAD_Read+0x7c>)
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
    action = 'F';
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <TASK_8_MATRIX_KEYPAD_Read+0x84>)
 8002f3e:	2246      	movs	r2, #70	; 0x46
 8002f40:	701a      	strb	r2, [r3, #0]
  return;
 8002f42:	bf00      	nop
}
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	200002a4 	.word	0x200002a4
 8002f50:	42c80000 	.word	0x42c80000
 8002f54:	20000001 	.word	0x20000001
 8002f58:	2000029c 	.word	0x2000029c

08002f5c <TASK_9_VOLTAGE_Normalize>:

void TASK_9_VOLTAGE_Normalize( void )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  normalizedVoltageValue = scaleVoltageValue( voltageValue, 0, 3.3 );
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <TASK_9_VOLTAGE_Normalize+0x20>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <TASK_9_VOLTAGE_Normalize+0x24>)
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe f9d0 	bl	8001310 <scaleVoltageValue>
 8002f70:	4603      	mov	r3, r0
 8002f72:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <TASK_9_VOLTAGE_Normalize+0x28>)
 8002f74:	6013      	str	r3, [r2, #0]

  return;
 8002f76:	bf00      	nop
}
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	2000029c 	.word	0x2000029c
 8002f80:	40533333 	.word	0x40533333
 8002f84:	200002a0 	.word	0x200002a0

08002f88 <TASK_10_MODEL_Feed>:

void TASK_10_MODEL_Feed( void )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  EngTrModel_U.Throttle = normalizedVoltageValue;
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <TASK_10_MODEL_Feed+0x34>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fa59 	bl	8000448 <__aeabi_f2d>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4909      	ldr	r1, [pc, #36]	; (8002fc0 <TASK_10_MODEL_Feed+0x38>)
 8002f9c:	e9c1 2300 	strd	r2, r3, [r1]
  EngTrModel_U.BrakeTorque = keyBrakeTorque;
 8002fa0:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <TASK_10_MODEL_Feed+0x3c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fa4f 	bl	8000448 <__aeabi_f2d>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4904      	ldr	r1, [pc, #16]	; (8002fc0 <TASK_10_MODEL_Feed+0x38>)
 8002fb0:	e9c1 2302 	strd	r2, r3, [r1, #8]

  EngTrModel_step();
 8002fb4:	f7fe fe50 	bl	8001c58 <EngTrModel_step>

  return;
 8002fb8:	bf00      	nop
}
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	200002a0 	.word	0x200002a0
 8002fc0:	20000270 	.word	0x20000270
 8002fc4:	200002a4 	.word	0x200002a4

08002fc8 <TASK_11_MODEL_Send>:

void TASK_11_MODEL_Send( void )
{
 8002fc8:	b5b0      	push	{r4, r5, r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af04      	add	r7, sp, #16
  printf("%f,%f,%f\n\r", EngTrModel_Y.EngineSpeed, EngTrModel_Y.VehicleSpeed, EngTrModel_Y.Gear);
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <TASK_11_MODEL_Send+0x30>)
 8002fd0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <TASK_11_MODEL_Send+0x30>)
 8002fd6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fda:	4907      	ldr	r1, [pc, #28]	; (8002ff8 <TASK_11_MODEL_Send+0x30>)
 8002fdc:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8002fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002fe4:	e9cd 2300 	strd	r2, r3, [sp]
 8002fe8:	4622      	mov	r2, r4
 8002fea:	462b      	mov	r3, r5
 8002fec:	4803      	ldr	r0, [pc, #12]	; (8002ffc <TASK_11_MODEL_Send+0x34>)
 8002fee:	f001 fd83 	bl	8004af8 <iprintf>

  return;
 8002ff2:	bf00      	nop
}
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ff8:	20000280 	.word	0x20000280
 8002ffc:	08009408 	.word	0x08009408

08003000 <TASK_12_LCD_Write>:

void TASK_12_LCD_Write( void )
{
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af04      	add	r7, sp, #16
  int EngineSpeedWhole = (int)( EngTrModel_Y.EngineSpeed );
 8003006:	4b3e      	ldr	r3, [pc, #248]	; (8003100 <TASK_12_LCD_Write+0x100>)
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	f7fd fd22 	bl	8000a58 <__aeabi_d2iz>
 8003014:	4603      	mov	r3, r0
 8003016:	617b      	str	r3, [r7, #20]
  int EngineSpeedDecimal = (int)( ( EngTrModel_Y.EngineSpeed - EngineSpeedWhole ) * 100 );
 8003018:	4b39      	ldr	r3, [pc, #228]	; (8003100 <TASK_12_LCD_Write+0x100>)
 800301a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7fd fa00 	bl	8000424 <__aeabi_i2d>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f7fd f8ac 	bl	8000188 <__aeabi_dsub>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	4b31      	ldr	r3, [pc, #196]	; (8003104 <TASK_12_LCD_Write+0x104>)
 800303e:	f7fd fa5b 	bl	80004f8 <__aeabi_dmul>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	f7fd fd05 	bl	8000a58 <__aeabi_d2iz>
 800304e:	4603      	mov	r3, r0
 8003050:	613b      	str	r3, [r7, #16]

  int VehicleSpeedWhole = (int)( EngTrModel_Y.VehicleSpeed );
 8003052:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <TASK_12_LCD_Write+0x100>)
 8003054:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003058:	4610      	mov	r0, r2
 800305a:	4619      	mov	r1, r3
 800305c:	f7fd fcfc 	bl	8000a58 <__aeabi_d2iz>
 8003060:	4603      	mov	r3, r0
 8003062:	60fb      	str	r3, [r7, #12]
  int VehicleSpeedDecimal = (int)( ( EngTrModel_Y.VehicleSpeed - VehicleSpeedWhole ) * 100 );
 8003064:	4b26      	ldr	r3, [pc, #152]	; (8003100 <TASK_12_LCD_Write+0x100>)
 8003066:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f7fd f9da 	bl	8000424 <__aeabi_i2d>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4620      	mov	r0, r4
 8003076:	4629      	mov	r1, r5
 8003078:	f7fd f886 	bl	8000188 <__aeabi_dsub>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4610      	mov	r0, r2
 8003082:	4619      	mov	r1, r3
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <TASK_12_LCD_Write+0x104>)
 800308a:	f7fd fa35 	bl	80004f8 <__aeabi_dmul>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	f7fd fcdf 	bl	8000a58 <__aeabi_d2iz>
 800309a:	4603      	mov	r3, r0
 800309c:	60bb      	str	r3, [r7, #8]

  int GearWhole = (int) ( EngTrModel_Y.Gear );
 800309e:	4b18      	ldr	r3, [pc, #96]	; (8003100 <TASK_12_LCD_Write+0x100>)
 80030a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030a4:	4610      	mov	r0, r2
 80030a6:	4619      	mov	r1, r3
 80030a8:	f7fd fcd6 	bl	8000a58 <__aeabi_d2iz>
 80030ac:	4603      	mov	r3, r0
 80030ae:	607b      	str	r3, [r7, #4]

  snprintf( FirstLine_LCD_MSG, sizeof(FirstLine_LCD_MSG), "E:%04d.%02d G:%01d  %c", EngineSpeedWhole, EngineSpeedDecimal, GearWhole, action );
 80030b0:	4b15      	ldr	r3, [pc, #84]	; (8003108 <TASK_12_LCD_Write+0x108>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	9302      	str	r3, [sp, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	4a12      	ldr	r2, [pc, #72]	; (800310c <TASK_12_LCD_Write+0x10c>)
 80030c2:	2111      	movs	r1, #17
 80030c4:	4812      	ldr	r0, [pc, #72]	; (8003110 <TASK_12_LCD_Write+0x110>)
 80030c6:	f001 fd29 	bl	8004b1c <sniprintf>
  snprintf( SecondLine_LCD_MSG, sizeof(SecondLine_LCD_MSG), "V:%03d.%02d        ", VehicleSpeedWhole, VehicleSpeedDecimal );
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a10      	ldr	r2, [pc, #64]	; (8003114 <TASK_12_LCD_Write+0x114>)
 80030d2:	2111      	movs	r1, #17
 80030d4:	4810      	ldr	r0, [pc, #64]	; (8003118 <TASK_12_LCD_Write+0x118>)
 80030d6:	f001 fd21 	bl	8004b1c <sniprintf>

  LCD_Set_Cursor( 1, 1 );
 80030da:	2101      	movs	r1, #1
 80030dc:	2001      	movs	r0, #1
 80030de:	f7ff fd83 	bl	8002be8 <LCD_Set_Cursor>
  LCD_Put_Str( FirstLine_LCD_MSG );
 80030e2:	480b      	ldr	r0, [pc, #44]	; (8003110 <TASK_12_LCD_Write+0x110>)
 80030e4:	f7ff fda2 	bl	8002c2c <LCD_Put_Str>
  LCD_Set_Cursor( 2, 1 );
 80030e8:	2101      	movs	r1, #1
 80030ea:	2002      	movs	r0, #2
 80030ec:	f7ff fd7c 	bl	8002be8 <LCD_Set_Cursor>
  LCD_Put_Str( SecondLine_LCD_MSG );
 80030f0:	4809      	ldr	r0, [pc, #36]	; (8003118 <TASK_12_LCD_Write+0x118>)
 80030f2:	f7ff fd9b 	bl	8002c2c <LCD_Put_Str>

  return;
 80030f6:	bf00      	nop
}
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bdb0      	pop	{r4, r5, r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000280 	.word	0x20000280
 8003104:	40590000 	.word	0x40590000
 8003108:	20000001 	.word	0x20000001
 800310c:	08009414 	.word	0x08009414
 8003110:	200002a8 	.word	0x200002a8
 8003114:	0800942c 	.word	0x0800942c
 8003118:	200002bc 	.word	0x200002bc

0800311c <USER_MATRIX_KEYPAD_Init>:
};

// Initialize matrix keypad

void USER_MATRIX_KEYPAD_Init( void )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  // Pin PC5 (Row 1) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTC, 5, OUT_50, OUT_GP_PP );
 8003120:	2300      	movs	r3, #0
 8003122:	2203      	movs	r2, #3
 8003124:	2105      	movs	r1, #5
 8003126:	2002      	movs	r0, #2
 8003128:	f7ff f878 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTC, 5, 1 );
 800312c:	2201      	movs	r2, #1
 800312e:	2105      	movs	r1, #5
 8003130:	2002      	movs	r0, #2
 8003132:	f7ff f927 	bl	8002384 <USER_GPIO_Write>

  // Pin PA12 (Row 2) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTA, 12, OUT_50, OUT_GP_PP );
 8003136:	2300      	movs	r3, #0
 8003138:	2203      	movs	r2, #3
 800313a:	210c      	movs	r1, #12
 800313c:	2000      	movs	r0, #0
 800313e:	f7ff f86d 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTA, 12, 1 );
 8003142:	2201      	movs	r2, #1
 8003144:	210c      	movs	r1, #12
 8003146:	2000      	movs	r0, #0
 8003148:	f7ff f91c 	bl	8002384 <USER_GPIO_Write>

  // Pin PA11 (Row 3) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTA, 11, OUT_50, OUT_GP_PP );
 800314c:	2300      	movs	r3, #0
 800314e:	2203      	movs	r2, #3
 8003150:	210b      	movs	r1, #11
 8003152:	2000      	movs	r0, #0
 8003154:	f7ff f862 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTA, 11, 1 );
 8003158:	2201      	movs	r2, #1
 800315a:	210b      	movs	r1, #11
 800315c:	2000      	movs	r0, #0
 800315e:	f7ff f911 	bl	8002384 <USER_GPIO_Write>

  // Pin PB12 (Row 4) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTB, 12, OUT_50, OUT_GP_PP );
 8003162:	2300      	movs	r3, #0
 8003164:	2203      	movs	r2, #3
 8003166:	210c      	movs	r1, #12
 8003168:	2001      	movs	r0, #1
 800316a:	f7ff f857 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 12, 1 );
 800316e:	2201      	movs	r2, #1
 8003170:	210c      	movs	r1, #12
 8003172:	2001      	movs	r0, #1
 8003174:	f7ff f906 	bl	8002384 <USER_GPIO_Write>

  // Pin PB1 (Col 1) as input pull up

  USER_GPIO_Define( PORTB, 1, INP, INP_PP );
 8003178:	2302      	movs	r3, #2
 800317a:	2200      	movs	r2, #0
 800317c:	2101      	movs	r1, #1
 800317e:	2001      	movs	r0, #1
 8003180:	f7ff f84c 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 1, 1 );
 8003184:	2201      	movs	r2, #1
 8003186:	2101      	movs	r1, #1
 8003188:	2001      	movs	r0, #1
 800318a:	f7ff f8fb 	bl	8002384 <USER_GPIO_Write>

  // Pin PB15 (Col 2) as input pull up

  USER_GPIO_Define( PORTB, 15, INP, INP_PP );
 800318e:	2302      	movs	r3, #2
 8003190:	2200      	movs	r2, #0
 8003192:	210f      	movs	r1, #15
 8003194:	2001      	movs	r0, #1
 8003196:	f7ff f841 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 15, 1 );
 800319a:	2201      	movs	r2, #1
 800319c:	210f      	movs	r1, #15
 800319e:	2001      	movs	r0, #1
 80031a0:	f7ff f8f0 	bl	8002384 <USER_GPIO_Write>

  // Pin PB14 (Col 3) as input pull up

  USER_GPIO_Define( PORTB, 14, INP, INP_PP );
 80031a4:	2302      	movs	r3, #2
 80031a6:	2200      	movs	r2, #0
 80031a8:	210e      	movs	r1, #14
 80031aa:	2001      	movs	r0, #1
 80031ac:	f7ff f836 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 14, 1 );
 80031b0:	2201      	movs	r2, #1
 80031b2:	210e      	movs	r1, #14
 80031b4:	2001      	movs	r0, #1
 80031b6:	f7ff f8e5 	bl	8002384 <USER_GPIO_Write>

  // Pin PB13 (Col 4) as input pull up

  USER_GPIO_Define( PORTB, 13, INP, INP_PP );
 80031ba:	2302      	movs	r3, #2
 80031bc:	2200      	movs	r2, #0
 80031be:	210d      	movs	r1, #13
 80031c0:	2001      	movs	r0, #1
 80031c2:	f7ff f82b 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 13, 1 );
 80031c6:	2201      	movs	r2, #1
 80031c8:	210d      	movs	r1, #13
 80031ca:	2001      	movs	r0, #1
 80031cc:	f7ff f8da 	bl	8002384 <USER_GPIO_Write>
}
 80031d0:	bf00      	nop
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <USER_MATRIX_KEYPAD_Read>:

// Read matrix keypad

char USER_MATRIX_KEYPAD_Read( void )
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
  char selectedKey = 'N';				// Default character
 80031da:	234e      	movs	r3, #78	; 0x4e
 80031dc:	71fb      	strb	r3, [r7, #7]

  for (uint8_t i = 0; i < NUMBER_OF_ELEMENTS; i++)
 80031de:	2300      	movs	r3, #0
 80031e0:	71bb      	strb	r3, [r7, #6]
 80031e2:	e061      	b.n	80032a8 <USER_MATRIX_KEYPAD_Read+0xd4>
  {
    if( i == 0 )
 80031e4:	79bb      	ldrb	r3, [r7, #6]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d108      	bne.n	80031fc <USER_MATRIX_KEYPAD_Read+0x28>
    {
       GPIOC->BSRR = (1 << (R_POSITIONS[i] + 16));
 80031ea:	79bb      	ldrb	r3, [r7, #6]
 80031ec:	4a33      	ldr	r2, [pc, #204]	; (80032bc <USER_MATRIX_KEYPAD_Read+0xe8>)
 80031ee:	5cd3      	ldrb	r3, [r2, r3]
 80031f0:	3310      	adds	r3, #16
 80031f2:	2201      	movs	r2, #1
 80031f4:	409a      	lsls	r2, r3
 80031f6:	4b32      	ldr	r3, [pc, #200]	; (80032c0 <USER_MATRIX_KEYPAD_Read+0xec>)
 80031f8:	611a      	str	r2, [r3, #16]
 80031fa:	e013      	b.n	8003224 <USER_MATRIX_KEYPAD_Read+0x50>
    }
    else if( i == 3 )
 80031fc:	79bb      	ldrb	r3, [r7, #6]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d108      	bne.n	8003214 <USER_MATRIX_KEYPAD_Read+0x40>
    {
       GPIOB->BSRR = (1 << (R_POSITIONS[i] + 16));
 8003202:	79bb      	ldrb	r3, [r7, #6]
 8003204:	4a2d      	ldr	r2, [pc, #180]	; (80032bc <USER_MATRIX_KEYPAD_Read+0xe8>)
 8003206:	5cd3      	ldrb	r3, [r2, r3]
 8003208:	3310      	adds	r3, #16
 800320a:	2201      	movs	r2, #1
 800320c:	409a      	lsls	r2, r3
 800320e:	4b2d      	ldr	r3, [pc, #180]	; (80032c4 <USER_MATRIX_KEYPAD_Read+0xf0>)
 8003210:	611a      	str	r2, [r3, #16]
 8003212:	e007      	b.n	8003224 <USER_MATRIX_KEYPAD_Read+0x50>
    }
    else
    {
       GPIOA->BSRR = (1 << (R_POSITIONS[i] + 16));
 8003214:	79bb      	ldrb	r3, [r7, #6]
 8003216:	4a29      	ldr	r2, [pc, #164]	; (80032bc <USER_MATRIX_KEYPAD_Read+0xe8>)
 8003218:	5cd3      	ldrb	r3, [r2, r3]
 800321a:	3310      	adds	r3, #16
 800321c:	2201      	movs	r2, #1
 800321e:	409a      	lsls	r2, r3
 8003220:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <USER_MATRIX_KEYPAD_Read+0xf4>)
 8003222:	611a      	str	r2, [r3, #16]
    }

    for (uint8_t j = 0; j < NUMBER_OF_ELEMENTS; j++)
 8003224:	2300      	movs	r3, #0
 8003226:	717b      	strb	r3, [r7, #5]
 8003228:	e015      	b.n	8003256 <USER_MATRIX_KEYPAD_Read+0x82>
    {
      if ((GPIOB->IDR & (1 << C_POSITIONS[j])) == 0)
 800322a:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <USER_MATRIX_KEYPAD_Read+0xf0>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	797a      	ldrb	r2, [r7, #5]
 8003230:	4926      	ldr	r1, [pc, #152]	; (80032cc <USER_MATRIX_KEYPAD_Read+0xf8>)
 8003232:	5c8a      	ldrb	r2, [r1, r2]
 8003234:	4611      	mov	r1, r2
 8003236:	2201      	movs	r2, #1
 8003238:	408a      	lsls	r2, r1
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <USER_MATRIX_KEYPAD_Read+0x7c>
      {
	  selectedKey = keys[i][j];
 8003240:	79ba      	ldrb	r2, [r7, #6]
 8003242:	797b      	ldrb	r3, [r7, #5]
 8003244:	4922      	ldr	r1, [pc, #136]	; (80032d0 <USER_MATRIX_KEYPAD_Read+0xfc>)
 8003246:	0092      	lsls	r2, r2, #2
 8003248:	440a      	add	r2, r1
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < NUMBER_OF_ELEMENTS; j++)
 8003250:	797b      	ldrb	r3, [r7, #5]
 8003252:	3301      	adds	r3, #1
 8003254:	717b      	strb	r3, [r7, #5]
 8003256:	797b      	ldrb	r3, [r7, #5]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d9e6      	bls.n	800322a <USER_MATRIX_KEYPAD_Read+0x56>
      }
    }

    if( i == 0 )
 800325c:	79bb      	ldrb	r3, [r7, #6]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <USER_MATRIX_KEYPAD_Read+0xa2>
    {
      GPIOC->BSRR = (1 << R_POSITIONS[i]);
 8003262:	79bb      	ldrb	r3, [r7, #6]
 8003264:	4a15      	ldr	r2, [pc, #84]	; (80032bc <USER_MATRIX_KEYPAD_Read+0xe8>)
 8003266:	5cd3      	ldrb	r3, [r2, r3]
 8003268:	461a      	mov	r2, r3
 800326a:	2301      	movs	r3, #1
 800326c:	fa03 f202 	lsl.w	r2, r3, r2
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <USER_MATRIX_KEYPAD_Read+0xec>)
 8003272:	611a      	str	r2, [r3, #16]
 8003274:	e015      	b.n	80032a2 <USER_MATRIX_KEYPAD_Read+0xce>
    }
    else if( i == 3 )
 8003276:	79bb      	ldrb	r3, [r7, #6]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d109      	bne.n	8003290 <USER_MATRIX_KEYPAD_Read+0xbc>
    {
      GPIOB->BSRR = (1 << R_POSITIONS[i]);
 800327c:	79bb      	ldrb	r3, [r7, #6]
 800327e:	4a0f      	ldr	r2, [pc, #60]	; (80032bc <USER_MATRIX_KEYPAD_Read+0xe8>)
 8003280:	5cd3      	ldrb	r3, [r2, r3]
 8003282:	461a      	mov	r2, r3
 8003284:	2301      	movs	r3, #1
 8003286:	fa03 f202 	lsl.w	r2, r3, r2
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <USER_MATRIX_KEYPAD_Read+0xf0>)
 800328c:	611a      	str	r2, [r3, #16]
 800328e:	e008      	b.n	80032a2 <USER_MATRIX_KEYPAD_Read+0xce>
    }
    else
    {
      GPIOA->BSRR = (1 << R_POSITIONS[i]);
 8003290:	79bb      	ldrb	r3, [r7, #6]
 8003292:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <USER_MATRIX_KEYPAD_Read+0xe8>)
 8003294:	5cd3      	ldrb	r3, [r2, r3]
 8003296:	461a      	mov	r2, r3
 8003298:	2301      	movs	r3, #1
 800329a:	fa03 f202 	lsl.w	r2, r3, r2
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <USER_MATRIX_KEYPAD_Read+0xf4>)
 80032a0:	611a      	str	r2, [r3, #16]
  for (uint8_t i = 0; i < NUMBER_OF_ELEMENTS; i++)
 80032a2:	79bb      	ldrb	r3, [r7, #6]
 80032a4:	3301      	adds	r3, #1
 80032a6:	71bb      	strb	r3, [r7, #6]
 80032a8:	79bb      	ldrb	r3, [r7, #6]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d99a      	bls.n	80031e4 <USER_MATRIX_KEYPAD_Read+0x10>
    }
  }

  return selectedKey;
 80032ae:	79fb      	ldrb	r3, [r7, #7]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000004 	.word	0x20000004
 80032c0:	40011000 	.word	0x40011000
 80032c4:	40010c00 	.word	0x40010c00
 80032c8:	40010800 	.word	0x40010800
 80032cc:	20000008 	.word	0x20000008
 80032d0:	2000000c 	.word	0x2000000c

080032d4 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80032da:	2340      	movs	r3, #64	; 0x40
 80032dc:	617b      	str	r3, [r7, #20]
  real_T inf = 0.0;
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d10a      	bne.n	8003306 <rtGetInf+0x32>
    inf = rtGetInfF();
 80032f0:	f000 f836 	bl	8003360 <rtGetInfF>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fd f8a6 	bl	8000448 <__aeabi_f2d>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003304:	e022      	b.n	800334c <rtGetInf+0x78>
  } else {
    uint16_T one = 1U;
 8003306:	2301      	movs	r3, #1
 8003308:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 800330a:	f107 0310 	add.w	r3, r7, #16
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <rtGetInf+0x54>
 8003322:	2b01      	cmp	r3, #1
 8003324:	d009      	beq.n	800333a <rtGetInf+0x66>
 8003326:	e011      	b.n	800334c <rtGetInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <rtGetInf+0x88>)
 800332a:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 800332c:	2300      	movs	r3, #0
 800332e:	60bb      	str	r3, [r7, #8]
        inf = tmpVal.fltVal;
 8003330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003334:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003338:	e008      	b.n	800334c <rtGetInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <rtGetInf+0x88>)
 800333c:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]
        inf = tmpVal.fltVal;
 8003342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003346:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 800334a:	bf00      	nop
      }
    }
  }

  return inf;
 800334c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	7ff00000 	.word	0x7ff00000

08003360 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8003366:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800336a:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800336c:	687b      	ldr	r3, [r7, #4]
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800337e:	2340      	movs	r3, #64	; 0x40
 8003380:	617b      	str	r3, [r7, #20]
  real_T minf = 0.0;
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b20      	cmp	r3, #32
 8003392:	d10a      	bne.n	80033aa <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 8003394:	f000 f836 	bl	8003404 <rtGetMinusInfF>
 8003398:	4603      	mov	r3, r0
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd f854 	bl	8000448 <__aeabi_f2d>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80033a8:	e022      	b.n	80033f0 <rtGetMinusInf+0x78>
  } else {
    uint16_T one = 1U;
 80033aa:	2301      	movs	r3, #1
 80033ac:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80033ae:	f107 0310 	add.w	r3, r7, #16
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	bf14      	ite	ne
 80033b8:	2301      	movne	r3, #1
 80033ba:	2300      	moveq	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <rtGetMinusInf+0x54>
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d009      	beq.n	80033de <rtGetMinusInf+0x66>
 80033ca:	e011      	b.n	80033f0 <rtGetMinusInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <rtGetMinusInf+0x88>)
 80033ce:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60bb      	str	r3, [r7, #8]
        minf = tmpVal.fltVal;
 80033d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 80033dc:	e008      	b.n	80033f0 <rtGetMinusInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <rtGetMinusInf+0x88>)
 80033e0:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	607b      	str	r3, [r7, #4]
        minf = tmpVal.fltVal;
 80033e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 80033ee:	bf00      	nop
      }
    }
  }

  return minf;
 80033f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	fff00000 	.word	0xfff00000

08003404 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <rtGetMinusInfF+0x18>)
 800340c:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800340e:	687b      	ldr	r3, [r7, #4]
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	ff800000 	.word	0xff800000

08003420 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003426:	2340      	movs	r3, #64	; 0x40
 8003428:	617b      	str	r3, [r7, #20]
  real_T nan = 0.0;
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b20      	cmp	r3, #32
 800343a:	d10a      	bne.n	8003452 <rtGetNaN+0x32>
    nan = rtGetNaNF();
 800343c:	f000 f838 	bl	80034b0 <rtGetNaNF>
 8003440:	4603      	mov	r3, r0
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd f800 	bl	8000448 <__aeabi_f2d>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003450:	e024      	b.n	800349c <rtGetNaN+0x7c>
  } else {
    uint16_T one = 1U;
 8003452:	2301      	movs	r3, #1
 8003454:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003456:	f107 0310 	add.w	r3, r7, #16
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	bf14      	ite	ne
 8003460:	2301      	movne	r3, #1
 8003462:	2300      	moveq	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <rtGetNaN+0x54>
 800346e:	2b01      	cmp	r3, #1
 8003470:	d009      	beq.n	8003486 <rtGetNaN+0x66>
 8003472:	e013      	b.n	800349c <rtGetNaN+0x7c>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8003474:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <rtGetNaN+0x8c>)
 8003476:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
        nan = tmpVal.fltVal;
 800347c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003480:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003484:	e00a      	b.n	800349c <rtGetNaN+0x7c>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;
 8003486:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800348a:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;
 800348c:	f04f 33ff 	mov.w	r3, #4294967295
 8003490:	607b      	str	r3, [r7, #4]
        nan = tmpVal.fltVal;
 8003492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003496:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 800349a:	bf00      	nop
      }
    }
  }

  return nan;
 800349c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	fff80000 	.word	0xfff80000

080034b0 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]

  uint16_T one = 1U;
 80034bc:	2301      	movs	r3, #1
 80034be:	80fb      	strh	r3, [r7, #6]
  enum {
    LittleEndian,
    BigEndian
  } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80034c0:	1dbb      	adds	r3, r7, #6
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	bf14      	ite	ne
 80034c8:	2301      	movne	r3, #1
 80034ca:	2300      	moveq	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	73fb      	strb	r3, [r7, #15]
  switch (machByteOrder) {
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <rtGetNaNF+0x2c>
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d003      	beq.n	80034e2 <rtGetNaNF+0x32>
 80034da:	e006      	b.n	80034ea <rtGetNaNF+0x3a>
   case LittleEndian:
    {
      nanF.wordL.wordLuint = 0xFFC00000U;
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <rtGetNaNF+0x48>)
 80034de:	60bb      	str	r3, [r7, #8]
      break;
 80034e0:	e003      	b.n	80034ea <rtGetNaNF+0x3a>
    }

   case BigEndian:
    {
      nanF.wordL.wordLuint = 0x7FFFFFFFU;
 80034e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80034e6:	60bb      	str	r3, [r7, #8]
      break;
 80034e8:	bf00      	nop
    }
  }

  return nanF.wordL.wordLreal;
 80034ea:	68bb      	ldr	r3, [r7, #8]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	ffc00000 	.word	0xffc00000

080034fc <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8003504:	f7ff ff8c 	bl	8003420 <rtGetNaN>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4911      	ldr	r1, [pc, #68]	; (8003554 <rt_InitInfAndNaN+0x58>)
 800350e:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 8003512:	f7ff ffcd 	bl	80034b0 <rtGetNaNF>
 8003516:	4603      	mov	r3, r0
 8003518:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <rt_InitInfAndNaN+0x5c>)
 800351a:	6013      	str	r3, [r2, #0]
  rtInf = rtGetInf();
 800351c:	f7ff feda 	bl	80032d4 <rtGetInf>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	490d      	ldr	r1, [pc, #52]	; (800355c <rt_InitInfAndNaN+0x60>)
 8003526:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 800352a:	f7ff ff19 	bl	8003360 <rtGetInfF>
 800352e:	4603      	mov	r3, r0
 8003530:	4a0b      	ldr	r2, [pc, #44]	; (8003560 <rt_InitInfAndNaN+0x64>)
 8003532:	6013      	str	r3, [r2, #0]
  rtMinusInf = rtGetMinusInf();
 8003534:	f7ff ff20 	bl	8003378 <rtGetMinusInf>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4909      	ldr	r1, [pc, #36]	; (8003564 <rt_InitInfAndNaN+0x68>)
 800353e:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 8003542:	f7ff ff5f 	bl	8003404 <rtGetMinusInfF>
 8003546:	4603      	mov	r3, r0
 8003548:	4a07      	ldr	r2, [pc, #28]	; (8003568 <rt_InitInfAndNaN+0x6c>)
 800354a:	6013      	str	r3, [r2, #0]
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	200002e0 	.word	0x200002e0
 8003558:	200002f0 	.word	0x200002f0
 800355c:	200002d0 	.word	0x200002d0
 8003560:	200002e8 	.word	0x200002e8
 8003564:	200002d8 	.word	0x200002d8
 8003568:	200002ec 	.word	0x200002ec

0800356c <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <rtIsInf+0x40>)
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003580:	f7fd fa22 	bl	80009c8 <__aeabi_dcmpeq>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <rtIsInf+0x32>
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <rtIsInf+0x44>)
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003594:	f7fd fa18 	bl	80009c8 <__aeabi_dcmpeq>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <rtIsInf+0x36>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <rtIsInf+0x38>
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	200002d0 	.word	0x200002d0
 80035b0:	200002d8 	.word	0x200002d8

080035b4 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	; 0x28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	e9c7 0100 	strd	r0, r1, [r7]
  boolean_T result = (boolean_T) 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80035c4:	2340      	movs	r3, #64	; 0x40
 80035c6:	623b      	str	r3, [r7, #32]
  if (bitsPerReal == 32U) {
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d10b      	bne.n	80035e6 <rtIsNaN+0x32>
    result = rtIsNaNF((real32_T)value);
 80035ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035d2:	f7fd fa89 	bl	8000ae8 <__aeabi_d2f>
 80035d6:	4603      	mov	r3, r0
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f84d 	bl	8003678 <rtIsNaNF>
 80035de:	4603      	mov	r3, r0
 80035e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80035e4:	e040      	b.n	8003668 <rtIsNaN+0xb4>
  } else {
    uint16_T one = 1U;
 80035e6:	2301      	movs	r3, #1
 80035e8:	83bb      	strh	r3, [r7, #28]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80035ea:	f107 031c 	add.w	r3, r7, #28
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	77fb      	strb	r3, [r7, #31]
    switch (machByteOrder) {
 80035fc:	7ffb      	ldrb	r3, [r7, #31]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <rtIsNaN+0x54>
 8003602:	2b01      	cmp	r3, #1
 8003604:	d018      	beq.n	8003638 <rtIsNaN+0x84>
 8003606:	e02f      	b.n	8003668 <rtIsNaN+0xb4>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8003608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800360c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <rtIsNaN+0xc0>)
 8003614:	4013      	ands	r3, r2
                             0x7FF00000 &&
 8003616:	4a17      	ldr	r2, [pc, #92]	; (8003674 <rtIsNaN+0xc0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d109      	bne.n	8003630 <rtIsNaN+0x7c>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <rtIsNaN+0x78>
                              (tmpVal.bitVal.words.wordL != 0) ));
 8003626:	693b      	ldr	r3, [r7, #16]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <rtIsNaN+0x7c>
                             0x7FF00000 &&
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <rtIsNaN+0x7e>
 8003630:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8003632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 8003636:	e017      	b.n	8003668 <rtIsNaN+0xb4>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8003638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800363c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <rtIsNaN+0xc0>)
 8003644:	4013      	ands	r3, r2
                             0x7FF00000 &&
 8003646:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <rtIsNaN+0xc0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d109      	bne.n	8003660 <rtIsNaN+0xac>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <rtIsNaN+0xa8>
                              (tmpVal.bitVal.words.wordL != 0) ));
 8003656:	68fb      	ldr	r3, [r7, #12]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <rtIsNaN+0xac>
                             0x7FF00000 &&
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <rtIsNaN+0xae>
 8003660:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8003662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 8003666:	bf00      	nop
      }
    }
  }

  return result;
 8003668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800366c:	4618      	mov	r0, r3
 800366e:	3728      	adds	r7, #40	; 0x28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	7ff00000 	.word	0x7ff00000

08003678 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800368a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800368e:	d106      	bne.n	800369e <rtIsNaNF+0x26>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <rtIsNaNF+0x26>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <rtIsNaNF+0x28>
 800369e:	2300      	movs	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return 1;
 80036b0:	2301      	movs	r3, #1
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <_kill>:

int _kill(int pid, int sig)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036c4:	f001 fb14 	bl	8004cf0 <__errno>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2216      	movs	r2, #22
 80036cc:	601a      	str	r2, [r3, #0]
  return -1;
 80036ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <_exit>:

void _exit (int status)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036e2:	f04f 31ff 	mov.w	r1, #4294967295
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff ffe7 	bl	80036ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80036ec:	e7fe      	b.n	80036ec <_exit+0x12>

080036ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b086      	sub	sp, #24
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e00a      	b.n	8003716 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003700:	f3af 8000 	nop.w
 8003704:	4601      	mov	r1, r0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	60ba      	str	r2, [r7, #8]
 800370c:	b2ca      	uxtb	r2, r1
 800370e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	3301      	adds	r3, #1
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	429a      	cmp	r2, r3
 800371c:	dbf0      	blt.n	8003700 <_read+0x12>
  }

  return len;
 800371e:	687b      	ldr	r3, [r7, #4]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003730:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800374e:	605a      	str	r2, [r3, #4]
  return 0;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <_isatty>:

int _isatty(int file)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003764:	2301      	movs	r3, #1
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003790:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <_sbrk+0x5c>)
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <_sbrk+0x60>)
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800379c:	4b13      	ldr	r3, [pc, #76]	; (80037ec <_sbrk+0x64>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <_sbrk+0x64>)
 80037a6:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <_sbrk+0x68>)
 80037a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <_sbrk+0x64>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4413      	add	r3, r2
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d207      	bcs.n	80037c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037b8:	f001 fa9a 	bl	8004cf0 <__errno>
 80037bc:	4603      	mov	r3, r0
 80037be:	220c      	movs	r2, #12
 80037c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295
 80037c6:	e009      	b.n	80037dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037c8:	4b08      	ldr	r3, [pc, #32]	; (80037ec <_sbrk+0x64>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037ce:	4b07      	ldr	r3, [pc, #28]	; (80037ec <_sbrk+0x64>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	4a05      	ldr	r2, [pc, #20]	; (80037ec <_sbrk+0x64>)
 80037d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037da:	68fb      	ldr	r3, [r7, #12]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20005000 	.word	0x20005000
 80037e8:	00000400 	.word	0x00000400
 80037ec:	200002f4 	.word	0x200002f4
 80037f0:	20000448 	.word	0x20000448

080037f4 <USER_TIM_Init>:
#include "main.h"

// Initialize TIM timer

void USER_TIM_Init( uint8_t TIM )
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  if( TIM == 0 )
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d12e      	bne.n	8003862 <USER_TIM_Init+0x6e>
  {
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM2EN;	// Clock enable for TIM2
 8003804:	4b55      	ldr	r3, [pc, #340]	; (800395c <USER_TIM_Init+0x168>)
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	4a54      	ldr	r2, [pc, #336]	; (800395c <USER_TIM_Init+0x168>)
 800380a:	f043 0301 	orr.w	r3, r3, #1
 800380e:	61d3      	str	r3, [r2, #28]

    TIM2->SMCR		&=	~(TIM_SMCR_SMS);	// Step 1 - Enable internal clock source
 8003810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800381a:	f023 0307 	bic.w	r3, r3, #7
 800381e:	6093      	str	r3, [r2, #8]
    TIM2->CR1		&=	~(TIM_CR1_UDIS);	// Step 2 - UEV enabled
 8003820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800382a:	f023 0302 	bic.w	r3, r3, #2
 800382e:	6013      	str	r3, [r2, #0]
    TIM2->CR1		&=	~(TIM_CR1_DIR);		// 	Counter as upcounter
 8003830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800383a:	f023 0310 	bic.w	r3, r3, #16
 800383e:	6013      	str	r3, [r2, #0]
    TIM2->CR1		&=	~(TIM_CR1_CMS);		//	Edge-aligned mode
 8003840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800384a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800384e:	6013      	str	r3, [r2, #0]
    TIM2->SR		&=	~(TIM_SR_UIF);		// Step 3 - Clear Update Interrupt Flag
 8003850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	6113      	str	r3, [r2, #16]
    TIM5->CR1		&=	~(TIM_CR1_UDIS);
    TIM5->CR1		&=	~(TIM_CR1_DIR);
    TIM5->CR1		&=	~(TIM_CR1_CMS);
    TIM5->SR		&=	~(TIM_SR_UIF);
  }
}
 8003860:	e076      	b.n	8003950 <USER_TIM_Init+0x15c>
  else if( TIM == 1 )
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d124      	bne.n	80038b2 <USER_TIM_Init+0xbe>
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM3EN;	// Clock enable for TIM3
 8003868:	4b3c      	ldr	r3, [pc, #240]	; (800395c <USER_TIM_Init+0x168>)
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	4a3b      	ldr	r2, [pc, #236]	; (800395c <USER_TIM_Init+0x168>)
 800386e:	f043 0302 	orr.w	r3, r3, #2
 8003872:	61d3      	str	r3, [r2, #28]
    TIM3->SMCR		&=	~(TIM_SMCR_SMS);
 8003874:	4b3a      	ldr	r3, [pc, #232]	; (8003960 <USER_TIM_Init+0x16c>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a39      	ldr	r2, [pc, #228]	; (8003960 <USER_TIM_Init+0x16c>)
 800387a:	f023 0307 	bic.w	r3, r3, #7
 800387e:	6093      	str	r3, [r2, #8]
    TIM3->CR1		&=	~(TIM_CR1_UDIS);
 8003880:	4b37      	ldr	r3, [pc, #220]	; (8003960 <USER_TIM_Init+0x16c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a36      	ldr	r2, [pc, #216]	; (8003960 <USER_TIM_Init+0x16c>)
 8003886:	f023 0302 	bic.w	r3, r3, #2
 800388a:	6013      	str	r3, [r2, #0]
    TIM3->CR1		&=	~(TIM_CR1_DIR);
 800388c:	4b34      	ldr	r3, [pc, #208]	; (8003960 <USER_TIM_Init+0x16c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a33      	ldr	r2, [pc, #204]	; (8003960 <USER_TIM_Init+0x16c>)
 8003892:	f023 0310 	bic.w	r3, r3, #16
 8003896:	6013      	str	r3, [r2, #0]
    TIM3->CR1		&=	~(TIM_CR1_CMS);
 8003898:	4b31      	ldr	r3, [pc, #196]	; (8003960 <USER_TIM_Init+0x16c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a30      	ldr	r2, [pc, #192]	; (8003960 <USER_TIM_Init+0x16c>)
 800389e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80038a2:	6013      	str	r3, [r2, #0]
    TIM3->SR		&=	~(TIM_SR_UIF);
 80038a4:	4b2e      	ldr	r3, [pc, #184]	; (8003960 <USER_TIM_Init+0x16c>)
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	4a2d      	ldr	r2, [pc, #180]	; (8003960 <USER_TIM_Init+0x16c>)
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	6113      	str	r3, [r2, #16]
}
 80038b0:	e04e      	b.n	8003950 <USER_TIM_Init+0x15c>
  else if( TIM == 2 )
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d124      	bne.n	8003902 <USER_TIM_Init+0x10e>
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM4EN;	// Clock enable for TIM4
 80038b8:	4b28      	ldr	r3, [pc, #160]	; (800395c <USER_TIM_Init+0x168>)
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4a27      	ldr	r2, [pc, #156]	; (800395c <USER_TIM_Init+0x168>)
 80038be:	f043 0304 	orr.w	r3, r3, #4
 80038c2:	61d3      	str	r3, [r2, #28]
    TIM4->SMCR		&=	~(TIM_SMCR_SMS);
 80038c4:	4b27      	ldr	r3, [pc, #156]	; (8003964 <USER_TIM_Init+0x170>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a26      	ldr	r2, [pc, #152]	; (8003964 <USER_TIM_Init+0x170>)
 80038ca:	f023 0307 	bic.w	r3, r3, #7
 80038ce:	6093      	str	r3, [r2, #8]
    TIM4->CR1		&=	~(TIM_CR1_UDIS);
 80038d0:	4b24      	ldr	r3, [pc, #144]	; (8003964 <USER_TIM_Init+0x170>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a23      	ldr	r2, [pc, #140]	; (8003964 <USER_TIM_Init+0x170>)
 80038d6:	f023 0302 	bic.w	r3, r3, #2
 80038da:	6013      	str	r3, [r2, #0]
    TIM4->CR1		&=	~(TIM_CR1_DIR);
 80038dc:	4b21      	ldr	r3, [pc, #132]	; (8003964 <USER_TIM_Init+0x170>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a20      	ldr	r2, [pc, #128]	; (8003964 <USER_TIM_Init+0x170>)
 80038e2:	f023 0310 	bic.w	r3, r3, #16
 80038e6:	6013      	str	r3, [r2, #0]
    TIM4->CR1		&=	~(TIM_CR1_CMS);
 80038e8:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <USER_TIM_Init+0x170>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <USER_TIM_Init+0x170>)
 80038ee:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80038f2:	6013      	str	r3, [r2, #0]
    TIM4->SR		&=	~(TIM_SR_UIF);
 80038f4:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <USER_TIM_Init+0x170>)
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <USER_TIM_Init+0x170>)
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	6113      	str	r3, [r2, #16]
}
 8003900:	e026      	b.n	8003950 <USER_TIM_Init+0x15c>
  else if( TIM == 3 )
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	2b03      	cmp	r3, #3
 8003906:	d123      	bne.n	8003950 <USER_TIM_Init+0x15c>
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM5EN;	// Clock enable for TIM5
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <USER_TIM_Init+0x168>)
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	4a13      	ldr	r2, [pc, #76]	; (800395c <USER_TIM_Init+0x168>)
 800390e:	f043 0308 	orr.w	r3, r3, #8
 8003912:	61d3      	str	r3, [r2, #28]
    TIM5->SMCR		&=	~(TIM_SMCR_SMS);
 8003914:	4b14      	ldr	r3, [pc, #80]	; (8003968 <USER_TIM_Init+0x174>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a13      	ldr	r2, [pc, #76]	; (8003968 <USER_TIM_Init+0x174>)
 800391a:	f023 0307 	bic.w	r3, r3, #7
 800391e:	6093      	str	r3, [r2, #8]
    TIM5->CR1		&=	~(TIM_CR1_UDIS);
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <USER_TIM_Init+0x174>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a10      	ldr	r2, [pc, #64]	; (8003968 <USER_TIM_Init+0x174>)
 8003926:	f023 0302 	bic.w	r3, r3, #2
 800392a:	6013      	str	r3, [r2, #0]
    TIM5->CR1		&=	~(TIM_CR1_DIR);
 800392c:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <USER_TIM_Init+0x174>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <USER_TIM_Init+0x174>)
 8003932:	f023 0310 	bic.w	r3, r3, #16
 8003936:	6013      	str	r3, [r2, #0]
    TIM5->CR1		&=	~(TIM_CR1_CMS);
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <USER_TIM_Init+0x174>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <USER_TIM_Init+0x174>)
 800393e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003942:	6013      	str	r3, [r2, #0]
    TIM5->SR		&=	~(TIM_SR_UIF);
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <USER_TIM_Init+0x174>)
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	4a07      	ldr	r2, [pc, #28]	; (8003968 <USER_TIM_Init+0x174>)
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	6113      	str	r3, [r2, #16]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
 8003960:	40000400 	.word	0x40000400
 8003964:	40000800 	.word	0x40000800
 8003968:	40000c00 	.word	0x40000c00

0800396c <USER_TIM_Delay>:

// Generate delay via TIM timer

void USER_TIM_Delay( uint8_t TIM, uint16_t TIM_PSC, uint16_t TIM_CNT )
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
 8003976:	460b      	mov	r3, r1
 8003978:	80bb      	strh	r3, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	807b      	strh	r3, [r7, #2]
  if( TIM == 0 )
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d128      	bne.n	80039d6 <USER_TIM_Delay+0x6a>
  {
    TIM2->PSC	=	TIM_PSC;			// Configure initial prescaler and count values
 8003984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003988:	88bb      	ldrh	r3, [r7, #4]
 800398a:	6293      	str	r3, [r2, #40]	; 0x28
    TIM2->CNT	=	TIM_CNT;
 800398c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003990:	887b      	ldrh	r3, [r7, #2]
 8003992:	6253      	str	r3, [r2, #36]	; 0x24

    TIM2->CR1	|=	TIM_CR1_CEN;			// Enable TIM2 timer to start counting
 8003994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6013      	str	r3, [r2, #0]

    while(!( TIM2->SR & TIM_SR_UIF ));			// Wait for UIF
 80039a4:	bf00      	nop
 80039a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f8      	beq.n	80039a6 <USER_TIM_Delay+0x3a>
    TIM2->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM2 timer
 80039b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	6013      	str	r3, [r2, #0]

    TIM2->SR	&=	~(TIM_SR_UIF);			// Clear UIF
 80039c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	6113      	str	r3, [r2, #16]
    while(!( TIM5->SR & TIM_SR_UIF ));
    TIM5->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM5 timer

    TIM5->SR	&=	~(TIM_SR_UIF);
  }
}
 80039d4:	e067      	b.n	8003aa6 <USER_TIM_Delay+0x13a>
  else if( TIM == 1 )
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d11f      	bne.n	8003a1c <USER_TIM_Delay+0xb0>
    TIM3->PSC	=	TIM_PSC;
 80039dc:	4a34      	ldr	r2, [pc, #208]	; (8003ab0 <USER_TIM_Delay+0x144>)
 80039de:	88bb      	ldrh	r3, [r7, #4]
 80039e0:	6293      	str	r3, [r2, #40]	; 0x28
    TIM3->CNT	=	TIM_CNT;
 80039e2:	4a33      	ldr	r2, [pc, #204]	; (8003ab0 <USER_TIM_Delay+0x144>)
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	6253      	str	r3, [r2, #36]	; 0x24
    TIM3->CR1	|=	TIM_CR1_CEN;			// Enable TIM3 timer to start counting
 80039e8:	4b31      	ldr	r3, [pc, #196]	; (8003ab0 <USER_TIM_Delay+0x144>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a30      	ldr	r2, [pc, #192]	; (8003ab0 <USER_TIM_Delay+0x144>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6013      	str	r3, [r2, #0]
    while(!( TIM3->SR & TIM_SR_UIF ));
 80039f4:	bf00      	nop
 80039f6:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <USER_TIM_Delay+0x144>)
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f9      	beq.n	80039f6 <USER_TIM_Delay+0x8a>
    TIM3->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM3 timer
 8003a02:	4b2b      	ldr	r3, [pc, #172]	; (8003ab0 <USER_TIM_Delay+0x144>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <USER_TIM_Delay+0x144>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	6013      	str	r3, [r2, #0]
    TIM3->SR	&=	~(TIM_SR_UIF);
 8003a0e:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <USER_TIM_Delay+0x144>)
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	4a27      	ldr	r2, [pc, #156]	; (8003ab0 <USER_TIM_Delay+0x144>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6113      	str	r3, [r2, #16]
}
 8003a1a:	e044      	b.n	8003aa6 <USER_TIM_Delay+0x13a>
  else if( TIM == 2 )
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d11f      	bne.n	8003a62 <USER_TIM_Delay+0xf6>
    TIM4->PSC	=	TIM_PSC;
 8003a22:	4a24      	ldr	r2, [pc, #144]	; (8003ab4 <USER_TIM_Delay+0x148>)
 8003a24:	88bb      	ldrh	r3, [r7, #4]
 8003a26:	6293      	str	r3, [r2, #40]	; 0x28
    TIM4->CNT	=	TIM_CNT;
 8003a28:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <USER_TIM_Delay+0x148>)
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	6253      	str	r3, [r2, #36]	; 0x24
    TIM4->CR1	|=	TIM_CR1_CEN;			// Enable TIM4 timer to start counting
 8003a2e:	4b21      	ldr	r3, [pc, #132]	; (8003ab4 <USER_TIM_Delay+0x148>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a20      	ldr	r2, [pc, #128]	; (8003ab4 <USER_TIM_Delay+0x148>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6013      	str	r3, [r2, #0]
    while(!( TIM4->SR & TIM_SR_UIF ));
 8003a3a:	bf00      	nop
 8003a3c:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <USER_TIM_Delay+0x148>)
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f9      	beq.n	8003a3c <USER_TIM_Delay+0xd0>
    TIM4->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM4 timer
 8003a48:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <USER_TIM_Delay+0x148>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a19      	ldr	r2, [pc, #100]	; (8003ab4 <USER_TIM_Delay+0x148>)
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	6013      	str	r3, [r2, #0]
    TIM4->SR	&=	~(TIM_SR_UIF);
 8003a54:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <USER_TIM_Delay+0x148>)
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	4a16      	ldr	r2, [pc, #88]	; (8003ab4 <USER_TIM_Delay+0x148>)
 8003a5a:	f023 0301 	bic.w	r3, r3, #1
 8003a5e:	6113      	str	r3, [r2, #16]
}
 8003a60:	e021      	b.n	8003aa6 <USER_TIM_Delay+0x13a>
  else if( TIM == 3 )
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d11e      	bne.n	8003aa6 <USER_TIM_Delay+0x13a>
    TIM5->PSC	=	TIM_PSC;
 8003a68:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <USER_TIM_Delay+0x14c>)
 8003a6a:	88bb      	ldrh	r3, [r7, #4]
 8003a6c:	6293      	str	r3, [r2, #40]	; 0x28
    TIM5->CNT	=	TIM_CNT;
 8003a6e:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <USER_TIM_Delay+0x14c>)
 8003a70:	887b      	ldrh	r3, [r7, #2]
 8003a72:	6253      	str	r3, [r2, #36]	; 0x24
    TIM5->CR1	|=	TIM_CR1_CEN;			// Enable TIM5 timer to start counting
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <USER_TIM_Delay+0x14c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <USER_TIM_Delay+0x14c>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	6013      	str	r3, [r2, #0]
    while(!( TIM5->SR & TIM_SR_UIF ));
 8003a80:	bf00      	nop
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <USER_TIM_Delay+0x14c>)
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f9      	beq.n	8003a82 <USER_TIM_Delay+0x116>
    TIM5->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM5 timer
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <USER_TIM_Delay+0x14c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <USER_TIM_Delay+0x14c>)
 8003a94:	f023 0301 	bic.w	r3, r3, #1
 8003a98:	6013      	str	r3, [r2, #0]
    TIM5->SR	&=	~(TIM_SR_UIF);
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <USER_TIM_Delay+0x14c>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	4a06      	ldr	r2, [pc, #24]	; (8003ab8 <USER_TIM_Delay+0x14c>)
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	6113      	str	r3, [r2, #16]
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40000800 	.word	0x40000800
 8003ab8:	40000c00 	.word	0x40000c00

08003abc <USER_USART_Init>:
#include "GPIO.h"

// Initialize USART

void USER_USART_Init( uint8_t USART )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	71fb      	strb	r3, [r7, #7]
  /* Only USART1 is clocked with PCLK2 (72 MHz max). Other USARTs are clocked with
  PCLK1 (36 MHz max) */

  if( USART == 0 )
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d12c      	bne.n	8003b26 <USER_USART_Init+0x6a>
  {
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; 		// Clock enable for USART1
 8003acc:	4b47      	ldr	r3, [pc, #284]	; (8003bec <USER_USART_Init+0x130>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	4a46      	ldr	r2, [pc, #280]	; (8003bec <USER_USART_Init+0x130>)
 8003ad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad6:	6193      	str	r3, [r2, #24]
    USER_GPIO_Define(PORTA, 9, OUT_10, OUT_AF_PP);	// Pin PA9 (USART1_TX) as alternate function output push-pull, max speed 10 MHz
 8003ad8:	2302      	movs	r3, #2
 8003ada:	2201      	movs	r2, #1
 8003adc:	2109      	movs	r1, #9
 8003ade:	2000      	movs	r0, #0
 8003ae0:	f7fe fb9c 	bl	800221c <USER_GPIO_Define>

    USART1->CR1	|=	 USART_CR1_UE;			// Step 1 - USART enabled
 8003ae4:	4b42      	ldr	r3, [pc, #264]	; (8003bf0 <USER_USART_Init+0x134>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a41      	ldr	r2, [pc, #260]	; (8003bf0 <USER_USART_Init+0x134>)
 8003aea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003aee:	60d3      	str	r3, [r2, #12]
    USART1->CR1	&=	~USART_CR1_M;			// Step 2 - 8 Data bits
 8003af0:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <USER_USART_Init+0x134>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a3e      	ldr	r2, [pc, #248]	; (8003bf0 <USER_USART_Init+0x134>)
 8003af6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003afa:	f023 031f 	bic.w	r3, r3, #31
 8003afe:	60d3      	str	r3, [r2, #12]
    USART1->CR2	&=	~USART_CR2_STOP;		// Step 3 - 1 Stop bit
 8003b00:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <USER_USART_Init+0x134>)
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	4a3a      	ldr	r2, [pc, #232]	; (8003bf0 <USER_USART_Init+0x134>)
 8003b06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b0e:	6113      	str	r3, [r2, #16]
    USART1->BRR	 =	 USARTDIV_64MHZ;		// Step 5 - Desired baud rate
 8003b10:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <USER_USART_Init+0x134>)
 8003b12:	f240 222b 	movw	r2, #555	; 0x22b
 8003b16:	609a      	str	r2, [r3, #8]
    USART1->CR1	|= 	 USART_CR1_TE;			// Step 6 - Transmitter enabled
 8003b18:	4b35      	ldr	r3, [pc, #212]	; (8003bf0 <USER_USART_Init+0x134>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a34      	ldr	r2, [pc, #208]	; (8003bf0 <USER_USART_Init+0x134>)
 8003b1e:	f043 0308 	orr.w	r3, r3, #8
 8003b22:	60d3      	str	r3, [r2, #12]
    USART3->CR1	&=	~USART_CR1_M;
    USART3->CR2	&=	~USART_CR2_STOP;
    USART3->BRR	 =	 USARTDIV_8MHZ;
    USART3->CR1	|= 	 USART_CR1_TE;
  }
}
 8003b24:	e05e      	b.n	8003be4 <USER_USART_Init+0x128>
  else if( USART == 1 )
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d12c      	bne.n	8003b86 <USER_USART_Init+0xca>
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; 		// Clock enable for USART2
 8003b2c:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <USER_USART_Init+0x130>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	4a2e      	ldr	r2, [pc, #184]	; (8003bec <USER_USART_Init+0x130>)
 8003b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b36:	61d3      	str	r3, [r2, #28]
    USER_GPIO_Define(PORTA, 2, OUT_10, OUT_AF_PP);	// Pin PA2 (USART2_TX) as alternate function output push-pull, max speed 10 MHz
 8003b38:	2302      	movs	r3, #2
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	2000      	movs	r0, #0
 8003b40:	f7fe fb6c 	bl	800221c <USER_GPIO_Define>
    USART2->CR1	|=	 USART_CR1_UE;
 8003b44:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <USER_USART_Init+0x138>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4a2a      	ldr	r2, [pc, #168]	; (8003bf4 <USER_USART_Init+0x138>)
 8003b4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b4e:	60d3      	str	r3, [r2, #12]
    USART2->CR1	&=	~USART_CR1_M;
 8003b50:	4b28      	ldr	r3, [pc, #160]	; (8003bf4 <USER_USART_Init+0x138>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a27      	ldr	r2, [pc, #156]	; (8003bf4 <USER_USART_Init+0x138>)
 8003b56:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003b5a:	f023 031f 	bic.w	r3, r3, #31
 8003b5e:	60d3      	str	r3, [r2, #12]
    USART2->CR2	&=	~USART_CR2_STOP;
 8003b60:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <USER_USART_Init+0x138>)
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	4a23      	ldr	r2, [pc, #140]	; (8003bf4 <USER_USART_Init+0x138>)
 8003b66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b6e:	6113      	str	r3, [r2, #16]
    USART2->BRR	 =	 USARTDIV_8MHZ;
 8003b70:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <USER_USART_Init+0x138>)
 8003b72:	f240 222b 	movw	r2, #555	; 0x22b
 8003b76:	609a      	str	r2, [r3, #8]
    USART2->CR1	|= 	 USART_CR1_TE;
 8003b78:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <USER_USART_Init+0x138>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <USER_USART_Init+0x138>)
 8003b7e:	f043 0308 	orr.w	r3, r3, #8
 8003b82:	60d3      	str	r3, [r2, #12]
}
 8003b84:	e02e      	b.n	8003be4 <USER_USART_Init+0x128>
  else if( USART == 2 )
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d12b      	bne.n	8003be4 <USER_USART_Init+0x128>
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN; 		// Clock enable for USART3
 8003b8c:	4b17      	ldr	r3, [pc, #92]	; (8003bec <USER_USART_Init+0x130>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	4a16      	ldr	r2, [pc, #88]	; (8003bec <USER_USART_Init+0x130>)
 8003b92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b96:	61d3      	str	r3, [r2, #28]
    USER_GPIO_Define(PORTA, 2, OUT_10, OUT_AF_PP);	// Pin PB10 (USART3_TX) as alternate function output push-pull, max speed 10 MHz
 8003b98:	2302      	movs	r3, #2
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f7fe fb3c 	bl	800221c <USER_GPIO_Define>
    USART3->CR1	|=	 USART_CR1_UE;
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <USER_USART_Init+0x13c>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <USER_USART_Init+0x13c>)
 8003baa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bae:	60d3      	str	r3, [r2, #12]
    USART3->CR1	&=	~USART_CR1_M;
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <USER_USART_Init+0x13c>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4a10      	ldr	r2, [pc, #64]	; (8003bf8 <USER_USART_Init+0x13c>)
 8003bb6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003bba:	f023 031f 	bic.w	r3, r3, #31
 8003bbe:	60d3      	str	r3, [r2, #12]
    USART3->CR2	&=	~USART_CR2_STOP;
 8003bc0:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <USER_USART_Init+0x13c>)
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	4a0c      	ldr	r2, [pc, #48]	; (8003bf8 <USER_USART_Init+0x13c>)
 8003bc6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003bca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bce:	6113      	str	r3, [r2, #16]
    USART3->BRR	 =	 USARTDIV_8MHZ;
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <USER_USART_Init+0x13c>)
 8003bd2:	f240 222b 	movw	r2, #555	; 0x22b
 8003bd6:	609a      	str	r2, [r3, #8]
    USART3->CR1	|= 	 USART_CR1_TE;
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <USER_USART_Init+0x13c>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a06      	ldr	r2, [pc, #24]	; (8003bf8 <USER_USART_Init+0x13c>)
 8003bde:	f043 0308 	orr.w	r3, r3, #8
 8003be2:	60d3      	str	r3, [r2, #12]
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40013800 	.word	0x40013800
 8003bf4:	40004400 	.word	0x40004400
 8003bf8:	40004800 	.word	0x40004800

08003bfc <_write>:
 *
 * It redirects standard output stream in C to USART peripheral
 * device */

int _write( int file, char *ptr, int len )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for( DataIdx = 0 ; DataIdx < len; DataIdx++ )
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e00f      	b.n	8003c2e <_write+0x32>
  {
    while(!( USART1->SR & USART_SR_TXE ));		// Wait until USART_DR is empty
 8003c0e:	bf00      	nop
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <_write+0x48>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f9      	beq.n	8003c10 <_write+0x14>
    USART1->DR = *ptr++;				// Transmit data
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	60ba      	str	r2, [r7, #8]
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <_write+0x48>)
 8003c26:	605a      	str	r2, [r3, #4]
  for( DataIdx = 0 ; DataIdx < len; DataIdx++ )
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	dbeb      	blt.n	8003c0e <_write+0x12>
  }

  return len;
 8003c36:	687b      	ldr	r3, [r7, #4]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40013800 	.word	0x40013800

08003c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c48:	480d      	ldr	r0, [pc, #52]	; (8003c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c4c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c50:	480c      	ldr	r0, [pc, #48]	; (8003c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c52:	490d      	ldr	r1, [pc, #52]	; (8003c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c54:	4a0d      	ldr	r2, [pc, #52]	; (8003c8c <LoopForever+0xe>)
  movs r3, #0
 8003c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c58:	e002      	b.n	8003c60 <LoopCopyDataInit>

08003c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c5e:	3304      	adds	r3, #4

08003c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c64:	d3f9      	bcc.n	8003c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c66:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c68:	4c0a      	ldr	r4, [pc, #40]	; (8003c94 <LoopForever+0x16>)
  movs r3, #0
 8003c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c6c:	e001      	b.n	8003c72 <LoopFillZerobss>

08003c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c70:	3204      	adds	r2, #4

08003c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c74:	d3fb      	bcc.n	8003c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003c76:	f001 f841 	bl	8004cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c7a:	f7ff f86d 	bl	8002d58 <main>

08003c7e <LoopForever>:

LoopForever:
  b LoopForever
 8003c7e:	e7fe      	b.n	8003c7e <LoopForever>
  ldr   r0, =_estack
 8003c80:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c88:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003c8c:	0800a120 	.word	0x0800a120
  ldr r2, =_sbss
 8003c90:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003c94:	20000444 	.word	0x20000444

08003c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c98:	e7fe      	b.n	8003c98 <ADC1_2_IRQHandler>

08003c9a <__cvt>:
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca0:	461f      	mov	r7, r3
 8003ca2:	bfbb      	ittet	lt
 8003ca4:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003ca8:	461f      	movlt	r7, r3
 8003caa:	2300      	movge	r3, #0
 8003cac:	232d      	movlt	r3, #45	; 0x2d
 8003cae:	b088      	sub	sp, #32
 8003cb0:	4614      	mov	r4, r2
 8003cb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003cb4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003cb6:	7013      	strb	r3, [r2, #0]
 8003cb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003cba:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003cbe:	f023 0820 	bic.w	r8, r3, #32
 8003cc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cc6:	d005      	beq.n	8003cd4 <__cvt+0x3a>
 8003cc8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003ccc:	d100      	bne.n	8003cd0 <__cvt+0x36>
 8003cce:	3501      	adds	r5, #1
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e000      	b.n	8003cd6 <__cvt+0x3c>
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	aa07      	add	r2, sp, #28
 8003cd8:	9204      	str	r2, [sp, #16]
 8003cda:	aa06      	add	r2, sp, #24
 8003cdc:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003ce0:	e9cd 3500 	strd	r3, r5, [sp]
 8003ce4:	4622      	mov	r2, r4
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	f001 f8da 	bl	8004ea0 <_dtoa_r>
 8003cec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003cf0:	4606      	mov	r6, r0
 8003cf2:	d102      	bne.n	8003cfa <__cvt+0x60>
 8003cf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003cf6:	07db      	lsls	r3, r3, #31
 8003cf8:	d522      	bpl.n	8003d40 <__cvt+0xa6>
 8003cfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cfe:	eb06 0905 	add.w	r9, r6, r5
 8003d02:	d110      	bne.n	8003d26 <__cvt+0x8c>
 8003d04:	7833      	ldrb	r3, [r6, #0]
 8003d06:	2b30      	cmp	r3, #48	; 0x30
 8003d08:	d10a      	bne.n	8003d20 <__cvt+0x86>
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	4620      	mov	r0, r4
 8003d10:	4639      	mov	r1, r7
 8003d12:	f7fc fe59 	bl	80009c8 <__aeabi_dcmpeq>
 8003d16:	b918      	cbnz	r0, 8003d20 <__cvt+0x86>
 8003d18:	f1c5 0501 	rsb	r5, r5, #1
 8003d1c:	f8ca 5000 	str.w	r5, [sl]
 8003d20:	f8da 3000 	ldr.w	r3, [sl]
 8003d24:	4499      	add	r9, r3
 8003d26:	2200      	movs	r2, #0
 8003d28:	2300      	movs	r3, #0
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	4639      	mov	r1, r7
 8003d2e:	f7fc fe4b 	bl	80009c8 <__aeabi_dcmpeq>
 8003d32:	b108      	cbz	r0, 8003d38 <__cvt+0x9e>
 8003d34:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d38:	2230      	movs	r2, #48	; 0x30
 8003d3a:	9b07      	ldr	r3, [sp, #28]
 8003d3c:	454b      	cmp	r3, r9
 8003d3e:	d307      	bcc.n	8003d50 <__cvt+0xb6>
 8003d40:	4630      	mov	r0, r6
 8003d42:	9b07      	ldr	r3, [sp, #28]
 8003d44:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003d46:	1b9b      	subs	r3, r3, r6
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	b008      	add	sp, #32
 8003d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d50:	1c59      	adds	r1, r3, #1
 8003d52:	9107      	str	r1, [sp, #28]
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	e7f0      	b.n	8003d3a <__cvt+0xa0>

08003d58 <__exponent>:
 8003d58:	4603      	mov	r3, r0
 8003d5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	f803 2b02 	strb.w	r2, [r3], #2
 8003d62:	bfb6      	itet	lt
 8003d64:	222d      	movlt	r2, #45	; 0x2d
 8003d66:	222b      	movge	r2, #43	; 0x2b
 8003d68:	4249      	neglt	r1, r1
 8003d6a:	2909      	cmp	r1, #9
 8003d6c:	7042      	strb	r2, [r0, #1]
 8003d6e:	dd2a      	ble.n	8003dc6 <__exponent+0x6e>
 8003d70:	f10d 0207 	add.w	r2, sp, #7
 8003d74:	4617      	mov	r7, r2
 8003d76:	260a      	movs	r6, #10
 8003d78:	fb91 f5f6 	sdiv	r5, r1, r6
 8003d7c:	4694      	mov	ip, r2
 8003d7e:	fb06 1415 	mls	r4, r6, r5, r1
 8003d82:	3430      	adds	r4, #48	; 0x30
 8003d84:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003d88:	460c      	mov	r4, r1
 8003d8a:	2c63      	cmp	r4, #99	; 0x63
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	f102 32ff 	add.w	r2, r2, #4294967295
 8003d92:	dcf1      	bgt.n	8003d78 <__exponent+0x20>
 8003d94:	3130      	adds	r1, #48	; 0x30
 8003d96:	f1ac 0402 	sub.w	r4, ip, #2
 8003d9a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003d9e:	4622      	mov	r2, r4
 8003da0:	1c41      	adds	r1, r0, #1
 8003da2:	42ba      	cmp	r2, r7
 8003da4:	d30a      	bcc.n	8003dbc <__exponent+0x64>
 8003da6:	f10d 0209 	add.w	r2, sp, #9
 8003daa:	eba2 020c 	sub.w	r2, r2, ip
 8003dae:	42bc      	cmp	r4, r7
 8003db0:	bf88      	it	hi
 8003db2:	2200      	movhi	r2, #0
 8003db4:	4413      	add	r3, r2
 8003db6:	1a18      	subs	r0, r3, r0
 8003db8:	b003      	add	sp, #12
 8003dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dbc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003dc0:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003dc4:	e7ed      	b.n	8003da2 <__exponent+0x4a>
 8003dc6:	2330      	movs	r3, #48	; 0x30
 8003dc8:	3130      	adds	r1, #48	; 0x30
 8003dca:	7083      	strb	r3, [r0, #2]
 8003dcc:	70c1      	strb	r1, [r0, #3]
 8003dce:	1d03      	adds	r3, r0, #4
 8003dd0:	e7f1      	b.n	8003db6 <__exponent+0x5e>
	...

08003dd4 <_printf_float>:
 8003dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd8:	b091      	sub	sp, #68	; 0x44
 8003dda:	460c      	mov	r4, r1
 8003ddc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003de0:	4616      	mov	r6, r2
 8003de2:	461f      	mov	r7, r3
 8003de4:	4605      	mov	r5, r0
 8003de6:	f000 ff39 	bl	8004c5c <_localeconv_r>
 8003dea:	6803      	ldr	r3, [r0, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	9309      	str	r3, [sp, #36]	; 0x24
 8003df0:	f7fc f9be 	bl	8000170 <strlen>
 8003df4:	2300      	movs	r3, #0
 8003df6:	930e      	str	r3, [sp, #56]	; 0x38
 8003df8:	f8d8 3000 	ldr.w	r3, [r8]
 8003dfc:	900a      	str	r0, [sp, #40]	; 0x28
 8003dfe:	3307      	adds	r3, #7
 8003e00:	f023 0307 	bic.w	r3, r3, #7
 8003e04:	f103 0208 	add.w	r2, r3, #8
 8003e08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003e0c:	f8d4 b000 	ldr.w	fp, [r4]
 8003e10:	f8c8 2000 	str.w	r2, [r8]
 8003e14:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003e18:	4652      	mov	r2, sl
 8003e1a:	4643      	mov	r3, r8
 8003e1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e20:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003e24:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e26:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	4b9c      	ldr	r3, [pc, #624]	; (80040a0 <_printf_float+0x2cc>)
 8003e2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e30:	f7fc fdfc 	bl	8000a2c <__aeabi_dcmpun>
 8003e34:	bb70      	cbnz	r0, 8003e94 <_printf_float+0xc0>
 8003e36:	f04f 32ff 	mov.w	r2, #4294967295
 8003e3a:	4650      	mov	r0, sl
 8003e3c:	4b98      	ldr	r3, [pc, #608]	; (80040a0 <_printf_float+0x2cc>)
 8003e3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e40:	f7fc fdd6 	bl	80009f0 <__aeabi_dcmple>
 8003e44:	bb30      	cbnz	r0, 8003e94 <_printf_float+0xc0>
 8003e46:	2200      	movs	r2, #0
 8003e48:	2300      	movs	r3, #0
 8003e4a:	4650      	mov	r0, sl
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	f7fc fdc5 	bl	80009dc <__aeabi_dcmplt>
 8003e52:	b110      	cbz	r0, 8003e5a <_printf_float+0x86>
 8003e54:	232d      	movs	r3, #45	; 0x2d
 8003e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e5a:	4a92      	ldr	r2, [pc, #584]	; (80040a4 <_printf_float+0x2d0>)
 8003e5c:	4b92      	ldr	r3, [pc, #584]	; (80040a8 <_printf_float+0x2d4>)
 8003e5e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003e62:	bf94      	ite	ls
 8003e64:	4690      	movls	r8, r2
 8003e66:	4698      	movhi	r8, r3
 8003e68:	2303      	movs	r3, #3
 8003e6a:	f04f 0a00 	mov.w	sl, #0
 8003e6e:	6123      	str	r3, [r4, #16]
 8003e70:	f02b 0304 	bic.w	r3, fp, #4
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	4633      	mov	r3, r6
 8003e78:	4621      	mov	r1, r4
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	9700      	str	r7, [sp, #0]
 8003e7e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003e80:	f000 f9d6 	bl	8004230 <_printf_common>
 8003e84:	3001      	adds	r0, #1
 8003e86:	f040 8090 	bne.w	8003faa <_printf_float+0x1d6>
 8003e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8e:	b011      	add	sp, #68	; 0x44
 8003e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e94:	4652      	mov	r2, sl
 8003e96:	4643      	mov	r3, r8
 8003e98:	4650      	mov	r0, sl
 8003e9a:	4641      	mov	r1, r8
 8003e9c:	f7fc fdc6 	bl	8000a2c <__aeabi_dcmpun>
 8003ea0:	b148      	cbz	r0, 8003eb6 <_printf_float+0xe2>
 8003ea2:	f1b8 0f00 	cmp.w	r8, #0
 8003ea6:	bfb8      	it	lt
 8003ea8:	232d      	movlt	r3, #45	; 0x2d
 8003eaa:	4a80      	ldr	r2, [pc, #512]	; (80040ac <_printf_float+0x2d8>)
 8003eac:	bfb8      	it	lt
 8003eae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003eb2:	4b7f      	ldr	r3, [pc, #508]	; (80040b0 <_printf_float+0x2dc>)
 8003eb4:	e7d3      	b.n	8003e5e <_printf_float+0x8a>
 8003eb6:	6863      	ldr	r3, [r4, #4]
 8003eb8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	d142      	bne.n	8003f46 <_printf_float+0x172>
 8003ec0:	2306      	movs	r3, #6
 8003ec2:	6063      	str	r3, [r4, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	9206      	str	r2, [sp, #24]
 8003ec8:	aa0e      	add	r2, sp, #56	; 0x38
 8003eca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003ece:	aa0d      	add	r2, sp, #52	; 0x34
 8003ed0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003ed4:	9203      	str	r2, [sp, #12]
 8003ed6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003eda:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003ede:	6023      	str	r3, [r4, #0]
 8003ee0:	6863      	ldr	r3, [r4, #4]
 8003ee2:	4652      	mov	r2, sl
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	4643      	mov	r3, r8
 8003eea:	910b      	str	r1, [sp, #44]	; 0x2c
 8003eec:	f7ff fed5 	bl	8003c9a <__cvt>
 8003ef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ef2:	4680      	mov	r8, r0
 8003ef4:	2947      	cmp	r1, #71	; 0x47
 8003ef6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ef8:	d108      	bne.n	8003f0c <_printf_float+0x138>
 8003efa:	1cc8      	adds	r0, r1, #3
 8003efc:	db02      	blt.n	8003f04 <_printf_float+0x130>
 8003efe:	6863      	ldr	r3, [r4, #4]
 8003f00:	4299      	cmp	r1, r3
 8003f02:	dd40      	ble.n	8003f86 <_printf_float+0x1b2>
 8003f04:	f1a9 0902 	sub.w	r9, r9, #2
 8003f08:	fa5f f989 	uxtb.w	r9, r9
 8003f0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003f10:	d81f      	bhi.n	8003f52 <_printf_float+0x17e>
 8003f12:	464a      	mov	r2, r9
 8003f14:	3901      	subs	r1, #1
 8003f16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f1a:	910d      	str	r1, [sp, #52]	; 0x34
 8003f1c:	f7ff ff1c 	bl	8003d58 <__exponent>
 8003f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f22:	4682      	mov	sl, r0
 8003f24:	1813      	adds	r3, r2, r0
 8003f26:	2a01      	cmp	r2, #1
 8003f28:	6123      	str	r3, [r4, #16]
 8003f2a:	dc02      	bgt.n	8003f32 <_printf_float+0x15e>
 8003f2c:	6822      	ldr	r2, [r4, #0]
 8003f2e:	07d2      	lsls	r2, r2, #31
 8003f30:	d501      	bpl.n	8003f36 <_printf_float+0x162>
 8003f32:	3301      	adds	r3, #1
 8003f34:	6123      	str	r3, [r4, #16]
 8003f36:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d09b      	beq.n	8003e76 <_printf_float+0xa2>
 8003f3e:	232d      	movs	r3, #45	; 0x2d
 8003f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f44:	e797      	b.n	8003e76 <_printf_float+0xa2>
 8003f46:	2947      	cmp	r1, #71	; 0x47
 8003f48:	d1bc      	bne.n	8003ec4 <_printf_float+0xf0>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1ba      	bne.n	8003ec4 <_printf_float+0xf0>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e7b7      	b.n	8003ec2 <_printf_float+0xee>
 8003f52:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003f56:	d118      	bne.n	8003f8a <_printf_float+0x1b6>
 8003f58:	2900      	cmp	r1, #0
 8003f5a:	6863      	ldr	r3, [r4, #4]
 8003f5c:	dd0b      	ble.n	8003f76 <_printf_float+0x1a2>
 8003f5e:	6121      	str	r1, [r4, #16]
 8003f60:	b913      	cbnz	r3, 8003f68 <_printf_float+0x194>
 8003f62:	6822      	ldr	r2, [r4, #0]
 8003f64:	07d0      	lsls	r0, r2, #31
 8003f66:	d502      	bpl.n	8003f6e <_printf_float+0x19a>
 8003f68:	3301      	adds	r3, #1
 8003f6a:	440b      	add	r3, r1
 8003f6c:	6123      	str	r3, [r4, #16]
 8003f6e:	f04f 0a00 	mov.w	sl, #0
 8003f72:	65a1      	str	r1, [r4, #88]	; 0x58
 8003f74:	e7df      	b.n	8003f36 <_printf_float+0x162>
 8003f76:	b913      	cbnz	r3, 8003f7e <_printf_float+0x1aa>
 8003f78:	6822      	ldr	r2, [r4, #0]
 8003f7a:	07d2      	lsls	r2, r2, #31
 8003f7c:	d501      	bpl.n	8003f82 <_printf_float+0x1ae>
 8003f7e:	3302      	adds	r3, #2
 8003f80:	e7f4      	b.n	8003f6c <_printf_float+0x198>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e7f2      	b.n	8003f6c <_printf_float+0x198>
 8003f86:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f8c:	4299      	cmp	r1, r3
 8003f8e:	db05      	blt.n	8003f9c <_printf_float+0x1c8>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	6121      	str	r1, [r4, #16]
 8003f94:	07d8      	lsls	r0, r3, #31
 8003f96:	d5ea      	bpl.n	8003f6e <_printf_float+0x19a>
 8003f98:	1c4b      	adds	r3, r1, #1
 8003f9a:	e7e7      	b.n	8003f6c <_printf_float+0x198>
 8003f9c:	2900      	cmp	r1, #0
 8003f9e:	bfcc      	ite	gt
 8003fa0:	2201      	movgt	r2, #1
 8003fa2:	f1c1 0202 	rsble	r2, r1, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	e7e0      	b.n	8003f6c <_printf_float+0x198>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	055a      	lsls	r2, r3, #21
 8003fae:	d407      	bmi.n	8003fc0 <_printf_float+0x1ec>
 8003fb0:	6923      	ldr	r3, [r4, #16]
 8003fb2:	4642      	mov	r2, r8
 8003fb4:	4631      	mov	r1, r6
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	47b8      	blx	r7
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d12b      	bne.n	8004016 <_printf_float+0x242>
 8003fbe:	e764      	b.n	8003e8a <_printf_float+0xb6>
 8003fc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003fc4:	f240 80dd 	bls.w	8004182 <_printf_float+0x3ae>
 8003fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f7fc fcfa 	bl	80009c8 <__aeabi_dcmpeq>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d033      	beq.n	8004040 <_printf_float+0x26c>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	4631      	mov	r1, r6
 8003fdc:	4628      	mov	r0, r5
 8003fde:	4a35      	ldr	r2, [pc, #212]	; (80040b4 <_printf_float+0x2e0>)
 8003fe0:	47b8      	blx	r7
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	f43f af51 	beq.w	8003e8a <_printf_float+0xb6>
 8003fe8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003fec:	429a      	cmp	r2, r3
 8003fee:	db02      	blt.n	8003ff6 <_printf_float+0x222>
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	07d8      	lsls	r0, r3, #31
 8003ff4:	d50f      	bpl.n	8004016 <_printf_float+0x242>
 8003ff6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ffa:	4631      	mov	r1, r6
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	47b8      	blx	r7
 8004000:	3001      	adds	r0, #1
 8004002:	f43f af42 	beq.w	8003e8a <_printf_float+0xb6>
 8004006:	f04f 0800 	mov.w	r8, #0
 800400a:	f104 091a 	add.w	r9, r4, #26
 800400e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004010:	3b01      	subs	r3, #1
 8004012:	4543      	cmp	r3, r8
 8004014:	dc09      	bgt.n	800402a <_printf_float+0x256>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	079b      	lsls	r3, r3, #30
 800401a:	f100 8104 	bmi.w	8004226 <_printf_float+0x452>
 800401e:	68e0      	ldr	r0, [r4, #12]
 8004020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004022:	4298      	cmp	r0, r3
 8004024:	bfb8      	it	lt
 8004026:	4618      	movlt	r0, r3
 8004028:	e731      	b.n	8003e8e <_printf_float+0xba>
 800402a:	2301      	movs	r3, #1
 800402c:	464a      	mov	r2, r9
 800402e:	4631      	mov	r1, r6
 8004030:	4628      	mov	r0, r5
 8004032:	47b8      	blx	r7
 8004034:	3001      	adds	r0, #1
 8004036:	f43f af28 	beq.w	8003e8a <_printf_float+0xb6>
 800403a:	f108 0801 	add.w	r8, r8, #1
 800403e:	e7e6      	b.n	800400e <_printf_float+0x23a>
 8004040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004042:	2b00      	cmp	r3, #0
 8004044:	dc38      	bgt.n	80040b8 <_printf_float+0x2e4>
 8004046:	2301      	movs	r3, #1
 8004048:	4631      	mov	r1, r6
 800404a:	4628      	mov	r0, r5
 800404c:	4a19      	ldr	r2, [pc, #100]	; (80040b4 <_printf_float+0x2e0>)
 800404e:	47b8      	blx	r7
 8004050:	3001      	adds	r0, #1
 8004052:	f43f af1a 	beq.w	8003e8a <_printf_float+0xb6>
 8004056:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800405a:	4313      	orrs	r3, r2
 800405c:	d102      	bne.n	8004064 <_printf_float+0x290>
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	07d9      	lsls	r1, r3, #31
 8004062:	d5d8      	bpl.n	8004016 <_printf_float+0x242>
 8004064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004068:	4631      	mov	r1, r6
 800406a:	4628      	mov	r0, r5
 800406c:	47b8      	blx	r7
 800406e:	3001      	adds	r0, #1
 8004070:	f43f af0b 	beq.w	8003e8a <_printf_float+0xb6>
 8004074:	f04f 0900 	mov.w	r9, #0
 8004078:	f104 0a1a 	add.w	sl, r4, #26
 800407c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800407e:	425b      	negs	r3, r3
 8004080:	454b      	cmp	r3, r9
 8004082:	dc01      	bgt.n	8004088 <_printf_float+0x2b4>
 8004084:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004086:	e794      	b.n	8003fb2 <_printf_float+0x1de>
 8004088:	2301      	movs	r3, #1
 800408a:	4652      	mov	r2, sl
 800408c:	4631      	mov	r1, r6
 800408e:	4628      	mov	r0, r5
 8004090:	47b8      	blx	r7
 8004092:	3001      	adds	r0, #1
 8004094:	f43f aef9 	beq.w	8003e8a <_printf_float+0xb6>
 8004098:	f109 0901 	add.w	r9, r9, #1
 800409c:	e7ee      	b.n	800407c <_printf_float+0x2a8>
 800409e:	bf00      	nop
 80040a0:	7fefffff 	.word	0x7fefffff
 80040a4:	08009cc0 	.word	0x08009cc0
 80040a8:	08009cc4 	.word	0x08009cc4
 80040ac:	08009cc8 	.word	0x08009cc8
 80040b0:	08009ccc 	.word	0x08009ccc
 80040b4:	08009cd0 	.word	0x08009cd0
 80040b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040bc:	429a      	cmp	r2, r3
 80040be:	bfa8      	it	ge
 80040c0:	461a      	movge	r2, r3
 80040c2:	2a00      	cmp	r2, #0
 80040c4:	4691      	mov	r9, r2
 80040c6:	dc37      	bgt.n	8004138 <_printf_float+0x364>
 80040c8:	f04f 0b00 	mov.w	fp, #0
 80040cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040d0:	f104 021a 	add.w	r2, r4, #26
 80040d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80040d8:	ebaa 0309 	sub.w	r3, sl, r9
 80040dc:	455b      	cmp	r3, fp
 80040de:	dc33      	bgt.n	8004148 <_printf_float+0x374>
 80040e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80040e4:	429a      	cmp	r2, r3
 80040e6:	db3b      	blt.n	8004160 <_printf_float+0x38c>
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	07da      	lsls	r2, r3, #31
 80040ec:	d438      	bmi.n	8004160 <_printf_float+0x38c>
 80040ee:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80040f2:	eba2 0903 	sub.w	r9, r2, r3
 80040f6:	eba2 020a 	sub.w	r2, r2, sl
 80040fa:	4591      	cmp	r9, r2
 80040fc:	bfa8      	it	ge
 80040fe:	4691      	movge	r9, r2
 8004100:	f1b9 0f00 	cmp.w	r9, #0
 8004104:	dc34      	bgt.n	8004170 <_printf_float+0x39c>
 8004106:	f04f 0800 	mov.w	r8, #0
 800410a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800410e:	f104 0a1a 	add.w	sl, r4, #26
 8004112:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	eba3 0309 	sub.w	r3, r3, r9
 800411c:	4543      	cmp	r3, r8
 800411e:	f77f af7a 	ble.w	8004016 <_printf_float+0x242>
 8004122:	2301      	movs	r3, #1
 8004124:	4652      	mov	r2, sl
 8004126:	4631      	mov	r1, r6
 8004128:	4628      	mov	r0, r5
 800412a:	47b8      	blx	r7
 800412c:	3001      	adds	r0, #1
 800412e:	f43f aeac 	beq.w	8003e8a <_printf_float+0xb6>
 8004132:	f108 0801 	add.w	r8, r8, #1
 8004136:	e7ec      	b.n	8004112 <_printf_float+0x33e>
 8004138:	4613      	mov	r3, r2
 800413a:	4631      	mov	r1, r6
 800413c:	4642      	mov	r2, r8
 800413e:	4628      	mov	r0, r5
 8004140:	47b8      	blx	r7
 8004142:	3001      	adds	r0, #1
 8004144:	d1c0      	bne.n	80040c8 <_printf_float+0x2f4>
 8004146:	e6a0      	b.n	8003e8a <_printf_float+0xb6>
 8004148:	2301      	movs	r3, #1
 800414a:	4631      	mov	r1, r6
 800414c:	4628      	mov	r0, r5
 800414e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004150:	47b8      	blx	r7
 8004152:	3001      	adds	r0, #1
 8004154:	f43f ae99 	beq.w	8003e8a <_printf_float+0xb6>
 8004158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800415a:	f10b 0b01 	add.w	fp, fp, #1
 800415e:	e7b9      	b.n	80040d4 <_printf_float+0x300>
 8004160:	4631      	mov	r1, r6
 8004162:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004166:	4628      	mov	r0, r5
 8004168:	47b8      	blx	r7
 800416a:	3001      	adds	r0, #1
 800416c:	d1bf      	bne.n	80040ee <_printf_float+0x31a>
 800416e:	e68c      	b.n	8003e8a <_printf_float+0xb6>
 8004170:	464b      	mov	r3, r9
 8004172:	4631      	mov	r1, r6
 8004174:	4628      	mov	r0, r5
 8004176:	eb08 020a 	add.w	r2, r8, sl
 800417a:	47b8      	blx	r7
 800417c:	3001      	adds	r0, #1
 800417e:	d1c2      	bne.n	8004106 <_printf_float+0x332>
 8004180:	e683      	b.n	8003e8a <_printf_float+0xb6>
 8004182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004184:	2a01      	cmp	r2, #1
 8004186:	dc01      	bgt.n	800418c <_printf_float+0x3b8>
 8004188:	07db      	lsls	r3, r3, #31
 800418a:	d539      	bpl.n	8004200 <_printf_float+0x42c>
 800418c:	2301      	movs	r3, #1
 800418e:	4642      	mov	r2, r8
 8004190:	4631      	mov	r1, r6
 8004192:	4628      	mov	r0, r5
 8004194:	47b8      	blx	r7
 8004196:	3001      	adds	r0, #1
 8004198:	f43f ae77 	beq.w	8003e8a <_printf_float+0xb6>
 800419c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041a0:	4631      	mov	r1, r6
 80041a2:	4628      	mov	r0, r5
 80041a4:	47b8      	blx	r7
 80041a6:	3001      	adds	r0, #1
 80041a8:	f43f ae6f 	beq.w	8003e8a <_printf_float+0xb6>
 80041ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041b0:	2200      	movs	r2, #0
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80041b8:	f7fc fc06 	bl	80009c8 <__aeabi_dcmpeq>
 80041bc:	b9d8      	cbnz	r0, 80041f6 <_printf_float+0x422>
 80041be:	f109 33ff 	add.w	r3, r9, #4294967295
 80041c2:	f108 0201 	add.w	r2, r8, #1
 80041c6:	4631      	mov	r1, r6
 80041c8:	4628      	mov	r0, r5
 80041ca:	47b8      	blx	r7
 80041cc:	3001      	adds	r0, #1
 80041ce:	d10e      	bne.n	80041ee <_printf_float+0x41a>
 80041d0:	e65b      	b.n	8003e8a <_printf_float+0xb6>
 80041d2:	2301      	movs	r3, #1
 80041d4:	464a      	mov	r2, r9
 80041d6:	4631      	mov	r1, r6
 80041d8:	4628      	mov	r0, r5
 80041da:	47b8      	blx	r7
 80041dc:	3001      	adds	r0, #1
 80041de:	f43f ae54 	beq.w	8003e8a <_printf_float+0xb6>
 80041e2:	f108 0801 	add.w	r8, r8, #1
 80041e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041e8:	3b01      	subs	r3, #1
 80041ea:	4543      	cmp	r3, r8
 80041ec:	dcf1      	bgt.n	80041d2 <_printf_float+0x3fe>
 80041ee:	4653      	mov	r3, sl
 80041f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80041f4:	e6de      	b.n	8003fb4 <_printf_float+0x1e0>
 80041f6:	f04f 0800 	mov.w	r8, #0
 80041fa:	f104 091a 	add.w	r9, r4, #26
 80041fe:	e7f2      	b.n	80041e6 <_printf_float+0x412>
 8004200:	2301      	movs	r3, #1
 8004202:	4642      	mov	r2, r8
 8004204:	e7df      	b.n	80041c6 <_printf_float+0x3f2>
 8004206:	2301      	movs	r3, #1
 8004208:	464a      	mov	r2, r9
 800420a:	4631      	mov	r1, r6
 800420c:	4628      	mov	r0, r5
 800420e:	47b8      	blx	r7
 8004210:	3001      	adds	r0, #1
 8004212:	f43f ae3a 	beq.w	8003e8a <_printf_float+0xb6>
 8004216:	f108 0801 	add.w	r8, r8, #1
 800421a:	68e3      	ldr	r3, [r4, #12]
 800421c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800421e:	1a5b      	subs	r3, r3, r1
 8004220:	4543      	cmp	r3, r8
 8004222:	dcf0      	bgt.n	8004206 <_printf_float+0x432>
 8004224:	e6fb      	b.n	800401e <_printf_float+0x24a>
 8004226:	f04f 0800 	mov.w	r8, #0
 800422a:	f104 0919 	add.w	r9, r4, #25
 800422e:	e7f4      	b.n	800421a <_printf_float+0x446>

08004230 <_printf_common>:
 8004230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004234:	4616      	mov	r6, r2
 8004236:	4699      	mov	r9, r3
 8004238:	688a      	ldr	r2, [r1, #8]
 800423a:	690b      	ldr	r3, [r1, #16]
 800423c:	4607      	mov	r7, r0
 800423e:	4293      	cmp	r3, r2
 8004240:	bfb8      	it	lt
 8004242:	4613      	movlt	r3, r2
 8004244:	6033      	str	r3, [r6, #0]
 8004246:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800424a:	460c      	mov	r4, r1
 800424c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004250:	b10a      	cbz	r2, 8004256 <_printf_common+0x26>
 8004252:	3301      	adds	r3, #1
 8004254:	6033      	str	r3, [r6, #0]
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	0699      	lsls	r1, r3, #26
 800425a:	bf42      	ittt	mi
 800425c:	6833      	ldrmi	r3, [r6, #0]
 800425e:	3302      	addmi	r3, #2
 8004260:	6033      	strmi	r3, [r6, #0]
 8004262:	6825      	ldr	r5, [r4, #0]
 8004264:	f015 0506 	ands.w	r5, r5, #6
 8004268:	d106      	bne.n	8004278 <_printf_common+0x48>
 800426a:	f104 0a19 	add.w	sl, r4, #25
 800426e:	68e3      	ldr	r3, [r4, #12]
 8004270:	6832      	ldr	r2, [r6, #0]
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	42ab      	cmp	r3, r5
 8004276:	dc2b      	bgt.n	80042d0 <_printf_common+0xa0>
 8004278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800427c:	1e13      	subs	r3, r2, #0
 800427e:	6822      	ldr	r2, [r4, #0]
 8004280:	bf18      	it	ne
 8004282:	2301      	movne	r3, #1
 8004284:	0692      	lsls	r2, r2, #26
 8004286:	d430      	bmi.n	80042ea <_printf_common+0xba>
 8004288:	4649      	mov	r1, r9
 800428a:	4638      	mov	r0, r7
 800428c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004290:	47c0      	blx	r8
 8004292:	3001      	adds	r0, #1
 8004294:	d023      	beq.n	80042de <_printf_common+0xae>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	6922      	ldr	r2, [r4, #16]
 800429a:	f003 0306 	and.w	r3, r3, #6
 800429e:	2b04      	cmp	r3, #4
 80042a0:	bf14      	ite	ne
 80042a2:	2500      	movne	r5, #0
 80042a4:	6833      	ldreq	r3, [r6, #0]
 80042a6:	f04f 0600 	mov.w	r6, #0
 80042aa:	bf08      	it	eq
 80042ac:	68e5      	ldreq	r5, [r4, #12]
 80042ae:	f104 041a 	add.w	r4, r4, #26
 80042b2:	bf08      	it	eq
 80042b4:	1aed      	subeq	r5, r5, r3
 80042b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80042ba:	bf08      	it	eq
 80042bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042c0:	4293      	cmp	r3, r2
 80042c2:	bfc4      	itt	gt
 80042c4:	1a9b      	subgt	r3, r3, r2
 80042c6:	18ed      	addgt	r5, r5, r3
 80042c8:	42b5      	cmp	r5, r6
 80042ca:	d11a      	bne.n	8004302 <_printf_common+0xd2>
 80042cc:	2000      	movs	r0, #0
 80042ce:	e008      	b.n	80042e2 <_printf_common+0xb2>
 80042d0:	2301      	movs	r3, #1
 80042d2:	4652      	mov	r2, sl
 80042d4:	4649      	mov	r1, r9
 80042d6:	4638      	mov	r0, r7
 80042d8:	47c0      	blx	r8
 80042da:	3001      	adds	r0, #1
 80042dc:	d103      	bne.n	80042e6 <_printf_common+0xb6>
 80042de:	f04f 30ff 	mov.w	r0, #4294967295
 80042e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e6:	3501      	adds	r5, #1
 80042e8:	e7c1      	b.n	800426e <_printf_common+0x3e>
 80042ea:	2030      	movs	r0, #48	; 0x30
 80042ec:	18e1      	adds	r1, r4, r3
 80042ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042f8:	4422      	add	r2, r4
 80042fa:	3302      	adds	r3, #2
 80042fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004300:	e7c2      	b.n	8004288 <_printf_common+0x58>
 8004302:	2301      	movs	r3, #1
 8004304:	4622      	mov	r2, r4
 8004306:	4649      	mov	r1, r9
 8004308:	4638      	mov	r0, r7
 800430a:	47c0      	blx	r8
 800430c:	3001      	adds	r0, #1
 800430e:	d0e6      	beq.n	80042de <_printf_common+0xae>
 8004310:	3601      	adds	r6, #1
 8004312:	e7d9      	b.n	80042c8 <_printf_common+0x98>

08004314 <_printf_i>:
 8004314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004318:	7e0f      	ldrb	r7, [r1, #24]
 800431a:	4691      	mov	r9, r2
 800431c:	2f78      	cmp	r7, #120	; 0x78
 800431e:	4680      	mov	r8, r0
 8004320:	460c      	mov	r4, r1
 8004322:	469a      	mov	sl, r3
 8004324:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004326:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800432a:	d807      	bhi.n	800433c <_printf_i+0x28>
 800432c:	2f62      	cmp	r7, #98	; 0x62
 800432e:	d80a      	bhi.n	8004346 <_printf_i+0x32>
 8004330:	2f00      	cmp	r7, #0
 8004332:	f000 80d5 	beq.w	80044e0 <_printf_i+0x1cc>
 8004336:	2f58      	cmp	r7, #88	; 0x58
 8004338:	f000 80c1 	beq.w	80044be <_printf_i+0x1aa>
 800433c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004344:	e03a      	b.n	80043bc <_printf_i+0xa8>
 8004346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800434a:	2b15      	cmp	r3, #21
 800434c:	d8f6      	bhi.n	800433c <_printf_i+0x28>
 800434e:	a101      	add	r1, pc, #4	; (adr r1, 8004354 <_printf_i+0x40>)
 8004350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004354:	080043ad 	.word	0x080043ad
 8004358:	080043c1 	.word	0x080043c1
 800435c:	0800433d 	.word	0x0800433d
 8004360:	0800433d 	.word	0x0800433d
 8004364:	0800433d 	.word	0x0800433d
 8004368:	0800433d 	.word	0x0800433d
 800436c:	080043c1 	.word	0x080043c1
 8004370:	0800433d 	.word	0x0800433d
 8004374:	0800433d 	.word	0x0800433d
 8004378:	0800433d 	.word	0x0800433d
 800437c:	0800433d 	.word	0x0800433d
 8004380:	080044c7 	.word	0x080044c7
 8004384:	080043ed 	.word	0x080043ed
 8004388:	08004481 	.word	0x08004481
 800438c:	0800433d 	.word	0x0800433d
 8004390:	0800433d 	.word	0x0800433d
 8004394:	080044e9 	.word	0x080044e9
 8004398:	0800433d 	.word	0x0800433d
 800439c:	080043ed 	.word	0x080043ed
 80043a0:	0800433d 	.word	0x0800433d
 80043a4:	0800433d 	.word	0x0800433d
 80043a8:	08004489 	.word	0x08004489
 80043ac:	682b      	ldr	r3, [r5, #0]
 80043ae:	1d1a      	adds	r2, r3, #4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	602a      	str	r2, [r5, #0]
 80043b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043bc:	2301      	movs	r3, #1
 80043be:	e0a0      	b.n	8004502 <_printf_i+0x1ee>
 80043c0:	6820      	ldr	r0, [r4, #0]
 80043c2:	682b      	ldr	r3, [r5, #0]
 80043c4:	0607      	lsls	r7, r0, #24
 80043c6:	f103 0104 	add.w	r1, r3, #4
 80043ca:	6029      	str	r1, [r5, #0]
 80043cc:	d501      	bpl.n	80043d2 <_printf_i+0xbe>
 80043ce:	681e      	ldr	r6, [r3, #0]
 80043d0:	e003      	b.n	80043da <_printf_i+0xc6>
 80043d2:	0646      	lsls	r6, r0, #25
 80043d4:	d5fb      	bpl.n	80043ce <_printf_i+0xba>
 80043d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80043da:	2e00      	cmp	r6, #0
 80043dc:	da03      	bge.n	80043e6 <_printf_i+0xd2>
 80043de:	232d      	movs	r3, #45	; 0x2d
 80043e0:	4276      	negs	r6, r6
 80043e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e6:	230a      	movs	r3, #10
 80043e8:	4859      	ldr	r0, [pc, #356]	; (8004550 <_printf_i+0x23c>)
 80043ea:	e012      	b.n	8004412 <_printf_i+0xfe>
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	6820      	ldr	r0, [r4, #0]
 80043f0:	1d19      	adds	r1, r3, #4
 80043f2:	6029      	str	r1, [r5, #0]
 80043f4:	0605      	lsls	r5, r0, #24
 80043f6:	d501      	bpl.n	80043fc <_printf_i+0xe8>
 80043f8:	681e      	ldr	r6, [r3, #0]
 80043fa:	e002      	b.n	8004402 <_printf_i+0xee>
 80043fc:	0641      	lsls	r1, r0, #25
 80043fe:	d5fb      	bpl.n	80043f8 <_printf_i+0xe4>
 8004400:	881e      	ldrh	r6, [r3, #0]
 8004402:	2f6f      	cmp	r7, #111	; 0x6f
 8004404:	bf0c      	ite	eq
 8004406:	2308      	moveq	r3, #8
 8004408:	230a      	movne	r3, #10
 800440a:	4851      	ldr	r0, [pc, #324]	; (8004550 <_printf_i+0x23c>)
 800440c:	2100      	movs	r1, #0
 800440e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004412:	6865      	ldr	r5, [r4, #4]
 8004414:	2d00      	cmp	r5, #0
 8004416:	bfa8      	it	ge
 8004418:	6821      	ldrge	r1, [r4, #0]
 800441a:	60a5      	str	r5, [r4, #8]
 800441c:	bfa4      	itt	ge
 800441e:	f021 0104 	bicge.w	r1, r1, #4
 8004422:	6021      	strge	r1, [r4, #0]
 8004424:	b90e      	cbnz	r6, 800442a <_printf_i+0x116>
 8004426:	2d00      	cmp	r5, #0
 8004428:	d04b      	beq.n	80044c2 <_printf_i+0x1ae>
 800442a:	4615      	mov	r5, r2
 800442c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004430:	fb03 6711 	mls	r7, r3, r1, r6
 8004434:	5dc7      	ldrb	r7, [r0, r7]
 8004436:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800443a:	4637      	mov	r7, r6
 800443c:	42bb      	cmp	r3, r7
 800443e:	460e      	mov	r6, r1
 8004440:	d9f4      	bls.n	800442c <_printf_i+0x118>
 8004442:	2b08      	cmp	r3, #8
 8004444:	d10b      	bne.n	800445e <_printf_i+0x14a>
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	07de      	lsls	r6, r3, #31
 800444a:	d508      	bpl.n	800445e <_printf_i+0x14a>
 800444c:	6923      	ldr	r3, [r4, #16]
 800444e:	6861      	ldr	r1, [r4, #4]
 8004450:	4299      	cmp	r1, r3
 8004452:	bfde      	ittt	le
 8004454:	2330      	movle	r3, #48	; 0x30
 8004456:	f805 3c01 	strble.w	r3, [r5, #-1]
 800445a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800445e:	1b52      	subs	r2, r2, r5
 8004460:	6122      	str	r2, [r4, #16]
 8004462:	464b      	mov	r3, r9
 8004464:	4621      	mov	r1, r4
 8004466:	4640      	mov	r0, r8
 8004468:	f8cd a000 	str.w	sl, [sp]
 800446c:	aa03      	add	r2, sp, #12
 800446e:	f7ff fedf 	bl	8004230 <_printf_common>
 8004472:	3001      	adds	r0, #1
 8004474:	d14a      	bne.n	800450c <_printf_i+0x1f8>
 8004476:	f04f 30ff 	mov.w	r0, #4294967295
 800447a:	b004      	add	sp, #16
 800447c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	f043 0320 	orr.w	r3, r3, #32
 8004486:	6023      	str	r3, [r4, #0]
 8004488:	2778      	movs	r7, #120	; 0x78
 800448a:	4832      	ldr	r0, [pc, #200]	; (8004554 <_printf_i+0x240>)
 800448c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	6829      	ldr	r1, [r5, #0]
 8004494:	061f      	lsls	r7, r3, #24
 8004496:	f851 6b04 	ldr.w	r6, [r1], #4
 800449a:	d402      	bmi.n	80044a2 <_printf_i+0x18e>
 800449c:	065f      	lsls	r7, r3, #25
 800449e:	bf48      	it	mi
 80044a0:	b2b6      	uxthmi	r6, r6
 80044a2:	07df      	lsls	r7, r3, #31
 80044a4:	bf48      	it	mi
 80044a6:	f043 0320 	orrmi.w	r3, r3, #32
 80044aa:	6029      	str	r1, [r5, #0]
 80044ac:	bf48      	it	mi
 80044ae:	6023      	strmi	r3, [r4, #0]
 80044b0:	b91e      	cbnz	r6, 80044ba <_printf_i+0x1a6>
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	f023 0320 	bic.w	r3, r3, #32
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	2310      	movs	r3, #16
 80044bc:	e7a6      	b.n	800440c <_printf_i+0xf8>
 80044be:	4824      	ldr	r0, [pc, #144]	; (8004550 <_printf_i+0x23c>)
 80044c0:	e7e4      	b.n	800448c <_printf_i+0x178>
 80044c2:	4615      	mov	r5, r2
 80044c4:	e7bd      	b.n	8004442 <_printf_i+0x12e>
 80044c6:	682b      	ldr	r3, [r5, #0]
 80044c8:	6826      	ldr	r6, [r4, #0]
 80044ca:	1d18      	adds	r0, r3, #4
 80044cc:	6961      	ldr	r1, [r4, #20]
 80044ce:	6028      	str	r0, [r5, #0]
 80044d0:	0635      	lsls	r5, r6, #24
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	d501      	bpl.n	80044da <_printf_i+0x1c6>
 80044d6:	6019      	str	r1, [r3, #0]
 80044d8:	e002      	b.n	80044e0 <_printf_i+0x1cc>
 80044da:	0670      	lsls	r0, r6, #25
 80044dc:	d5fb      	bpl.n	80044d6 <_printf_i+0x1c2>
 80044de:	8019      	strh	r1, [r3, #0]
 80044e0:	2300      	movs	r3, #0
 80044e2:	4615      	mov	r5, r2
 80044e4:	6123      	str	r3, [r4, #16]
 80044e6:	e7bc      	b.n	8004462 <_printf_i+0x14e>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	2100      	movs	r1, #0
 80044ec:	1d1a      	adds	r2, r3, #4
 80044ee:	602a      	str	r2, [r5, #0]
 80044f0:	681d      	ldr	r5, [r3, #0]
 80044f2:	6862      	ldr	r2, [r4, #4]
 80044f4:	4628      	mov	r0, r5
 80044f6:	f000 fc28 	bl	8004d4a <memchr>
 80044fa:	b108      	cbz	r0, 8004500 <_printf_i+0x1ec>
 80044fc:	1b40      	subs	r0, r0, r5
 80044fe:	6060      	str	r0, [r4, #4]
 8004500:	6863      	ldr	r3, [r4, #4]
 8004502:	6123      	str	r3, [r4, #16]
 8004504:	2300      	movs	r3, #0
 8004506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800450a:	e7aa      	b.n	8004462 <_printf_i+0x14e>
 800450c:	462a      	mov	r2, r5
 800450e:	4649      	mov	r1, r9
 8004510:	4640      	mov	r0, r8
 8004512:	6923      	ldr	r3, [r4, #16]
 8004514:	47d0      	blx	sl
 8004516:	3001      	adds	r0, #1
 8004518:	d0ad      	beq.n	8004476 <_printf_i+0x162>
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	079b      	lsls	r3, r3, #30
 800451e:	d413      	bmi.n	8004548 <_printf_i+0x234>
 8004520:	68e0      	ldr	r0, [r4, #12]
 8004522:	9b03      	ldr	r3, [sp, #12]
 8004524:	4298      	cmp	r0, r3
 8004526:	bfb8      	it	lt
 8004528:	4618      	movlt	r0, r3
 800452a:	e7a6      	b.n	800447a <_printf_i+0x166>
 800452c:	2301      	movs	r3, #1
 800452e:	4632      	mov	r2, r6
 8004530:	4649      	mov	r1, r9
 8004532:	4640      	mov	r0, r8
 8004534:	47d0      	blx	sl
 8004536:	3001      	adds	r0, #1
 8004538:	d09d      	beq.n	8004476 <_printf_i+0x162>
 800453a:	3501      	adds	r5, #1
 800453c:	68e3      	ldr	r3, [r4, #12]
 800453e:	9903      	ldr	r1, [sp, #12]
 8004540:	1a5b      	subs	r3, r3, r1
 8004542:	42ab      	cmp	r3, r5
 8004544:	dcf2      	bgt.n	800452c <_printf_i+0x218>
 8004546:	e7eb      	b.n	8004520 <_printf_i+0x20c>
 8004548:	2500      	movs	r5, #0
 800454a:	f104 0619 	add.w	r6, r4, #25
 800454e:	e7f5      	b.n	800453c <_printf_i+0x228>
 8004550:	08009cd2 	.word	0x08009cd2
 8004554:	08009ce3 	.word	0x08009ce3

08004558 <_scanf_float>:
 8004558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455c:	b087      	sub	sp, #28
 800455e:	9303      	str	r3, [sp, #12]
 8004560:	688b      	ldr	r3, [r1, #8]
 8004562:	4617      	mov	r7, r2
 8004564:	1e5a      	subs	r2, r3, #1
 8004566:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800456a:	bf85      	ittet	hi
 800456c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004570:	195b      	addhi	r3, r3, r5
 8004572:	2300      	movls	r3, #0
 8004574:	9302      	strhi	r3, [sp, #8]
 8004576:	bf88      	it	hi
 8004578:	f240 135d 	movwhi	r3, #349	; 0x15d
 800457c:	468b      	mov	fp, r1
 800457e:	f04f 0500 	mov.w	r5, #0
 8004582:	bf8c      	ite	hi
 8004584:	608b      	strhi	r3, [r1, #8]
 8004586:	9302      	strls	r3, [sp, #8]
 8004588:	680b      	ldr	r3, [r1, #0]
 800458a:	4680      	mov	r8, r0
 800458c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004590:	f84b 3b1c 	str.w	r3, [fp], #28
 8004594:	460c      	mov	r4, r1
 8004596:	465e      	mov	r6, fp
 8004598:	46aa      	mov	sl, r5
 800459a:	46a9      	mov	r9, r5
 800459c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80045a0:	9501      	str	r5, [sp, #4]
 80045a2:	68a2      	ldr	r2, [r4, #8]
 80045a4:	b152      	cbz	r2, 80045bc <_scanf_float+0x64>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b4e      	cmp	r3, #78	; 0x4e
 80045ac:	d864      	bhi.n	8004678 <_scanf_float+0x120>
 80045ae:	2b40      	cmp	r3, #64	; 0x40
 80045b0:	d83c      	bhi.n	800462c <_scanf_float+0xd4>
 80045b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80045b6:	b2c8      	uxtb	r0, r1
 80045b8:	280e      	cmp	r0, #14
 80045ba:	d93a      	bls.n	8004632 <_scanf_float+0xda>
 80045bc:	f1b9 0f00 	cmp.w	r9, #0
 80045c0:	d003      	beq.n	80045ca <_scanf_float+0x72>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045ce:	f1ba 0f01 	cmp.w	sl, #1
 80045d2:	f200 8113 	bhi.w	80047fc <_scanf_float+0x2a4>
 80045d6:	455e      	cmp	r6, fp
 80045d8:	f200 8105 	bhi.w	80047e6 <_scanf_float+0x28e>
 80045dc:	2501      	movs	r5, #1
 80045de:	4628      	mov	r0, r5
 80045e0:	b007      	add	sp, #28
 80045e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80045ea:	2a0d      	cmp	r2, #13
 80045ec:	d8e6      	bhi.n	80045bc <_scanf_float+0x64>
 80045ee:	a101      	add	r1, pc, #4	; (adr r1, 80045f4 <_scanf_float+0x9c>)
 80045f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80045f4:	08004733 	.word	0x08004733
 80045f8:	080045bd 	.word	0x080045bd
 80045fc:	080045bd 	.word	0x080045bd
 8004600:	080045bd 	.word	0x080045bd
 8004604:	08004793 	.word	0x08004793
 8004608:	0800476b 	.word	0x0800476b
 800460c:	080045bd 	.word	0x080045bd
 8004610:	080045bd 	.word	0x080045bd
 8004614:	08004741 	.word	0x08004741
 8004618:	080045bd 	.word	0x080045bd
 800461c:	080045bd 	.word	0x080045bd
 8004620:	080045bd 	.word	0x080045bd
 8004624:	080045bd 	.word	0x080045bd
 8004628:	080046f9 	.word	0x080046f9
 800462c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004630:	e7db      	b.n	80045ea <_scanf_float+0x92>
 8004632:	290e      	cmp	r1, #14
 8004634:	d8c2      	bhi.n	80045bc <_scanf_float+0x64>
 8004636:	a001      	add	r0, pc, #4	; (adr r0, 800463c <_scanf_float+0xe4>)
 8004638:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800463c:	080046eb 	.word	0x080046eb
 8004640:	080045bd 	.word	0x080045bd
 8004644:	080046eb 	.word	0x080046eb
 8004648:	0800477f 	.word	0x0800477f
 800464c:	080045bd 	.word	0x080045bd
 8004650:	08004699 	.word	0x08004699
 8004654:	080046d5 	.word	0x080046d5
 8004658:	080046d5 	.word	0x080046d5
 800465c:	080046d5 	.word	0x080046d5
 8004660:	080046d5 	.word	0x080046d5
 8004664:	080046d5 	.word	0x080046d5
 8004668:	080046d5 	.word	0x080046d5
 800466c:	080046d5 	.word	0x080046d5
 8004670:	080046d5 	.word	0x080046d5
 8004674:	080046d5 	.word	0x080046d5
 8004678:	2b6e      	cmp	r3, #110	; 0x6e
 800467a:	d809      	bhi.n	8004690 <_scanf_float+0x138>
 800467c:	2b60      	cmp	r3, #96	; 0x60
 800467e:	d8b2      	bhi.n	80045e6 <_scanf_float+0x8e>
 8004680:	2b54      	cmp	r3, #84	; 0x54
 8004682:	d077      	beq.n	8004774 <_scanf_float+0x21c>
 8004684:	2b59      	cmp	r3, #89	; 0x59
 8004686:	d199      	bne.n	80045bc <_scanf_float+0x64>
 8004688:	2d07      	cmp	r5, #7
 800468a:	d197      	bne.n	80045bc <_scanf_float+0x64>
 800468c:	2508      	movs	r5, #8
 800468e:	e029      	b.n	80046e4 <_scanf_float+0x18c>
 8004690:	2b74      	cmp	r3, #116	; 0x74
 8004692:	d06f      	beq.n	8004774 <_scanf_float+0x21c>
 8004694:	2b79      	cmp	r3, #121	; 0x79
 8004696:	e7f6      	b.n	8004686 <_scanf_float+0x12e>
 8004698:	6821      	ldr	r1, [r4, #0]
 800469a:	05c8      	lsls	r0, r1, #23
 800469c:	d51a      	bpl.n	80046d4 <_scanf_float+0x17c>
 800469e:	9b02      	ldr	r3, [sp, #8]
 80046a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80046a4:	6021      	str	r1, [r4, #0]
 80046a6:	f109 0901 	add.w	r9, r9, #1
 80046aa:	b11b      	cbz	r3, 80046b4 <_scanf_float+0x15c>
 80046ac:	3b01      	subs	r3, #1
 80046ae:	3201      	adds	r2, #1
 80046b0:	9302      	str	r3, [sp, #8]
 80046b2:	60a2      	str	r2, [r4, #8]
 80046b4:	68a3      	ldr	r3, [r4, #8]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	60a3      	str	r3, [r4, #8]
 80046ba:	6923      	ldr	r3, [r4, #16]
 80046bc:	3301      	adds	r3, #1
 80046be:	6123      	str	r3, [r4, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	f340 8084 	ble.w	80047d4 <_scanf_float+0x27c>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	603b      	str	r3, [r7, #0]
 80046d2:	e766      	b.n	80045a2 <_scanf_float+0x4a>
 80046d4:	eb1a 0f05 	cmn.w	sl, r5
 80046d8:	f47f af70 	bne.w	80045bc <_scanf_float+0x64>
 80046dc:	6822      	ldr	r2, [r4, #0]
 80046de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80046e2:	6022      	str	r2, [r4, #0]
 80046e4:	f806 3b01 	strb.w	r3, [r6], #1
 80046e8:	e7e4      	b.n	80046b4 <_scanf_float+0x15c>
 80046ea:	6822      	ldr	r2, [r4, #0]
 80046ec:	0610      	lsls	r0, r2, #24
 80046ee:	f57f af65 	bpl.w	80045bc <_scanf_float+0x64>
 80046f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f6:	e7f4      	b.n	80046e2 <_scanf_float+0x18a>
 80046f8:	f1ba 0f00 	cmp.w	sl, #0
 80046fc:	d10e      	bne.n	800471c <_scanf_float+0x1c4>
 80046fe:	f1b9 0f00 	cmp.w	r9, #0
 8004702:	d10e      	bne.n	8004722 <_scanf_float+0x1ca>
 8004704:	6822      	ldr	r2, [r4, #0]
 8004706:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800470a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800470e:	d108      	bne.n	8004722 <_scanf_float+0x1ca>
 8004710:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004714:	f04f 0a01 	mov.w	sl, #1
 8004718:	6022      	str	r2, [r4, #0]
 800471a:	e7e3      	b.n	80046e4 <_scanf_float+0x18c>
 800471c:	f1ba 0f02 	cmp.w	sl, #2
 8004720:	d055      	beq.n	80047ce <_scanf_float+0x276>
 8004722:	2d01      	cmp	r5, #1
 8004724:	d002      	beq.n	800472c <_scanf_float+0x1d4>
 8004726:	2d04      	cmp	r5, #4
 8004728:	f47f af48 	bne.w	80045bc <_scanf_float+0x64>
 800472c:	3501      	adds	r5, #1
 800472e:	b2ed      	uxtb	r5, r5
 8004730:	e7d8      	b.n	80046e4 <_scanf_float+0x18c>
 8004732:	f1ba 0f01 	cmp.w	sl, #1
 8004736:	f47f af41 	bne.w	80045bc <_scanf_float+0x64>
 800473a:	f04f 0a02 	mov.w	sl, #2
 800473e:	e7d1      	b.n	80046e4 <_scanf_float+0x18c>
 8004740:	b97d      	cbnz	r5, 8004762 <_scanf_float+0x20a>
 8004742:	f1b9 0f00 	cmp.w	r9, #0
 8004746:	f47f af3c 	bne.w	80045c2 <_scanf_float+0x6a>
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004750:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004754:	f47f af39 	bne.w	80045ca <_scanf_float+0x72>
 8004758:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800475c:	2501      	movs	r5, #1
 800475e:	6022      	str	r2, [r4, #0]
 8004760:	e7c0      	b.n	80046e4 <_scanf_float+0x18c>
 8004762:	2d03      	cmp	r5, #3
 8004764:	d0e2      	beq.n	800472c <_scanf_float+0x1d4>
 8004766:	2d05      	cmp	r5, #5
 8004768:	e7de      	b.n	8004728 <_scanf_float+0x1d0>
 800476a:	2d02      	cmp	r5, #2
 800476c:	f47f af26 	bne.w	80045bc <_scanf_float+0x64>
 8004770:	2503      	movs	r5, #3
 8004772:	e7b7      	b.n	80046e4 <_scanf_float+0x18c>
 8004774:	2d06      	cmp	r5, #6
 8004776:	f47f af21 	bne.w	80045bc <_scanf_float+0x64>
 800477a:	2507      	movs	r5, #7
 800477c:	e7b2      	b.n	80046e4 <_scanf_float+0x18c>
 800477e:	6822      	ldr	r2, [r4, #0]
 8004780:	0591      	lsls	r1, r2, #22
 8004782:	f57f af1b 	bpl.w	80045bc <_scanf_float+0x64>
 8004786:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800478a:	6022      	str	r2, [r4, #0]
 800478c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004790:	e7a8      	b.n	80046e4 <_scanf_float+0x18c>
 8004792:	6822      	ldr	r2, [r4, #0]
 8004794:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004798:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800479c:	d006      	beq.n	80047ac <_scanf_float+0x254>
 800479e:	0550      	lsls	r0, r2, #21
 80047a0:	f57f af0c 	bpl.w	80045bc <_scanf_float+0x64>
 80047a4:	f1b9 0f00 	cmp.w	r9, #0
 80047a8:	f43f af0f 	beq.w	80045ca <_scanf_float+0x72>
 80047ac:	0591      	lsls	r1, r2, #22
 80047ae:	bf58      	it	pl
 80047b0:	9901      	ldrpl	r1, [sp, #4]
 80047b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80047b6:	bf58      	it	pl
 80047b8:	eba9 0101 	subpl.w	r1, r9, r1
 80047bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80047c0:	f04f 0900 	mov.w	r9, #0
 80047c4:	bf58      	it	pl
 80047c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80047ca:	6022      	str	r2, [r4, #0]
 80047cc:	e78a      	b.n	80046e4 <_scanf_float+0x18c>
 80047ce:	f04f 0a03 	mov.w	sl, #3
 80047d2:	e787      	b.n	80046e4 <_scanf_float+0x18c>
 80047d4:	4639      	mov	r1, r7
 80047d6:	4640      	mov	r0, r8
 80047d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047dc:	4798      	blx	r3
 80047de:	2800      	cmp	r0, #0
 80047e0:	f43f aedf 	beq.w	80045a2 <_scanf_float+0x4a>
 80047e4:	e6ea      	b.n	80045bc <_scanf_float+0x64>
 80047e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047ea:	463a      	mov	r2, r7
 80047ec:	4640      	mov	r0, r8
 80047ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047f2:	4798      	blx	r3
 80047f4:	6923      	ldr	r3, [r4, #16]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	6123      	str	r3, [r4, #16]
 80047fa:	e6ec      	b.n	80045d6 <_scanf_float+0x7e>
 80047fc:	1e6b      	subs	r3, r5, #1
 80047fe:	2b06      	cmp	r3, #6
 8004800:	d825      	bhi.n	800484e <_scanf_float+0x2f6>
 8004802:	2d02      	cmp	r5, #2
 8004804:	d836      	bhi.n	8004874 <_scanf_float+0x31c>
 8004806:	455e      	cmp	r6, fp
 8004808:	f67f aee8 	bls.w	80045dc <_scanf_float+0x84>
 800480c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004810:	463a      	mov	r2, r7
 8004812:	4640      	mov	r0, r8
 8004814:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004818:	4798      	blx	r3
 800481a:	6923      	ldr	r3, [r4, #16]
 800481c:	3b01      	subs	r3, #1
 800481e:	6123      	str	r3, [r4, #16]
 8004820:	e7f1      	b.n	8004806 <_scanf_float+0x2ae>
 8004822:	9802      	ldr	r0, [sp, #8]
 8004824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004828:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800482c:	463a      	mov	r2, r7
 800482e:	9002      	str	r0, [sp, #8]
 8004830:	4640      	mov	r0, r8
 8004832:	4798      	blx	r3
 8004834:	6923      	ldr	r3, [r4, #16]
 8004836:	3b01      	subs	r3, #1
 8004838:	6123      	str	r3, [r4, #16]
 800483a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800483e:	fa5f fa8a 	uxtb.w	sl, sl
 8004842:	f1ba 0f02 	cmp.w	sl, #2
 8004846:	d1ec      	bne.n	8004822 <_scanf_float+0x2ca>
 8004848:	3d03      	subs	r5, #3
 800484a:	b2ed      	uxtb	r5, r5
 800484c:	1b76      	subs	r6, r6, r5
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	05da      	lsls	r2, r3, #23
 8004852:	d52f      	bpl.n	80048b4 <_scanf_float+0x35c>
 8004854:	055b      	lsls	r3, r3, #21
 8004856:	d510      	bpl.n	800487a <_scanf_float+0x322>
 8004858:	455e      	cmp	r6, fp
 800485a:	f67f aebf 	bls.w	80045dc <_scanf_float+0x84>
 800485e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004862:	463a      	mov	r2, r7
 8004864:	4640      	mov	r0, r8
 8004866:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800486a:	4798      	blx	r3
 800486c:	6923      	ldr	r3, [r4, #16]
 800486e:	3b01      	subs	r3, #1
 8004870:	6123      	str	r3, [r4, #16]
 8004872:	e7f1      	b.n	8004858 <_scanf_float+0x300>
 8004874:	46aa      	mov	sl, r5
 8004876:	9602      	str	r6, [sp, #8]
 8004878:	e7df      	b.n	800483a <_scanf_float+0x2e2>
 800487a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800487e:	6923      	ldr	r3, [r4, #16]
 8004880:	2965      	cmp	r1, #101	; 0x65
 8004882:	f103 33ff 	add.w	r3, r3, #4294967295
 8004886:	f106 35ff 	add.w	r5, r6, #4294967295
 800488a:	6123      	str	r3, [r4, #16]
 800488c:	d00c      	beq.n	80048a8 <_scanf_float+0x350>
 800488e:	2945      	cmp	r1, #69	; 0x45
 8004890:	d00a      	beq.n	80048a8 <_scanf_float+0x350>
 8004892:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004896:	463a      	mov	r2, r7
 8004898:	4640      	mov	r0, r8
 800489a:	4798      	blx	r3
 800489c:	6923      	ldr	r3, [r4, #16]
 800489e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	1eb5      	subs	r5, r6, #2
 80048a6:	6123      	str	r3, [r4, #16]
 80048a8:	463a      	mov	r2, r7
 80048aa:	4640      	mov	r0, r8
 80048ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048b0:	4798      	blx	r3
 80048b2:	462e      	mov	r6, r5
 80048b4:	6825      	ldr	r5, [r4, #0]
 80048b6:	f015 0510 	ands.w	r5, r5, #16
 80048ba:	d155      	bne.n	8004968 <_scanf_float+0x410>
 80048bc:	7035      	strb	r5, [r6, #0]
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c8:	d11d      	bne.n	8004906 <_scanf_float+0x3ae>
 80048ca:	9b01      	ldr	r3, [sp, #4]
 80048cc:	454b      	cmp	r3, r9
 80048ce:	eba3 0209 	sub.w	r2, r3, r9
 80048d2:	d125      	bne.n	8004920 <_scanf_float+0x3c8>
 80048d4:	2200      	movs	r2, #0
 80048d6:	4659      	mov	r1, fp
 80048d8:	4640      	mov	r0, r8
 80048da:	f002 fc75 	bl	80071c8 <_strtod_r>
 80048de:	9b03      	ldr	r3, [sp, #12]
 80048e0:	f8d4 c000 	ldr.w	ip, [r4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f01c 0f02 	tst.w	ip, #2
 80048ea:	4606      	mov	r6, r0
 80048ec:	460f      	mov	r7, r1
 80048ee:	f103 0204 	add.w	r2, r3, #4
 80048f2:	d020      	beq.n	8004936 <_scanf_float+0x3de>
 80048f4:	9903      	ldr	r1, [sp, #12]
 80048f6:	600a      	str	r2, [r1, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	e9c3 6700 	strd	r6, r7, [r3]
 80048fe:	68e3      	ldr	r3, [r4, #12]
 8004900:	3301      	adds	r3, #1
 8004902:	60e3      	str	r3, [r4, #12]
 8004904:	e66b      	b.n	80045de <_scanf_float+0x86>
 8004906:	9b04      	ldr	r3, [sp, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0e3      	beq.n	80048d4 <_scanf_float+0x37c>
 800490c:	9905      	ldr	r1, [sp, #20]
 800490e:	230a      	movs	r3, #10
 8004910:	462a      	mov	r2, r5
 8004912:	4640      	mov	r0, r8
 8004914:	3101      	adds	r1, #1
 8004916:	f002 fcdb 	bl	80072d0 <_strtol_r>
 800491a:	9b04      	ldr	r3, [sp, #16]
 800491c:	9e05      	ldr	r6, [sp, #20]
 800491e:	1ac2      	subs	r2, r0, r3
 8004920:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004924:	429e      	cmp	r6, r3
 8004926:	bf28      	it	cs
 8004928:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800492c:	4630      	mov	r0, r6
 800492e:	490f      	ldr	r1, [pc, #60]	; (800496c <_scanf_float+0x414>)
 8004930:	f000 f928 	bl	8004b84 <siprintf>
 8004934:	e7ce      	b.n	80048d4 <_scanf_float+0x37c>
 8004936:	f01c 0f04 	tst.w	ip, #4
 800493a:	d1db      	bne.n	80048f4 <_scanf_float+0x39c>
 800493c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004940:	f8cc 2000 	str.w	r2, [ip]
 8004944:	f8d3 8000 	ldr.w	r8, [r3]
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	f7fc f86e 	bl	8000a2c <__aeabi_dcmpun>
 8004950:	b128      	cbz	r0, 800495e <_scanf_float+0x406>
 8004952:	4807      	ldr	r0, [pc, #28]	; (8004970 <_scanf_float+0x418>)
 8004954:	f000 fa16 	bl	8004d84 <nanf>
 8004958:	f8c8 0000 	str.w	r0, [r8]
 800495c:	e7cf      	b.n	80048fe <_scanf_float+0x3a6>
 800495e:	4630      	mov	r0, r6
 8004960:	4639      	mov	r1, r7
 8004962:	f7fc f8c1 	bl	8000ae8 <__aeabi_d2f>
 8004966:	e7f7      	b.n	8004958 <_scanf_float+0x400>
 8004968:	2500      	movs	r5, #0
 800496a:	e638      	b.n	80045de <_scanf_float+0x86>
 800496c:	08009cf4 	.word	0x08009cf4
 8004970:	0800a085 	.word	0x0800a085

08004974 <std>:
 8004974:	2300      	movs	r3, #0
 8004976:	b510      	push	{r4, lr}
 8004978:	4604      	mov	r4, r0
 800497a:	e9c0 3300 	strd	r3, r3, [r0]
 800497e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004982:	6083      	str	r3, [r0, #8]
 8004984:	8181      	strh	r1, [r0, #12]
 8004986:	6643      	str	r3, [r0, #100]	; 0x64
 8004988:	81c2      	strh	r2, [r0, #14]
 800498a:	6183      	str	r3, [r0, #24]
 800498c:	4619      	mov	r1, r3
 800498e:	2208      	movs	r2, #8
 8004990:	305c      	adds	r0, #92	; 0x5c
 8004992:	f000 f95a 	bl	8004c4a <memset>
 8004996:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <std+0x58>)
 8004998:	6224      	str	r4, [r4, #32]
 800499a:	6263      	str	r3, [r4, #36]	; 0x24
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <std+0x5c>)
 800499e:	62a3      	str	r3, [r4, #40]	; 0x28
 80049a0:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <std+0x60>)
 80049a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049a4:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <std+0x64>)
 80049a6:	6323      	str	r3, [r4, #48]	; 0x30
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <std+0x68>)
 80049aa:	429c      	cmp	r4, r3
 80049ac:	d006      	beq.n	80049bc <std+0x48>
 80049ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80049b2:	4294      	cmp	r4, r2
 80049b4:	d002      	beq.n	80049bc <std+0x48>
 80049b6:	33d0      	adds	r3, #208	; 0xd0
 80049b8:	429c      	cmp	r4, r3
 80049ba:	d105      	bne.n	80049c8 <std+0x54>
 80049bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049c4:	f000 b9be 	b.w	8004d44 <__retarget_lock_init_recursive>
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	bf00      	nop
 80049cc:	08004bc5 	.word	0x08004bc5
 80049d0:	08004be7 	.word	0x08004be7
 80049d4:	08004c1f 	.word	0x08004c1f
 80049d8:	08004c43 	.word	0x08004c43
 80049dc:	200002f8 	.word	0x200002f8

080049e0 <stdio_exit_handler>:
 80049e0:	4a02      	ldr	r2, [pc, #8]	; (80049ec <stdio_exit_handler+0xc>)
 80049e2:	4903      	ldr	r1, [pc, #12]	; (80049f0 <stdio_exit_handler+0x10>)
 80049e4:	4803      	ldr	r0, [pc, #12]	; (80049f4 <stdio_exit_handler+0x14>)
 80049e6:	f000 b869 	b.w	8004abc <_fwalk_sglue>
 80049ea:	bf00      	nop
 80049ec:	2000001c 	.word	0x2000001c
 80049f0:	0800790d 	.word	0x0800790d
 80049f4:	20000028 	.word	0x20000028

080049f8 <cleanup_stdio>:
 80049f8:	6841      	ldr	r1, [r0, #4]
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <cleanup_stdio+0x34>)
 80049fc:	b510      	push	{r4, lr}
 80049fe:	4299      	cmp	r1, r3
 8004a00:	4604      	mov	r4, r0
 8004a02:	d001      	beq.n	8004a08 <cleanup_stdio+0x10>
 8004a04:	f002 ff82 	bl	800790c <_fflush_r>
 8004a08:	68a1      	ldr	r1, [r4, #8]
 8004a0a:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <cleanup_stdio+0x38>)
 8004a0c:	4299      	cmp	r1, r3
 8004a0e:	d002      	beq.n	8004a16 <cleanup_stdio+0x1e>
 8004a10:	4620      	mov	r0, r4
 8004a12:	f002 ff7b 	bl	800790c <_fflush_r>
 8004a16:	68e1      	ldr	r1, [r4, #12]
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <cleanup_stdio+0x3c>)
 8004a1a:	4299      	cmp	r1, r3
 8004a1c:	d004      	beq.n	8004a28 <cleanup_stdio+0x30>
 8004a1e:	4620      	mov	r0, r4
 8004a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a24:	f002 bf72 	b.w	800790c <_fflush_r>
 8004a28:	bd10      	pop	{r4, pc}
 8004a2a:	bf00      	nop
 8004a2c:	200002f8 	.word	0x200002f8
 8004a30:	20000360 	.word	0x20000360
 8004a34:	200003c8 	.word	0x200003c8

08004a38 <global_stdio_init.part.0>:
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <global_stdio_init.part.0+0x30>)
 8004a3c:	4c0b      	ldr	r4, [pc, #44]	; (8004a6c <global_stdio_init.part.0+0x34>)
 8004a3e:	4a0c      	ldr	r2, [pc, #48]	; (8004a70 <global_stdio_init.part.0+0x38>)
 8004a40:	4620      	mov	r0, r4
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	2104      	movs	r1, #4
 8004a46:	2200      	movs	r2, #0
 8004a48:	f7ff ff94 	bl	8004974 <std>
 8004a4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a50:	2201      	movs	r2, #1
 8004a52:	2109      	movs	r1, #9
 8004a54:	f7ff ff8e 	bl	8004974 <std>
 8004a58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a62:	2112      	movs	r1, #18
 8004a64:	f7ff bf86 	b.w	8004974 <std>
 8004a68:	20000430 	.word	0x20000430
 8004a6c:	200002f8 	.word	0x200002f8
 8004a70:	080049e1 	.word	0x080049e1

08004a74 <__sfp_lock_acquire>:
 8004a74:	4801      	ldr	r0, [pc, #4]	; (8004a7c <__sfp_lock_acquire+0x8>)
 8004a76:	f000 b966 	b.w	8004d46 <__retarget_lock_acquire_recursive>
 8004a7a:	bf00      	nop
 8004a7c:	20000439 	.word	0x20000439

08004a80 <__sfp_lock_release>:
 8004a80:	4801      	ldr	r0, [pc, #4]	; (8004a88 <__sfp_lock_release+0x8>)
 8004a82:	f000 b961 	b.w	8004d48 <__retarget_lock_release_recursive>
 8004a86:	bf00      	nop
 8004a88:	20000439 	.word	0x20000439

08004a8c <__sinit>:
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	4604      	mov	r4, r0
 8004a90:	f7ff fff0 	bl	8004a74 <__sfp_lock_acquire>
 8004a94:	6a23      	ldr	r3, [r4, #32]
 8004a96:	b11b      	cbz	r3, 8004aa0 <__sinit+0x14>
 8004a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a9c:	f7ff bff0 	b.w	8004a80 <__sfp_lock_release>
 8004aa0:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <__sinit+0x28>)
 8004aa2:	6223      	str	r3, [r4, #32]
 8004aa4:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <__sinit+0x2c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f5      	bne.n	8004a98 <__sinit+0xc>
 8004aac:	f7ff ffc4 	bl	8004a38 <global_stdio_init.part.0>
 8004ab0:	e7f2      	b.n	8004a98 <__sinit+0xc>
 8004ab2:	bf00      	nop
 8004ab4:	080049f9 	.word	0x080049f9
 8004ab8:	20000430 	.word	0x20000430

08004abc <_fwalk_sglue>:
 8004abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac0:	4607      	mov	r7, r0
 8004ac2:	4688      	mov	r8, r1
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	2600      	movs	r6, #0
 8004ac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004acc:	f1b9 0901 	subs.w	r9, r9, #1
 8004ad0:	d505      	bpl.n	8004ade <_fwalk_sglue+0x22>
 8004ad2:	6824      	ldr	r4, [r4, #0]
 8004ad4:	2c00      	cmp	r4, #0
 8004ad6:	d1f7      	bne.n	8004ac8 <_fwalk_sglue+0xc>
 8004ad8:	4630      	mov	r0, r6
 8004ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ade:	89ab      	ldrh	r3, [r5, #12]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d907      	bls.n	8004af4 <_fwalk_sglue+0x38>
 8004ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	d003      	beq.n	8004af4 <_fwalk_sglue+0x38>
 8004aec:	4629      	mov	r1, r5
 8004aee:	4638      	mov	r0, r7
 8004af0:	47c0      	blx	r8
 8004af2:	4306      	orrs	r6, r0
 8004af4:	3568      	adds	r5, #104	; 0x68
 8004af6:	e7e9      	b.n	8004acc <_fwalk_sglue+0x10>

08004af8 <iprintf>:
 8004af8:	b40f      	push	{r0, r1, r2, r3}
 8004afa:	b507      	push	{r0, r1, r2, lr}
 8004afc:	4906      	ldr	r1, [pc, #24]	; (8004b18 <iprintf+0x20>)
 8004afe:	ab04      	add	r3, sp, #16
 8004b00:	6808      	ldr	r0, [r1, #0]
 8004b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b06:	6881      	ldr	r1, [r0, #8]
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	f002 fd63 	bl	80075d4 <_vfiprintf_r>
 8004b0e:	b003      	add	sp, #12
 8004b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b14:	b004      	add	sp, #16
 8004b16:	4770      	bx	lr
 8004b18:	20000074 	.word	0x20000074

08004b1c <sniprintf>:
 8004b1c:	b40c      	push	{r2, r3}
 8004b1e:	b530      	push	{r4, r5, lr}
 8004b20:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <sniprintf+0x64>)
 8004b22:	1e0c      	subs	r4, r1, #0
 8004b24:	681d      	ldr	r5, [r3, #0]
 8004b26:	b09d      	sub	sp, #116	; 0x74
 8004b28:	da08      	bge.n	8004b3c <sniprintf+0x20>
 8004b2a:	238b      	movs	r3, #139	; 0x8b
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	602b      	str	r3, [r5, #0]
 8004b32:	b01d      	add	sp, #116	; 0x74
 8004b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b38:	b002      	add	sp, #8
 8004b3a:	4770      	bx	lr
 8004b3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004b40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004b44:	bf0c      	ite	eq
 8004b46:	4623      	moveq	r3, r4
 8004b48:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	9307      	str	r3, [sp, #28]
 8004b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b54:	9002      	str	r0, [sp, #8]
 8004b56:	9006      	str	r0, [sp, #24]
 8004b58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	ab21      	add	r3, sp, #132	; 0x84
 8004b60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b62:	a902      	add	r1, sp, #8
 8004b64:	9301      	str	r3, [sp, #4]
 8004b66:	f002 fc0f 	bl	8007388 <_svfiprintf_r>
 8004b6a:	1c43      	adds	r3, r0, #1
 8004b6c:	bfbc      	itt	lt
 8004b6e:	238b      	movlt	r3, #139	; 0x8b
 8004b70:	602b      	strlt	r3, [r5, #0]
 8004b72:	2c00      	cmp	r4, #0
 8004b74:	d0dd      	beq.n	8004b32 <sniprintf+0x16>
 8004b76:	2200      	movs	r2, #0
 8004b78:	9b02      	ldr	r3, [sp, #8]
 8004b7a:	701a      	strb	r2, [r3, #0]
 8004b7c:	e7d9      	b.n	8004b32 <sniprintf+0x16>
 8004b7e:	bf00      	nop
 8004b80:	20000074 	.word	0x20000074

08004b84 <siprintf>:
 8004b84:	b40e      	push	{r1, r2, r3}
 8004b86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b8a:	b500      	push	{lr}
 8004b8c:	b09c      	sub	sp, #112	; 0x70
 8004b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b90:	9002      	str	r0, [sp, #8]
 8004b92:	9006      	str	r0, [sp, #24]
 8004b94:	9107      	str	r1, [sp, #28]
 8004b96:	9104      	str	r1, [sp, #16]
 8004b98:	4808      	ldr	r0, [pc, #32]	; (8004bbc <siprintf+0x38>)
 8004b9a:	4909      	ldr	r1, [pc, #36]	; (8004bc0 <siprintf+0x3c>)
 8004b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ba0:	9105      	str	r1, [sp, #20]
 8004ba2:	6800      	ldr	r0, [r0, #0]
 8004ba4:	a902      	add	r1, sp, #8
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	f002 fbee 	bl	8007388 <_svfiprintf_r>
 8004bac:	2200      	movs	r2, #0
 8004bae:	9b02      	ldr	r3, [sp, #8]
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	b01c      	add	sp, #112	; 0x70
 8004bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bb8:	b003      	add	sp, #12
 8004bba:	4770      	bx	lr
 8004bbc:	20000074 	.word	0x20000074
 8004bc0:	ffff0208 	.word	0xffff0208

08004bc4 <__sread>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bcc:	f000 f86c 	bl	8004ca8 <_read_r>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	bfab      	itete	ge
 8004bd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8004bd8:	181b      	addge	r3, r3, r0
 8004bda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bde:	bfac      	ite	ge
 8004be0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004be2:	81a3      	strhlt	r3, [r4, #12]
 8004be4:	bd10      	pop	{r4, pc}

08004be6 <__swrite>:
 8004be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bea:	461f      	mov	r7, r3
 8004bec:	898b      	ldrh	r3, [r1, #12]
 8004bee:	4605      	mov	r5, r0
 8004bf0:	05db      	lsls	r3, r3, #23
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	4616      	mov	r6, r2
 8004bf6:	d505      	bpl.n	8004c04 <__swrite+0x1e>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c00:	f000 f840 	bl	8004c84 <_lseek_r>
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	4632      	mov	r2, r6
 8004c08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	4628      	mov	r0, r5
 8004c10:	463b      	mov	r3, r7
 8004c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1a:	f000 b857 	b.w	8004ccc <_write_r>

08004c1e <__sseek>:
 8004c1e:	b510      	push	{r4, lr}
 8004c20:	460c      	mov	r4, r1
 8004c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c26:	f000 f82d 	bl	8004c84 <_lseek_r>
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	bf15      	itete	ne
 8004c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c3a:	81a3      	strheq	r3, [r4, #12]
 8004c3c:	bf18      	it	ne
 8004c3e:	81a3      	strhne	r3, [r4, #12]
 8004c40:	bd10      	pop	{r4, pc}

08004c42 <__sclose>:
 8004c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c46:	f000 b80d 	b.w	8004c64 <_close_r>

08004c4a <memset>:
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4402      	add	r2, r0
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d100      	bne.n	8004c54 <memset+0xa>
 8004c52:	4770      	bx	lr
 8004c54:	f803 1b01 	strb.w	r1, [r3], #1
 8004c58:	e7f9      	b.n	8004c4e <memset+0x4>
	...

08004c5c <_localeconv_r>:
 8004c5c:	4800      	ldr	r0, [pc, #0]	; (8004c60 <_localeconv_r+0x4>)
 8004c5e:	4770      	bx	lr
 8004c60:	20000168 	.word	0x20000168

08004c64 <_close_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	2300      	movs	r3, #0
 8004c68:	4d05      	ldr	r5, [pc, #20]	; (8004c80 <_close_r+0x1c>)
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	602b      	str	r3, [r5, #0]
 8004c70:	f7fe fd5a 	bl	8003728 <_close>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_close_r+0x1a>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_close_r+0x1a>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	20000434 	.word	0x20000434

08004c84 <_lseek_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4604      	mov	r4, r0
 8004c88:	4608      	mov	r0, r1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	4d05      	ldr	r5, [pc, #20]	; (8004ca4 <_lseek_r+0x20>)
 8004c90:	602a      	str	r2, [r5, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	f7fe fd6c 	bl	8003770 <_lseek>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d102      	bne.n	8004ca2 <_lseek_r+0x1e>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	b103      	cbz	r3, 8004ca2 <_lseek_r+0x1e>
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	20000434 	.word	0x20000434

08004ca8 <_read_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4604      	mov	r4, r0
 8004cac:	4608      	mov	r0, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4d05      	ldr	r5, [pc, #20]	; (8004cc8 <_read_r+0x20>)
 8004cb4:	602a      	str	r2, [r5, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f7fe fd19 	bl	80036ee <_read>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_read_r+0x1e>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_read_r+0x1e>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	20000434 	.word	0x20000434

08004ccc <_write_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	4d05      	ldr	r5, [pc, #20]	; (8004cec <_write_r+0x20>)
 8004cd8:	602a      	str	r2, [r5, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f7fe ff8e 	bl	8003bfc <_write>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_write_r+0x1e>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_write_r+0x1e>
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	20000434 	.word	0x20000434

08004cf0 <__errno>:
 8004cf0:	4b01      	ldr	r3, [pc, #4]	; (8004cf8 <__errno+0x8>)
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000074 	.word	0x20000074

08004cfc <__libc_init_array>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	2600      	movs	r6, #0
 8004d00:	4d0c      	ldr	r5, [pc, #48]	; (8004d34 <__libc_init_array+0x38>)
 8004d02:	4c0d      	ldr	r4, [pc, #52]	; (8004d38 <__libc_init_array+0x3c>)
 8004d04:	1b64      	subs	r4, r4, r5
 8004d06:	10a4      	asrs	r4, r4, #2
 8004d08:	42a6      	cmp	r6, r4
 8004d0a:	d109      	bne.n	8004d20 <__libc_init_array+0x24>
 8004d0c:	f004 fb6e 	bl	80093ec <_init>
 8004d10:	2600      	movs	r6, #0
 8004d12:	4d0a      	ldr	r5, [pc, #40]	; (8004d3c <__libc_init_array+0x40>)
 8004d14:	4c0a      	ldr	r4, [pc, #40]	; (8004d40 <__libc_init_array+0x44>)
 8004d16:	1b64      	subs	r4, r4, r5
 8004d18:	10a4      	asrs	r4, r4, #2
 8004d1a:	42a6      	cmp	r6, r4
 8004d1c:	d105      	bne.n	8004d2a <__libc_init_array+0x2e>
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d24:	4798      	blx	r3
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7ee      	b.n	8004d08 <__libc_init_array+0xc>
 8004d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2e:	4798      	blx	r3
 8004d30:	3601      	adds	r6, #1
 8004d32:	e7f2      	b.n	8004d1a <__libc_init_array+0x1e>
 8004d34:	0800a118 	.word	0x0800a118
 8004d38:	0800a118 	.word	0x0800a118
 8004d3c:	0800a118 	.word	0x0800a118
 8004d40:	0800a11c 	.word	0x0800a11c

08004d44 <__retarget_lock_init_recursive>:
 8004d44:	4770      	bx	lr

08004d46 <__retarget_lock_acquire_recursive>:
 8004d46:	4770      	bx	lr

08004d48 <__retarget_lock_release_recursive>:
 8004d48:	4770      	bx	lr

08004d4a <memchr>:
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	b510      	push	{r4, lr}
 8004d4e:	b2c9      	uxtb	r1, r1
 8004d50:	4402      	add	r2, r0
 8004d52:	4293      	cmp	r3, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	d101      	bne.n	8004d5c <memchr+0x12>
 8004d58:	2000      	movs	r0, #0
 8004d5a:	e003      	b.n	8004d64 <memchr+0x1a>
 8004d5c:	7804      	ldrb	r4, [r0, #0]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	428c      	cmp	r4, r1
 8004d62:	d1f6      	bne.n	8004d52 <memchr+0x8>
 8004d64:	bd10      	pop	{r4, pc}

08004d66 <memcpy>:
 8004d66:	440a      	add	r2, r1
 8004d68:	4291      	cmp	r1, r2
 8004d6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d6e:	d100      	bne.n	8004d72 <memcpy+0xc>
 8004d70:	4770      	bx	lr
 8004d72:	b510      	push	{r4, lr}
 8004d74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d78:	4291      	cmp	r1, r2
 8004d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d7e:	d1f9      	bne.n	8004d74 <memcpy+0xe>
 8004d80:	bd10      	pop	{r4, pc}
	...

08004d84 <nanf>:
 8004d84:	4800      	ldr	r0, [pc, #0]	; (8004d88 <nanf+0x4>)
 8004d86:	4770      	bx	lr
 8004d88:	7fc00000 	.word	0x7fc00000

08004d8c <quorem>:
 8004d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d90:	6903      	ldr	r3, [r0, #16]
 8004d92:	690c      	ldr	r4, [r1, #16]
 8004d94:	4607      	mov	r7, r0
 8004d96:	42a3      	cmp	r3, r4
 8004d98:	db7f      	blt.n	8004e9a <quorem+0x10e>
 8004d9a:	3c01      	subs	r4, #1
 8004d9c:	f100 0514 	add.w	r5, r0, #20
 8004da0:	f101 0814 	add.w	r8, r1, #20
 8004da4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004da8:	9301      	str	r3, [sp, #4]
 8004daa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004dae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004db2:	3301      	adds	r3, #1
 8004db4:	429a      	cmp	r2, r3
 8004db6:	fbb2 f6f3 	udiv	r6, r2, r3
 8004dba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004dbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004dc2:	d331      	bcc.n	8004e28 <quorem+0x9c>
 8004dc4:	f04f 0e00 	mov.w	lr, #0
 8004dc8:	4640      	mov	r0, r8
 8004dca:	46ac      	mov	ip, r5
 8004dcc:	46f2      	mov	sl, lr
 8004dce:	f850 2b04 	ldr.w	r2, [r0], #4
 8004dd2:	b293      	uxth	r3, r2
 8004dd4:	fb06 e303 	mla	r3, r6, r3, lr
 8004dd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ddc:	0c1a      	lsrs	r2, r3, #16
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	fb06 220e 	mla	r2, r6, lr, r2
 8004de4:	ebaa 0303 	sub.w	r3, sl, r3
 8004de8:	f8dc a000 	ldr.w	sl, [ip]
 8004dec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004df0:	fa1f fa8a 	uxth.w	sl, sl
 8004df4:	4453      	add	r3, sl
 8004df6:	f8dc a000 	ldr.w	sl, [ip]
 8004dfa:	b292      	uxth	r2, r2
 8004dfc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e0a:	4581      	cmp	r9, r0
 8004e0c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e10:	f84c 3b04 	str.w	r3, [ip], #4
 8004e14:	d2db      	bcs.n	8004dce <quorem+0x42>
 8004e16:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e1a:	b92b      	cbnz	r3, 8004e28 <quorem+0x9c>
 8004e1c:	9b01      	ldr	r3, [sp, #4]
 8004e1e:	3b04      	subs	r3, #4
 8004e20:	429d      	cmp	r5, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	d32d      	bcc.n	8004e82 <quorem+0xf6>
 8004e26:	613c      	str	r4, [r7, #16]
 8004e28:	4638      	mov	r0, r7
 8004e2a:	f001 f9dd 	bl	80061e8 <__mcmp>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	db23      	blt.n	8004e7a <quorem+0xee>
 8004e32:	4629      	mov	r1, r5
 8004e34:	2000      	movs	r0, #0
 8004e36:	3601      	adds	r6, #1
 8004e38:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e3c:	f8d1 c000 	ldr.w	ip, [r1]
 8004e40:	b293      	uxth	r3, r2
 8004e42:	1ac3      	subs	r3, r0, r3
 8004e44:	0c12      	lsrs	r2, r2, #16
 8004e46:	fa1f f08c 	uxth.w	r0, ip
 8004e4a:	4403      	add	r3, r0
 8004e4c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e5a:	45c1      	cmp	r9, r8
 8004e5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e60:	f841 3b04 	str.w	r3, [r1], #4
 8004e64:	d2e8      	bcs.n	8004e38 <quorem+0xac>
 8004e66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e6e:	b922      	cbnz	r2, 8004e7a <quorem+0xee>
 8004e70:	3b04      	subs	r3, #4
 8004e72:	429d      	cmp	r5, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	d30a      	bcc.n	8004e8e <quorem+0x102>
 8004e78:	613c      	str	r4, [r7, #16]
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	b003      	add	sp, #12
 8004e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	3b04      	subs	r3, #4
 8004e86:	2a00      	cmp	r2, #0
 8004e88:	d1cd      	bne.n	8004e26 <quorem+0x9a>
 8004e8a:	3c01      	subs	r4, #1
 8004e8c:	e7c8      	b.n	8004e20 <quorem+0x94>
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	3b04      	subs	r3, #4
 8004e92:	2a00      	cmp	r2, #0
 8004e94:	d1f0      	bne.n	8004e78 <quorem+0xec>
 8004e96:	3c01      	subs	r4, #1
 8004e98:	e7eb      	b.n	8004e72 <quorem+0xe6>
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	e7ee      	b.n	8004e7c <quorem+0xf0>
	...

08004ea0 <_dtoa_r>:
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	461f      	mov	r7, r3
 8004ea8:	69c4      	ldr	r4, [r0, #28]
 8004eaa:	b099      	sub	sp, #100	; 0x64
 8004eac:	4605      	mov	r5, r0
 8004eae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004eb2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004eb6:	b974      	cbnz	r4, 8004ed6 <_dtoa_r+0x36>
 8004eb8:	2010      	movs	r0, #16
 8004eba:	f000 fe1d 	bl	8005af8 <malloc>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	61e8      	str	r0, [r5, #28]
 8004ec2:	b920      	cbnz	r0, 8004ece <_dtoa_r+0x2e>
 8004ec4:	21ef      	movs	r1, #239	; 0xef
 8004ec6:	4bac      	ldr	r3, [pc, #688]	; (8005178 <_dtoa_r+0x2d8>)
 8004ec8:	48ac      	ldr	r0, [pc, #688]	; (800517c <_dtoa_r+0x2dc>)
 8004eca:	f002 fe1f 	bl	8007b0c <__assert_func>
 8004ece:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ed2:	6004      	str	r4, [r0, #0]
 8004ed4:	60c4      	str	r4, [r0, #12]
 8004ed6:	69eb      	ldr	r3, [r5, #28]
 8004ed8:	6819      	ldr	r1, [r3, #0]
 8004eda:	b151      	cbz	r1, 8004ef2 <_dtoa_r+0x52>
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4093      	lsls	r3, r2
 8004ee2:	604a      	str	r2, [r1, #4]
 8004ee4:	608b      	str	r3, [r1, #8]
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 fefa 	bl	8005ce0 <_Bfree>
 8004eec:	2200      	movs	r2, #0
 8004eee:	69eb      	ldr	r3, [r5, #28]
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	1e3b      	subs	r3, r7, #0
 8004ef4:	bfaf      	iteee	ge
 8004ef6:	2300      	movge	r3, #0
 8004ef8:	2201      	movlt	r2, #1
 8004efa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004efe:	9305      	strlt	r3, [sp, #20]
 8004f00:	bfa8      	it	ge
 8004f02:	f8c8 3000 	strge.w	r3, [r8]
 8004f06:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004f0a:	4b9d      	ldr	r3, [pc, #628]	; (8005180 <_dtoa_r+0x2e0>)
 8004f0c:	bfb8      	it	lt
 8004f0e:	f8c8 2000 	strlt.w	r2, [r8]
 8004f12:	ea33 0309 	bics.w	r3, r3, r9
 8004f16:	d119      	bne.n	8004f4c <_dtoa_r+0xac>
 8004f18:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f24:	4333      	orrs	r3, r6
 8004f26:	f000 8589 	beq.w	8005a3c <_dtoa_r+0xb9c>
 8004f2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f2c:	b953      	cbnz	r3, 8004f44 <_dtoa_r+0xa4>
 8004f2e:	4b95      	ldr	r3, [pc, #596]	; (8005184 <_dtoa_r+0x2e4>)
 8004f30:	e023      	b.n	8004f7a <_dtoa_r+0xda>
 8004f32:	4b95      	ldr	r3, [pc, #596]	; (8005188 <_dtoa_r+0x2e8>)
 8004f34:	9303      	str	r3, [sp, #12]
 8004f36:	3308      	adds	r3, #8
 8004f38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	9803      	ldr	r0, [sp, #12]
 8004f3e:	b019      	add	sp, #100	; 0x64
 8004f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f44:	4b8f      	ldr	r3, [pc, #572]	; (8005184 <_dtoa_r+0x2e4>)
 8004f46:	9303      	str	r3, [sp, #12]
 8004f48:	3303      	adds	r3, #3
 8004f4a:	e7f5      	b.n	8004f38 <_dtoa_r+0x98>
 8004f4c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f50:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004f54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f7fb fd34 	bl	80009c8 <__aeabi_dcmpeq>
 8004f60:	4680      	mov	r8, r0
 8004f62:	b160      	cbz	r0, 8004f7e <_dtoa_r+0xde>
 8004f64:	2301      	movs	r3, #1
 8004f66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8562 	beq.w	8005a36 <_dtoa_r+0xb96>
 8004f72:	4b86      	ldr	r3, [pc, #536]	; (800518c <_dtoa_r+0x2ec>)
 8004f74:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	9303      	str	r3, [sp, #12]
 8004f7c:	e7de      	b.n	8004f3c <_dtoa_r+0x9c>
 8004f7e:	ab16      	add	r3, sp, #88	; 0x58
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	ab17      	add	r3, sp, #92	; 0x5c
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	4628      	mov	r0, r5
 8004f88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f8c:	f001 fa3c 	bl	8006408 <__d2b>
 8004f90:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f94:	4682      	mov	sl, r0
 8004f96:	2c00      	cmp	r4, #0
 8004f98:	d07e      	beq.n	8005098 <_dtoa_r+0x1f8>
 8004f9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fa0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fa8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004fac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004fb0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	4b75      	ldr	r3, [pc, #468]	; (8005190 <_dtoa_r+0x2f0>)
 8004fba:	f7fb f8e5 	bl	8000188 <__aeabi_dsub>
 8004fbe:	a368      	add	r3, pc, #416	; (adr r3, 8005160 <_dtoa_r+0x2c0>)
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f7fb fa98 	bl	80004f8 <__aeabi_dmul>
 8004fc8:	a367      	add	r3, pc, #412	; (adr r3, 8005168 <_dtoa_r+0x2c8>)
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	f7fb f8dd 	bl	800018c <__adddf3>
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	460f      	mov	r7, r1
 8004fd8:	f7fb fa24 	bl	8000424 <__aeabi_i2d>
 8004fdc:	a364      	add	r3, pc, #400	; (adr r3, 8005170 <_dtoa_r+0x2d0>)
 8004fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe2:	f7fb fa89 	bl	80004f8 <__aeabi_dmul>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4630      	mov	r0, r6
 8004fec:	4639      	mov	r1, r7
 8004fee:	f7fb f8cd 	bl	800018c <__adddf3>
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	460f      	mov	r7, r1
 8004ff6:	f7fb fd2f 	bl	8000a58 <__aeabi_d2iz>
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	4683      	mov	fp, r0
 8004ffe:	2300      	movs	r3, #0
 8005000:	4630      	mov	r0, r6
 8005002:	4639      	mov	r1, r7
 8005004:	f7fb fcea 	bl	80009dc <__aeabi_dcmplt>
 8005008:	b148      	cbz	r0, 800501e <_dtoa_r+0x17e>
 800500a:	4658      	mov	r0, fp
 800500c:	f7fb fa0a 	bl	8000424 <__aeabi_i2d>
 8005010:	4632      	mov	r2, r6
 8005012:	463b      	mov	r3, r7
 8005014:	f7fb fcd8 	bl	80009c8 <__aeabi_dcmpeq>
 8005018:	b908      	cbnz	r0, 800501e <_dtoa_r+0x17e>
 800501a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800501e:	f1bb 0f16 	cmp.w	fp, #22
 8005022:	d857      	bhi.n	80050d4 <_dtoa_r+0x234>
 8005024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005028:	4b5a      	ldr	r3, [pc, #360]	; (8005194 <_dtoa_r+0x2f4>)
 800502a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f7fb fcd3 	bl	80009dc <__aeabi_dcmplt>
 8005036:	2800      	cmp	r0, #0
 8005038:	d04e      	beq.n	80050d8 <_dtoa_r+0x238>
 800503a:	2300      	movs	r3, #0
 800503c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005040:	930f      	str	r3, [sp, #60]	; 0x3c
 8005042:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005044:	1b1b      	subs	r3, r3, r4
 8005046:	1e5a      	subs	r2, r3, #1
 8005048:	bf46      	itte	mi
 800504a:	f1c3 0901 	rsbmi	r9, r3, #1
 800504e:	2300      	movmi	r3, #0
 8005050:	f04f 0900 	movpl.w	r9, #0
 8005054:	9209      	str	r2, [sp, #36]	; 0x24
 8005056:	bf48      	it	mi
 8005058:	9309      	strmi	r3, [sp, #36]	; 0x24
 800505a:	f1bb 0f00 	cmp.w	fp, #0
 800505e:	db3d      	blt.n	80050dc <_dtoa_r+0x23c>
 8005060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005062:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005066:	445b      	add	r3, fp
 8005068:	9309      	str	r3, [sp, #36]	; 0x24
 800506a:	2300      	movs	r3, #0
 800506c:	930a      	str	r3, [sp, #40]	; 0x28
 800506e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005070:	2b09      	cmp	r3, #9
 8005072:	d867      	bhi.n	8005144 <_dtoa_r+0x2a4>
 8005074:	2b05      	cmp	r3, #5
 8005076:	bfc4      	itt	gt
 8005078:	3b04      	subgt	r3, #4
 800507a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800507c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800507e:	bfc8      	it	gt
 8005080:	2400      	movgt	r4, #0
 8005082:	f1a3 0302 	sub.w	r3, r3, #2
 8005086:	bfd8      	it	le
 8005088:	2401      	movle	r4, #1
 800508a:	2b03      	cmp	r3, #3
 800508c:	f200 8086 	bhi.w	800519c <_dtoa_r+0x2fc>
 8005090:	e8df f003 	tbb	[pc, r3]
 8005094:	5637392c 	.word	0x5637392c
 8005098:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800509c:	441c      	add	r4, r3
 800509e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	bfc1      	itttt	gt
 80050a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80050aa:	fa09 f903 	lslgt.w	r9, r9, r3
 80050ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80050b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80050b6:	bfd6      	itet	le
 80050b8:	f1c3 0320 	rsble	r3, r3, #32
 80050bc:	ea49 0003 	orrgt.w	r0, r9, r3
 80050c0:	fa06 f003 	lslle.w	r0, r6, r3
 80050c4:	f7fb f99e 	bl	8000404 <__aeabi_ui2d>
 80050c8:	2201      	movs	r2, #1
 80050ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80050ce:	3c01      	subs	r4, #1
 80050d0:	9213      	str	r2, [sp, #76]	; 0x4c
 80050d2:	e76f      	b.n	8004fb4 <_dtoa_r+0x114>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e7b3      	b.n	8005040 <_dtoa_r+0x1a0>
 80050d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80050da:	e7b2      	b.n	8005042 <_dtoa_r+0x1a2>
 80050dc:	f1cb 0300 	rsb	r3, fp, #0
 80050e0:	930a      	str	r3, [sp, #40]	; 0x28
 80050e2:	2300      	movs	r3, #0
 80050e4:	eba9 090b 	sub.w	r9, r9, fp
 80050e8:	930e      	str	r3, [sp, #56]	; 0x38
 80050ea:	e7c0      	b.n	800506e <_dtoa_r+0x1ce>
 80050ec:	2300      	movs	r3, #0
 80050ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80050f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	dc55      	bgt.n	80051a2 <_dtoa_r+0x302>
 80050f6:	2301      	movs	r3, #1
 80050f8:	461a      	mov	r2, r3
 80050fa:	9306      	str	r3, [sp, #24]
 80050fc:	9308      	str	r3, [sp, #32]
 80050fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8005100:	e00b      	b.n	800511a <_dtoa_r+0x27a>
 8005102:	2301      	movs	r3, #1
 8005104:	e7f3      	b.n	80050ee <_dtoa_r+0x24e>
 8005106:	2300      	movs	r3, #0
 8005108:	930b      	str	r3, [sp, #44]	; 0x2c
 800510a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800510c:	445b      	add	r3, fp
 800510e:	9306      	str	r3, [sp, #24]
 8005110:	3301      	adds	r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	9308      	str	r3, [sp, #32]
 8005116:	bfb8      	it	lt
 8005118:	2301      	movlt	r3, #1
 800511a:	2100      	movs	r1, #0
 800511c:	2204      	movs	r2, #4
 800511e:	69e8      	ldr	r0, [r5, #28]
 8005120:	f102 0614 	add.w	r6, r2, #20
 8005124:	429e      	cmp	r6, r3
 8005126:	d940      	bls.n	80051aa <_dtoa_r+0x30a>
 8005128:	6041      	str	r1, [r0, #4]
 800512a:	4628      	mov	r0, r5
 800512c:	f000 fd98 	bl	8005c60 <_Balloc>
 8005130:	9003      	str	r0, [sp, #12]
 8005132:	2800      	cmp	r0, #0
 8005134:	d13c      	bne.n	80051b0 <_dtoa_r+0x310>
 8005136:	4602      	mov	r2, r0
 8005138:	f240 11af 	movw	r1, #431	; 0x1af
 800513c:	4b16      	ldr	r3, [pc, #88]	; (8005198 <_dtoa_r+0x2f8>)
 800513e:	e6c3      	b.n	8004ec8 <_dtoa_r+0x28>
 8005140:	2301      	movs	r3, #1
 8005142:	e7e1      	b.n	8005108 <_dtoa_r+0x268>
 8005144:	2401      	movs	r4, #1
 8005146:	2300      	movs	r3, #0
 8005148:	940b      	str	r4, [sp, #44]	; 0x2c
 800514a:	9322      	str	r3, [sp, #136]	; 0x88
 800514c:	f04f 33ff 	mov.w	r3, #4294967295
 8005150:	2200      	movs	r2, #0
 8005152:	9306      	str	r3, [sp, #24]
 8005154:	9308      	str	r3, [sp, #32]
 8005156:	2312      	movs	r3, #18
 8005158:	e7d1      	b.n	80050fe <_dtoa_r+0x25e>
 800515a:	bf00      	nop
 800515c:	f3af 8000 	nop.w
 8005160:	636f4361 	.word	0x636f4361
 8005164:	3fd287a7 	.word	0x3fd287a7
 8005168:	8b60c8b3 	.word	0x8b60c8b3
 800516c:	3fc68a28 	.word	0x3fc68a28
 8005170:	509f79fb 	.word	0x509f79fb
 8005174:	3fd34413 	.word	0x3fd34413
 8005178:	08009d06 	.word	0x08009d06
 800517c:	08009d1d 	.word	0x08009d1d
 8005180:	7ff00000 	.word	0x7ff00000
 8005184:	08009d02 	.word	0x08009d02
 8005188:	08009cf9 	.word	0x08009cf9
 800518c:	08009cd1 	.word	0x08009cd1
 8005190:	3ff80000 	.word	0x3ff80000
 8005194:	08009e08 	.word	0x08009e08
 8005198:	08009d75 	.word	0x08009d75
 800519c:	2301      	movs	r3, #1
 800519e:	930b      	str	r3, [sp, #44]	; 0x2c
 80051a0:	e7d4      	b.n	800514c <_dtoa_r+0x2ac>
 80051a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051a4:	9306      	str	r3, [sp, #24]
 80051a6:	9308      	str	r3, [sp, #32]
 80051a8:	e7b7      	b.n	800511a <_dtoa_r+0x27a>
 80051aa:	3101      	adds	r1, #1
 80051ac:	0052      	lsls	r2, r2, #1
 80051ae:	e7b7      	b.n	8005120 <_dtoa_r+0x280>
 80051b0:	69eb      	ldr	r3, [r5, #28]
 80051b2:	9a03      	ldr	r2, [sp, #12]
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	9b08      	ldr	r3, [sp, #32]
 80051b8:	2b0e      	cmp	r3, #14
 80051ba:	f200 80a8 	bhi.w	800530e <_dtoa_r+0x46e>
 80051be:	2c00      	cmp	r4, #0
 80051c0:	f000 80a5 	beq.w	800530e <_dtoa_r+0x46e>
 80051c4:	f1bb 0f00 	cmp.w	fp, #0
 80051c8:	dd34      	ble.n	8005234 <_dtoa_r+0x394>
 80051ca:	4b9a      	ldr	r3, [pc, #616]	; (8005434 <_dtoa_r+0x594>)
 80051cc:	f00b 020f 	and.w	r2, fp, #15
 80051d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80051d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80051e0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80051e4:	d016      	beq.n	8005214 <_dtoa_r+0x374>
 80051e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051ea:	4b93      	ldr	r3, [pc, #588]	; (8005438 <_dtoa_r+0x598>)
 80051ec:	2703      	movs	r7, #3
 80051ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051f2:	f7fb faab 	bl	800074c <__aeabi_ddiv>
 80051f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051fa:	f004 040f 	and.w	r4, r4, #15
 80051fe:	4e8e      	ldr	r6, [pc, #568]	; (8005438 <_dtoa_r+0x598>)
 8005200:	b954      	cbnz	r4, 8005218 <_dtoa_r+0x378>
 8005202:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005206:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800520a:	f7fb fa9f 	bl	800074c <__aeabi_ddiv>
 800520e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005212:	e029      	b.n	8005268 <_dtoa_r+0x3c8>
 8005214:	2702      	movs	r7, #2
 8005216:	e7f2      	b.n	80051fe <_dtoa_r+0x35e>
 8005218:	07e1      	lsls	r1, r4, #31
 800521a:	d508      	bpl.n	800522e <_dtoa_r+0x38e>
 800521c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005220:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005224:	f7fb f968 	bl	80004f8 <__aeabi_dmul>
 8005228:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800522c:	3701      	adds	r7, #1
 800522e:	1064      	asrs	r4, r4, #1
 8005230:	3608      	adds	r6, #8
 8005232:	e7e5      	b.n	8005200 <_dtoa_r+0x360>
 8005234:	f000 80a5 	beq.w	8005382 <_dtoa_r+0x4e2>
 8005238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800523c:	f1cb 0400 	rsb	r4, fp, #0
 8005240:	4b7c      	ldr	r3, [pc, #496]	; (8005434 <_dtoa_r+0x594>)
 8005242:	f004 020f 	and.w	r2, r4, #15
 8005246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f7fb f953 	bl	80004f8 <__aeabi_dmul>
 8005252:	2702      	movs	r7, #2
 8005254:	2300      	movs	r3, #0
 8005256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800525a:	4e77      	ldr	r6, [pc, #476]	; (8005438 <_dtoa_r+0x598>)
 800525c:	1124      	asrs	r4, r4, #4
 800525e:	2c00      	cmp	r4, #0
 8005260:	f040 8084 	bne.w	800536c <_dtoa_r+0x4cc>
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1d2      	bne.n	800520e <_dtoa_r+0x36e>
 8005268:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800526c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 8087 	beq.w	8005386 <_dtoa_r+0x4e6>
 8005278:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800527c:	2200      	movs	r2, #0
 800527e:	4b6f      	ldr	r3, [pc, #444]	; (800543c <_dtoa_r+0x59c>)
 8005280:	f7fb fbac 	bl	80009dc <__aeabi_dcmplt>
 8005284:	2800      	cmp	r0, #0
 8005286:	d07e      	beq.n	8005386 <_dtoa_r+0x4e6>
 8005288:	9b08      	ldr	r3, [sp, #32]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d07b      	beq.n	8005386 <_dtoa_r+0x4e6>
 800528e:	9b06      	ldr	r3, [sp, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	dd38      	ble.n	8005306 <_dtoa_r+0x466>
 8005294:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005298:	2200      	movs	r2, #0
 800529a:	4b69      	ldr	r3, [pc, #420]	; (8005440 <_dtoa_r+0x5a0>)
 800529c:	f7fb f92c 	bl	80004f8 <__aeabi_dmul>
 80052a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052a4:	9c06      	ldr	r4, [sp, #24]
 80052a6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80052aa:	3701      	adds	r7, #1
 80052ac:	4638      	mov	r0, r7
 80052ae:	f7fb f8b9 	bl	8000424 <__aeabi_i2d>
 80052b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052b6:	f7fb f91f 	bl	80004f8 <__aeabi_dmul>
 80052ba:	2200      	movs	r2, #0
 80052bc:	4b61      	ldr	r3, [pc, #388]	; (8005444 <_dtoa_r+0x5a4>)
 80052be:	f7fa ff65 	bl	800018c <__adddf3>
 80052c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80052c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052ca:	9611      	str	r6, [sp, #68]	; 0x44
 80052cc:	2c00      	cmp	r4, #0
 80052ce:	d15d      	bne.n	800538c <_dtoa_r+0x4ec>
 80052d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052d4:	2200      	movs	r2, #0
 80052d6:	4b5c      	ldr	r3, [pc, #368]	; (8005448 <_dtoa_r+0x5a8>)
 80052d8:	f7fa ff56 	bl	8000188 <__aeabi_dsub>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052e4:	4633      	mov	r3, r6
 80052e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052e8:	f7fb fb96 	bl	8000a18 <__aeabi_dcmpgt>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	f040 8295 	bne.w	800581c <_dtoa_r+0x97c>
 80052f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80052fc:	f7fb fb6e 	bl	80009dc <__aeabi_dcmplt>
 8005300:	2800      	cmp	r0, #0
 8005302:	f040 8289 	bne.w	8005818 <_dtoa_r+0x978>
 8005306:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800530a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800530e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005310:	2b00      	cmp	r3, #0
 8005312:	f2c0 8151 	blt.w	80055b8 <_dtoa_r+0x718>
 8005316:	f1bb 0f0e 	cmp.w	fp, #14
 800531a:	f300 814d 	bgt.w	80055b8 <_dtoa_r+0x718>
 800531e:	4b45      	ldr	r3, [pc, #276]	; (8005434 <_dtoa_r+0x594>)
 8005320:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005324:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005328:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800532c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800532e:	2b00      	cmp	r3, #0
 8005330:	f280 80da 	bge.w	80054e8 <_dtoa_r+0x648>
 8005334:	9b08      	ldr	r3, [sp, #32]
 8005336:	2b00      	cmp	r3, #0
 8005338:	f300 80d6 	bgt.w	80054e8 <_dtoa_r+0x648>
 800533c:	f040 826b 	bne.w	8005816 <_dtoa_r+0x976>
 8005340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005344:	2200      	movs	r2, #0
 8005346:	4b40      	ldr	r3, [pc, #256]	; (8005448 <_dtoa_r+0x5a8>)
 8005348:	f7fb f8d6 	bl	80004f8 <__aeabi_dmul>
 800534c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005350:	f7fb fb58 	bl	8000a04 <__aeabi_dcmpge>
 8005354:	9c08      	ldr	r4, [sp, #32]
 8005356:	4626      	mov	r6, r4
 8005358:	2800      	cmp	r0, #0
 800535a:	f040 8241 	bne.w	80057e0 <_dtoa_r+0x940>
 800535e:	2331      	movs	r3, #49	; 0x31
 8005360:	9f03      	ldr	r7, [sp, #12]
 8005362:	f10b 0b01 	add.w	fp, fp, #1
 8005366:	f807 3b01 	strb.w	r3, [r7], #1
 800536a:	e23d      	b.n	80057e8 <_dtoa_r+0x948>
 800536c:	07e2      	lsls	r2, r4, #31
 800536e:	d505      	bpl.n	800537c <_dtoa_r+0x4dc>
 8005370:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005374:	f7fb f8c0 	bl	80004f8 <__aeabi_dmul>
 8005378:	2301      	movs	r3, #1
 800537a:	3701      	adds	r7, #1
 800537c:	1064      	asrs	r4, r4, #1
 800537e:	3608      	adds	r6, #8
 8005380:	e76d      	b.n	800525e <_dtoa_r+0x3be>
 8005382:	2702      	movs	r7, #2
 8005384:	e770      	b.n	8005268 <_dtoa_r+0x3c8>
 8005386:	46d8      	mov	r8, fp
 8005388:	9c08      	ldr	r4, [sp, #32]
 800538a:	e78f      	b.n	80052ac <_dtoa_r+0x40c>
 800538c:	9903      	ldr	r1, [sp, #12]
 800538e:	4b29      	ldr	r3, [pc, #164]	; (8005434 <_dtoa_r+0x594>)
 8005390:	4421      	add	r1, r4
 8005392:	9112      	str	r1, [sp, #72]	; 0x48
 8005394:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005396:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800539a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800539e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053a2:	2900      	cmp	r1, #0
 80053a4:	d054      	beq.n	8005450 <_dtoa_r+0x5b0>
 80053a6:	2000      	movs	r0, #0
 80053a8:	4928      	ldr	r1, [pc, #160]	; (800544c <_dtoa_r+0x5ac>)
 80053aa:	f7fb f9cf 	bl	800074c <__aeabi_ddiv>
 80053ae:	463b      	mov	r3, r7
 80053b0:	4632      	mov	r2, r6
 80053b2:	f7fa fee9 	bl	8000188 <__aeabi_dsub>
 80053b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053ba:	9f03      	ldr	r7, [sp, #12]
 80053bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053c0:	f7fb fb4a 	bl	8000a58 <__aeabi_d2iz>
 80053c4:	4604      	mov	r4, r0
 80053c6:	f7fb f82d 	bl	8000424 <__aeabi_i2d>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053d2:	f7fa fed9 	bl	8000188 <__aeabi_dsub>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	3430      	adds	r4, #48	; 0x30
 80053dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053e4:	f807 4b01 	strb.w	r4, [r7], #1
 80053e8:	f7fb faf8 	bl	80009dc <__aeabi_dcmplt>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d173      	bne.n	80054d8 <_dtoa_r+0x638>
 80053f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053f4:	2000      	movs	r0, #0
 80053f6:	4911      	ldr	r1, [pc, #68]	; (800543c <_dtoa_r+0x59c>)
 80053f8:	f7fa fec6 	bl	8000188 <__aeabi_dsub>
 80053fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005400:	f7fb faec 	bl	80009dc <__aeabi_dcmplt>
 8005404:	2800      	cmp	r0, #0
 8005406:	f040 80b6 	bne.w	8005576 <_dtoa_r+0x6d6>
 800540a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800540c:	429f      	cmp	r7, r3
 800540e:	f43f af7a 	beq.w	8005306 <_dtoa_r+0x466>
 8005412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005416:	2200      	movs	r2, #0
 8005418:	4b09      	ldr	r3, [pc, #36]	; (8005440 <_dtoa_r+0x5a0>)
 800541a:	f7fb f86d 	bl	80004f8 <__aeabi_dmul>
 800541e:	2200      	movs	r2, #0
 8005420:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <_dtoa_r+0x5a0>)
 800542a:	f7fb f865 	bl	80004f8 <__aeabi_dmul>
 800542e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005432:	e7c3      	b.n	80053bc <_dtoa_r+0x51c>
 8005434:	08009e08 	.word	0x08009e08
 8005438:	08009de0 	.word	0x08009de0
 800543c:	3ff00000 	.word	0x3ff00000
 8005440:	40240000 	.word	0x40240000
 8005444:	401c0000 	.word	0x401c0000
 8005448:	40140000 	.word	0x40140000
 800544c:	3fe00000 	.word	0x3fe00000
 8005450:	4630      	mov	r0, r6
 8005452:	4639      	mov	r1, r7
 8005454:	f7fb f850 	bl	80004f8 <__aeabi_dmul>
 8005458:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800545a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800545e:	9c03      	ldr	r4, [sp, #12]
 8005460:	9314      	str	r3, [sp, #80]	; 0x50
 8005462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005466:	f7fb faf7 	bl	8000a58 <__aeabi_d2iz>
 800546a:	9015      	str	r0, [sp, #84]	; 0x54
 800546c:	f7fa ffda 	bl	8000424 <__aeabi_i2d>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005478:	f7fa fe86 	bl	8000188 <__aeabi_dsub>
 800547c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800547e:	4606      	mov	r6, r0
 8005480:	3330      	adds	r3, #48	; 0x30
 8005482:	f804 3b01 	strb.w	r3, [r4], #1
 8005486:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005488:	460f      	mov	r7, r1
 800548a:	429c      	cmp	r4, r3
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	d124      	bne.n	80054dc <_dtoa_r+0x63c>
 8005492:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005496:	4baf      	ldr	r3, [pc, #700]	; (8005754 <_dtoa_r+0x8b4>)
 8005498:	f7fa fe78 	bl	800018c <__adddf3>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4630      	mov	r0, r6
 80054a2:	4639      	mov	r1, r7
 80054a4:	f7fb fab8 	bl	8000a18 <__aeabi_dcmpgt>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d163      	bne.n	8005574 <_dtoa_r+0x6d4>
 80054ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054b0:	2000      	movs	r0, #0
 80054b2:	49a8      	ldr	r1, [pc, #672]	; (8005754 <_dtoa_r+0x8b4>)
 80054b4:	f7fa fe68 	bl	8000188 <__aeabi_dsub>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4630      	mov	r0, r6
 80054be:	4639      	mov	r1, r7
 80054c0:	f7fb fa8c 	bl	80009dc <__aeabi_dcmplt>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	f43f af1e 	beq.w	8005306 <_dtoa_r+0x466>
 80054ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80054cc:	1e7b      	subs	r3, r7, #1
 80054ce:	9314      	str	r3, [sp, #80]	; 0x50
 80054d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80054d4:	2b30      	cmp	r3, #48	; 0x30
 80054d6:	d0f8      	beq.n	80054ca <_dtoa_r+0x62a>
 80054d8:	46c3      	mov	fp, r8
 80054da:	e03b      	b.n	8005554 <_dtoa_r+0x6b4>
 80054dc:	4b9e      	ldr	r3, [pc, #632]	; (8005758 <_dtoa_r+0x8b8>)
 80054de:	f7fb f80b 	bl	80004f8 <__aeabi_dmul>
 80054e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054e6:	e7bc      	b.n	8005462 <_dtoa_r+0x5c2>
 80054e8:	9f03      	ldr	r7, [sp, #12]
 80054ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80054ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054f2:	4640      	mov	r0, r8
 80054f4:	4649      	mov	r1, r9
 80054f6:	f7fb f929 	bl	800074c <__aeabi_ddiv>
 80054fa:	f7fb faad 	bl	8000a58 <__aeabi_d2iz>
 80054fe:	4604      	mov	r4, r0
 8005500:	f7fa ff90 	bl	8000424 <__aeabi_i2d>
 8005504:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005508:	f7fa fff6 	bl	80004f8 <__aeabi_dmul>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4640      	mov	r0, r8
 8005512:	4649      	mov	r1, r9
 8005514:	f7fa fe38 	bl	8000188 <__aeabi_dsub>
 8005518:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800551c:	f807 6b01 	strb.w	r6, [r7], #1
 8005520:	9e03      	ldr	r6, [sp, #12]
 8005522:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005526:	1bbe      	subs	r6, r7, r6
 8005528:	45b4      	cmp	ip, r6
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	d136      	bne.n	800559e <_dtoa_r+0x6fe>
 8005530:	f7fa fe2c 	bl	800018c <__adddf3>
 8005534:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005538:	4680      	mov	r8, r0
 800553a:	4689      	mov	r9, r1
 800553c:	f7fb fa6c 	bl	8000a18 <__aeabi_dcmpgt>
 8005540:	bb58      	cbnz	r0, 800559a <_dtoa_r+0x6fa>
 8005542:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005546:	4640      	mov	r0, r8
 8005548:	4649      	mov	r1, r9
 800554a:	f7fb fa3d 	bl	80009c8 <__aeabi_dcmpeq>
 800554e:	b108      	cbz	r0, 8005554 <_dtoa_r+0x6b4>
 8005550:	07e3      	lsls	r3, r4, #31
 8005552:	d422      	bmi.n	800559a <_dtoa_r+0x6fa>
 8005554:	4651      	mov	r1, sl
 8005556:	4628      	mov	r0, r5
 8005558:	f000 fbc2 	bl	8005ce0 <_Bfree>
 800555c:	2300      	movs	r3, #0
 800555e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005560:	703b      	strb	r3, [r7, #0]
 8005562:	f10b 0301 	add.w	r3, fp, #1
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800556a:	2b00      	cmp	r3, #0
 800556c:	f43f ace6 	beq.w	8004f3c <_dtoa_r+0x9c>
 8005570:	601f      	str	r7, [r3, #0]
 8005572:	e4e3      	b.n	8004f3c <_dtoa_r+0x9c>
 8005574:	4627      	mov	r7, r4
 8005576:	463b      	mov	r3, r7
 8005578:	461f      	mov	r7, r3
 800557a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800557e:	2a39      	cmp	r2, #57	; 0x39
 8005580:	d107      	bne.n	8005592 <_dtoa_r+0x6f2>
 8005582:	9a03      	ldr	r2, [sp, #12]
 8005584:	429a      	cmp	r2, r3
 8005586:	d1f7      	bne.n	8005578 <_dtoa_r+0x6d8>
 8005588:	2230      	movs	r2, #48	; 0x30
 800558a:	9903      	ldr	r1, [sp, #12]
 800558c:	f108 0801 	add.w	r8, r8, #1
 8005590:	700a      	strb	r2, [r1, #0]
 8005592:	781a      	ldrb	r2, [r3, #0]
 8005594:	3201      	adds	r2, #1
 8005596:	701a      	strb	r2, [r3, #0]
 8005598:	e79e      	b.n	80054d8 <_dtoa_r+0x638>
 800559a:	46d8      	mov	r8, fp
 800559c:	e7eb      	b.n	8005576 <_dtoa_r+0x6d6>
 800559e:	2200      	movs	r2, #0
 80055a0:	4b6d      	ldr	r3, [pc, #436]	; (8005758 <_dtoa_r+0x8b8>)
 80055a2:	f7fa ffa9 	bl	80004f8 <__aeabi_dmul>
 80055a6:	2200      	movs	r2, #0
 80055a8:	2300      	movs	r3, #0
 80055aa:	4680      	mov	r8, r0
 80055ac:	4689      	mov	r9, r1
 80055ae:	f7fb fa0b 	bl	80009c8 <__aeabi_dcmpeq>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d09b      	beq.n	80054ee <_dtoa_r+0x64e>
 80055b6:	e7cd      	b.n	8005554 <_dtoa_r+0x6b4>
 80055b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055ba:	2a00      	cmp	r2, #0
 80055bc:	f000 80c4 	beq.w	8005748 <_dtoa_r+0x8a8>
 80055c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80055c2:	2a01      	cmp	r2, #1
 80055c4:	f300 80a8 	bgt.w	8005718 <_dtoa_r+0x878>
 80055c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055ca:	2a00      	cmp	r2, #0
 80055cc:	f000 80a0 	beq.w	8005710 <_dtoa_r+0x870>
 80055d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055d4:	464f      	mov	r7, r9
 80055d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055da:	2101      	movs	r1, #1
 80055dc:	441a      	add	r2, r3
 80055de:	4628      	mov	r0, r5
 80055e0:	4499      	add	r9, r3
 80055e2:	9209      	str	r2, [sp, #36]	; 0x24
 80055e4:	f000 fc7c 	bl	8005ee0 <__i2b>
 80055e8:	4606      	mov	r6, r0
 80055ea:	b15f      	cbz	r7, 8005604 <_dtoa_r+0x764>
 80055ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	dd08      	ble.n	8005604 <_dtoa_r+0x764>
 80055f2:	42bb      	cmp	r3, r7
 80055f4:	bfa8      	it	ge
 80055f6:	463b      	movge	r3, r7
 80055f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055fa:	eba9 0903 	sub.w	r9, r9, r3
 80055fe:	1aff      	subs	r7, r7, r3
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	9309      	str	r3, [sp, #36]	; 0x24
 8005604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005606:	b1f3      	cbz	r3, 8005646 <_dtoa_r+0x7a6>
 8005608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 80a0 	beq.w	8005750 <_dtoa_r+0x8b0>
 8005610:	2c00      	cmp	r4, #0
 8005612:	dd10      	ble.n	8005636 <_dtoa_r+0x796>
 8005614:	4631      	mov	r1, r6
 8005616:	4622      	mov	r2, r4
 8005618:	4628      	mov	r0, r5
 800561a:	f000 fd1f 	bl	800605c <__pow5mult>
 800561e:	4652      	mov	r2, sl
 8005620:	4601      	mov	r1, r0
 8005622:	4606      	mov	r6, r0
 8005624:	4628      	mov	r0, r5
 8005626:	f000 fc71 	bl	8005f0c <__multiply>
 800562a:	4680      	mov	r8, r0
 800562c:	4651      	mov	r1, sl
 800562e:	4628      	mov	r0, r5
 8005630:	f000 fb56 	bl	8005ce0 <_Bfree>
 8005634:	46c2      	mov	sl, r8
 8005636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005638:	1b1a      	subs	r2, r3, r4
 800563a:	d004      	beq.n	8005646 <_dtoa_r+0x7a6>
 800563c:	4651      	mov	r1, sl
 800563e:	4628      	mov	r0, r5
 8005640:	f000 fd0c 	bl	800605c <__pow5mult>
 8005644:	4682      	mov	sl, r0
 8005646:	2101      	movs	r1, #1
 8005648:	4628      	mov	r0, r5
 800564a:	f000 fc49 	bl	8005ee0 <__i2b>
 800564e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005650:	4604      	mov	r4, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	f340 8082 	ble.w	800575c <_dtoa_r+0x8bc>
 8005658:	461a      	mov	r2, r3
 800565a:	4601      	mov	r1, r0
 800565c:	4628      	mov	r0, r5
 800565e:	f000 fcfd 	bl	800605c <__pow5mult>
 8005662:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005664:	4604      	mov	r4, r0
 8005666:	2b01      	cmp	r3, #1
 8005668:	dd7b      	ble.n	8005762 <_dtoa_r+0x8c2>
 800566a:	f04f 0800 	mov.w	r8, #0
 800566e:	6923      	ldr	r3, [r4, #16]
 8005670:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005674:	6918      	ldr	r0, [r3, #16]
 8005676:	f000 fbe5 	bl	8005e44 <__hi0bits>
 800567a:	f1c0 0020 	rsb	r0, r0, #32
 800567e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005680:	4418      	add	r0, r3
 8005682:	f010 001f 	ands.w	r0, r0, #31
 8005686:	f000 8092 	beq.w	80057ae <_dtoa_r+0x90e>
 800568a:	f1c0 0320 	rsb	r3, r0, #32
 800568e:	2b04      	cmp	r3, #4
 8005690:	f340 8085 	ble.w	800579e <_dtoa_r+0x8fe>
 8005694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005696:	f1c0 001c 	rsb	r0, r0, #28
 800569a:	4403      	add	r3, r0
 800569c:	4481      	add	r9, r0
 800569e:	4407      	add	r7, r0
 80056a0:	9309      	str	r3, [sp, #36]	; 0x24
 80056a2:	f1b9 0f00 	cmp.w	r9, #0
 80056a6:	dd05      	ble.n	80056b4 <_dtoa_r+0x814>
 80056a8:	4651      	mov	r1, sl
 80056aa:	464a      	mov	r2, r9
 80056ac:	4628      	mov	r0, r5
 80056ae:	f000 fd2f 	bl	8006110 <__lshift>
 80056b2:	4682      	mov	sl, r0
 80056b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	dd05      	ble.n	80056c6 <_dtoa_r+0x826>
 80056ba:	4621      	mov	r1, r4
 80056bc:	461a      	mov	r2, r3
 80056be:	4628      	mov	r0, r5
 80056c0:	f000 fd26 	bl	8006110 <__lshift>
 80056c4:	4604      	mov	r4, r0
 80056c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d072      	beq.n	80057b2 <_dtoa_r+0x912>
 80056cc:	4621      	mov	r1, r4
 80056ce:	4650      	mov	r0, sl
 80056d0:	f000 fd8a 	bl	80061e8 <__mcmp>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	da6c      	bge.n	80057b2 <_dtoa_r+0x912>
 80056d8:	2300      	movs	r3, #0
 80056da:	4651      	mov	r1, sl
 80056dc:	220a      	movs	r2, #10
 80056de:	4628      	mov	r0, r5
 80056e0:	f000 fb20 	bl	8005d24 <__multadd>
 80056e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056e6:	4682      	mov	sl, r0
 80056e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 81ac 	beq.w	8005a4a <_dtoa_r+0xbaa>
 80056f2:	2300      	movs	r3, #0
 80056f4:	4631      	mov	r1, r6
 80056f6:	220a      	movs	r2, #10
 80056f8:	4628      	mov	r0, r5
 80056fa:	f000 fb13 	bl	8005d24 <__multadd>
 80056fe:	9b06      	ldr	r3, [sp, #24]
 8005700:	4606      	mov	r6, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	f300 8093 	bgt.w	800582e <_dtoa_r+0x98e>
 8005708:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800570a:	2b02      	cmp	r3, #2
 800570c:	dc59      	bgt.n	80057c2 <_dtoa_r+0x922>
 800570e:	e08e      	b.n	800582e <_dtoa_r+0x98e>
 8005710:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005712:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005716:	e75d      	b.n	80055d4 <_dtoa_r+0x734>
 8005718:	9b08      	ldr	r3, [sp, #32]
 800571a:	1e5c      	subs	r4, r3, #1
 800571c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800571e:	42a3      	cmp	r3, r4
 8005720:	bfbf      	itttt	lt
 8005722:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005724:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005726:	1ae3      	sublt	r3, r4, r3
 8005728:	18d2      	addlt	r2, r2, r3
 800572a:	bfa8      	it	ge
 800572c:	1b1c      	subge	r4, r3, r4
 800572e:	9b08      	ldr	r3, [sp, #32]
 8005730:	bfbe      	ittt	lt
 8005732:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005734:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005736:	2400      	movlt	r4, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	bfb5      	itete	lt
 800573c:	eba9 0703 	sublt.w	r7, r9, r3
 8005740:	464f      	movge	r7, r9
 8005742:	2300      	movlt	r3, #0
 8005744:	9b08      	ldrge	r3, [sp, #32]
 8005746:	e747      	b.n	80055d8 <_dtoa_r+0x738>
 8005748:	464f      	mov	r7, r9
 800574a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800574c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800574e:	e74c      	b.n	80055ea <_dtoa_r+0x74a>
 8005750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005752:	e773      	b.n	800563c <_dtoa_r+0x79c>
 8005754:	3fe00000 	.word	0x3fe00000
 8005758:	40240000 	.word	0x40240000
 800575c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800575e:	2b01      	cmp	r3, #1
 8005760:	dc18      	bgt.n	8005794 <_dtoa_r+0x8f4>
 8005762:	9b04      	ldr	r3, [sp, #16]
 8005764:	b9b3      	cbnz	r3, 8005794 <_dtoa_r+0x8f4>
 8005766:	9b05      	ldr	r3, [sp, #20]
 8005768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800576c:	b993      	cbnz	r3, 8005794 <_dtoa_r+0x8f4>
 800576e:	9b05      	ldr	r3, [sp, #20]
 8005770:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005774:	0d1b      	lsrs	r3, r3, #20
 8005776:	051b      	lsls	r3, r3, #20
 8005778:	b17b      	cbz	r3, 800579a <_dtoa_r+0x8fa>
 800577a:	f04f 0801 	mov.w	r8, #1
 800577e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005780:	f109 0901 	add.w	r9, r9, #1
 8005784:	3301      	adds	r3, #1
 8005786:	9309      	str	r3, [sp, #36]	; 0x24
 8005788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800578a:	2b00      	cmp	r3, #0
 800578c:	f47f af6f 	bne.w	800566e <_dtoa_r+0x7ce>
 8005790:	2001      	movs	r0, #1
 8005792:	e774      	b.n	800567e <_dtoa_r+0x7de>
 8005794:	f04f 0800 	mov.w	r8, #0
 8005798:	e7f6      	b.n	8005788 <_dtoa_r+0x8e8>
 800579a:	4698      	mov	r8, r3
 800579c:	e7f4      	b.n	8005788 <_dtoa_r+0x8e8>
 800579e:	d080      	beq.n	80056a2 <_dtoa_r+0x802>
 80057a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057a2:	331c      	adds	r3, #28
 80057a4:	441a      	add	r2, r3
 80057a6:	4499      	add	r9, r3
 80057a8:	441f      	add	r7, r3
 80057aa:	9209      	str	r2, [sp, #36]	; 0x24
 80057ac:	e779      	b.n	80056a2 <_dtoa_r+0x802>
 80057ae:	4603      	mov	r3, r0
 80057b0:	e7f6      	b.n	80057a0 <_dtoa_r+0x900>
 80057b2:	9b08      	ldr	r3, [sp, #32]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	dc34      	bgt.n	8005822 <_dtoa_r+0x982>
 80057b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	dd31      	ble.n	8005822 <_dtoa_r+0x982>
 80057be:	9b08      	ldr	r3, [sp, #32]
 80057c0:	9306      	str	r3, [sp, #24]
 80057c2:	9b06      	ldr	r3, [sp, #24]
 80057c4:	b963      	cbnz	r3, 80057e0 <_dtoa_r+0x940>
 80057c6:	4621      	mov	r1, r4
 80057c8:	2205      	movs	r2, #5
 80057ca:	4628      	mov	r0, r5
 80057cc:	f000 faaa 	bl	8005d24 <__multadd>
 80057d0:	4601      	mov	r1, r0
 80057d2:	4604      	mov	r4, r0
 80057d4:	4650      	mov	r0, sl
 80057d6:	f000 fd07 	bl	80061e8 <__mcmp>
 80057da:	2800      	cmp	r0, #0
 80057dc:	f73f adbf 	bgt.w	800535e <_dtoa_r+0x4be>
 80057e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057e2:	9f03      	ldr	r7, [sp, #12]
 80057e4:	ea6f 0b03 	mvn.w	fp, r3
 80057e8:	f04f 0800 	mov.w	r8, #0
 80057ec:	4621      	mov	r1, r4
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 fa76 	bl	8005ce0 <_Bfree>
 80057f4:	2e00      	cmp	r6, #0
 80057f6:	f43f aead 	beq.w	8005554 <_dtoa_r+0x6b4>
 80057fa:	f1b8 0f00 	cmp.w	r8, #0
 80057fe:	d005      	beq.n	800580c <_dtoa_r+0x96c>
 8005800:	45b0      	cmp	r8, r6
 8005802:	d003      	beq.n	800580c <_dtoa_r+0x96c>
 8005804:	4641      	mov	r1, r8
 8005806:	4628      	mov	r0, r5
 8005808:	f000 fa6a 	bl	8005ce0 <_Bfree>
 800580c:	4631      	mov	r1, r6
 800580e:	4628      	mov	r0, r5
 8005810:	f000 fa66 	bl	8005ce0 <_Bfree>
 8005814:	e69e      	b.n	8005554 <_dtoa_r+0x6b4>
 8005816:	2400      	movs	r4, #0
 8005818:	4626      	mov	r6, r4
 800581a:	e7e1      	b.n	80057e0 <_dtoa_r+0x940>
 800581c:	46c3      	mov	fp, r8
 800581e:	4626      	mov	r6, r4
 8005820:	e59d      	b.n	800535e <_dtoa_r+0x4be>
 8005822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80c8 	beq.w	80059ba <_dtoa_r+0xb1a>
 800582a:	9b08      	ldr	r3, [sp, #32]
 800582c:	9306      	str	r3, [sp, #24]
 800582e:	2f00      	cmp	r7, #0
 8005830:	dd05      	ble.n	800583e <_dtoa_r+0x99e>
 8005832:	4631      	mov	r1, r6
 8005834:	463a      	mov	r2, r7
 8005836:	4628      	mov	r0, r5
 8005838:	f000 fc6a 	bl	8006110 <__lshift>
 800583c:	4606      	mov	r6, r0
 800583e:	f1b8 0f00 	cmp.w	r8, #0
 8005842:	d05b      	beq.n	80058fc <_dtoa_r+0xa5c>
 8005844:	4628      	mov	r0, r5
 8005846:	6871      	ldr	r1, [r6, #4]
 8005848:	f000 fa0a 	bl	8005c60 <_Balloc>
 800584c:	4607      	mov	r7, r0
 800584e:	b928      	cbnz	r0, 800585c <_dtoa_r+0x9bc>
 8005850:	4602      	mov	r2, r0
 8005852:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005856:	4b81      	ldr	r3, [pc, #516]	; (8005a5c <_dtoa_r+0xbbc>)
 8005858:	f7ff bb36 	b.w	8004ec8 <_dtoa_r+0x28>
 800585c:	6932      	ldr	r2, [r6, #16]
 800585e:	f106 010c 	add.w	r1, r6, #12
 8005862:	3202      	adds	r2, #2
 8005864:	0092      	lsls	r2, r2, #2
 8005866:	300c      	adds	r0, #12
 8005868:	f7ff fa7d 	bl	8004d66 <memcpy>
 800586c:	2201      	movs	r2, #1
 800586e:	4639      	mov	r1, r7
 8005870:	4628      	mov	r0, r5
 8005872:	f000 fc4d 	bl	8006110 <__lshift>
 8005876:	46b0      	mov	r8, r6
 8005878:	4606      	mov	r6, r0
 800587a:	9b03      	ldr	r3, [sp, #12]
 800587c:	9a03      	ldr	r2, [sp, #12]
 800587e:	3301      	adds	r3, #1
 8005880:	9308      	str	r3, [sp, #32]
 8005882:	9b06      	ldr	r3, [sp, #24]
 8005884:	4413      	add	r3, r2
 8005886:	930b      	str	r3, [sp, #44]	; 0x2c
 8005888:	9b04      	ldr	r3, [sp, #16]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	930a      	str	r3, [sp, #40]	; 0x28
 8005890:	9b08      	ldr	r3, [sp, #32]
 8005892:	4621      	mov	r1, r4
 8005894:	3b01      	subs	r3, #1
 8005896:	4650      	mov	r0, sl
 8005898:	9304      	str	r3, [sp, #16]
 800589a:	f7ff fa77 	bl	8004d8c <quorem>
 800589e:	4641      	mov	r1, r8
 80058a0:	9006      	str	r0, [sp, #24]
 80058a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80058a6:	4650      	mov	r0, sl
 80058a8:	f000 fc9e 	bl	80061e8 <__mcmp>
 80058ac:	4632      	mov	r2, r6
 80058ae:	9009      	str	r0, [sp, #36]	; 0x24
 80058b0:	4621      	mov	r1, r4
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 fcb4 	bl	8006220 <__mdiff>
 80058b8:	68c2      	ldr	r2, [r0, #12]
 80058ba:	4607      	mov	r7, r0
 80058bc:	bb02      	cbnz	r2, 8005900 <_dtoa_r+0xa60>
 80058be:	4601      	mov	r1, r0
 80058c0:	4650      	mov	r0, sl
 80058c2:	f000 fc91 	bl	80061e8 <__mcmp>
 80058c6:	4602      	mov	r2, r0
 80058c8:	4639      	mov	r1, r7
 80058ca:	4628      	mov	r0, r5
 80058cc:	920c      	str	r2, [sp, #48]	; 0x30
 80058ce:	f000 fa07 	bl	8005ce0 <_Bfree>
 80058d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058d6:	9f08      	ldr	r7, [sp, #32]
 80058d8:	ea43 0102 	orr.w	r1, r3, r2
 80058dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058de:	4319      	orrs	r1, r3
 80058e0:	d110      	bne.n	8005904 <_dtoa_r+0xa64>
 80058e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058e6:	d029      	beq.n	800593c <_dtoa_r+0xa9c>
 80058e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	dd02      	ble.n	80058f4 <_dtoa_r+0xa54>
 80058ee:	9b06      	ldr	r3, [sp, #24]
 80058f0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80058f4:	9b04      	ldr	r3, [sp, #16]
 80058f6:	f883 9000 	strb.w	r9, [r3]
 80058fa:	e777      	b.n	80057ec <_dtoa_r+0x94c>
 80058fc:	4630      	mov	r0, r6
 80058fe:	e7ba      	b.n	8005876 <_dtoa_r+0x9d6>
 8005900:	2201      	movs	r2, #1
 8005902:	e7e1      	b.n	80058c8 <_dtoa_r+0xa28>
 8005904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	db04      	blt.n	8005914 <_dtoa_r+0xa74>
 800590a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800590c:	430b      	orrs	r3, r1
 800590e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005910:	430b      	orrs	r3, r1
 8005912:	d120      	bne.n	8005956 <_dtoa_r+0xab6>
 8005914:	2a00      	cmp	r2, #0
 8005916:	dded      	ble.n	80058f4 <_dtoa_r+0xa54>
 8005918:	4651      	mov	r1, sl
 800591a:	2201      	movs	r2, #1
 800591c:	4628      	mov	r0, r5
 800591e:	f000 fbf7 	bl	8006110 <__lshift>
 8005922:	4621      	mov	r1, r4
 8005924:	4682      	mov	sl, r0
 8005926:	f000 fc5f 	bl	80061e8 <__mcmp>
 800592a:	2800      	cmp	r0, #0
 800592c:	dc03      	bgt.n	8005936 <_dtoa_r+0xa96>
 800592e:	d1e1      	bne.n	80058f4 <_dtoa_r+0xa54>
 8005930:	f019 0f01 	tst.w	r9, #1
 8005934:	d0de      	beq.n	80058f4 <_dtoa_r+0xa54>
 8005936:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800593a:	d1d8      	bne.n	80058ee <_dtoa_r+0xa4e>
 800593c:	2339      	movs	r3, #57	; 0x39
 800593e:	9a04      	ldr	r2, [sp, #16]
 8005940:	7013      	strb	r3, [r2, #0]
 8005942:	463b      	mov	r3, r7
 8005944:	461f      	mov	r7, r3
 8005946:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800594a:	3b01      	subs	r3, #1
 800594c:	2a39      	cmp	r2, #57	; 0x39
 800594e:	d06b      	beq.n	8005a28 <_dtoa_r+0xb88>
 8005950:	3201      	adds	r2, #1
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	e74a      	b.n	80057ec <_dtoa_r+0x94c>
 8005956:	2a00      	cmp	r2, #0
 8005958:	dd07      	ble.n	800596a <_dtoa_r+0xaca>
 800595a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800595e:	d0ed      	beq.n	800593c <_dtoa_r+0xa9c>
 8005960:	9a04      	ldr	r2, [sp, #16]
 8005962:	f109 0301 	add.w	r3, r9, #1
 8005966:	7013      	strb	r3, [r2, #0]
 8005968:	e740      	b.n	80057ec <_dtoa_r+0x94c>
 800596a:	9b08      	ldr	r3, [sp, #32]
 800596c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800596e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005972:	4293      	cmp	r3, r2
 8005974:	d042      	beq.n	80059fc <_dtoa_r+0xb5c>
 8005976:	4651      	mov	r1, sl
 8005978:	2300      	movs	r3, #0
 800597a:	220a      	movs	r2, #10
 800597c:	4628      	mov	r0, r5
 800597e:	f000 f9d1 	bl	8005d24 <__multadd>
 8005982:	45b0      	cmp	r8, r6
 8005984:	4682      	mov	sl, r0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	f04f 020a 	mov.w	r2, #10
 800598e:	4641      	mov	r1, r8
 8005990:	4628      	mov	r0, r5
 8005992:	d107      	bne.n	80059a4 <_dtoa_r+0xb04>
 8005994:	f000 f9c6 	bl	8005d24 <__multadd>
 8005998:	4680      	mov	r8, r0
 800599a:	4606      	mov	r6, r0
 800599c:	9b08      	ldr	r3, [sp, #32]
 800599e:	3301      	adds	r3, #1
 80059a0:	9308      	str	r3, [sp, #32]
 80059a2:	e775      	b.n	8005890 <_dtoa_r+0x9f0>
 80059a4:	f000 f9be 	bl	8005d24 <__multadd>
 80059a8:	4631      	mov	r1, r6
 80059aa:	4680      	mov	r8, r0
 80059ac:	2300      	movs	r3, #0
 80059ae:	220a      	movs	r2, #10
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 f9b7 	bl	8005d24 <__multadd>
 80059b6:	4606      	mov	r6, r0
 80059b8:	e7f0      	b.n	800599c <_dtoa_r+0xafc>
 80059ba:	9b08      	ldr	r3, [sp, #32]
 80059bc:	9306      	str	r3, [sp, #24]
 80059be:	9f03      	ldr	r7, [sp, #12]
 80059c0:	4621      	mov	r1, r4
 80059c2:	4650      	mov	r0, sl
 80059c4:	f7ff f9e2 	bl	8004d8c <quorem>
 80059c8:	9b03      	ldr	r3, [sp, #12]
 80059ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80059ce:	f807 9b01 	strb.w	r9, [r7], #1
 80059d2:	1afa      	subs	r2, r7, r3
 80059d4:	9b06      	ldr	r3, [sp, #24]
 80059d6:	4293      	cmp	r3, r2
 80059d8:	dd07      	ble.n	80059ea <_dtoa_r+0xb4a>
 80059da:	4651      	mov	r1, sl
 80059dc:	2300      	movs	r3, #0
 80059de:	220a      	movs	r2, #10
 80059e0:	4628      	mov	r0, r5
 80059e2:	f000 f99f 	bl	8005d24 <__multadd>
 80059e6:	4682      	mov	sl, r0
 80059e8:	e7ea      	b.n	80059c0 <_dtoa_r+0xb20>
 80059ea:	9b06      	ldr	r3, [sp, #24]
 80059ec:	f04f 0800 	mov.w	r8, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	bfcc      	ite	gt
 80059f4:	461f      	movgt	r7, r3
 80059f6:	2701      	movle	r7, #1
 80059f8:	9b03      	ldr	r3, [sp, #12]
 80059fa:	441f      	add	r7, r3
 80059fc:	4651      	mov	r1, sl
 80059fe:	2201      	movs	r2, #1
 8005a00:	4628      	mov	r0, r5
 8005a02:	f000 fb85 	bl	8006110 <__lshift>
 8005a06:	4621      	mov	r1, r4
 8005a08:	4682      	mov	sl, r0
 8005a0a:	f000 fbed 	bl	80061e8 <__mcmp>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	dc97      	bgt.n	8005942 <_dtoa_r+0xaa2>
 8005a12:	d102      	bne.n	8005a1a <_dtoa_r+0xb7a>
 8005a14:	f019 0f01 	tst.w	r9, #1
 8005a18:	d193      	bne.n	8005942 <_dtoa_r+0xaa2>
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	461f      	mov	r7, r3
 8005a1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a22:	2a30      	cmp	r2, #48	; 0x30
 8005a24:	d0fa      	beq.n	8005a1c <_dtoa_r+0xb7c>
 8005a26:	e6e1      	b.n	80057ec <_dtoa_r+0x94c>
 8005a28:	9a03      	ldr	r2, [sp, #12]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d18a      	bne.n	8005944 <_dtoa_r+0xaa4>
 8005a2e:	2331      	movs	r3, #49	; 0x31
 8005a30:	f10b 0b01 	add.w	fp, fp, #1
 8005a34:	e797      	b.n	8005966 <_dtoa_r+0xac6>
 8005a36:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <_dtoa_r+0xbc0>)
 8005a38:	f7ff ba9f 	b.w	8004f7a <_dtoa_r+0xda>
 8005a3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f47f aa77 	bne.w	8004f32 <_dtoa_r+0x92>
 8005a44:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <_dtoa_r+0xbc4>)
 8005a46:	f7ff ba98 	b.w	8004f7a <_dtoa_r+0xda>
 8005a4a:	9b06      	ldr	r3, [sp, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	dcb6      	bgt.n	80059be <_dtoa_r+0xb1e>
 8005a50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	f73f aeb5 	bgt.w	80057c2 <_dtoa_r+0x922>
 8005a58:	e7b1      	b.n	80059be <_dtoa_r+0xb1e>
 8005a5a:	bf00      	nop
 8005a5c:	08009d75 	.word	0x08009d75
 8005a60:	08009cd0 	.word	0x08009cd0
 8005a64:	08009cf9 	.word	0x08009cf9

08005a68 <_free_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4605      	mov	r5, r0
 8005a6c:	2900      	cmp	r1, #0
 8005a6e:	d040      	beq.n	8005af2 <_free_r+0x8a>
 8005a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a74:	1f0c      	subs	r4, r1, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	bfb8      	it	lt
 8005a7a:	18e4      	addlt	r4, r4, r3
 8005a7c:	f000 f8e4 	bl	8005c48 <__malloc_lock>
 8005a80:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <_free_r+0x8c>)
 8005a82:	6813      	ldr	r3, [r2, #0]
 8005a84:	b933      	cbnz	r3, 8005a94 <_free_r+0x2c>
 8005a86:	6063      	str	r3, [r4, #4]
 8005a88:	6014      	str	r4, [r2, #0]
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a90:	f000 b8e0 	b.w	8005c54 <__malloc_unlock>
 8005a94:	42a3      	cmp	r3, r4
 8005a96:	d908      	bls.n	8005aaa <_free_r+0x42>
 8005a98:	6820      	ldr	r0, [r4, #0]
 8005a9a:	1821      	adds	r1, r4, r0
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	bf01      	itttt	eq
 8005aa0:	6819      	ldreq	r1, [r3, #0]
 8005aa2:	685b      	ldreq	r3, [r3, #4]
 8005aa4:	1809      	addeq	r1, r1, r0
 8005aa6:	6021      	streq	r1, [r4, #0]
 8005aa8:	e7ed      	b.n	8005a86 <_free_r+0x1e>
 8005aaa:	461a      	mov	r2, r3
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	b10b      	cbz	r3, 8005ab4 <_free_r+0x4c>
 8005ab0:	42a3      	cmp	r3, r4
 8005ab2:	d9fa      	bls.n	8005aaa <_free_r+0x42>
 8005ab4:	6811      	ldr	r1, [r2, #0]
 8005ab6:	1850      	adds	r0, r2, r1
 8005ab8:	42a0      	cmp	r0, r4
 8005aba:	d10b      	bne.n	8005ad4 <_free_r+0x6c>
 8005abc:	6820      	ldr	r0, [r4, #0]
 8005abe:	4401      	add	r1, r0
 8005ac0:	1850      	adds	r0, r2, r1
 8005ac2:	4283      	cmp	r3, r0
 8005ac4:	6011      	str	r1, [r2, #0]
 8005ac6:	d1e0      	bne.n	8005a8a <_free_r+0x22>
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4408      	add	r0, r1
 8005ace:	6010      	str	r0, [r2, #0]
 8005ad0:	6053      	str	r3, [r2, #4]
 8005ad2:	e7da      	b.n	8005a8a <_free_r+0x22>
 8005ad4:	d902      	bls.n	8005adc <_free_r+0x74>
 8005ad6:	230c      	movs	r3, #12
 8005ad8:	602b      	str	r3, [r5, #0]
 8005ada:	e7d6      	b.n	8005a8a <_free_r+0x22>
 8005adc:	6820      	ldr	r0, [r4, #0]
 8005ade:	1821      	adds	r1, r4, r0
 8005ae0:	428b      	cmp	r3, r1
 8005ae2:	bf01      	itttt	eq
 8005ae4:	6819      	ldreq	r1, [r3, #0]
 8005ae6:	685b      	ldreq	r3, [r3, #4]
 8005ae8:	1809      	addeq	r1, r1, r0
 8005aea:	6021      	streq	r1, [r4, #0]
 8005aec:	6063      	str	r3, [r4, #4]
 8005aee:	6054      	str	r4, [r2, #4]
 8005af0:	e7cb      	b.n	8005a8a <_free_r+0x22>
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	2000043c 	.word	0x2000043c

08005af8 <malloc>:
 8005af8:	4b02      	ldr	r3, [pc, #8]	; (8005b04 <malloc+0xc>)
 8005afa:	4601      	mov	r1, r0
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	f000 b823 	b.w	8005b48 <_malloc_r>
 8005b02:	bf00      	nop
 8005b04:	20000074 	.word	0x20000074

08005b08 <sbrk_aligned>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	4e0e      	ldr	r6, [pc, #56]	; (8005b44 <sbrk_aligned+0x3c>)
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	6831      	ldr	r1, [r6, #0]
 8005b10:	4605      	mov	r5, r0
 8005b12:	b911      	cbnz	r1, 8005b1a <sbrk_aligned+0x12>
 8005b14:	f001 ffe4 	bl	8007ae0 <_sbrk_r>
 8005b18:	6030      	str	r0, [r6, #0]
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f001 ffdf 	bl	8007ae0 <_sbrk_r>
 8005b22:	1c43      	adds	r3, r0, #1
 8005b24:	d00a      	beq.n	8005b3c <sbrk_aligned+0x34>
 8005b26:	1cc4      	adds	r4, r0, #3
 8005b28:	f024 0403 	bic.w	r4, r4, #3
 8005b2c:	42a0      	cmp	r0, r4
 8005b2e:	d007      	beq.n	8005b40 <sbrk_aligned+0x38>
 8005b30:	1a21      	subs	r1, r4, r0
 8005b32:	4628      	mov	r0, r5
 8005b34:	f001 ffd4 	bl	8007ae0 <_sbrk_r>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d101      	bne.n	8005b40 <sbrk_aligned+0x38>
 8005b3c:	f04f 34ff 	mov.w	r4, #4294967295
 8005b40:	4620      	mov	r0, r4
 8005b42:	bd70      	pop	{r4, r5, r6, pc}
 8005b44:	20000440 	.word	0x20000440

08005b48 <_malloc_r>:
 8005b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b4c:	1ccd      	adds	r5, r1, #3
 8005b4e:	f025 0503 	bic.w	r5, r5, #3
 8005b52:	3508      	adds	r5, #8
 8005b54:	2d0c      	cmp	r5, #12
 8005b56:	bf38      	it	cc
 8005b58:	250c      	movcc	r5, #12
 8005b5a:	2d00      	cmp	r5, #0
 8005b5c:	4607      	mov	r7, r0
 8005b5e:	db01      	blt.n	8005b64 <_malloc_r+0x1c>
 8005b60:	42a9      	cmp	r1, r5
 8005b62:	d905      	bls.n	8005b70 <_malloc_r+0x28>
 8005b64:	230c      	movs	r3, #12
 8005b66:	2600      	movs	r6, #0
 8005b68:	603b      	str	r3, [r7, #0]
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c44 <_malloc_r+0xfc>
 8005b74:	f000 f868 	bl	8005c48 <__malloc_lock>
 8005b78:	f8d8 3000 	ldr.w	r3, [r8]
 8005b7c:	461c      	mov	r4, r3
 8005b7e:	bb5c      	cbnz	r4, 8005bd8 <_malloc_r+0x90>
 8005b80:	4629      	mov	r1, r5
 8005b82:	4638      	mov	r0, r7
 8005b84:	f7ff ffc0 	bl	8005b08 <sbrk_aligned>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	d155      	bne.n	8005c3a <_malloc_r+0xf2>
 8005b8e:	f8d8 4000 	ldr.w	r4, [r8]
 8005b92:	4626      	mov	r6, r4
 8005b94:	2e00      	cmp	r6, #0
 8005b96:	d145      	bne.n	8005c24 <_malloc_r+0xdc>
 8005b98:	2c00      	cmp	r4, #0
 8005b9a:	d048      	beq.n	8005c2e <_malloc_r+0xe6>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	eb04 0903 	add.w	r9, r4, r3
 8005ba6:	f001 ff9b 	bl	8007ae0 <_sbrk_r>
 8005baa:	4581      	cmp	r9, r0
 8005bac:	d13f      	bne.n	8005c2e <_malloc_r+0xe6>
 8005bae:	6821      	ldr	r1, [r4, #0]
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	1a6d      	subs	r5, r5, r1
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	f7ff ffa7 	bl	8005b08 <sbrk_aligned>
 8005bba:	3001      	adds	r0, #1
 8005bbc:	d037      	beq.n	8005c2e <_malloc_r+0xe6>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	442b      	add	r3, r5
 8005bc2:	6023      	str	r3, [r4, #0]
 8005bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d038      	beq.n	8005c3e <_malloc_r+0xf6>
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	42a2      	cmp	r2, r4
 8005bd0:	d12b      	bne.n	8005c2a <_malloc_r+0xe2>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	605a      	str	r2, [r3, #4]
 8005bd6:	e00f      	b.n	8005bf8 <_malloc_r+0xb0>
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	1b52      	subs	r2, r2, r5
 8005bdc:	d41f      	bmi.n	8005c1e <_malloc_r+0xd6>
 8005bde:	2a0b      	cmp	r2, #11
 8005be0:	d917      	bls.n	8005c12 <_malloc_r+0xca>
 8005be2:	1961      	adds	r1, r4, r5
 8005be4:	42a3      	cmp	r3, r4
 8005be6:	6025      	str	r5, [r4, #0]
 8005be8:	bf18      	it	ne
 8005bea:	6059      	strne	r1, [r3, #4]
 8005bec:	6863      	ldr	r3, [r4, #4]
 8005bee:	bf08      	it	eq
 8005bf0:	f8c8 1000 	streq.w	r1, [r8]
 8005bf4:	5162      	str	r2, [r4, r5]
 8005bf6:	604b      	str	r3, [r1, #4]
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	f104 060b 	add.w	r6, r4, #11
 8005bfe:	f000 f829 	bl	8005c54 <__malloc_unlock>
 8005c02:	f026 0607 	bic.w	r6, r6, #7
 8005c06:	1d23      	adds	r3, r4, #4
 8005c08:	1af2      	subs	r2, r6, r3
 8005c0a:	d0ae      	beq.n	8005b6a <_malloc_r+0x22>
 8005c0c:	1b9b      	subs	r3, r3, r6
 8005c0e:	50a3      	str	r3, [r4, r2]
 8005c10:	e7ab      	b.n	8005b6a <_malloc_r+0x22>
 8005c12:	42a3      	cmp	r3, r4
 8005c14:	6862      	ldr	r2, [r4, #4]
 8005c16:	d1dd      	bne.n	8005bd4 <_malloc_r+0x8c>
 8005c18:	f8c8 2000 	str.w	r2, [r8]
 8005c1c:	e7ec      	b.n	8005bf8 <_malloc_r+0xb0>
 8005c1e:	4623      	mov	r3, r4
 8005c20:	6864      	ldr	r4, [r4, #4]
 8005c22:	e7ac      	b.n	8005b7e <_malloc_r+0x36>
 8005c24:	4634      	mov	r4, r6
 8005c26:	6876      	ldr	r6, [r6, #4]
 8005c28:	e7b4      	b.n	8005b94 <_malloc_r+0x4c>
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	e7cc      	b.n	8005bc8 <_malloc_r+0x80>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	4638      	mov	r0, r7
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	f000 f80e 	bl	8005c54 <__malloc_unlock>
 8005c38:	e797      	b.n	8005b6a <_malloc_r+0x22>
 8005c3a:	6025      	str	r5, [r4, #0]
 8005c3c:	e7dc      	b.n	8005bf8 <_malloc_r+0xb0>
 8005c3e:	605b      	str	r3, [r3, #4]
 8005c40:	deff      	udf	#255	; 0xff
 8005c42:	bf00      	nop
 8005c44:	2000043c 	.word	0x2000043c

08005c48 <__malloc_lock>:
 8005c48:	4801      	ldr	r0, [pc, #4]	; (8005c50 <__malloc_lock+0x8>)
 8005c4a:	f7ff b87c 	b.w	8004d46 <__retarget_lock_acquire_recursive>
 8005c4e:	bf00      	nop
 8005c50:	20000438 	.word	0x20000438

08005c54 <__malloc_unlock>:
 8005c54:	4801      	ldr	r0, [pc, #4]	; (8005c5c <__malloc_unlock+0x8>)
 8005c56:	f7ff b877 	b.w	8004d48 <__retarget_lock_release_recursive>
 8005c5a:	bf00      	nop
 8005c5c:	20000438 	.word	0x20000438

08005c60 <_Balloc>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	69c6      	ldr	r6, [r0, #28]
 8005c64:	4604      	mov	r4, r0
 8005c66:	460d      	mov	r5, r1
 8005c68:	b976      	cbnz	r6, 8005c88 <_Balloc+0x28>
 8005c6a:	2010      	movs	r0, #16
 8005c6c:	f7ff ff44 	bl	8005af8 <malloc>
 8005c70:	4602      	mov	r2, r0
 8005c72:	61e0      	str	r0, [r4, #28]
 8005c74:	b920      	cbnz	r0, 8005c80 <_Balloc+0x20>
 8005c76:	216b      	movs	r1, #107	; 0x6b
 8005c78:	4b17      	ldr	r3, [pc, #92]	; (8005cd8 <_Balloc+0x78>)
 8005c7a:	4818      	ldr	r0, [pc, #96]	; (8005cdc <_Balloc+0x7c>)
 8005c7c:	f001 ff46 	bl	8007b0c <__assert_func>
 8005c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c84:	6006      	str	r6, [r0, #0]
 8005c86:	60c6      	str	r6, [r0, #12]
 8005c88:	69e6      	ldr	r6, [r4, #28]
 8005c8a:	68f3      	ldr	r3, [r6, #12]
 8005c8c:	b183      	cbz	r3, 8005cb0 <_Balloc+0x50>
 8005c8e:	69e3      	ldr	r3, [r4, #28]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c96:	b9b8      	cbnz	r0, 8005cc8 <_Balloc+0x68>
 8005c98:	2101      	movs	r1, #1
 8005c9a:	fa01 f605 	lsl.w	r6, r1, r5
 8005c9e:	1d72      	adds	r2, r6, #5
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	0092      	lsls	r2, r2, #2
 8005ca4:	f001 ff50 	bl	8007b48 <_calloc_r>
 8005ca8:	b160      	cbz	r0, 8005cc4 <_Balloc+0x64>
 8005caa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cae:	e00e      	b.n	8005cce <_Balloc+0x6e>
 8005cb0:	2221      	movs	r2, #33	; 0x21
 8005cb2:	2104      	movs	r1, #4
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f001 ff47 	bl	8007b48 <_calloc_r>
 8005cba:	69e3      	ldr	r3, [r4, #28]
 8005cbc:	60f0      	str	r0, [r6, #12]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e4      	bne.n	8005c8e <_Balloc+0x2e>
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}
 8005cc8:	6802      	ldr	r2, [r0, #0]
 8005cca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cd4:	e7f7      	b.n	8005cc6 <_Balloc+0x66>
 8005cd6:	bf00      	nop
 8005cd8:	08009d06 	.word	0x08009d06
 8005cdc:	08009d86 	.word	0x08009d86

08005ce0 <_Bfree>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	69c6      	ldr	r6, [r0, #28]
 8005ce4:	4605      	mov	r5, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	b976      	cbnz	r6, 8005d08 <_Bfree+0x28>
 8005cea:	2010      	movs	r0, #16
 8005cec:	f7ff ff04 	bl	8005af8 <malloc>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	61e8      	str	r0, [r5, #28]
 8005cf4:	b920      	cbnz	r0, 8005d00 <_Bfree+0x20>
 8005cf6:	218f      	movs	r1, #143	; 0x8f
 8005cf8:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <_Bfree+0x3c>)
 8005cfa:	4809      	ldr	r0, [pc, #36]	; (8005d20 <_Bfree+0x40>)
 8005cfc:	f001 ff06 	bl	8007b0c <__assert_func>
 8005d00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d04:	6006      	str	r6, [r0, #0]
 8005d06:	60c6      	str	r6, [r0, #12]
 8005d08:	b13c      	cbz	r4, 8005d1a <_Bfree+0x3a>
 8005d0a:	69eb      	ldr	r3, [r5, #28]
 8005d0c:	6862      	ldr	r2, [r4, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d14:	6021      	str	r1, [r4, #0]
 8005d16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	08009d06 	.word	0x08009d06
 8005d20:	08009d86 	.word	0x08009d86

08005d24 <__multadd>:
 8005d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d28:	4607      	mov	r7, r0
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	461e      	mov	r6, r3
 8005d2e:	2000      	movs	r0, #0
 8005d30:	690d      	ldr	r5, [r1, #16]
 8005d32:	f101 0c14 	add.w	ip, r1, #20
 8005d36:	f8dc 3000 	ldr.w	r3, [ip]
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	b299      	uxth	r1, r3
 8005d3e:	fb02 6101 	mla	r1, r2, r1, r6
 8005d42:	0c1e      	lsrs	r6, r3, #16
 8005d44:	0c0b      	lsrs	r3, r1, #16
 8005d46:	fb02 3306 	mla	r3, r2, r6, r3
 8005d4a:	b289      	uxth	r1, r1
 8005d4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d50:	4285      	cmp	r5, r0
 8005d52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d56:	f84c 1b04 	str.w	r1, [ip], #4
 8005d5a:	dcec      	bgt.n	8005d36 <__multadd+0x12>
 8005d5c:	b30e      	cbz	r6, 8005da2 <__multadd+0x7e>
 8005d5e:	68a3      	ldr	r3, [r4, #8]
 8005d60:	42ab      	cmp	r3, r5
 8005d62:	dc19      	bgt.n	8005d98 <__multadd+0x74>
 8005d64:	6861      	ldr	r1, [r4, #4]
 8005d66:	4638      	mov	r0, r7
 8005d68:	3101      	adds	r1, #1
 8005d6a:	f7ff ff79 	bl	8005c60 <_Balloc>
 8005d6e:	4680      	mov	r8, r0
 8005d70:	b928      	cbnz	r0, 8005d7e <__multadd+0x5a>
 8005d72:	4602      	mov	r2, r0
 8005d74:	21ba      	movs	r1, #186	; 0xba
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <__multadd+0x84>)
 8005d78:	480c      	ldr	r0, [pc, #48]	; (8005dac <__multadd+0x88>)
 8005d7a:	f001 fec7 	bl	8007b0c <__assert_func>
 8005d7e:	6922      	ldr	r2, [r4, #16]
 8005d80:	f104 010c 	add.w	r1, r4, #12
 8005d84:	3202      	adds	r2, #2
 8005d86:	0092      	lsls	r2, r2, #2
 8005d88:	300c      	adds	r0, #12
 8005d8a:	f7fe ffec 	bl	8004d66 <memcpy>
 8005d8e:	4621      	mov	r1, r4
 8005d90:	4638      	mov	r0, r7
 8005d92:	f7ff ffa5 	bl	8005ce0 <_Bfree>
 8005d96:	4644      	mov	r4, r8
 8005d98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d9c:	3501      	adds	r5, #1
 8005d9e:	615e      	str	r6, [r3, #20]
 8005da0:	6125      	str	r5, [r4, #16]
 8005da2:	4620      	mov	r0, r4
 8005da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da8:	08009d75 	.word	0x08009d75
 8005dac:	08009d86 	.word	0x08009d86

08005db0 <__s2b>:
 8005db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db4:	4615      	mov	r5, r2
 8005db6:	2209      	movs	r2, #9
 8005db8:	461f      	mov	r7, r3
 8005dba:	3308      	adds	r3, #8
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	db09      	blt.n	8005de0 <__s2b+0x30>
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f7ff ff47 	bl	8005c60 <_Balloc>
 8005dd2:	b940      	cbnz	r0, 8005de6 <__s2b+0x36>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	21d3      	movs	r1, #211	; 0xd3
 8005dd8:	4b18      	ldr	r3, [pc, #96]	; (8005e3c <__s2b+0x8c>)
 8005dda:	4819      	ldr	r0, [pc, #100]	; (8005e40 <__s2b+0x90>)
 8005ddc:	f001 fe96 	bl	8007b0c <__assert_func>
 8005de0:	0052      	lsls	r2, r2, #1
 8005de2:	3101      	adds	r1, #1
 8005de4:	e7f0      	b.n	8005dc8 <__s2b+0x18>
 8005de6:	9b08      	ldr	r3, [sp, #32]
 8005de8:	2d09      	cmp	r5, #9
 8005dea:	6143      	str	r3, [r0, #20]
 8005dec:	f04f 0301 	mov.w	r3, #1
 8005df0:	6103      	str	r3, [r0, #16]
 8005df2:	dd16      	ble.n	8005e22 <__s2b+0x72>
 8005df4:	f104 0909 	add.w	r9, r4, #9
 8005df8:	46c8      	mov	r8, r9
 8005dfa:	442c      	add	r4, r5
 8005dfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e00:	4601      	mov	r1, r0
 8005e02:	220a      	movs	r2, #10
 8005e04:	4630      	mov	r0, r6
 8005e06:	3b30      	subs	r3, #48	; 0x30
 8005e08:	f7ff ff8c 	bl	8005d24 <__multadd>
 8005e0c:	45a0      	cmp	r8, r4
 8005e0e:	d1f5      	bne.n	8005dfc <__s2b+0x4c>
 8005e10:	f1a5 0408 	sub.w	r4, r5, #8
 8005e14:	444c      	add	r4, r9
 8005e16:	1b2d      	subs	r5, r5, r4
 8005e18:	1963      	adds	r3, r4, r5
 8005e1a:	42bb      	cmp	r3, r7
 8005e1c:	db04      	blt.n	8005e28 <__s2b+0x78>
 8005e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e22:	2509      	movs	r5, #9
 8005e24:	340a      	adds	r4, #10
 8005e26:	e7f6      	b.n	8005e16 <__s2b+0x66>
 8005e28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e2c:	4601      	mov	r1, r0
 8005e2e:	220a      	movs	r2, #10
 8005e30:	4630      	mov	r0, r6
 8005e32:	3b30      	subs	r3, #48	; 0x30
 8005e34:	f7ff ff76 	bl	8005d24 <__multadd>
 8005e38:	e7ee      	b.n	8005e18 <__s2b+0x68>
 8005e3a:	bf00      	nop
 8005e3c:	08009d75 	.word	0x08009d75
 8005e40:	08009d86 	.word	0x08009d86

08005e44 <__hi0bits>:
 8005e44:	0c02      	lsrs	r2, r0, #16
 8005e46:	0412      	lsls	r2, r2, #16
 8005e48:	4603      	mov	r3, r0
 8005e4a:	b9ca      	cbnz	r2, 8005e80 <__hi0bits+0x3c>
 8005e4c:	0403      	lsls	r3, r0, #16
 8005e4e:	2010      	movs	r0, #16
 8005e50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e54:	bf04      	itt	eq
 8005e56:	021b      	lsleq	r3, r3, #8
 8005e58:	3008      	addeq	r0, #8
 8005e5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e5e:	bf04      	itt	eq
 8005e60:	011b      	lsleq	r3, r3, #4
 8005e62:	3004      	addeq	r0, #4
 8005e64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e68:	bf04      	itt	eq
 8005e6a:	009b      	lsleq	r3, r3, #2
 8005e6c:	3002      	addeq	r0, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	db05      	blt.n	8005e7e <__hi0bits+0x3a>
 8005e72:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005e76:	f100 0001 	add.w	r0, r0, #1
 8005e7a:	bf08      	it	eq
 8005e7c:	2020      	moveq	r0, #32
 8005e7e:	4770      	bx	lr
 8005e80:	2000      	movs	r0, #0
 8005e82:	e7e5      	b.n	8005e50 <__hi0bits+0xc>

08005e84 <__lo0bits>:
 8005e84:	6803      	ldr	r3, [r0, #0]
 8005e86:	4602      	mov	r2, r0
 8005e88:	f013 0007 	ands.w	r0, r3, #7
 8005e8c:	d00b      	beq.n	8005ea6 <__lo0bits+0x22>
 8005e8e:	07d9      	lsls	r1, r3, #31
 8005e90:	d421      	bmi.n	8005ed6 <__lo0bits+0x52>
 8005e92:	0798      	lsls	r0, r3, #30
 8005e94:	bf49      	itett	mi
 8005e96:	085b      	lsrmi	r3, r3, #1
 8005e98:	089b      	lsrpl	r3, r3, #2
 8005e9a:	2001      	movmi	r0, #1
 8005e9c:	6013      	strmi	r3, [r2, #0]
 8005e9e:	bf5c      	itt	pl
 8005ea0:	2002      	movpl	r0, #2
 8005ea2:	6013      	strpl	r3, [r2, #0]
 8005ea4:	4770      	bx	lr
 8005ea6:	b299      	uxth	r1, r3
 8005ea8:	b909      	cbnz	r1, 8005eae <__lo0bits+0x2a>
 8005eaa:	2010      	movs	r0, #16
 8005eac:	0c1b      	lsrs	r3, r3, #16
 8005eae:	b2d9      	uxtb	r1, r3
 8005eb0:	b909      	cbnz	r1, 8005eb6 <__lo0bits+0x32>
 8005eb2:	3008      	adds	r0, #8
 8005eb4:	0a1b      	lsrs	r3, r3, #8
 8005eb6:	0719      	lsls	r1, r3, #28
 8005eb8:	bf04      	itt	eq
 8005eba:	091b      	lsreq	r3, r3, #4
 8005ebc:	3004      	addeq	r0, #4
 8005ebe:	0799      	lsls	r1, r3, #30
 8005ec0:	bf04      	itt	eq
 8005ec2:	089b      	lsreq	r3, r3, #2
 8005ec4:	3002      	addeq	r0, #2
 8005ec6:	07d9      	lsls	r1, r3, #31
 8005ec8:	d403      	bmi.n	8005ed2 <__lo0bits+0x4e>
 8005eca:	085b      	lsrs	r3, r3, #1
 8005ecc:	f100 0001 	add.w	r0, r0, #1
 8005ed0:	d003      	beq.n	8005eda <__lo0bits+0x56>
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	4770      	bx	lr
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	4770      	bx	lr
 8005eda:	2020      	movs	r0, #32
 8005edc:	4770      	bx	lr
	...

08005ee0 <__i2b>:
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	f7ff febb 	bl	8005c60 <_Balloc>
 8005eea:	4602      	mov	r2, r0
 8005eec:	b928      	cbnz	r0, 8005efa <__i2b+0x1a>
 8005eee:	f240 1145 	movw	r1, #325	; 0x145
 8005ef2:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <__i2b+0x24>)
 8005ef4:	4804      	ldr	r0, [pc, #16]	; (8005f08 <__i2b+0x28>)
 8005ef6:	f001 fe09 	bl	8007b0c <__assert_func>
 8005efa:	2301      	movs	r3, #1
 8005efc:	6144      	str	r4, [r0, #20]
 8005efe:	6103      	str	r3, [r0, #16]
 8005f00:	bd10      	pop	{r4, pc}
 8005f02:	bf00      	nop
 8005f04:	08009d75 	.word	0x08009d75
 8005f08:	08009d86 	.word	0x08009d86

08005f0c <__multiply>:
 8005f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f10:	4691      	mov	r9, r2
 8005f12:	690a      	ldr	r2, [r1, #16]
 8005f14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f18:	460c      	mov	r4, r1
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	bfbe      	ittt	lt
 8005f1e:	460b      	movlt	r3, r1
 8005f20:	464c      	movlt	r4, r9
 8005f22:	4699      	movlt	r9, r3
 8005f24:	6927      	ldr	r7, [r4, #16]
 8005f26:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f2a:	68a3      	ldr	r3, [r4, #8]
 8005f2c:	6861      	ldr	r1, [r4, #4]
 8005f2e:	eb07 060a 	add.w	r6, r7, sl
 8005f32:	42b3      	cmp	r3, r6
 8005f34:	b085      	sub	sp, #20
 8005f36:	bfb8      	it	lt
 8005f38:	3101      	addlt	r1, #1
 8005f3a:	f7ff fe91 	bl	8005c60 <_Balloc>
 8005f3e:	b930      	cbnz	r0, 8005f4e <__multiply+0x42>
 8005f40:	4602      	mov	r2, r0
 8005f42:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f46:	4b43      	ldr	r3, [pc, #268]	; (8006054 <__multiply+0x148>)
 8005f48:	4843      	ldr	r0, [pc, #268]	; (8006058 <__multiply+0x14c>)
 8005f4a:	f001 fddf 	bl	8007b0c <__assert_func>
 8005f4e:	f100 0514 	add.w	r5, r0, #20
 8005f52:	462b      	mov	r3, r5
 8005f54:	2200      	movs	r2, #0
 8005f56:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f5a:	4543      	cmp	r3, r8
 8005f5c:	d321      	bcc.n	8005fa2 <__multiply+0x96>
 8005f5e:	f104 0314 	add.w	r3, r4, #20
 8005f62:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f66:	f109 0314 	add.w	r3, r9, #20
 8005f6a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f6e:	9202      	str	r2, [sp, #8]
 8005f70:	1b3a      	subs	r2, r7, r4
 8005f72:	3a15      	subs	r2, #21
 8005f74:	f022 0203 	bic.w	r2, r2, #3
 8005f78:	3204      	adds	r2, #4
 8005f7a:	f104 0115 	add.w	r1, r4, #21
 8005f7e:	428f      	cmp	r7, r1
 8005f80:	bf38      	it	cc
 8005f82:	2204      	movcc	r2, #4
 8005f84:	9201      	str	r2, [sp, #4]
 8005f86:	9a02      	ldr	r2, [sp, #8]
 8005f88:	9303      	str	r3, [sp, #12]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d80c      	bhi.n	8005fa8 <__multiply+0x9c>
 8005f8e:	2e00      	cmp	r6, #0
 8005f90:	dd03      	ble.n	8005f9a <__multiply+0x8e>
 8005f92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d05a      	beq.n	8006050 <__multiply+0x144>
 8005f9a:	6106      	str	r6, [r0, #16]
 8005f9c:	b005      	add	sp, #20
 8005f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa2:	f843 2b04 	str.w	r2, [r3], #4
 8005fa6:	e7d8      	b.n	8005f5a <__multiply+0x4e>
 8005fa8:	f8b3 a000 	ldrh.w	sl, [r3]
 8005fac:	f1ba 0f00 	cmp.w	sl, #0
 8005fb0:	d023      	beq.n	8005ffa <__multiply+0xee>
 8005fb2:	46a9      	mov	r9, r5
 8005fb4:	f04f 0c00 	mov.w	ip, #0
 8005fb8:	f104 0e14 	add.w	lr, r4, #20
 8005fbc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005fc0:	f8d9 1000 	ldr.w	r1, [r9]
 8005fc4:	fa1f fb82 	uxth.w	fp, r2
 8005fc8:	b289      	uxth	r1, r1
 8005fca:	fb0a 110b 	mla	r1, sl, fp, r1
 8005fce:	4461      	add	r1, ip
 8005fd0:	f8d9 c000 	ldr.w	ip, [r9]
 8005fd4:	0c12      	lsrs	r2, r2, #16
 8005fd6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005fda:	fb0a c202 	mla	r2, sl, r2, ip
 8005fde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fe2:	b289      	uxth	r1, r1
 8005fe4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fe8:	4577      	cmp	r7, lr
 8005fea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fee:	f849 1b04 	str.w	r1, [r9], #4
 8005ff2:	d8e3      	bhi.n	8005fbc <__multiply+0xb0>
 8005ff4:	9a01      	ldr	r2, [sp, #4]
 8005ff6:	f845 c002 	str.w	ip, [r5, r2]
 8005ffa:	9a03      	ldr	r2, [sp, #12]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006002:	f1b9 0f00 	cmp.w	r9, #0
 8006006:	d021      	beq.n	800604c <__multiply+0x140>
 8006008:	46ae      	mov	lr, r5
 800600a:	f04f 0a00 	mov.w	sl, #0
 800600e:	6829      	ldr	r1, [r5, #0]
 8006010:	f104 0c14 	add.w	ip, r4, #20
 8006014:	f8bc b000 	ldrh.w	fp, [ip]
 8006018:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800601c:	b289      	uxth	r1, r1
 800601e:	fb09 220b 	mla	r2, r9, fp, r2
 8006022:	4452      	add	r2, sl
 8006024:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006028:	f84e 1b04 	str.w	r1, [lr], #4
 800602c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006030:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006034:	f8be 1000 	ldrh.w	r1, [lr]
 8006038:	4567      	cmp	r7, ip
 800603a:	fb09 110a 	mla	r1, r9, sl, r1
 800603e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006042:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006046:	d8e5      	bhi.n	8006014 <__multiply+0x108>
 8006048:	9a01      	ldr	r2, [sp, #4]
 800604a:	50a9      	str	r1, [r5, r2]
 800604c:	3504      	adds	r5, #4
 800604e:	e79a      	b.n	8005f86 <__multiply+0x7a>
 8006050:	3e01      	subs	r6, #1
 8006052:	e79c      	b.n	8005f8e <__multiply+0x82>
 8006054:	08009d75 	.word	0x08009d75
 8006058:	08009d86 	.word	0x08009d86

0800605c <__pow5mult>:
 800605c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006060:	4615      	mov	r5, r2
 8006062:	f012 0203 	ands.w	r2, r2, #3
 8006066:	4606      	mov	r6, r0
 8006068:	460f      	mov	r7, r1
 800606a:	d007      	beq.n	800607c <__pow5mult+0x20>
 800606c:	4c25      	ldr	r4, [pc, #148]	; (8006104 <__pow5mult+0xa8>)
 800606e:	3a01      	subs	r2, #1
 8006070:	2300      	movs	r3, #0
 8006072:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006076:	f7ff fe55 	bl	8005d24 <__multadd>
 800607a:	4607      	mov	r7, r0
 800607c:	10ad      	asrs	r5, r5, #2
 800607e:	d03d      	beq.n	80060fc <__pow5mult+0xa0>
 8006080:	69f4      	ldr	r4, [r6, #28]
 8006082:	b97c      	cbnz	r4, 80060a4 <__pow5mult+0x48>
 8006084:	2010      	movs	r0, #16
 8006086:	f7ff fd37 	bl	8005af8 <malloc>
 800608a:	4602      	mov	r2, r0
 800608c:	61f0      	str	r0, [r6, #28]
 800608e:	b928      	cbnz	r0, 800609c <__pow5mult+0x40>
 8006090:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006094:	4b1c      	ldr	r3, [pc, #112]	; (8006108 <__pow5mult+0xac>)
 8006096:	481d      	ldr	r0, [pc, #116]	; (800610c <__pow5mult+0xb0>)
 8006098:	f001 fd38 	bl	8007b0c <__assert_func>
 800609c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060a0:	6004      	str	r4, [r0, #0]
 80060a2:	60c4      	str	r4, [r0, #12]
 80060a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80060a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060ac:	b94c      	cbnz	r4, 80060c2 <__pow5mult+0x66>
 80060ae:	f240 2171 	movw	r1, #625	; 0x271
 80060b2:	4630      	mov	r0, r6
 80060b4:	f7ff ff14 	bl	8005ee0 <__i2b>
 80060b8:	2300      	movs	r3, #0
 80060ba:	4604      	mov	r4, r0
 80060bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80060c0:	6003      	str	r3, [r0, #0]
 80060c2:	f04f 0900 	mov.w	r9, #0
 80060c6:	07eb      	lsls	r3, r5, #31
 80060c8:	d50a      	bpl.n	80060e0 <__pow5mult+0x84>
 80060ca:	4639      	mov	r1, r7
 80060cc:	4622      	mov	r2, r4
 80060ce:	4630      	mov	r0, r6
 80060d0:	f7ff ff1c 	bl	8005f0c <__multiply>
 80060d4:	4680      	mov	r8, r0
 80060d6:	4639      	mov	r1, r7
 80060d8:	4630      	mov	r0, r6
 80060da:	f7ff fe01 	bl	8005ce0 <_Bfree>
 80060de:	4647      	mov	r7, r8
 80060e0:	106d      	asrs	r5, r5, #1
 80060e2:	d00b      	beq.n	80060fc <__pow5mult+0xa0>
 80060e4:	6820      	ldr	r0, [r4, #0]
 80060e6:	b938      	cbnz	r0, 80060f8 <__pow5mult+0x9c>
 80060e8:	4622      	mov	r2, r4
 80060ea:	4621      	mov	r1, r4
 80060ec:	4630      	mov	r0, r6
 80060ee:	f7ff ff0d 	bl	8005f0c <__multiply>
 80060f2:	6020      	str	r0, [r4, #0]
 80060f4:	f8c0 9000 	str.w	r9, [r0]
 80060f8:	4604      	mov	r4, r0
 80060fa:	e7e4      	b.n	80060c6 <__pow5mult+0x6a>
 80060fc:	4638      	mov	r0, r7
 80060fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006102:	bf00      	nop
 8006104:	08009ed0 	.word	0x08009ed0
 8006108:	08009d06 	.word	0x08009d06
 800610c:	08009d86 	.word	0x08009d86

08006110 <__lshift>:
 8006110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	460c      	mov	r4, r1
 8006116:	4607      	mov	r7, r0
 8006118:	4691      	mov	r9, r2
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	6849      	ldr	r1, [r1, #4]
 800611e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006122:	68a3      	ldr	r3, [r4, #8]
 8006124:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006128:	f108 0601 	add.w	r6, r8, #1
 800612c:	42b3      	cmp	r3, r6
 800612e:	db0b      	blt.n	8006148 <__lshift+0x38>
 8006130:	4638      	mov	r0, r7
 8006132:	f7ff fd95 	bl	8005c60 <_Balloc>
 8006136:	4605      	mov	r5, r0
 8006138:	b948      	cbnz	r0, 800614e <__lshift+0x3e>
 800613a:	4602      	mov	r2, r0
 800613c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006140:	4b27      	ldr	r3, [pc, #156]	; (80061e0 <__lshift+0xd0>)
 8006142:	4828      	ldr	r0, [pc, #160]	; (80061e4 <__lshift+0xd4>)
 8006144:	f001 fce2 	bl	8007b0c <__assert_func>
 8006148:	3101      	adds	r1, #1
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	e7ee      	b.n	800612c <__lshift+0x1c>
 800614e:	2300      	movs	r3, #0
 8006150:	f100 0114 	add.w	r1, r0, #20
 8006154:	f100 0210 	add.w	r2, r0, #16
 8006158:	4618      	mov	r0, r3
 800615a:	4553      	cmp	r3, sl
 800615c:	db33      	blt.n	80061c6 <__lshift+0xb6>
 800615e:	6920      	ldr	r0, [r4, #16]
 8006160:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006164:	f104 0314 	add.w	r3, r4, #20
 8006168:	f019 091f 	ands.w	r9, r9, #31
 800616c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006170:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006174:	d02b      	beq.n	80061ce <__lshift+0xbe>
 8006176:	468a      	mov	sl, r1
 8006178:	2200      	movs	r2, #0
 800617a:	f1c9 0e20 	rsb	lr, r9, #32
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	fa00 f009 	lsl.w	r0, r0, r9
 8006184:	4310      	orrs	r0, r2
 8006186:	f84a 0b04 	str.w	r0, [sl], #4
 800618a:	f853 2b04 	ldr.w	r2, [r3], #4
 800618e:	459c      	cmp	ip, r3
 8006190:	fa22 f20e 	lsr.w	r2, r2, lr
 8006194:	d8f3      	bhi.n	800617e <__lshift+0x6e>
 8006196:	ebac 0304 	sub.w	r3, ip, r4
 800619a:	3b15      	subs	r3, #21
 800619c:	f023 0303 	bic.w	r3, r3, #3
 80061a0:	3304      	adds	r3, #4
 80061a2:	f104 0015 	add.w	r0, r4, #21
 80061a6:	4584      	cmp	ip, r0
 80061a8:	bf38      	it	cc
 80061aa:	2304      	movcc	r3, #4
 80061ac:	50ca      	str	r2, [r1, r3]
 80061ae:	b10a      	cbz	r2, 80061b4 <__lshift+0xa4>
 80061b0:	f108 0602 	add.w	r6, r8, #2
 80061b4:	3e01      	subs	r6, #1
 80061b6:	4638      	mov	r0, r7
 80061b8:	4621      	mov	r1, r4
 80061ba:	612e      	str	r6, [r5, #16]
 80061bc:	f7ff fd90 	bl	8005ce0 <_Bfree>
 80061c0:	4628      	mov	r0, r5
 80061c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80061ca:	3301      	adds	r3, #1
 80061cc:	e7c5      	b.n	800615a <__lshift+0x4a>
 80061ce:	3904      	subs	r1, #4
 80061d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d4:	459c      	cmp	ip, r3
 80061d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80061da:	d8f9      	bhi.n	80061d0 <__lshift+0xc0>
 80061dc:	e7ea      	b.n	80061b4 <__lshift+0xa4>
 80061de:	bf00      	nop
 80061e0:	08009d75 	.word	0x08009d75
 80061e4:	08009d86 	.word	0x08009d86

080061e8 <__mcmp>:
 80061e8:	4603      	mov	r3, r0
 80061ea:	690a      	ldr	r2, [r1, #16]
 80061ec:	6900      	ldr	r0, [r0, #16]
 80061ee:	b530      	push	{r4, r5, lr}
 80061f0:	1a80      	subs	r0, r0, r2
 80061f2:	d10d      	bne.n	8006210 <__mcmp+0x28>
 80061f4:	3314      	adds	r3, #20
 80061f6:	3114      	adds	r1, #20
 80061f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80061fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006200:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006204:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006208:	4295      	cmp	r5, r2
 800620a:	d002      	beq.n	8006212 <__mcmp+0x2a>
 800620c:	d304      	bcc.n	8006218 <__mcmp+0x30>
 800620e:	2001      	movs	r0, #1
 8006210:	bd30      	pop	{r4, r5, pc}
 8006212:	42a3      	cmp	r3, r4
 8006214:	d3f4      	bcc.n	8006200 <__mcmp+0x18>
 8006216:	e7fb      	b.n	8006210 <__mcmp+0x28>
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	e7f8      	b.n	8006210 <__mcmp+0x28>
	...

08006220 <__mdiff>:
 8006220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	460d      	mov	r5, r1
 8006226:	4607      	mov	r7, r0
 8006228:	4611      	mov	r1, r2
 800622a:	4628      	mov	r0, r5
 800622c:	4614      	mov	r4, r2
 800622e:	f7ff ffdb 	bl	80061e8 <__mcmp>
 8006232:	1e06      	subs	r6, r0, #0
 8006234:	d111      	bne.n	800625a <__mdiff+0x3a>
 8006236:	4631      	mov	r1, r6
 8006238:	4638      	mov	r0, r7
 800623a:	f7ff fd11 	bl	8005c60 <_Balloc>
 800623e:	4602      	mov	r2, r0
 8006240:	b928      	cbnz	r0, 800624e <__mdiff+0x2e>
 8006242:	f240 2137 	movw	r1, #567	; 0x237
 8006246:	4b3a      	ldr	r3, [pc, #232]	; (8006330 <__mdiff+0x110>)
 8006248:	483a      	ldr	r0, [pc, #232]	; (8006334 <__mdiff+0x114>)
 800624a:	f001 fc5f 	bl	8007b0c <__assert_func>
 800624e:	2301      	movs	r3, #1
 8006250:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006254:	4610      	mov	r0, r2
 8006256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625a:	bfa4      	itt	ge
 800625c:	4623      	movge	r3, r4
 800625e:	462c      	movge	r4, r5
 8006260:	4638      	mov	r0, r7
 8006262:	6861      	ldr	r1, [r4, #4]
 8006264:	bfa6      	itte	ge
 8006266:	461d      	movge	r5, r3
 8006268:	2600      	movge	r6, #0
 800626a:	2601      	movlt	r6, #1
 800626c:	f7ff fcf8 	bl	8005c60 <_Balloc>
 8006270:	4602      	mov	r2, r0
 8006272:	b918      	cbnz	r0, 800627c <__mdiff+0x5c>
 8006274:	f240 2145 	movw	r1, #581	; 0x245
 8006278:	4b2d      	ldr	r3, [pc, #180]	; (8006330 <__mdiff+0x110>)
 800627a:	e7e5      	b.n	8006248 <__mdiff+0x28>
 800627c:	f102 0814 	add.w	r8, r2, #20
 8006280:	46c2      	mov	sl, r8
 8006282:	f04f 0c00 	mov.w	ip, #0
 8006286:	6927      	ldr	r7, [r4, #16]
 8006288:	60c6      	str	r6, [r0, #12]
 800628a:	692e      	ldr	r6, [r5, #16]
 800628c:	f104 0014 	add.w	r0, r4, #20
 8006290:	f105 0914 	add.w	r9, r5, #20
 8006294:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006298:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800629c:	3410      	adds	r4, #16
 800629e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80062a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80062a6:	fa1f f18b 	uxth.w	r1, fp
 80062aa:	4461      	add	r1, ip
 80062ac:	fa1f fc83 	uxth.w	ip, r3
 80062b0:	0c1b      	lsrs	r3, r3, #16
 80062b2:	eba1 010c 	sub.w	r1, r1, ip
 80062b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80062ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80062be:	b289      	uxth	r1, r1
 80062c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80062c4:	454e      	cmp	r6, r9
 80062c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80062ca:	f84a 1b04 	str.w	r1, [sl], #4
 80062ce:	d8e6      	bhi.n	800629e <__mdiff+0x7e>
 80062d0:	1b73      	subs	r3, r6, r5
 80062d2:	3b15      	subs	r3, #21
 80062d4:	f023 0303 	bic.w	r3, r3, #3
 80062d8:	3515      	adds	r5, #21
 80062da:	3304      	adds	r3, #4
 80062dc:	42ae      	cmp	r6, r5
 80062de:	bf38      	it	cc
 80062e0:	2304      	movcc	r3, #4
 80062e2:	4418      	add	r0, r3
 80062e4:	4443      	add	r3, r8
 80062e6:	461e      	mov	r6, r3
 80062e8:	4605      	mov	r5, r0
 80062ea:	4575      	cmp	r5, lr
 80062ec:	d30e      	bcc.n	800630c <__mdiff+0xec>
 80062ee:	f10e 0103 	add.w	r1, lr, #3
 80062f2:	1a09      	subs	r1, r1, r0
 80062f4:	f021 0103 	bic.w	r1, r1, #3
 80062f8:	3803      	subs	r0, #3
 80062fa:	4586      	cmp	lr, r0
 80062fc:	bf38      	it	cc
 80062fe:	2100      	movcc	r1, #0
 8006300:	440b      	add	r3, r1
 8006302:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006306:	b189      	cbz	r1, 800632c <__mdiff+0x10c>
 8006308:	6117      	str	r7, [r2, #16]
 800630a:	e7a3      	b.n	8006254 <__mdiff+0x34>
 800630c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006310:	fa1f f188 	uxth.w	r1, r8
 8006314:	4461      	add	r1, ip
 8006316:	140c      	asrs	r4, r1, #16
 8006318:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800631c:	b289      	uxth	r1, r1
 800631e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006322:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006326:	f846 1b04 	str.w	r1, [r6], #4
 800632a:	e7de      	b.n	80062ea <__mdiff+0xca>
 800632c:	3f01      	subs	r7, #1
 800632e:	e7e8      	b.n	8006302 <__mdiff+0xe2>
 8006330:	08009d75 	.word	0x08009d75
 8006334:	08009d86 	.word	0x08009d86

08006338 <__ulp>:
 8006338:	4b0e      	ldr	r3, [pc, #56]	; (8006374 <__ulp+0x3c>)
 800633a:	400b      	ands	r3, r1
 800633c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006340:	2b00      	cmp	r3, #0
 8006342:	dc08      	bgt.n	8006356 <__ulp+0x1e>
 8006344:	425b      	negs	r3, r3
 8006346:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800634a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800634e:	da04      	bge.n	800635a <__ulp+0x22>
 8006350:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006354:	4113      	asrs	r3, r2
 8006356:	2200      	movs	r2, #0
 8006358:	e008      	b.n	800636c <__ulp+0x34>
 800635a:	f1a2 0314 	sub.w	r3, r2, #20
 800635e:	2b1e      	cmp	r3, #30
 8006360:	bfd6      	itet	le
 8006362:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006366:	2201      	movgt	r2, #1
 8006368:	40da      	lsrle	r2, r3
 800636a:	2300      	movs	r3, #0
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	7ff00000 	.word	0x7ff00000

08006378 <__b2d>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	6905      	ldr	r5, [r0, #16]
 800637c:	f100 0714 	add.w	r7, r0, #20
 8006380:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006384:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006388:	1f2e      	subs	r6, r5, #4
 800638a:	4620      	mov	r0, r4
 800638c:	f7ff fd5a 	bl	8005e44 <__hi0bits>
 8006390:	f1c0 0220 	rsb	r2, r0, #32
 8006394:	280a      	cmp	r0, #10
 8006396:	4603      	mov	r3, r0
 8006398:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006404 <__b2d+0x8c>
 800639c:	600a      	str	r2, [r1, #0]
 800639e:	dc12      	bgt.n	80063c6 <__b2d+0x4e>
 80063a0:	f1c0 0e0b 	rsb	lr, r0, #11
 80063a4:	fa24 f20e 	lsr.w	r2, r4, lr
 80063a8:	42b7      	cmp	r7, r6
 80063aa:	ea42 010c 	orr.w	r1, r2, ip
 80063ae:	bf2c      	ite	cs
 80063b0:	2200      	movcs	r2, #0
 80063b2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80063b6:	3315      	adds	r3, #21
 80063b8:	fa04 f303 	lsl.w	r3, r4, r3
 80063bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80063c0:	431a      	orrs	r2, r3
 80063c2:	4610      	mov	r0, r2
 80063c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063c6:	42b7      	cmp	r7, r6
 80063c8:	bf2e      	itee	cs
 80063ca:	2200      	movcs	r2, #0
 80063cc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80063d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80063d4:	3b0b      	subs	r3, #11
 80063d6:	d012      	beq.n	80063fe <__b2d+0x86>
 80063d8:	f1c3 0520 	rsb	r5, r3, #32
 80063dc:	fa22 f105 	lsr.w	r1, r2, r5
 80063e0:	409c      	lsls	r4, r3
 80063e2:	430c      	orrs	r4, r1
 80063e4:	42be      	cmp	r6, r7
 80063e6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80063ea:	bf94      	ite	ls
 80063ec:	2400      	movls	r4, #0
 80063ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80063f2:	409a      	lsls	r2, r3
 80063f4:	40ec      	lsrs	r4, r5
 80063f6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80063fa:	4322      	orrs	r2, r4
 80063fc:	e7e1      	b.n	80063c2 <__b2d+0x4a>
 80063fe:	ea44 010c 	orr.w	r1, r4, ip
 8006402:	e7de      	b.n	80063c2 <__b2d+0x4a>
 8006404:	3ff00000 	.word	0x3ff00000

08006408 <__d2b>:
 8006408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800640a:	2101      	movs	r1, #1
 800640c:	4617      	mov	r7, r2
 800640e:	461c      	mov	r4, r3
 8006410:	9e08      	ldr	r6, [sp, #32]
 8006412:	f7ff fc25 	bl	8005c60 <_Balloc>
 8006416:	4605      	mov	r5, r0
 8006418:	b930      	cbnz	r0, 8006428 <__d2b+0x20>
 800641a:	4602      	mov	r2, r0
 800641c:	f240 310f 	movw	r1, #783	; 0x30f
 8006420:	4b22      	ldr	r3, [pc, #136]	; (80064ac <__d2b+0xa4>)
 8006422:	4823      	ldr	r0, [pc, #140]	; (80064b0 <__d2b+0xa8>)
 8006424:	f001 fb72 	bl	8007b0c <__assert_func>
 8006428:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800642c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006430:	bb24      	cbnz	r4, 800647c <__d2b+0x74>
 8006432:	2f00      	cmp	r7, #0
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	d026      	beq.n	8006486 <__d2b+0x7e>
 8006438:	4668      	mov	r0, sp
 800643a:	9700      	str	r7, [sp, #0]
 800643c:	f7ff fd22 	bl	8005e84 <__lo0bits>
 8006440:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006444:	b1e8      	cbz	r0, 8006482 <__d2b+0x7a>
 8006446:	f1c0 0320 	rsb	r3, r0, #32
 800644a:	fa02 f303 	lsl.w	r3, r2, r3
 800644e:	430b      	orrs	r3, r1
 8006450:	40c2      	lsrs	r2, r0
 8006452:	616b      	str	r3, [r5, #20]
 8006454:	9201      	str	r2, [sp, #4]
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	bf14      	ite	ne
 800645c:	2102      	movne	r1, #2
 800645e:	2101      	moveq	r1, #1
 8006460:	61ab      	str	r3, [r5, #24]
 8006462:	6129      	str	r1, [r5, #16]
 8006464:	b1bc      	cbz	r4, 8006496 <__d2b+0x8e>
 8006466:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800646a:	4404      	add	r4, r0
 800646c:	6034      	str	r4, [r6, #0]
 800646e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006474:	6018      	str	r0, [r3, #0]
 8006476:	4628      	mov	r0, r5
 8006478:	b003      	add	sp, #12
 800647a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800647c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006480:	e7d7      	b.n	8006432 <__d2b+0x2a>
 8006482:	6169      	str	r1, [r5, #20]
 8006484:	e7e7      	b.n	8006456 <__d2b+0x4e>
 8006486:	a801      	add	r0, sp, #4
 8006488:	f7ff fcfc 	bl	8005e84 <__lo0bits>
 800648c:	9b01      	ldr	r3, [sp, #4]
 800648e:	2101      	movs	r1, #1
 8006490:	616b      	str	r3, [r5, #20]
 8006492:	3020      	adds	r0, #32
 8006494:	e7e5      	b.n	8006462 <__d2b+0x5a>
 8006496:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800649a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800649e:	6030      	str	r0, [r6, #0]
 80064a0:	6918      	ldr	r0, [r3, #16]
 80064a2:	f7ff fccf 	bl	8005e44 <__hi0bits>
 80064a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064aa:	e7e2      	b.n	8006472 <__d2b+0x6a>
 80064ac:	08009d75 	.word	0x08009d75
 80064b0:	08009d86 	.word	0x08009d86

080064b4 <__ratio>:
 80064b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	4688      	mov	r8, r1
 80064ba:	4669      	mov	r1, sp
 80064bc:	4681      	mov	r9, r0
 80064be:	f7ff ff5b 	bl	8006378 <__b2d>
 80064c2:	460f      	mov	r7, r1
 80064c4:	4604      	mov	r4, r0
 80064c6:	460d      	mov	r5, r1
 80064c8:	4640      	mov	r0, r8
 80064ca:	a901      	add	r1, sp, #4
 80064cc:	f7ff ff54 	bl	8006378 <__b2d>
 80064d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80064d8:	468b      	mov	fp, r1
 80064da:	eba3 0c02 	sub.w	ip, r3, r2
 80064de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80064e2:	1a9b      	subs	r3, r3, r2
 80064e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	bfd5      	itete	le
 80064ec:	460a      	movle	r2, r1
 80064ee:	462a      	movgt	r2, r5
 80064f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80064f4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80064f8:	bfd8      	it	le
 80064fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80064fe:	465b      	mov	r3, fp
 8006500:	4602      	mov	r2, r0
 8006502:	4639      	mov	r1, r7
 8006504:	4620      	mov	r0, r4
 8006506:	f7fa f921 	bl	800074c <__aeabi_ddiv>
 800650a:	b003      	add	sp, #12
 800650c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006510 <__copybits>:
 8006510:	3901      	subs	r1, #1
 8006512:	b570      	push	{r4, r5, r6, lr}
 8006514:	1149      	asrs	r1, r1, #5
 8006516:	6914      	ldr	r4, [r2, #16]
 8006518:	3101      	adds	r1, #1
 800651a:	f102 0314 	add.w	r3, r2, #20
 800651e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006522:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006526:	1f05      	subs	r5, r0, #4
 8006528:	42a3      	cmp	r3, r4
 800652a:	d30c      	bcc.n	8006546 <__copybits+0x36>
 800652c:	1aa3      	subs	r3, r4, r2
 800652e:	3b11      	subs	r3, #17
 8006530:	f023 0303 	bic.w	r3, r3, #3
 8006534:	3211      	adds	r2, #17
 8006536:	42a2      	cmp	r2, r4
 8006538:	bf88      	it	hi
 800653a:	2300      	movhi	r3, #0
 800653c:	4418      	add	r0, r3
 800653e:	2300      	movs	r3, #0
 8006540:	4288      	cmp	r0, r1
 8006542:	d305      	bcc.n	8006550 <__copybits+0x40>
 8006544:	bd70      	pop	{r4, r5, r6, pc}
 8006546:	f853 6b04 	ldr.w	r6, [r3], #4
 800654a:	f845 6f04 	str.w	r6, [r5, #4]!
 800654e:	e7eb      	b.n	8006528 <__copybits+0x18>
 8006550:	f840 3b04 	str.w	r3, [r0], #4
 8006554:	e7f4      	b.n	8006540 <__copybits+0x30>

08006556 <__any_on>:
 8006556:	f100 0214 	add.w	r2, r0, #20
 800655a:	6900      	ldr	r0, [r0, #16]
 800655c:	114b      	asrs	r3, r1, #5
 800655e:	4298      	cmp	r0, r3
 8006560:	b510      	push	{r4, lr}
 8006562:	db11      	blt.n	8006588 <__any_on+0x32>
 8006564:	dd0a      	ble.n	800657c <__any_on+0x26>
 8006566:	f011 011f 	ands.w	r1, r1, #31
 800656a:	d007      	beq.n	800657c <__any_on+0x26>
 800656c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006570:	fa24 f001 	lsr.w	r0, r4, r1
 8006574:	fa00 f101 	lsl.w	r1, r0, r1
 8006578:	428c      	cmp	r4, r1
 800657a:	d10b      	bne.n	8006594 <__any_on+0x3e>
 800657c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006580:	4293      	cmp	r3, r2
 8006582:	d803      	bhi.n	800658c <__any_on+0x36>
 8006584:	2000      	movs	r0, #0
 8006586:	bd10      	pop	{r4, pc}
 8006588:	4603      	mov	r3, r0
 800658a:	e7f7      	b.n	800657c <__any_on+0x26>
 800658c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006590:	2900      	cmp	r1, #0
 8006592:	d0f5      	beq.n	8006580 <__any_on+0x2a>
 8006594:	2001      	movs	r0, #1
 8006596:	e7f6      	b.n	8006586 <__any_on+0x30>

08006598 <sulp>:
 8006598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800659c:	460f      	mov	r7, r1
 800659e:	4690      	mov	r8, r2
 80065a0:	f7ff feca 	bl	8006338 <__ulp>
 80065a4:	4604      	mov	r4, r0
 80065a6:	460d      	mov	r5, r1
 80065a8:	f1b8 0f00 	cmp.w	r8, #0
 80065ac:	d011      	beq.n	80065d2 <sulp+0x3a>
 80065ae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80065b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	dd0b      	ble.n	80065d2 <sulp+0x3a>
 80065ba:	2400      	movs	r4, #0
 80065bc:	051b      	lsls	r3, r3, #20
 80065be:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80065c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80065c6:	4622      	mov	r2, r4
 80065c8:	462b      	mov	r3, r5
 80065ca:	f7f9 ff95 	bl	80004f8 <__aeabi_dmul>
 80065ce:	4604      	mov	r4, r0
 80065d0:	460d      	mov	r5, r1
 80065d2:	4620      	mov	r0, r4
 80065d4:	4629      	mov	r1, r5
 80065d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065da:	0000      	movs	r0, r0
 80065dc:	0000      	movs	r0, r0
	...

080065e0 <_strtod_l>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	b09f      	sub	sp, #124	; 0x7c
 80065e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80065e8:	2200      	movs	r2, #0
 80065ea:	4604      	mov	r4, r0
 80065ec:	921a      	str	r2, [sp, #104]	; 0x68
 80065ee:	460d      	mov	r5, r1
 80065f0:	f04f 0800 	mov.w	r8, #0
 80065f4:	f04f 0900 	mov.w	r9, #0
 80065f8:	460a      	mov	r2, r1
 80065fa:	9219      	str	r2, [sp, #100]	; 0x64
 80065fc:	7811      	ldrb	r1, [r2, #0]
 80065fe:	292b      	cmp	r1, #43	; 0x2b
 8006600:	d04a      	beq.n	8006698 <_strtod_l+0xb8>
 8006602:	d838      	bhi.n	8006676 <_strtod_l+0x96>
 8006604:	290d      	cmp	r1, #13
 8006606:	d832      	bhi.n	800666e <_strtod_l+0x8e>
 8006608:	2908      	cmp	r1, #8
 800660a:	d832      	bhi.n	8006672 <_strtod_l+0x92>
 800660c:	2900      	cmp	r1, #0
 800660e:	d03b      	beq.n	8006688 <_strtod_l+0xa8>
 8006610:	2200      	movs	r2, #0
 8006612:	920e      	str	r2, [sp, #56]	; 0x38
 8006614:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006616:	7832      	ldrb	r2, [r6, #0]
 8006618:	2a30      	cmp	r2, #48	; 0x30
 800661a:	f040 80b2 	bne.w	8006782 <_strtod_l+0x1a2>
 800661e:	7872      	ldrb	r2, [r6, #1]
 8006620:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006624:	2a58      	cmp	r2, #88	; 0x58
 8006626:	d16e      	bne.n	8006706 <_strtod_l+0x126>
 8006628:	9302      	str	r3, [sp, #8]
 800662a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800662c:	4620      	mov	r0, r4
 800662e:	9301      	str	r3, [sp, #4]
 8006630:	ab1a      	add	r3, sp, #104	; 0x68
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	4a8c      	ldr	r2, [pc, #560]	; (8006868 <_strtod_l+0x288>)
 8006636:	ab1b      	add	r3, sp, #108	; 0x6c
 8006638:	a919      	add	r1, sp, #100	; 0x64
 800663a:	f001 fb01 	bl	8007c40 <__gethex>
 800663e:	f010 070f 	ands.w	r7, r0, #15
 8006642:	4605      	mov	r5, r0
 8006644:	d005      	beq.n	8006652 <_strtod_l+0x72>
 8006646:	2f06      	cmp	r7, #6
 8006648:	d128      	bne.n	800669c <_strtod_l+0xbc>
 800664a:	2300      	movs	r3, #0
 800664c:	3601      	adds	r6, #1
 800664e:	9619      	str	r6, [sp, #100]	; 0x64
 8006650:	930e      	str	r3, [sp, #56]	; 0x38
 8006652:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006654:	2b00      	cmp	r3, #0
 8006656:	f040 85a0 	bne.w	800719a <_strtod_l+0xbba>
 800665a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800665c:	b1cb      	cbz	r3, 8006692 <_strtod_l+0xb2>
 800665e:	4642      	mov	r2, r8
 8006660:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006664:	4610      	mov	r0, r2
 8006666:	4619      	mov	r1, r3
 8006668:	b01f      	add	sp, #124	; 0x7c
 800666a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666e:	2920      	cmp	r1, #32
 8006670:	d1ce      	bne.n	8006610 <_strtod_l+0x30>
 8006672:	3201      	adds	r2, #1
 8006674:	e7c1      	b.n	80065fa <_strtod_l+0x1a>
 8006676:	292d      	cmp	r1, #45	; 0x2d
 8006678:	d1ca      	bne.n	8006610 <_strtod_l+0x30>
 800667a:	2101      	movs	r1, #1
 800667c:	910e      	str	r1, [sp, #56]	; 0x38
 800667e:	1c51      	adds	r1, r2, #1
 8006680:	9119      	str	r1, [sp, #100]	; 0x64
 8006682:	7852      	ldrb	r2, [r2, #1]
 8006684:	2a00      	cmp	r2, #0
 8006686:	d1c5      	bne.n	8006614 <_strtod_l+0x34>
 8006688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800668a:	9519      	str	r5, [sp, #100]	; 0x64
 800668c:	2b00      	cmp	r3, #0
 800668e:	f040 8582 	bne.w	8007196 <_strtod_l+0xbb6>
 8006692:	4642      	mov	r2, r8
 8006694:	464b      	mov	r3, r9
 8006696:	e7e5      	b.n	8006664 <_strtod_l+0x84>
 8006698:	2100      	movs	r1, #0
 800669a:	e7ef      	b.n	800667c <_strtod_l+0x9c>
 800669c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800669e:	b13a      	cbz	r2, 80066b0 <_strtod_l+0xd0>
 80066a0:	2135      	movs	r1, #53	; 0x35
 80066a2:	a81c      	add	r0, sp, #112	; 0x70
 80066a4:	f7ff ff34 	bl	8006510 <__copybits>
 80066a8:	4620      	mov	r0, r4
 80066aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80066ac:	f7ff fb18 	bl	8005ce0 <_Bfree>
 80066b0:	3f01      	subs	r7, #1
 80066b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80066b4:	2f04      	cmp	r7, #4
 80066b6:	d806      	bhi.n	80066c6 <_strtod_l+0xe6>
 80066b8:	e8df f007 	tbb	[pc, r7]
 80066bc:	201d0314 	.word	0x201d0314
 80066c0:	14          	.byte	0x14
 80066c1:	00          	.byte	0x00
 80066c2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80066c6:	05e9      	lsls	r1, r5, #23
 80066c8:	bf48      	it	mi
 80066ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80066ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066d2:	0d1b      	lsrs	r3, r3, #20
 80066d4:	051b      	lsls	r3, r3, #20
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1bb      	bne.n	8006652 <_strtod_l+0x72>
 80066da:	f7fe fb09 	bl	8004cf0 <__errno>
 80066de:	2322      	movs	r3, #34	; 0x22
 80066e0:	6003      	str	r3, [r0, #0]
 80066e2:	e7b6      	b.n	8006652 <_strtod_l+0x72>
 80066e4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80066e8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80066ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80066f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80066f4:	e7e7      	b.n	80066c6 <_strtod_l+0xe6>
 80066f6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800686c <_strtod_l+0x28c>
 80066fa:	e7e4      	b.n	80066c6 <_strtod_l+0xe6>
 80066fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006700:	f04f 38ff 	mov.w	r8, #4294967295
 8006704:	e7df      	b.n	80066c6 <_strtod_l+0xe6>
 8006706:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	9219      	str	r2, [sp, #100]	; 0x64
 800670c:	785b      	ldrb	r3, [r3, #1]
 800670e:	2b30      	cmp	r3, #48	; 0x30
 8006710:	d0f9      	beq.n	8006706 <_strtod_l+0x126>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d09d      	beq.n	8006652 <_strtod_l+0x72>
 8006716:	2301      	movs	r3, #1
 8006718:	f04f 0a00 	mov.w	sl, #0
 800671c:	220a      	movs	r2, #10
 800671e:	46d3      	mov	fp, sl
 8006720:	9305      	str	r3, [sp, #20]
 8006722:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006724:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006728:	930b      	str	r3, [sp, #44]	; 0x2c
 800672a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800672c:	7806      	ldrb	r6, [r0, #0]
 800672e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006732:	b2d9      	uxtb	r1, r3
 8006734:	2909      	cmp	r1, #9
 8006736:	d926      	bls.n	8006786 <_strtod_l+0x1a6>
 8006738:	2201      	movs	r2, #1
 800673a:	494d      	ldr	r1, [pc, #308]	; (8006870 <_strtod_l+0x290>)
 800673c:	f001 f9be 	bl	8007abc <strncmp>
 8006740:	2800      	cmp	r0, #0
 8006742:	d030      	beq.n	80067a6 <_strtod_l+0x1c6>
 8006744:	2000      	movs	r0, #0
 8006746:	4632      	mov	r2, r6
 8006748:	4603      	mov	r3, r0
 800674a:	465e      	mov	r6, fp
 800674c:	9008      	str	r0, [sp, #32]
 800674e:	2a65      	cmp	r2, #101	; 0x65
 8006750:	d001      	beq.n	8006756 <_strtod_l+0x176>
 8006752:	2a45      	cmp	r2, #69	; 0x45
 8006754:	d113      	bne.n	800677e <_strtod_l+0x19e>
 8006756:	b91e      	cbnz	r6, 8006760 <_strtod_l+0x180>
 8006758:	9a05      	ldr	r2, [sp, #20]
 800675a:	4302      	orrs	r2, r0
 800675c:	d094      	beq.n	8006688 <_strtod_l+0xa8>
 800675e:	2600      	movs	r6, #0
 8006760:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006762:	1c6a      	adds	r2, r5, #1
 8006764:	9219      	str	r2, [sp, #100]	; 0x64
 8006766:	786a      	ldrb	r2, [r5, #1]
 8006768:	2a2b      	cmp	r2, #43	; 0x2b
 800676a:	d074      	beq.n	8006856 <_strtod_l+0x276>
 800676c:	2a2d      	cmp	r2, #45	; 0x2d
 800676e:	d078      	beq.n	8006862 <_strtod_l+0x282>
 8006770:	f04f 0c00 	mov.w	ip, #0
 8006774:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006778:	2909      	cmp	r1, #9
 800677a:	d97f      	bls.n	800687c <_strtod_l+0x29c>
 800677c:	9519      	str	r5, [sp, #100]	; 0x64
 800677e:	2700      	movs	r7, #0
 8006780:	e09e      	b.n	80068c0 <_strtod_l+0x2e0>
 8006782:	2300      	movs	r3, #0
 8006784:	e7c8      	b.n	8006718 <_strtod_l+0x138>
 8006786:	f1bb 0f08 	cmp.w	fp, #8
 800678a:	bfd8      	it	le
 800678c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800678e:	f100 0001 	add.w	r0, r0, #1
 8006792:	bfd6      	itet	le
 8006794:	fb02 3301 	mlale	r3, r2, r1, r3
 8006798:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800679c:	930a      	strle	r3, [sp, #40]	; 0x28
 800679e:	f10b 0b01 	add.w	fp, fp, #1
 80067a2:	9019      	str	r0, [sp, #100]	; 0x64
 80067a4:	e7c1      	b.n	800672a <_strtod_l+0x14a>
 80067a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	9219      	str	r2, [sp, #100]	; 0x64
 80067ac:	785a      	ldrb	r2, [r3, #1]
 80067ae:	f1bb 0f00 	cmp.w	fp, #0
 80067b2:	d037      	beq.n	8006824 <_strtod_l+0x244>
 80067b4:	465e      	mov	r6, fp
 80067b6:	9008      	str	r0, [sp, #32]
 80067b8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80067bc:	2b09      	cmp	r3, #9
 80067be:	d912      	bls.n	80067e6 <_strtod_l+0x206>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e7c4      	b.n	800674e <_strtod_l+0x16e>
 80067c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067c6:	3001      	adds	r0, #1
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	9219      	str	r2, [sp, #100]	; 0x64
 80067cc:	785a      	ldrb	r2, [r3, #1]
 80067ce:	2a30      	cmp	r2, #48	; 0x30
 80067d0:	d0f8      	beq.n	80067c4 <_strtod_l+0x1e4>
 80067d2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	f200 84e4 	bhi.w	80071a4 <_strtod_l+0xbc4>
 80067dc:	9008      	str	r0, [sp, #32]
 80067de:	2000      	movs	r0, #0
 80067e0:	4606      	mov	r6, r0
 80067e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80067e6:	3a30      	subs	r2, #48	; 0x30
 80067e8:	f100 0301 	add.w	r3, r0, #1
 80067ec:	d014      	beq.n	8006818 <_strtod_l+0x238>
 80067ee:	9908      	ldr	r1, [sp, #32]
 80067f0:	eb00 0c06 	add.w	ip, r0, r6
 80067f4:	4419      	add	r1, r3
 80067f6:	9108      	str	r1, [sp, #32]
 80067f8:	4633      	mov	r3, r6
 80067fa:	210a      	movs	r1, #10
 80067fc:	4563      	cmp	r3, ip
 80067fe:	d113      	bne.n	8006828 <_strtod_l+0x248>
 8006800:	1833      	adds	r3, r6, r0
 8006802:	2b08      	cmp	r3, #8
 8006804:	f106 0601 	add.w	r6, r6, #1
 8006808:	4406      	add	r6, r0
 800680a:	dc1a      	bgt.n	8006842 <_strtod_l+0x262>
 800680c:	230a      	movs	r3, #10
 800680e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006810:	fb03 2301 	mla	r3, r3, r1, r2
 8006814:	930a      	str	r3, [sp, #40]	; 0x28
 8006816:	2300      	movs	r3, #0
 8006818:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800681a:	4618      	mov	r0, r3
 800681c:	1c51      	adds	r1, r2, #1
 800681e:	9119      	str	r1, [sp, #100]	; 0x64
 8006820:	7852      	ldrb	r2, [r2, #1]
 8006822:	e7c9      	b.n	80067b8 <_strtod_l+0x1d8>
 8006824:	4658      	mov	r0, fp
 8006826:	e7d2      	b.n	80067ce <_strtod_l+0x1ee>
 8006828:	2b08      	cmp	r3, #8
 800682a:	f103 0301 	add.w	r3, r3, #1
 800682e:	dc03      	bgt.n	8006838 <_strtod_l+0x258>
 8006830:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006832:	434f      	muls	r7, r1
 8006834:	970a      	str	r7, [sp, #40]	; 0x28
 8006836:	e7e1      	b.n	80067fc <_strtod_l+0x21c>
 8006838:	2b10      	cmp	r3, #16
 800683a:	bfd8      	it	le
 800683c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006840:	e7dc      	b.n	80067fc <_strtod_l+0x21c>
 8006842:	2e10      	cmp	r6, #16
 8006844:	bfdc      	itt	le
 8006846:	230a      	movle	r3, #10
 8006848:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800684c:	e7e3      	b.n	8006816 <_strtod_l+0x236>
 800684e:	2300      	movs	r3, #0
 8006850:	9308      	str	r3, [sp, #32]
 8006852:	2301      	movs	r3, #1
 8006854:	e780      	b.n	8006758 <_strtod_l+0x178>
 8006856:	f04f 0c00 	mov.w	ip, #0
 800685a:	1caa      	adds	r2, r5, #2
 800685c:	9219      	str	r2, [sp, #100]	; 0x64
 800685e:	78aa      	ldrb	r2, [r5, #2]
 8006860:	e788      	b.n	8006774 <_strtod_l+0x194>
 8006862:	f04f 0c01 	mov.w	ip, #1
 8006866:	e7f8      	b.n	800685a <_strtod_l+0x27a>
 8006868:	08009ee0 	.word	0x08009ee0
 800686c:	7ff00000 	.word	0x7ff00000
 8006870:	08009edc 	.word	0x08009edc
 8006874:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006876:	1c51      	adds	r1, r2, #1
 8006878:	9119      	str	r1, [sp, #100]	; 0x64
 800687a:	7852      	ldrb	r2, [r2, #1]
 800687c:	2a30      	cmp	r2, #48	; 0x30
 800687e:	d0f9      	beq.n	8006874 <_strtod_l+0x294>
 8006880:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006884:	2908      	cmp	r1, #8
 8006886:	f63f af7a 	bhi.w	800677e <_strtod_l+0x19e>
 800688a:	3a30      	subs	r2, #48	; 0x30
 800688c:	9209      	str	r2, [sp, #36]	; 0x24
 800688e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006890:	920c      	str	r2, [sp, #48]	; 0x30
 8006892:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006894:	1c57      	adds	r7, r2, #1
 8006896:	9719      	str	r7, [sp, #100]	; 0x64
 8006898:	7852      	ldrb	r2, [r2, #1]
 800689a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800689e:	f1be 0f09 	cmp.w	lr, #9
 80068a2:	d938      	bls.n	8006916 <_strtod_l+0x336>
 80068a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068a6:	1a7f      	subs	r7, r7, r1
 80068a8:	2f08      	cmp	r7, #8
 80068aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80068ae:	dc03      	bgt.n	80068b8 <_strtod_l+0x2d8>
 80068b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068b2:	428f      	cmp	r7, r1
 80068b4:	bfa8      	it	ge
 80068b6:	460f      	movge	r7, r1
 80068b8:	f1bc 0f00 	cmp.w	ip, #0
 80068bc:	d000      	beq.n	80068c0 <_strtod_l+0x2e0>
 80068be:	427f      	negs	r7, r7
 80068c0:	2e00      	cmp	r6, #0
 80068c2:	d14f      	bne.n	8006964 <_strtod_l+0x384>
 80068c4:	9905      	ldr	r1, [sp, #20]
 80068c6:	4301      	orrs	r1, r0
 80068c8:	f47f aec3 	bne.w	8006652 <_strtod_l+0x72>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f47f aedb 	bne.w	8006688 <_strtod_l+0xa8>
 80068d2:	2a69      	cmp	r2, #105	; 0x69
 80068d4:	d029      	beq.n	800692a <_strtod_l+0x34a>
 80068d6:	dc26      	bgt.n	8006926 <_strtod_l+0x346>
 80068d8:	2a49      	cmp	r2, #73	; 0x49
 80068da:	d026      	beq.n	800692a <_strtod_l+0x34a>
 80068dc:	2a4e      	cmp	r2, #78	; 0x4e
 80068de:	f47f aed3 	bne.w	8006688 <_strtod_l+0xa8>
 80068e2:	499a      	ldr	r1, [pc, #616]	; (8006b4c <_strtod_l+0x56c>)
 80068e4:	a819      	add	r0, sp, #100	; 0x64
 80068e6:	f001 fbed 	bl	80080c4 <__match>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	f43f aecc 	beq.w	8006688 <_strtod_l+0xa8>
 80068f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b28      	cmp	r3, #40	; 0x28
 80068f6:	d12f      	bne.n	8006958 <_strtod_l+0x378>
 80068f8:	4995      	ldr	r1, [pc, #596]	; (8006b50 <_strtod_l+0x570>)
 80068fa:	aa1c      	add	r2, sp, #112	; 0x70
 80068fc:	a819      	add	r0, sp, #100	; 0x64
 80068fe:	f001 fbf5 	bl	80080ec <__hexnan>
 8006902:	2805      	cmp	r0, #5
 8006904:	d128      	bne.n	8006958 <_strtod_l+0x378>
 8006906:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006908:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800690c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006910:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006914:	e69d      	b.n	8006652 <_strtod_l+0x72>
 8006916:	210a      	movs	r1, #10
 8006918:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800691a:	fb01 2107 	mla	r1, r1, r7, r2
 800691e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006922:	9209      	str	r2, [sp, #36]	; 0x24
 8006924:	e7b5      	b.n	8006892 <_strtod_l+0x2b2>
 8006926:	2a6e      	cmp	r2, #110	; 0x6e
 8006928:	e7d9      	b.n	80068de <_strtod_l+0x2fe>
 800692a:	498a      	ldr	r1, [pc, #552]	; (8006b54 <_strtod_l+0x574>)
 800692c:	a819      	add	r0, sp, #100	; 0x64
 800692e:	f001 fbc9 	bl	80080c4 <__match>
 8006932:	2800      	cmp	r0, #0
 8006934:	f43f aea8 	beq.w	8006688 <_strtod_l+0xa8>
 8006938:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800693a:	4987      	ldr	r1, [pc, #540]	; (8006b58 <_strtod_l+0x578>)
 800693c:	3b01      	subs	r3, #1
 800693e:	a819      	add	r0, sp, #100	; 0x64
 8006940:	9319      	str	r3, [sp, #100]	; 0x64
 8006942:	f001 fbbf 	bl	80080c4 <__match>
 8006946:	b910      	cbnz	r0, 800694e <_strtod_l+0x36e>
 8006948:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800694a:	3301      	adds	r3, #1
 800694c:	9319      	str	r3, [sp, #100]	; 0x64
 800694e:	f04f 0800 	mov.w	r8, #0
 8006952:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006b5c <_strtod_l+0x57c>
 8006956:	e67c      	b.n	8006652 <_strtod_l+0x72>
 8006958:	4881      	ldr	r0, [pc, #516]	; (8006b60 <_strtod_l+0x580>)
 800695a:	f001 f8d1 	bl	8007b00 <nan>
 800695e:	4680      	mov	r8, r0
 8006960:	4689      	mov	r9, r1
 8006962:	e676      	b.n	8006652 <_strtod_l+0x72>
 8006964:	9b08      	ldr	r3, [sp, #32]
 8006966:	f1bb 0f00 	cmp.w	fp, #0
 800696a:	bf08      	it	eq
 800696c:	46b3      	moveq	fp, r6
 800696e:	1afb      	subs	r3, r7, r3
 8006970:	2e10      	cmp	r6, #16
 8006972:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006974:	4635      	mov	r5, r6
 8006976:	9309      	str	r3, [sp, #36]	; 0x24
 8006978:	bfa8      	it	ge
 800697a:	2510      	movge	r5, #16
 800697c:	f7f9 fd42 	bl	8000404 <__aeabi_ui2d>
 8006980:	2e09      	cmp	r6, #9
 8006982:	4680      	mov	r8, r0
 8006984:	4689      	mov	r9, r1
 8006986:	dd13      	ble.n	80069b0 <_strtod_l+0x3d0>
 8006988:	4b76      	ldr	r3, [pc, #472]	; (8006b64 <_strtod_l+0x584>)
 800698a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800698e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006992:	f7f9 fdb1 	bl	80004f8 <__aeabi_dmul>
 8006996:	4680      	mov	r8, r0
 8006998:	4650      	mov	r0, sl
 800699a:	4689      	mov	r9, r1
 800699c:	f7f9 fd32 	bl	8000404 <__aeabi_ui2d>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4640      	mov	r0, r8
 80069a6:	4649      	mov	r1, r9
 80069a8:	f7f9 fbf0 	bl	800018c <__adddf3>
 80069ac:	4680      	mov	r8, r0
 80069ae:	4689      	mov	r9, r1
 80069b0:	2e0f      	cmp	r6, #15
 80069b2:	dc36      	bgt.n	8006a22 <_strtod_l+0x442>
 80069b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f43f ae4b 	beq.w	8006652 <_strtod_l+0x72>
 80069bc:	dd22      	ble.n	8006a04 <_strtod_l+0x424>
 80069be:	2b16      	cmp	r3, #22
 80069c0:	dc09      	bgt.n	80069d6 <_strtod_l+0x3f6>
 80069c2:	4968      	ldr	r1, [pc, #416]	; (8006b64 <_strtod_l+0x584>)
 80069c4:	4642      	mov	r2, r8
 80069c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069ca:	464b      	mov	r3, r9
 80069cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069d0:	f7f9 fd92 	bl	80004f8 <__aeabi_dmul>
 80069d4:	e7c3      	b.n	800695e <_strtod_l+0x37e>
 80069d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069d8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80069dc:	4293      	cmp	r3, r2
 80069de:	db20      	blt.n	8006a22 <_strtod_l+0x442>
 80069e0:	4c60      	ldr	r4, [pc, #384]	; (8006b64 <_strtod_l+0x584>)
 80069e2:	f1c6 060f 	rsb	r6, r6, #15
 80069e6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80069ea:	4642      	mov	r2, r8
 80069ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069f0:	464b      	mov	r3, r9
 80069f2:	f7f9 fd81 	bl	80004f8 <__aeabi_dmul>
 80069f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f8:	1b9e      	subs	r6, r3, r6
 80069fa:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80069fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a02:	e7e5      	b.n	80069d0 <_strtod_l+0x3f0>
 8006a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a06:	3316      	adds	r3, #22
 8006a08:	db0b      	blt.n	8006a22 <_strtod_l+0x442>
 8006a0a:	9b08      	ldr	r3, [sp, #32]
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	1bdf      	subs	r7, r3, r7
 8006a10:	4b54      	ldr	r3, [pc, #336]	; (8006b64 <_strtod_l+0x584>)
 8006a12:	4649      	mov	r1, r9
 8006a14:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a1c:	f7f9 fe96 	bl	800074c <__aeabi_ddiv>
 8006a20:	e79d      	b.n	800695e <_strtod_l+0x37e>
 8006a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a24:	1b75      	subs	r5, r6, r5
 8006a26:	441d      	add	r5, r3
 8006a28:	2d00      	cmp	r5, #0
 8006a2a:	dd70      	ble.n	8006b0e <_strtod_l+0x52e>
 8006a2c:	f015 030f 	ands.w	r3, r5, #15
 8006a30:	d00a      	beq.n	8006a48 <_strtod_l+0x468>
 8006a32:	494c      	ldr	r1, [pc, #304]	; (8006b64 <_strtod_l+0x584>)
 8006a34:	4642      	mov	r2, r8
 8006a36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a3e:	464b      	mov	r3, r9
 8006a40:	f7f9 fd5a 	bl	80004f8 <__aeabi_dmul>
 8006a44:	4680      	mov	r8, r0
 8006a46:	4689      	mov	r9, r1
 8006a48:	f035 050f 	bics.w	r5, r5, #15
 8006a4c:	d04d      	beq.n	8006aea <_strtod_l+0x50a>
 8006a4e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006a52:	dd22      	ble.n	8006a9a <_strtod_l+0x4ba>
 8006a54:	2600      	movs	r6, #0
 8006a56:	46b3      	mov	fp, r6
 8006a58:	960b      	str	r6, [sp, #44]	; 0x2c
 8006a5a:	9608      	str	r6, [sp, #32]
 8006a5c:	2322      	movs	r3, #34	; 0x22
 8006a5e:	f04f 0800 	mov.w	r8, #0
 8006a62:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006b5c <_strtod_l+0x57c>
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f43f adf1 	beq.w	8006652 <_strtod_l+0x72>
 8006a70:	4620      	mov	r0, r4
 8006a72:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a74:	f7ff f934 	bl	8005ce0 <_Bfree>
 8006a78:	4620      	mov	r0, r4
 8006a7a:	9908      	ldr	r1, [sp, #32]
 8006a7c:	f7ff f930 	bl	8005ce0 <_Bfree>
 8006a80:	4659      	mov	r1, fp
 8006a82:	4620      	mov	r0, r4
 8006a84:	f7ff f92c 	bl	8005ce0 <_Bfree>
 8006a88:	4620      	mov	r0, r4
 8006a8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a8c:	f7ff f928 	bl	8005ce0 <_Bfree>
 8006a90:	4631      	mov	r1, r6
 8006a92:	4620      	mov	r0, r4
 8006a94:	f7ff f924 	bl	8005ce0 <_Bfree>
 8006a98:	e5db      	b.n	8006652 <_strtod_l+0x72>
 8006a9a:	4b33      	ldr	r3, [pc, #204]	; (8006b68 <_strtod_l+0x588>)
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	9305      	str	r3, [sp, #20]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	469a      	mov	sl, r3
 8006aa6:	112d      	asrs	r5, r5, #4
 8006aa8:	2d01      	cmp	r5, #1
 8006aaa:	dc21      	bgt.n	8006af0 <_strtod_l+0x510>
 8006aac:	b10b      	cbz	r3, 8006ab2 <_strtod_l+0x4d2>
 8006aae:	4680      	mov	r8, r0
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	492d      	ldr	r1, [pc, #180]	; (8006b68 <_strtod_l+0x588>)
 8006ab4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006ab8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006abc:	4642      	mov	r2, r8
 8006abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ac2:	464b      	mov	r3, r9
 8006ac4:	f7f9 fd18 	bl	80004f8 <__aeabi_dmul>
 8006ac8:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <_strtod_l+0x57c>)
 8006aca:	460a      	mov	r2, r1
 8006acc:	400b      	ands	r3, r1
 8006ace:	4927      	ldr	r1, [pc, #156]	; (8006b6c <_strtod_l+0x58c>)
 8006ad0:	4680      	mov	r8, r0
 8006ad2:	428b      	cmp	r3, r1
 8006ad4:	d8be      	bhi.n	8006a54 <_strtod_l+0x474>
 8006ad6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006ada:	428b      	cmp	r3, r1
 8006adc:	bf86      	itte	hi
 8006ade:	f04f 38ff 	movhi.w	r8, #4294967295
 8006ae2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006b70 <_strtod_l+0x590>
 8006ae6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006aea:	2300      	movs	r3, #0
 8006aec:	9305      	str	r3, [sp, #20]
 8006aee:	e07b      	b.n	8006be8 <_strtod_l+0x608>
 8006af0:	07ea      	lsls	r2, r5, #31
 8006af2:	d505      	bpl.n	8006b00 <_strtod_l+0x520>
 8006af4:	9b05      	ldr	r3, [sp, #20]
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f7f9 fcfd 	bl	80004f8 <__aeabi_dmul>
 8006afe:	2301      	movs	r3, #1
 8006b00:	9a05      	ldr	r2, [sp, #20]
 8006b02:	f10a 0a01 	add.w	sl, sl, #1
 8006b06:	3208      	adds	r2, #8
 8006b08:	106d      	asrs	r5, r5, #1
 8006b0a:	9205      	str	r2, [sp, #20]
 8006b0c:	e7cc      	b.n	8006aa8 <_strtod_l+0x4c8>
 8006b0e:	d0ec      	beq.n	8006aea <_strtod_l+0x50a>
 8006b10:	426d      	negs	r5, r5
 8006b12:	f015 020f 	ands.w	r2, r5, #15
 8006b16:	d00a      	beq.n	8006b2e <_strtod_l+0x54e>
 8006b18:	4b12      	ldr	r3, [pc, #72]	; (8006b64 <_strtod_l+0x584>)
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b20:	4649      	mov	r1, r9
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	f7f9 fe11 	bl	800074c <__aeabi_ddiv>
 8006b2a:	4680      	mov	r8, r0
 8006b2c:	4689      	mov	r9, r1
 8006b2e:	112d      	asrs	r5, r5, #4
 8006b30:	d0db      	beq.n	8006aea <_strtod_l+0x50a>
 8006b32:	2d1f      	cmp	r5, #31
 8006b34:	dd1e      	ble.n	8006b74 <_strtod_l+0x594>
 8006b36:	2600      	movs	r6, #0
 8006b38:	46b3      	mov	fp, r6
 8006b3a:	960b      	str	r6, [sp, #44]	; 0x2c
 8006b3c:	9608      	str	r6, [sp, #32]
 8006b3e:	2322      	movs	r3, #34	; 0x22
 8006b40:	f04f 0800 	mov.w	r8, #0
 8006b44:	f04f 0900 	mov.w	r9, #0
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	e78d      	b.n	8006a68 <_strtod_l+0x488>
 8006b4c:	08009ccd 	.word	0x08009ccd
 8006b50:	08009ef4 	.word	0x08009ef4
 8006b54:	08009cc5 	.word	0x08009cc5
 8006b58:	08009cfc 	.word	0x08009cfc
 8006b5c:	7ff00000 	.word	0x7ff00000
 8006b60:	0800a085 	.word	0x0800a085
 8006b64:	08009e08 	.word	0x08009e08
 8006b68:	08009de0 	.word	0x08009de0
 8006b6c:	7ca00000 	.word	0x7ca00000
 8006b70:	7fefffff 	.word	0x7fefffff
 8006b74:	f015 0310 	ands.w	r3, r5, #16
 8006b78:	bf18      	it	ne
 8006b7a:	236a      	movne	r3, #106	; 0x6a
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	9305      	str	r3, [sp, #20]
 8006b80:	4649      	mov	r1, r9
 8006b82:	2300      	movs	r3, #0
 8006b84:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006e50 <_strtod_l+0x870>
 8006b88:	07ea      	lsls	r2, r5, #31
 8006b8a:	d504      	bpl.n	8006b96 <_strtod_l+0x5b6>
 8006b8c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006b90:	f7f9 fcb2 	bl	80004f8 <__aeabi_dmul>
 8006b94:	2301      	movs	r3, #1
 8006b96:	106d      	asrs	r5, r5, #1
 8006b98:	f10a 0a08 	add.w	sl, sl, #8
 8006b9c:	d1f4      	bne.n	8006b88 <_strtod_l+0x5a8>
 8006b9e:	b10b      	cbz	r3, 8006ba4 <_strtod_l+0x5c4>
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	4689      	mov	r9, r1
 8006ba4:	9b05      	ldr	r3, [sp, #20]
 8006ba6:	b1bb      	cbz	r3, 8006bd8 <_strtod_l+0x5f8>
 8006ba8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006bac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	dd10      	ble.n	8006bd8 <_strtod_l+0x5f8>
 8006bb6:	2b1f      	cmp	r3, #31
 8006bb8:	f340 8128 	ble.w	8006e0c <_strtod_l+0x82c>
 8006bbc:	2b34      	cmp	r3, #52	; 0x34
 8006bbe:	bfd8      	it	le
 8006bc0:	f04f 33ff 	movle.w	r3, #4294967295
 8006bc4:	f04f 0800 	mov.w	r8, #0
 8006bc8:	bfcf      	iteee	gt
 8006bca:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006bce:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006bd2:	4093      	lslle	r3, r2
 8006bd4:	ea03 0901 	andle.w	r9, r3, r1
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2300      	movs	r3, #0
 8006bdc:	4640      	mov	r0, r8
 8006bde:	4649      	mov	r1, r9
 8006be0:	f7f9 fef2 	bl	80009c8 <__aeabi_dcmpeq>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d1a6      	bne.n	8006b36 <_strtod_l+0x556>
 8006be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bea:	465a      	mov	r2, fp
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	4633      	mov	r3, r6
 8006bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bf4:	f7ff f8dc 	bl	8005db0 <__s2b>
 8006bf8:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	f43f af2a 	beq.w	8006a54 <_strtod_l+0x474>
 8006c00:	2600      	movs	r6, #0
 8006c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c04:	9b08      	ldr	r3, [sp, #32]
 8006c06:	2a00      	cmp	r2, #0
 8006c08:	eba3 0307 	sub.w	r3, r3, r7
 8006c0c:	bfa8      	it	ge
 8006c0e:	2300      	movge	r3, #0
 8006c10:	46b3      	mov	fp, r6
 8006c12:	9312      	str	r3, [sp, #72]	; 0x48
 8006c14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006c18:	9316      	str	r3, [sp, #88]	; 0x58
 8006c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	6859      	ldr	r1, [r3, #4]
 8006c20:	f7ff f81e 	bl	8005c60 <_Balloc>
 8006c24:	9008      	str	r0, [sp, #32]
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f43f af18 	beq.w	8006a5c <_strtod_l+0x47c>
 8006c2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c2e:	300c      	adds	r0, #12
 8006c30:	691a      	ldr	r2, [r3, #16]
 8006c32:	f103 010c 	add.w	r1, r3, #12
 8006c36:	3202      	adds	r2, #2
 8006c38:	0092      	lsls	r2, r2, #2
 8006c3a:	f7fe f894 	bl	8004d66 <memcpy>
 8006c3e:	ab1c      	add	r3, sp, #112	; 0x70
 8006c40:	9301      	str	r3, [sp, #4]
 8006c42:	ab1b      	add	r3, sp, #108	; 0x6c
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	4642      	mov	r2, r8
 8006c48:	464b      	mov	r3, r9
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006c50:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006c54:	f7ff fbd8 	bl	8006408 <__d2b>
 8006c58:	901a      	str	r0, [sp, #104]	; 0x68
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	f43f aefe 	beq.w	8006a5c <_strtod_l+0x47c>
 8006c60:	2101      	movs	r1, #1
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7ff f93c 	bl	8005ee0 <__i2b>
 8006c68:	4683      	mov	fp, r0
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	f43f aef6 	beq.w	8006a5c <_strtod_l+0x47c>
 8006c70:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006c72:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c74:	2f00      	cmp	r7, #0
 8006c76:	bfab      	itete	ge
 8006c78:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006c7a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006c7c:	eb07 0a03 	addge.w	sl, r7, r3
 8006c80:	1bdd      	sublt	r5, r3, r7
 8006c82:	9b05      	ldr	r3, [sp, #20]
 8006c84:	bfa8      	it	ge
 8006c86:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006c88:	eba7 0703 	sub.w	r7, r7, r3
 8006c8c:	4417      	add	r7, r2
 8006c8e:	4b71      	ldr	r3, [pc, #452]	; (8006e54 <_strtod_l+0x874>)
 8006c90:	f107 37ff 	add.w	r7, r7, #4294967295
 8006c94:	bfb8      	it	lt
 8006c96:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006c9a:	429f      	cmp	r7, r3
 8006c9c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006ca0:	f280 80c7 	bge.w	8006e32 <_strtod_l+0x852>
 8006ca4:	1bdb      	subs	r3, r3, r7
 8006ca6:	2b1f      	cmp	r3, #31
 8006ca8:	f04f 0101 	mov.w	r1, #1
 8006cac:	eba2 0203 	sub.w	r2, r2, r3
 8006cb0:	f300 80b3 	bgt.w	8006e1a <_strtod_l+0x83a>
 8006cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8006cba:	2300      	movs	r3, #0
 8006cbc:	9310      	str	r3, [sp, #64]	; 0x40
 8006cbe:	eb0a 0702 	add.w	r7, sl, r2
 8006cc2:	9b05      	ldr	r3, [sp, #20]
 8006cc4:	45ba      	cmp	sl, r7
 8006cc6:	4415      	add	r5, r2
 8006cc8:	441d      	add	r5, r3
 8006cca:	4653      	mov	r3, sl
 8006ccc:	bfa8      	it	ge
 8006cce:	463b      	movge	r3, r7
 8006cd0:	42ab      	cmp	r3, r5
 8006cd2:	bfa8      	it	ge
 8006cd4:	462b      	movge	r3, r5
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bfc2      	ittt	gt
 8006cda:	1aff      	subgt	r7, r7, r3
 8006cdc:	1aed      	subgt	r5, r5, r3
 8006cde:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006ce2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	dd17      	ble.n	8006d18 <_strtod_l+0x738>
 8006ce8:	4659      	mov	r1, fp
 8006cea:	461a      	mov	r2, r3
 8006cec:	4620      	mov	r0, r4
 8006cee:	f7ff f9b5 	bl	800605c <__pow5mult>
 8006cf2:	4683      	mov	fp, r0
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	f43f aeb1 	beq.w	8006a5c <_strtod_l+0x47c>
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f7ff f904 	bl	8005f0c <__multiply>
 8006d04:	900a      	str	r0, [sp, #40]	; 0x28
 8006d06:	2800      	cmp	r0, #0
 8006d08:	f43f aea8 	beq.w	8006a5c <_strtod_l+0x47c>
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d10:	f7fe ffe6 	bl	8005ce0 <_Bfree>
 8006d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d16:	931a      	str	r3, [sp, #104]	; 0x68
 8006d18:	2f00      	cmp	r7, #0
 8006d1a:	f300 808f 	bgt.w	8006e3c <_strtod_l+0x85c>
 8006d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	dd08      	ble.n	8006d36 <_strtod_l+0x756>
 8006d24:	4620      	mov	r0, r4
 8006d26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d28:	9908      	ldr	r1, [sp, #32]
 8006d2a:	f7ff f997 	bl	800605c <__pow5mult>
 8006d2e:	9008      	str	r0, [sp, #32]
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f43f ae93 	beq.w	8006a5c <_strtod_l+0x47c>
 8006d36:	2d00      	cmp	r5, #0
 8006d38:	dd08      	ble.n	8006d4c <_strtod_l+0x76c>
 8006d3a:	462a      	mov	r2, r5
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	9908      	ldr	r1, [sp, #32]
 8006d40:	f7ff f9e6 	bl	8006110 <__lshift>
 8006d44:	9008      	str	r0, [sp, #32]
 8006d46:	2800      	cmp	r0, #0
 8006d48:	f43f ae88 	beq.w	8006a5c <_strtod_l+0x47c>
 8006d4c:	f1ba 0f00 	cmp.w	sl, #0
 8006d50:	dd08      	ble.n	8006d64 <_strtod_l+0x784>
 8006d52:	4659      	mov	r1, fp
 8006d54:	4652      	mov	r2, sl
 8006d56:	4620      	mov	r0, r4
 8006d58:	f7ff f9da 	bl	8006110 <__lshift>
 8006d5c:	4683      	mov	fp, r0
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f43f ae7c 	beq.w	8006a5c <_strtod_l+0x47c>
 8006d64:	4620      	mov	r0, r4
 8006d66:	9a08      	ldr	r2, [sp, #32]
 8006d68:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d6a:	f7ff fa59 	bl	8006220 <__mdiff>
 8006d6e:	4606      	mov	r6, r0
 8006d70:	2800      	cmp	r0, #0
 8006d72:	f43f ae73 	beq.w	8006a5c <_strtod_l+0x47c>
 8006d76:	2500      	movs	r5, #0
 8006d78:	68c3      	ldr	r3, [r0, #12]
 8006d7a:	4659      	mov	r1, fp
 8006d7c:	60c5      	str	r5, [r0, #12]
 8006d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d80:	f7ff fa32 	bl	80061e8 <__mcmp>
 8006d84:	42a8      	cmp	r0, r5
 8006d86:	da6b      	bge.n	8006e60 <_strtod_l+0x880>
 8006d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d8a:	ea53 0308 	orrs.w	r3, r3, r8
 8006d8e:	f040 808f 	bne.w	8006eb0 <_strtod_l+0x8d0>
 8006d92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f040 808a 	bne.w	8006eb0 <_strtod_l+0x8d0>
 8006d9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006da0:	0d1b      	lsrs	r3, r3, #20
 8006da2:	051b      	lsls	r3, r3, #20
 8006da4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006da8:	f240 8082 	bls.w	8006eb0 <_strtod_l+0x8d0>
 8006dac:	6973      	ldr	r3, [r6, #20]
 8006dae:	b913      	cbnz	r3, 8006db6 <_strtod_l+0x7d6>
 8006db0:	6933      	ldr	r3, [r6, #16]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	dd7c      	ble.n	8006eb0 <_strtod_l+0x8d0>
 8006db6:	4631      	mov	r1, r6
 8006db8:	2201      	movs	r2, #1
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f7ff f9a8 	bl	8006110 <__lshift>
 8006dc0:	4659      	mov	r1, fp
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	f7ff fa10 	bl	80061e8 <__mcmp>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	dd71      	ble.n	8006eb0 <_strtod_l+0x8d0>
 8006dcc:	9905      	ldr	r1, [sp, #20]
 8006dce:	464b      	mov	r3, r9
 8006dd0:	4a21      	ldr	r2, [pc, #132]	; (8006e58 <_strtod_l+0x878>)
 8006dd2:	2900      	cmp	r1, #0
 8006dd4:	f000 808d 	beq.w	8006ef2 <_strtod_l+0x912>
 8006dd8:	ea02 0109 	and.w	r1, r2, r9
 8006ddc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006de0:	f300 8087 	bgt.w	8006ef2 <_strtod_l+0x912>
 8006de4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006de8:	f77f aea9 	ble.w	8006b3e <_strtod_l+0x55e>
 8006dec:	4640      	mov	r0, r8
 8006dee:	4649      	mov	r1, r9
 8006df0:	4b1a      	ldr	r3, [pc, #104]	; (8006e5c <_strtod_l+0x87c>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	f7f9 fb80 	bl	80004f8 <__aeabi_dmul>
 8006df8:	4b17      	ldr	r3, [pc, #92]	; (8006e58 <_strtod_l+0x878>)
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	400b      	ands	r3, r1
 8006dfe:	4689      	mov	r9, r1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f47f ae35 	bne.w	8006a70 <_strtod_l+0x490>
 8006e06:	2322      	movs	r3, #34	; 0x22
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	e631      	b.n	8006a70 <_strtod_l+0x490>
 8006e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e10:	fa02 f303 	lsl.w	r3, r2, r3
 8006e14:	ea03 0808 	and.w	r8, r3, r8
 8006e18:	e6de      	b.n	8006bd8 <_strtod_l+0x5f8>
 8006e1a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006e1e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006e22:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006e26:	37e2      	adds	r7, #226	; 0xe2
 8006e28:	fa01 f307 	lsl.w	r3, r1, r7
 8006e2c:	9310      	str	r3, [sp, #64]	; 0x40
 8006e2e:	9113      	str	r1, [sp, #76]	; 0x4c
 8006e30:	e745      	b.n	8006cbe <_strtod_l+0x6de>
 8006e32:	2300      	movs	r3, #0
 8006e34:	9310      	str	r3, [sp, #64]	; 0x40
 8006e36:	2301      	movs	r3, #1
 8006e38:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e3a:	e740      	b.n	8006cbe <_strtod_l+0x6de>
 8006e3c:	463a      	mov	r2, r7
 8006e3e:	4620      	mov	r0, r4
 8006e40:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e42:	f7ff f965 	bl	8006110 <__lshift>
 8006e46:	901a      	str	r0, [sp, #104]	; 0x68
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	f47f af68 	bne.w	8006d1e <_strtod_l+0x73e>
 8006e4e:	e605      	b.n	8006a5c <_strtod_l+0x47c>
 8006e50:	08009f08 	.word	0x08009f08
 8006e54:	fffffc02 	.word	0xfffffc02
 8006e58:	7ff00000 	.word	0x7ff00000
 8006e5c:	39500000 	.word	0x39500000
 8006e60:	46ca      	mov	sl, r9
 8006e62:	d165      	bne.n	8006f30 <_strtod_l+0x950>
 8006e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e6a:	b352      	cbz	r2, 8006ec2 <_strtod_l+0x8e2>
 8006e6c:	4a9e      	ldr	r2, [pc, #632]	; (80070e8 <_strtod_l+0xb08>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d12a      	bne.n	8006ec8 <_strtod_l+0x8e8>
 8006e72:	9b05      	ldr	r3, [sp, #20]
 8006e74:	4641      	mov	r1, r8
 8006e76:	b1fb      	cbz	r3, 8006eb8 <_strtod_l+0x8d8>
 8006e78:	4b9c      	ldr	r3, [pc, #624]	; (80070ec <_strtod_l+0xb0c>)
 8006e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7e:	ea09 0303 	and.w	r3, r9, r3
 8006e82:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e86:	d81a      	bhi.n	8006ebe <_strtod_l+0x8de>
 8006e88:	0d1b      	lsrs	r3, r3, #20
 8006e8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	4299      	cmp	r1, r3
 8006e94:	d118      	bne.n	8006ec8 <_strtod_l+0x8e8>
 8006e96:	4b96      	ldr	r3, [pc, #600]	; (80070f0 <_strtod_l+0xb10>)
 8006e98:	459a      	cmp	sl, r3
 8006e9a:	d102      	bne.n	8006ea2 <_strtod_l+0x8c2>
 8006e9c:	3101      	adds	r1, #1
 8006e9e:	f43f addd 	beq.w	8006a5c <_strtod_l+0x47c>
 8006ea2:	f04f 0800 	mov.w	r8, #0
 8006ea6:	4b91      	ldr	r3, [pc, #580]	; (80070ec <_strtod_l+0xb0c>)
 8006ea8:	ea0a 0303 	and.w	r3, sl, r3
 8006eac:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006eb0:	9b05      	ldr	r3, [sp, #20]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d19a      	bne.n	8006dec <_strtod_l+0x80c>
 8006eb6:	e5db      	b.n	8006a70 <_strtod_l+0x490>
 8006eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ebc:	e7e9      	b.n	8006e92 <_strtod_l+0x8b2>
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	e7e7      	b.n	8006e92 <_strtod_l+0x8b2>
 8006ec2:	ea53 0308 	orrs.w	r3, r3, r8
 8006ec6:	d081      	beq.n	8006dcc <_strtod_l+0x7ec>
 8006ec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eca:	b1e3      	cbz	r3, 8006f06 <_strtod_l+0x926>
 8006ecc:	ea13 0f0a 	tst.w	r3, sl
 8006ed0:	d0ee      	beq.n	8006eb0 <_strtod_l+0x8d0>
 8006ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	9a05      	ldr	r2, [sp, #20]
 8006eda:	b1c3      	cbz	r3, 8006f0e <_strtod_l+0x92e>
 8006edc:	f7ff fb5c 	bl	8006598 <sulp>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ee6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ee8:	f7f9 f950 	bl	800018c <__adddf3>
 8006eec:	4680      	mov	r8, r0
 8006eee:	4689      	mov	r9, r1
 8006ef0:	e7de      	b.n	8006eb0 <_strtod_l+0x8d0>
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006ef8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006efc:	f04f 38ff 	mov.w	r8, #4294967295
 8006f00:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006f04:	e7d4      	b.n	8006eb0 <_strtod_l+0x8d0>
 8006f06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f08:	ea13 0f08 	tst.w	r3, r8
 8006f0c:	e7e0      	b.n	8006ed0 <_strtod_l+0x8f0>
 8006f0e:	f7ff fb43 	bl	8006598 <sulp>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f1a:	f7f9 f935 	bl	8000188 <__aeabi_dsub>
 8006f1e:	2200      	movs	r2, #0
 8006f20:	2300      	movs	r3, #0
 8006f22:	4680      	mov	r8, r0
 8006f24:	4689      	mov	r9, r1
 8006f26:	f7f9 fd4f 	bl	80009c8 <__aeabi_dcmpeq>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d0c0      	beq.n	8006eb0 <_strtod_l+0x8d0>
 8006f2e:	e606      	b.n	8006b3e <_strtod_l+0x55e>
 8006f30:	4659      	mov	r1, fp
 8006f32:	4630      	mov	r0, r6
 8006f34:	f7ff fabe 	bl	80064b4 <__ratio>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f40:	2200      	movs	r2, #0
 8006f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f46:	f7f9 fd53 	bl	80009f0 <__aeabi_dcmple>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d06f      	beq.n	800702e <_strtod_l+0xa4e>
 8006f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d17c      	bne.n	800704e <_strtod_l+0xa6e>
 8006f54:	f1b8 0f00 	cmp.w	r8, #0
 8006f58:	d159      	bne.n	800700e <_strtod_l+0xa2e>
 8006f5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d17b      	bne.n	800705a <_strtod_l+0xa7a>
 8006f62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f66:	2200      	movs	r2, #0
 8006f68:	4b62      	ldr	r3, [pc, #392]	; (80070f4 <_strtod_l+0xb14>)
 8006f6a:	f7f9 fd37 	bl	80009dc <__aeabi_dcmplt>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	d15a      	bne.n	8007028 <_strtod_l+0xa48>
 8006f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f76:	2200      	movs	r2, #0
 8006f78:	4b5f      	ldr	r3, [pc, #380]	; (80070f8 <_strtod_l+0xb18>)
 8006f7a:	f7f9 fabd 	bl	80004f8 <__aeabi_dmul>
 8006f7e:	4605      	mov	r5, r0
 8006f80:	460f      	mov	r7, r1
 8006f82:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006f86:	9506      	str	r5, [sp, #24]
 8006f88:	9307      	str	r3, [sp, #28]
 8006f8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f92:	4b56      	ldr	r3, [pc, #344]	; (80070ec <_strtod_l+0xb0c>)
 8006f94:	4a55      	ldr	r2, [pc, #340]	; (80070ec <_strtod_l+0xb0c>)
 8006f96:	ea0a 0303 	and.w	r3, sl, r3
 8006f9a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f9c:	4b57      	ldr	r3, [pc, #348]	; (80070fc <_strtod_l+0xb1c>)
 8006f9e:	ea0a 0202 	and.w	r2, sl, r2
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	f040 80b0 	bne.w	8007108 <_strtod_l+0xb28>
 8006fa8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006fac:	4640      	mov	r0, r8
 8006fae:	4649      	mov	r1, r9
 8006fb0:	f7ff f9c2 	bl	8006338 <__ulp>
 8006fb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fb8:	f7f9 fa9e 	bl	80004f8 <__aeabi_dmul>
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	f7f9 f8e4 	bl	800018c <__adddf3>
 8006fc4:	f8df a124 	ldr.w	sl, [pc, #292]	; 80070ec <_strtod_l+0xb0c>
 8006fc8:	4a4d      	ldr	r2, [pc, #308]	; (8007100 <_strtod_l+0xb20>)
 8006fca:	ea01 0a0a 	and.w	sl, r1, sl
 8006fce:	4592      	cmp	sl, r2
 8006fd0:	4680      	mov	r8, r0
 8006fd2:	d948      	bls.n	8007066 <_strtod_l+0xa86>
 8006fd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fd6:	4b46      	ldr	r3, [pc, #280]	; (80070f0 <_strtod_l+0xb10>)
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d103      	bne.n	8006fe4 <_strtod_l+0xa04>
 8006fdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fde:	3301      	adds	r3, #1
 8006fe0:	f43f ad3c 	beq.w	8006a5c <_strtod_l+0x47c>
 8006fe4:	f04f 38ff 	mov.w	r8, #4294967295
 8006fe8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80070f0 <_strtod_l+0xb10>
 8006fec:	4620      	mov	r0, r4
 8006fee:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ff0:	f7fe fe76 	bl	8005ce0 <_Bfree>
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	9908      	ldr	r1, [sp, #32]
 8006ff8:	f7fe fe72 	bl	8005ce0 <_Bfree>
 8006ffc:	4659      	mov	r1, fp
 8006ffe:	4620      	mov	r0, r4
 8007000:	f7fe fe6e 	bl	8005ce0 <_Bfree>
 8007004:	4631      	mov	r1, r6
 8007006:	4620      	mov	r0, r4
 8007008:	f7fe fe6a 	bl	8005ce0 <_Bfree>
 800700c:	e605      	b.n	8006c1a <_strtod_l+0x63a>
 800700e:	f1b8 0f01 	cmp.w	r8, #1
 8007012:	d103      	bne.n	800701c <_strtod_l+0xa3c>
 8007014:	f1b9 0f00 	cmp.w	r9, #0
 8007018:	f43f ad91 	beq.w	8006b3e <_strtod_l+0x55e>
 800701c:	2200      	movs	r2, #0
 800701e:	4b39      	ldr	r3, [pc, #228]	; (8007104 <_strtod_l+0xb24>)
 8007020:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007022:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007026:	e016      	b.n	8007056 <_strtod_l+0xa76>
 8007028:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800702a:	4f33      	ldr	r7, [pc, #204]	; (80070f8 <_strtod_l+0xb18>)
 800702c:	e7a9      	b.n	8006f82 <_strtod_l+0x9a2>
 800702e:	4b32      	ldr	r3, [pc, #200]	; (80070f8 <_strtod_l+0xb18>)
 8007030:	2200      	movs	r2, #0
 8007032:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007036:	f7f9 fa5f 	bl	80004f8 <__aeabi_dmul>
 800703a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800703c:	4605      	mov	r5, r0
 800703e:	460f      	mov	r7, r1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d09e      	beq.n	8006f82 <_strtod_l+0x9a2>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800704c:	e79d      	b.n	8006f8a <_strtod_l+0x9aa>
 800704e:	2200      	movs	r2, #0
 8007050:	4b28      	ldr	r3, [pc, #160]	; (80070f4 <_strtod_l+0xb14>)
 8007052:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007056:	4f27      	ldr	r7, [pc, #156]	; (80070f4 <_strtod_l+0xb14>)
 8007058:	e797      	b.n	8006f8a <_strtod_l+0x9aa>
 800705a:	2200      	movs	r2, #0
 800705c:	4b29      	ldr	r3, [pc, #164]	; (8007104 <_strtod_l+0xb24>)
 800705e:	4645      	mov	r5, r8
 8007060:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007064:	e7f7      	b.n	8007056 <_strtod_l+0xa76>
 8007066:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800706a:	9b05      	ldr	r3, [sp, #20]
 800706c:	46ca      	mov	sl, r9
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1bc      	bne.n	8006fec <_strtod_l+0xa0c>
 8007072:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007076:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007078:	0d1b      	lsrs	r3, r3, #20
 800707a:	051b      	lsls	r3, r3, #20
 800707c:	429a      	cmp	r2, r3
 800707e:	d1b5      	bne.n	8006fec <_strtod_l+0xa0c>
 8007080:	4628      	mov	r0, r5
 8007082:	4639      	mov	r1, r7
 8007084:	f7f9 ffde 	bl	8001044 <__aeabi_d2lz>
 8007088:	f7f9 fa08 	bl	800049c <__aeabi_l2d>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4628      	mov	r0, r5
 8007092:	4639      	mov	r1, r7
 8007094:	f7f9 f878 	bl	8000188 <__aeabi_dsub>
 8007098:	460b      	mov	r3, r1
 800709a:	4602      	mov	r2, r0
 800709c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80070a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80070a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a6:	ea4a 0a08 	orr.w	sl, sl, r8
 80070aa:	ea5a 0a03 	orrs.w	sl, sl, r3
 80070ae:	d06c      	beq.n	800718a <_strtod_l+0xbaa>
 80070b0:	a309      	add	r3, pc, #36	; (adr r3, 80070d8 <_strtod_l+0xaf8>)
 80070b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b6:	f7f9 fc91 	bl	80009dc <__aeabi_dcmplt>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	f47f acd8 	bne.w	8006a70 <_strtod_l+0x490>
 80070c0:	a307      	add	r3, pc, #28	; (adr r3, 80070e0 <_strtod_l+0xb00>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070ca:	f7f9 fca5 	bl	8000a18 <__aeabi_dcmpgt>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d08c      	beq.n	8006fec <_strtod_l+0xa0c>
 80070d2:	e4cd      	b.n	8006a70 <_strtod_l+0x490>
 80070d4:	f3af 8000 	nop.w
 80070d8:	94a03595 	.word	0x94a03595
 80070dc:	3fdfffff 	.word	0x3fdfffff
 80070e0:	35afe535 	.word	0x35afe535
 80070e4:	3fe00000 	.word	0x3fe00000
 80070e8:	000fffff 	.word	0x000fffff
 80070ec:	7ff00000 	.word	0x7ff00000
 80070f0:	7fefffff 	.word	0x7fefffff
 80070f4:	3ff00000 	.word	0x3ff00000
 80070f8:	3fe00000 	.word	0x3fe00000
 80070fc:	7fe00000 	.word	0x7fe00000
 8007100:	7c9fffff 	.word	0x7c9fffff
 8007104:	bff00000 	.word	0xbff00000
 8007108:	9b05      	ldr	r3, [sp, #20]
 800710a:	b333      	cbz	r3, 800715a <_strtod_l+0xb7a>
 800710c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800710e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007112:	d822      	bhi.n	800715a <_strtod_l+0xb7a>
 8007114:	a328      	add	r3, pc, #160	; (adr r3, 80071b8 <_strtod_l+0xbd8>)
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	4628      	mov	r0, r5
 800711c:	4639      	mov	r1, r7
 800711e:	f7f9 fc67 	bl	80009f0 <__aeabi_dcmple>
 8007122:	b1a0      	cbz	r0, 800714e <_strtod_l+0xb6e>
 8007124:	4639      	mov	r1, r7
 8007126:	4628      	mov	r0, r5
 8007128:	f7f9 fcbe 	bl	8000aa8 <__aeabi_d2uiz>
 800712c:	2801      	cmp	r0, #1
 800712e:	bf38      	it	cc
 8007130:	2001      	movcc	r0, #1
 8007132:	f7f9 f967 	bl	8000404 <__aeabi_ui2d>
 8007136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007138:	4605      	mov	r5, r0
 800713a:	460f      	mov	r7, r1
 800713c:	bb03      	cbnz	r3, 8007180 <_strtod_l+0xba0>
 800713e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007142:	9014      	str	r0, [sp, #80]	; 0x50
 8007144:	9315      	str	r3, [sp, #84]	; 0x54
 8007146:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800714a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800714e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007150:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007152:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007156:	1a9b      	subs	r3, r3, r2
 8007158:	9311      	str	r3, [sp, #68]	; 0x44
 800715a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800715c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800715e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007162:	f7ff f8e9 	bl	8006338 <__ulp>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	4640      	mov	r0, r8
 800716c:	4649      	mov	r1, r9
 800716e:	f7f9 f9c3 	bl	80004f8 <__aeabi_dmul>
 8007172:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007176:	f7f9 f809 	bl	800018c <__adddf3>
 800717a:	4680      	mov	r8, r0
 800717c:	4689      	mov	r9, r1
 800717e:	e774      	b.n	800706a <_strtod_l+0xa8a>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007188:	e7dd      	b.n	8007146 <_strtod_l+0xb66>
 800718a:	a30d      	add	r3, pc, #52	; (adr r3, 80071c0 <_strtod_l+0xbe0>)
 800718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007190:	f7f9 fc24 	bl	80009dc <__aeabi_dcmplt>
 8007194:	e79b      	b.n	80070ce <_strtod_l+0xaee>
 8007196:	2300      	movs	r3, #0
 8007198:	930e      	str	r3, [sp, #56]	; 0x38
 800719a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800719c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	f7ff ba5b 	b.w	800665a <_strtod_l+0x7a>
 80071a4:	2a65      	cmp	r2, #101	; 0x65
 80071a6:	f43f ab52 	beq.w	800684e <_strtod_l+0x26e>
 80071aa:	2a45      	cmp	r2, #69	; 0x45
 80071ac:	f43f ab4f 	beq.w	800684e <_strtod_l+0x26e>
 80071b0:	2301      	movs	r3, #1
 80071b2:	f7ff bb87 	b.w	80068c4 <_strtod_l+0x2e4>
 80071b6:	bf00      	nop
 80071b8:	ffc00000 	.word	0xffc00000
 80071bc:	41dfffff 	.word	0x41dfffff
 80071c0:	94a03595 	.word	0x94a03595
 80071c4:	3fcfffff 	.word	0x3fcfffff

080071c8 <_strtod_r>:
 80071c8:	4b01      	ldr	r3, [pc, #4]	; (80071d0 <_strtod_r+0x8>)
 80071ca:	f7ff ba09 	b.w	80065e0 <_strtod_l>
 80071ce:	bf00      	nop
 80071d0:	20000078 	.word	0x20000078

080071d4 <_strtol_l.constprop.0>:
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071da:	4686      	mov	lr, r0
 80071dc:	4690      	mov	r8, r2
 80071de:	d001      	beq.n	80071e4 <_strtol_l.constprop.0+0x10>
 80071e0:	2b24      	cmp	r3, #36	; 0x24
 80071e2:	d906      	bls.n	80071f2 <_strtol_l.constprop.0+0x1e>
 80071e4:	f7fd fd84 	bl	8004cf0 <__errno>
 80071e8:	2316      	movs	r3, #22
 80071ea:	6003      	str	r3, [r0, #0]
 80071ec:	2000      	movs	r0, #0
 80071ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f2:	460d      	mov	r5, r1
 80071f4:	4835      	ldr	r0, [pc, #212]	; (80072cc <_strtol_l.constprop.0+0xf8>)
 80071f6:	462a      	mov	r2, r5
 80071f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071fc:	5d06      	ldrb	r6, [r0, r4]
 80071fe:	f016 0608 	ands.w	r6, r6, #8
 8007202:	d1f8      	bne.n	80071f6 <_strtol_l.constprop.0+0x22>
 8007204:	2c2d      	cmp	r4, #45	; 0x2d
 8007206:	d12e      	bne.n	8007266 <_strtol_l.constprop.0+0x92>
 8007208:	2601      	movs	r6, #1
 800720a:	782c      	ldrb	r4, [r5, #0]
 800720c:	1c95      	adds	r5, r2, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d057      	beq.n	80072c2 <_strtol_l.constprop.0+0xee>
 8007212:	2b10      	cmp	r3, #16
 8007214:	d109      	bne.n	800722a <_strtol_l.constprop.0+0x56>
 8007216:	2c30      	cmp	r4, #48	; 0x30
 8007218:	d107      	bne.n	800722a <_strtol_l.constprop.0+0x56>
 800721a:	782a      	ldrb	r2, [r5, #0]
 800721c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007220:	2a58      	cmp	r2, #88	; 0x58
 8007222:	d149      	bne.n	80072b8 <_strtol_l.constprop.0+0xe4>
 8007224:	2310      	movs	r3, #16
 8007226:	786c      	ldrb	r4, [r5, #1]
 8007228:	3502      	adds	r5, #2
 800722a:	2200      	movs	r2, #0
 800722c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007230:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007234:	fbbc f9f3 	udiv	r9, ip, r3
 8007238:	4610      	mov	r0, r2
 800723a:	fb03 ca19 	mls	sl, r3, r9, ip
 800723e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007242:	2f09      	cmp	r7, #9
 8007244:	d814      	bhi.n	8007270 <_strtol_l.constprop.0+0x9c>
 8007246:	463c      	mov	r4, r7
 8007248:	42a3      	cmp	r3, r4
 800724a:	dd20      	ble.n	800728e <_strtol_l.constprop.0+0xba>
 800724c:	1c57      	adds	r7, r2, #1
 800724e:	d007      	beq.n	8007260 <_strtol_l.constprop.0+0x8c>
 8007250:	4581      	cmp	r9, r0
 8007252:	d319      	bcc.n	8007288 <_strtol_l.constprop.0+0xb4>
 8007254:	d101      	bne.n	800725a <_strtol_l.constprop.0+0x86>
 8007256:	45a2      	cmp	sl, r4
 8007258:	db16      	blt.n	8007288 <_strtol_l.constprop.0+0xb4>
 800725a:	2201      	movs	r2, #1
 800725c:	fb00 4003 	mla	r0, r0, r3, r4
 8007260:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007264:	e7eb      	b.n	800723e <_strtol_l.constprop.0+0x6a>
 8007266:	2c2b      	cmp	r4, #43	; 0x2b
 8007268:	bf04      	itt	eq
 800726a:	782c      	ldrbeq	r4, [r5, #0]
 800726c:	1c95      	addeq	r5, r2, #2
 800726e:	e7ce      	b.n	800720e <_strtol_l.constprop.0+0x3a>
 8007270:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007274:	2f19      	cmp	r7, #25
 8007276:	d801      	bhi.n	800727c <_strtol_l.constprop.0+0xa8>
 8007278:	3c37      	subs	r4, #55	; 0x37
 800727a:	e7e5      	b.n	8007248 <_strtol_l.constprop.0+0x74>
 800727c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007280:	2f19      	cmp	r7, #25
 8007282:	d804      	bhi.n	800728e <_strtol_l.constprop.0+0xba>
 8007284:	3c57      	subs	r4, #87	; 0x57
 8007286:	e7df      	b.n	8007248 <_strtol_l.constprop.0+0x74>
 8007288:	f04f 32ff 	mov.w	r2, #4294967295
 800728c:	e7e8      	b.n	8007260 <_strtol_l.constprop.0+0x8c>
 800728e:	1c53      	adds	r3, r2, #1
 8007290:	d108      	bne.n	80072a4 <_strtol_l.constprop.0+0xd0>
 8007292:	2322      	movs	r3, #34	; 0x22
 8007294:	4660      	mov	r0, ip
 8007296:	f8ce 3000 	str.w	r3, [lr]
 800729a:	f1b8 0f00 	cmp.w	r8, #0
 800729e:	d0a6      	beq.n	80071ee <_strtol_l.constprop.0+0x1a>
 80072a0:	1e69      	subs	r1, r5, #1
 80072a2:	e006      	b.n	80072b2 <_strtol_l.constprop.0+0xde>
 80072a4:	b106      	cbz	r6, 80072a8 <_strtol_l.constprop.0+0xd4>
 80072a6:	4240      	negs	r0, r0
 80072a8:	f1b8 0f00 	cmp.w	r8, #0
 80072ac:	d09f      	beq.n	80071ee <_strtol_l.constprop.0+0x1a>
 80072ae:	2a00      	cmp	r2, #0
 80072b0:	d1f6      	bne.n	80072a0 <_strtol_l.constprop.0+0xcc>
 80072b2:	f8c8 1000 	str.w	r1, [r8]
 80072b6:	e79a      	b.n	80071ee <_strtol_l.constprop.0+0x1a>
 80072b8:	2430      	movs	r4, #48	; 0x30
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1b5      	bne.n	800722a <_strtol_l.constprop.0+0x56>
 80072be:	2308      	movs	r3, #8
 80072c0:	e7b3      	b.n	800722a <_strtol_l.constprop.0+0x56>
 80072c2:	2c30      	cmp	r4, #48	; 0x30
 80072c4:	d0a9      	beq.n	800721a <_strtol_l.constprop.0+0x46>
 80072c6:	230a      	movs	r3, #10
 80072c8:	e7af      	b.n	800722a <_strtol_l.constprop.0+0x56>
 80072ca:	bf00      	nop
 80072cc:	08009f31 	.word	0x08009f31

080072d0 <_strtol_r>:
 80072d0:	f7ff bf80 	b.w	80071d4 <_strtol_l.constprop.0>

080072d4 <__ssputs_r>:
 80072d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d8:	461f      	mov	r7, r3
 80072da:	688e      	ldr	r6, [r1, #8]
 80072dc:	4682      	mov	sl, r0
 80072de:	42be      	cmp	r6, r7
 80072e0:	460c      	mov	r4, r1
 80072e2:	4690      	mov	r8, r2
 80072e4:	680b      	ldr	r3, [r1, #0]
 80072e6:	d82c      	bhi.n	8007342 <__ssputs_r+0x6e>
 80072e8:	898a      	ldrh	r2, [r1, #12]
 80072ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072ee:	d026      	beq.n	800733e <__ssputs_r+0x6a>
 80072f0:	6965      	ldr	r5, [r4, #20]
 80072f2:	6909      	ldr	r1, [r1, #16]
 80072f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072f8:	eba3 0901 	sub.w	r9, r3, r1
 80072fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007300:	1c7b      	adds	r3, r7, #1
 8007302:	444b      	add	r3, r9
 8007304:	106d      	asrs	r5, r5, #1
 8007306:	429d      	cmp	r5, r3
 8007308:	bf38      	it	cc
 800730a:	461d      	movcc	r5, r3
 800730c:	0553      	lsls	r3, r2, #21
 800730e:	d527      	bpl.n	8007360 <__ssputs_r+0x8c>
 8007310:	4629      	mov	r1, r5
 8007312:	f7fe fc19 	bl	8005b48 <_malloc_r>
 8007316:	4606      	mov	r6, r0
 8007318:	b360      	cbz	r0, 8007374 <__ssputs_r+0xa0>
 800731a:	464a      	mov	r2, r9
 800731c:	6921      	ldr	r1, [r4, #16]
 800731e:	f7fd fd22 	bl	8004d66 <memcpy>
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800732c:	81a3      	strh	r3, [r4, #12]
 800732e:	6126      	str	r6, [r4, #16]
 8007330:	444e      	add	r6, r9
 8007332:	6026      	str	r6, [r4, #0]
 8007334:	463e      	mov	r6, r7
 8007336:	6165      	str	r5, [r4, #20]
 8007338:	eba5 0509 	sub.w	r5, r5, r9
 800733c:	60a5      	str	r5, [r4, #8]
 800733e:	42be      	cmp	r6, r7
 8007340:	d900      	bls.n	8007344 <__ssputs_r+0x70>
 8007342:	463e      	mov	r6, r7
 8007344:	4632      	mov	r2, r6
 8007346:	4641      	mov	r1, r8
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	f000 fb9d 	bl	8007a88 <memmove>
 800734e:	2000      	movs	r0, #0
 8007350:	68a3      	ldr	r3, [r4, #8]
 8007352:	1b9b      	subs	r3, r3, r6
 8007354:	60a3      	str	r3, [r4, #8]
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	4433      	add	r3, r6
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007360:	462a      	mov	r2, r5
 8007362:	f000 ff70 	bl	8008246 <_realloc_r>
 8007366:	4606      	mov	r6, r0
 8007368:	2800      	cmp	r0, #0
 800736a:	d1e0      	bne.n	800732e <__ssputs_r+0x5a>
 800736c:	4650      	mov	r0, sl
 800736e:	6921      	ldr	r1, [r4, #16]
 8007370:	f7fe fb7a 	bl	8005a68 <_free_r>
 8007374:	230c      	movs	r3, #12
 8007376:	f8ca 3000 	str.w	r3, [sl]
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	f04f 30ff 	mov.w	r0, #4294967295
 8007380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007384:	81a3      	strh	r3, [r4, #12]
 8007386:	e7e9      	b.n	800735c <__ssputs_r+0x88>

08007388 <_svfiprintf_r>:
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	4698      	mov	r8, r3
 800738e:	898b      	ldrh	r3, [r1, #12]
 8007390:	4607      	mov	r7, r0
 8007392:	061b      	lsls	r3, r3, #24
 8007394:	460d      	mov	r5, r1
 8007396:	4614      	mov	r4, r2
 8007398:	b09d      	sub	sp, #116	; 0x74
 800739a:	d50e      	bpl.n	80073ba <_svfiprintf_r+0x32>
 800739c:	690b      	ldr	r3, [r1, #16]
 800739e:	b963      	cbnz	r3, 80073ba <_svfiprintf_r+0x32>
 80073a0:	2140      	movs	r1, #64	; 0x40
 80073a2:	f7fe fbd1 	bl	8005b48 <_malloc_r>
 80073a6:	6028      	str	r0, [r5, #0]
 80073a8:	6128      	str	r0, [r5, #16]
 80073aa:	b920      	cbnz	r0, 80073b6 <_svfiprintf_r+0x2e>
 80073ac:	230c      	movs	r3, #12
 80073ae:	603b      	str	r3, [r7, #0]
 80073b0:	f04f 30ff 	mov.w	r0, #4294967295
 80073b4:	e0d0      	b.n	8007558 <_svfiprintf_r+0x1d0>
 80073b6:	2340      	movs	r3, #64	; 0x40
 80073b8:	616b      	str	r3, [r5, #20]
 80073ba:	2300      	movs	r3, #0
 80073bc:	9309      	str	r3, [sp, #36]	; 0x24
 80073be:	2320      	movs	r3, #32
 80073c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073c4:	2330      	movs	r3, #48	; 0x30
 80073c6:	f04f 0901 	mov.w	r9, #1
 80073ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80073ce:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007570 <_svfiprintf_r+0x1e8>
 80073d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073d6:	4623      	mov	r3, r4
 80073d8:	469a      	mov	sl, r3
 80073da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073de:	b10a      	cbz	r2, 80073e4 <_svfiprintf_r+0x5c>
 80073e0:	2a25      	cmp	r2, #37	; 0x25
 80073e2:	d1f9      	bne.n	80073d8 <_svfiprintf_r+0x50>
 80073e4:	ebba 0b04 	subs.w	fp, sl, r4
 80073e8:	d00b      	beq.n	8007402 <_svfiprintf_r+0x7a>
 80073ea:	465b      	mov	r3, fp
 80073ec:	4622      	mov	r2, r4
 80073ee:	4629      	mov	r1, r5
 80073f0:	4638      	mov	r0, r7
 80073f2:	f7ff ff6f 	bl	80072d4 <__ssputs_r>
 80073f6:	3001      	adds	r0, #1
 80073f8:	f000 80a9 	beq.w	800754e <_svfiprintf_r+0x1c6>
 80073fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073fe:	445a      	add	r2, fp
 8007400:	9209      	str	r2, [sp, #36]	; 0x24
 8007402:	f89a 3000 	ldrb.w	r3, [sl]
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 80a1 	beq.w	800754e <_svfiprintf_r+0x1c6>
 800740c:	2300      	movs	r3, #0
 800740e:	f04f 32ff 	mov.w	r2, #4294967295
 8007412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007416:	f10a 0a01 	add.w	sl, sl, #1
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	9307      	str	r3, [sp, #28]
 800741e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007422:	931a      	str	r3, [sp, #104]	; 0x68
 8007424:	4654      	mov	r4, sl
 8007426:	2205      	movs	r2, #5
 8007428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800742c:	4850      	ldr	r0, [pc, #320]	; (8007570 <_svfiprintf_r+0x1e8>)
 800742e:	f7fd fc8c 	bl	8004d4a <memchr>
 8007432:	9a04      	ldr	r2, [sp, #16]
 8007434:	b9d8      	cbnz	r0, 800746e <_svfiprintf_r+0xe6>
 8007436:	06d0      	lsls	r0, r2, #27
 8007438:	bf44      	itt	mi
 800743a:	2320      	movmi	r3, #32
 800743c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007440:	0711      	lsls	r1, r2, #28
 8007442:	bf44      	itt	mi
 8007444:	232b      	movmi	r3, #43	; 0x2b
 8007446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800744a:	f89a 3000 	ldrb.w	r3, [sl]
 800744e:	2b2a      	cmp	r3, #42	; 0x2a
 8007450:	d015      	beq.n	800747e <_svfiprintf_r+0xf6>
 8007452:	4654      	mov	r4, sl
 8007454:	2000      	movs	r0, #0
 8007456:	f04f 0c0a 	mov.w	ip, #10
 800745a:	9a07      	ldr	r2, [sp, #28]
 800745c:	4621      	mov	r1, r4
 800745e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007462:	3b30      	subs	r3, #48	; 0x30
 8007464:	2b09      	cmp	r3, #9
 8007466:	d94d      	bls.n	8007504 <_svfiprintf_r+0x17c>
 8007468:	b1b0      	cbz	r0, 8007498 <_svfiprintf_r+0x110>
 800746a:	9207      	str	r2, [sp, #28]
 800746c:	e014      	b.n	8007498 <_svfiprintf_r+0x110>
 800746e:	eba0 0308 	sub.w	r3, r0, r8
 8007472:	fa09 f303 	lsl.w	r3, r9, r3
 8007476:	4313      	orrs	r3, r2
 8007478:	46a2      	mov	sl, r4
 800747a:	9304      	str	r3, [sp, #16]
 800747c:	e7d2      	b.n	8007424 <_svfiprintf_r+0x9c>
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	1d19      	adds	r1, r3, #4
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	9103      	str	r1, [sp, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	bfbb      	ittet	lt
 800748a:	425b      	neglt	r3, r3
 800748c:	f042 0202 	orrlt.w	r2, r2, #2
 8007490:	9307      	strge	r3, [sp, #28]
 8007492:	9307      	strlt	r3, [sp, #28]
 8007494:	bfb8      	it	lt
 8007496:	9204      	strlt	r2, [sp, #16]
 8007498:	7823      	ldrb	r3, [r4, #0]
 800749a:	2b2e      	cmp	r3, #46	; 0x2e
 800749c:	d10c      	bne.n	80074b8 <_svfiprintf_r+0x130>
 800749e:	7863      	ldrb	r3, [r4, #1]
 80074a0:	2b2a      	cmp	r3, #42	; 0x2a
 80074a2:	d134      	bne.n	800750e <_svfiprintf_r+0x186>
 80074a4:	9b03      	ldr	r3, [sp, #12]
 80074a6:	3402      	adds	r4, #2
 80074a8:	1d1a      	adds	r2, r3, #4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	9203      	str	r2, [sp, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bfb8      	it	lt
 80074b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80074b6:	9305      	str	r3, [sp, #20]
 80074b8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007574 <_svfiprintf_r+0x1ec>
 80074bc:	2203      	movs	r2, #3
 80074be:	4650      	mov	r0, sl
 80074c0:	7821      	ldrb	r1, [r4, #0]
 80074c2:	f7fd fc42 	bl	8004d4a <memchr>
 80074c6:	b138      	cbz	r0, 80074d8 <_svfiprintf_r+0x150>
 80074c8:	2240      	movs	r2, #64	; 0x40
 80074ca:	9b04      	ldr	r3, [sp, #16]
 80074cc:	eba0 000a 	sub.w	r0, r0, sl
 80074d0:	4082      	lsls	r2, r0
 80074d2:	4313      	orrs	r3, r2
 80074d4:	3401      	adds	r4, #1
 80074d6:	9304      	str	r3, [sp, #16]
 80074d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074dc:	2206      	movs	r2, #6
 80074de:	4826      	ldr	r0, [pc, #152]	; (8007578 <_svfiprintf_r+0x1f0>)
 80074e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074e4:	f7fd fc31 	bl	8004d4a <memchr>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d038      	beq.n	800755e <_svfiprintf_r+0x1d6>
 80074ec:	4b23      	ldr	r3, [pc, #140]	; (800757c <_svfiprintf_r+0x1f4>)
 80074ee:	bb1b      	cbnz	r3, 8007538 <_svfiprintf_r+0x1b0>
 80074f0:	9b03      	ldr	r3, [sp, #12]
 80074f2:	3307      	adds	r3, #7
 80074f4:	f023 0307 	bic.w	r3, r3, #7
 80074f8:	3308      	adds	r3, #8
 80074fa:	9303      	str	r3, [sp, #12]
 80074fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074fe:	4433      	add	r3, r6
 8007500:	9309      	str	r3, [sp, #36]	; 0x24
 8007502:	e768      	b.n	80073d6 <_svfiprintf_r+0x4e>
 8007504:	460c      	mov	r4, r1
 8007506:	2001      	movs	r0, #1
 8007508:	fb0c 3202 	mla	r2, ip, r2, r3
 800750c:	e7a6      	b.n	800745c <_svfiprintf_r+0xd4>
 800750e:	2300      	movs	r3, #0
 8007510:	f04f 0c0a 	mov.w	ip, #10
 8007514:	4619      	mov	r1, r3
 8007516:	3401      	adds	r4, #1
 8007518:	9305      	str	r3, [sp, #20]
 800751a:	4620      	mov	r0, r4
 800751c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007520:	3a30      	subs	r2, #48	; 0x30
 8007522:	2a09      	cmp	r2, #9
 8007524:	d903      	bls.n	800752e <_svfiprintf_r+0x1a6>
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0c6      	beq.n	80074b8 <_svfiprintf_r+0x130>
 800752a:	9105      	str	r1, [sp, #20]
 800752c:	e7c4      	b.n	80074b8 <_svfiprintf_r+0x130>
 800752e:	4604      	mov	r4, r0
 8007530:	2301      	movs	r3, #1
 8007532:	fb0c 2101 	mla	r1, ip, r1, r2
 8007536:	e7f0      	b.n	800751a <_svfiprintf_r+0x192>
 8007538:	ab03      	add	r3, sp, #12
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	462a      	mov	r2, r5
 800753e:	4638      	mov	r0, r7
 8007540:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <_svfiprintf_r+0x1f8>)
 8007542:	a904      	add	r1, sp, #16
 8007544:	f7fc fc46 	bl	8003dd4 <_printf_float>
 8007548:	1c42      	adds	r2, r0, #1
 800754a:	4606      	mov	r6, r0
 800754c:	d1d6      	bne.n	80074fc <_svfiprintf_r+0x174>
 800754e:	89ab      	ldrh	r3, [r5, #12]
 8007550:	065b      	lsls	r3, r3, #25
 8007552:	f53f af2d 	bmi.w	80073b0 <_svfiprintf_r+0x28>
 8007556:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007558:	b01d      	add	sp, #116	; 0x74
 800755a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755e:	ab03      	add	r3, sp, #12
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	462a      	mov	r2, r5
 8007564:	4638      	mov	r0, r7
 8007566:	4b06      	ldr	r3, [pc, #24]	; (8007580 <_svfiprintf_r+0x1f8>)
 8007568:	a904      	add	r1, sp, #16
 800756a:	f7fc fed3 	bl	8004314 <_printf_i>
 800756e:	e7eb      	b.n	8007548 <_svfiprintf_r+0x1c0>
 8007570:	0800a031 	.word	0x0800a031
 8007574:	0800a037 	.word	0x0800a037
 8007578:	0800a03b 	.word	0x0800a03b
 800757c:	08003dd5 	.word	0x08003dd5
 8007580:	080072d5 	.word	0x080072d5

08007584 <__sfputc_r>:
 8007584:	6893      	ldr	r3, [r2, #8]
 8007586:	b410      	push	{r4}
 8007588:	3b01      	subs	r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	6093      	str	r3, [r2, #8]
 800758e:	da07      	bge.n	80075a0 <__sfputc_r+0x1c>
 8007590:	6994      	ldr	r4, [r2, #24]
 8007592:	42a3      	cmp	r3, r4
 8007594:	db01      	blt.n	800759a <__sfputc_r+0x16>
 8007596:	290a      	cmp	r1, #10
 8007598:	d102      	bne.n	80075a0 <__sfputc_r+0x1c>
 800759a:	bc10      	pop	{r4}
 800759c:	f000 b9de 	b.w	800795c <__swbuf_r>
 80075a0:	6813      	ldr	r3, [r2, #0]
 80075a2:	1c58      	adds	r0, r3, #1
 80075a4:	6010      	str	r0, [r2, #0]
 80075a6:	7019      	strb	r1, [r3, #0]
 80075a8:	4608      	mov	r0, r1
 80075aa:	bc10      	pop	{r4}
 80075ac:	4770      	bx	lr

080075ae <__sfputs_r>:
 80075ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b0:	4606      	mov	r6, r0
 80075b2:	460f      	mov	r7, r1
 80075b4:	4614      	mov	r4, r2
 80075b6:	18d5      	adds	r5, r2, r3
 80075b8:	42ac      	cmp	r4, r5
 80075ba:	d101      	bne.n	80075c0 <__sfputs_r+0x12>
 80075bc:	2000      	movs	r0, #0
 80075be:	e007      	b.n	80075d0 <__sfputs_r+0x22>
 80075c0:	463a      	mov	r2, r7
 80075c2:	4630      	mov	r0, r6
 80075c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c8:	f7ff ffdc 	bl	8007584 <__sfputc_r>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d1f3      	bne.n	80075b8 <__sfputs_r+0xa>
 80075d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075d4 <_vfiprintf_r>:
 80075d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	460d      	mov	r5, r1
 80075da:	4614      	mov	r4, r2
 80075dc:	4698      	mov	r8, r3
 80075de:	4606      	mov	r6, r0
 80075e0:	b09d      	sub	sp, #116	; 0x74
 80075e2:	b118      	cbz	r0, 80075ec <_vfiprintf_r+0x18>
 80075e4:	6a03      	ldr	r3, [r0, #32]
 80075e6:	b90b      	cbnz	r3, 80075ec <_vfiprintf_r+0x18>
 80075e8:	f7fd fa50 	bl	8004a8c <__sinit>
 80075ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ee:	07d9      	lsls	r1, r3, #31
 80075f0:	d405      	bmi.n	80075fe <_vfiprintf_r+0x2a>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	059a      	lsls	r2, r3, #22
 80075f6:	d402      	bmi.n	80075fe <_vfiprintf_r+0x2a>
 80075f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075fa:	f7fd fba4 	bl	8004d46 <__retarget_lock_acquire_recursive>
 80075fe:	89ab      	ldrh	r3, [r5, #12]
 8007600:	071b      	lsls	r3, r3, #28
 8007602:	d501      	bpl.n	8007608 <_vfiprintf_r+0x34>
 8007604:	692b      	ldr	r3, [r5, #16]
 8007606:	b99b      	cbnz	r3, 8007630 <_vfiprintf_r+0x5c>
 8007608:	4629      	mov	r1, r5
 800760a:	4630      	mov	r0, r6
 800760c:	f000 f9e4 	bl	80079d8 <__swsetup_r>
 8007610:	b170      	cbz	r0, 8007630 <_vfiprintf_r+0x5c>
 8007612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007614:	07dc      	lsls	r4, r3, #31
 8007616:	d504      	bpl.n	8007622 <_vfiprintf_r+0x4e>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	b01d      	add	sp, #116	; 0x74
 800761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007622:	89ab      	ldrh	r3, [r5, #12]
 8007624:	0598      	lsls	r0, r3, #22
 8007626:	d4f7      	bmi.n	8007618 <_vfiprintf_r+0x44>
 8007628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800762a:	f7fd fb8d 	bl	8004d48 <__retarget_lock_release_recursive>
 800762e:	e7f3      	b.n	8007618 <_vfiprintf_r+0x44>
 8007630:	2300      	movs	r3, #0
 8007632:	9309      	str	r3, [sp, #36]	; 0x24
 8007634:	2320      	movs	r3, #32
 8007636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800763a:	2330      	movs	r3, #48	; 0x30
 800763c:	f04f 0901 	mov.w	r9, #1
 8007640:	f8cd 800c 	str.w	r8, [sp, #12]
 8007644:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80077f4 <_vfiprintf_r+0x220>
 8007648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800764c:	4623      	mov	r3, r4
 800764e:	469a      	mov	sl, r3
 8007650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007654:	b10a      	cbz	r2, 800765a <_vfiprintf_r+0x86>
 8007656:	2a25      	cmp	r2, #37	; 0x25
 8007658:	d1f9      	bne.n	800764e <_vfiprintf_r+0x7a>
 800765a:	ebba 0b04 	subs.w	fp, sl, r4
 800765e:	d00b      	beq.n	8007678 <_vfiprintf_r+0xa4>
 8007660:	465b      	mov	r3, fp
 8007662:	4622      	mov	r2, r4
 8007664:	4629      	mov	r1, r5
 8007666:	4630      	mov	r0, r6
 8007668:	f7ff ffa1 	bl	80075ae <__sfputs_r>
 800766c:	3001      	adds	r0, #1
 800766e:	f000 80a9 	beq.w	80077c4 <_vfiprintf_r+0x1f0>
 8007672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007674:	445a      	add	r2, fp
 8007676:	9209      	str	r2, [sp, #36]	; 0x24
 8007678:	f89a 3000 	ldrb.w	r3, [sl]
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 80a1 	beq.w	80077c4 <_vfiprintf_r+0x1f0>
 8007682:	2300      	movs	r3, #0
 8007684:	f04f 32ff 	mov.w	r2, #4294967295
 8007688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800768c:	f10a 0a01 	add.w	sl, sl, #1
 8007690:	9304      	str	r3, [sp, #16]
 8007692:	9307      	str	r3, [sp, #28]
 8007694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007698:	931a      	str	r3, [sp, #104]	; 0x68
 800769a:	4654      	mov	r4, sl
 800769c:	2205      	movs	r2, #5
 800769e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a2:	4854      	ldr	r0, [pc, #336]	; (80077f4 <_vfiprintf_r+0x220>)
 80076a4:	f7fd fb51 	bl	8004d4a <memchr>
 80076a8:	9a04      	ldr	r2, [sp, #16]
 80076aa:	b9d8      	cbnz	r0, 80076e4 <_vfiprintf_r+0x110>
 80076ac:	06d1      	lsls	r1, r2, #27
 80076ae:	bf44      	itt	mi
 80076b0:	2320      	movmi	r3, #32
 80076b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076b6:	0713      	lsls	r3, r2, #28
 80076b8:	bf44      	itt	mi
 80076ba:	232b      	movmi	r3, #43	; 0x2b
 80076bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076c0:	f89a 3000 	ldrb.w	r3, [sl]
 80076c4:	2b2a      	cmp	r3, #42	; 0x2a
 80076c6:	d015      	beq.n	80076f4 <_vfiprintf_r+0x120>
 80076c8:	4654      	mov	r4, sl
 80076ca:	2000      	movs	r0, #0
 80076cc:	f04f 0c0a 	mov.w	ip, #10
 80076d0:	9a07      	ldr	r2, [sp, #28]
 80076d2:	4621      	mov	r1, r4
 80076d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d8:	3b30      	subs	r3, #48	; 0x30
 80076da:	2b09      	cmp	r3, #9
 80076dc:	d94d      	bls.n	800777a <_vfiprintf_r+0x1a6>
 80076de:	b1b0      	cbz	r0, 800770e <_vfiprintf_r+0x13a>
 80076e0:	9207      	str	r2, [sp, #28]
 80076e2:	e014      	b.n	800770e <_vfiprintf_r+0x13a>
 80076e4:	eba0 0308 	sub.w	r3, r0, r8
 80076e8:	fa09 f303 	lsl.w	r3, r9, r3
 80076ec:	4313      	orrs	r3, r2
 80076ee:	46a2      	mov	sl, r4
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	e7d2      	b.n	800769a <_vfiprintf_r+0xc6>
 80076f4:	9b03      	ldr	r3, [sp, #12]
 80076f6:	1d19      	adds	r1, r3, #4
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	9103      	str	r1, [sp, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	bfbb      	ittet	lt
 8007700:	425b      	neglt	r3, r3
 8007702:	f042 0202 	orrlt.w	r2, r2, #2
 8007706:	9307      	strge	r3, [sp, #28]
 8007708:	9307      	strlt	r3, [sp, #28]
 800770a:	bfb8      	it	lt
 800770c:	9204      	strlt	r2, [sp, #16]
 800770e:	7823      	ldrb	r3, [r4, #0]
 8007710:	2b2e      	cmp	r3, #46	; 0x2e
 8007712:	d10c      	bne.n	800772e <_vfiprintf_r+0x15a>
 8007714:	7863      	ldrb	r3, [r4, #1]
 8007716:	2b2a      	cmp	r3, #42	; 0x2a
 8007718:	d134      	bne.n	8007784 <_vfiprintf_r+0x1b0>
 800771a:	9b03      	ldr	r3, [sp, #12]
 800771c:	3402      	adds	r4, #2
 800771e:	1d1a      	adds	r2, r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	9203      	str	r2, [sp, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	bfb8      	it	lt
 8007728:	f04f 33ff 	movlt.w	r3, #4294967295
 800772c:	9305      	str	r3, [sp, #20]
 800772e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077f8 <_vfiprintf_r+0x224>
 8007732:	2203      	movs	r2, #3
 8007734:	4650      	mov	r0, sl
 8007736:	7821      	ldrb	r1, [r4, #0]
 8007738:	f7fd fb07 	bl	8004d4a <memchr>
 800773c:	b138      	cbz	r0, 800774e <_vfiprintf_r+0x17a>
 800773e:	2240      	movs	r2, #64	; 0x40
 8007740:	9b04      	ldr	r3, [sp, #16]
 8007742:	eba0 000a 	sub.w	r0, r0, sl
 8007746:	4082      	lsls	r2, r0
 8007748:	4313      	orrs	r3, r2
 800774a:	3401      	adds	r4, #1
 800774c:	9304      	str	r3, [sp, #16]
 800774e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007752:	2206      	movs	r2, #6
 8007754:	4829      	ldr	r0, [pc, #164]	; (80077fc <_vfiprintf_r+0x228>)
 8007756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800775a:	f7fd faf6 	bl	8004d4a <memchr>
 800775e:	2800      	cmp	r0, #0
 8007760:	d03f      	beq.n	80077e2 <_vfiprintf_r+0x20e>
 8007762:	4b27      	ldr	r3, [pc, #156]	; (8007800 <_vfiprintf_r+0x22c>)
 8007764:	bb1b      	cbnz	r3, 80077ae <_vfiprintf_r+0x1da>
 8007766:	9b03      	ldr	r3, [sp, #12]
 8007768:	3307      	adds	r3, #7
 800776a:	f023 0307 	bic.w	r3, r3, #7
 800776e:	3308      	adds	r3, #8
 8007770:	9303      	str	r3, [sp, #12]
 8007772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007774:	443b      	add	r3, r7
 8007776:	9309      	str	r3, [sp, #36]	; 0x24
 8007778:	e768      	b.n	800764c <_vfiprintf_r+0x78>
 800777a:	460c      	mov	r4, r1
 800777c:	2001      	movs	r0, #1
 800777e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007782:	e7a6      	b.n	80076d2 <_vfiprintf_r+0xfe>
 8007784:	2300      	movs	r3, #0
 8007786:	f04f 0c0a 	mov.w	ip, #10
 800778a:	4619      	mov	r1, r3
 800778c:	3401      	adds	r4, #1
 800778e:	9305      	str	r3, [sp, #20]
 8007790:	4620      	mov	r0, r4
 8007792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007796:	3a30      	subs	r2, #48	; 0x30
 8007798:	2a09      	cmp	r2, #9
 800779a:	d903      	bls.n	80077a4 <_vfiprintf_r+0x1d0>
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0c6      	beq.n	800772e <_vfiprintf_r+0x15a>
 80077a0:	9105      	str	r1, [sp, #20]
 80077a2:	e7c4      	b.n	800772e <_vfiprintf_r+0x15a>
 80077a4:	4604      	mov	r4, r0
 80077a6:	2301      	movs	r3, #1
 80077a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80077ac:	e7f0      	b.n	8007790 <_vfiprintf_r+0x1bc>
 80077ae:	ab03      	add	r3, sp, #12
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	462a      	mov	r2, r5
 80077b4:	4630      	mov	r0, r6
 80077b6:	4b13      	ldr	r3, [pc, #76]	; (8007804 <_vfiprintf_r+0x230>)
 80077b8:	a904      	add	r1, sp, #16
 80077ba:	f7fc fb0b 	bl	8003dd4 <_printf_float>
 80077be:	4607      	mov	r7, r0
 80077c0:	1c78      	adds	r0, r7, #1
 80077c2:	d1d6      	bne.n	8007772 <_vfiprintf_r+0x19e>
 80077c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077c6:	07d9      	lsls	r1, r3, #31
 80077c8:	d405      	bmi.n	80077d6 <_vfiprintf_r+0x202>
 80077ca:	89ab      	ldrh	r3, [r5, #12]
 80077cc:	059a      	lsls	r2, r3, #22
 80077ce:	d402      	bmi.n	80077d6 <_vfiprintf_r+0x202>
 80077d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077d2:	f7fd fab9 	bl	8004d48 <__retarget_lock_release_recursive>
 80077d6:	89ab      	ldrh	r3, [r5, #12]
 80077d8:	065b      	lsls	r3, r3, #25
 80077da:	f53f af1d 	bmi.w	8007618 <_vfiprintf_r+0x44>
 80077de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077e0:	e71c      	b.n	800761c <_vfiprintf_r+0x48>
 80077e2:	ab03      	add	r3, sp, #12
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	462a      	mov	r2, r5
 80077e8:	4630      	mov	r0, r6
 80077ea:	4b06      	ldr	r3, [pc, #24]	; (8007804 <_vfiprintf_r+0x230>)
 80077ec:	a904      	add	r1, sp, #16
 80077ee:	f7fc fd91 	bl	8004314 <_printf_i>
 80077f2:	e7e4      	b.n	80077be <_vfiprintf_r+0x1ea>
 80077f4:	0800a031 	.word	0x0800a031
 80077f8:	0800a037 	.word	0x0800a037
 80077fc:	0800a03b 	.word	0x0800a03b
 8007800:	08003dd5 	.word	0x08003dd5
 8007804:	080075af 	.word	0x080075af

08007808 <__sflush_r>:
 8007808:	898a      	ldrh	r2, [r1, #12]
 800780a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780c:	4605      	mov	r5, r0
 800780e:	0710      	lsls	r0, r2, #28
 8007810:	460c      	mov	r4, r1
 8007812:	d457      	bmi.n	80078c4 <__sflush_r+0xbc>
 8007814:	684b      	ldr	r3, [r1, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	dc04      	bgt.n	8007824 <__sflush_r+0x1c>
 800781a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800781c:	2b00      	cmp	r3, #0
 800781e:	dc01      	bgt.n	8007824 <__sflush_r+0x1c>
 8007820:	2000      	movs	r0, #0
 8007822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007826:	2e00      	cmp	r6, #0
 8007828:	d0fa      	beq.n	8007820 <__sflush_r+0x18>
 800782a:	2300      	movs	r3, #0
 800782c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007830:	682f      	ldr	r7, [r5, #0]
 8007832:	6a21      	ldr	r1, [r4, #32]
 8007834:	602b      	str	r3, [r5, #0]
 8007836:	d032      	beq.n	800789e <__sflush_r+0x96>
 8007838:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800783a:	89a3      	ldrh	r3, [r4, #12]
 800783c:	075a      	lsls	r2, r3, #29
 800783e:	d505      	bpl.n	800784c <__sflush_r+0x44>
 8007840:	6863      	ldr	r3, [r4, #4]
 8007842:	1ac0      	subs	r0, r0, r3
 8007844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007846:	b10b      	cbz	r3, 800784c <__sflush_r+0x44>
 8007848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800784a:	1ac0      	subs	r0, r0, r3
 800784c:	2300      	movs	r3, #0
 800784e:	4602      	mov	r2, r0
 8007850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007852:	4628      	mov	r0, r5
 8007854:	6a21      	ldr	r1, [r4, #32]
 8007856:	47b0      	blx	r6
 8007858:	1c43      	adds	r3, r0, #1
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	d106      	bne.n	800786c <__sflush_r+0x64>
 800785e:	6829      	ldr	r1, [r5, #0]
 8007860:	291d      	cmp	r1, #29
 8007862:	d82b      	bhi.n	80078bc <__sflush_r+0xb4>
 8007864:	4a28      	ldr	r2, [pc, #160]	; (8007908 <__sflush_r+0x100>)
 8007866:	410a      	asrs	r2, r1
 8007868:	07d6      	lsls	r6, r2, #31
 800786a:	d427      	bmi.n	80078bc <__sflush_r+0xb4>
 800786c:	2200      	movs	r2, #0
 800786e:	6062      	str	r2, [r4, #4]
 8007870:	6922      	ldr	r2, [r4, #16]
 8007872:	04d9      	lsls	r1, r3, #19
 8007874:	6022      	str	r2, [r4, #0]
 8007876:	d504      	bpl.n	8007882 <__sflush_r+0x7a>
 8007878:	1c42      	adds	r2, r0, #1
 800787a:	d101      	bne.n	8007880 <__sflush_r+0x78>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	b903      	cbnz	r3, 8007882 <__sflush_r+0x7a>
 8007880:	6560      	str	r0, [r4, #84]	; 0x54
 8007882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007884:	602f      	str	r7, [r5, #0]
 8007886:	2900      	cmp	r1, #0
 8007888:	d0ca      	beq.n	8007820 <__sflush_r+0x18>
 800788a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800788e:	4299      	cmp	r1, r3
 8007890:	d002      	beq.n	8007898 <__sflush_r+0x90>
 8007892:	4628      	mov	r0, r5
 8007894:	f7fe f8e8 	bl	8005a68 <_free_r>
 8007898:	2000      	movs	r0, #0
 800789a:	6360      	str	r0, [r4, #52]	; 0x34
 800789c:	e7c1      	b.n	8007822 <__sflush_r+0x1a>
 800789e:	2301      	movs	r3, #1
 80078a0:	4628      	mov	r0, r5
 80078a2:	47b0      	blx	r6
 80078a4:	1c41      	adds	r1, r0, #1
 80078a6:	d1c8      	bne.n	800783a <__sflush_r+0x32>
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0c5      	beq.n	800783a <__sflush_r+0x32>
 80078ae:	2b1d      	cmp	r3, #29
 80078b0:	d001      	beq.n	80078b6 <__sflush_r+0xae>
 80078b2:	2b16      	cmp	r3, #22
 80078b4:	d101      	bne.n	80078ba <__sflush_r+0xb2>
 80078b6:	602f      	str	r7, [r5, #0]
 80078b8:	e7b2      	b.n	8007820 <__sflush_r+0x18>
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c0:	81a3      	strh	r3, [r4, #12]
 80078c2:	e7ae      	b.n	8007822 <__sflush_r+0x1a>
 80078c4:	690f      	ldr	r7, [r1, #16]
 80078c6:	2f00      	cmp	r7, #0
 80078c8:	d0aa      	beq.n	8007820 <__sflush_r+0x18>
 80078ca:	0793      	lsls	r3, r2, #30
 80078cc:	bf18      	it	ne
 80078ce:	2300      	movne	r3, #0
 80078d0:	680e      	ldr	r6, [r1, #0]
 80078d2:	bf08      	it	eq
 80078d4:	694b      	ldreq	r3, [r1, #20]
 80078d6:	1bf6      	subs	r6, r6, r7
 80078d8:	600f      	str	r7, [r1, #0]
 80078da:	608b      	str	r3, [r1, #8]
 80078dc:	2e00      	cmp	r6, #0
 80078de:	dd9f      	ble.n	8007820 <__sflush_r+0x18>
 80078e0:	4633      	mov	r3, r6
 80078e2:	463a      	mov	r2, r7
 80078e4:	4628      	mov	r0, r5
 80078e6:	6a21      	ldr	r1, [r4, #32]
 80078e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80078ec:	47e0      	blx	ip
 80078ee:	2800      	cmp	r0, #0
 80078f0:	dc06      	bgt.n	8007900 <__sflush_r+0xf8>
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295
 80078f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078fc:	81a3      	strh	r3, [r4, #12]
 80078fe:	e790      	b.n	8007822 <__sflush_r+0x1a>
 8007900:	4407      	add	r7, r0
 8007902:	1a36      	subs	r6, r6, r0
 8007904:	e7ea      	b.n	80078dc <__sflush_r+0xd4>
 8007906:	bf00      	nop
 8007908:	dfbffffe 	.word	0xdfbffffe

0800790c <_fflush_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	690b      	ldr	r3, [r1, #16]
 8007910:	4605      	mov	r5, r0
 8007912:	460c      	mov	r4, r1
 8007914:	b913      	cbnz	r3, 800791c <_fflush_r+0x10>
 8007916:	2500      	movs	r5, #0
 8007918:	4628      	mov	r0, r5
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	b118      	cbz	r0, 8007926 <_fflush_r+0x1a>
 800791e:	6a03      	ldr	r3, [r0, #32]
 8007920:	b90b      	cbnz	r3, 8007926 <_fflush_r+0x1a>
 8007922:	f7fd f8b3 	bl	8004a8c <__sinit>
 8007926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0f3      	beq.n	8007916 <_fflush_r+0xa>
 800792e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007930:	07d0      	lsls	r0, r2, #31
 8007932:	d404      	bmi.n	800793e <_fflush_r+0x32>
 8007934:	0599      	lsls	r1, r3, #22
 8007936:	d402      	bmi.n	800793e <_fflush_r+0x32>
 8007938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800793a:	f7fd fa04 	bl	8004d46 <__retarget_lock_acquire_recursive>
 800793e:	4628      	mov	r0, r5
 8007940:	4621      	mov	r1, r4
 8007942:	f7ff ff61 	bl	8007808 <__sflush_r>
 8007946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007948:	4605      	mov	r5, r0
 800794a:	07da      	lsls	r2, r3, #31
 800794c:	d4e4      	bmi.n	8007918 <_fflush_r+0xc>
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	059b      	lsls	r3, r3, #22
 8007952:	d4e1      	bmi.n	8007918 <_fflush_r+0xc>
 8007954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007956:	f7fd f9f7 	bl	8004d48 <__retarget_lock_release_recursive>
 800795a:	e7dd      	b.n	8007918 <_fflush_r+0xc>

0800795c <__swbuf_r>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	460e      	mov	r6, r1
 8007960:	4614      	mov	r4, r2
 8007962:	4605      	mov	r5, r0
 8007964:	b118      	cbz	r0, 800796e <__swbuf_r+0x12>
 8007966:	6a03      	ldr	r3, [r0, #32]
 8007968:	b90b      	cbnz	r3, 800796e <__swbuf_r+0x12>
 800796a:	f7fd f88f 	bl	8004a8c <__sinit>
 800796e:	69a3      	ldr	r3, [r4, #24]
 8007970:	60a3      	str	r3, [r4, #8]
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	071a      	lsls	r2, r3, #28
 8007976:	d525      	bpl.n	80079c4 <__swbuf_r+0x68>
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	b31b      	cbz	r3, 80079c4 <__swbuf_r+0x68>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	6922      	ldr	r2, [r4, #16]
 8007980:	b2f6      	uxtb	r6, r6
 8007982:	1a98      	subs	r0, r3, r2
 8007984:	6963      	ldr	r3, [r4, #20]
 8007986:	4637      	mov	r7, r6
 8007988:	4283      	cmp	r3, r0
 800798a:	dc04      	bgt.n	8007996 <__swbuf_r+0x3a>
 800798c:	4621      	mov	r1, r4
 800798e:	4628      	mov	r0, r5
 8007990:	f7ff ffbc 	bl	800790c <_fflush_r>
 8007994:	b9e0      	cbnz	r0, 80079d0 <__swbuf_r+0x74>
 8007996:	68a3      	ldr	r3, [r4, #8]
 8007998:	3b01      	subs	r3, #1
 800799a:	60a3      	str	r3, [r4, #8]
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	6022      	str	r2, [r4, #0]
 80079a2:	701e      	strb	r6, [r3, #0]
 80079a4:	6962      	ldr	r2, [r4, #20]
 80079a6:	1c43      	adds	r3, r0, #1
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d004      	beq.n	80079b6 <__swbuf_r+0x5a>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	07db      	lsls	r3, r3, #31
 80079b0:	d506      	bpl.n	80079c0 <__swbuf_r+0x64>
 80079b2:	2e0a      	cmp	r6, #10
 80079b4:	d104      	bne.n	80079c0 <__swbuf_r+0x64>
 80079b6:	4621      	mov	r1, r4
 80079b8:	4628      	mov	r0, r5
 80079ba:	f7ff ffa7 	bl	800790c <_fflush_r>
 80079be:	b938      	cbnz	r0, 80079d0 <__swbuf_r+0x74>
 80079c0:	4638      	mov	r0, r7
 80079c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c4:	4621      	mov	r1, r4
 80079c6:	4628      	mov	r0, r5
 80079c8:	f000 f806 	bl	80079d8 <__swsetup_r>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d0d5      	beq.n	800797c <__swbuf_r+0x20>
 80079d0:	f04f 37ff 	mov.w	r7, #4294967295
 80079d4:	e7f4      	b.n	80079c0 <__swbuf_r+0x64>
	...

080079d8 <__swsetup_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4b2a      	ldr	r3, [pc, #168]	; (8007a84 <__swsetup_r+0xac>)
 80079dc:	4605      	mov	r5, r0
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	460c      	mov	r4, r1
 80079e2:	b118      	cbz	r0, 80079ec <__swsetup_r+0x14>
 80079e4:	6a03      	ldr	r3, [r0, #32]
 80079e6:	b90b      	cbnz	r3, 80079ec <__swsetup_r+0x14>
 80079e8:	f7fd f850 	bl	8004a8c <__sinit>
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079f2:	0718      	lsls	r0, r3, #28
 80079f4:	d422      	bmi.n	8007a3c <__swsetup_r+0x64>
 80079f6:	06d9      	lsls	r1, r3, #27
 80079f8:	d407      	bmi.n	8007a0a <__swsetup_r+0x32>
 80079fa:	2309      	movs	r3, #9
 80079fc:	602b      	str	r3, [r5, #0]
 80079fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a02:	f04f 30ff 	mov.w	r0, #4294967295
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	e034      	b.n	8007a74 <__swsetup_r+0x9c>
 8007a0a:	0758      	lsls	r0, r3, #29
 8007a0c:	d512      	bpl.n	8007a34 <__swsetup_r+0x5c>
 8007a0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a10:	b141      	cbz	r1, 8007a24 <__swsetup_r+0x4c>
 8007a12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a16:	4299      	cmp	r1, r3
 8007a18:	d002      	beq.n	8007a20 <__swsetup_r+0x48>
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f7fe f824 	bl	8005a68 <_free_r>
 8007a20:	2300      	movs	r3, #0
 8007a22:	6363      	str	r3, [r4, #52]	; 0x34
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a2a:	81a3      	strh	r3, [r4, #12]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	6063      	str	r3, [r4, #4]
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	6023      	str	r3, [r4, #0]
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	f043 0308 	orr.w	r3, r3, #8
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	b94b      	cbnz	r3, 8007a54 <__swsetup_r+0x7c>
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a4a:	d003      	beq.n	8007a54 <__swsetup_r+0x7c>
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	4628      	mov	r0, r5
 8007a50:	f000 fc6d 	bl	800832e <__smakebuf_r>
 8007a54:	89a0      	ldrh	r0, [r4, #12]
 8007a56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a5a:	f010 0301 	ands.w	r3, r0, #1
 8007a5e:	d00a      	beq.n	8007a76 <__swsetup_r+0x9e>
 8007a60:	2300      	movs	r3, #0
 8007a62:	60a3      	str	r3, [r4, #8]
 8007a64:	6963      	ldr	r3, [r4, #20]
 8007a66:	425b      	negs	r3, r3
 8007a68:	61a3      	str	r3, [r4, #24]
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	b943      	cbnz	r3, 8007a80 <__swsetup_r+0xa8>
 8007a6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a72:	d1c4      	bne.n	80079fe <__swsetup_r+0x26>
 8007a74:	bd38      	pop	{r3, r4, r5, pc}
 8007a76:	0781      	lsls	r1, r0, #30
 8007a78:	bf58      	it	pl
 8007a7a:	6963      	ldrpl	r3, [r4, #20]
 8007a7c:	60a3      	str	r3, [r4, #8]
 8007a7e:	e7f4      	b.n	8007a6a <__swsetup_r+0x92>
 8007a80:	2000      	movs	r0, #0
 8007a82:	e7f7      	b.n	8007a74 <__swsetup_r+0x9c>
 8007a84:	20000074 	.word	0x20000074

08007a88 <memmove>:
 8007a88:	4288      	cmp	r0, r1
 8007a8a:	b510      	push	{r4, lr}
 8007a8c:	eb01 0402 	add.w	r4, r1, r2
 8007a90:	d902      	bls.n	8007a98 <memmove+0x10>
 8007a92:	4284      	cmp	r4, r0
 8007a94:	4623      	mov	r3, r4
 8007a96:	d807      	bhi.n	8007aa8 <memmove+0x20>
 8007a98:	1e43      	subs	r3, r0, #1
 8007a9a:	42a1      	cmp	r1, r4
 8007a9c:	d008      	beq.n	8007ab0 <memmove+0x28>
 8007a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aa6:	e7f8      	b.n	8007a9a <memmove+0x12>
 8007aa8:	4601      	mov	r1, r0
 8007aaa:	4402      	add	r2, r0
 8007aac:	428a      	cmp	r2, r1
 8007aae:	d100      	bne.n	8007ab2 <memmove+0x2a>
 8007ab0:	bd10      	pop	{r4, pc}
 8007ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007aba:	e7f7      	b.n	8007aac <memmove+0x24>

08007abc <strncmp>:
 8007abc:	b510      	push	{r4, lr}
 8007abe:	b16a      	cbz	r2, 8007adc <strncmp+0x20>
 8007ac0:	3901      	subs	r1, #1
 8007ac2:	1884      	adds	r4, r0, r2
 8007ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ac8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d103      	bne.n	8007ad8 <strncmp+0x1c>
 8007ad0:	42a0      	cmp	r0, r4
 8007ad2:	d001      	beq.n	8007ad8 <strncmp+0x1c>
 8007ad4:	2a00      	cmp	r2, #0
 8007ad6:	d1f5      	bne.n	8007ac4 <strncmp+0x8>
 8007ad8:	1ad0      	subs	r0, r2, r3
 8007ada:	bd10      	pop	{r4, pc}
 8007adc:	4610      	mov	r0, r2
 8007ade:	e7fc      	b.n	8007ada <strncmp+0x1e>

08007ae0 <_sbrk_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4d05      	ldr	r5, [pc, #20]	; (8007afc <_sbrk_r+0x1c>)
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	4608      	mov	r0, r1
 8007aea:	602b      	str	r3, [r5, #0]
 8007aec:	f7fb fe4c 	bl	8003788 <_sbrk>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d102      	bne.n	8007afa <_sbrk_r+0x1a>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	b103      	cbz	r3, 8007afa <_sbrk_r+0x1a>
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	20000434 	.word	0x20000434

08007b00 <nan>:
 8007b00:	2000      	movs	r0, #0
 8007b02:	4901      	ldr	r1, [pc, #4]	; (8007b08 <nan+0x8>)
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	7ff80000 	.word	0x7ff80000

08007b0c <__assert_func>:
 8007b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b0e:	4614      	mov	r4, r2
 8007b10:	461a      	mov	r2, r3
 8007b12:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <__assert_func+0x2c>)
 8007b14:	4605      	mov	r5, r0
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68d8      	ldr	r0, [r3, #12]
 8007b1a:	b14c      	cbz	r4, 8007b30 <__assert_func+0x24>
 8007b1c:	4b07      	ldr	r3, [pc, #28]	; (8007b3c <__assert_func+0x30>)
 8007b1e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b22:	9100      	str	r1, [sp, #0]
 8007b24:	462b      	mov	r3, r5
 8007b26:	4906      	ldr	r1, [pc, #24]	; (8007b40 <__assert_func+0x34>)
 8007b28:	f000 fbca 	bl	80082c0 <fiprintf>
 8007b2c:	f000 fc5e 	bl	80083ec <abort>
 8007b30:	4b04      	ldr	r3, [pc, #16]	; (8007b44 <__assert_func+0x38>)
 8007b32:	461c      	mov	r4, r3
 8007b34:	e7f3      	b.n	8007b1e <__assert_func+0x12>
 8007b36:	bf00      	nop
 8007b38:	20000074 	.word	0x20000074
 8007b3c:	0800a04a 	.word	0x0800a04a
 8007b40:	0800a057 	.word	0x0800a057
 8007b44:	0800a085 	.word	0x0800a085

08007b48 <_calloc_r>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	fba1 5402 	umull	r5, r4, r1, r2
 8007b4e:	b934      	cbnz	r4, 8007b5e <_calloc_r+0x16>
 8007b50:	4629      	mov	r1, r5
 8007b52:	f7fd fff9 	bl	8005b48 <_malloc_r>
 8007b56:	4606      	mov	r6, r0
 8007b58:	b928      	cbnz	r0, 8007b66 <_calloc_r+0x1e>
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	bd70      	pop	{r4, r5, r6, pc}
 8007b5e:	220c      	movs	r2, #12
 8007b60:	2600      	movs	r6, #0
 8007b62:	6002      	str	r2, [r0, #0]
 8007b64:	e7f9      	b.n	8007b5a <_calloc_r+0x12>
 8007b66:	462a      	mov	r2, r5
 8007b68:	4621      	mov	r1, r4
 8007b6a:	f7fd f86e 	bl	8004c4a <memset>
 8007b6e:	e7f4      	b.n	8007b5a <_calloc_r+0x12>

08007b70 <rshift>:
 8007b70:	6903      	ldr	r3, [r0, #16]
 8007b72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b7a:	f100 0414 	add.w	r4, r0, #20
 8007b7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b82:	dd46      	ble.n	8007c12 <rshift+0xa2>
 8007b84:	f011 011f 	ands.w	r1, r1, #31
 8007b88:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b8c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007b90:	d10c      	bne.n	8007bac <rshift+0x3c>
 8007b92:	4629      	mov	r1, r5
 8007b94:	f100 0710 	add.w	r7, r0, #16
 8007b98:	42b1      	cmp	r1, r6
 8007b9a:	d335      	bcc.n	8007c08 <rshift+0x98>
 8007b9c:	1a9b      	subs	r3, r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	1eea      	subs	r2, r5, #3
 8007ba2:	4296      	cmp	r6, r2
 8007ba4:	bf38      	it	cc
 8007ba6:	2300      	movcc	r3, #0
 8007ba8:	4423      	add	r3, r4
 8007baa:	e015      	b.n	8007bd8 <rshift+0x68>
 8007bac:	46a1      	mov	r9, r4
 8007bae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bb2:	f1c1 0820 	rsb	r8, r1, #32
 8007bb6:	40cf      	lsrs	r7, r1
 8007bb8:	f105 0e04 	add.w	lr, r5, #4
 8007bbc:	4576      	cmp	r6, lr
 8007bbe:	46f4      	mov	ip, lr
 8007bc0:	d816      	bhi.n	8007bf0 <rshift+0x80>
 8007bc2:	1a9a      	subs	r2, r3, r2
 8007bc4:	0092      	lsls	r2, r2, #2
 8007bc6:	3a04      	subs	r2, #4
 8007bc8:	3501      	adds	r5, #1
 8007bca:	42ae      	cmp	r6, r5
 8007bcc:	bf38      	it	cc
 8007bce:	2200      	movcc	r2, #0
 8007bd0:	18a3      	adds	r3, r4, r2
 8007bd2:	50a7      	str	r7, [r4, r2]
 8007bd4:	b107      	cbz	r7, 8007bd8 <rshift+0x68>
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	eba3 0204 	sub.w	r2, r3, r4
 8007bde:	bf08      	it	eq
 8007be0:	2300      	moveq	r3, #0
 8007be2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007be6:	6102      	str	r2, [r0, #16]
 8007be8:	bf08      	it	eq
 8007bea:	6143      	streq	r3, [r0, #20]
 8007bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bf0:	f8dc c000 	ldr.w	ip, [ip]
 8007bf4:	fa0c fc08 	lsl.w	ip, ip, r8
 8007bf8:	ea4c 0707 	orr.w	r7, ip, r7
 8007bfc:	f849 7b04 	str.w	r7, [r9], #4
 8007c00:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c04:	40cf      	lsrs	r7, r1
 8007c06:	e7d9      	b.n	8007bbc <rshift+0x4c>
 8007c08:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c0c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c10:	e7c2      	b.n	8007b98 <rshift+0x28>
 8007c12:	4623      	mov	r3, r4
 8007c14:	e7e0      	b.n	8007bd8 <rshift+0x68>

08007c16 <__hexdig_fun>:
 8007c16:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007c1a:	2b09      	cmp	r3, #9
 8007c1c:	d802      	bhi.n	8007c24 <__hexdig_fun+0xe>
 8007c1e:	3820      	subs	r0, #32
 8007c20:	b2c0      	uxtb	r0, r0
 8007c22:	4770      	bx	lr
 8007c24:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007c28:	2b05      	cmp	r3, #5
 8007c2a:	d801      	bhi.n	8007c30 <__hexdig_fun+0x1a>
 8007c2c:	3847      	subs	r0, #71	; 0x47
 8007c2e:	e7f7      	b.n	8007c20 <__hexdig_fun+0xa>
 8007c30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007c34:	2b05      	cmp	r3, #5
 8007c36:	d801      	bhi.n	8007c3c <__hexdig_fun+0x26>
 8007c38:	3827      	subs	r0, #39	; 0x27
 8007c3a:	e7f1      	b.n	8007c20 <__hexdig_fun+0xa>
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	4770      	bx	lr

08007c40 <__gethex>:
 8007c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	4681      	mov	r9, r0
 8007c46:	468a      	mov	sl, r1
 8007c48:	4617      	mov	r7, r2
 8007c4a:	680a      	ldr	r2, [r1, #0]
 8007c4c:	b085      	sub	sp, #20
 8007c4e:	f102 0b02 	add.w	fp, r2, #2
 8007c52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007c56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007c5a:	9302      	str	r3, [sp, #8]
 8007c5c:	32fe      	adds	r2, #254	; 0xfe
 8007c5e:	eb02 030b 	add.w	r3, r2, fp
 8007c62:	46d8      	mov	r8, fp
 8007c64:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007c68:	9301      	str	r3, [sp, #4]
 8007c6a:	2830      	cmp	r0, #48	; 0x30
 8007c6c:	d0f7      	beq.n	8007c5e <__gethex+0x1e>
 8007c6e:	f7ff ffd2 	bl	8007c16 <__hexdig_fun>
 8007c72:	4604      	mov	r4, r0
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d138      	bne.n	8007cea <__gethex+0xaa>
 8007c78:	2201      	movs	r2, #1
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	49a7      	ldr	r1, [pc, #668]	; (8007f1c <__gethex+0x2dc>)
 8007c7e:	f7ff ff1d 	bl	8007abc <strncmp>
 8007c82:	4606      	mov	r6, r0
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d169      	bne.n	8007d5c <__gethex+0x11c>
 8007c88:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007c8c:	465d      	mov	r5, fp
 8007c8e:	f7ff ffc2 	bl	8007c16 <__hexdig_fun>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d064      	beq.n	8007d60 <__gethex+0x120>
 8007c96:	465a      	mov	r2, fp
 8007c98:	7810      	ldrb	r0, [r2, #0]
 8007c9a:	4690      	mov	r8, r2
 8007c9c:	2830      	cmp	r0, #48	; 0x30
 8007c9e:	f102 0201 	add.w	r2, r2, #1
 8007ca2:	d0f9      	beq.n	8007c98 <__gethex+0x58>
 8007ca4:	f7ff ffb7 	bl	8007c16 <__hexdig_fun>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	fab0 f480 	clz	r4, r0
 8007cae:	465e      	mov	r6, fp
 8007cb0:	0964      	lsrs	r4, r4, #5
 8007cb2:	9301      	str	r3, [sp, #4]
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	4615      	mov	r5, r2
 8007cb8:	7828      	ldrb	r0, [r5, #0]
 8007cba:	3201      	adds	r2, #1
 8007cbc:	f7ff ffab 	bl	8007c16 <__hexdig_fun>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d1f8      	bne.n	8007cb6 <__gethex+0x76>
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	4994      	ldr	r1, [pc, #592]	; (8007f1c <__gethex+0x2dc>)
 8007cca:	f7ff fef7 	bl	8007abc <strncmp>
 8007cce:	b978      	cbnz	r0, 8007cf0 <__gethex+0xb0>
 8007cd0:	b946      	cbnz	r6, 8007ce4 <__gethex+0xa4>
 8007cd2:	1c6e      	adds	r6, r5, #1
 8007cd4:	4632      	mov	r2, r6
 8007cd6:	4615      	mov	r5, r2
 8007cd8:	7828      	ldrb	r0, [r5, #0]
 8007cda:	3201      	adds	r2, #1
 8007cdc:	f7ff ff9b 	bl	8007c16 <__hexdig_fun>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d1f8      	bne.n	8007cd6 <__gethex+0x96>
 8007ce4:	1b73      	subs	r3, r6, r5
 8007ce6:	009e      	lsls	r6, r3, #2
 8007ce8:	e004      	b.n	8007cf4 <__gethex+0xb4>
 8007cea:	2400      	movs	r4, #0
 8007cec:	4626      	mov	r6, r4
 8007cee:	e7e1      	b.n	8007cb4 <__gethex+0x74>
 8007cf0:	2e00      	cmp	r6, #0
 8007cf2:	d1f7      	bne.n	8007ce4 <__gethex+0xa4>
 8007cf4:	782b      	ldrb	r3, [r5, #0]
 8007cf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007cfa:	2b50      	cmp	r3, #80	; 0x50
 8007cfc:	d13d      	bne.n	8007d7a <__gethex+0x13a>
 8007cfe:	786b      	ldrb	r3, [r5, #1]
 8007d00:	2b2b      	cmp	r3, #43	; 0x2b
 8007d02:	d02f      	beq.n	8007d64 <__gethex+0x124>
 8007d04:	2b2d      	cmp	r3, #45	; 0x2d
 8007d06:	d031      	beq.n	8007d6c <__gethex+0x12c>
 8007d08:	f04f 0b00 	mov.w	fp, #0
 8007d0c:	1c69      	adds	r1, r5, #1
 8007d0e:	7808      	ldrb	r0, [r1, #0]
 8007d10:	f7ff ff81 	bl	8007c16 <__hexdig_fun>
 8007d14:	1e42      	subs	r2, r0, #1
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	2a18      	cmp	r2, #24
 8007d1a:	d82e      	bhi.n	8007d7a <__gethex+0x13a>
 8007d1c:	f1a0 0210 	sub.w	r2, r0, #16
 8007d20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d24:	f7ff ff77 	bl	8007c16 <__hexdig_fun>
 8007d28:	f100 3cff 	add.w	ip, r0, #4294967295
 8007d2c:	fa5f fc8c 	uxtb.w	ip, ip
 8007d30:	f1bc 0f18 	cmp.w	ip, #24
 8007d34:	d91d      	bls.n	8007d72 <__gethex+0x132>
 8007d36:	f1bb 0f00 	cmp.w	fp, #0
 8007d3a:	d000      	beq.n	8007d3e <__gethex+0xfe>
 8007d3c:	4252      	negs	r2, r2
 8007d3e:	4416      	add	r6, r2
 8007d40:	f8ca 1000 	str.w	r1, [sl]
 8007d44:	b1dc      	cbz	r4, 8007d7e <__gethex+0x13e>
 8007d46:	9b01      	ldr	r3, [sp, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bf14      	ite	ne
 8007d4c:	f04f 0800 	movne.w	r8, #0
 8007d50:	f04f 0806 	moveq.w	r8, #6
 8007d54:	4640      	mov	r0, r8
 8007d56:	b005      	add	sp, #20
 8007d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5c:	4645      	mov	r5, r8
 8007d5e:	4626      	mov	r6, r4
 8007d60:	2401      	movs	r4, #1
 8007d62:	e7c7      	b.n	8007cf4 <__gethex+0xb4>
 8007d64:	f04f 0b00 	mov.w	fp, #0
 8007d68:	1ca9      	adds	r1, r5, #2
 8007d6a:	e7d0      	b.n	8007d0e <__gethex+0xce>
 8007d6c:	f04f 0b01 	mov.w	fp, #1
 8007d70:	e7fa      	b.n	8007d68 <__gethex+0x128>
 8007d72:	230a      	movs	r3, #10
 8007d74:	fb03 0002 	mla	r0, r3, r2, r0
 8007d78:	e7d0      	b.n	8007d1c <__gethex+0xdc>
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	e7e0      	b.n	8007d40 <__gethex+0x100>
 8007d7e:	4621      	mov	r1, r4
 8007d80:	eba5 0308 	sub.w	r3, r5, r8
 8007d84:	3b01      	subs	r3, #1
 8007d86:	2b07      	cmp	r3, #7
 8007d88:	dc0a      	bgt.n	8007da0 <__gethex+0x160>
 8007d8a:	4648      	mov	r0, r9
 8007d8c:	f7fd ff68 	bl	8005c60 <_Balloc>
 8007d90:	4604      	mov	r4, r0
 8007d92:	b940      	cbnz	r0, 8007da6 <__gethex+0x166>
 8007d94:	4602      	mov	r2, r0
 8007d96:	21e4      	movs	r1, #228	; 0xe4
 8007d98:	4b61      	ldr	r3, [pc, #388]	; (8007f20 <__gethex+0x2e0>)
 8007d9a:	4862      	ldr	r0, [pc, #392]	; (8007f24 <__gethex+0x2e4>)
 8007d9c:	f7ff feb6 	bl	8007b0c <__assert_func>
 8007da0:	3101      	adds	r1, #1
 8007da2:	105b      	asrs	r3, r3, #1
 8007da4:	e7ef      	b.n	8007d86 <__gethex+0x146>
 8007da6:	2300      	movs	r3, #0
 8007da8:	469b      	mov	fp, r3
 8007daa:	f100 0a14 	add.w	sl, r0, #20
 8007dae:	f8cd a004 	str.w	sl, [sp, #4]
 8007db2:	45a8      	cmp	r8, r5
 8007db4:	d344      	bcc.n	8007e40 <__gethex+0x200>
 8007db6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007dba:	4658      	mov	r0, fp
 8007dbc:	f848 bb04 	str.w	fp, [r8], #4
 8007dc0:	eba8 080a 	sub.w	r8, r8, sl
 8007dc4:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8007dc8:	6122      	str	r2, [r4, #16]
 8007dca:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007dce:	f7fe f839 	bl	8005e44 <__hi0bits>
 8007dd2:	683d      	ldr	r5, [r7, #0]
 8007dd4:	eba8 0800 	sub.w	r8, r8, r0
 8007dd8:	45a8      	cmp	r8, r5
 8007dda:	dd59      	ble.n	8007e90 <__gethex+0x250>
 8007ddc:	eba8 0805 	sub.w	r8, r8, r5
 8007de0:	4641      	mov	r1, r8
 8007de2:	4620      	mov	r0, r4
 8007de4:	f7fe fbb7 	bl	8006556 <__any_on>
 8007de8:	4683      	mov	fp, r0
 8007dea:	b1b8      	cbz	r0, 8007e1c <__gethex+0x1dc>
 8007dec:	f04f 0b01 	mov.w	fp, #1
 8007df0:	f108 33ff 	add.w	r3, r8, #4294967295
 8007df4:	1159      	asrs	r1, r3, #5
 8007df6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007dfa:	f003 021f 	and.w	r2, r3, #31
 8007dfe:	fa0b f202 	lsl.w	r2, fp, r2
 8007e02:	420a      	tst	r2, r1
 8007e04:	d00a      	beq.n	8007e1c <__gethex+0x1dc>
 8007e06:	455b      	cmp	r3, fp
 8007e08:	dd06      	ble.n	8007e18 <__gethex+0x1d8>
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f1a8 0102 	sub.w	r1, r8, #2
 8007e10:	f7fe fba1 	bl	8006556 <__any_on>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d138      	bne.n	8007e8a <__gethex+0x24a>
 8007e18:	f04f 0b02 	mov.w	fp, #2
 8007e1c:	4641      	mov	r1, r8
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f7ff fea6 	bl	8007b70 <rshift>
 8007e24:	4446      	add	r6, r8
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	42b3      	cmp	r3, r6
 8007e2a:	da41      	bge.n	8007eb0 <__gethex+0x270>
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	4648      	mov	r0, r9
 8007e30:	f7fd ff56 	bl	8005ce0 <_Bfree>
 8007e34:	2300      	movs	r3, #0
 8007e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e38:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	e789      	b.n	8007d54 <__gethex+0x114>
 8007e40:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007e44:	2a2e      	cmp	r2, #46	; 0x2e
 8007e46:	d014      	beq.n	8007e72 <__gethex+0x232>
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	d106      	bne.n	8007e5a <__gethex+0x21a>
 8007e4c:	9b01      	ldr	r3, [sp, #4]
 8007e4e:	f843 bb04 	str.w	fp, [r3], #4
 8007e52:	f04f 0b00 	mov.w	fp, #0
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	465b      	mov	r3, fp
 8007e5a:	7828      	ldrb	r0, [r5, #0]
 8007e5c:	9303      	str	r3, [sp, #12]
 8007e5e:	f7ff feda 	bl	8007c16 <__hexdig_fun>
 8007e62:	9b03      	ldr	r3, [sp, #12]
 8007e64:	f000 000f 	and.w	r0, r0, #15
 8007e68:	4098      	lsls	r0, r3
 8007e6a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007e6e:	3304      	adds	r3, #4
 8007e70:	e79f      	b.n	8007db2 <__gethex+0x172>
 8007e72:	45a8      	cmp	r8, r5
 8007e74:	d8e8      	bhi.n	8007e48 <__gethex+0x208>
 8007e76:	2201      	movs	r2, #1
 8007e78:	4628      	mov	r0, r5
 8007e7a:	4928      	ldr	r1, [pc, #160]	; (8007f1c <__gethex+0x2dc>)
 8007e7c:	9303      	str	r3, [sp, #12]
 8007e7e:	f7ff fe1d 	bl	8007abc <strncmp>
 8007e82:	9b03      	ldr	r3, [sp, #12]
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d1df      	bne.n	8007e48 <__gethex+0x208>
 8007e88:	e793      	b.n	8007db2 <__gethex+0x172>
 8007e8a:	f04f 0b03 	mov.w	fp, #3
 8007e8e:	e7c5      	b.n	8007e1c <__gethex+0x1dc>
 8007e90:	da0b      	bge.n	8007eaa <__gethex+0x26a>
 8007e92:	eba5 0808 	sub.w	r8, r5, r8
 8007e96:	4621      	mov	r1, r4
 8007e98:	4642      	mov	r2, r8
 8007e9a:	4648      	mov	r0, r9
 8007e9c:	f7fe f938 	bl	8006110 <__lshift>
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	eba6 0608 	sub.w	r6, r6, r8
 8007ea6:	f100 0a14 	add.w	sl, r0, #20
 8007eaa:	f04f 0b00 	mov.w	fp, #0
 8007eae:	e7ba      	b.n	8007e26 <__gethex+0x1e6>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	42b3      	cmp	r3, r6
 8007eb4:	dd74      	ble.n	8007fa0 <__gethex+0x360>
 8007eb6:	1b9e      	subs	r6, r3, r6
 8007eb8:	42b5      	cmp	r5, r6
 8007eba:	dc35      	bgt.n	8007f28 <__gethex+0x2e8>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d023      	beq.n	8007f0a <__gethex+0x2ca>
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d025      	beq.n	8007f12 <__gethex+0x2d2>
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d115      	bne.n	8007ef6 <__gethex+0x2b6>
 8007eca:	42b5      	cmp	r5, r6
 8007ecc:	d113      	bne.n	8007ef6 <__gethex+0x2b6>
 8007ece:	2d01      	cmp	r5, #1
 8007ed0:	d10b      	bne.n	8007eea <__gethex+0x2aa>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	9a02      	ldr	r2, [sp, #8]
 8007ed6:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	2301      	movs	r3, #1
 8007ede:	6123      	str	r3, [r4, #16]
 8007ee0:	f8ca 3000 	str.w	r3, [sl]
 8007ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ee6:	601c      	str	r4, [r3, #0]
 8007ee8:	e734      	b.n	8007d54 <__gethex+0x114>
 8007eea:	4620      	mov	r0, r4
 8007eec:	1e69      	subs	r1, r5, #1
 8007eee:	f7fe fb32 	bl	8006556 <__any_on>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d1ed      	bne.n	8007ed2 <__gethex+0x292>
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	4648      	mov	r0, r9
 8007efa:	f7fd fef1 	bl	8005ce0 <_Bfree>
 8007efe:	2300      	movs	r3, #0
 8007f00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f02:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	e724      	b.n	8007d54 <__gethex+0x114>
 8007f0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1f2      	bne.n	8007ef6 <__gethex+0x2b6>
 8007f10:	e7df      	b.n	8007ed2 <__gethex+0x292>
 8007f12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1dc      	bne.n	8007ed2 <__gethex+0x292>
 8007f18:	e7ed      	b.n	8007ef6 <__gethex+0x2b6>
 8007f1a:	bf00      	nop
 8007f1c:	08009edc 	.word	0x08009edc
 8007f20:	08009d75 	.word	0x08009d75
 8007f24:	0800a086 	.word	0x0800a086
 8007f28:	f106 38ff 	add.w	r8, r6, #4294967295
 8007f2c:	f1bb 0f00 	cmp.w	fp, #0
 8007f30:	d133      	bne.n	8007f9a <__gethex+0x35a>
 8007f32:	f1b8 0f00 	cmp.w	r8, #0
 8007f36:	d004      	beq.n	8007f42 <__gethex+0x302>
 8007f38:	4641      	mov	r1, r8
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f7fe fb0b 	bl	8006556 <__any_on>
 8007f40:	4683      	mov	fp, r0
 8007f42:	2301      	movs	r3, #1
 8007f44:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007f48:	f008 081f 	and.w	r8, r8, #31
 8007f4c:	fa03 f308 	lsl.w	r3, r3, r8
 8007f50:	f04f 0802 	mov.w	r8, #2
 8007f54:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007f58:	4631      	mov	r1, r6
 8007f5a:	4213      	tst	r3, r2
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	bf18      	it	ne
 8007f60:	f04b 0b02 	orrne.w	fp, fp, #2
 8007f64:	1bad      	subs	r5, r5, r6
 8007f66:	f7ff fe03 	bl	8007b70 <rshift>
 8007f6a:	687e      	ldr	r6, [r7, #4]
 8007f6c:	f1bb 0f00 	cmp.w	fp, #0
 8007f70:	d04a      	beq.n	8008008 <__gethex+0x3c8>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d016      	beq.n	8007fa6 <__gethex+0x366>
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d018      	beq.n	8007fae <__gethex+0x36e>
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d109      	bne.n	8007f94 <__gethex+0x354>
 8007f80:	f01b 0f02 	tst.w	fp, #2
 8007f84:	d006      	beq.n	8007f94 <__gethex+0x354>
 8007f86:	f8da 3000 	ldr.w	r3, [sl]
 8007f8a:	ea4b 0b03 	orr.w	fp, fp, r3
 8007f8e:	f01b 0f01 	tst.w	fp, #1
 8007f92:	d10f      	bne.n	8007fb4 <__gethex+0x374>
 8007f94:	f048 0810 	orr.w	r8, r8, #16
 8007f98:	e036      	b.n	8008008 <__gethex+0x3c8>
 8007f9a:	f04f 0b01 	mov.w	fp, #1
 8007f9e:	e7d0      	b.n	8007f42 <__gethex+0x302>
 8007fa0:	f04f 0801 	mov.w	r8, #1
 8007fa4:	e7e2      	b.n	8007f6c <__gethex+0x32c>
 8007fa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fa8:	f1c3 0301 	rsb	r3, r3, #1
 8007fac:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d0ef      	beq.n	8007f94 <__gethex+0x354>
 8007fb4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007fb8:	f104 0214 	add.w	r2, r4, #20
 8007fbc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007fc8:	4694      	mov	ip, r2
 8007fca:	f852 1b04 	ldr.w	r1, [r2], #4
 8007fce:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007fd2:	d01e      	beq.n	8008012 <__gethex+0x3d2>
 8007fd4:	3101      	adds	r1, #1
 8007fd6:	f8cc 1000 	str.w	r1, [ip]
 8007fda:	f1b8 0f02 	cmp.w	r8, #2
 8007fde:	f104 0214 	add.w	r2, r4, #20
 8007fe2:	d13d      	bne.n	8008060 <__gethex+0x420>
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	42ab      	cmp	r3, r5
 8007fea:	d10b      	bne.n	8008004 <__gethex+0x3c4>
 8007fec:	2301      	movs	r3, #1
 8007fee:	1169      	asrs	r1, r5, #5
 8007ff0:	f005 051f 	and.w	r5, r5, #31
 8007ff4:	fa03 f505 	lsl.w	r5, r3, r5
 8007ff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ffc:	421d      	tst	r5, r3
 8007ffe:	bf18      	it	ne
 8008000:	f04f 0801 	movne.w	r8, #1
 8008004:	f048 0820 	orr.w	r8, r8, #32
 8008008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800800a:	601c      	str	r4, [r3, #0]
 800800c:	9b02      	ldr	r3, [sp, #8]
 800800e:	601e      	str	r6, [r3, #0]
 8008010:	e6a0      	b.n	8007d54 <__gethex+0x114>
 8008012:	4290      	cmp	r0, r2
 8008014:	f842 3c04 	str.w	r3, [r2, #-4]
 8008018:	d8d6      	bhi.n	8007fc8 <__gethex+0x388>
 800801a:	68a2      	ldr	r2, [r4, #8]
 800801c:	4593      	cmp	fp, r2
 800801e:	db17      	blt.n	8008050 <__gethex+0x410>
 8008020:	6861      	ldr	r1, [r4, #4]
 8008022:	4648      	mov	r0, r9
 8008024:	3101      	adds	r1, #1
 8008026:	f7fd fe1b 	bl	8005c60 <_Balloc>
 800802a:	4682      	mov	sl, r0
 800802c:	b918      	cbnz	r0, 8008036 <__gethex+0x3f6>
 800802e:	4602      	mov	r2, r0
 8008030:	2184      	movs	r1, #132	; 0x84
 8008032:	4b1a      	ldr	r3, [pc, #104]	; (800809c <__gethex+0x45c>)
 8008034:	e6b1      	b.n	8007d9a <__gethex+0x15a>
 8008036:	6922      	ldr	r2, [r4, #16]
 8008038:	f104 010c 	add.w	r1, r4, #12
 800803c:	3202      	adds	r2, #2
 800803e:	0092      	lsls	r2, r2, #2
 8008040:	300c      	adds	r0, #12
 8008042:	f7fc fe90 	bl	8004d66 <memcpy>
 8008046:	4621      	mov	r1, r4
 8008048:	4648      	mov	r0, r9
 800804a:	f7fd fe49 	bl	8005ce0 <_Bfree>
 800804e:	4654      	mov	r4, sl
 8008050:	6922      	ldr	r2, [r4, #16]
 8008052:	1c51      	adds	r1, r2, #1
 8008054:	6121      	str	r1, [r4, #16]
 8008056:	2101      	movs	r1, #1
 8008058:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800805c:	6151      	str	r1, [r2, #20]
 800805e:	e7bc      	b.n	8007fda <__gethex+0x39a>
 8008060:	6921      	ldr	r1, [r4, #16]
 8008062:	4559      	cmp	r1, fp
 8008064:	dd0b      	ble.n	800807e <__gethex+0x43e>
 8008066:	2101      	movs	r1, #1
 8008068:	4620      	mov	r0, r4
 800806a:	f7ff fd81 	bl	8007b70 <rshift>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	3601      	adds	r6, #1
 8008072:	42b3      	cmp	r3, r6
 8008074:	f6ff aeda 	blt.w	8007e2c <__gethex+0x1ec>
 8008078:	f04f 0801 	mov.w	r8, #1
 800807c:	e7c2      	b.n	8008004 <__gethex+0x3c4>
 800807e:	f015 051f 	ands.w	r5, r5, #31
 8008082:	d0f9      	beq.n	8008078 <__gethex+0x438>
 8008084:	9b01      	ldr	r3, [sp, #4]
 8008086:	f1c5 0520 	rsb	r5, r5, #32
 800808a:	441a      	add	r2, r3
 800808c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008090:	f7fd fed8 	bl	8005e44 <__hi0bits>
 8008094:	42a8      	cmp	r0, r5
 8008096:	dbe6      	blt.n	8008066 <__gethex+0x426>
 8008098:	e7ee      	b.n	8008078 <__gethex+0x438>
 800809a:	bf00      	nop
 800809c:	08009d75 	.word	0x08009d75

080080a0 <L_shift>:
 80080a0:	f1c2 0208 	rsb	r2, r2, #8
 80080a4:	0092      	lsls	r2, r2, #2
 80080a6:	b570      	push	{r4, r5, r6, lr}
 80080a8:	f1c2 0620 	rsb	r6, r2, #32
 80080ac:	6843      	ldr	r3, [r0, #4]
 80080ae:	6804      	ldr	r4, [r0, #0]
 80080b0:	fa03 f506 	lsl.w	r5, r3, r6
 80080b4:	432c      	orrs	r4, r5
 80080b6:	40d3      	lsrs	r3, r2
 80080b8:	6004      	str	r4, [r0, #0]
 80080ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80080be:	4288      	cmp	r0, r1
 80080c0:	d3f4      	bcc.n	80080ac <L_shift+0xc>
 80080c2:	bd70      	pop	{r4, r5, r6, pc}

080080c4 <__match>:
 80080c4:	b530      	push	{r4, r5, lr}
 80080c6:	6803      	ldr	r3, [r0, #0]
 80080c8:	3301      	adds	r3, #1
 80080ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ce:	b914      	cbnz	r4, 80080d6 <__match+0x12>
 80080d0:	6003      	str	r3, [r0, #0]
 80080d2:	2001      	movs	r0, #1
 80080d4:	bd30      	pop	{r4, r5, pc}
 80080d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80080de:	2d19      	cmp	r5, #25
 80080e0:	bf98      	it	ls
 80080e2:	3220      	addls	r2, #32
 80080e4:	42a2      	cmp	r2, r4
 80080e6:	d0f0      	beq.n	80080ca <__match+0x6>
 80080e8:	2000      	movs	r0, #0
 80080ea:	e7f3      	b.n	80080d4 <__match+0x10>

080080ec <__hexnan>:
 80080ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	2500      	movs	r5, #0
 80080f2:	680b      	ldr	r3, [r1, #0]
 80080f4:	4682      	mov	sl, r0
 80080f6:	115e      	asrs	r6, r3, #5
 80080f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80080fc:	f013 031f 	ands.w	r3, r3, #31
 8008100:	bf18      	it	ne
 8008102:	3604      	addne	r6, #4
 8008104:	1f37      	subs	r7, r6, #4
 8008106:	4690      	mov	r8, r2
 8008108:	46b9      	mov	r9, r7
 800810a:	463c      	mov	r4, r7
 800810c:	46ab      	mov	fp, r5
 800810e:	b087      	sub	sp, #28
 8008110:	6801      	ldr	r1, [r0, #0]
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	f846 5c04 	str.w	r5, [r6, #-4]
 8008118:	9502      	str	r5, [sp, #8]
 800811a:	784a      	ldrb	r2, [r1, #1]
 800811c:	1c4b      	adds	r3, r1, #1
 800811e:	9303      	str	r3, [sp, #12]
 8008120:	b342      	cbz	r2, 8008174 <__hexnan+0x88>
 8008122:	4610      	mov	r0, r2
 8008124:	9105      	str	r1, [sp, #20]
 8008126:	9204      	str	r2, [sp, #16]
 8008128:	f7ff fd75 	bl	8007c16 <__hexdig_fun>
 800812c:	2800      	cmp	r0, #0
 800812e:	d14f      	bne.n	80081d0 <__hexnan+0xe4>
 8008130:	9a04      	ldr	r2, [sp, #16]
 8008132:	9905      	ldr	r1, [sp, #20]
 8008134:	2a20      	cmp	r2, #32
 8008136:	d818      	bhi.n	800816a <__hexnan+0x7e>
 8008138:	9b02      	ldr	r3, [sp, #8]
 800813a:	459b      	cmp	fp, r3
 800813c:	dd13      	ble.n	8008166 <__hexnan+0x7a>
 800813e:	454c      	cmp	r4, r9
 8008140:	d206      	bcs.n	8008150 <__hexnan+0x64>
 8008142:	2d07      	cmp	r5, #7
 8008144:	dc04      	bgt.n	8008150 <__hexnan+0x64>
 8008146:	462a      	mov	r2, r5
 8008148:	4649      	mov	r1, r9
 800814a:	4620      	mov	r0, r4
 800814c:	f7ff ffa8 	bl	80080a0 <L_shift>
 8008150:	4544      	cmp	r4, r8
 8008152:	d950      	bls.n	80081f6 <__hexnan+0x10a>
 8008154:	2300      	movs	r3, #0
 8008156:	f1a4 0904 	sub.w	r9, r4, #4
 800815a:	f844 3c04 	str.w	r3, [r4, #-4]
 800815e:	461d      	mov	r5, r3
 8008160:	464c      	mov	r4, r9
 8008162:	f8cd b008 	str.w	fp, [sp, #8]
 8008166:	9903      	ldr	r1, [sp, #12]
 8008168:	e7d7      	b.n	800811a <__hexnan+0x2e>
 800816a:	2a29      	cmp	r2, #41	; 0x29
 800816c:	d155      	bne.n	800821a <__hexnan+0x12e>
 800816e:	3102      	adds	r1, #2
 8008170:	f8ca 1000 	str.w	r1, [sl]
 8008174:	f1bb 0f00 	cmp.w	fp, #0
 8008178:	d04f      	beq.n	800821a <__hexnan+0x12e>
 800817a:	454c      	cmp	r4, r9
 800817c:	d206      	bcs.n	800818c <__hexnan+0xa0>
 800817e:	2d07      	cmp	r5, #7
 8008180:	dc04      	bgt.n	800818c <__hexnan+0xa0>
 8008182:	462a      	mov	r2, r5
 8008184:	4649      	mov	r1, r9
 8008186:	4620      	mov	r0, r4
 8008188:	f7ff ff8a 	bl	80080a0 <L_shift>
 800818c:	4544      	cmp	r4, r8
 800818e:	d934      	bls.n	80081fa <__hexnan+0x10e>
 8008190:	4623      	mov	r3, r4
 8008192:	f1a8 0204 	sub.w	r2, r8, #4
 8008196:	f853 1b04 	ldr.w	r1, [r3], #4
 800819a:	429f      	cmp	r7, r3
 800819c:	f842 1f04 	str.w	r1, [r2, #4]!
 80081a0:	d2f9      	bcs.n	8008196 <__hexnan+0xaa>
 80081a2:	1b3b      	subs	r3, r7, r4
 80081a4:	f023 0303 	bic.w	r3, r3, #3
 80081a8:	3304      	adds	r3, #4
 80081aa:	3e03      	subs	r6, #3
 80081ac:	3401      	adds	r4, #1
 80081ae:	42a6      	cmp	r6, r4
 80081b0:	bf38      	it	cc
 80081b2:	2304      	movcc	r3, #4
 80081b4:	2200      	movs	r2, #0
 80081b6:	4443      	add	r3, r8
 80081b8:	f843 2b04 	str.w	r2, [r3], #4
 80081bc:	429f      	cmp	r7, r3
 80081be:	d2fb      	bcs.n	80081b8 <__hexnan+0xcc>
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	b91b      	cbnz	r3, 80081cc <__hexnan+0xe0>
 80081c4:	4547      	cmp	r7, r8
 80081c6:	d126      	bne.n	8008216 <__hexnan+0x12a>
 80081c8:	2301      	movs	r3, #1
 80081ca:	603b      	str	r3, [r7, #0]
 80081cc:	2005      	movs	r0, #5
 80081ce:	e025      	b.n	800821c <__hexnan+0x130>
 80081d0:	3501      	adds	r5, #1
 80081d2:	2d08      	cmp	r5, #8
 80081d4:	f10b 0b01 	add.w	fp, fp, #1
 80081d8:	dd06      	ble.n	80081e8 <__hexnan+0xfc>
 80081da:	4544      	cmp	r4, r8
 80081dc:	d9c3      	bls.n	8008166 <__hexnan+0x7a>
 80081de:	2300      	movs	r3, #0
 80081e0:	2501      	movs	r5, #1
 80081e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80081e6:	3c04      	subs	r4, #4
 80081e8:	6822      	ldr	r2, [r4, #0]
 80081ea:	f000 000f 	and.w	r0, r0, #15
 80081ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80081f2:	6020      	str	r0, [r4, #0]
 80081f4:	e7b7      	b.n	8008166 <__hexnan+0x7a>
 80081f6:	2508      	movs	r5, #8
 80081f8:	e7b5      	b.n	8008166 <__hexnan+0x7a>
 80081fa:	9b01      	ldr	r3, [sp, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d0df      	beq.n	80081c0 <__hexnan+0xd4>
 8008200:	f04f 32ff 	mov.w	r2, #4294967295
 8008204:	f1c3 0320 	rsb	r3, r3, #32
 8008208:	40da      	lsrs	r2, r3
 800820a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800820e:	4013      	ands	r3, r2
 8008210:	f846 3c04 	str.w	r3, [r6, #-4]
 8008214:	e7d4      	b.n	80081c0 <__hexnan+0xd4>
 8008216:	3f04      	subs	r7, #4
 8008218:	e7d2      	b.n	80081c0 <__hexnan+0xd4>
 800821a:	2004      	movs	r0, #4
 800821c:	b007      	add	sp, #28
 800821e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008222 <__ascii_mbtowc>:
 8008222:	b082      	sub	sp, #8
 8008224:	b901      	cbnz	r1, 8008228 <__ascii_mbtowc+0x6>
 8008226:	a901      	add	r1, sp, #4
 8008228:	b142      	cbz	r2, 800823c <__ascii_mbtowc+0x1a>
 800822a:	b14b      	cbz	r3, 8008240 <__ascii_mbtowc+0x1e>
 800822c:	7813      	ldrb	r3, [r2, #0]
 800822e:	600b      	str	r3, [r1, #0]
 8008230:	7812      	ldrb	r2, [r2, #0]
 8008232:	1e10      	subs	r0, r2, #0
 8008234:	bf18      	it	ne
 8008236:	2001      	movne	r0, #1
 8008238:	b002      	add	sp, #8
 800823a:	4770      	bx	lr
 800823c:	4610      	mov	r0, r2
 800823e:	e7fb      	b.n	8008238 <__ascii_mbtowc+0x16>
 8008240:	f06f 0001 	mvn.w	r0, #1
 8008244:	e7f8      	b.n	8008238 <__ascii_mbtowc+0x16>

08008246 <_realloc_r>:
 8008246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800824a:	4680      	mov	r8, r0
 800824c:	4614      	mov	r4, r2
 800824e:	460e      	mov	r6, r1
 8008250:	b921      	cbnz	r1, 800825c <_realloc_r+0x16>
 8008252:	4611      	mov	r1, r2
 8008254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008258:	f7fd bc76 	b.w	8005b48 <_malloc_r>
 800825c:	b92a      	cbnz	r2, 800826a <_realloc_r+0x24>
 800825e:	f7fd fc03 	bl	8005a68 <_free_r>
 8008262:	4625      	mov	r5, r4
 8008264:	4628      	mov	r0, r5
 8008266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800826a:	f000 f8c6 	bl	80083fa <_malloc_usable_size_r>
 800826e:	4284      	cmp	r4, r0
 8008270:	4607      	mov	r7, r0
 8008272:	d802      	bhi.n	800827a <_realloc_r+0x34>
 8008274:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008278:	d812      	bhi.n	80082a0 <_realloc_r+0x5a>
 800827a:	4621      	mov	r1, r4
 800827c:	4640      	mov	r0, r8
 800827e:	f7fd fc63 	bl	8005b48 <_malloc_r>
 8008282:	4605      	mov	r5, r0
 8008284:	2800      	cmp	r0, #0
 8008286:	d0ed      	beq.n	8008264 <_realloc_r+0x1e>
 8008288:	42bc      	cmp	r4, r7
 800828a:	4622      	mov	r2, r4
 800828c:	4631      	mov	r1, r6
 800828e:	bf28      	it	cs
 8008290:	463a      	movcs	r2, r7
 8008292:	f7fc fd68 	bl	8004d66 <memcpy>
 8008296:	4631      	mov	r1, r6
 8008298:	4640      	mov	r0, r8
 800829a:	f7fd fbe5 	bl	8005a68 <_free_r>
 800829e:	e7e1      	b.n	8008264 <_realloc_r+0x1e>
 80082a0:	4635      	mov	r5, r6
 80082a2:	e7df      	b.n	8008264 <_realloc_r+0x1e>

080082a4 <__ascii_wctomb>:
 80082a4:	4603      	mov	r3, r0
 80082a6:	4608      	mov	r0, r1
 80082a8:	b141      	cbz	r1, 80082bc <__ascii_wctomb+0x18>
 80082aa:	2aff      	cmp	r2, #255	; 0xff
 80082ac:	d904      	bls.n	80082b8 <__ascii_wctomb+0x14>
 80082ae:	228a      	movs	r2, #138	; 0x8a
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	4770      	bx	lr
 80082b8:	2001      	movs	r0, #1
 80082ba:	700a      	strb	r2, [r1, #0]
 80082bc:	4770      	bx	lr
	...

080082c0 <fiprintf>:
 80082c0:	b40e      	push	{r1, r2, r3}
 80082c2:	b503      	push	{r0, r1, lr}
 80082c4:	4601      	mov	r1, r0
 80082c6:	ab03      	add	r3, sp, #12
 80082c8:	4805      	ldr	r0, [pc, #20]	; (80082e0 <fiprintf+0x20>)
 80082ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ce:	6800      	ldr	r0, [r0, #0]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	f7ff f97f 	bl	80075d4 <_vfiprintf_r>
 80082d6:	b002      	add	sp, #8
 80082d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082dc:	b003      	add	sp, #12
 80082de:	4770      	bx	lr
 80082e0:	20000074 	.word	0x20000074

080082e4 <__swhatbuf_r>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	460c      	mov	r4, r1
 80082e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ec:	4615      	mov	r5, r2
 80082ee:	2900      	cmp	r1, #0
 80082f0:	461e      	mov	r6, r3
 80082f2:	b096      	sub	sp, #88	; 0x58
 80082f4:	da0c      	bge.n	8008310 <__swhatbuf_r+0x2c>
 80082f6:	89a3      	ldrh	r3, [r4, #12]
 80082f8:	2100      	movs	r1, #0
 80082fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80082fe:	bf0c      	ite	eq
 8008300:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008304:	2340      	movne	r3, #64	; 0x40
 8008306:	2000      	movs	r0, #0
 8008308:	6031      	str	r1, [r6, #0]
 800830a:	602b      	str	r3, [r5, #0]
 800830c:	b016      	add	sp, #88	; 0x58
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	466a      	mov	r2, sp
 8008312:	f000 f849 	bl	80083a8 <_fstat_r>
 8008316:	2800      	cmp	r0, #0
 8008318:	dbed      	blt.n	80082f6 <__swhatbuf_r+0x12>
 800831a:	9901      	ldr	r1, [sp, #4]
 800831c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008320:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008324:	4259      	negs	r1, r3
 8008326:	4159      	adcs	r1, r3
 8008328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800832c:	e7eb      	b.n	8008306 <__swhatbuf_r+0x22>

0800832e <__smakebuf_r>:
 800832e:	898b      	ldrh	r3, [r1, #12]
 8008330:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008332:	079d      	lsls	r5, r3, #30
 8008334:	4606      	mov	r6, r0
 8008336:	460c      	mov	r4, r1
 8008338:	d507      	bpl.n	800834a <__smakebuf_r+0x1c>
 800833a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800833e:	6023      	str	r3, [r4, #0]
 8008340:	6123      	str	r3, [r4, #16]
 8008342:	2301      	movs	r3, #1
 8008344:	6163      	str	r3, [r4, #20]
 8008346:	b002      	add	sp, #8
 8008348:	bd70      	pop	{r4, r5, r6, pc}
 800834a:	466a      	mov	r2, sp
 800834c:	ab01      	add	r3, sp, #4
 800834e:	f7ff ffc9 	bl	80082e4 <__swhatbuf_r>
 8008352:	9900      	ldr	r1, [sp, #0]
 8008354:	4605      	mov	r5, r0
 8008356:	4630      	mov	r0, r6
 8008358:	f7fd fbf6 	bl	8005b48 <_malloc_r>
 800835c:	b948      	cbnz	r0, 8008372 <__smakebuf_r+0x44>
 800835e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008362:	059a      	lsls	r2, r3, #22
 8008364:	d4ef      	bmi.n	8008346 <__smakebuf_r+0x18>
 8008366:	f023 0303 	bic.w	r3, r3, #3
 800836a:	f043 0302 	orr.w	r3, r3, #2
 800836e:	81a3      	strh	r3, [r4, #12]
 8008370:	e7e3      	b.n	800833a <__smakebuf_r+0xc>
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	6020      	str	r0, [r4, #0]
 8008376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	9b00      	ldr	r3, [sp, #0]
 800837e:	6120      	str	r0, [r4, #16]
 8008380:	6163      	str	r3, [r4, #20]
 8008382:	9b01      	ldr	r3, [sp, #4]
 8008384:	b15b      	cbz	r3, 800839e <__smakebuf_r+0x70>
 8008386:	4630      	mov	r0, r6
 8008388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800838c:	f000 f81e 	bl	80083cc <_isatty_r>
 8008390:	b128      	cbz	r0, 800839e <__smakebuf_r+0x70>
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	f023 0303 	bic.w	r3, r3, #3
 8008398:	f043 0301 	orr.w	r3, r3, #1
 800839c:	81a3      	strh	r3, [r4, #12]
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	431d      	orrs	r5, r3
 80083a2:	81a5      	strh	r5, [r4, #12]
 80083a4:	e7cf      	b.n	8008346 <__smakebuf_r+0x18>
	...

080083a8 <_fstat_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	2300      	movs	r3, #0
 80083ac:	4d06      	ldr	r5, [pc, #24]	; (80083c8 <_fstat_r+0x20>)
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	4611      	mov	r1, r2
 80083b4:	602b      	str	r3, [r5, #0]
 80083b6:	f7fb f9c2 	bl	800373e <_fstat>
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	d102      	bne.n	80083c4 <_fstat_r+0x1c>
 80083be:	682b      	ldr	r3, [r5, #0]
 80083c0:	b103      	cbz	r3, 80083c4 <_fstat_r+0x1c>
 80083c2:	6023      	str	r3, [r4, #0]
 80083c4:	bd38      	pop	{r3, r4, r5, pc}
 80083c6:	bf00      	nop
 80083c8:	20000434 	.word	0x20000434

080083cc <_isatty_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	2300      	movs	r3, #0
 80083d0:	4d05      	ldr	r5, [pc, #20]	; (80083e8 <_isatty_r+0x1c>)
 80083d2:	4604      	mov	r4, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	f7fb f9c0 	bl	800375c <_isatty>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_isatty_r+0x1a>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_isatty_r+0x1a>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	20000434 	.word	0x20000434

080083ec <abort>:
 80083ec:	2006      	movs	r0, #6
 80083ee:	b508      	push	{r3, lr}
 80083f0:	f000 f834 	bl	800845c <raise>
 80083f4:	2001      	movs	r0, #1
 80083f6:	f7fb f970 	bl	80036da <_exit>

080083fa <_malloc_usable_size_r>:
 80083fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083fe:	1f18      	subs	r0, r3, #4
 8008400:	2b00      	cmp	r3, #0
 8008402:	bfbc      	itt	lt
 8008404:	580b      	ldrlt	r3, [r1, r0]
 8008406:	18c0      	addlt	r0, r0, r3
 8008408:	4770      	bx	lr

0800840a <_raise_r>:
 800840a:	291f      	cmp	r1, #31
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4604      	mov	r4, r0
 8008410:	460d      	mov	r5, r1
 8008412:	d904      	bls.n	800841e <_raise_r+0x14>
 8008414:	2316      	movs	r3, #22
 8008416:	6003      	str	r3, [r0, #0]
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	bd38      	pop	{r3, r4, r5, pc}
 800841e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008420:	b112      	cbz	r2, 8008428 <_raise_r+0x1e>
 8008422:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008426:	b94b      	cbnz	r3, 800843c <_raise_r+0x32>
 8008428:	4620      	mov	r0, r4
 800842a:	f000 f831 	bl	8008490 <_getpid_r>
 800842e:	462a      	mov	r2, r5
 8008430:	4601      	mov	r1, r0
 8008432:	4620      	mov	r0, r4
 8008434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008438:	f000 b818 	b.w	800846c <_kill_r>
 800843c:	2b01      	cmp	r3, #1
 800843e:	d00a      	beq.n	8008456 <_raise_r+0x4c>
 8008440:	1c59      	adds	r1, r3, #1
 8008442:	d103      	bne.n	800844c <_raise_r+0x42>
 8008444:	2316      	movs	r3, #22
 8008446:	6003      	str	r3, [r0, #0]
 8008448:	2001      	movs	r0, #1
 800844a:	e7e7      	b.n	800841c <_raise_r+0x12>
 800844c:	2400      	movs	r4, #0
 800844e:	4628      	mov	r0, r5
 8008450:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008454:	4798      	blx	r3
 8008456:	2000      	movs	r0, #0
 8008458:	e7e0      	b.n	800841c <_raise_r+0x12>
	...

0800845c <raise>:
 800845c:	4b02      	ldr	r3, [pc, #8]	; (8008468 <raise+0xc>)
 800845e:	4601      	mov	r1, r0
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	f7ff bfd2 	b.w	800840a <_raise_r>
 8008466:	bf00      	nop
 8008468:	20000074 	.word	0x20000074

0800846c <_kill_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	2300      	movs	r3, #0
 8008470:	4d06      	ldr	r5, [pc, #24]	; (800848c <_kill_r+0x20>)
 8008472:	4604      	mov	r4, r0
 8008474:	4608      	mov	r0, r1
 8008476:	4611      	mov	r1, r2
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	f7fb f91e 	bl	80036ba <_kill>
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	d102      	bne.n	8008488 <_kill_r+0x1c>
 8008482:	682b      	ldr	r3, [r5, #0]
 8008484:	b103      	cbz	r3, 8008488 <_kill_r+0x1c>
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	bd38      	pop	{r3, r4, r5, pc}
 800848a:	bf00      	nop
 800848c:	20000434 	.word	0x20000434

08008490 <_getpid_r>:
 8008490:	f7fb b90c 	b.w	80036ac <_getpid>

08008494 <pow>:
 8008494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008498:	4614      	mov	r4, r2
 800849a:	461d      	mov	r5, r3
 800849c:	4680      	mov	r8, r0
 800849e:	4689      	mov	r9, r1
 80084a0:	f000 f9e2 	bl	8008868 <__ieee754_pow>
 80084a4:	4622      	mov	r2, r4
 80084a6:	4606      	mov	r6, r0
 80084a8:	460f      	mov	r7, r1
 80084aa:	462b      	mov	r3, r5
 80084ac:	4620      	mov	r0, r4
 80084ae:	4629      	mov	r1, r5
 80084b0:	f7f8 fabc 	bl	8000a2c <__aeabi_dcmpun>
 80084b4:	bbc8      	cbnz	r0, 800852a <pow+0x96>
 80084b6:	2200      	movs	r2, #0
 80084b8:	2300      	movs	r3, #0
 80084ba:	4640      	mov	r0, r8
 80084bc:	4649      	mov	r1, r9
 80084be:	f7f8 fa83 	bl	80009c8 <__aeabi_dcmpeq>
 80084c2:	b1b8      	cbz	r0, 80084f4 <pow+0x60>
 80084c4:	2200      	movs	r2, #0
 80084c6:	2300      	movs	r3, #0
 80084c8:	4620      	mov	r0, r4
 80084ca:	4629      	mov	r1, r5
 80084cc:	f7f8 fa7c 	bl	80009c8 <__aeabi_dcmpeq>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d141      	bne.n	8008558 <pow+0xc4>
 80084d4:	4620      	mov	r0, r4
 80084d6:	4629      	mov	r1, r5
 80084d8:	f000 f868 	bl	80085ac <finite>
 80084dc:	b328      	cbz	r0, 800852a <pow+0x96>
 80084de:	2200      	movs	r2, #0
 80084e0:	2300      	movs	r3, #0
 80084e2:	4620      	mov	r0, r4
 80084e4:	4629      	mov	r1, r5
 80084e6:	f7f8 fa79 	bl	80009dc <__aeabi_dcmplt>
 80084ea:	b1f0      	cbz	r0, 800852a <pow+0x96>
 80084ec:	f7fc fc00 	bl	8004cf0 <__errno>
 80084f0:	2322      	movs	r3, #34	; 0x22
 80084f2:	e019      	b.n	8008528 <pow+0x94>
 80084f4:	4630      	mov	r0, r6
 80084f6:	4639      	mov	r1, r7
 80084f8:	f000 f858 	bl	80085ac <finite>
 80084fc:	b9c8      	cbnz	r0, 8008532 <pow+0x9e>
 80084fe:	4640      	mov	r0, r8
 8008500:	4649      	mov	r1, r9
 8008502:	f000 f853 	bl	80085ac <finite>
 8008506:	b1a0      	cbz	r0, 8008532 <pow+0x9e>
 8008508:	4620      	mov	r0, r4
 800850a:	4629      	mov	r1, r5
 800850c:	f000 f84e 	bl	80085ac <finite>
 8008510:	b178      	cbz	r0, 8008532 <pow+0x9e>
 8008512:	4632      	mov	r2, r6
 8008514:	463b      	mov	r3, r7
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	f7f8 fa87 	bl	8000a2c <__aeabi_dcmpun>
 800851e:	2800      	cmp	r0, #0
 8008520:	d0e4      	beq.n	80084ec <pow+0x58>
 8008522:	f7fc fbe5 	bl	8004cf0 <__errno>
 8008526:	2321      	movs	r3, #33	; 0x21
 8008528:	6003      	str	r3, [r0, #0]
 800852a:	4630      	mov	r0, r6
 800852c:	4639      	mov	r1, r7
 800852e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008532:	2200      	movs	r2, #0
 8008534:	2300      	movs	r3, #0
 8008536:	4630      	mov	r0, r6
 8008538:	4639      	mov	r1, r7
 800853a:	f7f8 fa45 	bl	80009c8 <__aeabi_dcmpeq>
 800853e:	2800      	cmp	r0, #0
 8008540:	d0f3      	beq.n	800852a <pow+0x96>
 8008542:	4640      	mov	r0, r8
 8008544:	4649      	mov	r1, r9
 8008546:	f000 f831 	bl	80085ac <finite>
 800854a:	2800      	cmp	r0, #0
 800854c:	d0ed      	beq.n	800852a <pow+0x96>
 800854e:	4620      	mov	r0, r4
 8008550:	4629      	mov	r1, r5
 8008552:	f000 f82b 	bl	80085ac <finite>
 8008556:	e7c8      	b.n	80084ea <pow+0x56>
 8008558:	2600      	movs	r6, #0
 800855a:	4f01      	ldr	r7, [pc, #4]	; (8008560 <pow+0xcc>)
 800855c:	e7e5      	b.n	800852a <pow+0x96>
 800855e:	bf00      	nop
 8008560:	3ff00000 	.word	0x3ff00000

08008564 <sqrt>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	4606      	mov	r6, r0
 8008568:	460f      	mov	r7, r1
 800856a:	f000 f825 	bl	80085b8 <__ieee754_sqrt>
 800856e:	4632      	mov	r2, r6
 8008570:	4604      	mov	r4, r0
 8008572:	460d      	mov	r5, r1
 8008574:	463b      	mov	r3, r7
 8008576:	4630      	mov	r0, r6
 8008578:	4639      	mov	r1, r7
 800857a:	f7f8 fa57 	bl	8000a2c <__aeabi_dcmpun>
 800857e:	b990      	cbnz	r0, 80085a6 <sqrt+0x42>
 8008580:	2200      	movs	r2, #0
 8008582:	2300      	movs	r3, #0
 8008584:	4630      	mov	r0, r6
 8008586:	4639      	mov	r1, r7
 8008588:	f7f8 fa28 	bl	80009dc <__aeabi_dcmplt>
 800858c:	b158      	cbz	r0, 80085a6 <sqrt+0x42>
 800858e:	f7fc fbaf 	bl	8004cf0 <__errno>
 8008592:	2321      	movs	r3, #33	; 0x21
 8008594:	2200      	movs	r2, #0
 8008596:	6003      	str	r3, [r0, #0]
 8008598:	2300      	movs	r3, #0
 800859a:	4610      	mov	r0, r2
 800859c:	4619      	mov	r1, r3
 800859e:	f7f8 f8d5 	bl	800074c <__aeabi_ddiv>
 80085a2:	4604      	mov	r4, r0
 80085a4:	460d      	mov	r5, r1
 80085a6:	4620      	mov	r0, r4
 80085a8:	4629      	mov	r1, r5
 80085aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085ac <finite>:
 80085ac:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80085b0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80085b4:	0fc0      	lsrs	r0, r0, #31
 80085b6:	4770      	bx	lr

080085b8 <__ieee754_sqrt>:
 80085b8:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800875c <__ieee754_sqrt+0x1a4>
 80085bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	ea3c 0c01 	bics.w	ip, ip, r1
 80085c4:	460b      	mov	r3, r1
 80085c6:	4606      	mov	r6, r0
 80085c8:	460d      	mov	r5, r1
 80085ca:	460a      	mov	r2, r1
 80085cc:	4604      	mov	r4, r0
 80085ce:	d10e      	bne.n	80085ee <__ieee754_sqrt+0x36>
 80085d0:	4602      	mov	r2, r0
 80085d2:	f7f7 ff91 	bl	80004f8 <__aeabi_dmul>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4630      	mov	r0, r6
 80085dc:	4629      	mov	r1, r5
 80085de:	f7f7 fdd5 	bl	800018c <__adddf3>
 80085e2:	4606      	mov	r6, r0
 80085e4:	460d      	mov	r5, r1
 80085e6:	4630      	mov	r0, r6
 80085e8:	4629      	mov	r1, r5
 80085ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ee:	2900      	cmp	r1, #0
 80085f0:	dc0d      	bgt.n	800860e <__ieee754_sqrt+0x56>
 80085f2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80085f6:	ea5c 0c00 	orrs.w	ip, ip, r0
 80085fa:	d0f4      	beq.n	80085e6 <__ieee754_sqrt+0x2e>
 80085fc:	b139      	cbz	r1, 800860e <__ieee754_sqrt+0x56>
 80085fe:	4602      	mov	r2, r0
 8008600:	f7f7 fdc2 	bl	8000188 <__aeabi_dsub>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	f7f8 f8a0 	bl	800074c <__aeabi_ddiv>
 800860c:	e7e9      	b.n	80085e2 <__ieee754_sqrt+0x2a>
 800860e:	1512      	asrs	r2, r2, #20
 8008610:	f000 8089 	beq.w	8008726 <__ieee754_sqrt+0x16e>
 8008614:	2500      	movs	r5, #0
 8008616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800861a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800861e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008622:	07d2      	lsls	r2, r2, #31
 8008624:	bf5c      	itt	pl
 8008626:	005b      	lslpl	r3, r3, #1
 8008628:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800862c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008630:	bf58      	it	pl
 8008632:	0064      	lslpl	r4, r4, #1
 8008634:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008638:	0062      	lsls	r2, r4, #1
 800863a:	2016      	movs	r0, #22
 800863c:	4629      	mov	r1, r5
 800863e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8008642:	1076      	asrs	r6, r6, #1
 8008644:	190f      	adds	r7, r1, r4
 8008646:	429f      	cmp	r7, r3
 8008648:	bfde      	ittt	le
 800864a:	1bdb      	suble	r3, r3, r7
 800864c:	1939      	addle	r1, r7, r4
 800864e:	192d      	addle	r5, r5, r4
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	3801      	subs	r0, #1
 8008654:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008658:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800865c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008660:	d1f0      	bne.n	8008644 <__ieee754_sqrt+0x8c>
 8008662:	4604      	mov	r4, r0
 8008664:	2720      	movs	r7, #32
 8008666:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800866a:	428b      	cmp	r3, r1
 800866c:	eb0c 0e00 	add.w	lr, ip, r0
 8008670:	dc02      	bgt.n	8008678 <__ieee754_sqrt+0xc0>
 8008672:	d113      	bne.n	800869c <__ieee754_sqrt+0xe4>
 8008674:	4596      	cmp	lr, r2
 8008676:	d811      	bhi.n	800869c <__ieee754_sqrt+0xe4>
 8008678:	f1be 0f00 	cmp.w	lr, #0
 800867c:	eb0e 000c 	add.w	r0, lr, ip
 8008680:	da56      	bge.n	8008730 <__ieee754_sqrt+0x178>
 8008682:	2800      	cmp	r0, #0
 8008684:	db54      	blt.n	8008730 <__ieee754_sqrt+0x178>
 8008686:	f101 0801 	add.w	r8, r1, #1
 800868a:	1a5b      	subs	r3, r3, r1
 800868c:	4641      	mov	r1, r8
 800868e:	4596      	cmp	lr, r2
 8008690:	bf88      	it	hi
 8008692:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008696:	eba2 020e 	sub.w	r2, r2, lr
 800869a:	4464      	add	r4, ip
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	3f01      	subs	r7, #1
 80086a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80086a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80086a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80086ac:	d1dd      	bne.n	800866a <__ieee754_sqrt+0xb2>
 80086ae:	4313      	orrs	r3, r2
 80086b0:	d01b      	beq.n	80086ea <__ieee754_sqrt+0x132>
 80086b2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008760 <__ieee754_sqrt+0x1a8>
 80086b6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008764 <__ieee754_sqrt+0x1ac>
 80086ba:	e9da 0100 	ldrd	r0, r1, [sl]
 80086be:	e9db 2300 	ldrd	r2, r3, [fp]
 80086c2:	f7f7 fd61 	bl	8000188 <__aeabi_dsub>
 80086c6:	e9da 8900 	ldrd	r8, r9, [sl]
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4640      	mov	r0, r8
 80086d0:	4649      	mov	r1, r9
 80086d2:	f7f8 f98d 	bl	80009f0 <__aeabi_dcmple>
 80086d6:	b140      	cbz	r0, 80086ea <__ieee754_sqrt+0x132>
 80086d8:	e9da 0100 	ldrd	r0, r1, [sl]
 80086dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80086e0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80086e4:	d126      	bne.n	8008734 <__ieee754_sqrt+0x17c>
 80086e6:	463c      	mov	r4, r7
 80086e8:	3501      	adds	r5, #1
 80086ea:	106b      	asrs	r3, r5, #1
 80086ec:	0864      	lsrs	r4, r4, #1
 80086ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80086f2:	07ea      	lsls	r2, r5, #31
 80086f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80086f8:	bf48      	it	mi
 80086fa:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80086fe:	4620      	mov	r0, r4
 8008700:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008704:	e76d      	b.n	80085e2 <__ieee754_sqrt+0x2a>
 8008706:	0ae3      	lsrs	r3, r4, #11
 8008708:	3915      	subs	r1, #21
 800870a:	0564      	lsls	r4, r4, #21
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0fa      	beq.n	8008706 <__ieee754_sqrt+0x14e>
 8008710:	02d8      	lsls	r0, r3, #11
 8008712:	d50a      	bpl.n	800872a <__ieee754_sqrt+0x172>
 8008714:	f1c2 0020 	rsb	r0, r2, #32
 8008718:	fa24 f000 	lsr.w	r0, r4, r0
 800871c:	1e55      	subs	r5, r2, #1
 800871e:	4094      	lsls	r4, r2
 8008720:	4303      	orrs	r3, r0
 8008722:	1b4a      	subs	r2, r1, r5
 8008724:	e776      	b.n	8008614 <__ieee754_sqrt+0x5c>
 8008726:	4611      	mov	r1, r2
 8008728:	e7f0      	b.n	800870c <__ieee754_sqrt+0x154>
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	3201      	adds	r2, #1
 800872e:	e7ef      	b.n	8008710 <__ieee754_sqrt+0x158>
 8008730:	4688      	mov	r8, r1
 8008732:	e7aa      	b.n	800868a <__ieee754_sqrt+0xd2>
 8008734:	f7f7 fd2a 	bl	800018c <__adddf3>
 8008738:	e9da 8900 	ldrd	r8, r9, [sl]
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4640      	mov	r0, r8
 8008742:	4649      	mov	r1, r9
 8008744:	f7f8 f94a 	bl	80009dc <__aeabi_dcmplt>
 8008748:	b120      	cbz	r0, 8008754 <__ieee754_sqrt+0x19c>
 800874a:	1ca1      	adds	r1, r4, #2
 800874c:	bf08      	it	eq
 800874e:	3501      	addeq	r5, #1
 8008750:	3402      	adds	r4, #2
 8008752:	e7ca      	b.n	80086ea <__ieee754_sqrt+0x132>
 8008754:	3401      	adds	r4, #1
 8008756:	f024 0401 	bic.w	r4, r4, #1
 800875a:	e7c6      	b.n	80086ea <__ieee754_sqrt+0x132>
 800875c:	7ff00000 	.word	0x7ff00000
 8008760:	200001e8 	.word	0x200001e8
 8008764:	200001f0 	.word	0x200001f0

08008768 <floor>:
 8008768:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800876c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008770:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008774:	2e13      	cmp	r6, #19
 8008776:	460b      	mov	r3, r1
 8008778:	4607      	mov	r7, r0
 800877a:	460c      	mov	r4, r1
 800877c:	4605      	mov	r5, r0
 800877e:	dc32      	bgt.n	80087e6 <floor+0x7e>
 8008780:	2e00      	cmp	r6, #0
 8008782:	da14      	bge.n	80087ae <floor+0x46>
 8008784:	a334      	add	r3, pc, #208	; (adr r3, 8008858 <floor+0xf0>)
 8008786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878a:	f7f7 fcff 	bl	800018c <__adddf3>
 800878e:	2200      	movs	r2, #0
 8008790:	2300      	movs	r3, #0
 8008792:	f7f8 f941 	bl	8000a18 <__aeabi_dcmpgt>
 8008796:	b138      	cbz	r0, 80087a8 <floor+0x40>
 8008798:	2c00      	cmp	r4, #0
 800879a:	da56      	bge.n	800884a <floor+0xe2>
 800879c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80087a0:	4325      	orrs	r5, r4
 80087a2:	d055      	beq.n	8008850 <floor+0xe8>
 80087a4:	2500      	movs	r5, #0
 80087a6:	4c2e      	ldr	r4, [pc, #184]	; (8008860 <floor+0xf8>)
 80087a8:	4623      	mov	r3, r4
 80087aa:	462f      	mov	r7, r5
 80087ac:	e025      	b.n	80087fa <floor+0x92>
 80087ae:	4a2d      	ldr	r2, [pc, #180]	; (8008864 <floor+0xfc>)
 80087b0:	fa42 f806 	asr.w	r8, r2, r6
 80087b4:	ea01 0208 	and.w	r2, r1, r8
 80087b8:	4302      	orrs	r2, r0
 80087ba:	d01e      	beq.n	80087fa <floor+0x92>
 80087bc:	a326      	add	r3, pc, #152	; (adr r3, 8008858 <floor+0xf0>)
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	f7f7 fce3 	bl	800018c <__adddf3>
 80087c6:	2200      	movs	r2, #0
 80087c8:	2300      	movs	r3, #0
 80087ca:	f7f8 f925 	bl	8000a18 <__aeabi_dcmpgt>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d0ea      	beq.n	80087a8 <floor+0x40>
 80087d2:	2c00      	cmp	r4, #0
 80087d4:	bfbe      	ittt	lt
 80087d6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80087da:	4133      	asrlt	r3, r6
 80087dc:	18e4      	addlt	r4, r4, r3
 80087de:	2500      	movs	r5, #0
 80087e0:	ea24 0408 	bic.w	r4, r4, r8
 80087e4:	e7e0      	b.n	80087a8 <floor+0x40>
 80087e6:	2e33      	cmp	r6, #51	; 0x33
 80087e8:	dd0b      	ble.n	8008802 <floor+0x9a>
 80087ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80087ee:	d104      	bne.n	80087fa <floor+0x92>
 80087f0:	4602      	mov	r2, r0
 80087f2:	f7f7 fccb 	bl	800018c <__adddf3>
 80087f6:	4607      	mov	r7, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	4638      	mov	r0, r7
 80087fc:	4619      	mov	r1, r3
 80087fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008802:	f04f 38ff 	mov.w	r8, #4294967295
 8008806:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800880a:	fa28 f802 	lsr.w	r8, r8, r2
 800880e:	ea10 0f08 	tst.w	r0, r8
 8008812:	d0f2      	beq.n	80087fa <floor+0x92>
 8008814:	a310      	add	r3, pc, #64	; (adr r3, 8008858 <floor+0xf0>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	f7f7 fcb7 	bl	800018c <__adddf3>
 800881e:	2200      	movs	r2, #0
 8008820:	2300      	movs	r3, #0
 8008822:	f7f8 f8f9 	bl	8000a18 <__aeabi_dcmpgt>
 8008826:	2800      	cmp	r0, #0
 8008828:	d0be      	beq.n	80087a8 <floor+0x40>
 800882a:	2c00      	cmp	r4, #0
 800882c:	da0a      	bge.n	8008844 <floor+0xdc>
 800882e:	2e14      	cmp	r6, #20
 8008830:	d101      	bne.n	8008836 <floor+0xce>
 8008832:	3401      	adds	r4, #1
 8008834:	e006      	b.n	8008844 <floor+0xdc>
 8008836:	2301      	movs	r3, #1
 8008838:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800883c:	40b3      	lsls	r3, r6
 800883e:	441d      	add	r5, r3
 8008840:	42af      	cmp	r7, r5
 8008842:	d8f6      	bhi.n	8008832 <floor+0xca>
 8008844:	ea25 0508 	bic.w	r5, r5, r8
 8008848:	e7ae      	b.n	80087a8 <floor+0x40>
 800884a:	2500      	movs	r5, #0
 800884c:	462c      	mov	r4, r5
 800884e:	e7ab      	b.n	80087a8 <floor+0x40>
 8008850:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008854:	e7a8      	b.n	80087a8 <floor+0x40>
 8008856:	bf00      	nop
 8008858:	8800759c 	.word	0x8800759c
 800885c:	7e37e43c 	.word	0x7e37e43c
 8008860:	bff00000 	.word	0xbff00000
 8008864:	000fffff 	.word	0x000fffff

08008868 <__ieee754_pow>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	b093      	sub	sp, #76	; 0x4c
 800886e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008872:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8008876:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800887a:	4689      	mov	r9, r1
 800887c:	ea56 0102 	orrs.w	r1, r6, r2
 8008880:	4680      	mov	r8, r0
 8008882:	d111      	bne.n	80088a8 <__ieee754_pow+0x40>
 8008884:	1803      	adds	r3, r0, r0
 8008886:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800888a:	4152      	adcs	r2, r2
 800888c:	4299      	cmp	r1, r3
 800888e:	4b82      	ldr	r3, [pc, #520]	; (8008a98 <__ieee754_pow+0x230>)
 8008890:	4193      	sbcs	r3, r2
 8008892:	f080 84ba 	bcs.w	800920a <__ieee754_pow+0x9a2>
 8008896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800889a:	4640      	mov	r0, r8
 800889c:	4649      	mov	r1, r9
 800889e:	f7f7 fc75 	bl	800018c <__adddf3>
 80088a2:	4683      	mov	fp, r0
 80088a4:	468c      	mov	ip, r1
 80088a6:	e06f      	b.n	8008988 <__ieee754_pow+0x120>
 80088a8:	4b7c      	ldr	r3, [pc, #496]	; (8008a9c <__ieee754_pow+0x234>)
 80088aa:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80088ae:	429c      	cmp	r4, r3
 80088b0:	464d      	mov	r5, r9
 80088b2:	4682      	mov	sl, r0
 80088b4:	dc06      	bgt.n	80088c4 <__ieee754_pow+0x5c>
 80088b6:	d101      	bne.n	80088bc <__ieee754_pow+0x54>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d1ec      	bne.n	8008896 <__ieee754_pow+0x2e>
 80088bc:	429e      	cmp	r6, r3
 80088be:	dc01      	bgt.n	80088c4 <__ieee754_pow+0x5c>
 80088c0:	d10f      	bne.n	80088e2 <__ieee754_pow+0x7a>
 80088c2:	b172      	cbz	r2, 80088e2 <__ieee754_pow+0x7a>
 80088c4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80088c8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80088cc:	ea55 050a 	orrs.w	r5, r5, sl
 80088d0:	d1e1      	bne.n	8008896 <__ieee754_pow+0x2e>
 80088d2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80088d6:	18db      	adds	r3, r3, r3
 80088d8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80088dc:	4152      	adcs	r2, r2
 80088de:	429d      	cmp	r5, r3
 80088e0:	e7d5      	b.n	800888e <__ieee754_pow+0x26>
 80088e2:	2d00      	cmp	r5, #0
 80088e4:	da39      	bge.n	800895a <__ieee754_pow+0xf2>
 80088e6:	4b6e      	ldr	r3, [pc, #440]	; (8008aa0 <__ieee754_pow+0x238>)
 80088e8:	429e      	cmp	r6, r3
 80088ea:	dc52      	bgt.n	8008992 <__ieee754_pow+0x12a>
 80088ec:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80088f0:	429e      	cmp	r6, r3
 80088f2:	f340 849d 	ble.w	8009230 <__ieee754_pow+0x9c8>
 80088f6:	1533      	asrs	r3, r6, #20
 80088f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088fc:	2b14      	cmp	r3, #20
 80088fe:	dd0f      	ble.n	8008920 <__ieee754_pow+0xb8>
 8008900:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008904:	fa22 f103 	lsr.w	r1, r2, r3
 8008908:	fa01 f303 	lsl.w	r3, r1, r3
 800890c:	4293      	cmp	r3, r2
 800890e:	f040 848f 	bne.w	8009230 <__ieee754_pow+0x9c8>
 8008912:	f001 0101 	and.w	r1, r1, #1
 8008916:	f1c1 0302 	rsb	r3, r1, #2
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	b182      	cbz	r2, 8008940 <__ieee754_pow+0xd8>
 800891e:	e05d      	b.n	80089dc <__ieee754_pow+0x174>
 8008920:	2a00      	cmp	r2, #0
 8008922:	d159      	bne.n	80089d8 <__ieee754_pow+0x170>
 8008924:	f1c3 0314 	rsb	r3, r3, #20
 8008928:	fa46 f103 	asr.w	r1, r6, r3
 800892c:	fa01 f303 	lsl.w	r3, r1, r3
 8008930:	42b3      	cmp	r3, r6
 8008932:	f040 847a 	bne.w	800922a <__ieee754_pow+0x9c2>
 8008936:	f001 0101 	and.w	r1, r1, #1
 800893a:	f1c1 0302 	rsb	r3, r1, #2
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	4b58      	ldr	r3, [pc, #352]	; (8008aa4 <__ieee754_pow+0x23c>)
 8008942:	429e      	cmp	r6, r3
 8008944:	d132      	bne.n	80089ac <__ieee754_pow+0x144>
 8008946:	2f00      	cmp	r7, #0
 8008948:	f280 846b 	bge.w	8009222 <__ieee754_pow+0x9ba>
 800894c:	4642      	mov	r2, r8
 800894e:	464b      	mov	r3, r9
 8008950:	2000      	movs	r0, #0
 8008952:	4954      	ldr	r1, [pc, #336]	; (8008aa4 <__ieee754_pow+0x23c>)
 8008954:	f7f7 fefa 	bl	800074c <__aeabi_ddiv>
 8008958:	e7a3      	b.n	80088a2 <__ieee754_pow+0x3a>
 800895a:	2300      	movs	r3, #0
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	2a00      	cmp	r2, #0
 8008960:	d13c      	bne.n	80089dc <__ieee754_pow+0x174>
 8008962:	4b4e      	ldr	r3, [pc, #312]	; (8008a9c <__ieee754_pow+0x234>)
 8008964:	429e      	cmp	r6, r3
 8008966:	d1eb      	bne.n	8008940 <__ieee754_pow+0xd8>
 8008968:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800896c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008970:	ea53 030a 	orrs.w	r3, r3, sl
 8008974:	f000 8449 	beq.w	800920a <__ieee754_pow+0x9a2>
 8008978:	4b4b      	ldr	r3, [pc, #300]	; (8008aa8 <__ieee754_pow+0x240>)
 800897a:	429c      	cmp	r4, r3
 800897c:	dd0b      	ble.n	8008996 <__ieee754_pow+0x12e>
 800897e:	2f00      	cmp	r7, #0
 8008980:	f2c0 8449 	blt.w	8009216 <__ieee754_pow+0x9ae>
 8008984:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008988:	4658      	mov	r0, fp
 800898a:	4661      	mov	r1, ip
 800898c:	b013      	add	sp, #76	; 0x4c
 800898e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008992:	2302      	movs	r3, #2
 8008994:	e7e2      	b.n	800895c <__ieee754_pow+0xf4>
 8008996:	2f00      	cmp	r7, #0
 8008998:	f04f 0b00 	mov.w	fp, #0
 800899c:	f04f 0c00 	mov.w	ip, #0
 80089a0:	daf2      	bge.n	8008988 <__ieee754_pow+0x120>
 80089a2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80089a6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80089aa:	e7ed      	b.n	8008988 <__ieee754_pow+0x120>
 80089ac:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80089b0:	d106      	bne.n	80089c0 <__ieee754_pow+0x158>
 80089b2:	4642      	mov	r2, r8
 80089b4:	464b      	mov	r3, r9
 80089b6:	4640      	mov	r0, r8
 80089b8:	4649      	mov	r1, r9
 80089ba:	f7f7 fd9d 	bl	80004f8 <__aeabi_dmul>
 80089be:	e770      	b.n	80088a2 <__ieee754_pow+0x3a>
 80089c0:	4b3a      	ldr	r3, [pc, #232]	; (8008aac <__ieee754_pow+0x244>)
 80089c2:	429f      	cmp	r7, r3
 80089c4:	d10a      	bne.n	80089dc <__ieee754_pow+0x174>
 80089c6:	2d00      	cmp	r5, #0
 80089c8:	db08      	blt.n	80089dc <__ieee754_pow+0x174>
 80089ca:	4640      	mov	r0, r8
 80089cc:	4649      	mov	r1, r9
 80089ce:	b013      	add	sp, #76	; 0x4c
 80089d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	f7ff bdf0 	b.w	80085b8 <__ieee754_sqrt>
 80089d8:	2300      	movs	r3, #0
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	4640      	mov	r0, r8
 80089de:	4649      	mov	r1, r9
 80089e0:	f000 fc58 	bl	8009294 <fabs>
 80089e4:	4683      	mov	fp, r0
 80089e6:	468c      	mov	ip, r1
 80089e8:	f1ba 0f00 	cmp.w	sl, #0
 80089ec:	d128      	bne.n	8008a40 <__ieee754_pow+0x1d8>
 80089ee:	b124      	cbz	r4, 80089fa <__ieee754_pow+0x192>
 80089f0:	4b2c      	ldr	r3, [pc, #176]	; (8008aa4 <__ieee754_pow+0x23c>)
 80089f2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d122      	bne.n	8008a40 <__ieee754_pow+0x1d8>
 80089fa:	2f00      	cmp	r7, #0
 80089fc:	da07      	bge.n	8008a0e <__ieee754_pow+0x1a6>
 80089fe:	465a      	mov	r2, fp
 8008a00:	4663      	mov	r3, ip
 8008a02:	2000      	movs	r0, #0
 8008a04:	4927      	ldr	r1, [pc, #156]	; (8008aa4 <__ieee754_pow+0x23c>)
 8008a06:	f7f7 fea1 	bl	800074c <__aeabi_ddiv>
 8008a0a:	4683      	mov	fp, r0
 8008a0c:	468c      	mov	ip, r1
 8008a0e:	2d00      	cmp	r5, #0
 8008a10:	daba      	bge.n	8008988 <__ieee754_pow+0x120>
 8008a12:	9b00      	ldr	r3, [sp, #0]
 8008a14:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008a18:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008a1c:	431c      	orrs	r4, r3
 8008a1e:	d108      	bne.n	8008a32 <__ieee754_pow+0x1ca>
 8008a20:	465a      	mov	r2, fp
 8008a22:	4663      	mov	r3, ip
 8008a24:	4658      	mov	r0, fp
 8008a26:	4661      	mov	r1, ip
 8008a28:	f7f7 fbae 	bl	8000188 <__aeabi_dsub>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	e790      	b.n	8008954 <__ieee754_pow+0xec>
 8008a32:	9b00      	ldr	r3, [sp, #0]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d1a7      	bne.n	8008988 <__ieee754_pow+0x120>
 8008a38:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008a3c:	469c      	mov	ip, r3
 8008a3e:	e7a3      	b.n	8008988 <__ieee754_pow+0x120>
 8008a40:	0feb      	lsrs	r3, r5, #31
 8008a42:	3b01      	subs	r3, #1
 8008a44:	930c      	str	r3, [sp, #48]	; 0x30
 8008a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a48:	9b00      	ldr	r3, [sp, #0]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	d104      	bne.n	8008a58 <__ieee754_pow+0x1f0>
 8008a4e:	4642      	mov	r2, r8
 8008a50:	464b      	mov	r3, r9
 8008a52:	4640      	mov	r0, r8
 8008a54:	4649      	mov	r1, r9
 8008a56:	e7e7      	b.n	8008a28 <__ieee754_pow+0x1c0>
 8008a58:	4b15      	ldr	r3, [pc, #84]	; (8008ab0 <__ieee754_pow+0x248>)
 8008a5a:	429e      	cmp	r6, r3
 8008a5c:	f340 80f6 	ble.w	8008c4c <__ieee754_pow+0x3e4>
 8008a60:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008a64:	429e      	cmp	r6, r3
 8008a66:	4b10      	ldr	r3, [pc, #64]	; (8008aa8 <__ieee754_pow+0x240>)
 8008a68:	dd09      	ble.n	8008a7e <__ieee754_pow+0x216>
 8008a6a:	429c      	cmp	r4, r3
 8008a6c:	dc0c      	bgt.n	8008a88 <__ieee754_pow+0x220>
 8008a6e:	2f00      	cmp	r7, #0
 8008a70:	da0c      	bge.n	8008a8c <__ieee754_pow+0x224>
 8008a72:	2000      	movs	r0, #0
 8008a74:	b013      	add	sp, #76	; 0x4c
 8008a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7a:	f000 bcb2 	b.w	80093e2 <__math_oflow>
 8008a7e:	429c      	cmp	r4, r3
 8008a80:	dbf5      	blt.n	8008a6e <__ieee754_pow+0x206>
 8008a82:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <__ieee754_pow+0x23c>)
 8008a84:	429c      	cmp	r4, r3
 8008a86:	dd15      	ble.n	8008ab4 <__ieee754_pow+0x24c>
 8008a88:	2f00      	cmp	r7, #0
 8008a8a:	dcf2      	bgt.n	8008a72 <__ieee754_pow+0x20a>
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	b013      	add	sp, #76	; 0x4c
 8008a90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	f000 bca0 	b.w	80093d8 <__math_uflow>
 8008a98:	fff00000 	.word	0xfff00000
 8008a9c:	7ff00000 	.word	0x7ff00000
 8008aa0:	433fffff 	.word	0x433fffff
 8008aa4:	3ff00000 	.word	0x3ff00000
 8008aa8:	3fefffff 	.word	0x3fefffff
 8008aac:	3fe00000 	.word	0x3fe00000
 8008ab0:	41e00000 	.word	0x41e00000
 8008ab4:	4661      	mov	r1, ip
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4658      	mov	r0, fp
 8008aba:	4b5f      	ldr	r3, [pc, #380]	; (8008c38 <__ieee754_pow+0x3d0>)
 8008abc:	f7f7 fb64 	bl	8000188 <__aeabi_dsub>
 8008ac0:	a355      	add	r3, pc, #340	; (adr r3, 8008c18 <__ieee754_pow+0x3b0>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	460d      	mov	r5, r1
 8008aca:	f7f7 fd15 	bl	80004f8 <__aeabi_dmul>
 8008ace:	a354      	add	r3, pc, #336	; (adr r3, 8008c20 <__ieee754_pow+0x3b8>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	460f      	mov	r7, r1
 8008ad8:	4620      	mov	r0, r4
 8008ada:	4629      	mov	r1, r5
 8008adc:	f7f7 fd0c 	bl	80004f8 <__aeabi_dmul>
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4682      	mov	sl, r0
 8008ae4:	468b      	mov	fp, r1
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	4629      	mov	r1, r5
 8008aea:	4b54      	ldr	r3, [pc, #336]	; (8008c3c <__ieee754_pow+0x3d4>)
 8008aec:	f7f7 fd04 	bl	80004f8 <__aeabi_dmul>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	a14c      	add	r1, pc, #304	; (adr r1, 8008c28 <__ieee754_pow+0x3c0>)
 8008af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008afa:	f7f7 fb45 	bl	8000188 <__aeabi_dsub>
 8008afe:	4622      	mov	r2, r4
 8008b00:	462b      	mov	r3, r5
 8008b02:	f7f7 fcf9 	bl	80004f8 <__aeabi_dmul>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	494c      	ldr	r1, [pc, #304]	; (8008c40 <__ieee754_pow+0x3d8>)
 8008b0e:	f7f7 fb3b 	bl	8000188 <__aeabi_dsub>
 8008b12:	4622      	mov	r2, r4
 8008b14:	462b      	mov	r3, r5
 8008b16:	4680      	mov	r8, r0
 8008b18:	4689      	mov	r9, r1
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	f7f7 fceb 	bl	80004f8 <__aeabi_dmul>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4640      	mov	r0, r8
 8008b28:	4649      	mov	r1, r9
 8008b2a:	f7f7 fce5 	bl	80004f8 <__aeabi_dmul>
 8008b2e:	a340      	add	r3, pc, #256	; (adr r3, 8008c30 <__ieee754_pow+0x3c8>)
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f7f7 fce0 	bl	80004f8 <__aeabi_dmul>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4650      	mov	r0, sl
 8008b3e:	4659      	mov	r1, fp
 8008b40:	f7f7 fb22 	bl	8000188 <__aeabi_dsub>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4604      	mov	r4, r0
 8008b4a:	460d      	mov	r5, r1
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	4639      	mov	r1, r7
 8008b50:	f7f7 fb1c 	bl	800018c <__adddf3>
 8008b54:	2000      	movs	r0, #0
 8008b56:	4632      	mov	r2, r6
 8008b58:	463b      	mov	r3, r7
 8008b5a:	4682      	mov	sl, r0
 8008b5c:	468b      	mov	fp, r1
 8008b5e:	f7f7 fb13 	bl	8000188 <__aeabi_dsub>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	4620      	mov	r0, r4
 8008b68:	4629      	mov	r1, r5
 8008b6a:	f7f7 fb0d 	bl	8000188 <__aeabi_dsub>
 8008b6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b72:	9b00      	ldr	r3, [sp, #0]
 8008b74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b76:	3b01      	subs	r3, #1
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	f04f 0600 	mov.w	r6, #0
 8008b7e:	f04f 0200 	mov.w	r2, #0
 8008b82:	bf0c      	ite	eq
 8008b84:	4b2f      	ldreq	r3, [pc, #188]	; (8008c44 <__ieee754_pow+0x3dc>)
 8008b86:	4b2c      	ldrne	r3, [pc, #176]	; (8008c38 <__ieee754_pow+0x3d0>)
 8008b88:	4604      	mov	r4, r0
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b90:	e9cd 2300 	strd	r2, r3, [sp]
 8008b94:	4632      	mov	r2, r6
 8008b96:	463b      	mov	r3, r7
 8008b98:	f7f7 faf6 	bl	8000188 <__aeabi_dsub>
 8008b9c:	4652      	mov	r2, sl
 8008b9e:	465b      	mov	r3, fp
 8008ba0:	f7f7 fcaa 	bl	80004f8 <__aeabi_dmul>
 8008ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ba8:	4680      	mov	r8, r0
 8008baa:	4689      	mov	r9, r1
 8008bac:	4620      	mov	r0, r4
 8008bae:	4629      	mov	r1, r5
 8008bb0:	f7f7 fca2 	bl	80004f8 <__aeabi_dmul>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4640      	mov	r0, r8
 8008bba:	4649      	mov	r1, r9
 8008bbc:	f7f7 fae6 	bl	800018c <__adddf3>
 8008bc0:	4632      	mov	r2, r6
 8008bc2:	463b      	mov	r3, r7
 8008bc4:	4680      	mov	r8, r0
 8008bc6:	4689      	mov	r9, r1
 8008bc8:	4650      	mov	r0, sl
 8008bca:	4659      	mov	r1, fp
 8008bcc:	f7f7 fc94 	bl	80004f8 <__aeabi_dmul>
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	4649      	mov	r1, r9
 8008bda:	4640      	mov	r0, r8
 8008bdc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008be0:	f7f7 fad4 	bl	800018c <__adddf3>
 8008be4:	4b18      	ldr	r3, [pc, #96]	; (8008c48 <__ieee754_pow+0x3e0>)
 8008be6:	4682      	mov	sl, r0
 8008be8:	4299      	cmp	r1, r3
 8008bea:	460f      	mov	r7, r1
 8008bec:	460e      	mov	r6, r1
 8008bee:	f340 82e7 	ble.w	80091c0 <__ieee754_pow+0x958>
 8008bf2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008bf6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008bfa:	4303      	orrs	r3, r0
 8008bfc:	f000 81e2 	beq.w	8008fc4 <__ieee754_pow+0x75c>
 8008c00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c04:	2200      	movs	r2, #0
 8008c06:	2300      	movs	r3, #0
 8008c08:	f7f7 fee8 	bl	80009dc <__aeabi_dcmplt>
 8008c0c:	3800      	subs	r0, #0
 8008c0e:	bf18      	it	ne
 8008c10:	2001      	movne	r0, #1
 8008c12:	e72f      	b.n	8008a74 <__ieee754_pow+0x20c>
 8008c14:	f3af 8000 	nop.w
 8008c18:	60000000 	.word	0x60000000
 8008c1c:	3ff71547 	.word	0x3ff71547
 8008c20:	f85ddf44 	.word	0xf85ddf44
 8008c24:	3e54ae0b 	.word	0x3e54ae0b
 8008c28:	55555555 	.word	0x55555555
 8008c2c:	3fd55555 	.word	0x3fd55555
 8008c30:	652b82fe 	.word	0x652b82fe
 8008c34:	3ff71547 	.word	0x3ff71547
 8008c38:	3ff00000 	.word	0x3ff00000
 8008c3c:	3fd00000 	.word	0x3fd00000
 8008c40:	3fe00000 	.word	0x3fe00000
 8008c44:	bff00000 	.word	0xbff00000
 8008c48:	408fffff 	.word	0x408fffff
 8008c4c:	4bd4      	ldr	r3, [pc, #848]	; (8008fa0 <__ieee754_pow+0x738>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	402b      	ands	r3, r5
 8008c52:	b943      	cbnz	r3, 8008c66 <__ieee754_pow+0x3fe>
 8008c54:	4658      	mov	r0, fp
 8008c56:	4661      	mov	r1, ip
 8008c58:	4bd2      	ldr	r3, [pc, #840]	; (8008fa4 <__ieee754_pow+0x73c>)
 8008c5a:	f7f7 fc4d 	bl	80004f8 <__aeabi_dmul>
 8008c5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008c62:	4683      	mov	fp, r0
 8008c64:	460c      	mov	r4, r1
 8008c66:	1523      	asrs	r3, r4, #20
 8008c68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c6c:	4413      	add	r3, r2
 8008c6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c70:	4bcd      	ldr	r3, [pc, #820]	; (8008fa8 <__ieee754_pow+0x740>)
 8008c72:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008c76:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008c7a:	429c      	cmp	r4, r3
 8008c7c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008c80:	dd08      	ble.n	8008c94 <__ieee754_pow+0x42c>
 8008c82:	4bca      	ldr	r3, [pc, #808]	; (8008fac <__ieee754_pow+0x744>)
 8008c84:	429c      	cmp	r4, r3
 8008c86:	f340 8164 	ble.w	8008f52 <__ieee754_pow+0x6ea>
 8008c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c8c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008c90:	3301      	adds	r3, #1
 8008c92:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c94:	2600      	movs	r6, #0
 8008c96:	00f3      	lsls	r3, r6, #3
 8008c98:	930d      	str	r3, [sp, #52]	; 0x34
 8008c9a:	4bc5      	ldr	r3, [pc, #788]	; (8008fb0 <__ieee754_pow+0x748>)
 8008c9c:	4658      	mov	r0, fp
 8008c9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ca2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	461a      	mov	r2, r3
 8008caa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008cae:	4623      	mov	r3, r4
 8008cb0:	f7f7 fa6a 	bl	8000188 <__aeabi_dsub>
 8008cb4:	46da      	mov	sl, fp
 8008cb6:	462b      	mov	r3, r5
 8008cb8:	4652      	mov	r2, sl
 8008cba:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008cbe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cc2:	f7f7 fa63 	bl	800018c <__adddf3>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	2000      	movs	r0, #0
 8008ccc:	49b9      	ldr	r1, [pc, #740]	; (8008fb4 <__ieee754_pow+0x74c>)
 8008cce:	f7f7 fd3d 	bl	800074c <__aeabi_ddiv>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008cda:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008cde:	f7f7 fc0b 	bl	80004f8 <__aeabi_dmul>
 8008ce2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ce6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008cea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	46ab      	mov	fp, r5
 8008cf4:	106d      	asrs	r5, r5, #1
 8008cf6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008cfa:	9304      	str	r3, [sp, #16]
 8008cfc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008d00:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008d04:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008d08:	4640      	mov	r0, r8
 8008d0a:	4649      	mov	r1, r9
 8008d0c:	4614      	mov	r4, r2
 8008d0e:	461d      	mov	r5, r3
 8008d10:	f7f7 fbf2 	bl	80004f8 <__aeabi_dmul>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008d1c:	f7f7 fa34 	bl	8000188 <__aeabi_dsub>
 8008d20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d24:	4606      	mov	r6, r0
 8008d26:	460f      	mov	r7, r1
 8008d28:	4620      	mov	r0, r4
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	f7f7 fa2c 	bl	8000188 <__aeabi_dsub>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4650      	mov	r0, sl
 8008d36:	4659      	mov	r1, fp
 8008d38:	f7f7 fa26 	bl	8000188 <__aeabi_dsub>
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	464b      	mov	r3, r9
 8008d40:	f7f7 fbda 	bl	80004f8 <__aeabi_dmul>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4630      	mov	r0, r6
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f7f7 fa1c 	bl	8000188 <__aeabi_dsub>
 8008d50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d54:	f7f7 fbd0 	bl	80004f8 <__aeabi_dmul>
 8008d58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d5c:	4682      	mov	sl, r0
 8008d5e:	468b      	mov	fp, r1
 8008d60:	4610      	mov	r0, r2
 8008d62:	4619      	mov	r1, r3
 8008d64:	f7f7 fbc8 	bl	80004f8 <__aeabi_dmul>
 8008d68:	a37b      	add	r3, pc, #492	; (adr r3, 8008f58 <__ieee754_pow+0x6f0>)
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	4604      	mov	r4, r0
 8008d70:	460d      	mov	r5, r1
 8008d72:	f7f7 fbc1 	bl	80004f8 <__aeabi_dmul>
 8008d76:	a37a      	add	r3, pc, #488	; (adr r3, 8008f60 <__ieee754_pow+0x6f8>)
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	f7f7 fa06 	bl	800018c <__adddf3>
 8008d80:	4622      	mov	r2, r4
 8008d82:	462b      	mov	r3, r5
 8008d84:	f7f7 fbb8 	bl	80004f8 <__aeabi_dmul>
 8008d88:	a377      	add	r3, pc, #476	; (adr r3, 8008f68 <__ieee754_pow+0x700>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	f7f7 f9fd 	bl	800018c <__adddf3>
 8008d92:	4622      	mov	r2, r4
 8008d94:	462b      	mov	r3, r5
 8008d96:	f7f7 fbaf 	bl	80004f8 <__aeabi_dmul>
 8008d9a:	a375      	add	r3, pc, #468	; (adr r3, 8008f70 <__ieee754_pow+0x708>)
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	f7f7 f9f4 	bl	800018c <__adddf3>
 8008da4:	4622      	mov	r2, r4
 8008da6:	462b      	mov	r3, r5
 8008da8:	f7f7 fba6 	bl	80004f8 <__aeabi_dmul>
 8008dac:	a372      	add	r3, pc, #456	; (adr r3, 8008f78 <__ieee754_pow+0x710>)
 8008dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db2:	f7f7 f9eb 	bl	800018c <__adddf3>
 8008db6:	4622      	mov	r2, r4
 8008db8:	462b      	mov	r3, r5
 8008dba:	f7f7 fb9d 	bl	80004f8 <__aeabi_dmul>
 8008dbe:	a370      	add	r3, pc, #448	; (adr r3, 8008f80 <__ieee754_pow+0x718>)
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	f7f7 f9e2 	bl	800018c <__adddf3>
 8008dc8:	4622      	mov	r2, r4
 8008dca:	4606      	mov	r6, r0
 8008dcc:	460f      	mov	r7, r1
 8008dce:	462b      	mov	r3, r5
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	f7f7 fb90 	bl	80004f8 <__aeabi_dmul>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4630      	mov	r0, r6
 8008dde:	4639      	mov	r1, r7
 8008de0:	f7f7 fb8a 	bl	80004f8 <__aeabi_dmul>
 8008de4:	4604      	mov	r4, r0
 8008de6:	460d      	mov	r5, r1
 8008de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dec:	4642      	mov	r2, r8
 8008dee:	464b      	mov	r3, r9
 8008df0:	f7f7 f9cc 	bl	800018c <__adddf3>
 8008df4:	4652      	mov	r2, sl
 8008df6:	465b      	mov	r3, fp
 8008df8:	f7f7 fb7e 	bl	80004f8 <__aeabi_dmul>
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	462b      	mov	r3, r5
 8008e00:	f7f7 f9c4 	bl	800018c <__adddf3>
 8008e04:	4642      	mov	r2, r8
 8008e06:	4606      	mov	r6, r0
 8008e08:	460f      	mov	r7, r1
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	4649      	mov	r1, r9
 8008e10:	f7f7 fb72 	bl	80004f8 <__aeabi_dmul>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4b66      	ldr	r3, [pc, #408]	; (8008fb8 <__ieee754_pow+0x750>)
 8008e20:	f7f7 f9b4 	bl	800018c <__adddf3>
 8008e24:	4632      	mov	r2, r6
 8008e26:	463b      	mov	r3, r7
 8008e28:	f7f7 f9b0 	bl	800018c <__adddf3>
 8008e2c:	2400      	movs	r4, #0
 8008e2e:	460d      	mov	r5, r1
 8008e30:	4622      	mov	r2, r4
 8008e32:	460b      	mov	r3, r1
 8008e34:	4640      	mov	r0, r8
 8008e36:	4649      	mov	r1, r9
 8008e38:	f7f7 fb5e 	bl	80004f8 <__aeabi_dmul>
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	4680      	mov	r8, r0
 8008e40:	4689      	mov	r9, r1
 8008e42:	4620      	mov	r0, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	4b5c      	ldr	r3, [pc, #368]	; (8008fb8 <__ieee754_pow+0x750>)
 8008e48:	f7f7 f99e 	bl	8000188 <__aeabi_dsub>
 8008e4c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008e50:	f7f7 f99a 	bl	8000188 <__aeabi_dsub>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4630      	mov	r0, r6
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	f7f7 f994 	bl	8000188 <__aeabi_dsub>
 8008e60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e64:	f7f7 fb48 	bl	80004f8 <__aeabi_dmul>
 8008e68:	4622      	mov	r2, r4
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	460f      	mov	r7, r1
 8008e6e:	462b      	mov	r3, r5
 8008e70:	4650      	mov	r0, sl
 8008e72:	4659      	mov	r1, fp
 8008e74:	f7f7 fb40 	bl	80004f8 <__aeabi_dmul>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	4639      	mov	r1, r7
 8008e80:	f7f7 f984 	bl	800018c <__adddf3>
 8008e84:	2400      	movs	r4, #0
 8008e86:	4606      	mov	r6, r0
 8008e88:	460f      	mov	r7, r1
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	4640      	mov	r0, r8
 8008e90:	4649      	mov	r1, r9
 8008e92:	f7f7 f97b 	bl	800018c <__adddf3>
 8008e96:	a33c      	add	r3, pc, #240	; (adr r3, 8008f88 <__ieee754_pow+0x720>)
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	460d      	mov	r5, r1
 8008ea0:	f7f7 fb2a 	bl	80004f8 <__aeabi_dmul>
 8008ea4:	4642      	mov	r2, r8
 8008ea6:	464b      	mov	r3, r9
 8008ea8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008eac:	4620      	mov	r0, r4
 8008eae:	4629      	mov	r1, r5
 8008eb0:	f7f7 f96a 	bl	8000188 <__aeabi_dsub>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4630      	mov	r0, r6
 8008eba:	4639      	mov	r1, r7
 8008ebc:	f7f7 f964 	bl	8000188 <__aeabi_dsub>
 8008ec0:	a333      	add	r3, pc, #204	; (adr r3, 8008f90 <__ieee754_pow+0x728>)
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	f7f7 fb17 	bl	80004f8 <__aeabi_dmul>
 8008eca:	a333      	add	r3, pc, #204	; (adr r3, 8008f98 <__ieee754_pow+0x730>)
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	460f      	mov	r7, r1
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	f7f7 fb0e 	bl	80004f8 <__aeabi_dmul>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	4639      	mov	r1, r7
 8008ee4:	f7f7 f952 	bl	800018c <__adddf3>
 8008ee8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008eea:	4b34      	ldr	r3, [pc, #208]	; (8008fbc <__ieee754_pow+0x754>)
 8008eec:	4413      	add	r3, r2
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	f7f7 f94b 	bl	800018c <__adddf3>
 8008ef6:	4680      	mov	r8, r0
 8008ef8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008efa:	4689      	mov	r9, r1
 8008efc:	f7f7 fa92 	bl	8000424 <__aeabi_i2d>
 8008f00:	4604      	mov	r4, r0
 8008f02:	460d      	mov	r5, r1
 8008f04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f0a:	4b2d      	ldr	r3, [pc, #180]	; (8008fc0 <__ieee754_pow+0x758>)
 8008f0c:	4413      	add	r3, r2
 8008f0e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008f12:	4642      	mov	r2, r8
 8008f14:	464b      	mov	r3, r9
 8008f16:	f7f7 f939 	bl	800018c <__adddf3>
 8008f1a:	4632      	mov	r2, r6
 8008f1c:	463b      	mov	r3, r7
 8008f1e:	f7f7 f935 	bl	800018c <__adddf3>
 8008f22:	4622      	mov	r2, r4
 8008f24:	462b      	mov	r3, r5
 8008f26:	f7f7 f931 	bl	800018c <__adddf3>
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	462b      	mov	r3, r5
 8008f30:	4682      	mov	sl, r0
 8008f32:	468b      	mov	fp, r1
 8008f34:	f7f7 f928 	bl	8000188 <__aeabi_dsub>
 8008f38:	4632      	mov	r2, r6
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	f7f7 f924 	bl	8000188 <__aeabi_dsub>
 8008f40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f44:	f7f7 f920 	bl	8000188 <__aeabi_dsub>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4640      	mov	r0, r8
 8008f4e:	4649      	mov	r1, r9
 8008f50:	e60b      	b.n	8008b6a <__ieee754_pow+0x302>
 8008f52:	2601      	movs	r6, #1
 8008f54:	e69f      	b.n	8008c96 <__ieee754_pow+0x42e>
 8008f56:	bf00      	nop
 8008f58:	4a454eef 	.word	0x4a454eef
 8008f5c:	3fca7e28 	.word	0x3fca7e28
 8008f60:	93c9db65 	.word	0x93c9db65
 8008f64:	3fcd864a 	.word	0x3fcd864a
 8008f68:	a91d4101 	.word	0xa91d4101
 8008f6c:	3fd17460 	.word	0x3fd17460
 8008f70:	518f264d 	.word	0x518f264d
 8008f74:	3fd55555 	.word	0x3fd55555
 8008f78:	db6fabff 	.word	0xdb6fabff
 8008f7c:	3fdb6db6 	.word	0x3fdb6db6
 8008f80:	33333303 	.word	0x33333303
 8008f84:	3fe33333 	.word	0x3fe33333
 8008f88:	e0000000 	.word	0xe0000000
 8008f8c:	3feec709 	.word	0x3feec709
 8008f90:	dc3a03fd 	.word	0xdc3a03fd
 8008f94:	3feec709 	.word	0x3feec709
 8008f98:	145b01f5 	.word	0x145b01f5
 8008f9c:	be3e2fe0 	.word	0xbe3e2fe0
 8008fa0:	7ff00000 	.word	0x7ff00000
 8008fa4:	43400000 	.word	0x43400000
 8008fa8:	0003988e 	.word	0x0003988e
 8008fac:	000bb679 	.word	0x000bb679
 8008fb0:	0800a0e8 	.word	0x0800a0e8
 8008fb4:	3ff00000 	.word	0x3ff00000
 8008fb8:	40080000 	.word	0x40080000
 8008fbc:	0800a108 	.word	0x0800a108
 8008fc0:	0800a0f8 	.word	0x0800a0f8
 8008fc4:	a39c      	add	r3, pc, #624	; (adr r3, 8009238 <__ieee754_pow+0x9d0>)
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	4640      	mov	r0, r8
 8008fcc:	4649      	mov	r1, r9
 8008fce:	f7f7 f8dd 	bl	800018c <__adddf3>
 8008fd2:	4622      	mov	r2, r4
 8008fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fd8:	462b      	mov	r3, r5
 8008fda:	4650      	mov	r0, sl
 8008fdc:	4639      	mov	r1, r7
 8008fde:	f7f7 f8d3 	bl	8000188 <__aeabi_dsub>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fea:	f7f7 fd15 	bl	8000a18 <__aeabi_dcmpgt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f47f ae06 	bne.w	8008c00 <__ieee754_pow+0x398>
 8008ff4:	4aa2      	ldr	r2, [pc, #648]	; (8009280 <__ieee754_pow+0xa18>)
 8008ff6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	f340 8100 	ble.w	8009200 <__ieee754_pow+0x998>
 8009000:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009004:	151b      	asrs	r3, r3, #20
 8009006:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800900a:	fa4a fa03 	asr.w	sl, sl, r3
 800900e:	44b2      	add	sl, r6
 8009010:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009014:	489b      	ldr	r0, [pc, #620]	; (8009284 <__ieee754_pow+0xa1c>)
 8009016:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800901a:	4108      	asrs	r0, r1
 800901c:	ea00 030a 	and.w	r3, r0, sl
 8009020:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009024:	f1c1 0114 	rsb	r1, r1, #20
 8009028:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800902c:	fa4a fa01 	asr.w	sl, sl, r1
 8009030:	2e00      	cmp	r6, #0
 8009032:	f04f 0200 	mov.w	r2, #0
 8009036:	4620      	mov	r0, r4
 8009038:	4629      	mov	r1, r5
 800903a:	bfb8      	it	lt
 800903c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009040:	f7f7 f8a2 	bl	8000188 <__aeabi_dsub>
 8009044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800904c:	2400      	movs	r4, #0
 800904e:	4642      	mov	r2, r8
 8009050:	464b      	mov	r3, r9
 8009052:	f7f7 f89b 	bl	800018c <__adddf3>
 8009056:	a37a      	add	r3, pc, #488	; (adr r3, 8009240 <__ieee754_pow+0x9d8>)
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	4620      	mov	r0, r4
 800905e:	460d      	mov	r5, r1
 8009060:	f7f7 fa4a 	bl	80004f8 <__aeabi_dmul>
 8009064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009068:	4606      	mov	r6, r0
 800906a:	460f      	mov	r7, r1
 800906c:	4620      	mov	r0, r4
 800906e:	4629      	mov	r1, r5
 8009070:	f7f7 f88a 	bl	8000188 <__aeabi_dsub>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	4640      	mov	r0, r8
 800907a:	4649      	mov	r1, r9
 800907c:	f7f7 f884 	bl	8000188 <__aeabi_dsub>
 8009080:	a371      	add	r3, pc, #452	; (adr r3, 8009248 <__ieee754_pow+0x9e0>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	f7f7 fa37 	bl	80004f8 <__aeabi_dmul>
 800908a:	a371      	add	r3, pc, #452	; (adr r3, 8009250 <__ieee754_pow+0x9e8>)
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	4680      	mov	r8, r0
 8009092:	4689      	mov	r9, r1
 8009094:	4620      	mov	r0, r4
 8009096:	4629      	mov	r1, r5
 8009098:	f7f7 fa2e 	bl	80004f8 <__aeabi_dmul>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	4640      	mov	r0, r8
 80090a2:	4649      	mov	r1, r9
 80090a4:	f7f7 f872 	bl	800018c <__adddf3>
 80090a8:	4604      	mov	r4, r0
 80090aa:	460d      	mov	r5, r1
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4630      	mov	r0, r6
 80090b2:	4639      	mov	r1, r7
 80090b4:	f7f7 f86a 	bl	800018c <__adddf3>
 80090b8:	4632      	mov	r2, r6
 80090ba:	463b      	mov	r3, r7
 80090bc:	4680      	mov	r8, r0
 80090be:	4689      	mov	r9, r1
 80090c0:	f7f7 f862 	bl	8000188 <__aeabi_dsub>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4620      	mov	r0, r4
 80090ca:	4629      	mov	r1, r5
 80090cc:	f7f7 f85c 	bl	8000188 <__aeabi_dsub>
 80090d0:	4642      	mov	r2, r8
 80090d2:	4606      	mov	r6, r0
 80090d4:	460f      	mov	r7, r1
 80090d6:	464b      	mov	r3, r9
 80090d8:	4640      	mov	r0, r8
 80090da:	4649      	mov	r1, r9
 80090dc:	f7f7 fa0c 	bl	80004f8 <__aeabi_dmul>
 80090e0:	a35d      	add	r3, pc, #372	; (adr r3, 8009258 <__ieee754_pow+0x9f0>)
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	4604      	mov	r4, r0
 80090e8:	460d      	mov	r5, r1
 80090ea:	f7f7 fa05 	bl	80004f8 <__aeabi_dmul>
 80090ee:	a35c      	add	r3, pc, #368	; (adr r3, 8009260 <__ieee754_pow+0x9f8>)
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	f7f7 f848 	bl	8000188 <__aeabi_dsub>
 80090f8:	4622      	mov	r2, r4
 80090fa:	462b      	mov	r3, r5
 80090fc:	f7f7 f9fc 	bl	80004f8 <__aeabi_dmul>
 8009100:	a359      	add	r3, pc, #356	; (adr r3, 8009268 <__ieee754_pow+0xa00>)
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	f7f7 f841 	bl	800018c <__adddf3>
 800910a:	4622      	mov	r2, r4
 800910c:	462b      	mov	r3, r5
 800910e:	f7f7 f9f3 	bl	80004f8 <__aeabi_dmul>
 8009112:	a357      	add	r3, pc, #348	; (adr r3, 8009270 <__ieee754_pow+0xa08>)
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	f7f7 f836 	bl	8000188 <__aeabi_dsub>
 800911c:	4622      	mov	r2, r4
 800911e:	462b      	mov	r3, r5
 8009120:	f7f7 f9ea 	bl	80004f8 <__aeabi_dmul>
 8009124:	a354      	add	r3, pc, #336	; (adr r3, 8009278 <__ieee754_pow+0xa10>)
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	f7f7 f82f 	bl	800018c <__adddf3>
 800912e:	4622      	mov	r2, r4
 8009130:	462b      	mov	r3, r5
 8009132:	f7f7 f9e1 	bl	80004f8 <__aeabi_dmul>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4640      	mov	r0, r8
 800913c:	4649      	mov	r1, r9
 800913e:	f7f7 f823 	bl	8000188 <__aeabi_dsub>
 8009142:	4604      	mov	r4, r0
 8009144:	460d      	mov	r5, r1
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4640      	mov	r0, r8
 800914c:	4649      	mov	r1, r9
 800914e:	f7f7 f9d3 	bl	80004f8 <__aeabi_dmul>
 8009152:	2200      	movs	r2, #0
 8009154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800915c:	4620      	mov	r0, r4
 800915e:	4629      	mov	r1, r5
 8009160:	f7f7 f812 	bl	8000188 <__aeabi_dsub>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800916c:	f7f7 faee 	bl	800074c <__aeabi_ddiv>
 8009170:	4632      	mov	r2, r6
 8009172:	4604      	mov	r4, r0
 8009174:	460d      	mov	r5, r1
 8009176:	463b      	mov	r3, r7
 8009178:	4640      	mov	r0, r8
 800917a:	4649      	mov	r1, r9
 800917c:	f7f7 f9bc 	bl	80004f8 <__aeabi_dmul>
 8009180:	4632      	mov	r2, r6
 8009182:	463b      	mov	r3, r7
 8009184:	f7f7 f802 	bl	800018c <__adddf3>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4620      	mov	r0, r4
 800918e:	4629      	mov	r1, r5
 8009190:	f7f6 fffa 	bl	8000188 <__aeabi_dsub>
 8009194:	4642      	mov	r2, r8
 8009196:	464b      	mov	r3, r9
 8009198:	f7f6 fff6 	bl	8000188 <__aeabi_dsub>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	2000      	movs	r0, #0
 80091a2:	4939      	ldr	r1, [pc, #228]	; (8009288 <__ieee754_pow+0xa20>)
 80091a4:	f7f6 fff0 	bl	8000188 <__aeabi_dsub>
 80091a8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80091ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80091b0:	da29      	bge.n	8009206 <__ieee754_pow+0x99e>
 80091b2:	4652      	mov	r2, sl
 80091b4:	f000 f874 	bl	80092a0 <scalbn>
 80091b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091bc:	f7ff bbfd 	b.w	80089ba <__ieee754_pow+0x152>
 80091c0:	4b32      	ldr	r3, [pc, #200]	; (800928c <__ieee754_pow+0xa24>)
 80091c2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80091c6:	429f      	cmp	r7, r3
 80091c8:	f77f af14 	ble.w	8008ff4 <__ieee754_pow+0x78c>
 80091cc:	4b30      	ldr	r3, [pc, #192]	; (8009290 <__ieee754_pow+0xa28>)
 80091ce:	440b      	add	r3, r1
 80091d0:	4303      	orrs	r3, r0
 80091d2:	d009      	beq.n	80091e8 <__ieee754_pow+0x980>
 80091d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091d8:	2200      	movs	r2, #0
 80091da:	2300      	movs	r3, #0
 80091dc:	f7f7 fbfe 	bl	80009dc <__aeabi_dcmplt>
 80091e0:	3800      	subs	r0, #0
 80091e2:	bf18      	it	ne
 80091e4:	2001      	movne	r0, #1
 80091e6:	e452      	b.n	8008a8e <__ieee754_pow+0x226>
 80091e8:	4622      	mov	r2, r4
 80091ea:	462b      	mov	r3, r5
 80091ec:	f7f6 ffcc 	bl	8000188 <__aeabi_dsub>
 80091f0:	4642      	mov	r2, r8
 80091f2:	464b      	mov	r3, r9
 80091f4:	f7f7 fc06 	bl	8000a04 <__aeabi_dcmpge>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	f43f aefb 	beq.w	8008ff4 <__ieee754_pow+0x78c>
 80091fe:	e7e9      	b.n	80091d4 <__ieee754_pow+0x96c>
 8009200:	f04f 0a00 	mov.w	sl, #0
 8009204:	e720      	b.n	8009048 <__ieee754_pow+0x7e0>
 8009206:	4621      	mov	r1, r4
 8009208:	e7d6      	b.n	80091b8 <__ieee754_pow+0x950>
 800920a:	f04f 0b00 	mov.w	fp, #0
 800920e:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009288 <__ieee754_pow+0xa20>
 8009212:	f7ff bbb9 	b.w	8008988 <__ieee754_pow+0x120>
 8009216:	f04f 0b00 	mov.w	fp, #0
 800921a:	f04f 0c00 	mov.w	ip, #0
 800921e:	f7ff bbb3 	b.w	8008988 <__ieee754_pow+0x120>
 8009222:	4640      	mov	r0, r8
 8009224:	4649      	mov	r1, r9
 8009226:	f7ff bb3c 	b.w	80088a2 <__ieee754_pow+0x3a>
 800922a:	9200      	str	r2, [sp, #0]
 800922c:	f7ff bb88 	b.w	8008940 <__ieee754_pow+0xd8>
 8009230:	2300      	movs	r3, #0
 8009232:	f7ff bb72 	b.w	800891a <__ieee754_pow+0xb2>
 8009236:	bf00      	nop
 8009238:	652b82fe 	.word	0x652b82fe
 800923c:	3c971547 	.word	0x3c971547
 8009240:	00000000 	.word	0x00000000
 8009244:	3fe62e43 	.word	0x3fe62e43
 8009248:	fefa39ef 	.word	0xfefa39ef
 800924c:	3fe62e42 	.word	0x3fe62e42
 8009250:	0ca86c39 	.word	0x0ca86c39
 8009254:	be205c61 	.word	0xbe205c61
 8009258:	72bea4d0 	.word	0x72bea4d0
 800925c:	3e663769 	.word	0x3e663769
 8009260:	c5d26bf1 	.word	0xc5d26bf1
 8009264:	3ebbbd41 	.word	0x3ebbbd41
 8009268:	af25de2c 	.word	0xaf25de2c
 800926c:	3f11566a 	.word	0x3f11566a
 8009270:	16bebd93 	.word	0x16bebd93
 8009274:	3f66c16c 	.word	0x3f66c16c
 8009278:	5555553e 	.word	0x5555553e
 800927c:	3fc55555 	.word	0x3fc55555
 8009280:	3fe00000 	.word	0x3fe00000
 8009284:	fff00000 	.word	0xfff00000
 8009288:	3ff00000 	.word	0x3ff00000
 800928c:	4090cbff 	.word	0x4090cbff
 8009290:	3f6f3400 	.word	0x3f6f3400

08009294 <fabs>:
 8009294:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009298:	4619      	mov	r1, r3
 800929a:	4770      	bx	lr
 800929c:	0000      	movs	r0, r0
	...

080092a0 <scalbn>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	4616      	mov	r6, r2
 80092a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80092a8:	4604      	mov	r4, r0
 80092aa:	460d      	mov	r5, r1
 80092ac:	460b      	mov	r3, r1
 80092ae:	b992      	cbnz	r2, 80092d6 <scalbn+0x36>
 80092b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80092b4:	4303      	orrs	r3, r0
 80092b6:	d03c      	beq.n	8009332 <scalbn+0x92>
 80092b8:	4b31      	ldr	r3, [pc, #196]	; (8009380 <scalbn+0xe0>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	f7f7 f91c 	bl	80004f8 <__aeabi_dmul>
 80092c0:	4b30      	ldr	r3, [pc, #192]	; (8009384 <scalbn+0xe4>)
 80092c2:	4604      	mov	r4, r0
 80092c4:	429e      	cmp	r6, r3
 80092c6:	460d      	mov	r5, r1
 80092c8:	da0f      	bge.n	80092ea <scalbn+0x4a>
 80092ca:	a329      	add	r3, pc, #164	; (adr r3, 8009370 <scalbn+0xd0>)
 80092cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d0:	f7f7 f912 	bl	80004f8 <__aeabi_dmul>
 80092d4:	e006      	b.n	80092e4 <scalbn+0x44>
 80092d6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80092da:	42ba      	cmp	r2, r7
 80092dc:	d109      	bne.n	80092f2 <scalbn+0x52>
 80092de:	4602      	mov	r2, r0
 80092e0:	f7f6 ff54 	bl	800018c <__adddf3>
 80092e4:	4604      	mov	r4, r0
 80092e6:	460d      	mov	r5, r1
 80092e8:	e023      	b.n	8009332 <scalbn+0x92>
 80092ea:	460b      	mov	r3, r1
 80092ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80092f0:	3a36      	subs	r2, #54	; 0x36
 80092f2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80092f6:	428e      	cmp	r6, r1
 80092f8:	dd0e      	ble.n	8009318 <scalbn+0x78>
 80092fa:	a31f      	add	r3, pc, #124	; (adr r3, 8009378 <scalbn+0xd8>)
 80092fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009300:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009304:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009308:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800930c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009310:	481d      	ldr	r0, [pc, #116]	; (8009388 <scalbn+0xe8>)
 8009312:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009316:	e7db      	b.n	80092d0 <scalbn+0x30>
 8009318:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800931c:	4432      	add	r2, r6
 800931e:	428a      	cmp	r2, r1
 8009320:	dceb      	bgt.n	80092fa <scalbn+0x5a>
 8009322:	2a00      	cmp	r2, #0
 8009324:	dd08      	ble.n	8009338 <scalbn+0x98>
 8009326:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800932a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800932e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009332:	4620      	mov	r0, r4
 8009334:	4629      	mov	r1, r5
 8009336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009338:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800933c:	da0c      	bge.n	8009358 <scalbn+0xb8>
 800933e:	a30c      	add	r3, pc, #48	; (adr r3, 8009370 <scalbn+0xd0>)
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009348:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800934c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009350:	480e      	ldr	r0, [pc, #56]	; (800938c <scalbn+0xec>)
 8009352:	f041 011f 	orr.w	r1, r1, #31
 8009356:	e7bb      	b.n	80092d0 <scalbn+0x30>
 8009358:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800935c:	3236      	adds	r2, #54	; 0x36
 800935e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009362:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009366:	4620      	mov	r0, r4
 8009368:	4629      	mov	r1, r5
 800936a:	2200      	movs	r2, #0
 800936c:	4b08      	ldr	r3, [pc, #32]	; (8009390 <scalbn+0xf0>)
 800936e:	e7af      	b.n	80092d0 <scalbn+0x30>
 8009370:	c2f8f359 	.word	0xc2f8f359
 8009374:	01a56e1f 	.word	0x01a56e1f
 8009378:	8800759c 	.word	0x8800759c
 800937c:	7e37e43c 	.word	0x7e37e43c
 8009380:	43500000 	.word	0x43500000
 8009384:	ffff3cb0 	.word	0xffff3cb0
 8009388:	8800759c 	.word	0x8800759c
 800938c:	c2f8f359 	.word	0xc2f8f359
 8009390:	3c900000 	.word	0x3c900000

08009394 <with_errno>:
 8009394:	b570      	push	{r4, r5, r6, lr}
 8009396:	4604      	mov	r4, r0
 8009398:	460d      	mov	r5, r1
 800939a:	4616      	mov	r6, r2
 800939c:	f7fb fca8 	bl	8004cf0 <__errno>
 80093a0:	4629      	mov	r1, r5
 80093a2:	6006      	str	r6, [r0, #0]
 80093a4:	4620      	mov	r0, r4
 80093a6:	bd70      	pop	{r4, r5, r6, pc}

080093a8 <xflow>:
 80093a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093aa:	4615      	mov	r5, r2
 80093ac:	461c      	mov	r4, r3
 80093ae:	b180      	cbz	r0, 80093d2 <xflow+0x2a>
 80093b0:	4610      	mov	r0, r2
 80093b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80093b6:	e9cd 0100 	strd	r0, r1, [sp]
 80093ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093be:	4628      	mov	r0, r5
 80093c0:	4621      	mov	r1, r4
 80093c2:	f7f7 f899 	bl	80004f8 <__aeabi_dmul>
 80093c6:	2222      	movs	r2, #34	; 0x22
 80093c8:	b003      	add	sp, #12
 80093ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093ce:	f7ff bfe1 	b.w	8009394 <with_errno>
 80093d2:	4610      	mov	r0, r2
 80093d4:	4619      	mov	r1, r3
 80093d6:	e7ee      	b.n	80093b6 <xflow+0xe>

080093d8 <__math_uflow>:
 80093d8:	2200      	movs	r2, #0
 80093da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093de:	f7ff bfe3 	b.w	80093a8 <xflow>

080093e2 <__math_oflow>:
 80093e2:	2200      	movs	r2, #0
 80093e4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80093e8:	f7ff bfde 	b.w	80093a8 <xflow>

080093ec <_init>:
 80093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ee:	bf00      	nop
 80093f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093f2:	bc08      	pop	{r3}
 80093f4:	469e      	mov	lr, r3
 80093f6:	4770      	bx	lr

080093f8 <_fini>:
 80093f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fa:	bf00      	nop
 80093fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fe:	bc08      	pop	{r3}
 8009400:	469e      	mov	lr, r3
 8009402:	4770      	bx	lr
