
EngineAutomaticTransmissionController_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e04  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002250  08009f38  08009f38  00019f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c188  0800c188  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800c188  0800c188  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c188  0800c188  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c188  0800c188  0001c188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c18c  0800c18c  0001c18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800c190  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000200  0800c390  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  0800c390  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000450d  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000159d  00000000  00000000  00024779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004e0  00000000  00000000  00025d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000362  00000000  00000000  000261f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004668  00000000  00000000  0002655a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007519  00000000  00000000  0002abc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c64a  00000000  00000000  000320db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028d4  00000000  00000000  0003e728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00040ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000200 	.word	0x20000200
 800014c:	00000000 	.word	0x00000000
 8000150:	08009f1c 	.word	0x08009f1c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000204 	.word	0x20000204
 800016c:	08009f1c 	.word	0x08009f1c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_frsub>:
 8000b88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	e002      	b.n	8000b94 <__addsf3>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fsub>:
 8000b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b94 <__addsf3>:
 8000b94:	0042      	lsls	r2, r0, #1
 8000b96:	bf1f      	itttt	ne
 8000b98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b9c:	ea92 0f03 	teqne	r2, r3
 8000ba0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba8:	d06a      	beq.n	8000c80 <__addsf3+0xec>
 8000baa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bb2:	bfc1      	itttt	gt
 8000bb4:	18d2      	addgt	r2, r2, r3
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	4048      	eorgt	r0, r1
 8000bba:	4041      	eorgt	r1, r0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	2b19      	cmp	r3, #25
 8000bc2:	bf88      	it	hi
 8000bc4:	4770      	bxhi	lr
 8000bc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4249      	negne	r1, r1
 8000be6:	ea92 0f03 	teq	r2, r3
 8000bea:	d03f      	beq.n	8000c6c <__addsf3+0xd8>
 8000bec:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf4:	eb10 000c 	adds.w	r0, r0, ip
 8000bf8:	f1c3 0320 	rsb	r3, r3, #32
 8000bfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000c00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	d502      	bpl.n	8000c0c <__addsf3+0x78>
 8000c06:	4249      	negs	r1, r1
 8000c08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c10:	d313      	bcc.n	8000c3a <__addsf3+0xa6>
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c16:	d306      	bcc.n	8000c26 <__addsf3+0x92>
 8000c18:	0840      	lsrs	r0, r0, #1
 8000c1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1e:	f102 0201 	add.w	r2, r2, #1
 8000c22:	2afe      	cmp	r2, #254	; 0xfe
 8000c24:	d251      	bcs.n	8000cca <__addsf3+0x136>
 8000c26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	ea40 0003 	orr.w	r0, r0, r3
 8000c38:	4770      	bx	lr
 8000c3a:	0049      	lsls	r1, r1, #1
 8000c3c:	eb40 0000 	adc.w	r0, r0, r0
 8000c40:	3a01      	subs	r2, #1
 8000c42:	bf28      	it	cs
 8000c44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c48:	d2ed      	bcs.n	8000c26 <__addsf3+0x92>
 8000c4a:	fab0 fc80 	clz	ip, r0
 8000c4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c52:	ebb2 020c 	subs.w	r2, r2, ip
 8000c56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c5a:	bfaa      	itet	ge
 8000c5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c60:	4252      	neglt	r2, r2
 8000c62:	4318      	orrge	r0, r3
 8000c64:	bfbc      	itt	lt
 8000c66:	40d0      	lsrlt	r0, r2
 8000c68:	4318      	orrlt	r0, r3
 8000c6a:	4770      	bx	lr
 8000c6c:	f092 0f00 	teq	r2, #0
 8000c70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c74:	bf06      	itte	eq
 8000c76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c7a:	3201      	addeq	r2, #1
 8000c7c:	3b01      	subne	r3, #1
 8000c7e:	e7b5      	b.n	8000bec <__addsf3+0x58>
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d021      	beq.n	8000cd4 <__addsf3+0x140>
 8000c90:	ea92 0f03 	teq	r2, r3
 8000c94:	d004      	beq.n	8000ca0 <__addsf3+0x10c>
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	4608      	moveq	r0, r1
 8000c9e:	4770      	bx	lr
 8000ca0:	ea90 0f01 	teq	r0, r1
 8000ca4:	bf1c      	itt	ne
 8000ca6:	2000      	movne	r0, #0
 8000ca8:	4770      	bxne	lr
 8000caa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cae:	d104      	bne.n	8000cba <__addsf3+0x126>
 8000cb0:	0040      	lsls	r0, r0, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb8:	4770      	bx	lr
 8000cba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cbe:	bf3c      	itt	cc
 8000cc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bxcc	lr
 8000cc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd2:	4770      	bx	lr
 8000cd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd8:	bf16      	itet	ne
 8000cda:	4608      	movne	r0, r1
 8000cdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce0:	4601      	movne	r1, r0
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	bf06      	itte	eq
 8000ce6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cea:	ea90 0f01 	teqeq	r0, r1
 8000cee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_ui2f>:
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e004      	b.n	8000d04 <__aeabi_i2f+0x8>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_i2f>:
 8000cfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d00:	bf48      	it	mi
 8000d02:	4240      	negmi	r0, r0
 8000d04:	ea5f 0c00 	movs.w	ip, r0
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d10:	4601      	mov	r1, r0
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	e01c      	b.n	8000d52 <__aeabi_l2f+0x2a>

08000d18 <__aeabi_ul2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e00a      	b.n	8000d3c <__aeabi_l2f+0x14>
 8000d26:	bf00      	nop

08000d28 <__aeabi_l2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__aeabi_l2f+0x14>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	ea5f 0c01 	movs.w	ip, r1
 8000d40:	bf02      	ittt	eq
 8000d42:	4684      	moveq	ip, r0
 8000d44:	4601      	moveq	r1, r0
 8000d46:	2000      	moveq	r0, #0
 8000d48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d4c:	bf08      	it	eq
 8000d4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d56:	fabc f28c 	clz	r2, ip
 8000d5a:	3a08      	subs	r2, #8
 8000d5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d60:	db10      	blt.n	8000d84 <__aeabi_l2f+0x5c>
 8000d62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d66:	4463      	add	r3, ip
 8000d68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	f020 0001 	biceq.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	f102 0220 	add.w	r2, r2, #32
 8000d88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d94:	fa21 f202 	lsr.w	r2, r1, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_fmul>:
 8000da4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dac:	bf1e      	ittt	ne
 8000dae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000db2:	ea92 0f0c 	teqne	r2, ip
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d06f      	beq.n	8000e9c <__aeabi_fmul+0xf8>
 8000dbc:	441a      	add	r2, r3
 8000dbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc2:	0240      	lsls	r0, r0, #9
 8000dc4:	bf18      	it	ne
 8000dc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dca:	d01e      	beq.n	8000e0a <__aeabi_fmul+0x66>
 8000dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ddc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000de4:	bf3e      	ittt	cc
 8000de6:	0049      	lslcc	r1, r1, #1
 8000de8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	ea40 0001 	orr.w	r0, r0, r1
 8000df2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000df6:	2afd      	cmp	r2, #253	; 0xfd
 8000df8:	d81d      	bhi.n	8000e36 <__aeabi_fmul+0x92>
 8000dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e02:	bf08      	it	eq
 8000e04:	f020 0001 	biceq.w	r0, r0, #1
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e12:	bf08      	it	eq
 8000e14:	0249      	lsleq	r1, r1, #9
 8000e16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e1e:	3a7f      	subs	r2, #127	; 0x7f
 8000e20:	bfc2      	ittt	gt
 8000e22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2a:	4770      	bxgt	lr
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	3a01      	subs	r2, #1
 8000e36:	dc5d      	bgt.n	8000ef4 <__aeabi_fmul+0x150>
 8000e38:	f112 0f19 	cmn.w	r2, #25
 8000e3c:	bfdc      	itt	le
 8000e3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e42:	4770      	bxle	lr
 8000e44:	f1c2 0200 	rsb	r2, r2, #0
 8000e48:	0041      	lsls	r1, r0, #1
 8000e4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e4e:	f1c2 0220 	rsb	r2, r2, #32
 8000e52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e5a:	f140 0000 	adc.w	r0, r0, #0
 8000e5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e62:	bf08      	it	eq
 8000e64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e68:	4770      	bx	lr
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fmul+0xce>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xe6>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e78f      	b.n	8000dbc <__aeabi_fmul+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	bf18      	it	ne
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d00a      	beq.n	8000ec2 <__aeabi_fmul+0x11e>
 8000eac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb0:	bf18      	it	ne
 8000eb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eb6:	d1d8      	bne.n	8000e6a <__aeabi_fmul+0xc6>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	bf17      	itett	ne
 8000ec8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ecc:	4608      	moveq	r0, r1
 8000ece:	f091 0f00 	teqne	r1, #0
 8000ed2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ed6:	d014      	beq.n	8000f02 <__aeabi_fmul+0x15e>
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d101      	bne.n	8000ee2 <__aeabi_fmul+0x13e>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	d10f      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ee2:	ea93 0f0c 	teq	r3, ip
 8000ee6:	d103      	bne.n	8000ef0 <__aeabi_fmul+0x14c>
 8000ee8:	024b      	lsls	r3, r1, #9
 8000eea:	bf18      	it	ne
 8000eec:	4608      	movne	r0, r1
 8000eee:	d108      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ef0:	ea80 0001 	eor.w	r0, r0, r1
 8000ef4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f00:	4770      	bx	lr
 8000f02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_fdiv>:
 8000f0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f14:	bf1e      	ittt	ne
 8000f16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f1a:	ea92 0f0c 	teqne	r2, ip
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d069      	beq.n	8000ff8 <__aeabi_fdiv+0xec>
 8000f24:	eba2 0203 	sub.w	r2, r2, r3
 8000f28:	ea80 0c01 	eor.w	ip, r0, r1
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f32:	d037      	beq.n	8000fa4 <__aeabi_fdiv+0x98>
 8000f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f44:	428b      	cmp	r3, r1
 8000f46:	bf38      	it	cc
 8000f48:	005b      	lslcc	r3, r3, #1
 8000f4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f52:	428b      	cmp	r3, r1
 8000f54:	bf24      	itt	cs
 8000f56:	1a5b      	subcs	r3, r3, r1
 8000f58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f6e:	bf24      	itt	cs
 8000f70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f7c:	bf24      	itt	cs
 8000f7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	bf18      	it	ne
 8000f8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f8e:	d1e0      	bne.n	8000f52 <__aeabi_fdiv+0x46>
 8000f90:	2afd      	cmp	r2, #253	; 0xfd
 8000f92:	f63f af50 	bhi.w	8000e36 <__aeabi_fmul+0x92>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fa8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fac:	327f      	adds	r2, #127	; 0x7f
 8000fae:	bfc2      	ittt	gt
 8000fb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb8:	4770      	bxgt	lr
 8000fba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	e737      	b.n	8000e36 <__aeabi_fmul+0x92>
 8000fc6:	f092 0f00 	teq	r2, #0
 8000fca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fce:	bf02      	ittt	eq
 8000fd0:	0040      	lsleq	r0, r0, #1
 8000fd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fd6:	3a01      	subeq	r2, #1
 8000fd8:	d0f9      	beq.n	8000fce <__aeabi_fdiv+0xc2>
 8000fda:	ea40 000c 	orr.w	r0, r0, ip
 8000fde:	f093 0f00 	teq	r3, #0
 8000fe2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0049      	lsleq	r1, r1, #1
 8000fea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fee:	3b01      	subeq	r3, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xda>
 8000ff2:	ea41 010c 	orr.w	r1, r1, ip
 8000ff6:	e795      	b.n	8000f24 <__aeabi_fdiv+0x18>
 8000ff8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ffc:	ea92 0f0c 	teq	r2, ip
 8001000:	d108      	bne.n	8001014 <__aeabi_fdiv+0x108>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	f47f af7d 	bne.w	8000f02 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	f47f af70 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001010:	4608      	mov	r0, r1
 8001012:	e776      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001014:	ea93 0f0c 	teq	r3, ip
 8001018:	d104      	bne.n	8001024 <__aeabi_fdiv+0x118>
 800101a:	024b      	lsls	r3, r1, #9
 800101c:	f43f af4c 	beq.w	8000eb8 <__aeabi_fmul+0x114>
 8001020:	4608      	mov	r0, r1
 8001022:	e76e      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001024:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001028:	bf18      	it	ne
 800102a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800102e:	d1ca      	bne.n	8000fc6 <__aeabi_fdiv+0xba>
 8001030:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001034:	f47f af5c 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001038:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800103c:	f47f af3c 	bne.w	8000eb8 <__aeabi_fmul+0x114>
 8001040:	e75f      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001042:	bf00      	nop

08001044 <__aeabi_d2lz>:
 8001044:	b538      	push	{r3, r4, r5, lr}
 8001046:	4605      	mov	r5, r0
 8001048:	460c      	mov	r4, r1
 800104a:	2200      	movs	r2, #0
 800104c:	2300      	movs	r3, #0
 800104e:	4628      	mov	r0, r5
 8001050:	4621      	mov	r1, r4
 8001052:	f7ff fcc3 	bl	80009dc <__aeabi_dcmplt>
 8001056:	b928      	cbnz	r0, 8001064 <__aeabi_d2lz+0x20>
 8001058:	4628      	mov	r0, r5
 800105a:	4621      	mov	r1, r4
 800105c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001060:	f000 b80a 	b.w	8001078 <__aeabi_d2ulz>
 8001064:	4628      	mov	r0, r5
 8001066:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800106a:	f000 f805 	bl	8001078 <__aeabi_d2ulz>
 800106e:	4240      	negs	r0, r0
 8001070:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001074:	bd38      	pop	{r3, r4, r5, pc}
 8001076:	bf00      	nop

08001078 <__aeabi_d2ulz>:
 8001078:	b5d0      	push	{r4, r6, r7, lr}
 800107a:	2200      	movs	r2, #0
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <__aeabi_d2ulz+0x34>)
 800107e:	4606      	mov	r6, r0
 8001080:	460f      	mov	r7, r1
 8001082:	f7ff fa39 	bl	80004f8 <__aeabi_dmul>
 8001086:	f7ff fd0f 	bl	8000aa8 <__aeabi_d2uiz>
 800108a:	4604      	mov	r4, r0
 800108c:	f7ff f9ba 	bl	8000404 <__aeabi_ui2d>
 8001090:	2200      	movs	r2, #0
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <__aeabi_d2ulz+0x38>)
 8001094:	f7ff fa30 	bl	80004f8 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4630      	mov	r0, r6
 800109e:	4639      	mov	r1, r7
 80010a0:	f7ff f872 	bl	8000188 <__aeabi_dsub>
 80010a4:	f7ff fd00 	bl	8000aa8 <__aeabi_d2uiz>
 80010a8:	4621      	mov	r1, r4
 80010aa:	bdd0      	pop	{r4, r6, r7, pc}
 80010ac:	3df00000 	.word	0x3df00000
 80010b0:	41f00000 	.word	0x41f00000

080010b4 <USER_ADC_Init>:
#include "GPIO.h"

// Initialize ADC

void USER_ADC_Init( uint8_t ADC )
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  RCC->CFGR	|=	RCC_CFGR_ADCPRE;       		// Adjust ADC input clock
 80010be:	4b72      	ldr	r3, [pc, #456]	; (8001288 <USER_ADC_Init+0x1d4>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4a71      	ldr	r2, [pc, #452]	; (8001288 <USER_ADC_Init+0x1d4>)
 80010c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c8:	6053      	str	r3, [r2, #4]
  USER_GPIO_Define(PORTA, 0, INP, INP_AN);		// Pin PA0 as analog input
 80010ca:	2300      	movs	r3, #0
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2000      	movs	r0, #0
 80010d2:	f001 f8a3 	bl	800221c <USER_GPIO_Define>

  if( ADC == 0 )
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d143      	bne.n	8001164 <USER_ADC_Init+0xb0>
  {
    RCC->APB2ENR	|=	RCC_APB2ENR_ADC1EN;	// ADC1 clock enable
 80010dc:	4b6a      	ldr	r3, [pc, #424]	; (8001288 <USER_ADC_Init+0x1d4>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a69      	ldr	r2, [pc, #420]	; (8001288 <USER_ADC_Init+0x1d4>)
 80010e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e6:	6193      	str	r3, [r2, #24]

    ADC1->CR1		&=	~(ADC_CR1_DUALMOD);	// Step 1 - Select independent mode
 80010e8:	4b68      	ldr	r3, [pc, #416]	; (800128c <USER_ADC_Init+0x1d8>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a67      	ldr	r2, [pc, #412]	; (800128c <USER_ADC_Init+0x1d8>)
 80010ee:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80010f2:	6053      	str	r3, [r2, #4]
    ADC1->CR2		|=	ADC_CR2_CONT;		// Step 2 - Select conversion mode
 80010f4:	4b65      	ldr	r3, [pc, #404]	; (800128c <USER_ADC_Init+0x1d8>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4a64      	ldr	r2, [pc, #400]	; (800128c <USER_ADC_Init+0x1d8>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	6093      	str	r3, [r2, #8]
    ADC1->CR2		&= 	~(ADC_CR2_ALIGN);	//	and format for ADC result
 8001100:	4b62      	ldr	r3, [pc, #392]	; (800128c <USER_ADC_Init+0x1d8>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	4a61      	ldr	r2, [pc, #388]	; (800128c <USER_ADC_Init+0x1d8>)
 8001106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800110a:	6093      	str	r3, [r2, #8]
    ADC1->SMPR2		&= 	~(ADC_SMPR2_SMP0);	// Step 3 - Select the sample time for the
 800110c:	4b5f      	ldr	r3, [pc, #380]	; (800128c <USER_ADC_Init+0x1d8>)
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	4a5e      	ldr	r2, [pc, #376]	; (800128c <USER_ADC_Init+0x1d8>)
 8001112:	f023 0307 	bic.w	r3, r3, #7
 8001116:	6113      	str	r3, [r2, #16]
							//	ADC channel
    ADC1->SQR1		&= 	~(ADC_SQR1_L);		// Step 4 - Select the sequence and number of
 8001118:	4b5c      	ldr	r3, [pc, #368]	; (800128c <USER_ADC_Init+0x1d8>)
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	4a5b      	ldr	r2, [pc, #364]	; (800128c <USER_ADC_Init+0x1d8>)
 800111e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001122:	62d3      	str	r3, [r2, #44]	; 0x2c
							//	conversions for the ADC regular channels
    ADC1->SQR3		&= 	~(ADC_SQR3_SQ1);	// Step 5 - Select the channel for the first ADC
 8001124:	4b59      	ldr	r3, [pc, #356]	; (800128c <USER_ADC_Init+0x1d8>)
 8001126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001128:	4a58      	ldr	r2, [pc, #352]	; (800128c <USER_ADC_Init+0x1d8>)
 800112a:	f023 031f 	bic.w	r3, r3, #31
 800112e:	6353      	str	r3, [r2, #52]	; 0x34
							//	conversion
    ADC1->CR2		|=	ADC_CR2_ADON;		// Step 6 - Enable the ADC module
 8001130:	4b56      	ldr	r3, [pc, #344]	; (800128c <USER_ADC_Init+0x1d8>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4a55      	ldr	r2, [pc, #340]	; (800128c <USER_ADC_Init+0x1d8>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6093      	str	r3, [r2, #8]
    ADC1->CR2		|=	ADC_CR2_CAL;		// Step 7 - Perform a calibration after
 800113c:	4b53      	ldr	r3, [pc, #332]	; (800128c <USER_ADC_Init+0x1d8>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a52      	ldr	r2, [pc, #328]	; (800128c <USER_ADC_Init+0x1d8>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6093      	str	r3, [r2, #8]
							// 	each power-up
    while ( ADC1->CR2 & ADC_CR2_CAL );			// Step 8 - Wait until the bit is reset by
 8001148:	bf00      	nop
 800114a:	4b50      	ldr	r3, [pc, #320]	; (800128c <USER_ADC_Init+0x1d8>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f9      	bne.n	800114a <USER_ADC_Init+0x96>
							//	hardware after calibration is complete
    ADC1->CR2		|=	ADC_CR2_ADON;		// Step 9 - Start conversion
 8001156:	4b4d      	ldr	r3, [pc, #308]	; (800128c <USER_ADC_Init+0x1d8>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	4a4c      	ldr	r2, [pc, #304]	; (800128c <USER_ADC_Init+0x1d8>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6093      	str	r3, [r2, #8]

    while ( ADC3->CR2 & ADC_CR2_CAL );

    ADC3->CR2		|=	ADC_CR2_ADON;
  }
}
 8001162:	e08c      	b.n	800127e <USER_ADC_Init+0x1ca>
  else if( ADC == 1 )
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d143      	bne.n	80011f2 <USER_ADC_Init+0x13e>
    RCC->APB2ENR	|=	RCC_APB2ENR_ADC2EN;	// ADC2 clock enable
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <USER_ADC_Init+0x1d4>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a46      	ldr	r2, [pc, #280]	; (8001288 <USER_ADC_Init+0x1d4>)
 8001170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001174:	6193      	str	r3, [r2, #24]
    ADC2->CR1		&=	~(ADC_CR1_DUALMOD);
 8001176:	4b46      	ldr	r3, [pc, #280]	; (8001290 <USER_ADC_Init+0x1dc>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4a45      	ldr	r2, [pc, #276]	; (8001290 <USER_ADC_Init+0x1dc>)
 800117c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001180:	6053      	str	r3, [r2, #4]
    ADC2->CR2		|=	ADC_CR2_CONT;
 8001182:	4b43      	ldr	r3, [pc, #268]	; (8001290 <USER_ADC_Init+0x1dc>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	4a42      	ldr	r2, [pc, #264]	; (8001290 <USER_ADC_Init+0x1dc>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6093      	str	r3, [r2, #8]
    ADC2->CR2		&= 	~(ADC_CR2_ALIGN);
 800118e:	4b40      	ldr	r3, [pc, #256]	; (8001290 <USER_ADC_Init+0x1dc>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	4a3f      	ldr	r2, [pc, #252]	; (8001290 <USER_ADC_Init+0x1dc>)
 8001194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001198:	6093      	str	r3, [r2, #8]
    ADC2->SMPR2		&= 	~(ADC_SMPR2_SMP0);
 800119a:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <USER_ADC_Init+0x1dc>)
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	4a3c      	ldr	r2, [pc, #240]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011a0:	f023 0307 	bic.w	r3, r3, #7
 80011a4:	6113      	str	r3, [r2, #16]
    ADC2->SQR1		&= 	~(ADC_SQR1_L);
 80011a6:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	4a39      	ldr	r2, [pc, #228]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80011b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    ADC2->SQR3		&= 	~(ADC_SQR3_SQ1);
 80011b2:	4b37      	ldr	r3, [pc, #220]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b6:	4a36      	ldr	r2, [pc, #216]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011b8:	f023 031f 	bic.w	r3, r3, #31
 80011bc:	6353      	str	r3, [r2, #52]	; 0x34
    ADC2->CR2		|=	ADC_CR2_ADON;
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	4a33      	ldr	r2, [pc, #204]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6093      	str	r3, [r2, #8]
    ADC2->CR2		|=	ADC_CR2_CAL;
 80011ca:	4b31      	ldr	r3, [pc, #196]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	4a30      	ldr	r2, [pc, #192]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6093      	str	r3, [r2, #8]
    while ( ADC2->CR2 & ADC_CR2_CAL );
 80011d6:	bf00      	nop
 80011d8:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f9      	bne.n	80011d8 <USER_ADC_Init+0x124>
    ADC2->CR2		|=	ADC_CR2_ADON;
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4a29      	ldr	r2, [pc, #164]	; (8001290 <USER_ADC_Init+0x1dc>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6093      	str	r3, [r2, #8]
}
 80011f0:	e045      	b.n	800127e <USER_ADC_Init+0x1ca>
  else if( ADC == 2 )
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d142      	bne.n	800127e <USER_ADC_Init+0x1ca>
    RCC->APB2ENR	|=	RCC_APB2ENR_ADC3EN;	// ADC3 clock enable
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <USER_ADC_Init+0x1d4>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a22      	ldr	r2, [pc, #136]	; (8001288 <USER_ADC_Init+0x1d4>)
 80011fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001202:	6193      	str	r3, [r2, #24]
    ADC3->CR1		&=	~(ADC_CR1_DUALMOD);
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	4a22      	ldr	r2, [pc, #136]	; (8001294 <USER_ADC_Init+0x1e0>)
 800120a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800120e:	6053      	str	r3, [r2, #4]
    ADC3->CR2		|=	ADC_CR2_CONT;
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001216:	f043 0302 	orr.w	r3, r3, #2
 800121a:	6093      	str	r3, [r2, #8]
    ADC3->CR2		&= 	~(ADC_CR2_ALIGN);
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <USER_ADC_Init+0x1e0>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4a1c      	ldr	r2, [pc, #112]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001226:	6093      	str	r3, [r2, #8]
    ADC3->SMPR2		&= 	~(ADC_SMPR2_SMP0);
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <USER_ADC_Init+0x1e0>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4a19      	ldr	r2, [pc, #100]	; (8001294 <USER_ADC_Init+0x1e0>)
 800122e:	f023 0307 	bic.w	r3, r3, #7
 8001232:	6113      	str	r3, [r2, #16]
    ADC3->SQR1		&= 	~(ADC_SQR1_L);
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	4a16      	ldr	r2, [pc, #88]	; (8001294 <USER_ADC_Init+0x1e0>)
 800123a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800123e:	62d3      	str	r3, [r2, #44]	; 0x2c
    ADC3->SQR3		&= 	~(ADC_SQR3_SQ1);
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001244:	4a13      	ldr	r2, [pc, #76]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001246:	f023 031f 	bic.w	r3, r3, #31
 800124a:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->CR2		|=	ADC_CR2_ADON;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <USER_ADC_Init+0x1e0>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a10      	ldr	r2, [pc, #64]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6093      	str	r3, [r2, #8]
    ADC3->CR2		|=	ADC_CR2_CAL;
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <USER_ADC_Init+0x1e0>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <USER_ADC_Init+0x1e0>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6093      	str	r3, [r2, #8]
    while ( ADC3->CR2 & ADC_CR2_CAL );
 8001264:	bf00      	nop
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f9      	bne.n	8001266 <USER_ADC_Init+0x1b2>
    ADC3->CR2		|=	ADC_CR2_ADON;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	4a07      	ldr	r2, [pc, #28]	; (8001294 <USER_ADC_Init+0x1e0>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6093      	str	r3, [r2, #8]
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	40012400 	.word	0x40012400
 8001290:	40012800 	.word	0x40012800
 8001294:	40013c00 	.word	0x40013c00

08001298 <USER_ADC_Convert>:

// Convert Analog value to Digital using ADC

uint16_t USER_ADC_Convert( uint8_t ADC )
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if( ADC == 0 )
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d10a      	bne.n	80012be <USER_ADC_Convert+0x26>
  {
    while( !( ADC1->SR & ADC_SR_EOC ) );		// Wait for end of conversion
 80012a8:	bf00      	nop
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <USER_ADC_Convert+0x6c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f9      	beq.n	80012aa <USER_ADC_Convert+0x12>
    return ADC1->DR;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <USER_ADC_Convert+0x6c>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	e01c      	b.n	80012f8 <USER_ADC_Convert+0x60>
  }
  else if( ADC == 1 )
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d10a      	bne.n	80012da <USER_ADC_Convert+0x42>
  {
    while( !( ADC2->SR & ADC_SR_EOC ) );
 80012c4:	bf00      	nop
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <USER_ADC_Convert+0x70>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f9      	beq.n	80012c6 <USER_ADC_Convert+0x2e>
    return ADC2->DR;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <USER_ADC_Convert+0x70>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	e00e      	b.n	80012f8 <USER_ADC_Convert+0x60>
  }
  else if( ADC == 2 )
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d10a      	bne.n	80012f6 <USER_ADC_Convert+0x5e>
  {
    while( !( ADC3->SR & ADC_SR_EOC ) );
 80012e0:	bf00      	nop
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <USER_ADC_Convert+0x74>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f9      	beq.n	80012e2 <USER_ADC_Convert+0x4a>
    return ADC3->DR;
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <USER_ADC_Convert+0x74>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	e000      	b.n	80012f8 <USER_ADC_Convert+0x60>
  }

  return 0;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40012400 	.word	0x40012400
 8001308:	40012800 	.word	0x40012800
 800130c:	40013c00 	.word	0x40013c00

08001310 <scaleVoltageValue>:

// Scale ADC read voltage value to a range of 0 to 100

float scaleVoltageValue( float voltageValue, float min, float max )
{ 
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  float normalizedVoltageValue = (voltageValue - min) / (max - min) * 100;
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff fc36 	bl	8000b90 <__aeabi_fsub>
 8001324:	4603      	mov	r3, r0
 8001326:	461c      	mov	r4, r3
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fc30 	bl	8000b90 <__aeabi_fsub>
 8001330:	4603      	mov	r3, r0
 8001332:	4619      	mov	r1, r3
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff fde9 	bl	8000f0c <__aeabi_fdiv>
 800133a:	4603      	mov	r3, r0
 800133c:	4905      	ldr	r1, [pc, #20]	; (8001354 <scaleVoltageValue+0x44>)
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fd30 	bl	8000da4 <__aeabi_fmul>
 8001344:	4603      	mov	r3, r0
 8001346:	617b      	str	r3, [r7, #20]
  return normalizedVoltageValue;
 8001348:	697b      	ldr	r3, [r7, #20]
}
 800134a:	4618      	mov	r0, r3
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	42c80000 	.word	0x42c80000

08001358 <look2_binlxpw>:
/* Forward declaration for local functions */
static void EngTrModel_gear_state(const int32_T *sfEvent);
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b092      	sub	sp, #72	; 0x48
 800135c:	af00      	add	r7, sp, #0
 800135e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001362:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8001366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001370:	f7ff fb3e 	bl	80009f0 <__aeabi_dcmple>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d020      	beq.n	80013bc <look2_binlxpw+0x64>
    iLeft = 0U;
 800137a:	2300      	movs	r3, #0
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800137e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001388:	f7fe fefe 	bl	8000188 <__aeabi_dsub>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4614      	mov	r4, r2
 8001392:	461d      	mov	r5, r3
 8001394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001396:	3308      	adds	r3, #8
 8001398:	e9d3 0100 	ldrd	r0, r1, [r3]
 800139c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7fe fef1 	bl	8000188 <__aeabi_dsub>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4620      	mov	r0, r4
 80013ac:	4629      	mov	r1, r5
 80013ae:	f7ff f9cd 	bl	800074c <__aeabi_ddiv>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80013ba:	e08e      	b.n	80014da <look2_binlxpw+0x182>
  } else if (u0 < bp0[maxIndex[0U]]) {
 80013bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013c4:	4413      	add	r3, r2
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ce:	f7ff fb05 	bl	80009dc <__aeabi_dcmplt>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d04d      	beq.n	8001474 <look2_binlxpw+0x11c>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 80013d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	085b      	lsrs	r3, r3, #1
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[0U];
 80013e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 80013ea:	e016      	b.n	800141a <look2_binlxpw+0xc2>
      if (u0 < bp0[bpIdx]) {
 80013ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013f2:	4413      	add	r3, r2
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013fc:	f7ff faee 	bl	80009dc <__aeabi_dcmplt>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <look2_binlxpw+0xb4>
        iRght = bpIdx;
 8001406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800140a:	e001      	b.n	8001410 <look2_binlxpw+0xb8>
      } else {
        iLeft = bpIdx;
 800140c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8001410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001414:	4413      	add	r3, r2
 8001416:	085b      	lsrs	r3, r3, #1
 8001418:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 800141a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d8e3      	bhi.n	80013ec <look2_binlxpw+0x94>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800142a:	4413      	add	r3, r2
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001434:	f7fe fea8 	bl	8000188 <__aeabi_dsub>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4614      	mov	r4, r2
 800143e:	461d      	mov	r5, r3
 8001440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001442:	3301      	adds	r3, #1
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001448:	4413      	add	r3, r2
 800144a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001454:	4413      	add	r3, r2
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7fe fe95 	bl	8000188 <__aeabi_dsub>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4620      	mov	r0, r4
 8001464:	4629      	mov	r1, r5
 8001466:	f7ff f971 	bl	800074c <__aeabi_ddiv>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001472:	e032      	b.n	80014da <look2_binlxpw+0x182>
  } else {
    iLeft = maxIndex[0U] - 1U;
 8001474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3b01      	subs	r3, #1
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 800147c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001484:	3b01      	subs	r3, #1
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800148a:	4413      	add	r3, r2
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001494:	f7fe fe78 	bl	8000188 <__aeabi_dsub>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4614      	mov	r4, r2
 800149e:	461d      	mov	r5, r3
 80014a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014a8:	4413      	add	r3, r2
 80014aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80014b6:	3b01      	subs	r3, #1
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014bc:	4413      	add	r3, r2
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7fe fe61 	bl	8000188 <__aeabi_dsub>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4620      	mov	r0, r4
 80014cc:	4629      	mov	r1, r5
 80014ce:	f7ff f93d 	bl	800074c <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 80014da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80014de:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 80014e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e4:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 80014e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014f0:	f7ff fa7e 	bl	80009f0 <__aeabi_dcmple>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d020      	beq.n	800153c <look2_binlxpw+0x1e4>
    iLeft = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 80014fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001508:	f7fe fe3e 	bl	8000188 <__aeabi_dsub>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4614      	mov	r4, r2
 8001512:	461d      	mov	r5, r3
 8001514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001516:	3308      	adds	r3, #8
 8001518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800151c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7fe fe31 	bl	8000188 <__aeabi_dsub>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7ff f90d 	bl	800074c <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800153a:	e095      	b.n	8001668 <look2_binlxpw+0x310>
  } else if (u1 < bp1[maxIndex[1U]]) {
 800153c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800153e:	3304      	adds	r3, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001546:	4413      	add	r3, r2
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001550:	f7ff fa44 	bl	80009dc <__aeabi_dcmplt>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d04f      	beq.n	80015fa <look2_binlxpw+0x2a2>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 800155a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800155c:	3304      	adds	r3, #4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[1U];
 8001568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800156a:	3304      	adds	r3, #4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 8001570:	e016      	b.n	80015a0 <look2_binlxpw+0x248>
      if (u1 < bp1[bpIdx]) {
 8001572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001578:	4413      	add	r3, r2
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001582:	f7ff fa2b 	bl	80009dc <__aeabi_dcmplt>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <look2_binlxpw+0x23a>
        iRght = bpIdx;
 800158c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001590:	e001      	b.n	8001596 <look2_binlxpw+0x23e>
      } else {
        iLeft = bpIdx;
 8001592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001594:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8001596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159a:	4413      	add	r3, r2
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 80015a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d8e3      	bhi.n	8001572 <look2_binlxpw+0x21a>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 80015aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80015b0:	4413      	add	r3, r2
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015ba:	f7fe fde5 	bl	8000188 <__aeabi_dsub>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4614      	mov	r4, r2
 80015c4:	461d      	mov	r5, r3
 80015c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c8:	3301      	adds	r3, #1
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80015ce:	4413      	add	r3, r2
 80015d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80015da:	4413      	add	r3, r2
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7fe fdd2 	bl	8000188 <__aeabi_dsub>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7ff f8ae 	bl	800074c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80015f8:	e036      	b.n	8001668 <look2_binlxpw+0x310>
  } else {
    iLeft = maxIndex[1U] - 1U;
 80015fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015fc:	3304      	adds	r3, #4
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3b01      	subs	r3, #1
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 8001604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001606:	3304      	adds	r3, #4
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800160e:	3b01      	subs	r3, #1
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001614:	4413      	add	r3, r2
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800161e:	f7fe fdb3 	bl	8000188 <__aeabi_dsub>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4614      	mov	r4, r2
 8001628:	461d      	mov	r5, r3
 800162a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800162c:	3304      	adds	r3, #4
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001634:	4413      	add	r3, r2
 8001636:	e9d3 0100 	ldrd	r0, r1, [r3]
 800163a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800163c:	3304      	adds	r3, #4
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001644:	3b01      	subs	r3, #1
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800164a:	4413      	add	r3, r2
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe fd9a 	bl	8000188 <__aeabi_dsub>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4620      	mov	r0, r4
 800165a:	4629      	mov	r1, r5
 800165c:	f7ff f876 	bl	800074c <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800166c:	fb03 f202 	mul.w	r2, r3, r2
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	4413      	add	r3, r2
 8001674:	63bb      	str	r3, [r7, #56]	; 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 8001676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001678:	3301      	adds	r3, #1
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800167e:	4413      	add	r3, r2
 8001680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800168a:	4413      	add	r3, r2
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7fe fd7a 	bl	8000188 <__aeabi_dsub>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016a0:	f7fe ff2a 	bl	80004f8 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016b2:	4413      	add	r3, r2
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe fd68 	bl	800018c <__adddf3>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  bpIdx += stride;
 80016c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016c8:	4413      	add	r3, r2
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 80016cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ce:	3301      	adds	r3, #1
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016d4:	4413      	add	r3, r2
 80016d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016e0:	4413      	add	r3, r2
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7fe fd4f 	bl	8000188 <__aeabi_dsub>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016f6:	f7fe feff 	bl	80004f8 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001708:	4413      	add	r3, r2
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7fe fd3d 	bl	800018c <__adddf3>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800171e:	f7fe fd33 	bl	8000188 <__aeabi_dsub>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
          yL_1d) * frac + yL_1d;
 800172a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800172e:	f7fe fee3 	bl	80004f8 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800173e:	f7fe fd25 	bl	800018c <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
}
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	3748      	adds	r7, #72	; 0x48
 800174c:	46bd      	mov	sp, r7
 800174e:	bdb0      	pop	{r4, r5, r7, pc}

08001750 <look1_binlxpw>:

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001768:	f7ff f942 	bl	80009f0 <__aeabi_dcmple>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d020      	beq.n	80017b4 <look1_binlxpw+0x64>
    iLeft = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001780:	f7fe fd02 	bl	8000188 <__aeabi_dsub>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3308      	adds	r3, #8
 8001790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe fcf5 	bl	8000188 <__aeabi_dsub>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe ffd1 	bl	800074c <__aeabi_ddiv>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80017b2:	e087      	b.n	80018c4 <look1_binlxpw+0x174>
  } else if (u0 < bp0[maxIndex]) {
 80017b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017c4:	f7ff f90a 	bl	80009dc <__aeabi_dcmplt>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d04b      	beq.n	8001866 <look1_binlxpw+0x116>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 80017ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 80017d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017da:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 80017dc:	e016      	b.n	800180c <look1_binlxpw+0xbc>
      if (u0 < bp0[bpIdx]) {
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017ee:	f7ff f8f5 	bl	80009dc <__aeabi_dcmplt>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <look1_binlxpw+0xae>
        iRght = bpIdx;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	e001      	b.n	8001802 <look1_binlxpw+0xb2>
      } else {
        iLeft = bpIdx;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	4413      	add	r3, r2
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	617b      	str	r3, [r7, #20]
    while (iRght - iLeft > 1U) {
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b01      	cmp	r3, #1
 8001814:	d8e3      	bhi.n	80017de <look1_binlxpw+0x8e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001826:	f7fe fcaf 	bl	8000188 <__aeabi_dsub>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4614      	mov	r4, r2
 8001830:	461d      	mov	r5, r3
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	3301      	adds	r3, #1
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	4413      	add	r3, r2
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fc9c 	bl	8000188 <__aeabi_dsub>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f7fe ff78 	bl	800074c <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001864:	e02e      	b.n	80018c4 <look1_binlxpw+0x174>
  } else {
    iLeft = maxIndex - 1U;
 8001866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001868:	3b01      	subs	r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 800186c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800186e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001872:	3b01      	subs	r3, #1
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001882:	f7fe fc81 	bl	8000188 <__aeabi_dsub>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4614      	mov	r4, r2
 800188c:	461d      	mov	r5, r3
 800188e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800189a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800189c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80018a0:	3b01      	subs	r3, #1
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fc6c 	bl	8000188 <__aeabi_dsub>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe ff48 	bl	800074c <__aeabi_ddiv>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	3301      	adds	r3, #1
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fc53 	bl	8000188 <__aeabi_dsub>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018ee:	f7fe fe03 	bl	80004f8 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	4413      	add	r3, r2
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fc41 	bl	800018c <__adddf3>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
}
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bdb0      	pop	{r4, r5, r7, pc}

08001918 <EngTrModel_gear_state>:

/* Function for Chart: '<Root>/ShiftLogic' */
static void EngTrModel_gear_state(const int32_T *sfEvent)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  switch (EngTrModel_DW.is_gear_state) {
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 8001922:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001926:	3b01      	subs	r3, #1
 8001928:	2b03      	cmp	r3, #3
 800192a:	d86c      	bhi.n	8001a06 <EngTrModel_gear_state+0xee>
 800192c:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <EngTrModel_gear_state+0x1c>)
 800192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001932:	bf00      	nop
 8001934:	08001945 	.word	0x08001945
 8001938:	08001965 	.word	0x08001965
 800193c:	08001983 	.word	0x08001983
 8001940:	080019bd 	.word	0x080019bd
   case EngTrModel_IN_first:
    if (*sfEvent == EngTrModel_event_UP) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d155      	bne.n	80019f8 <EngTrModel_gear_state+0xe0>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 800194e:	2203      	movs	r2, #3
 8001950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 8001954:	492f      	ldr	r1, [pc, #188]	; (8001a14 <EngTrModel_gear_state+0xfc>)
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800195e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 8001962:	e049      	b.n	80019f8 <EngTrModel_gear_state+0xe0>

   case EngTrModel_IN_fourth:
    if (*sfEvent == EngTrModel_event_DOWN) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d147      	bne.n	80019fc <EngTrModel_gear_state+0xe4>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 800196c:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 800196e:	2204      	movs	r2, #4
 8001970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 8001974:	4927      	ldr	r1, [pc, #156]	; (8001a14 <EngTrModel_gear_state+0xfc>)
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <EngTrModel_gear_state+0x100>)
 800197c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 8001980:	e03c      	b.n	80019fc <EngTrModel_gear_state+0xe4>

   case EngTrModel_IN_second:
    switch (*sfEvent) {
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00c      	beq.n	80019a4 <EngTrModel_gear_state+0x8c>
 800198a:	2b01      	cmp	r3, #1
 800198c:	d138      	bne.n	8001a00 <EngTrModel_gear_state+0xe8>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 8001990:	2204      	movs	r2, #4
 8001992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 8001996:	491f      	ldr	r1, [pc, #124]	; (8001a14 <EngTrModel_gear_state+0xfc>)
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <EngTrModel_gear_state+0x100>)
 800199e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80019a2:	e00a      	b.n	80019ba <EngTrModel_gear_state+0xa2>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 1.0;
 80019ac:	4919      	ldr	r1, [pc, #100]	; (8001a14 <EngTrModel_gear_state+0xfc>)
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <EngTrModel_gear_state+0x104>)
 80019b4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80019b8:	bf00      	nop
    }
    break;
 80019ba:	e021      	b.n	8001a00 <EngTrModel_gear_state+0xe8>

   case EngTrModel_IN_third:
    switch (*sfEvent) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00c      	beq.n	80019de <EngTrModel_gear_state+0xc6>
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d11d      	bne.n	8001a04 <EngTrModel_gear_state+0xec>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_fourth;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 4.0;
 80019d0:	4910      	ldr	r1, [pc, #64]	; (8001a14 <EngTrModel_gear_state+0xfc>)
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <EngTrModel_gear_state+0x108>)
 80019d8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80019dc:	e00b      	b.n	80019f6 <EngTrModel_gear_state+0xde>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <EngTrModel_gear_state+0xf8>)
 80019e0:	2203      	movs	r2, #3
 80019e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 80019e6:	490b      	ldr	r1, [pc, #44]	; (8001a14 <EngTrModel_gear_state+0xfc>)
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80019f4:	bf00      	nop
    }
    break;
 80019f6:	e005      	b.n	8001a04 <EngTrModel_gear_state+0xec>
    break;
 80019f8:	bf00      	nop
 80019fa:	e004      	b.n	8001a06 <EngTrModel_gear_state+0xee>
    break;
 80019fc:	bf00      	nop
 80019fe:	e002      	b.n	8001a06 <EngTrModel_gear_state+0xee>
    break;
 8001a00:	bf00      	nop
 8001a02:	e000      	b.n	8001a06 <EngTrModel_gear_state+0xee>
    break;
 8001a04:	bf00      	nop
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000250 	.word	0x20000250
 8001a14:	20000220 	.word	0x20000220
 8001a18:	40080000 	.word	0x40080000
 8001a1c:	3ff00000 	.word	0x3ff00000
 8001a20:	40100000 	.word	0x40100000

08001a24 <rt_powd_snf>:

real_T rt_powd_snf(real_T u0, real_T u1)
{
 8001a24:	b5b0      	push	{r4, r5, r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001a2e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  real_T y;
  real_T tmp;
  real_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 8001a32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a36:	f002 fb53 	bl	80040e0 <rtIsNaN>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d106      	bne.n	8001a4e <rt_powd_snf+0x2a>
 8001a40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a44:	f002 fb4c 	bl	80040e0 <rtIsNaN>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <rt_powd_snf+0x36>
    y = (rtNaN);
 8001a4e:	4b7e      	ldr	r3, [pc, #504]	; (8001c48 <rt_powd_snf+0x224>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a58:	e0ef      	b.n	8001c3a <rt_powd_snf+0x216>
  } else {
    tmp = fabs(u0);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp_0 = fabs(u1);
 8001a6e:	68bc      	ldr	r4, [r7, #8]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001a76:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 8001a7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a7e:	f002 fb0b 	bl	8004098 <rtIsInf>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d049      	beq.n	8001b1c <rt_powd_snf+0xf8>
      if (tmp == 1.0) {
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b6f      	ldr	r3, [pc, #444]	; (8001c4c <rt_powd_snf+0x228>)
 8001a8e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a92:	f7fe ff99 	bl	80009c8 <__aeabi_dcmpeq>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <rt_powd_snf+0x84>
        y = 1.0;
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4b6a      	ldr	r3, [pc, #424]	; (8001c4c <rt_powd_snf+0x228>)
 8001aa2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001aa6:	e0c8      	b.n	8001c3a <rt_powd_snf+0x216>
      } else if (tmp > 1.0) {
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <rt_powd_snf+0x228>)
 8001aae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ab2:	f7fe ffb1 	bl	8000a18 <__aeabi_dcmpgt>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d017      	beq.n	8001aec <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ac8:	f7fe ffa6 	bl	8000a18 <__aeabi_dcmpgt>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <rt_powd_snf+0xba>
          y = (rtInf);
 8001ad2:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <rt_powd_snf+0x22c>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001adc:	e0ad      	b.n	8001c3a <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001aea:	e0a6      	b.n	8001c3a <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001af8:	f7fe ff8e 	bl	8000a18 <__aeabi_dcmpgt>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <rt_powd_snf+0xec>
        y = 0.0;
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001b0e:	e094      	b.n	8001c3a <rt_powd_snf+0x216>
      } else {
        y = (rtInf);
 8001b10:	4b4f      	ldr	r3, [pc, #316]	; (8001c50 <rt_powd_snf+0x22c>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001b1a:	e08e      	b.n	8001c3a <rt_powd_snf+0x216>
      }
    } else if (tmp_0 == 0.0) {
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b28:	f7fe ff4e 	bl	80009c8 <__aeabi_dcmpeq>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <rt_powd_snf+0x11a>
      y = 1.0;
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <rt_powd_snf+0x228>)
 8001b38:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001b3c:	e07d      	b.n	8001c3a <rt_powd_snf+0x216>
    } else if (tmp_0 == 1.0) {
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <rt_powd_snf+0x228>)
 8001b44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b48:	f7fe ff3e 	bl	80009c8 <__aeabi_dcmpeq>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d01b      	beq.n	8001b8a <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b5e:	f7fe ff5b 	bl	8000a18 <__aeabi_dcmpgt>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d004      	beq.n	8001b72 <rt_powd_snf+0x14e>
        y = u0;
 8001b68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b6c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001b70:	e063      	b.n	8001c3a <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8001b72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b76:	f04f 0000 	mov.w	r0, #0
 8001b7a:	4934      	ldr	r1, [pc, #208]	; (8001c4c <rt_powd_snf+0x228>)
 8001b7c:	f7fe fde6 	bl	800074c <__aeabi_ddiv>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001b88:	e057      	b.n	8001c3a <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b96:	f7fe ff17 	bl	80009c8 <__aeabi_dcmpeq>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00a      	beq.n	8001bb6 <rt_powd_snf+0x192>
      y = u0 * u0;
 8001ba0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ba4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ba8:	f7fe fca6 	bl	80004f8 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001bb4:	e041      	b.n	8001c3a <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <rt_powd_snf+0x230>)
 8001bbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bc0:	f7fe ff02 	bl	80009c8 <__aeabi_dcmpeq>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d011      	beq.n	8001bee <rt_powd_snf+0x1ca>
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bd6:	f7fe ff15 	bl	8000a04 <__aeabi_dcmpge>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001be0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001be4:	f007 fa56 	bl	8009094 <sqrt>
 8001be8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001bec:	e025      	b.n	8001c3a <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bfa:	f7fe feef 	bl	80009dc <__aeabi_dcmplt>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d012      	beq.n	8001c2a <rt_powd_snf+0x206>
 8001c04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c08:	f007 fb46 	bl	8009298 <floor>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c14:	f7fe ff00 	bl	8000a18 <__aeabi_dcmpgt>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <rt_powd_snf+0x206>
      y = (rtNaN);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <rt_powd_snf+0x224>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001c28:	e007      	b.n	8001c3a <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8001c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c32:	f007 f9c7 	bl	8008fc4 <pow>
 8001c36:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    }
  }

  return y;
 8001c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	3730      	adds	r7, #48	; 0x30
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bdb0      	pop	{r4, r5, r7, pc}
 8001c48:	200006e8 	.word	0x200006e8
 8001c4c:	3ff00000 	.word	0x3ff00000
 8001c50:	200006d8 	.word	0x200006d8
 8001c54:	3fe00000 	.word	0x3fe00000

08001c58 <EngTrModel_step>:

/* Model step function */
void EngTrModel_step(void)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b08c      	sub	sp, #48	; 0x30
 8001c5c:	af06      	add	r7, sp, #24
  int32_T sfEvent;
  real_T InterpDown;
  real_T InterpUp;

  /* DiscreteIntegrator: '<S1>/Discrete-Time Integrator' */
  EngTrModel_B.EngineRPM = EngTrModel_DW.DiscreteTimeIntegrator_DSTATE;
 8001c5e:	4b8c      	ldr	r3, [pc, #560]	; (8001e90 <EngTrModel_step+0x238>)
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	498b      	ldr	r1, [pc, #556]	; (8001e94 <EngTrModel_step+0x23c>)
 8001c66:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/EngineSpeed' */
  EngTrModel_Y.EngineSpeed = EngTrModel_B.EngineRPM;
 8001c6a:	4b8a      	ldr	r3, [pc, #552]	; (8001e94 <EngTrModel_step+0x23c>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	4989      	ldr	r1, [pc, #548]	; (8001e98 <EngTrModel_step+0x240>)
 8001c72:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S8>/ToLinearSpeed'
   */
  /* Unit Conversion - from: ft/min to: mph
     Expression: output = (0.0113636*input) + (0) */
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001c76:	4b86      	ldr	r3, [pc, #536]	; (8001e90 <EngTrModel_step+0x238>)
 8001c78:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 8001c7c:	a380      	add	r3, pc, #512	; (adr r3, 8001e80 <EngTrModel_step+0x228>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	f7fe fc39 	bl	80004f8 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001c8e:	a37e      	add	r3, pc, #504	; (adr r3, 8001e88 <EngTrModel_step+0x230>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fc30 	bl	80004f8 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 8001c9c:	497d      	ldr	r1, [pc, #500]	; (8001e94 <EngTrModel_step+0x23c>)
 8001c9e:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Chart: '<Root>/ShiftLogic' */
  sfEvent = EngTrModel_CALL_EVENT;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	607b      	str	r3, [r7, #4]
  if (EngTrModel_DW.temporalCounter_i1 < MAX_uint32_T) {
 8001ca8:	4b79      	ldr	r3, [pc, #484]	; (8001e90 <EngTrModel_step+0x238>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d004      	beq.n	8001cbc <EngTrModel_step+0x64>
    EngTrModel_DW.temporalCounter_i1++;
 8001cb2:	4b77      	ldr	r3, [pc, #476]	; (8001e90 <EngTrModel_step+0x238>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	4a75      	ldr	r2, [pc, #468]	; (8001e90 <EngTrModel_step+0x238>)
 8001cba:	61d3      	str	r3, [r2, #28]
  }

  if (EngTrModel_DW.is_active_c1_EngTrModel == 0U) {
 8001cbc:	4b74      	ldr	r3, [pc, #464]	; (8001e90 <EngTrModel_step+0x238>)
 8001cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d11a      	bne.n	8001cfc <EngTrModel_step+0xa4>
    EngTrModel_DW.is_active_c1_EngTrModel = 1U;
 8001cc6:	4b72      	ldr	r3, [pc, #456]	; (8001e90 <EngTrModel_step+0x238>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2020 	strb.w	r2, [r3, #32]
    EngTrModel_DW.is_active_gear_state = 1U;
 8001cce:	4b70      	ldr	r3, [pc, #448]	; (8001e90 <EngTrModel_step+0x238>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 8001cd6:	4b6e      	ldr	r3, [pc, #440]	; (8001e90 <EngTrModel_step+0x238>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    EngTrModel_B.Gear = 1.0;
 8001cde:	496d      	ldr	r1, [pc, #436]	; (8001e94 <EngTrModel_step+0x23c>)
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b6d      	ldr	r3, [pc, #436]	; (8001e9c <EngTrModel_step+0x244>)
 8001ce6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    EngTrModel_DW.is_active_selection_state = 1U;
 8001cea:	4b69      	ldr	r3, [pc, #420]	; (8001e90 <EngTrModel_step+0x238>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <EngTrModel_step+0x238>)
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001cfa:	e0e4      	b.n	8001ec6 <EngTrModel_step+0x26e>
  } else {
    if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001cfc:	4b64      	ldr	r3, [pc, #400]	; (8001e90 <EngTrModel_step+0x238>)
 8001cfe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <EngTrModel_step+0xb6>
      EngTrModel_gear_state(&sfEvent);
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fe05 	bl	8001918 <EngTrModel_gear_state>
    }

    if (EngTrModel_DW.is_active_selection_state != 0U) {
 8001d0e:	4b60      	ldr	r3, [pc, #384]	; (8001e90 <EngTrModel_step+0x238>)
 8001d10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80d6 	beq.w	8001ec6 <EngTrModel_step+0x26e>
      /* Outputs for Function Call SubSystem: '<S2>/ComputeThreshold' */
      /* Lookup_n-D: '<S5>/InterpDown' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpDown = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001d1a:	4b61      	ldr	r3, [pc, #388]	; (8001ea0 <EngTrModel_step+0x248>)
 8001d1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d20:	4b5c      	ldr	r3, [pc, #368]	; (8001e94 <EngTrModel_step+0x23c>)
 8001d22:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001d26:	2406      	movs	r4, #6
 8001d28:	9404      	str	r4, [sp, #16]
 8001d2a:	4c5e      	ldr	r4, [pc, #376]	; (8001ea4 <EngTrModel_step+0x24c>)
 8001d2c:	9403      	str	r4, [sp, #12]
 8001d2e:	4c5e      	ldr	r4, [pc, #376]	; (8001ea8 <EngTrModel_step+0x250>)
 8001d30:	9402      	str	r4, [sp, #8]
 8001d32:	4c5e      	ldr	r4, [pc, #376]	; (8001eac <EngTrModel_step+0x254>)
 8001d34:	9401      	str	r4, [sp, #4]
 8001d36:	4c5e      	ldr	r4, [pc, #376]	; (8001eb0 <EngTrModel_step+0x258>)
 8001d38:	9400      	str	r4, [sp, #0]
 8001d3a:	f7ff fb0d 	bl	8001358 <look2_binlxpw>
 8001d3e:	e9c7 0104 	strd	r0, r1, [r7, #16]
        EngTrModel_ConstP.InterpDown_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* Lookup_n-D: '<S5>/InterpUp' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpUp = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001d42:	4b57      	ldr	r3, [pc, #348]	; (8001ea0 <EngTrModel_step+0x248>)
 8001d44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d48:	4b52      	ldr	r3, [pc, #328]	; (8001e94 <EngTrModel_step+0x23c>)
 8001d4a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001d4e:	2406      	movs	r4, #6
 8001d50:	9404      	str	r4, [sp, #16]
 8001d52:	4c54      	ldr	r4, [pc, #336]	; (8001ea4 <EngTrModel_step+0x24c>)
 8001d54:	9403      	str	r4, [sp, #12]
 8001d56:	4c57      	ldr	r4, [pc, #348]	; (8001eb4 <EngTrModel_step+0x25c>)
 8001d58:	9402      	str	r4, [sp, #8]
 8001d5a:	4c54      	ldr	r4, [pc, #336]	; (8001eac <EngTrModel_step+0x254>)
 8001d5c:	9401      	str	r4, [sp, #4]
 8001d5e:	4c56      	ldr	r4, [pc, #344]	; (8001eb8 <EngTrModel_step+0x260>)
 8001d60:	9400      	str	r4, [sp, #0]
 8001d62:	f7ff faf9 	bl	8001358 <look2_binlxpw>
 8001d66:	e9c7 0102 	strd	r0, r1, [r7, #8]
        EngTrModel_ConstP.InterpUp_bp01Data, EngTrModel_ConstP.pooled2,
        EngTrModel_ConstP.InterpUp_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* End of Outputs for SubSystem: '<S2>/ComputeThreshold' */
      switch (EngTrModel_DW.is_selection_state) {
 8001d6a:	4b49      	ldr	r3, [pc, #292]	; (8001e90 <EngTrModel_step+0x238>)
 8001d6c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d05a      	beq.n	8001e2a <EngTrModel_step+0x1d2>
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	f300 80a6 	bgt.w	8001ec6 <EngTrModel_step+0x26e>
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d002      	beq.n	8001d84 <EngTrModel_step+0x12c>
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d02e      	beq.n	8001de0 <EngTrModel_step+0x188>
 8001d82:	e0a0      	b.n	8001ec6 <EngTrModel_step+0x26e>
       case EngTrModel_IN_downshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001d84:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <EngTrModel_step+0x238>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d919      	bls.n	8001dc0 <EngTrModel_step+0x168>
            (EngTrModel_B.VehicleSpeed <= InterpDown)) {
 8001d8c:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <EngTrModel_step+0x23c>)
 8001d8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001d92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d96:	f7fe fe35 	bl	8000a04 <__aeabi_dcmpge>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00f      	beq.n	8001dc0 <EngTrModel_step+0x168>
          sfEvent = EngTrModel_event_DOWN;
 8001da0:	2300      	movs	r3, #0
 8001da2:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001da4:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <EngTrModel_step+0x238>)
 8001da6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <EngTrModel_step+0x15e>
            EngTrModel_gear_state(&sfEvent);
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fdb1 	bl	8001918 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001db6:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <EngTrModel_step+0x238>)
 8001db8:	2202      	movs	r2, #2
 8001dba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001dbe:	e082      	b.n	8001ec6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
 8001dc0:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <EngTrModel_step+0x23c>)
 8001dc2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001dc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dca:	f7fe fe07 	bl	80009dc <__aeabi_dcmplt>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d100      	bne.n	8001dd6 <EngTrModel_step+0x17e>
        break;
 8001dd4:	e077      	b.n	8001ec6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <EngTrModel_step+0x238>)
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001dde:	e072      	b.n	8001ec6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_steady_state:
        if (EngTrModel_B.VehicleSpeed > InterpUp) {
 8001de0:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <EngTrModel_step+0x23c>)
 8001de2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001de6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dea:	f7fe fdf7 	bl	80009dc <__aeabi_dcmplt>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <EngTrModel_step+0x1ac>
          EngTrModel_DW.is_selection_state = EngTrModel_IN_upshifting;
 8001df4:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <EngTrModel_step+0x238>)
 8001df6:	2203      	movs	r2, #3
 8001df8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          EngTrModel_DW.temporalCounter_i1 = 0U;
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <EngTrModel_step+0x238>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
            EngTrModel_DW.temporalCounter_i1 = 0U;
          }
        }
        break;
 8001e02:	e060      	b.n	8001ec6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <EngTrModel_step+0x23c>)
 8001e06:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e0e:	f7fe fe03 	bl	8000a18 <__aeabi_dcmpgt>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d100      	bne.n	8001e1a <EngTrModel_step+0x1c2>
        break;
 8001e18:	e055      	b.n	8001ec6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <EngTrModel_step+0x238>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            EngTrModel_DW.temporalCounter_i1 = 0U;
 8001e22:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <EngTrModel_step+0x238>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	61da      	str	r2, [r3, #28]
        break;
 8001e28:	e04d      	b.n	8001ec6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_upshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <EngTrModel_step+0x238>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d919      	bls.n	8001e66 <EngTrModel_step+0x20e>
            (EngTrModel_B.VehicleSpeed >= InterpUp)) {
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <EngTrModel_step+0x23c>)
 8001e34:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001e38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e3c:	f7fe fdd8 	bl	80009f0 <__aeabi_dcmple>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00f      	beq.n	8001e66 <EngTrModel_step+0x20e>
          sfEvent = EngTrModel_event_UP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <EngTrModel_step+0x238>)
 8001e4c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <EngTrModel_step+0x204>
            EngTrModel_gear_state(&sfEvent);
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fd5e 	bl	8001918 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <EngTrModel_step+0x238>)
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001e64:	e02e      	b.n	8001ec4 <EngTrModel_step+0x26c>
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <EngTrModel_step+0x23c>)
 8001e68:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e70:	f7fe fdd2 	bl	8000a18 <__aeabi_dcmpgt>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d120      	bne.n	8001ebc <EngTrModel_step+0x264>
        break;
 8001e7a:	e023      	b.n	8001ec4 <EngTrModel_step+0x26c>
 8001e7c:	f3af 8000 	nop.w
 8001e80:	54442d18 	.word	0x54442d18
 8001e84:	401921fb 	.word	0x401921fb
 8001e88:	745d1746 	.word	0x745d1746
 8001e8c:	3f8745d1 	.word	0x3f8745d1
 8001e90:	20000250 	.word	0x20000250
 8001e94:	20000220 	.word	0x20000220
 8001e98:	20000288 	.word	0x20000288
 8001e9c:	3ff00000 	.word	0x3ff00000
 8001ea0:	20000278 	.word	0x20000278
 8001ea4:	0800a7c0 	.word	0x0800a7c0
 8001ea8:	08009f90 	.word	0x08009f90
 8001eac:	0800a080 	.word	0x0800a080
 8001eb0:	0800a050 	.word	0x0800a050
 8001eb4:	0800a0a0 	.word	0x0800a0a0
 8001eb8:	0800a160 	.word	0x0800a160
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001ebc:	4b84      	ldr	r3, [pc, #528]	; (80020d0 <EngTrModel_step+0x478>)
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001ec4:	bf00      	nop
  }

  /* End of Chart: '<Root>/ShiftLogic' */

  /* Lookup_n-D: '<S7>/Table' */
  InterpDown = look1_binlxpw(EngTrModel_B.Gear, EngTrModel_ConstP.pooled2,
 8001ec6:	4b83      	ldr	r3, [pc, #524]	; (80020d4 <EngTrModel_step+0x47c>)
 8001ec8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ecc:	2303      	movs	r3, #3
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	4b81      	ldr	r3, [pc, #516]	; (80020d8 <EngTrModel_step+0x480>)
 8001ed2:	4a82      	ldr	r2, [pc, #520]	; (80020dc <EngTrModel_step+0x484>)
 8001ed4:	f7ff fc3c 	bl	8001750 <look1_binlxpw>
 8001ed8:	e9c7 0104 	strd	r0, r1, [r7, #16]
    EngTrModel_ConstP.Table_tableData, 3U);

  /* Gain: '<S4>/FinalDriveRatio2' incorporates:
   *  DiscreteIntegrator: '<S4>/WheelSpeed'
   */
  EngTrModel_B.TransmissionRPM = 3.23 * EngTrModel_DW.WheelSpeed_DSTATE;
 8001edc:	4b7c      	ldr	r3, [pc, #496]	; (80020d0 <EngTrModel_step+0x478>)
 8001ede:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ee2:	a375      	add	r3, pc, #468	; (adr r3, 80020b8 <EngTrModel_step+0x460>)
 8001ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee8:	f7fe fb06 	bl	80004f8 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4978      	ldr	r1, [pc, #480]	; (80020d4 <EngTrModel_step+0x47c>)
 8001ef2:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Product: '<S6>/SpeedRatio' incorporates:
   *  Product: '<S7>/Product1'
   */
  if( EngTrModel_B.EngineRPM != 0)
 8001ef6:	4b77      	ldr	r3, [pc, #476]	; (80020d4 <EngTrModel_step+0x47c>)
 8001ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	f7fe fd60 	bl	80009c8 <__aeabi_dcmpeq>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d114      	bne.n	8001f38 <EngTrModel_step+0x2e0>
    InterpUp = InterpDown * EngTrModel_B.TransmissionRPM / EngTrModel_B.EngineRPM;
 8001f0e:	4b71      	ldr	r3, [pc, #452]	; (80020d4 <EngTrModel_step+0x47c>)
 8001f10:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001f14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f18:	f7fe faee 	bl	80004f8 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <EngTrModel_step+0x47c>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	f7fe fc0f 	bl	800074c <__aeabi_ddiv>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f36:	e005      	b.n	8001f44 <EngTrModel_step+0x2ec>
  else
    InterpUp = 0.0;
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Fcn: '<S6>/Impeller' incorporates:
   *  Lookup_n-D: '<S6>/FactorK'
   *  Product: '<S6>/Quotient'
   */
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001f44:	4b63      	ldr	r3, [pc, #396]	; (80020d4 <EngTrModel_step+0x47c>)
 8001f46:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001f4a:	2314      	movs	r3, #20
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	4b64      	ldr	r3, [pc, #400]	; (80020e0 <EngTrModel_step+0x488>)
 8001f50:	4a64      	ldr	r2, [pc, #400]	; (80020e4 <EngTrModel_step+0x48c>)
 8001f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f56:	f7ff fbfb 	bl	8001750 <look1_binlxpw>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe fbf3 	bl	800074c <__aeabi_ddiv>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f76:	f7ff fd55 	bl	8001a24 <rt_powd_snf>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4955      	ldr	r1, [pc, #340]	; (80020d4 <EngTrModel_step+0x47c>)
 8001f80:	e9c1 2306 	strd	r2, r3, [r1, #24]
                  EngTrModel_ConstP.FactorK_tableData, 20U), 2.0);

  /* Lookup_n-D: '<S6>/TorqueRatio' */
  InterpUp = look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001f84:	2314      	movs	r3, #20
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	4b57      	ldr	r3, [pc, #348]	; (80020e8 <EngTrModel_step+0x490>)
 8001f8a:	4a56      	ldr	r2, [pc, #344]	; (80020e4 <EngTrModel_step+0x48c>)
 8001f8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f90:	f7ff fbde 	bl	8001750 <look1_binlxpw>
 8001f94:	e9c7 0102 	strd	r0, r1, [r7, #8]
    EngTrModel_ConstP.TorqueRatio_tableData, 20U);

  /* Product: '<S7>/Product' incorporates:
   *  Product: '<S6>/Turbine'
   */
  EngTrModel_B.OutputTorque = EngTrModel_B.ImpellerTorque * InterpUp *
 8001f98:	4b4e      	ldr	r3, [pc, #312]	; (80020d4 <EngTrModel_step+0x47c>)
 8001f9a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fa2:	f7fe faa9 	bl	80004f8 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
 8001fae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fb2:	f7fe faa1 	bl	80004f8 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4946      	ldr	r1, [pc, #280]	; (80020d4 <EngTrModel_step+0x47c>)
 8001fbc:	e9c1 2308 	strd	r2, r3, [r1, #32]
    InterpDown;

  /* Outport: '<Root>/Gear' */
  EngTrModel_Y.Gear = EngTrModel_B.Gear;
 8001fc0:	4b44      	ldr	r3, [pc, #272]	; (80020d4 <EngTrModel_step+0x47c>)
 8001fc2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001fc6:	4949      	ldr	r1, [pc, #292]	; (80020ec <EngTrModel_step+0x494>)
 8001fc8:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Outport: '<Root>/VehicleSpeed' */
  EngTrModel_Y.VehicleSpeed = EngTrModel_B.VehicleSpeed;
 8001fcc:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <EngTrModel_step+0x47c>)
 8001fce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001fd2:	4946      	ldr	r1, [pc, #280]	; (80020ec <EngTrModel_step+0x494>)
 8001fd4:	e9c1 2302 	strd	r2, r3, [r1, #8]
   *  Gain: '<S1>/EnginePlusImpellerInertia'
   *  Inport: '<Root>/Throttle'
   *  Lookup_n-D: '<S1>/EngineTorque'
   *  Sum: '<S1>/Sum'
   */
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001fd8:	4b45      	ldr	r3, [pc, #276]	; (80020f0 <EngTrModel_step+0x498>)
 8001fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fde:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <EngTrModel_step+0x47c>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	240a      	movs	r4, #10
 8001fe6:	9404      	str	r4, [sp, #16]
 8001fe8:	4c42      	ldr	r4, [pc, #264]	; (80020f4 <EngTrModel_step+0x49c>)
 8001fea:	9403      	str	r4, [sp, #12]
 8001fec:	4c42      	ldr	r4, [pc, #264]	; (80020f8 <EngTrModel_step+0x4a0>)
 8001fee:	9402      	str	r4, [sp, #8]
 8001ff0:	4c42      	ldr	r4, [pc, #264]	; (80020fc <EngTrModel_step+0x4a4>)
 8001ff2:	9401      	str	r4, [sp, #4]
 8001ff4:	4c42      	ldr	r4, [pc, #264]	; (8002100 <EngTrModel_step+0x4a8>)
 8001ff6:	9400      	str	r4, [sp, #0]
 8001ff8:	f7ff f9ae 	bl	8001358 <look2_binlxpw>
    (EngTrModel_U.Throttle, EngTrModel_B.EngineRPM,
     EngTrModel_ConstP.EngineTorque_bp01Data,
     EngTrModel_ConstP.EngineTorque_bp02Data,
     EngTrModel_ConstP.EngineTorque_tableData,
     EngTrModel_ConstP.EngineTorque_maxIndex, 10U) - EngTrModel_B.ImpellerTorque)
 8001ffc:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <EngTrModel_step+0x47c>)
 8001ffe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002002:	f7fe f8c1 	bl	8000188 <__aeabi_dsub>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
    * 45.472138452209627 * 0.04;
 800200e:	a32c      	add	r3, pc, #176	; (adr r3, 80020c0 <EngTrModel_step+0x468>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe fa70 	bl	80004f8 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	a329      	add	r3, pc, #164	; (adr r3, 80020c8 <EngTrModel_step+0x470>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	f7fe fa67 	bl	80004f8 <__aeabi_dmul>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <EngTrModel_step+0x478>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	f7fe f8a8 	bl	800018c <__adddf3>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4923      	ldr	r1, [pc, #140]	; (80020d0 <EngTrModel_step+0x478>)
 8002042:	e9c1 2300 	strd	r2, r3, [r1]

  /* Signum: '<S4>/Sign' */
  if (EngTrModel_B.VehicleSpeed < 0.0) {
 8002046:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <EngTrModel_step+0x47c>)
 8002048:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	f7fe fcc2 	bl	80009dc <__aeabi_dcmplt>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <EngTrModel_step+0x412>
    InterpDown = -1.0;
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	4b28      	ldr	r3, [pc, #160]	; (8002104 <EngTrModel_step+0x4ac>)
 8002064:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002068:	e055      	b.n	8002116 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed > 0.0) {
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <EngTrModel_step+0x47c>)
 800206c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	f7fe fcce 	bl	8000a18 <__aeabi_dcmpgt>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <EngTrModel_step+0x436>
    InterpDown = 1.0;
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <EngTrModel_step+0x4b0>)
 8002088:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800208c:	e043      	b.n	8002116 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed == 0.0) {
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <EngTrModel_step+0x47c>)
 8002090:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	f7fe fc94 	bl	80009c8 <__aeabi_dcmpeq>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d032      	beq.n	800210c <EngTrModel_step+0x4b4>
    InterpDown = 0.0;
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80020b2:	e030      	b.n	8002116 <EngTrModel_step+0x4be>
 80020b4:	f3af 8000 	nop.w
 80020b8:	3d70a3d7 	.word	0x3d70a3d7
 80020bc:	4009d70a 	.word	0x4009d70a
 80020c0:	0865b653 	.word	0x0865b653
 80020c4:	4046bc6f 	.word	0x4046bc6f
 80020c8:	47ae147b 	.word	0x47ae147b
 80020cc:	3fa47ae1 	.word	0x3fa47ae1
 80020d0:	20000250 	.word	0x20000250
 80020d4:	20000220 	.word	0x20000220
 80020d8:	0800a5a8 	.word	0x0800a5a8
 80020dc:	0800a080 	.word	0x0800a080
 80020e0:	0800a5c8 	.word	0x0800a5c8
 80020e4:	0800a670 	.word	0x0800a670
 80020e8:	0800a718 	.word	0x0800a718
 80020ec:	20000288 	.word	0x20000288
 80020f0:	20000278 	.word	0x20000278
 80020f4:	0800a7c8 	.word	0x0800a7c8
 80020f8:	0800a190 	.word	0x0800a190
 80020fc:	0800a550 	.word	0x0800a550
 8002100:	0800a500 	.word	0x0800a500
 8002104:	bff00000 	.word	0xbff00000
 8002108:	3ff00000 	.word	0x3ff00000
  } else {
    InterpDown = (rtNaN);
 800210c:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <EngTrModel_step+0x5a0>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	e9c7 2304 	strd	r2, r3, [r7, #16]
   *  Inport: '<Root>/Brake'
   *  Product: '<S4>/SignedLoad'
   *  Sum: '<S4>/Sum'
   *  Sum: '<S4>/Sum1'
   */
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <EngTrModel_step+0x5a4>)
 8002118:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800211c:	a32e      	add	r3, pc, #184	; (adr r3, 80021d8 <EngTrModel_step+0x580>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	f7fe f9e9 	bl	80004f8 <__aeabi_dmul>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4614      	mov	r4, r2
 800212c:	461d      	mov	r5, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 800212e:	4b33      	ldr	r3, [pc, #204]	; (80021fc <EngTrModel_step+0x5a4>)
 8002130:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800213c:	f7ff fc72 	bl	8001a24 <rt_powd_snf>
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8002140:	a327      	add	r3, pc, #156	; (adr r3, 80021e0 <EngTrModel_step+0x588>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f7fe f9d7 	bl	80004f8 <__aeabi_dmul>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <EngTrModel_step+0x5a8>)
 8002158:	f7fe f818 	bl	800018c <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <EngTrModel_step+0x5ac>)
 8002166:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 800216a:	f7fe f80f 	bl	800018c <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8002176:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800217a:	f7fe f9bd 	bl	80004f8 <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8002182:	4620      	mov	r0, r4
 8002184:	4629      	mov	r1, r5
 8002186:	f7fd ffff 	bl	8000188 <__aeabi_dsub>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8002192:	a315      	add	r3, pc, #84	; (adr r3, 80021e8 <EngTrModel_step+0x590>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe f9ae 	bl	80004f8 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	a312      	add	r3, pc, #72	; (adr r3, 80021f0 <EngTrModel_step+0x598>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe f9a5 	bl	80004f8 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <EngTrModel_step+0x5b0>)
 80021b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021bc:	f7fd ffe6 	bl	800018c <__adddf3>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4910      	ldr	r1, [pc, #64]	; (8002208 <EngTrModel_step+0x5b0>)
 80021c6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bdb0      	pop	{r4, r5, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	f3af 8000 	nop.w
 80021d8:	3d70a3d7 	.word	0x3d70a3d7
 80021dc:	4009d70a 	.word	0x4009d70a
 80021e0:	47ae147b 	.word	0x47ae147b
 80021e4:	3f947ae1 	.word	0x3f947ae1
 80021e8:	b3bfa695 	.word	0xb3bfa695
 80021ec:	3fb52ad1 	.word	0x3fb52ad1
 80021f0:	47ae147b 	.word	0x47ae147b
 80021f4:	3fa47ae1 	.word	0x3fa47ae1
 80021f8:	200006e8 	.word	0x200006e8
 80021fc:	20000220 	.word	0x20000220
 8002200:	40440000 	.word	0x40440000
 8002204:	20000278 	.word	0x20000278
 8002208:	20000250 	.word	0x20000250

0800220c <EngTrModel_initialize>:

/* Model initialize function */
void EngTrModel_initialize(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8002210:	2008      	movs	r0, #8
 8002212:	f001 ff09 	bl	8004028 <rt_InitInfAndNaN>
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <USER_GPIO_Define>:
#include "main.h"

// Define a pin

void USER_GPIO_Define( uint8_t port, uint8_t pin, uint8_t direction, uint8_t option )
{
 800221c:	b490      	push	{r4, r7}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	4604      	mov	r4, r0
 8002224:	4608      	mov	r0, r1
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	4623      	mov	r3, r4
 800222c:	71fb      	strb	r3, [r7, #7]
 800222e:	4603      	mov	r3, r0
 8002230:	71bb      	strb	r3, [r7, #6]
 8002232:	460b      	mov	r3, r1
 8002234:	717b      	strb	r3, [r7, #5]
 8002236:	4613      	mov	r3, r2
 8002238:	713b      	strb	r3, [r7, #4]
  volatile uint32_t * CR;
  uint8_t actual_pin = pin;
 800223a:	79bb      	ldrb	r3, [r7, #6]
 800223c:	72fb      	strb	r3, [r7, #11]
  uint8_t offset = 0x00;
 800223e:	2300      	movs	r3, #0
 8002240:	72bb      	strb	r3, [r7, #10]

  if( pin > 7 ) {
 8002242:	79bb      	ldrb	r3, [r7, #6]
 8002244:	2b07      	cmp	r3, #7
 8002246:	d904      	bls.n	8002252 <USER_GPIO_Define+0x36>
      actual_pin -= 8;
 8002248:	7afb      	ldrb	r3, [r7, #11]
 800224a:	3b08      	subs	r3, #8
 800224c:	72fb      	strb	r3, [r7, #11]
      offset = 0x01;
 800224e:	2301      	movs	r3, #1
 8002250:	72bb      	strb	r3, [r7, #10]
  }

  if( port == 0 )
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10d      	bne.n	8002274 <USER_GPIO_Define+0x58>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPAEN;			// IO port A clock enable
 8002258:	4b49      	ldr	r3, [pc, #292]	; (8002380 <USER_GPIO_Define+0x164>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4a48      	ldr	r2, [pc, #288]	; (8002380 <USER_GPIO_Define+0x164>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOA->CRL + offset);
 8002264:	7abb      	ldrb	r3, [r7, #10]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800226c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	e064      	b.n	800233e <USER_GPIO_Define+0x122>
  }
  else if( port == 1 )
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d10d      	bne.n	8002296 <USER_GPIO_Define+0x7a>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPBEN;			// IO port B clock enable
 800227a:	4b41      	ldr	r3, [pc, #260]	; (8002380 <USER_GPIO_Define+0x164>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	4a40      	ldr	r2, [pc, #256]	; (8002380 <USER_GPIO_Define+0x164>)
 8002280:	f043 0308 	orr.w	r3, r3, #8
 8002284:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOB->CRL + offset);
 8002286:	7abb      	ldrb	r3, [r7, #10]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800228e:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e053      	b.n	800233e <USER_GPIO_Define+0x122>
  }
  else if ( port == 2 )
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d10d      	bne.n	80022b8 <USER_GPIO_Define+0x9c>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPCEN;			// IO port C clock enable
 800229c:	4b38      	ldr	r3, [pc, #224]	; (8002380 <USER_GPIO_Define+0x164>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a37      	ldr	r2, [pc, #220]	; (8002380 <USER_GPIO_Define+0x164>)
 80022a2:	f043 0310 	orr.w	r3, r3, #16
 80022a6:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOC->CRL + offset);
 80022a8:	7abb      	ldrb	r3, [r7, #10]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022b0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e042      	b.n	800233e <USER_GPIO_Define+0x122>
  }
  else if ( port == 3 )
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d10d      	bne.n	80022da <USER_GPIO_Define+0xbe>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPDEN;			// IO port D clock enable
 80022be:	4b30      	ldr	r3, [pc, #192]	; (8002380 <USER_GPIO_Define+0x164>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	4a2f      	ldr	r2, [pc, #188]	; (8002380 <USER_GPIO_Define+0x164>)
 80022c4:	f043 0320 	orr.w	r3, r3, #32
 80022c8:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOD->CRL + offset);
 80022ca:	7abb      	ldrb	r3, [r7, #10]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022d2:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e031      	b.n	800233e <USER_GPIO_Define+0x122>
  }
  else if( port == 4 )
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d10d      	bne.n	80022fc <USER_GPIO_Define+0xe0>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPEEN;			// IO port E clock enable
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <USER_GPIO_Define+0x164>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4a26      	ldr	r2, [pc, #152]	; (8002380 <USER_GPIO_Define+0x164>)
 80022e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ea:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOE->CRL + offset);
 80022ec:	7abb      	ldrb	r3, [r7, #10]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022f4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	e020      	b.n	800233e <USER_GPIO_Define+0x122>
  }
  else if( port == 5 )
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d10d      	bne.n	800231e <USER_GPIO_Define+0x102>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPFEN;			// IO port F clock enable
 8002302:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <USER_GPIO_Define+0x164>)
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <USER_GPIO_Define+0x164>)
 8002308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230c:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOF->CRL + offset);
 800230e:	7abb      	ldrb	r3, [r7, #10]
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002316:	f503 338e 	add.w	r3, r3, #72704	; 0x11c00
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e00f      	b.n	800233e <USER_GPIO_Define+0x122>
  }
  else if( port == 6 )
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	2b06      	cmp	r3, #6
 8002322:	d10c      	bne.n	800233e <USER_GPIO_Define+0x122>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPGEN;			// IO port G clock enable
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <USER_GPIO_Define+0x164>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a15      	ldr	r2, [pc, #84]	; (8002380 <USER_GPIO_Define+0x164>)
 800232a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232e:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOG->CRL + offset);
 8002330:	7abb      	ldrb	r3, [r7, #10]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002338:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800233c:	60fb      	str	r3, [r7, #12]
  }

  *CR	&=	~( 0xF << (actual_pin * 4) );			// Reset the target pin
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	7afa      	ldrb	r2, [r7, #11]
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	210f      	movs	r1, #15
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	43d2      	mvns	r2, r2
 800234e:	401a      	ands	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]
  *CR	|=	( direction << (actual_pin * 4) )		// Set up the direction and the option for the pin
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	7979      	ldrb	r1, [r7, #5]
 800235a:	7afa      	ldrb	r2, [r7, #11]
 800235c:	0092      	lsls	r2, r2, #2
 800235e:	4091      	lsls	r1, r2
	|	( option << (actual_pin * 4 + 2) );
 8002360:	7938      	ldrb	r0, [r7, #4]
 8002362:	7afa      	ldrb	r2, [r7, #11]
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	3202      	adds	r2, #2
 8002368:	fa00 f202 	lsl.w	r2, r0, r2
 800236c:	430a      	orrs	r2, r1
  *CR	|=	( direction << (actual_pin * 4) )		// Set up the direction and the option for the pin
 800236e:	431a      	orrs	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	601a      	str	r2, [r3, #0]
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bc90      	pop	{r4, r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000

08002384 <USER_GPIO_Write>:
}

// Write a pin

void USER_GPIO_Write(uint8_t port, uint8_t pin, uint8_t state)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
 800238e:	460b      	mov	r3, r1
 8002390:	71bb      	strb	r3, [r7, #6]
 8002392:	4613      	mov	r3, r2
 8002394:	717b      	strb	r3, [r7, #5]
  volatile uint32_t * ODR;

  if( port == 0 ) {
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <USER_GPIO_Write+0x1e>
      ODR = (volatile uint32_t *) (&GPIOA->ODR);
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <USER_GPIO_Write+0x9c>)
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e022      	b.n	80023e8 <USER_GPIO_Write+0x64>
  }
  else if( port == 1 )
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d102      	bne.n	80023ae <USER_GPIO_Write+0x2a>
  {
      ODR = (volatile uint32_t *) (&GPIOB->ODR);
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <USER_GPIO_Write+0xa0>)
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e01c      	b.n	80023e8 <USER_GPIO_Write+0x64>
  }
  else if( port == 2 )
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d102      	bne.n	80023ba <USER_GPIO_Write+0x36>
  {
      ODR = (volatile uint32_t *) (&GPIOC->ODR);
 80023b4:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <USER_GPIO_Write+0xa4>)
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e016      	b.n	80023e8 <USER_GPIO_Write+0x64>
  }
  else if( port == 3 )
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d102      	bne.n	80023c6 <USER_GPIO_Write+0x42>
  {
      ODR = (volatile uint32_t *) (&GPIOD->ODR);
 80023c0:	4b1a      	ldr	r3, [pc, #104]	; (800242c <USER_GPIO_Write+0xa8>)
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e010      	b.n	80023e8 <USER_GPIO_Write+0x64>
  }
  else if( port == 4 )
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d102      	bne.n	80023d2 <USER_GPIO_Write+0x4e>
  {
      ODR = (volatile uint32_t *) (&GPIOE->ODR);
 80023cc:	4b18      	ldr	r3, [pc, #96]	; (8002430 <USER_GPIO_Write+0xac>)
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	e00a      	b.n	80023e8 <USER_GPIO_Write+0x64>
  }
  else if( port == 5 )
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d102      	bne.n	80023de <USER_GPIO_Write+0x5a>
  {
      ODR = (volatile uint32_t *) (&GPIOF->ODR);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <USER_GPIO_Write+0xb0>)
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e004      	b.n	80023e8 <USER_GPIO_Write+0x64>
  }
  else if( port == 6 )
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b06      	cmp	r3, #6
 80023e2:	d101      	bne.n	80023e8 <USER_GPIO_Write+0x64>
  {
      ODR = (volatile uint32_t *) (&GPIOG->ODR);
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <USER_GPIO_Write+0xb4>)
 80023e6:	60fb      	str	r3, [r7, #12]
  }

  state ? ( *ODR |= ( state << pin ) ) : ( *ODR &= ~( 1 << pin ) );
 80023e8:	797b      	ldrb	r3, [r7, #5]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <USER_GPIO_Write+0x7e>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	7979      	ldrb	r1, [r7, #5]
 80023f4:	79ba      	ldrb	r2, [r7, #6]
 80023f6:	fa01 f202 	lsl.w	r2, r1, r2
 80023fa:	431a      	orrs	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	e009      	b.n	8002416 <USER_GPIO_Write+0x92>
  state ? ( *ODR |= ( state << pin ) ) : ( *ODR &= ~( 1 << pin ) );
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	79ba      	ldrb	r2, [r7, #6]
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f202 	lsl.w	r2, r1, r2
 800240e:	43d2      	mvns	r2, r2
 8002410:	401a      	ands	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	4001080c 	.word	0x4001080c
 8002424:	40010c0c 	.word	0x40010c0c
 8002428:	4001100c 	.word	0x4001100c
 800242c:	4001140c 	.word	0x4001140c
 8002430:	4001180c 	.word	0x4001180c
 8002434:	40011c0c 	.word	0x40011c0c
 8002438:	4001200c 	.word	0x4001200c

0800243c <USER_I2C_Init>:
#include "GPIO.h"

// Initialize I2C

void USER_I2C_Init( uint8_t I2C, uint8_t speed_mode )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	460a      	mov	r2, r1
 8002446:	71fb      	strb	r3, [r7, #7]
 8002448:	4613      	mov	r3, r2
 800244a:	71bb      	strb	r3, [r7, #6]
  RCC->APB2ENR		|=	RCC_APB2ENR_AFIOEN;	// Alternate function I/O clock enable
 800244c:	4b35      	ldr	r3, [pc, #212]	; (8002524 <USER_I2C_Init+0xe8>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a34      	ldr	r2, [pc, #208]	; (8002524 <USER_I2C_Init+0xe8>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6193      	str	r3, [r2, #24]

  if( I2C == 0 )
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d12d      	bne.n	80024ba <USER_I2C_Init+0x7e>
  {
      RCC->APB1ENR 	|=	RCC_APB1ENR_I2C1EN;	// I2C1 clock enable
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <USER_I2C_Init+0xe8>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a30      	ldr	r2, [pc, #192]	; (8002524 <USER_I2C_Init+0xe8>)
 8002464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002468:	61d3      	str	r3, [r2, #28]

      USER_GPIO_Define( PORTB, 6, OUT_50, OUT_AF_OD );	// PB6 I2C1_SCL
 800246a:	2303      	movs	r3, #3
 800246c:	2203      	movs	r2, #3
 800246e:	2106      	movs	r1, #6
 8002470:	2001      	movs	r0, #1
 8002472:	f7ff fed3 	bl	800221c <USER_GPIO_Define>
      USER_GPIO_Define( PORTB, 7, OUT_50, OUT_AF_OD );	// PB7 I2C1_SDA
 8002476:	2303      	movs	r3, #3
 8002478:	2203      	movs	r2, #3
 800247a:	2107      	movs	r1, #7
 800247c:	2001      	movs	r0, #1
 800247e:	f7ff fecd 	bl	800221c <USER_GPIO_Define>

      I2C1->CR1		|=	I2C_CR1_SWRST;		// Software reset
 8002482:	4b29      	ldr	r3, [pc, #164]	; (8002528 <USER_I2C_Init+0xec>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a28      	ldr	r2, [pc, #160]	; (8002528 <USER_I2C_Init+0xec>)
 8002488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248c:	6013      	str	r3, [r2, #0]
      I2C1->CR1		&=	~I2C_CR1_SWRST;
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <USER_I2C_Init+0xec>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a25      	ldr	r2, [pc, #148]	; (8002528 <USER_I2C_Init+0xec>)
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	041b      	lsls	r3, r3, #16
 8002498:	6013      	str	r3, [r2, #0]

      I2C1->CR2		=	I2C_CR2_FREQ;		// Peripheral clock frequency of 8 MHz
 800249a:	4b23      	ldr	r3, [pc, #140]	; (8002528 <USER_I2C_Init+0xec>)
 800249c:	2208      	movs	r2, #8
 800249e:	605a      	str	r2, [r3, #4]

      I2C1->CCR		=	speed_mode;		// Clock control register in Fm/Sm mode
 80024a0:	4a21      	ldr	r2, [pc, #132]	; (8002528 <USER_I2C_Init+0xec>)
 80024a2:	79bb      	ldrb	r3, [r7, #6]
 80024a4:	61d3      	str	r3, [r2, #28]
      I2C1->TRISE	=	I2C_TRISE_TRISE;	// Maximum rise time in Fm/Sm mode (Master mode)
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <USER_I2C_Init+0xec>)
 80024a8:	2209      	movs	r2, #9
 80024aa:	621a      	str	r2, [r3, #32]

      I2C1->CR1		|=	I2C_CR1_PE;		// Peripheral enable
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <USER_I2C_Init+0xec>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <USER_I2C_Init+0xec>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6013      	str	r3, [r2, #0]
      I2C2->TRISE	=	I2C_TRISE_TRISE;

      I2C2->CR1		|=	I2C_CR1_PE;
  }

}
 80024b8:	e02f      	b.n	800251a <USER_I2C_Init+0xde>
  else if( I2C == 1 )
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d12c      	bne.n	800251a <USER_I2C_Init+0xde>
      RCC->APB1ENR 	|=	RCC_APB1ENR_I2C2EN;	// I2C2 clock enable
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <USER_I2C_Init+0xe8>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	4a17      	ldr	r2, [pc, #92]	; (8002524 <USER_I2C_Init+0xe8>)
 80024c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024ca:	61d3      	str	r3, [r2, #28]
      USER_GPIO_Define( PORTB, 10, OUT_50, OUT_AF_OD );	// PB10 I2C2_SCL
 80024cc:	2303      	movs	r3, #3
 80024ce:	2203      	movs	r2, #3
 80024d0:	210a      	movs	r1, #10
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7ff fea2 	bl	800221c <USER_GPIO_Define>
      USER_GPIO_Define( PORTB, 11, OUT_50, OUT_AF_OD );	// PB11 I2C2_SDA
 80024d8:	2303      	movs	r3, #3
 80024da:	2203      	movs	r2, #3
 80024dc:	210b      	movs	r1, #11
 80024de:	2001      	movs	r0, #1
 80024e0:	f7ff fe9c 	bl	800221c <USER_GPIO_Define>
      I2C2->CR1		|=	I2C_CR1_SWRST;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <USER_I2C_Init+0xf0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a10      	ldr	r2, [pc, #64]	; (800252c <USER_I2C_Init+0xf0>)
 80024ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ee:	6013      	str	r3, [r2, #0]
      I2C2->CR1		&=	~I2C_CR1_SWRST;
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <USER_I2C_Init+0xf0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <USER_I2C_Init+0xf0>)
 80024f6:	0c1b      	lsrs	r3, r3, #16
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	6013      	str	r3, [r2, #0]
      I2C2->CR2		=	I2C_CR2_FREQ;
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <USER_I2C_Init+0xf0>)
 80024fe:	2208      	movs	r2, #8
 8002500:	605a      	str	r2, [r3, #4]
      I2C2->CCR		=	speed_mode;
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <USER_I2C_Init+0xf0>)
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	61d3      	str	r3, [r2, #28]
      I2C2->TRISE	=	I2C_TRISE_TRISE;
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <USER_I2C_Init+0xf0>)
 800250a:	2209      	movs	r2, #9
 800250c:	621a      	str	r2, [r3, #32]
      I2C2->CR1		|=	I2C_CR1_PE;
 800250e:	4b07      	ldr	r3, [pc, #28]	; (800252c <USER_I2C_Init+0xf0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a06      	ldr	r2, [pc, #24]	; (800252c <USER_I2C_Init+0xf0>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6013      	str	r3, [r2, #0]
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	40005400 	.word	0x40005400
 800252c:	40005800 	.word	0x40005800

08002530 <USER_I2C_Start>:

// Start I2C

void USER_I2C_Start( uint8_t I2C )
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]

  if( I2C == 0 )
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10d      	bne.n	800255c <USER_I2C_Start+0x2c>
  {
      I2C1->CR1		|=	I2C_CR1_START;		// Start generation
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <USER_I2C_Start+0x58>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a10      	ldr	r2, [pc, #64]	; (8002588 <USER_I2C_Start+0x58>)
 8002546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254a:	6013      	str	r3, [r2, #0]
      while (! ( I2C1->SR1 & I2C_SR1_SB) );		// Set when a Start condition generated
 800254c:	bf00      	nop
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <USER_I2C_Start+0x58>)
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f9      	beq.n	800254e <USER_I2C_Start+0x1e>
  {
      I2C2->CR1		|=	I2C_CR1_START;
      while (! ( I2C2->SR1 & I2C_SR1_SB ) );
  }

}
 800255a:	e00f      	b.n	800257c <USER_I2C_Start+0x4c>
  else if ( I2C == 1 )
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d10c      	bne.n	800257c <USER_I2C_Start+0x4c>
      I2C2->CR1		|=	I2C_CR1_START;
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <USER_I2C_Start+0x5c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <USER_I2C_Start+0x5c>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6013      	str	r3, [r2, #0]
      while (! ( I2C2->SR1 & I2C_SR1_SB ) );
 800256e:	bf00      	nop
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <USER_I2C_Start+0x5c>)
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f9      	beq.n	8002570 <USER_I2C_Start+0x40>
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40005400 	.word	0x40005400
 800258c:	40005800 	.word	0x40005800

08002590 <USER_I2C_Address>:

// Send the address + R or W via I2C

void USER_I2C_Address( uint8_t I2C, uint8_t address, uint8_t RW )
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
 800259a:	460b      	mov	r3, r1
 800259c:	71bb      	strb	r3, [r7, #6]
 800259e:	4613      	mov	r3, r2
 80025a0:	717b      	strb	r3, [r7, #5]
  volatile uint16_t tmp;

  if( I2C == 0 )
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d122      	bne.n	80025ee <USER_I2C_Address+0x5e>
  {
      I2C1->DR = ( address | RW );
 80025a8:	79ba      	ldrb	r2, [r7, #6]
 80025aa:	797b      	ldrb	r3, [r7, #5]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <USER_I2C_Address+0xbc>)
 80025b2:	611a      	str	r2, [r3, #16]

      while( !( I2C1->SR1 & I2C_SR1_ADDR ) );		// ADDR flag is zero while address is mismatched or not received
 80025b4:	bf00      	nop
 80025b6:	4b25      	ldr	r3, [pc, #148]	; (800264c <USER_I2C_Address+0xbc>)
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f9      	beq.n	80025b6 <USER_I2C_Address+0x26>
      while ( I2C1->SR1 & I2C_SR1_ADDR )		// ADDR flag is set when received address matched
 80025c2:	e00d      	b.n	80025e0 <USER_I2C_Address+0x50>
      {
	  tmp = I2C1->SR1;				// Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag
 80025c4:	4b21      	ldr	r3, [pc, #132]	; (800264c <USER_I2C_Address+0xbc>)
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	81fb      	strh	r3, [r7, #14]
	  tmp = I2C1->SR2;
 80025cc:	4b1f      	ldr	r3, [pc, #124]	; (800264c <USER_I2C_Address+0xbc>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	81fb      	strh	r3, [r7, #14]

	  if( !( I2C1->SR1 & I2C_SR1_ADDR ) )
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <USER_I2C_Address+0xbc>)
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d02c      	beq.n	800263a <USER_I2C_Address+0xaa>
      while ( I2C1->SR1 & I2C_SR1_ADDR )		// ADDR flag is set when received address matched
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <USER_I2C_Address+0xbc>)
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1eb      	bne.n	80025c4 <USER_I2C_Address+0x34>
	      break;
	  }
      }
  }

}
 80025ec:	e028      	b.n	8002640 <USER_I2C_Address+0xb0>
  else if ( I2C == 1 )
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d125      	bne.n	8002640 <USER_I2C_Address+0xb0>
      I2C2->DR = ( address | RW );
 80025f4:	79ba      	ldrb	r2, [r7, #6]
 80025f6:	797b      	ldrb	r3, [r7, #5]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	4b14      	ldr	r3, [pc, #80]	; (8002650 <USER_I2C_Address+0xc0>)
 80025fe:	611a      	str	r2, [r3, #16]
      while( !( I2C2->SR1 & I2C_SR1_ADDR ) );
 8002600:	bf00      	nop
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <USER_I2C_Address+0xc0>)
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f9      	beq.n	8002602 <USER_I2C_Address+0x72>
      while ( I2C2->SR1 & I2C_SR1_ADDR )
 800260e:	e00d      	b.n	800262c <USER_I2C_Address+0x9c>
	  tmp = I2C2->SR1;
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <USER_I2C_Address+0xc0>)
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	b29b      	uxth	r3, r3
 8002616:	81fb      	strh	r3, [r7, #14]
	  tmp = I2C2->SR2;
 8002618:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <USER_I2C_Address+0xc0>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	b29b      	uxth	r3, r3
 800261e:	81fb      	strh	r3, [r7, #14]
	  if( !( I2C2->SR1 & I2C_SR1_ADDR ) )
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <USER_I2C_Address+0xc0>)
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <USER_I2C_Address+0xae>
      while ( I2C2->SR1 & I2C_SR1_ADDR )
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <USER_I2C_Address+0xc0>)
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1eb      	bne.n	8002610 <USER_I2C_Address+0x80>
}
 8002638:	e002      	b.n	8002640 <USER_I2C_Address+0xb0>
	      break;
 800263a:	bf00      	nop
 800263c:	e000      	b.n	8002640 <USER_I2C_Address+0xb0>
	      break;
 800263e:	bf00      	nop
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40005400 	.word	0x40005400
 8002650:	40005800 	.word	0x40005800

08002654 <USER_I2C_Data>:

// Send data via I2C

void USER_I2C_Data( uint8_t I2C, uint8_t data )
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	460a      	mov	r2, r1
 800265e:	71fb      	strb	r3, [r7, #7]
 8002660:	4613      	mov	r3, r2
 8002662:	71bb      	strb	r3, [r7, #6]

  if( I2C == 0 )
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d111      	bne.n	800268e <USER_I2C_Data+0x3a>
  {
      while( !( I2C1->SR1 & I2C_SR1_TXE ) );		// While data register not empty
 800266a:	bf00      	nop
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <USER_I2C_Data+0x6c>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f9      	beq.n	800266c <USER_I2C_Data+0x18>
      I2C1->DR = data;
 8002678:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <USER_I2C_Data+0x6c>)
 800267a:	79bb      	ldrb	r3, [r7, #6]
 800267c:	6113      	str	r3, [r2, #16]
      while( !( I2C1->SR1 & I2C_SR1_TXE ) );
 800267e:	bf00      	nop
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <USER_I2C_Data+0x6c>)
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f9      	beq.n	8002680 <USER_I2C_Data+0x2c>
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );		// While data register not empty
      I2C2->DR = data;
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );
  }

}
 800268c:	e013      	b.n	80026b6 <USER_I2C_Data+0x62>
  else if ( I2C == 1 )
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d110      	bne.n	80026b6 <USER_I2C_Data+0x62>
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );		// While data register not empty
 8002694:	bf00      	nop
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <USER_I2C_Data+0x70>)
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f9      	beq.n	8002696 <USER_I2C_Data+0x42>
      I2C2->DR = data;
 80026a2:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <USER_I2C_Data+0x70>)
 80026a4:	79bb      	ldrb	r3, [r7, #6]
 80026a6:	6113      	str	r3, [r2, #16]
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );
 80026a8:	bf00      	nop
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <USER_I2C_Data+0x70>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f9      	beq.n	80026aa <USER_I2C_Data+0x56>
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	40005400 	.word	0x40005400
 80026c4:	40005800 	.word	0x40005800

080026c8 <USER_I2C_Stop>:

// Stop I2C

void USER_I2C_Stop( uint8_t I2C )
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t tmp;

  if( I2C == 0 )
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10e      	bne.n	80026f6 <USER_I2C_Stop+0x2e>
  {
      tmp = I2C1->SR1;
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <USER_I2C_Stop+0x5c>)
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	81fb      	strh	r3, [r7, #14]
      tmp = I2C1->SR2;
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <USER_I2C_Stop+0x5c>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	81fb      	strh	r3, [r7, #14]
      I2C1->CR1		|=	I2C_CR1_STOP;		// Stop generation
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <USER_I2C_Stop+0x5c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <USER_I2C_Stop+0x5c>)
 80026ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f2:	6013      	str	r3, [r2, #0]
      tmp = I2C2->SR1;
      tmp = I2C2->SR2;
      I2C2->CR1		|=	I2C_CR1_STOP;		// Stop generation
  }

}
 80026f4:	e010      	b.n	8002718 <USER_I2C_Stop+0x50>
  else if ( I2C == 1 )
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d10d      	bne.n	8002718 <USER_I2C_Stop+0x50>
      tmp = I2C2->SR1;
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <USER_I2C_Stop+0x60>)
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	b29b      	uxth	r3, r3
 8002702:	81fb      	strh	r3, [r7, #14]
      tmp = I2C2->SR2;
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <USER_I2C_Stop+0x60>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	b29b      	uxth	r3, r3
 800270a:	81fb      	strh	r3, [r7, #14]
      I2C2->CR1		|=	I2C_CR1_STOP;		// Stop generation
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <USER_I2C_Stop+0x60>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a05      	ldr	r2, [pc, #20]	; (8002728 <USER_I2C_Stop+0x60>)
 8002712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002716:	6013      	str	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40005400 	.word	0x40005400
 8002728:	40005800 	.word	0x40005800

0800272c <USER_OLED_Command_1_Byte>:
#include "SYSTICK.h"

// Send a 1 byte command to the OLED

void USER_OLED_Command_1_Byte( uint8_t I2C, uint8_t data )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	460a      	mov	r2, r1
 8002736:	71fb      	strb	r3, [r7, #7]
 8002738:	4613      	mov	r3, r2
 800273a:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Start( I2C );
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fef6 	bl	8002530 <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	2200      	movs	r2, #0
 8002748:	2178      	movs	r1, #120	; 0x78
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ff20 	bl	8002590 <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x00 );				// Control function for a command
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff7d 	bl	8002654 <USER_I2C_Data>
  USER_I2C_Data( I2C, data );
 800275a:	79ba      	ldrb	r2, [r7, #6]
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff77 	bl	8002654 <USER_I2C_Data>

  USER_I2C_Stop( I2C );
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ffad 	bl	80026c8 <USER_I2C_Stop>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <USER_OLED_Command_2_Byte>:

// Send a 2 byte command to the OLED

void USER_OLED_Command_2_Byte( uint8_t I2C, uint8_t data[] )
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	6039      	str	r1, [r7, #0]
 8002780:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]

  USER_I2C_Start( I2C );
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fed1 	bl	8002530 <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	2200      	movs	r2, #0
 8002792:	2178      	movs	r1, #120	; 0x78
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fefb 	bl	8002590 <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x00 );	// Control function for a command
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff58 	bl	8002654 <USER_I2C_Data>

  for(i = 0; i < 2; i++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	e00b      	b.n	80027c2 <USER_OLED_Command_2_Byte+0x4c>
  {
      USER_I2C_Data( I2C, data[i] );
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff4c 	bl	8002654 <USER_I2C_Data>
  for(i = 0; i < 2; i++)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	3301      	adds	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d9f0      	bls.n	80027aa <USER_OLED_Command_2_Byte+0x34>
  }

  USER_I2C_Stop( I2C );
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff7c 	bl	80026c8 <USER_I2C_Stop>
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <USER_OLED_Init>:

// Initialize OLED

void USER_OLED_Init( uint8_t I2C, uint8_t screen_size )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	460a      	mov	r2, r1
 80027e2:	71fb      	strb	r3, [r7, #7]
 80027e4:	4613      	mov	r3, r2
 80027e6:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Init( I2C, I2C_FM );
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	212d      	movs	r1, #45	; 0x2d
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fe25 	bl	800243c <USER_I2C_Init>

  uint8_t cmd_1[] = {0xA8, 0x3F};
 80027f2:	f643 73a8 	movw	r3, #16296	; 0x3fa8
 80027f6:	84bb      	strh	r3, [r7, #36]	; 0x24
  USER_OLED_Command_2_Byte( I2C, cmd_1 );
 80027f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ffb8 	bl	8002776 <USER_OLED_Command_2_Byte>

  uint8_t cmd_2[] = {0xD3, 0x00};
 8002806:	23d3      	movs	r3, #211	; 0xd3
 8002808:	843b      	strh	r3, [r7, #32]
  USER_OLED_Command_2_Byte( I2C, cmd_2 );
 800280a:	f107 0220 	add.w	r2, r7, #32
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ffaf 	bl	8002776 <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0x40 );
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	2140      	movs	r1, #64	; 0x40
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff85 	bl	800272c <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xA1 );
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	21a1      	movs	r1, #161	; 0xa1
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff ff80 	bl	800272c <USER_OLED_Command_1_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xC8 );
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	21c8      	movs	r1, #200	; 0xc8
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff7b 	bl	800272c <USER_OLED_Command_1_Byte>

  uint8_t cmd_3[] = {0xDA, screen_size};
 8002836:	23da      	movs	r3, #218	; 0xda
 8002838:	773b      	strb	r3, [r7, #28]
 800283a:	79bb      	ldrb	r3, [r7, #6]
 800283c:	777b      	strb	r3, [r7, #29]
  USER_OLED_Command_2_Byte( I2C, cmd_3 );
 800283e:	f107 021c 	add.w	r2, r7, #28
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff95 	bl	8002776 <USER_OLED_Command_2_Byte>

  uint8_t cmd_4[] = {0x81, 0x7F};
 800284c:	f647 7381 	movw	r3, #32641	; 0x7f81
 8002850:	833b      	strh	r3, [r7, #24]
  USER_OLED_Command_2_Byte( I2C, cmd_4 );
 8002852:	f107 0218 	add.w	r2, r7, #24
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff8b 	bl	8002776 <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xA4 );
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	21a4      	movs	r1, #164	; 0xa4
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff61 	bl	800272c <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xA6 );
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	21a6      	movs	r1, #166	; 0xa6
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff5c 	bl	800272c <USER_OLED_Command_1_Byte>

  uint8_t cmd_5[] = {0xD5, 0x80};
 8002874:	f248 03d5 	movw	r3, #32981	; 0x80d5
 8002878:	82bb      	strh	r3, [r7, #20]
  USER_OLED_Command_2_Byte( I2C, cmd_5 );
 800287a:	f107 0214 	add.w	r2, r7, #20
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff77 	bl	8002776 <USER_OLED_Command_2_Byte>

  uint8_t cmd_6[] = {0x8D, 0x14};
 8002888:	f241 438d 	movw	r3, #5261	; 0x148d
 800288c:	823b      	strh	r3, [r7, #16]
  USER_OLED_Command_2_Byte( I2C, cmd_6 );
 800288e:	f107 0210 	add.w	r2, r7, #16
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff6d 	bl	8002776 <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xAF );
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	21af      	movs	r1, #175	; 0xaf
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff43 	bl	800272c <USER_OLED_Command_1_Byte>

  uint8_t cmd_7[] = {0x20, 0x10};
 80028a6:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80028aa:	81bb      	strh	r3, [r7, #12]
  USER_OLED_Command_2_Byte( I2C, cmd_7 );
 80028ac:	f107 020c 	add.w	r2, r7, #12
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff5e 	bl	8002776 <USER_OLED_Command_2_Byte>
}
 80028ba:	bf00      	nop
 80028bc:	3728      	adds	r7, #40	; 0x28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <USER_OLED_Init_64>:
}

// Initialize 128x64 OLED

void USER_OLED_Init_64( uint8_t I2C )
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	71fb      	strb	r3, [r7, #7]
  USER_OLED_Init(I2C, 0x12);
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	2112      	movs	r1, #18
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff81 	bl	80027d8 <USER_OLED_Init>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <USER_OLED_Data>:

// Send data to OLED

void USER_OLED_Data( uint8_t I2C, uint8_t data )
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	460a      	mov	r2, r1
 80028e8:	71fb      	strb	r3, [r7, #7]
 80028ea:	4613      	mov	r3, r2
 80028ec:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Start( I2C );
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fe1d 	bl	8002530 <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	2200      	movs	r2, #0
 80028fa:	2178      	movs	r1, #120	; 0x78
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fe47 	bl	8002590 <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x40 );				// Control function for data
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	2140      	movs	r1, #64	; 0x40
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fea4 	bl	8002654 <USER_I2C_Data>
  USER_I2C_Data( I2C, data );
 800290c:	79ba      	ldrb	r2, [r7, #6]
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fe9e 	bl	8002654 <USER_I2C_Data>

  USER_I2C_Stop( I2C );
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fed4 	bl	80026c8 <USER_I2C_Stop>
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <USER_OLED_Position>:

// Send screen position to OLED

void USER_OLED_Position( uint8_t I2C, uint8_t x_pos, uint8_t y_pos )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
 8002932:	460b      	mov	r3, r1
 8002934:	71bb      	strb	r3, [r7, #6]
 8002936:	4613      	mov	r3, r2
 8002938:	717b      	strb	r3, [r7, #5]
  USER_OLED_Command_1_Byte( I2C, 0x00 + ( 0x0F & x_pos ) );
 800293a:	79bb      	ldrb	r3, [r7, #6]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	b2da      	uxtb	r2, r3
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fef0 	bl	800272c <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0x10 + (0x0F & ( x_pos >> 4 ) ) );
 800294c:	79bb      	ldrb	r3, [r7, #6]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	b2db      	uxtb	r3, r3
 8002952:	3310      	adds	r3, #16
 8002954:	b2da      	uxtb	r2, r3
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fee6 	bl	800272c <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xB0 + y_pos );
 8002960:	797b      	ldrb	r3, [r7, #5]
 8002962:	3b50      	subs	r3, #80	; 0x50
 8002964:	b2da      	uxtb	r2, r3
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fede 	bl	800272c <USER_OLED_Command_1_Byte>
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <USER_OLED_Blank>:

// Clear OLED screen

void USER_OLED_Blank( uint8_t I2C )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j;

  USER_OLED_Position( I2C, 0, 0 );
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	2200      	movs	r2, #0
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ffcd 	bl	8002928 <USER_OLED_Position>

  for(i = 0; i < OLED_SCREEN_ROWS; i++)
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	e011      	b.n	80029b8 <USER_OLED_Blank+0x40>
  {
    for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 8002994:	2300      	movs	r3, #0
 8002996:	73bb      	strb	r3, [r7, #14]
 8002998:	e007      	b.n	80029aa <USER_OLED_Blank+0x32>
    {
	USER_OLED_Data( I2C, 0x0 );
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff9d 	bl	80028de <USER_OLED_Data>
    for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 80029a4:	7bbb      	ldrb	r3, [r7, #14]
 80029a6:	3301      	adds	r3, #1
 80029a8:	73bb      	strb	r3, [r7, #14]
 80029aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	daf3      	bge.n	800299a <USER_OLED_Blank+0x22>
  for(i = 0; i < OLED_SCREEN_ROWS; i++)
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	3301      	adds	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b07      	cmp	r3, #7
 80029bc:	d9ea      	bls.n	8002994 <USER_OLED_Blank+0x1c>
    }
  }
}
 80029be:	bf00      	nop
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <USER_OLED_Print>:

// Print a string on the OLED screen

void USER_OLED_Print( uint8_t I2C, char str[] )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0, j;
 80029d4:	2300      	movs	r3, #0
 80029d6:	73fb      	strb	r3, [r7, #15]

  while( str[i] )
 80029d8:	e01e      	b.n	8002a18 <USER_OLED_Print+0x50>
  {
      for(j = 0; j < 5; j++)
 80029da:	2300      	movs	r3, #0
 80029dc:	73bb      	strb	r3, [r7, #14]
 80029de:	e015      	b.n	8002a0c <USER_OLED_Print+0x44>
      {
	   USER_OLED_Data(I2C, ASCII[str[i] - 32][j]);
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	f1a3 0220 	sub.w	r2, r3, #32
 80029ec:	7bb9      	ldrb	r1, [r7, #14]
 80029ee:	4810      	ldr	r0, [pc, #64]	; (8002a30 <USER_OLED_Print+0x68>)
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	4403      	add	r3, r0
 80029f8:	440b      	add	r3, r1
 80029fa:	781a      	ldrb	r2, [r3, #0]
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff6c 	bl	80028de <USER_OLED_Data>
      for(j = 0; j < 5; j++)
 8002a06:	7bbb      	ldrb	r3, [r7, #14]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	73bb      	strb	r3, [r7, #14]
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d9e6      	bls.n	80029e0 <USER_OLED_Print+0x18>
      }

      i++;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	3301      	adds	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
  while( str[i] )
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1da      	bne.n	80029da <USER_OLED_Print+0x12>
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	0800a7d0 	.word	0x0800a7d0

08002a34 <USER_OLED_Message>:

// Print a message (a string with a defined position) on the OLED screen

void USER_OLED_Message( uint8_t I2C, char str[], uint8_t x_pos, uint8_t y_pos )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6039      	str	r1, [r7, #0]
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
 8002a44:	460b      	mov	r3, r1
 8002a46:	71bb      	strb	r3, [r7, #6]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	717b      	strb	r3, [r7, #5]
  USER_OLED_Position(I2C, x_pos, y_pos);
 8002a4c:	797a      	ldrb	r2, [r7, #5]
 8002a4e:	79b9      	ldrb	r1, [r7, #6]
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ff68 	bl	8002928 <USER_OLED_Position>
  USER_OLED_Print(I2C, str);
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	6839      	ldr	r1, [r7, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ffb3 	bl	80029c8 <USER_OLED_Print>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <USER_OLED_Clear_Buffer>:

// Clear OLED buffer

void USER_OLED_Clear_Buffer( char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  uint8_t i, j;

  for(i = 0; i < OLED_SCREEN_ROWS; i++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	e013      	b.n	8002aa0 <USER_OLED_Clear_Buffer+0x36>
  {
      for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73bb      	strb	r3, [r7, #14]
 8002a7c:	e009      	b.n	8002a92 <USER_OLED_Clear_Buffer+0x28>
      {
	  screen_buffer[i][j] = 0;
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	01db      	lsls	r3, r3, #7
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	441a      	add	r2, r3
 8002a86:	7bbb      	ldrb	r3, [r7, #14]
 8002a88:	2100      	movs	r1, #0
 8002a8a:	54d1      	strb	r1, [r2, r3]
      for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 8002a8c:	7bbb      	ldrb	r3, [r7, #14]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	73bb      	strb	r3, [r7, #14]
 8002a92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	daf1      	bge.n	8002a7e <USER_OLED_Clear_Buffer+0x14>
  for(i = 0; i < OLED_SCREEN_ROWS; i++)
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b07      	cmp	r3, #7
 8002aa4:	d9e8      	bls.n	8002a78 <USER_OLED_Clear_Buffer+0xe>
      }
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <USER_OLED_Update_Buffer>:

// Update OLED buffer

void USER_OLED_Update_Buffer( ImgType img, uint8_t img_num, char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	f107 0c18 	add.w	ip, r7, #24
 8002abe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint16_t x_dir, y_dir, end_x, end_y, cnt = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	80fb      	strh	r3, [r7, #6]

  if( ( img.width + img.x_pos ) > OLED_SCREEN_COLUMNS )
 8002ac6:	7e7b      	ldrb	r3, [r7, #25]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 8002ace:	4413      	add	r3, r2
 8002ad0:	2b80      	cmp	r3, #128	; 0x80
 8002ad2:	dd02      	ble.n	8002ada <USER_OLED_Update_Buffer+0x28>
  {
      end_x = OLED_SCREEN_COLUMNS - 1;
 8002ad4:	237f      	movs	r3, #127	; 0x7f
 8002ad6:	817b      	strh	r3, [r7, #10]
 8002ad8:	e009      	b.n	8002aee <USER_OLED_Update_Buffer+0x3c>
  }
  else
  {
      end_x = img.width + img.x_pos - 1;
 8002ada:	7e7b      	ldrb	r3, [r7, #25]
 8002adc:	b21a      	sxth	r2, r3
 8002ade:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 8002ae2:	b21b      	sxth	r3, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	b21b      	sxth	r3, r3
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	817b      	strh	r3, [r7, #10]
  }

  if( ( img.height + img.y_pos ) > OLED_SCREEN_ROWS )
 8002aee:	7e3b      	ldrb	r3, [r7, #24]
 8002af0:	461a      	mov	r2, r3
 8002af2:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 8002af6:	4413      	add	r3, r2
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	dd02      	ble.n	8002b02 <USER_OLED_Update_Buffer+0x50>
  {
      end_y = OLED_SCREEN_ROWS - 1;
 8002afc:	2307      	movs	r3, #7
 8002afe:	813b      	strh	r3, [r7, #8]
 8002b00:	e009      	b.n	8002b16 <USER_OLED_Update_Buffer+0x64>
  }
  else
  {
      end_y = img.height + img.y_pos - 1;
 8002b02:	7e3b      	ldrb	r3, [r7, #24]
 8002b04:	b21a      	sxth	r2, r3
 8002b06:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 8002b0a:	b21b      	sxth	r3, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	b21b      	sxth	r3, r3
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	813b      	strh	r3, [r7, #8]
  }

  for(y_dir = img.y_pos; y_dir <= end_y; y_dir++)
 8002b16:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 8002b1a:	81bb      	strh	r3, [r7, #12]
 8002b1c:	e02f      	b.n	8002b7e <USER_OLED_Update_Buffer+0xcc>
  {
    for (x_dir= img.x_pos; x_dir <= end_x; x_dir++)
 8002b1e:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 8002b22:	81fb      	strh	r3, [r7, #14]
 8002b24:	e024      	b.n	8002b70 <USER_OLED_Update_Buffer+0xbe>
    {
      cnt =( y_dir - img.y_pos ) * img.width + x_dir - img.x_pos;
 8002b26:	89bb      	ldrh	r3, [r7, #12]
 8002b28:	f997 2095 	ldrsb.w	r2, [r7, #149]	; 0x95
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	7e7a      	ldrb	r2, [r7, #25]
 8002b32:	b292      	uxth	r2, r2
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	89fb      	ldrh	r3, [r7, #14]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	80fb      	strh	r3, [r7, #6]
      screen_buffer[y_dir][x_dir] = img.image[img_num][cnt];
 8002b4a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	3318      	adds	r3, #24
 8002b52:	443b      	add	r3, r7
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	18d1      	adds	r1, r2, r3
 8002b5a:	89bb      	ldrh	r3, [r7, #12]
 8002b5c:	01db      	lsls	r3, r3, #7
 8002b5e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002b62:	441a      	add	r2, r3
 8002b64:	89fb      	ldrh	r3, [r7, #14]
 8002b66:	7809      	ldrb	r1, [r1, #0]
 8002b68:	54d1      	strb	r1, [r2, r3]
    for (x_dir= img.x_pos; x_dir <= end_x; x_dir++)
 8002b6a:	89fb      	ldrh	r3, [r7, #14]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	81fb      	strh	r3, [r7, #14]
 8002b70:	89fa      	ldrh	r2, [r7, #14]
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d9d6      	bls.n	8002b26 <USER_OLED_Update_Buffer+0x74>
  for(y_dir = img.y_pos; y_dir <= end_y; y_dir++)
 8002b78:	89bb      	ldrh	r3, [r7, #12]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	81bb      	strh	r3, [r7, #12]
 8002b7e:	89ba      	ldrh	r2, [r7, #12]
 8002b80:	893b      	ldrh	r3, [r7, #8]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d9cb      	bls.n	8002b1e <USER_OLED_Update_Buffer+0x6c>
    }
  }
}
 8002b86:	bf00      	nop
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	b004      	add	sp, #16
 8002b92:	4770      	bx	lr

08002b94 <USER_OLED_Print_Buffer>:
}

// Print OLED buffer

void USER_OLED_Print_Buffer( uint8_t I2C, char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	71fb      	strb	r3, [r7, #7]
  USER_OLED_Position( I2C, 0, 0 );
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff febe 	bl	8002928 <USER_OLED_Position>

  uint8_t i, j;

  for (i = 0; i < OLED_SCREEN_ROWS; i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	e017      	b.n	8002be2 <USER_OLED_Print_Buffer+0x4e>
  {
    for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73bb      	strb	r3, [r7, #14]
 8002bb6:	e00d      	b.n	8002bd4 <USER_OLED_Print_Buffer+0x40>
    {
	USER_OLED_Data( I2C, screen_buffer[i][j] );
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	01db      	lsls	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	441a      	add	r2, r3
 8002bc0:	7bbb      	ldrb	r3, [r7, #14]
 8002bc2:	5cd2      	ldrb	r2, [r2, r3]
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fe88 	bl	80028de <USER_OLED_Data>
    for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 8002bce:	7bbb      	ldrb	r3, [r7, #14]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	73bb      	strb	r3, [r7, #14]
 8002bd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	daed      	bge.n	8002bb8 <USER_OLED_Print_Buffer+0x24>
  for (i = 0; i < OLED_SCREEN_ROWS; i++)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	3301      	adds	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b07      	cmp	r3, #7
 8002be6:	d9e4      	bls.n	8002bb2 <USER_OLED_Print_Buffer+0x1e>
    }
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <USER_OLED_Update_Buffer_Bit>:

// Update OLED buffer bit

void USER_OLED_Update_Buffer_Bit( ImgType img, uint8_t img_num, char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	b480      	push	{r7}
 8002bf6:	b091      	sub	sp, #68	; 0x44
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8002bfe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int start_x, end_x, start_img_x, y_offset, bit_y_pos_byte, start_y, end_y, x_dir, y_dir,
  buffer_height = OLED_SCREEN_ROWS, buffer_width = OLED_SCREEN_COLUMNS, start_img_byte, start_img_x_tmp,
 8002c02:	2308      	movs	r3, #8
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	60fb      	str	r3, [r7, #12]

  // Working on the X axe

  // Find end_x

  if(img.x_pos > buffer_width)
 8002c0a:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4293      	cmp	r3, r2
 8002c14:	da02      	bge.n	8002c1c <USER_OLED_Update_Buffer_Bit+0x2a>
  {
    end_x = buffer_width;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c1a:	e009      	b.n	8002c30 <USER_OLED_Update_Buffer_Bit+0x3e>
  }
  else if(img.x_pos < 1)
 8002c1c:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	dc02      	bgt.n	8002c2a <USER_OLED_Update_Buffer_Bit+0x38>
  {
    end_x = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c28:	e002      	b.n	8002c30 <USER_OLED_Update_Buffer_Bit+0x3e>
  }
  else
  {
    end_x = img.x_pos;
 8002c2a:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  // Find start_x

  start_x = img.x_pos - img.width;
 8002c30:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 8002c34:	461a      	mov	r2, r3
 8002c36:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if(start_x > buffer_width)
 8002c3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	dd02      	ble.n	8002c4c <USER_OLED_Update_Buffer_Bit+0x5a>
  {
    start_x = buffer_width;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4a:	e004      	b.n	8002c56 <USER_OLED_Update_Buffer_Bit+0x64>
  }
  else if(start_x < 0)
 8002c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	da01      	bge.n	8002c56 <USER_OLED_Update_Buffer_Bit+0x64>
  {
    start_x = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  // Starting the picture x_location to start from

  start_img_x = img.width - img.x_pos;
 8002c56:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	637b      	str	r3, [r7, #52]	; 0x34

  if(start_img_x < 0)
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da01      	bge.n	8002c6e <USER_OLED_Update_Buffer_Bit+0x7c>
  {
      start_img_x = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Working on the Y axe

  y_offset = img.bit_y_pos % 8;
 8002c6e:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8002c72:	425a      	negs	r2, r3
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	f002 0207 	and.w	r2, r2, #7
 8002c7c:	bf58      	it	pl
 8002c7e:	4253      	negpl	r3, r2
 8002c80:	b21b      	sxth	r3, r3
 8002c82:	60bb      	str	r3, [r7, #8]
  bit_y_pos_byte = img.bit_y_pos / 8;
 8002c84:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	da00      	bge.n	8002c8e <USER_OLED_Update_Buffer_Bit+0x9c>
 8002c8c:	3307      	adds	r3, #7
 8002c8e:	10db      	asrs	r3, r3, #3
 8002c90:	b21b      	sxth	r3, r3
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30

  if(bit_y_pos_byte > buffer_height)
 8002c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	dd01      	ble.n	8002ca0 <USER_OLED_Update_Buffer_Bit+0xae>
  {
      bit_y_pos_byte = buffer_height;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  // Find end_y

  end_y = buffer_height - bit_y_pos_byte + 1;
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(end_y < 0)
 8002caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da02      	bge.n	8002cb6 <USER_OLED_Update_Buffer_Bit+0xc4>
  {
    end_y = buffer_height;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb4:	e002      	b.n	8002cbc <USER_OLED_Update_Buffer_Bit+0xca>
  }
  else
  {
    end_y = bit_y_pos_byte + 1;
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	3301      	adds	r3, #1
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  // Find start_y

  start_y = img.bit_y_pos / 8 - img.height;
 8002cbc:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da00      	bge.n	8002cc6 <USER_OLED_Update_Buffer_Bit+0xd4>
 8002cc4:	3307      	adds	r3, #7
 8002cc6:	10db      	asrs	r3, r3, #3
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if(start_y > buffer_height)
 8002cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	dd02      	ble.n	8002ce2 <USER_OLED_Update_Buffer_Bit+0xf0>
  {
    start_y = buffer_height;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce0:	e004      	b.n	8002cec <USER_OLED_Update_Buffer_Bit+0xfa>
  }
  else if(start_y < 0)
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	da01      	bge.n	8002cec <USER_OLED_Update_Buffer_Bit+0xfa>
  {
    start_y = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  // Starting the picture y_location to start form

  start_img_byte = img.height - bit_y_pos_byte - 1;
 8002cec:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]

  if(start_img_byte < 0)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	da02      	bge.n	8002d06 <USER_OLED_Update_Buffer_Bit+0x114>
  {
    start_img_byte = -1;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295
 8002d04:	61fb      	str	r3, [r7, #28]
  }

  // Running the display

  for(y_dir = start_y; y_dir < end_y; y_dir++)
 8002d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d08:	623b      	str	r3, [r7, #32]
 8002d0a:	e094      	b.n	8002e36 <USER_OLED_Update_Buffer_Bit+0x244>
  {
    start_img_x_tmp = start_img_x;
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0e:	61bb      	str	r3, [r7, #24]

    for(x_dir = start_x; x_dir < end_x; x_dir++)
 8002d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
 8002d14:	e084      	b.n	8002e20 <USER_OLED_Update_Buffer_Bit+0x22e>
    {
      if(start_img_byte == -1)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d102      	bne.n	8002d24 <USER_OLED_Update_Buffer_Bit+0x132>
      {
	cnt_1 = start_img_x;
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	e008      	b.n	8002d36 <USER_OLED_Update_Buffer_Bit+0x144>
      }
      else
      {
	cnt_1 = (start_img_byte) * img.width + start_img_x_tmp;
 8002d24:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002d28:	461a      	mov	r2, r3
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fb02 f303 	mul.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4413      	add	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
      }

      cnt_2 = (start_img_byte + 1) * img.width + start_img_x_tmp;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4413      	add	r3, r2
 8002d46:	607b      	str	r3, [r7, #4]
      start_img_x_tmp++;
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	61bb      	str	r3, [r7, #24]

      // Start drawing

      if(start_img_byte == -1)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d117      	bne.n	8002d86 <USER_OLED_Update_Buffer_Bit+0x194>
      {
	// Beginning of the picture

	screen_buffer[y_dir][x_dir] = ( img.image[img_num][cnt_2] << ( y_offset ) );
 8002d56:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	3348      	adds	r3, #72	; 0x48
 8002d5e:	443b      	add	r3, r7
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	fa02 f103 	lsl.w	r1, r2, r3
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	01db      	lsls	r3, r3, #7
 8002d74:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002d78:	441a      	add	r2, r3
 8002d7a:	b2c9      	uxtb	r1, r1
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	4413      	add	r3, r2
 8002d80:	460a      	mov	r2, r1
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e049      	b.n	8002e1a <USER_OLED_Update_Buffer_Bit+0x228>
      }
      else if(start_img_byte < img.height - 1)
 8002d86:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	da2a      	bge.n	8002de8 <USER_OLED_Update_Buffer_Bit+0x1f6>
      {
	  // Inside of the picture

	  screen_buffer[y_dir][x_dir] = ( img.image[img_num][cnt_2] << ( y_offset ) ) | ( img.image[img_num][cnt_1] >> ( 8-y_offset ) );
 8002d92:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	3348      	adds	r3, #72	; 0x48
 8002d9a:	443b      	add	r3, r7
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	b25a      	sxtb	r2, r3
 8002dae:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	3348      	adds	r3, #72	; 0x48
 8002db6:	443b      	add	r3, r7
 8002db8:	6859      	ldr	r1, [r3, #4]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	440b      	add	r3, r1
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f1c3 0308 	rsb	r3, r3, #8
 8002dc8:	fa41 f303 	asr.w	r3, r1, r3
 8002dcc:	b25b      	sxtb	r3, r3
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	b259      	sxtb	r1, r3
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	01db      	lsls	r3, r3, #7
 8002dd6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002dda:	441a      	add	r2, r3
 8002ddc:	b2c9      	uxtb	r1, r1
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	4413      	add	r3, r2
 8002de2:	460a      	mov	r2, r1
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	e018      	b.n	8002e1a <USER_OLED_Update_Buffer_Bit+0x228>
      }
      else
      {
	  screen_buffer[y_dir][x_dir] = ( img.image[img_num][cnt_1] >> ( 8 - y_offset ) );
 8002de8:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	3348      	adds	r3, #72	; 0x48
 8002df0:	443b      	add	r3, r7
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	4413      	add	r3, r2
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f1c3 0308 	rsb	r3, r3, #8
 8002e02:	fa42 f103 	asr.w	r1, r2, r3
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	01db      	lsls	r3, r3, #7
 8002e0a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002e0e:	441a      	add	r2, r3
 8002e10:	b2c9      	uxtb	r1, r1
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	4413      	add	r3, r2
 8002e16:	460a      	mov	r2, r1
 8002e18:	701a      	strb	r2, [r3, #0]
    for(x_dir = start_x; x_dir < end_x; x_dir++)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	429a      	cmp	r2, r3
 8002e26:	f6ff af76 	blt.w	8002d16 <USER_OLED_Update_Buffer_Bit+0x124>
      }
    }

    start_img_byte++;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
  for(y_dir = start_y; y_dir < end_y; y_dir++)
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	3301      	adds	r3, #1
 8002e34:	623b      	str	r3, [r7, #32]
 8002e36:	6a3a      	ldr	r2, [r7, #32]
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	f6ff af66 	blt.w	8002d0c <USER_OLED_Update_Buffer_Bit+0x11a>
  }
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3744      	adds	r7, #68	; 0x44
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	b004      	add	sp, #16
 8002e4c:	4770      	bx	lr
	...

08002e50 <USER_OLED_Animation>:

void USER_OLED_Animation( uint8_t I2C, char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 8002e56:	af1e      	add	r7, sp, #120	; 0x78
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002e5e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8002e62:	6019      	str	r1, [r3, #0]
 8002e64:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002e68:	f2a3 3389 	subw	r3, r3, #905	; 0x389
 8002e6c:	701a      	strb	r2, [r3, #0]
  uint16_t i = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8a7 338e 	strh.w	r3, [r7, #910]	; 0x38e

  ImgType JOHN_DEERE_LOGO_PIC = { .height = JOHN_DEERE_LOGO_ROWS, .width = JOHN_DEERE_LOGO_COLS, .x_pos = 0, .y_pos = 0, .bit_y_pos = 0 };
 8002e74:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f002 fc7a 	bl	8005776 <memset>
 8002e82:	4bd9      	ldr	r3, [pc, #868]	; (80031e8 <USER_OLED_Animation+0x398>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	f887 330c 	strb.w	r3, [r7, #780]	; 0x30c
 8002e8a:	4bd8      	ldr	r3, [pc, #864]	; (80031ec <USER_OLED_Animation+0x39c>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	f887 330d 	strb.w	r3, [r7, #781]	; 0x30d
  JOHN_DEERE_LOGO_PIC.image[0] = JOHN_DEERE_LOGO;
 8002e92:	4bd7      	ldr	r3, [pc, #860]	; (80031f0 <USER_OLED_Animation+0x3a0>)
 8002e94:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310

  ImgType JOHN_DEERE_LOGO_PIC_NO_TEXT = { .height = JOHN_DEERE_LOGO_NO_TEXT_ROWS, .width = JOHN_DEERE_LOGO_NO_TEXT_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 8002e98:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002e9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	f002 fc65 	bl	8005776 <memset>
 8002eac:	4bd1      	ldr	r3, [pc, #836]	; (80031f4 <USER_OLED_Animation+0x3a4>)
 8002eae:	781a      	ldrb	r2, [r3, #0]
 8002eb0:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002eb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	4bcf      	ldr	r3, [pc, #828]	; (80031f8 <USER_OLED_Animation+0x3a8>)
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ec6:	705a      	strb	r2, [r3, #1]
 8002ec8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002ecc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  JOHN_DEERE_LOGO_PIC_NO_TEXT.image[0] = JOHN_DEERE_LOGO_NO_TEXT;
 8002ed6:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ede:	4ac7      	ldr	r2, [pc, #796]	; (80031fc <USER_OLED_Animation+0x3ac>)
 8002ee0:	605a      	str	r2, [r3, #4]

  ImgType ITESM_LOGO_PIC = { .height = ITESM_LOGO_ROWS, .width = ITESM_LOGO_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 8002ee2:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002ee6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002eea:	4618      	mov	r0, r3
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	f002 fc40 	bl	8005776 <memset>
 8002ef6:	4bc2      	ldr	r3, [pc, #776]	; (8003200 <USER_OLED_Animation+0x3b0>)
 8002ef8:	781a      	ldrb	r2, [r3, #0]
 8002efa:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002efe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	4bbf      	ldr	r3, [pc, #764]	; (8003204 <USER_OLED_Animation+0x3b4>)
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002f0c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f10:	705a      	strb	r2, [r3, #1]
 8002f12:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002f16:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  ITESM_LOGO_PIC.image[0] = ITESM_LOGO;
 8002f20:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002f24:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f28:	4ab7      	ldr	r2, [pc, #732]	; (8003208 <USER_OLED_Animation+0x3b8>)
 8002f2a:	605a      	str	r2, [r3, #4]

  ImgType RASPBERRY_PI_LOGO_PIC = { .height = RASPBERRY_PI_LOGO_ROWS, .width = RASPBERRY_PI_LOGO_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 8002f2c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002f30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f34:	4618      	mov	r0, r3
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	f002 fc1b 	bl	8005776 <memset>
 8002f40:	4bb2      	ldr	r3, [pc, #712]	; (800320c <USER_OLED_Animation+0x3bc>)
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002f48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	4bb0      	ldr	r3, [pc, #704]	; (8003210 <USER_OLED_Animation+0x3c0>)
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002f56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f5a:	705a      	strb	r2, [r3, #1]
 8002f5c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002f60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  RASPBERRY_PI_LOGO_PIC.image[0] = RASPBERRY_PI_LOGO;
 8002f6a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002f6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f72:	4aa8      	ldr	r2, [pc, #672]	; (8003214 <USER_OLED_Animation+0x3c4>)
 8002f74:	605a      	str	r2, [r3, #4]

  ImgType LINUX_LOGO_PIC = { .height = LINUX_LOGO_ROWS, .width = LINUX_LOGO_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 8002f76:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002f7a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8002f7e:	4618      	mov	r0, r3
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	461a      	mov	r2, r3
 8002f84:	2100      	movs	r1, #0
 8002f86:	f002 fbf6 	bl	8005776 <memset>
 8002f8a:	4ba3      	ldr	r3, [pc, #652]	; (8003218 <USER_OLED_Animation+0x3c8>)
 8002f8c:	781a      	ldrb	r2, [r3, #0]
 8002f8e:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002f92:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	4ba0      	ldr	r3, [pc, #640]	; (800321c <USER_OLED_Animation+0x3cc>)
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002fa0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8002fa4:	705a      	strb	r2, [r3, #1]
 8002fa6:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002faa:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  LINUX_LOGO_PIC.image[0] = LINUX_LOGO;
 8002fb4:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002fb8:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8002fbc:	4a98      	ldr	r2, [pc, #608]	; (8003220 <USER_OLED_Animation+0x3d0>)
 8002fbe:	605a      	str	r2, [r3, #4]

  ImgType STM32_LOGO_PIC = { .height = STM32_LOGO_ROWS, .width = STM32_LOGO_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 8002fc0:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002fc4:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8002fc8:	4618      	mov	r0, r3
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2100      	movs	r1, #0
 8002fd0:	f002 fbd1 	bl	8005776 <memset>
 8002fd4:	4b93      	ldr	r3, [pc, #588]	; (8003224 <USER_OLED_Animation+0x3d4>)
 8002fd6:	781a      	ldrb	r2, [r3, #0]
 8002fd8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002fdc:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	4b91      	ldr	r3, [pc, #580]	; (8003228 <USER_OLED_Animation+0x3d8>)
 8002fe4:	781a      	ldrb	r2, [r3, #0]
 8002fe6:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002fea:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8002fee:	705a      	strb	r2, [r3, #1]
 8002ff0:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002ff4:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  STM32_LOGO_PIC.image[0] = STM32_LOGO;
 8002ffe:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003002:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8003006:	4a89      	ldr	r2, [pc, #548]	; (800322c <USER_OLED_Animation+0x3dc>)
 8003008:	605a      	str	r2, [r3, #4]

  ImgType TRACTOR_PIC = { .height = TRACTOR_ROWS, .width = TRACTOR_COLS, .x_pos = 0, .y_pos = 0, .bit_y_pos = 0 };
 800300a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800300e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8003012:	4618      	mov	r0, r3
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	461a      	mov	r2, r3
 8003018:	2100      	movs	r1, #0
 800301a:	f002 fbac 	bl	8005776 <memset>
 800301e:	4b84      	ldr	r3, [pc, #528]	; (8003230 <USER_OLED_Animation+0x3e0>)
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003026:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800302a:	701a      	strb	r2, [r3, #0]
 800302c:	4b81      	ldr	r3, [pc, #516]	; (8003234 <USER_OLED_Animation+0x3e4>)
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003034:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8003038:	705a      	strb	r2, [r3, #1]
  TRACTOR_PIC.image[0] = TRACTOR_1;
 800303a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800303e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8003042:	4a7d      	ldr	r2, [pc, #500]	; (8003238 <USER_OLED_Animation+0x3e8>)
 8003044:	605a      	str	r2, [r3, #4]
  TRACTOR_PIC.image[1] = TRACTOR_2;
 8003046:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800304a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800304e:	4a7b      	ldr	r2, [pc, #492]	; (800323c <USER_OLED_Animation+0x3ec>)
 8003050:	609a      	str	r2, [r3, #8]
  TRACTOR_PIC.image[2] = TRACTOR_3;
 8003052:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003056:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800305a:	4a79      	ldr	r2, [pc, #484]	; (8003240 <USER_OLED_Animation+0x3f0>)
 800305c:	60da      	str	r2, [r3, #12]
  TRACTOR_PIC.image[3] = TRACTOR_4;
 800305e:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003062:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8003066:	4a77      	ldr	r2, [pc, #476]	; (8003244 <USER_OLED_Animation+0x3f4>)
 8003068:	611a      	str	r2, [r3, #16]

  USER_OLED_Clear_Buffer( screen_buffer );
 800306a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800306e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	f7ff fcf9 	bl	8002a6a <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer( JOHN_DEERE_LOGO_PIC, 0, screen_buffer );
 8003078:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800307c:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	931d      	str	r3, [sp, #116]	; 0x74
 8003084:	2300      	movs	r3, #0
 8003086:	931c      	str	r3, [sp, #112]	; 0x70
 8003088:	4668      	mov	r0, sp
 800308a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800308e:	2270      	movs	r2, #112	; 0x70
 8003090:	4619      	mov	r1, r3
 8003092:	f002 fbfe 	bl	8005892 <memcpy>
 8003096:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800309a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800309c:	f7ff fd09 	bl	8002ab2 <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer( I2C, screen_buffer );
 80030a0:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80030a4:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80030a8:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80030ac:	f2a2 3289 	subw	r2, r2, #905	; 0x389
 80030b0:	7812      	ldrb	r2, [r2, #0]
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	4610      	mov	r0, r2
 80030b6:	f7ff fd6d 	bl	8002b94 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 1000 );
 80030ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030be:	f000 f9b7 	bl	8003430 <USER_SYSTICK_Delay_ms>

  USER_OLED_Clear_Buffer( screen_buffer );
 80030c2:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80030c6:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	f7ff fccd 	bl	8002a6a <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer( ITESM_LOGO_PIC, 0, screen_buffer );
 80030d0:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80030d4:	f5a3 74c2 	sub.w	r4, r3, #388	; 0x184
 80030d8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80030dc:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	931d      	str	r3, [sp, #116]	; 0x74
 80030e4:	2300      	movs	r3, #0
 80030e6:	931c      	str	r3, [sp, #112]	; 0x70
 80030e8:	4668      	mov	r0, sp
 80030ea:	f104 0310 	add.w	r3, r4, #16
 80030ee:	2270      	movs	r2, #112	; 0x70
 80030f0:	4619      	mov	r1, r3
 80030f2:	f002 fbce 	bl	8005892 <memcpy>
 80030f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030fa:	f7ff fcda 	bl	8002ab2 <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer( I2C, screen_buffer );
 80030fe:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003102:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8003106:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800310a:	f2a2 3289 	subw	r2, r2, #905	; 0x389
 800310e:	7812      	ldrb	r2, [r2, #0]
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	4610      	mov	r0, r2
 8003114:	f7ff fd3e 	bl	8002b94 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 1000 );
 8003118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800311c:	f000 f988 	bl	8003430 <USER_SYSTICK_Delay_ms>

  USER_OLED_Clear_Buffer( screen_buffer );
 8003120:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003124:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	f7ff fc9e 	bl	8002a6a <USER_OLED_Clear_Buffer>
  USER_OLED_Clear_Buffer( screen_buffer );
 800312e:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003132:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	f7ff fc97 	bl	8002a6a <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer( STM32_LOGO_PIC, 0, screen_buffer );
 800313c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003140:	f5a3 7441 	sub.w	r4, r3, #772	; 0x304
 8003144:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003148:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	931d      	str	r3, [sp, #116]	; 0x74
 8003150:	2300      	movs	r3, #0
 8003152:	931c      	str	r3, [sp, #112]	; 0x70
 8003154:	4668      	mov	r0, sp
 8003156:	f104 0310 	add.w	r3, r4, #16
 800315a:	2270      	movs	r2, #112	; 0x70
 800315c:	4619      	mov	r1, r3
 800315e:	f002 fb98 	bl	8005892 <memcpy>
 8003162:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003166:	f7ff fca4 	bl	8002ab2 <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer( I2C, screen_buffer );
 800316a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800316e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8003172:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8003176:	f2a2 3289 	subw	r2, r2, #905	; 0x389
 800317a:	7812      	ldrb	r2, [r2, #0]
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	4610      	mov	r0, r2
 8003180:	f7ff fd08 	bl	8002b94 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 1000 );
 8003184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003188:	f000 f952 	bl	8003430 <USER_SYSTICK_Delay_ms>

  USER_OLED_Clear_Buffer( screen_buffer );
 800318c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003190:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	f7ff fc68 	bl	8002a6a <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer( RASPBERRY_PI_LOGO_PIC, 0, screen_buffer );
 800319a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800319e:	f5a3 7401 	sub.w	r4, r3, #516	; 0x204
 80031a2:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80031a6:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	931d      	str	r3, [sp, #116]	; 0x74
 80031ae:	2300      	movs	r3, #0
 80031b0:	931c      	str	r3, [sp, #112]	; 0x70
 80031b2:	4668      	mov	r0, sp
 80031b4:	f104 0310 	add.w	r3, r4, #16
 80031b8:	2270      	movs	r2, #112	; 0x70
 80031ba:	4619      	mov	r1, r3
 80031bc:	f002 fb69 	bl	8005892 <memcpy>
 80031c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031c4:	f7ff fc75 	bl	8002ab2 <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer( I2C, screen_buffer );
 80031c8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80031cc:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80031d0:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80031d4:	f2a2 3289 	subw	r2, r2, #905	; 0x389
 80031d8:	7812      	ldrb	r2, [r2, #0]
 80031da:	6819      	ldr	r1, [r3, #0]
 80031dc:	4610      	mov	r0, r2
 80031de:	f7ff fcd9 	bl	8002b94 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 1000 );
 80031e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031e6:	e02f      	b.n	8003248 <USER_OLED_Animation+0x3f8>
 80031e8:	20000000 	.word	0x20000000
 80031ec:	20000001 	.word	0x20000001
 80031f0:	0800a9b0 	.word	0x0800a9b0
 80031f4:	20000002 	.word	0x20000002
 80031f8:	20000003 	.word	0x20000003
 80031fc:	0800adb0 	.word	0x0800adb0
 8003200:	20000004 	.word	0x20000004
 8003204:	20000005 	.word	0x20000005
 8003208:	0800aedc 	.word	0x0800aedc
 800320c:	2000000a 	.word	0x2000000a
 8003210:	2000000b 	.word	0x2000000b
 8003214:	0800b47c 	.word	0x0800b47c
 8003218:	20000006 	.word	0x20000006
 800321c:	20000007 	.word	0x20000007
 8003220:	0800b0bc 	.word	0x0800b0bc
 8003224:	20000008 	.word	0x20000008
 8003228:	20000009 	.word	0x20000009
 800322c:	0800b29c 	.word	0x0800b29c
 8003230:	2000000c 	.word	0x2000000c
 8003234:	2000000d 	.word	0x2000000d
 8003238:	0800b65c 	.word	0x0800b65c
 800323c:	0800b800 	.word	0x0800b800
 8003240:	0800b9a4 	.word	0x0800b9a4
 8003244:	0800bb48 	.word	0x0800bb48
 8003248:	f000 f8f2 	bl	8003430 <USER_SYSTICK_Delay_ms>

  USER_OLED_Clear_Buffer( screen_buffer );
 800324c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003250:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	f7ff fc08 	bl	8002a6a <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer( LINUX_LOGO_PIC, 0, screen_buffer );
 800325a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800325e:	f5a3 7421 	sub.w	r4, r3, #644	; 0x284
 8003262:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003266:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	931d      	str	r3, [sp, #116]	; 0x74
 800326e:	2300      	movs	r3, #0
 8003270:	931c      	str	r3, [sp, #112]	; 0x70
 8003272:	4668      	mov	r0, sp
 8003274:	f104 0310 	add.w	r3, r4, #16
 8003278:	2270      	movs	r2, #112	; 0x70
 800327a:	4619      	mov	r1, r3
 800327c:	f002 fb09 	bl	8005892 <memcpy>
 8003280:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003284:	f7ff fc15 	bl	8002ab2 <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer( I2C, screen_buffer );
 8003288:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800328c:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8003290:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8003294:	f2a2 3289 	subw	r2, r2, #905	; 0x389
 8003298:	7812      	ldrb	r2, [r2, #0]
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	4610      	mov	r0, r2
 800329e:	f7ff fc79 	bl	8002b94 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 1000 );
 80032a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032a6:	f000 f8c3 	bl	8003430 <USER_SYSTICK_Delay_ms>

  USER_OLED_Blank( I2C );
 80032aa:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80032ae:	f2a3 3389 	subw	r3, r3, #905	; 0x389
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fb5f 	bl	8002978 <USER_OLED_Blank>
  USER_OLED_Message( I2C, "TRACTOR DRIVING", OLED_SCREEN_COLUMNS / 5, OLED_SCREEN_ROWS / 3 + TEXT_ROWS_OFFSET );
 80032ba:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80032be:	f2a3 3389 	subw	r3, r3, #905	; 0x389
 80032c2:	7818      	ldrb	r0, [r3, #0]
 80032c4:	2303      	movs	r3, #3
 80032c6:	2219      	movs	r2, #25
 80032c8:	493c      	ldr	r1, [pc, #240]	; (80033bc <USER_OLED_Animation+0x56c>)
 80032ca:	f7ff fbb3 	bl	8002a34 <USER_OLED_Message>
  USER_OLED_Message( I2C, "SIMULATOR", OLED_SCREEN_COLUMNS / 4 + TEXT_COLUMNS_OFFSET, OLED_SCREEN_ROWS / 2 );
 80032ce:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80032d2:	f2a3 3389 	subw	r3, r3, #905	; 0x389
 80032d6:	7818      	ldrb	r0, [r3, #0]
 80032d8:	2304      	movs	r3, #4
 80032da:	2228      	movs	r2, #40	; 0x28
 80032dc:	4938      	ldr	r1, [pc, #224]	; (80033c0 <USER_OLED_Animation+0x570>)
 80032de:	f7ff fba9 	bl	8002a34 <USER_OLED_Message>
  USER_SYSTICK_Delay_ms( 2000 );
 80032e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80032e6:	f000 f8a3 	bl	8003430 <USER_SYSTICK_Delay_ms>

  for(i = 0; i < LOGO_DISPLACEMENT; i++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	f8a7 338e 	strh.w	r3, [r7, #910]	; 0x38e
 80032f0:	e048      	b.n	8003384 <USER_OLED_Animation+0x534>
  {
    JOHN_DEERE_LOGO_PIC_NO_TEXT.x_pos = 3 * i;
 80032f2:	f8b7 338e 	ldrh.w	r3, [r7, #910]	; 0x38e
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	0052      	lsls	r2, r2, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	b25a      	sxtb	r2, r3
 8003302:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003306:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800330a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    JOHN_DEERE_LOGO_PIC_NO_TEXT.bit_y_pos = 2 * i;
 800330e:	f8b7 338e 	ldrh.w	r3, [r7, #910]	; 0x38e
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	b29b      	uxth	r3, r3
 8003316:	b21a      	sxth	r2, r3
 8003318:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800331c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003320:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    USER_OLED_Clear_Buffer( screen_buffer );
 8003324:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003328:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	f7ff fb9c 	bl	8002a6a <USER_OLED_Clear_Buffer>
    USER_OLED_Update_Buffer_Bit( JOHN_DEERE_LOGO_PIC_NO_TEXT, 0, screen_buffer );
 8003332:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003336:	f5a3 7482 	sub.w	r4, r3, #260	; 0x104
 800333a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800333e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	931d      	str	r3, [sp, #116]	; 0x74
 8003346:	2300      	movs	r3, #0
 8003348:	931c      	str	r3, [sp, #112]	; 0x70
 800334a:	4668      	mov	r0, sp
 800334c:	f104 0310 	add.w	r3, r4, #16
 8003350:	2270      	movs	r2, #112	; 0x70
 8003352:	4619      	mov	r1, r3
 8003354:	f002 fa9d 	bl	8005892 <memcpy>
 8003358:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800335c:	f7ff fc49 	bl	8002bf2 <USER_OLED_Update_Buffer_Bit>
    USER_OLED_Print_Buffer( I2C, screen_buffer );
 8003360:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003364:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8003368:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800336c:	f2a2 3289 	subw	r2, r2, #905	; 0x389
 8003370:	7812      	ldrb	r2, [r2, #0]
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	4610      	mov	r0, r2
 8003376:	f7ff fc0d 	bl	8002b94 <USER_OLED_Print_Buffer>
  for(i = 0; i < LOGO_DISPLACEMENT; i++)
 800337a:	f8b7 338e 	ldrh.w	r3, [r7, #910]	; 0x38e
 800337e:	3301      	adds	r3, #1
 8003380:	f8a7 338e 	strh.w	r3, [r7, #910]	; 0x38e
 8003384:	f8b7 338e 	ldrh.w	r3, [r7, #910]	; 0x38e
 8003388:	2b1c      	cmp	r3, #28
 800338a:	d9b2      	bls.n	80032f2 <USER_OLED_Animation+0x4a2>
  }

  USER_SYSTICK_Delay_ms( 1000 );
 800338c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003390:	f000 f84e 	bl	8003430 <USER_SYSTICK_Delay_ms>
  USER_OLED_Clear_Buffer( screen_buffer );
 8003394:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003398:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	f7ff fb64 	bl	8002a6a <USER_OLED_Clear_Buffer>
  USER_OLED_Blank( I2C );
 80033a2:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80033a6:	f2a3 3389 	subw	r3, r3, #905	; 0x389
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fae3 	bl	8002978 <USER_OLED_Blank>
}
 80033b2:	bf00      	nop
 80033b4:	f507 7765 	add.w	r7, r7, #916	; 0x394
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd90      	pop	{r4, r7, pc}
 80033bc:	08009f38 	.word	0x08009f38
 80033c0:	08009f48 	.word	0x08009f48

080033c4 <USER_SYSTICK_Init>:
#include "main.h"

// Initialize SysTick

void USER_SYSTICK_Init( void )
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
    SYSTICK->CTRL	= 0;				// Clear register
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <USER_SYSTICK_Init+0x38>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
    SYSTICK->LOAD	= 0x00FFFFFF;			// Max start value
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <USER_SYSTICK_Init+0x38>)
 80033d0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80033d4:	605a      	str	r2, [r3, #4]
    SYSTICK->VAL	= 0;				// Clear register
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <USER_SYSTICK_Init+0x38>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]

    SYSTICK->CTRL	|=	SYSTICK_CTRL_CLKSOURCE;	// Clock source is processor clock (AHB)
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <USER_SYSTICK_Init+0x38>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a06      	ldr	r2, [pc, #24]	; (80033fc <USER_SYSTICK_Init+0x38>)
 80033e2:	f043 0304 	orr.w	r3, r3, #4
 80033e6:	6013      	str	r3, [r2, #0]
    SYSTICK->CTRL	|=	SYSTICK_CTRL_ENABLE;	// Counter enabled
 80033e8:	4b04      	ldr	r3, [pc, #16]	; (80033fc <USER_SYSTICK_Init+0x38>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a03      	ldr	r2, [pc, #12]	; (80033fc <USER_SYSTICK_Init+0x38>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6013      	str	r3, [r2, #0]
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	e000e010 	.word	0xe000e010

08003400 <USER_SYSTICK_Delay_Millis>:

// Generate 1 millisecond delay via SysTick

void USER_SYSTICK_Delay_Millis( void )
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  SYSTICK->LOAD		=	SYSTICK_LOAD;
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <USER_SYSTICK_Delay_Millis+0x28>)
 8003406:	4a09      	ldr	r2, [pc, #36]	; (800342c <USER_SYSTICK_Delay_Millis+0x2c>)
 8003408:	605a      	str	r2, [r3, #4]
  SYSTICK->VAL		=	0;
 800340a:	4b07      	ldr	r3, [pc, #28]	; (8003428 <USER_SYSTICK_Delay_Millis+0x28>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
  while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG));	// Returns 1 if timer counted to 0 since last time this was read
 8003410:	bf00      	nop
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <USER_SYSTICK_Delay_Millis+0x28>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f9      	beq.n	8003412 <USER_SYSTICK_Delay_Millis+0x12>
}
 800341e:	bf00      	nop
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	e000e010 	.word	0xe000e010
 800342c:	00011940 	.word	0x00011940

08003430 <USER_SYSTICK_Delay_ms>:

// Generate milliseconds delay via SysTick

void USER_SYSTICK_Delay_ms( uint32_t t )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  for(; t > 0; t--)
 8003438:	e004      	b.n	8003444 <USER_SYSTICK_Delay_ms+0x14>
  {
      USER_SYSTICK_Delay_Millis();
 800343a:	f7ff ffe1 	bl	8003400 <USER_SYSTICK_Delay_Millis>
  for(; t > 0; t--)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3b01      	subs	r3, #1
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f7      	bne.n	800343a <USER_SYSTICK_Delay_ms+0xa>
  }
}
 800344a:	bf00      	nop
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <USER_LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

// Function that initializes the LCD to 4 bits

void USER_LCD_Init(void){
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0

	// RCC_APB2ENR modified to IO port C clock enable

	RCC->APB2ENR	|=	RCC_APB2ENR_IOPCEN;	// To set IOPCEN bit
 800345a:	4b66      	ldr	r3, [pc, #408]	; (80035f4 <USER_LCD_Init+0x1a0>)
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	4a65      	ldr	r2, [pc, #404]	; (80035f4 <USER_LCD_Init+0x1a0>)
 8003460:	f043 0310 	orr.w	r3, r3, #16
 8003464:	6193      	str	r3, [r2, #24]

	int8_t const *p;

	// Configuration of all pins to the LCD as general-purpose output push-pull, 10 MHz speed

	GPIOC->CRL	&=	~( 0x3UL << 30U ) & ~( 0x2UL << 28U )
 8003466:	4b64      	ldr	r3, [pc, #400]	; (80035f8 <USER_LCD_Init+0x1a4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a63      	ldr	r2, [pc, #396]	; (80035f8 <USER_LCD_Init+0x1a4>)
 800346c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003470:	6013      	str	r3, [r2, #0]
			& 	~( 0x3UL << 26U ) & ~( 0x2UL << 24U );
	GPIOC->CRL 	|= 	 ( 0x1UL << 28U )
 8003472:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <USER_LCD_Init+0x1a4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a60      	ldr	r2, [pc, #384]	; (80035f8 <USER_LCD_Init+0x1a4>)
 8003478:	f043 5388 	orr.w	r3, r3, #285212672	; 0x11000000
 800347c:	6013      	str	r3, [r2, #0]
			|  	 ( 0x1UL << 24U );
	GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U )
 800347e:	4b5e      	ldr	r3, [pc, #376]	; (80035f8 <USER_LCD_Init+0x1a4>)
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	495d      	ldr	r1, [pc, #372]	; (80035f8 <USER_LCD_Init+0x1a4>)
 8003484:	4b5d      	ldr	r3, [pc, #372]	; (80035fc <USER_LCD_Init+0x1a8>)
 8003486:	4013      	ands	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
			& 	~( 0x3UL << 14U ) & ~( 0x2UL << 12U )
			&	~( 0x3UL << 10U ) & ~( 0x2UL <<  8U )
			& 	~( 0x3UL <<  6U ) & ~( 0x2UL <<  4U )
			& 	~( 0x3UL <<  2U ) & ~( 0x2UL <<  0U );
	GPIOC->CRH	|= 	 ( 0x1UL << 16U )
 800348a:	4b5b      	ldr	r3, [pc, #364]	; (80035f8 <USER_LCD_Init+0x1a4>)
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	495a      	ldr	r1, [pc, #360]	; (80035f8 <USER_LCD_Init+0x1a4>)
 8003490:	4b5b      	ldr	r3, [pc, #364]	; (8003600 <USER_LCD_Init+0x1ac>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
			|  	 ( 0x1UL << 12U )
			| 	 ( 0x1UL <<  8U )
			|  	 ( 0x1UL <<  4U )
			|  	 ( 0x1UL <<  0U );

	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 8003496:	4b58      	ldr	r3, [pc, #352]	; (80035f8 <USER_LCD_Init+0x1a4>)
 8003498:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800349c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_LOW;
 800349e:	4b56      	ldr	r3, [pc, #344]	; (80035f8 <USER_LCD_Init+0x1a4>)
 80034a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80034a4:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_LOW;
 80034a6:	4b54      	ldr	r3, [pc, #336]	; (80035f8 <USER_LCD_Init+0x1a4>)
 80034a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034ac:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 80034ae:	4b52      	ldr	r3, [pc, #328]	; (80035f8 <USER_LCD_Init+0x1a4>)
 80034b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034b4:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_LOW;
 80034b6:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <USER_LCD_Init+0x1a4>)
 80034b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034bc:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80034be:	4b4e      	ldr	r3, [pc, #312]	; (80035f8 <USER_LCD_Init+0x1a4>)
 80034c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034c4:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80034c6:	4b4c      	ldr	r3, [pc, #304]	; (80035f8 <USER_LCD_Init+0x1a4>)
 80034c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034cc:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_50MS, TIM_CNT_50MS );		//	50 ms
 80034ce:	22e6      	movs	r2, #230	; 0xe6
 80034d0:	2130      	movs	r1, #48	; 0x30
 80034d2:	2000      	movs	r0, #0
 80034d4:	f000 ffe0 	bl	8004498 <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 80034d8:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <USER_LCD_Init+0x1a4>)
 80034da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034de:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 80034e0:	4b45      	ldr	r3, [pc, #276]	; (80035f8 <USER_LCD_Init+0x1a4>)
 80034e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034e6:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80034e8:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <USER_LCD_Init+0x1a4>)
 80034ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034ee:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80034f0:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <USER_LCD_Init+0x1a4>)
 80034f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f6:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 80034f8:	f000 f9a6 	bl	8003848 <LCD_Pulse_EN>

	USER_TIM_Delay( TIM_2, TIM_PSC_5MS, TIM_CNT_5MS );		//	5 ms
 80034fc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003500:	2104      	movs	r1, #4
 8003502:	2000      	movs	r0, #0
 8003504:	f000 ffc8 	bl	8004498 <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 8003508:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <USER_LCD_Init+0x1a4>)
 800350a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8003510:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <USER_LCD_Init+0x1a4>)
 8003512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003516:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8003518:	4b37      	ldr	r3, [pc, #220]	; (80035f8 <USER_LCD_Init+0x1a4>)
 800351a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800351e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8003520:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <USER_LCD_Init+0x1a4>)
 8003522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003526:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8003528:	f000 f98e 	bl	8003848 <LCD_Pulse_EN>

	USER_TIM_Delay( TIM_2, TIM_PSC_100US, TIM_CNT_100US );		//	100 us
 800352c:	f44f 4267 	mov.w	r2, #59136	; 0xe700
 8003530:	2100      	movs	r1, #0
 8003532:	2000      	movs	r0, #0
 8003534:	f000 ffb0 	bl	8004498 <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 8003538:	4b2f      	ldr	r3, [pc, #188]	; (80035f8 <USER_LCD_Init+0x1a4>)
 800353a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8003540:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <USER_LCD_Init+0x1a4>)
 8003542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003546:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8003548:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <USER_LCD_Init+0x1a4>)
 800354a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800354e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8003550:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <USER_LCD_Init+0x1a4>)
 8003552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003556:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8003558:	f000 f976 	bl	8003848 <LCD_Pulse_EN>
	while( LCD_Busy( ) );					//	Checking the busy flag
 800355c:	bf00      	nop
 800355e:	f000 f91f 	bl	80037a0 <LCD_Busy>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1fa      	bne.n	800355e <USER_LCD_Init+0x10a>

	/* Initial 'Function Set' to change 4-bit mode	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 8003568:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <USER_LCD_Init+0x1a4>)
 800356a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800356e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <USER_LCD_Init+0x1a4>)
 8003572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003576:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8003578:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <USER_LCD_Init+0x1a4>)
 800357a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800357e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8003580:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <USER_LCD_Init+0x1a4>)
 8003582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003586:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8003588:	f000 f95e 	bl	8003848 <LCD_Pulse_EN>
	while( LCD_Busy( ) );					//	Checking the busy flag
 800358c:	bf00      	nop
 800358e:	f000 f907 	bl	80037a0 <LCD_Busy>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1fa      	bne.n	800358e <USER_LCD_Init+0x13a>

	/* 'Function Set' (I=1, N and F as required)	*/

	LCD_Write_Cmd( 0x28U );					//	2-line display, 5x7 dot
 8003598:	2028      	movs	r0, #40	; 0x28
 800359a:	f000 f89b 	bl	80036d4 <LCD_Write_Cmd>

	/* 'Display ON/OFF Control' (D=0, C=0, B=0)	*/

	LCD_Write_Cmd( 0x08U );					//	Display, cursor and blinking off
 800359e:	2008      	movs	r0, #8
 80035a0:	f000 f898 	bl	80036d4 <LCD_Write_Cmd>

	/* 'Clear Display' */

	LCD_Write_Cmd( 0x01U );//
 80035a4:	2001      	movs	r0, #1
 80035a6:	f000 f895 	bl	80036d4 <LCD_Write_Cmd>

	/* 'Entry Mode Set' (I/D and S as required)	*/

	LCD_Write_Cmd( 0x06U );					//	Cursor increment by 1, shift off
 80035aa:	2006      	movs	r0, #6
 80035ac:	f000 f892 	bl	80036d4 <LCD_Write_Cmd>

	/* Initialization Ends	*/

	LCD_Write_Cmd( 0x0FU );					//	Display, cursor and blinking on
 80035b0:	200f      	movs	r0, #15
 80035b2:	f000 f88f 	bl	80036d4 <LCD_Write_Cmd>

	//	Load the character defined by the user into the CGRAM

	LCD_Write_Cmd( 0x40 );					//	Set the CGRAM address to 0
 80035b6:	2040      	movs	r0, #64	; 0x40
 80035b8:	f000 f88c 	bl	80036d4 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <USER_LCD_Init+0x1b0>)
 80035be:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 80035c0:	2300      	movs	r3, #0
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	e00c      	b.n	80035e0 <USER_LCD_Init+0x18c>
		LCD_Put_Char( *p );
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f993 3000 	ldrsb.w	r3, [r3]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f894 	bl	80036fc <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	3301      	adds	r3, #1
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3301      	adds	r3, #1
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2b3f      	cmp	r3, #63	; 0x3f
 80035e4:	d9ef      	bls.n	80035c6 <USER_LCD_Init+0x172>

	/*	Set DDRAM address in address	*/

	LCD_Write_Cmd( 0x80 );//
 80035e6:	2080      	movs	r0, #128	; 0x80
 80035e8:	f000 f874 	bl	80036d4 <LCD_Write_Cmd>
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40011000 	.word	0x40011000
 80035fc:	fff11111 	.word	0xfff11111
 8003600:	00011111 	.word	0x00011111
 8003604:	0800bcec 	.word	0x0800bcec

08003608 <LCD_Out_Data4>:

// Function that generates a strobe on the LCD

void LCD_Out_Data4(uint8_t val)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )				//	Bit[0]
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d004      	beq.n	8003626 <LCD_Out_Data4+0x1e>
		GPIOC->BSRR	=	LCD_D4_PIN_HIGH;
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <LCD_Out_Data4+0x84>)
 800361e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003622:	611a      	str	r2, [r3, #16]
 8003624:	e003      	b.n	800362e <LCD_Out_Data4+0x26>
	else
		GPIOC->BSRR	=	LCD_D4_PIN_LOW;
 8003626:	4b19      	ldr	r3, [pc, #100]	; (800368c <LCD_Out_Data4+0x84>)
 8003628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800362c:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )				//	Bit[1]
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d004      	beq.n	8003642 <LCD_Out_Data4+0x3a>
		GPIOC->BSRR	=	LCD_D5_PIN_HIGH;
 8003638:	4b14      	ldr	r3, [pc, #80]	; (800368c <LCD_Out_Data4+0x84>)
 800363a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800363e:	611a      	str	r2, [r3, #16]
 8003640:	e003      	b.n	800364a <LCD_Out_Data4+0x42>
	else
		GPIOC->BSRR	=	LCD_D5_PIN_LOW;
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <LCD_Out_Data4+0x84>)
 8003644:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003648:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )				//	Bit[2]
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <LCD_Out_Data4+0x56>
		GPIOC->BSRR	=	LCD_D6_PIN_HIGH;
 8003654:	4b0d      	ldr	r3, [pc, #52]	; (800368c <LCD_Out_Data4+0x84>)
 8003656:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800365a:	611a      	str	r2, [r3, #16]
 800365c:	e003      	b.n	8003666 <LCD_Out_Data4+0x5e>
	else
		GPIOC->BSRR	=	LCD_D6_PIN_LOW;
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <LCD_Out_Data4+0x84>)
 8003660:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003664:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )				//	Bit[3]
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <LCD_Out_Data4+0x72>
		GPIOC->BSRR	=	LCD_D7_PIN_HIGH;
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <LCD_Out_Data4+0x84>)
 8003672:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003676:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
}
 8003678:	e003      	b.n	8003682 <LCD_Out_Data4+0x7a>
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <LCD_Out_Data4+0x84>)
 800367c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003680:	611a      	str	r2, [r3, #16]
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	40011000 	.word	0x40011000

08003690 <LCD_Write_Byte>:

// Function that writes 1 byte of data to the LCD

void LCD_Write_Byte(uint8_t val)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ffb1 	bl	8003608 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 80036a6:	f000 f8cf 	bl	8003848 <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff ffa8 	bl	8003608 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 80036b8:	f000 f8c6 	bl	8003848 <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 80036bc:	bf00      	nop
 80036be:	f000 f86f 	bl	80037a0 <LCD_Busy>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1fa      	bne.n	80036be <LCD_Write_Byte+0x2e>
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <LCD_Write_Cmd>:

// Function that writes a command to the LCD

void LCD_Write_Cmd( uint8_t val )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_LOW;			//	RS=0 (character selection)
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <LCD_Write_Cmd+0x24>)
 80036e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80036e4:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ffd1 	bl	8003690 <LCD_Write_Byte>
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40011000 	.word	0x40011000

080036fc <LCD_Put_Char>:

// Write an ASCII character to the LCD

void LCD_Put_Char( uint8_t c )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_HIGH;		//	RS=1 (character selection)
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <LCD_Put_Char+0x20>)
 8003708:	2240      	movs	r2, #64	; 0x40
 800370a:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff ffbe 	bl	8003690 <LCD_Write_Byte>
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40011000 	.word	0x40011000

08003720 <LCD_Set_Cursor>:

// Function that sets the cursor to a position on the LCD screen
// Minimum values for line and column must be 1

void LCD_Set_Cursor( uint8_t line, uint8_t column )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	460a      	mov	r2, r1
 800372a:	71fb      	strb	r3, [r7, #7]
 800372c:	4613      	mov	r3, r2
 800372e:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	column--;
 8003730:	79bb      	ldrb	r3, [r7, #6]
 8003732:	3b01      	subs	r3, #1
 8003734:	71bb      	strb	r3, [r7, #6]
	line--;
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	3b01      	subs	r3, #1
 800373a:	71fb      	strb	r3, [r7, #7]
	address = ( line * 0x40U ) + column;
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	019b      	lsls	r3, r3, #6
 8003740:	b2da      	uxtb	r2, r3
 8003742:	79bb      	ldrb	r3, [r7, #6]
 8003744:	4413      	add	r3, r2
 8003746:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800374e:	b2db      	uxtb	r3, r3
 8003750:	3b80      	subs	r3, #128	; 0x80
 8003752:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff ffbc 	bl	80036d4 <LCD_Write_Cmd>
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <LCD_Put_Str>:

// Function that sends a string of ASCII characters to the LCD

void LCD_Put_Str( char * str )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	for( int16_t i = 0; i < 16; i++ )
 800376c:	2300      	movs	r3, #0
 800376e:	81fb      	strh	r3, [r7, #14]
 8003770:	e00d      	b.n	800378e <LCD_Put_Str+0x2a>
		LCD_Put_Char( str[ i ] );			//	Send 1 byte to the LCD
 8003772:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ffbd 	bl	80036fc <LCD_Put_Char>
	for( int16_t i = 0; i < 16; i++ )
 8003782:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003786:	b29b      	uxth	r3, r3
 8003788:	3301      	adds	r3, #1
 800378a:	b29b      	uxth	r3, r3
 800378c:	81fb      	strh	r3, [r7, #14]
 800378e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003792:	2b0f      	cmp	r3, #15
 8003794:	dded      	ble.n	8003772 <LCD_Put_Str+0xe>
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <LCD_Busy>:
}

// Function that causes delays on the LCD

char LCD_Busy( void )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
	// Configuration of D7 as input floating

	GPIOC->CRH	&=	~( 0x2UL << 18U ) & ~( 0x3UL << 16U );
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <LCD_Busy+0xa4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a26      	ldr	r2, [pc, #152]	; (8003844 <LCD_Busy+0xa4>)
 80037aa:	f423 2330 	bic.w	r3, r3, #720896	; 0xb0000
 80037ae:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=   	 ( 0x1UL << 18U );
 80037b0:	4b24      	ldr	r3, [pc, #144]	; (8003844 <LCD_Busy+0xa4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <LCD_Busy+0xa4>)
 80037b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ba:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 80037bc:	4b21      	ldr	r3, [pc, #132]	; (8003844 <LCD_Busy+0xa4>)
 80037be:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80037c2:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_HIGH;
 80037c4:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <LCD_Busy+0xa4>)
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_HIGH;
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <LCD_Busy+0xa4>)
 80037cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037d0:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_100US, TIM_CNT_100US );	//	100 us
 80037d2:	f44f 4267 	mov.w	r2, #59136	; 0xe700
 80037d6:	2100      	movs	r1, #0
 80037d8:	2000      	movs	r0, #0
 80037da:	f000 fe5d 	bl	8004498 <USER_TIM_Delay>

	if(( GPIOC->IDR	& LCD_D7_PIN_HIGH )) 			//	If D7 is set, then
 80037de:	4b19      	ldr	r3, [pc, #100]	; (8003844 <LCD_Busy+0xa4>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d015      	beq.n	8003816 <LCD_Busy+0x76>
	{
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <LCD_Busy+0xa4>)
 80037ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037f0:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 80037f2:	4b14      	ldr	r3, [pc, #80]	; (8003844 <LCD_Busy+0xa4>)
 80037f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037f8:	611a      	str	r2, [r3, #16]

	// Configuration of D7 as output push-pull, 10 MHz speed

		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <LCD_Busy+0xa4>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4a11      	ldr	r2, [pc, #68]	; (8003844 <LCD_Busy+0xa4>)
 8003800:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8003804:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 8003806:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <LCD_Busy+0xa4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4a0e      	ldr	r2, [pc, #56]	; (8003844 <LCD_Busy+0xa4>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003810:	6053      	str	r3, [r2, #4]

		return 1;
 8003812:	2301      	movs	r3, #1
 8003814:	e014      	b.n	8003840 <LCD_Busy+0xa0>
	}
	else
	{
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <LCD_Busy+0xa4>)
 8003818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800381c:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <LCD_Busy+0xa4>)
 8003820:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003824:	611a      	str	r2, [r3, #16]

	// Configuration of D7 as output push-pull, 10 MHz speed

		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <LCD_Busy+0xa4>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4a06      	ldr	r2, [pc, #24]	; (8003844 <LCD_Busy+0xa4>)
 800382c:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8003830:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 8003832:	4b04      	ldr	r3, [pc, #16]	; (8003844 <LCD_Busy+0xa4>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4a03      	ldr	r2, [pc, #12]	; (8003844 <LCD_Busy+0xa4>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6053      	str	r3, [r2, #4]

		return 0;
 800383e:	2300      	movs	r3, #0
	}
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40011000 	.word	0x40011000

08003848 <LCD_Pulse_EN>:

// Function that generates a pulse on the EN pin of the LCD

void LCD_Pulse_EN( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	LCD_EN_PIN_LOW;
 800384c:	4b0f      	ldr	r3, [pc, #60]	; (800388c <LCD_Pulse_EN+0x44>)
 800384e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003852:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_10US, TIM_CNT_10US );	//	10 us
 8003854:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8003858:	2100      	movs	r1, #0
 800385a:	2000      	movs	r0, #0
 800385c:	f000 fe1c 	bl	8004498 <USER_TIM_Delay>

	GPIOC->BSRR	=	LCD_EN_PIN_HIGH;		//	Enable pin EN ON
 8003860:	4b0a      	ldr	r3, [pc, #40]	; (800388c <LCD_Pulse_EN+0x44>)
 8003862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003866:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_10US, TIM_CNT_10US );	//	10 us
 8003868:	f64f 5280 	movw	r2, #64896	; 0xfd80
 800386c:	2100      	movs	r1, #0
 800386e:	2000      	movs	r0, #0
 8003870:	f000 fe12 	bl	8004498 <USER_TIM_Delay>

	GPIOC->BSRR	=	LCD_EN_PIN_LOW;			//	Enable pin EN OFF
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <LCD_Pulse_EN+0x44>)
 8003876:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800387a:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_1MS, TIM_CNT_1MS );	//	1 ms
 800387c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003880:	2100      	movs	r1, #0
 8003882:	2000      	movs	r0, #0
 8003884:	f000 fe08 	bl	8004498 <USER_TIM_Delay>
}
 8003888:	bf00      	nop
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40011000 	.word	0x40011000

08003890 <main>:
void USER_RCC_ClockEnable( void );

/* Main function */

int main( void )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  TASK_1_ADC_Read_Init();
 8003894:	f000 f85c 	bl	8003950 <TASK_1_ADC_Read_Init>
  TASK_2_MATRIX_KEYPAD_Read_Init();
 8003898:	f000 f866 	bl	8003968 <TASK_2_MATRIX_KEYPAD_Read_Init>
  TASK_3_MODEL_Feed_Init();
 800389c:	f000 f86a 	bl	8003974 <TASK_3_MODEL_Feed_Init>
  TASK_4_USART_Send_Init();
 80038a0:	f000 f86e 	bl	8003980 <TASK_4_USART_Send_Init>
  TASK_5_LCD_Write_Init();
 80038a4:	f000 f874 	bl	8003990 <TASK_5_LCD_Write_Init>

  for(;;)
  {
    // ADC

    TASK_1_ADC_Read();
 80038a8:	f000 f886 	bl	80039b8 <TASK_1_ADC_Read>

    // Matrix keypad

    TASK_2_MATRIX_KEYPAD_Read();
 80038ac:	f000 f8bc 	bl	8003a28 <TASK_2_MATRIX_KEYPAD_Read>

    // Update the values for the Throttle and Brake commands into the vehicle model

    TASK_3_MODEL_Feed();
 80038b0:	f000 f900 	bl	8003ab4 <TASK_3_MODEL_Feed>

    // Send the output values

    TASK_4_USART_Send();
 80038b4:	f000 f91e 	bl	8003af4 <TASK_4_USART_Send>

    /* Extract the whole and decimal parts for Engine Speed and Vehicle Speed, and cast them alongside Gear to integers
    Write the messages to send to the LCD
    Display values on the LCD */

    TASK_6_LCD_Write();
 80038b8:	f000 f938 	bl	8003b2c <TASK_6_LCD_Write>
    TASK_1_ADC_Read();
 80038bc:	e7f4      	b.n	80038a8 <main+0x18>
	...

080038c0 <USER_RCC_Init>:
  }

}

void USER_RCC_Init( void )
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  /* System Clock (SYSCLK) configuration for 64 MHz */

  // Two wait states latency, if SYSCLK > 48 MHz

  FLASH->ACR	&=	~( 0x5UL << 0U );	
 80038c4:	4b20      	ldr	r3, [pc, #128]	; (8003948 <USER_RCC_Init+0x88>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1f      	ldr	r2, [pc, #124]	; (8003948 <USER_RCC_Init+0x88>)
 80038ca:	f023 0305 	bic.w	r3, r3, #5
 80038ce:	6013      	str	r3, [r2, #0]
  FLASH->ACR	|=	( 0x2UL << 0U );	
 80038d0:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <USER_RCC_Init+0x88>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <USER_RCC_Init+0x88>)
 80038d6:	f043 0302 	orr.w	r3, r3, #2
 80038da:	6013      	str	r3, [r2, #0]
  
  // PLL HSI clock /2 selected as PLL input clock
  
  RCC->CFGR	&=	~( 0x1UL << 16U )
 80038dc:	4b1b      	ldr	r3, [pc, #108]	; (800394c <USER_RCC_Init+0x8c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a1a      	ldr	r2, [pc, #104]	; (800394c <USER_RCC_Init+0x8c>)
 80038e2:	f423 339d 	bic.w	r3, r3, #80384	; 0x13a00
 80038e6:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80038ea:	6053      	str	r3, [r2, #4]
		&	~( 0x3UL << 8U )        // APB1 pre-scaler /2 (APB1 must not exceed 36 MHz)
		&	~( 0xFUL << 4U );	// AHB pre-scaler /1

  // PLL input clock x 16 (PLLMUL bits)

  RCC->CFGR	|=	( 0xFUL << 18U )	
 80038ec:	4b17      	ldr	r3, [pc, #92]	; (800394c <USER_RCC_Init+0x8c>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4a16      	ldr	r2, [pc, #88]	; (800394c <USER_RCC_Init+0x8c>)
 80038f2:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 80038f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038fa:	6053      	str	r3, [r2, #4]
		|	( 0X4UL << 8U );	// APB1 pre-scaler /2
  RCC->CR	|=	( 0x1UL << 24U );	// PLL2 ON
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <USER_RCC_Init+0x8c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a12      	ldr	r2, [pc, #72]	; (800394c <USER_RCC_Init+0x8c>)
 8003902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003906:	6013      	str	r3, [r2, #0]

  // Wait until PLL is locked

  while( !(RCC->CR & ~( 0x1UL << 25U )));
 8003908:	bf00      	nop
 800390a:	4b10      	ldr	r3, [pc, #64]	; (800394c <USER_RCC_Init+0x8c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f9      	beq.n	800390a <USER_RCC_Init+0x4a>

  // PLL used as system clock (SW bits)

  RCC->CFGR	&=	~( 0x1UL << 0U );
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <USER_RCC_Init+0x8c>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4a0c      	ldr	r2, [pc, #48]	; (800394c <USER_RCC_Init+0x8c>)
 800391c:	f023 0301 	bic.w	r3, r3, #1
 8003920:	6053      	str	r3, [r2, #4]
  RCC->CFGR	|=	( 0x2UL << 0U );
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <USER_RCC_Init+0x8c>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <USER_RCC_Init+0x8c>)
 8003928:	f043 0302 	orr.w	r3, r3, #2
 800392c:	6053      	str	r3, [r2, #4]

  // Wait until PLL is switched

  while( 0x8UL != ( RCC->CFGR & 0xCUL ));
 800392e:	bf00      	nop
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <USER_RCC_Init+0x8c>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b08      	cmp	r3, #8
 800393a:	d1f9      	bne.n	8003930 <USER_RCC_Init+0x70>
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40022000 	.word	0x40022000
 800394c:	40021000 	.word	0x40021000

08003950 <TASK_1_ADC_Read_Init>:

  return;
}

void TASK_1_ADC_Read_Init( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  USER_RCC_Init();
 8003954:	f7ff ffb4 	bl	80038c0 <USER_RCC_Init>
  USER_TIM_Init( TIM_2 );
 8003958:	2000      	movs	r0, #0
 800395a:	f000 fce1 	bl	8004320 <USER_TIM_Init>
  USER_ADC_Init( ADC_1 );
 800395e:	2000      	movs	r0, #0
 8003960:	f7fd fba8 	bl	80010b4 <USER_ADC_Init>
  return;
 8003964:	bf00      	nop
}
 8003966:	bd80      	pop	{r7, pc}

08003968 <TASK_2_MATRIX_KEYPAD_Read_Init>:

void TASK_2_MATRIX_KEYPAD_Read_Init( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  USER_MATRIX_KEYPAD_Init();
 800396c:	f000 f96c 	bl	8003c48 <USER_MATRIX_KEYPAD_Init>
  return;
 8003970:	bf00      	nop
}
 8003972:	bd80      	pop	{r7, pc}

08003974 <TASK_3_MODEL_Feed_Init>:

void TASK_3_MODEL_Feed_Init( void )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  EngTrModel_initialize();
 8003978:	f7fe fc48 	bl	800220c <EngTrModel_initialize>
  return;
 800397c:	bf00      	nop
}
 800397e:	bd80      	pop	{r7, pc}

08003980 <TASK_4_USART_Send_Init>:

void TASK_4_USART_Send_Init( void )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  USER_USART_Init( USART_1 );
 8003984:	2000      	movs	r0, #0
 8003986:	f000 fe2f 	bl	80045e8 <USER_USART_Init>
  return;
 800398a:	bf00      	nop
}
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <TASK_5_LCD_Write_Init>:

void TASK_5_LCD_Write_Init( void )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  USER_LCD_Init();
 8003994:	f7ff fd5e 	bl	8003454 <USER_LCD_Init>

  USER_SYSTICK_Init();
 8003998:	f7ff fd14 	bl	80033c4 <USER_SYSTICK_Init>
  USER_OLED_Init_64( I2C_2 );
 800399c:	2001      	movs	r0, #1
 800399e:	f7fe ff90 	bl	80028c2 <USER_OLED_Init_64>
  USER_OLED_Animation( I2C_2, oled_buffer );
 80039a2:	4903      	ldr	r1, [pc, #12]	; (80039b0 <TASK_5_LCD_Write_Init+0x20>)
 80039a4:	2001      	movs	r0, #1
 80039a6:	f7ff fa53 	bl	8002e50 <USER_OLED_Animation>

  return;
 80039aa:	bf00      	nop
}
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	200002d8 	.word	0x200002d8
 80039b4:	00000000 	.word	0x00000000

080039b8 <TASK_1_ADC_Read>:

void TASK_1_ADC_Read( void )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  conversionData = USER_ADC_Convert( ADC_1 );
 80039bc:	2000      	movs	r0, #0
 80039be:	f7fd fc6b 	bl	8001298 <USER_ADC_Convert>
 80039c2:	4603      	mov	r3, r0
 80039c4:	461a      	mov	r2, r3
 80039c6:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <TASK_1_ADC_Read+0x60>)
 80039c8:	801a      	strh	r2, [r3, #0]
  voltageValue = 0.00080586 * conversionData;
 80039ca:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <TASK_1_ADC_Read+0x60>)
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fc fd28 	bl	8000424 <__aeabi_i2d>
 80039d4:	a30e      	add	r3, pc, #56	; (adr r3, 8003a10 <TASK_1_ADC_Read+0x58>)
 80039d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039da:	f7fc fd8d 	bl	80004f8 <__aeabi_dmul>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	f7fd f87f 	bl	8000ae8 <__aeabi_d2f>
 80039ea:	4603      	mov	r3, r0
 80039ec:	4a0b      	ldr	r2, [pc, #44]	; (8003a1c <TASK_1_ADC_Read+0x64>)
 80039ee:	6013      	str	r3, [r2, #0]

  normalizedVoltageValue = scaleVoltageValue( voltageValue, 0, 3.3 );
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <TASK_1_ADC_Read+0x64>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <TASK_1_ADC_Read+0x68>)
 80039f6:	f04f 0100 	mov.w	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd fc88 	bl	8001310 <scaleVoltageValue>
 8003a00:	4603      	mov	r3, r0
 8003a02:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <TASK_1_ADC_Read+0x6c>)
 8003a04:	6013      	str	r3, [r2, #0]

  return;
 8003a06:	bf00      	nop
}
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	f3af 8000 	nop.w
 8003a10:	2c2e064e 	.word	0x2c2e064e
 8003a14:	3f4a680b 	.word	0x3f4a680b
 8003a18:	200002a0 	.word	0x200002a0
 8003a1c:	200002a4 	.word	0x200002a4
 8003a20:	40533333 	.word	0x40533333
 8003a24:	200002a8 	.word	0x200002a8

08003a28 <TASK_2_MATRIX_KEYPAD_Read>:

void TASK_2_MATRIX_KEYPAD_Read( void )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  selectedKey = USER_MATRIX_KEYPAD_Read();
 8003a2c:	f000 f968 	bl	8003d00 <USER_MATRIX_KEYPAD_Read>
 8003a30:	4603      	mov	r3, r0
 8003a32:	461a      	mov	r2, r3
 8003a34:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <TASK_2_MATRIX_KEYPAD_Read+0x78>)
 8003a36:	701a      	strb	r2, [r3, #0]

  if(selectedKey == '5')
 8003a38:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <TASK_2_MATRIX_KEYPAD_Read+0x78>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b35      	cmp	r3, #53	; 0x35
 8003a3e:	d106      	bne.n	8003a4e <TASK_2_MATRIX_KEYPAD_Read+0x26>
  {
    keyBrakeTorque = 100.0;
 8003a40:	4b18      	ldr	r3, [pc, #96]	; (8003aa4 <TASK_2_MATRIX_KEYPAD_Read+0x7c>)
 8003a42:	4a19      	ldr	r2, [pc, #100]	; (8003aa8 <TASK_2_MATRIX_KEYPAD_Read+0x80>)
 8003a44:	601a      	str	r2, [r3, #0]
    action = 'B';
 8003a46:	4b19      	ldr	r3, [pc, #100]	; (8003aac <TASK_2_MATRIX_KEYPAD_Read+0x84>)
 8003a48:	2242      	movs	r2, #66	; 0x42
 8003a4a:	701a      	strb	r2, [r3, #0]
  {
    keyBrakeTorque = 0.0;
    action = 'F';
  }

  return;
 8003a4c:	e026      	b.n	8003a9c <TASK_2_MATRIX_KEYPAD_Read+0x74>
  else if(selectedKey == '4' || selectedKey == '6')
 8003a4e:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <TASK_2_MATRIX_KEYPAD_Read+0x78>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b34      	cmp	r3, #52	; 0x34
 8003a54:	d003      	beq.n	8003a5e <TASK_2_MATRIX_KEYPAD_Read+0x36>
 8003a56:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <TASK_2_MATRIX_KEYPAD_Read+0x78>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b36      	cmp	r3, #54	; 0x36
 8003a5c:	d116      	bne.n	8003a8c <TASK_2_MATRIX_KEYPAD_Read+0x64>
    voltageValue -= 1;
 8003a5e:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <TASK_2_MATRIX_KEYPAD_Read+0x88>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd f892 	bl	8000b90 <__aeabi_fsub>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	461a      	mov	r2, r3
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <TASK_2_MATRIX_KEYPAD_Read+0x88>)
 8003a72:	601a      	str	r2, [r3, #0]
    if(selectedKey == '4')
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <TASK_2_MATRIX_KEYPAD_Read+0x78>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b34      	cmp	r3, #52	; 0x34
 8003a7a:	d103      	bne.n	8003a84 <TASK_2_MATRIX_KEYPAD_Read+0x5c>
    action = 'L';
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <TASK_2_MATRIX_KEYPAD_Read+0x84>)
 8003a7e:	224c      	movs	r2, #76	; 0x4c
 8003a80:	701a      	strb	r2, [r3, #0]
    if(selectedKey == '4')
 8003a82:	e00a      	b.n	8003a9a <TASK_2_MATRIX_KEYPAD_Read+0x72>
    action = 'R';
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <TASK_2_MATRIX_KEYPAD_Read+0x84>)
 8003a86:	2252      	movs	r2, #82	; 0x52
 8003a88:	701a      	strb	r2, [r3, #0]
    if(selectedKey == '4')
 8003a8a:	e006      	b.n	8003a9a <TASK_2_MATRIX_KEYPAD_Read+0x72>
    keyBrakeTorque = 0.0;
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <TASK_2_MATRIX_KEYPAD_Read+0x7c>)
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
    action = 'F';
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <TASK_2_MATRIX_KEYPAD_Read+0x84>)
 8003a96:	2246      	movs	r2, #70	; 0x46
 8003a98:	701a      	strb	r2, [r3, #0]
  return;
 8003a9a:	bf00      	nop
}
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	2000000e 	.word	0x2000000e
 8003aa4:	200002ac 	.word	0x200002ac
 8003aa8:	42c80000 	.word	0x42c80000
 8003aac:	2000000f 	.word	0x2000000f
 8003ab0:	200002a4 	.word	0x200002a4

08003ab4 <TASK_3_MODEL_Feed>:

void TASK_3_MODEL_Feed( void )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  EngTrModel_U.Throttle = normalizedVoltageValue;
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <TASK_3_MODEL_Feed+0x34>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fc fcc3 	bl	8000448 <__aeabi_f2d>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4909      	ldr	r1, [pc, #36]	; (8003aec <TASK_3_MODEL_Feed+0x38>)
 8003ac8:	e9c1 2300 	strd	r2, r3, [r1]
  EngTrModel_U.BrakeTorque = keyBrakeTorque;
 8003acc:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <TASK_3_MODEL_Feed+0x3c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fc fcb9 	bl	8000448 <__aeabi_f2d>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4904      	ldr	r1, [pc, #16]	; (8003aec <TASK_3_MODEL_Feed+0x38>)
 8003adc:	e9c1 2302 	strd	r2, r3, [r1, #8]

  EngTrModel_step();
 8003ae0:	f7fe f8ba 	bl	8001c58 <EngTrModel_step>

  return;
 8003ae4:	bf00      	nop
}
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200002a8 	.word	0x200002a8
 8003aec:	20000278 	.word	0x20000278
 8003af0:	200002ac 	.word	0x200002ac

08003af4 <TASK_4_USART_Send>:

void TASK_4_USART_Send( void )
{
 8003af4:	b5b0      	push	{r4, r5, r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af04      	add	r7, sp, #16
  printf("%f,%f,%f\n\r", EngTrModel_Y.EngineSpeed, EngTrModel_Y.VehicleSpeed, EngTrModel_Y.Gear);
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <TASK_4_USART_Send+0x30>)
 8003afc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <TASK_4_USART_Send+0x30>)
 8003b02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003b06:	4907      	ldr	r1, [pc, #28]	; (8003b24 <TASK_4_USART_Send+0x30>)
 8003b08:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8003b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b10:	e9cd 2300 	strd	r2, r3, [sp]
 8003b14:	4622      	mov	r2, r4
 8003b16:	462b      	mov	r3, r5
 8003b18:	4803      	ldr	r0, [pc, #12]	; (8003b28 <TASK_4_USART_Send+0x34>)
 8003b1a:	f001 fd83 	bl	8005624 <iprintf>

  return;
 8003b1e:	bf00      	nop
}
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bdb0      	pop	{r4, r5, r7, pc}
 8003b24:	20000288 	.word	0x20000288
 8003b28:	08009f54 	.word	0x08009f54

08003b2c <TASK_6_LCD_Write>:

void TASK_6_LCD_Write( void )
{
 8003b2c:	b5b0      	push	{r4, r5, r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af04      	add	r7, sp, #16
  int EngineSpeedWhole = (int)( EngTrModel_Y.EngineSpeed );
 8003b32:	4b3e      	ldr	r3, [pc, #248]	; (8003c2c <TASK_6_LCD_Write+0x100>)
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	4610      	mov	r0, r2
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	f7fc ff8c 	bl	8000a58 <__aeabi_d2iz>
 8003b40:	4603      	mov	r3, r0
 8003b42:	617b      	str	r3, [r7, #20]
  int EngineSpeedDecimal = (int)( ( EngTrModel_Y.EngineSpeed - EngineSpeedWhole ) * 100 );
 8003b44:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <TASK_6_LCD_Write+0x100>)
 8003b46:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b4a:	6978      	ldr	r0, [r7, #20]
 8003b4c:	f7fc fc6a 	bl	8000424 <__aeabi_i2d>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4620      	mov	r0, r4
 8003b56:	4629      	mov	r1, r5
 8003b58:	f7fc fb16 	bl	8000188 <__aeabi_dsub>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4610      	mov	r0, r2
 8003b62:	4619      	mov	r1, r3
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	4b31      	ldr	r3, [pc, #196]	; (8003c30 <TASK_6_LCD_Write+0x104>)
 8003b6a:	f7fc fcc5 	bl	80004f8 <__aeabi_dmul>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	f7fc ff6f 	bl	8000a58 <__aeabi_d2iz>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	613b      	str	r3, [r7, #16]

  int VehicleSpeedWhole = (int)( EngTrModel_Y.VehicleSpeed );
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <TASK_6_LCD_Write+0x100>)
 8003b80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003b84:	4610      	mov	r0, r2
 8003b86:	4619      	mov	r1, r3
 8003b88:	f7fc ff66 	bl	8000a58 <__aeabi_d2iz>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	60fb      	str	r3, [r7, #12]
  int VehicleSpeedDecimal = (int)( ( EngTrModel_Y.VehicleSpeed - VehicleSpeedWhole ) * 100 );
 8003b90:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <TASK_6_LCD_Write+0x100>)
 8003b92:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f7fc fc44 	bl	8000424 <__aeabi_i2d>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	f7fc faf0 	bl	8000188 <__aeabi_dsub>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4610      	mov	r0, r2
 8003bae:	4619      	mov	r1, r3
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <TASK_6_LCD_Write+0x104>)
 8003bb6:	f7fc fc9f 	bl	80004f8 <__aeabi_dmul>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f7fc ff49 	bl	8000a58 <__aeabi_d2iz>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	60bb      	str	r3, [r7, #8]

  int GearWhole = (int) ( EngTrModel_Y.Gear );
 8003bca:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <TASK_6_LCD_Write+0x100>)
 8003bcc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f7fc ff40 	bl	8000a58 <__aeabi_d2iz>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	607b      	str	r3, [r7, #4]

  snprintf( FirstLine_LCD_MSG, sizeof(FirstLine_LCD_MSG), "E:%04d.%02d G:%01d  %c", EngineSpeedWhole, EngineSpeedDecimal, GearWhole, action );
 8003bdc:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <TASK_6_LCD_Write+0x108>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	9302      	str	r3, [sp, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	4a12      	ldr	r2, [pc, #72]	; (8003c38 <TASK_6_LCD_Write+0x10c>)
 8003bee:	2111      	movs	r1, #17
 8003bf0:	4812      	ldr	r0, [pc, #72]	; (8003c3c <TASK_6_LCD_Write+0x110>)
 8003bf2:	f001 fd29 	bl	8005648 <sniprintf>
  snprintf( SecondLine_LCD_MSG, sizeof(SecondLine_LCD_MSG), "V:%03d.%02d        ", VehicleSpeedWhole, VehicleSpeedDecimal );
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a10      	ldr	r2, [pc, #64]	; (8003c40 <TASK_6_LCD_Write+0x114>)
 8003bfe:	2111      	movs	r1, #17
 8003c00:	4810      	ldr	r0, [pc, #64]	; (8003c44 <TASK_6_LCD_Write+0x118>)
 8003c02:	f001 fd21 	bl	8005648 <sniprintf>

  LCD_Set_Cursor( 1, 1 );
 8003c06:	2101      	movs	r1, #1
 8003c08:	2001      	movs	r0, #1
 8003c0a:	f7ff fd89 	bl	8003720 <LCD_Set_Cursor>
  LCD_Put_Str( FirstLine_LCD_MSG );
 8003c0e:	480b      	ldr	r0, [pc, #44]	; (8003c3c <TASK_6_LCD_Write+0x110>)
 8003c10:	f7ff fda8 	bl	8003764 <LCD_Put_Str>
  LCD_Set_Cursor( 2, 1 );
 8003c14:	2101      	movs	r1, #1
 8003c16:	2002      	movs	r0, #2
 8003c18:	f7ff fd82 	bl	8003720 <LCD_Set_Cursor>
  LCD_Put_Str( SecondLine_LCD_MSG );
 8003c1c:	4809      	ldr	r0, [pc, #36]	; (8003c44 <TASK_6_LCD_Write+0x118>)
 8003c1e:	f7ff fda1 	bl	8003764 <LCD_Put_Str>

  return;
 8003c22:	bf00      	nop
}
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bdb0      	pop	{r4, r5, r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000288 	.word	0x20000288
 8003c30:	40590000 	.word	0x40590000
 8003c34:	2000000f 	.word	0x2000000f
 8003c38:	08009f60 	.word	0x08009f60
 8003c3c:	200002b0 	.word	0x200002b0
 8003c40:	08009f78 	.word	0x08009f78
 8003c44:	200002c4 	.word	0x200002c4

08003c48 <USER_MATRIX_KEYPAD_Init>:
};

// Initialize matrix keypad

void USER_MATRIX_KEYPAD_Init( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  // Pin PC5 (Row 1) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTC, 5, OUT_50, OUT_GP_PP );
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2203      	movs	r2, #3
 8003c50:	2105      	movs	r1, #5
 8003c52:	2002      	movs	r0, #2
 8003c54:	f7fe fae2 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTC, 5, 1 );
 8003c58:	2201      	movs	r2, #1
 8003c5a:	2105      	movs	r1, #5
 8003c5c:	2002      	movs	r0, #2
 8003c5e:	f7fe fb91 	bl	8002384 <USER_GPIO_Write>

  // Pin PA12 (Row 2) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTA, 12, OUT_50, OUT_GP_PP );
 8003c62:	2300      	movs	r3, #0
 8003c64:	2203      	movs	r2, #3
 8003c66:	210c      	movs	r1, #12
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f7fe fad7 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTA, 12, 1 );
 8003c6e:	2201      	movs	r2, #1
 8003c70:	210c      	movs	r1, #12
 8003c72:	2000      	movs	r0, #0
 8003c74:	f7fe fb86 	bl	8002384 <USER_GPIO_Write>

  // Pin PA11 (Row 3) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTA, 11, OUT_50, OUT_GP_PP );
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	210b      	movs	r1, #11
 8003c7e:	2000      	movs	r0, #0
 8003c80:	f7fe facc 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTA, 11, 1 );
 8003c84:	2201      	movs	r2, #1
 8003c86:	210b      	movs	r1, #11
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f7fe fb7b 	bl	8002384 <USER_GPIO_Write>

  // Pin PB12 (Row 4) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTB, 12, OUT_50, OUT_GP_PP );
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2203      	movs	r2, #3
 8003c92:	210c      	movs	r1, #12
 8003c94:	2001      	movs	r0, #1
 8003c96:	f7fe fac1 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 12, 1 );
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	210c      	movs	r1, #12
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f7fe fb70 	bl	8002384 <USER_GPIO_Write>

  // Pin PB1 (Col 1) as input pull up

  USER_GPIO_Define( PORTB, 1, INP, INP_PP );
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2101      	movs	r1, #1
 8003caa:	2001      	movs	r0, #1
 8003cac:	f7fe fab6 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 1, 1 );
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	f7fe fb65 	bl	8002384 <USER_GPIO_Write>

  // Pin PB15 (Col 2) as input pull up

  USER_GPIO_Define( PORTB, 15, INP, INP_PP );
 8003cba:	2302      	movs	r3, #2
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	210f      	movs	r1, #15
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f7fe faab 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 15, 1 );
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	210f      	movs	r1, #15
 8003cca:	2001      	movs	r0, #1
 8003ccc:	f7fe fb5a 	bl	8002384 <USER_GPIO_Write>

  // Pin PB14 (Col 3) as input pull up

  USER_GPIO_Define( PORTB, 14, INP, INP_PP );
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	210e      	movs	r1, #14
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f7fe faa0 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 14, 1 );
 8003cdc:	2201      	movs	r2, #1
 8003cde:	210e      	movs	r1, #14
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	f7fe fb4f 	bl	8002384 <USER_GPIO_Write>

  // Pin PB13 (Col 4) as input pull up

  USER_GPIO_Define( PORTB, 13, INP, INP_PP );
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	2200      	movs	r2, #0
 8003cea:	210d      	movs	r1, #13
 8003cec:	2001      	movs	r0, #1
 8003cee:	f7fe fa95 	bl	800221c <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 13, 1 );
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	210d      	movs	r1, #13
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f7fe fb44 	bl	8002384 <USER_GPIO_Write>
}
 8003cfc:	bf00      	nop
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <USER_MATRIX_KEYPAD_Read>:

// Read matrix keypad

char USER_MATRIX_KEYPAD_Read( void )
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
  char selectedKey = 'N';				// Default character
 8003d06:	234e      	movs	r3, #78	; 0x4e
 8003d08:	71fb      	strb	r3, [r7, #7]

  for (uint8_t i = 0; i < NUMBER_OF_ELEMENTS; i++)
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	71bb      	strb	r3, [r7, #6]
 8003d0e:	e061      	b.n	8003dd4 <USER_MATRIX_KEYPAD_Read+0xd4>
  {
    if( i == 0 )
 8003d10:	79bb      	ldrb	r3, [r7, #6]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d108      	bne.n	8003d28 <USER_MATRIX_KEYPAD_Read+0x28>
    {
       GPIOC->BSRR = (1 << (R_POSITIONS[i] + 16));
 8003d16:	79bb      	ldrb	r3, [r7, #6]
 8003d18:	4a33      	ldr	r2, [pc, #204]	; (8003de8 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8003d1a:	5cd3      	ldrb	r3, [r2, r3]
 8003d1c:	3310      	adds	r3, #16
 8003d1e:	2201      	movs	r2, #1
 8003d20:	409a      	lsls	r2, r3
 8003d22:	4b32      	ldr	r3, [pc, #200]	; (8003dec <USER_MATRIX_KEYPAD_Read+0xec>)
 8003d24:	611a      	str	r2, [r3, #16]
 8003d26:	e013      	b.n	8003d50 <USER_MATRIX_KEYPAD_Read+0x50>
    }
    else if( i == 3 )
 8003d28:	79bb      	ldrb	r3, [r7, #6]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d108      	bne.n	8003d40 <USER_MATRIX_KEYPAD_Read+0x40>
    {
       GPIOB->BSRR = (1 << (R_POSITIONS[i] + 16));
 8003d2e:	79bb      	ldrb	r3, [r7, #6]
 8003d30:	4a2d      	ldr	r2, [pc, #180]	; (8003de8 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8003d32:	5cd3      	ldrb	r3, [r2, r3]
 8003d34:	3310      	adds	r3, #16
 8003d36:	2201      	movs	r2, #1
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <USER_MATRIX_KEYPAD_Read+0xf0>)
 8003d3c:	611a      	str	r2, [r3, #16]
 8003d3e:	e007      	b.n	8003d50 <USER_MATRIX_KEYPAD_Read+0x50>
    }
    else
    {
       GPIOA->BSRR = (1 << (R_POSITIONS[i] + 16));
 8003d40:	79bb      	ldrb	r3, [r7, #6]
 8003d42:	4a29      	ldr	r2, [pc, #164]	; (8003de8 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8003d44:	5cd3      	ldrb	r3, [r2, r3]
 8003d46:	3310      	adds	r3, #16
 8003d48:	2201      	movs	r2, #1
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	4b29      	ldr	r3, [pc, #164]	; (8003df4 <USER_MATRIX_KEYPAD_Read+0xf4>)
 8003d4e:	611a      	str	r2, [r3, #16]
    }

    for (uint8_t j = 0; j < NUMBER_OF_ELEMENTS; j++)
 8003d50:	2300      	movs	r3, #0
 8003d52:	717b      	strb	r3, [r7, #5]
 8003d54:	e015      	b.n	8003d82 <USER_MATRIX_KEYPAD_Read+0x82>
    {
      if ((GPIOB->IDR & (1 << C_POSITIONS[j])) == 0)
 8003d56:	4b26      	ldr	r3, [pc, #152]	; (8003df0 <USER_MATRIX_KEYPAD_Read+0xf0>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	797a      	ldrb	r2, [r7, #5]
 8003d5c:	4926      	ldr	r1, [pc, #152]	; (8003df8 <USER_MATRIX_KEYPAD_Read+0xf8>)
 8003d5e:	5c8a      	ldrb	r2, [r1, r2]
 8003d60:	4611      	mov	r1, r2
 8003d62:	2201      	movs	r2, #1
 8003d64:	408a      	lsls	r2, r1
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d107      	bne.n	8003d7c <USER_MATRIX_KEYPAD_Read+0x7c>
      {
	  selectedKey = keys[i][j];
 8003d6c:	79ba      	ldrb	r2, [r7, #6]
 8003d6e:	797b      	ldrb	r3, [r7, #5]
 8003d70:	4922      	ldr	r1, [pc, #136]	; (8003dfc <USER_MATRIX_KEYPAD_Read+0xfc>)
 8003d72:	0092      	lsls	r2, r2, #2
 8003d74:	440a      	add	r2, r1
 8003d76:	4413      	add	r3, r2
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < NUMBER_OF_ELEMENTS; j++)
 8003d7c:	797b      	ldrb	r3, [r7, #5]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	717b      	strb	r3, [r7, #5]
 8003d82:	797b      	ldrb	r3, [r7, #5]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d9e6      	bls.n	8003d56 <USER_MATRIX_KEYPAD_Read+0x56>
      }
    }

    if( i == 0 )
 8003d88:	79bb      	ldrb	r3, [r7, #6]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <USER_MATRIX_KEYPAD_Read+0xa2>
    {
      GPIOC->BSRR = (1 << R_POSITIONS[i]);
 8003d8e:	79bb      	ldrb	r3, [r7, #6]
 8003d90:	4a15      	ldr	r2, [pc, #84]	; (8003de8 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8003d92:	5cd3      	ldrb	r3, [r2, r3]
 8003d94:	461a      	mov	r2, r3
 8003d96:	2301      	movs	r3, #1
 8003d98:	fa03 f202 	lsl.w	r2, r3, r2
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <USER_MATRIX_KEYPAD_Read+0xec>)
 8003d9e:	611a      	str	r2, [r3, #16]
 8003da0:	e015      	b.n	8003dce <USER_MATRIX_KEYPAD_Read+0xce>
    }
    else if( i == 3 )
 8003da2:	79bb      	ldrb	r3, [r7, #6]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d109      	bne.n	8003dbc <USER_MATRIX_KEYPAD_Read+0xbc>
    {
      GPIOB->BSRR = (1 << R_POSITIONS[i]);
 8003da8:	79bb      	ldrb	r3, [r7, #6]
 8003daa:	4a0f      	ldr	r2, [pc, #60]	; (8003de8 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8003dac:	5cd3      	ldrb	r3, [r2, r3]
 8003dae:	461a      	mov	r2, r3
 8003db0:	2301      	movs	r3, #1
 8003db2:	fa03 f202 	lsl.w	r2, r3, r2
 8003db6:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <USER_MATRIX_KEYPAD_Read+0xf0>)
 8003db8:	611a      	str	r2, [r3, #16]
 8003dba:	e008      	b.n	8003dce <USER_MATRIX_KEYPAD_Read+0xce>
    }
    else
    {
      GPIOA->BSRR = (1 << R_POSITIONS[i]);
 8003dbc:	79bb      	ldrb	r3, [r7, #6]
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8003dc0:	5cd3      	ldrb	r3, [r2, r3]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	fa03 f202 	lsl.w	r2, r3, r2
 8003dca:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <USER_MATRIX_KEYPAD_Read+0xf4>)
 8003dcc:	611a      	str	r2, [r3, #16]
  for (uint8_t i = 0; i < NUMBER_OF_ELEMENTS; i++)
 8003dce:	79bb      	ldrb	r3, [r7, #6]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	71bb      	strb	r3, [r7, #6]
 8003dd4:	79bb      	ldrb	r3, [r7, #6]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d99a      	bls.n	8003d10 <USER_MATRIX_KEYPAD_Read+0x10>
    }
  }

  return selectedKey;
 8003dda:	79fb      	ldrb	r3, [r7, #7]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000010 	.word	0x20000010
 8003dec:	40011000 	.word	0x40011000
 8003df0:	40010c00 	.word	0x40010c00
 8003df4:	40010800 	.word	0x40010800
 8003df8:	20000014 	.word	0x20000014
 8003dfc:	20000018 	.word	0x20000018

08003e00 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003e06:	2340      	movs	r3, #64	; 0x40
 8003e08:	617b      	str	r3, [r7, #20]
  real_T inf = 0.0;
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d10a      	bne.n	8003e32 <rtGetInf+0x32>
    inf = rtGetInfF();
 8003e1c:	f000 f836 	bl	8003e8c <rtGetInfF>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc fb10 	bl	8000448 <__aeabi_f2d>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003e30:	e022      	b.n	8003e78 <rtGetInf+0x78>
  } else {
    uint16_T one = 1U;
 8003e32:	2301      	movs	r3, #1
 8003e34:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003e36:	f107 0310 	add.w	r3, r7, #16
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	bf14      	ite	ne
 8003e40:	2301      	movne	r3, #1
 8003e42:	2300      	moveq	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8003e48:	7cfb      	ldrb	r3, [r7, #19]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <rtGetInf+0x54>
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d009      	beq.n	8003e66 <rtGetInf+0x66>
 8003e52:	e011      	b.n	8003e78 <rtGetInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8003e54:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <rtGetInf+0x88>)
 8003e56:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60bb      	str	r3, [r7, #8]
        inf = tmpVal.fltVal;
 8003e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e60:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003e64:	e008      	b.n	8003e78 <rtGetInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <rtGetInf+0x88>)
 8003e68:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	607b      	str	r3, [r7, #4]
        inf = tmpVal.fltVal;
 8003e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e72:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003e76:	bf00      	nop
      }
    }
  }

  return inf;
 8003e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4619      	mov	r1, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	7ff00000 	.word	0x7ff00000

08003e8c <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8003e92:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8003e96:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8003e98:	687b      	ldr	r3, [r7, #4]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003eaa:	2340      	movs	r3, #64	; 0x40
 8003eac:	617b      	str	r3, [r7, #20]
  real_T minf = 0.0;
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d10a      	bne.n	8003ed6 <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 8003ec0:	f000 f836 	bl	8003f30 <rtGetMinusInfF>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fc fabe 	bl	8000448 <__aeabi_f2d>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003ed4:	e022      	b.n	8003f1c <rtGetMinusInf+0x78>
  } else {
    uint16_T one = 1U;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003eda:	f107 0310 	add.w	r3, r7, #16
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <rtGetMinusInf+0x54>
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d009      	beq.n	8003f0a <rtGetMinusInf+0x66>
 8003ef6:	e011      	b.n	8003f1c <rtGetMinusInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <rtGetMinusInf+0x88>)
 8003efa:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60bb      	str	r3, [r7, #8]
        minf = tmpVal.fltVal;
 8003f00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f04:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003f08:	e008      	b.n	8003f1c <rtGetMinusInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <rtGetMinusInf+0x88>)
 8003f0c:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	607b      	str	r3, [r7, #4]
        minf = tmpVal.fltVal;
 8003f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f16:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003f1a:	bf00      	nop
      }
    }
  }

  return minf;
 8003f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003f20:	4610      	mov	r0, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	fff00000 	.word	0xfff00000

08003f30 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8003f36:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <rtGetMinusInfF+0x18>)
 8003f38:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8003f3a:	687b      	ldr	r3, [r7, #4]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	ff800000 	.word	0xff800000

08003f4c <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003f52:	2340      	movs	r3, #64	; 0x40
 8003f54:	617b      	str	r3, [r7, #20]
  real_T nan = 0.0;
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d10a      	bne.n	8003f7e <rtGetNaN+0x32>
    nan = rtGetNaNF();
 8003f68:	f000 f838 	bl	8003fdc <rtGetNaNF>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fc fa6a 	bl	8000448 <__aeabi_f2d>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003f7c:	e024      	b.n	8003fc8 <rtGetNaN+0x7c>
  } else {
    uint16_T one = 1U;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003f82:	f107 0310 	add.w	r3, r7, #16
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	bf14      	ite	ne
 8003f8c:	2301      	movne	r3, #1
 8003f8e:	2300      	moveq	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <rtGetNaN+0x54>
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d009      	beq.n	8003fb2 <rtGetNaN+0x66>
 8003f9e:	e013      	b.n	8003fc8 <rtGetNaN+0x7c>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8003fa0:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <rtGetNaN+0x8c>)
 8003fa2:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60bb      	str	r3, [r7, #8]
        nan = tmpVal.fltVal;
 8003fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fac:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003fb0:	e00a      	b.n	8003fc8 <rtGetNaN+0x7c>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;
 8003fb2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003fb6:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fbc:	607b      	str	r3, [r7, #4]
        nan = tmpVal.fltVal;
 8003fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003fc6:	bf00      	nop
      }
    }
  }

  return nan;
 8003fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	fff80000 	.word	0xfff80000

08003fdc <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	60bb      	str	r3, [r7, #8]

  uint16_T one = 1U;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	80fb      	strh	r3, [r7, #6]
  enum {
    LittleEndian,
    BigEndian
  } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003fec:	1dbb      	adds	r3, r7, #6
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	73fb      	strb	r3, [r7, #15]
  switch (machByteOrder) {
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <rtGetNaNF+0x2c>
 8004002:	2b01      	cmp	r3, #1
 8004004:	d003      	beq.n	800400e <rtGetNaNF+0x32>
 8004006:	e006      	b.n	8004016 <rtGetNaNF+0x3a>
   case LittleEndian:
    {
      nanF.wordL.wordLuint = 0xFFC00000U;
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <rtGetNaNF+0x48>)
 800400a:	60bb      	str	r3, [r7, #8]
      break;
 800400c:	e003      	b.n	8004016 <rtGetNaNF+0x3a>
    }

   case BigEndian:
    {
      nanF.wordL.wordLuint = 0x7FFFFFFFU;
 800400e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004012:	60bb      	str	r3, [r7, #8]
      break;
 8004014:	bf00      	nop
    }
  }

  return nanF.wordL.wordLreal;
 8004016:	68bb      	ldr	r3, [r7, #8]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	ffc00000 	.word	0xffc00000

08004028 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8004030:	f7ff ff8c 	bl	8003f4c <rtGetNaN>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4911      	ldr	r1, [pc, #68]	; (8004080 <rt_InitInfAndNaN+0x58>)
 800403a:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 800403e:	f7ff ffcd 	bl	8003fdc <rtGetNaNF>
 8004042:	4603      	mov	r3, r0
 8004044:	4a0f      	ldr	r2, [pc, #60]	; (8004084 <rt_InitInfAndNaN+0x5c>)
 8004046:	6013      	str	r3, [r2, #0]
  rtInf = rtGetInf();
 8004048:	f7ff feda 	bl	8003e00 <rtGetInf>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	490d      	ldr	r1, [pc, #52]	; (8004088 <rt_InitInfAndNaN+0x60>)
 8004052:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 8004056:	f7ff ff19 	bl	8003e8c <rtGetInfF>
 800405a:	4603      	mov	r3, r0
 800405c:	4a0b      	ldr	r2, [pc, #44]	; (800408c <rt_InitInfAndNaN+0x64>)
 800405e:	6013      	str	r3, [r2, #0]
  rtMinusInf = rtGetMinusInf();
 8004060:	f7ff ff20 	bl	8003ea4 <rtGetMinusInf>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4909      	ldr	r1, [pc, #36]	; (8004090 <rt_InitInfAndNaN+0x68>)
 800406a:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 800406e:	f7ff ff5f 	bl	8003f30 <rtGetMinusInfF>
 8004072:	4603      	mov	r3, r0
 8004074:	4a07      	ldr	r2, [pc, #28]	; (8004094 <rt_InitInfAndNaN+0x6c>)
 8004076:	6013      	str	r3, [r2, #0]
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	200006e8 	.word	0x200006e8
 8004084:	200006f8 	.word	0x200006f8
 8004088:	200006d8 	.word	0x200006d8
 800408c:	200006f0 	.word	0x200006f0
 8004090:	200006e0 	.word	0x200006e0
 8004094:	200006f4 	.word	0x200006f4

08004098 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 80040a2:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <rtIsInf+0x40>)
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040ac:	f7fc fc8c 	bl	80009c8 <__aeabi_dcmpeq>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <rtIsInf+0x32>
 80040b6:	4b09      	ldr	r3, [pc, #36]	; (80040dc <rtIsInf+0x44>)
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040c0:	f7fc fc82 	bl	80009c8 <__aeabi_dcmpeq>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <rtIsInf+0x36>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <rtIsInf+0x38>
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	200006d8 	.word	0x200006d8
 80040dc:	200006e0 	.word	0x200006e0

080040e0 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	; 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	e9c7 0100 	strd	r0, r1, [r7]
  boolean_T result = (boolean_T) 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80040f0:	2340      	movs	r3, #64	; 0x40
 80040f2:	623b      	str	r3, [r7, #32]
  if (bitsPerReal == 32U) {
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d10b      	bne.n	8004112 <rtIsNaN+0x32>
    result = rtIsNaNF((real32_T)value);
 80040fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040fe:	f7fc fcf3 	bl	8000ae8 <__aeabi_d2f>
 8004102:	4603      	mov	r3, r0
 8004104:	4618      	mov	r0, r3
 8004106:	f000 f84d 	bl	80041a4 <rtIsNaNF>
 800410a:	4603      	mov	r3, r0
 800410c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004110:	e040      	b.n	8004194 <rtIsNaN+0xb4>
  } else {
    uint16_T one = 1U;
 8004112:	2301      	movs	r3, #1
 8004114:	83bb      	strh	r3, [r7, #28]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8004116:	f107 031c 	add.w	r3, r7, #28
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	bf14      	ite	ne
 8004120:	2301      	movne	r3, #1
 8004122:	2300      	moveq	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	77fb      	strb	r3, [r7, #31]
    switch (machByteOrder) {
 8004128:	7ffb      	ldrb	r3, [r7, #31]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <rtIsNaN+0x54>
 800412e:	2b01      	cmp	r3, #1
 8004130:	d018      	beq.n	8004164 <rtIsNaN+0x84>
 8004132:	e02f      	b.n	8004194 <rtIsNaN+0xb4>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8004134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004138:	e9c7 2304 	strd	r2, r3, [r7, #16]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4b18      	ldr	r3, [pc, #96]	; (80041a0 <rtIsNaN+0xc0>)
 8004140:	4013      	ands	r3, r2
                             0x7FF00000 &&
 8004142:	4a17      	ldr	r2, [pc, #92]	; (80041a0 <rtIsNaN+0xc0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d109      	bne.n	800415c <rtIsNaN+0x7c>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 800414e:	2b00      	cmp	r3, #0
 8004150:	d102      	bne.n	8004158 <rtIsNaN+0x78>
                              (tmpVal.bitVal.words.wordL != 0) ));
 8004152:	693b      	ldr	r3, [r7, #16]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <rtIsNaN+0x7c>
                             0x7FF00000 &&
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <rtIsNaN+0x7e>
 800415c:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800415e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 8004162:	e017      	b.n	8004194 <rtIsNaN+0xb4>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8004164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004168:	e9c7 2302 	strd	r2, r3, [r7, #8]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <rtIsNaN+0xc0>)
 8004170:	4013      	ands	r3, r2
                             0x7FF00000 &&
 8004172:	4a0b      	ldr	r2, [pc, #44]	; (80041a0 <rtIsNaN+0xc0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d109      	bne.n	800418c <rtIsNaN+0xac>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <rtIsNaN+0xa8>
                              (tmpVal.bitVal.words.wordL != 0) ));
 8004182:	68fb      	ldr	r3, [r7, #12]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <rtIsNaN+0xac>
                             0x7FF00000 &&
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <rtIsNaN+0xae>
 800418c:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800418e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 8004192:	bf00      	nop
      }
    }
  }

  return result;
 8004194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004198:	4618      	mov	r0, r3
 800419a:	3728      	adds	r7, #40	; 0x28
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	7ff00000 	.word	0x7ff00000

080041a4 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 80041b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80041ba:	d106      	bne.n	80041ca <rtIsNaNF+0x26>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <rtIsNaNF+0x26>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <rtIsNaNF+0x28>
 80041ca:	2300      	movs	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return 1;
 80041dc:	2301      	movs	r3, #1
}
 80041de:	4618      	mov	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <_kill>:

int _kill(int pid, int sig)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041f0:	f001 fb14 	bl	800581c <__errno>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2216      	movs	r2, #22
 80041f8:	601a      	str	r2, [r3, #0]
  return -1;
 80041fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <_exit>:

void _exit (int status)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800420e:	f04f 31ff 	mov.w	r1, #4294967295
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff ffe7 	bl	80041e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004218:	e7fe      	b.n	8004218 <_exit+0x12>

0800421a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b086      	sub	sp, #24
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e00a      	b.n	8004242 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800422c:	f3af 8000 	nop.w
 8004230:	4601      	mov	r1, r0
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	60ba      	str	r2, [r7, #8]
 8004238:	b2ca      	uxtb	r2, r1
 800423a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	3301      	adds	r3, #1
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	429a      	cmp	r2, r3
 8004248:	dbf0      	blt.n	800422c <_read+0x12>
  }

  return len;
 800424a:	687b      	ldr	r3, [r7, #4]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800425c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr

0800426a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800427a:	605a      	str	r2, [r3, #4]
  return 0;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <_isatty>:

int _isatty(int file)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004290:	2301      	movs	r3, #1
}
 8004292:	4618      	mov	r0, r3
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042bc:	4a14      	ldr	r2, [pc, #80]	; (8004310 <_sbrk+0x5c>)
 80042be:	4b15      	ldr	r3, [pc, #84]	; (8004314 <_sbrk+0x60>)
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042c8:	4b13      	ldr	r3, [pc, #76]	; (8004318 <_sbrk+0x64>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042d0:	4b11      	ldr	r3, [pc, #68]	; (8004318 <_sbrk+0x64>)
 80042d2:	4a12      	ldr	r2, [pc, #72]	; (800431c <_sbrk+0x68>)
 80042d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <_sbrk+0x64>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d207      	bcs.n	80042f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042e4:	f001 fa9a 	bl	800581c <__errno>
 80042e8:	4603      	mov	r3, r0
 80042ea:	220c      	movs	r2, #12
 80042ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295
 80042f2:	e009      	b.n	8004308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042f4:	4b08      	ldr	r3, [pc, #32]	; (8004318 <_sbrk+0x64>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <_sbrk+0x64>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	4a05      	ldr	r2, [pc, #20]	; (8004318 <_sbrk+0x64>)
 8004304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004306:	68fb      	ldr	r3, [r7, #12]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20005000 	.word	0x20005000
 8004314:	00000400 	.word	0x00000400
 8004318:	200006fc 	.word	0x200006fc
 800431c:	20000850 	.word	0x20000850

08004320 <USER_TIM_Init>:
#include "main.h"

// Initialize TIM timer

void USER_TIM_Init( uint8_t TIM )
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	71fb      	strb	r3, [r7, #7]
  if( TIM == 0 )
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d12e      	bne.n	800438e <USER_TIM_Init+0x6e>
  {
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM2EN;	// Clock enable for TIM2
 8004330:	4b55      	ldr	r3, [pc, #340]	; (8004488 <USER_TIM_Init+0x168>)
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	4a54      	ldr	r2, [pc, #336]	; (8004488 <USER_TIM_Init+0x168>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	61d3      	str	r3, [r2, #28]

    TIM2->SMCR		&=	~(TIM_SMCR_SMS);	// Step 1 - Enable internal clock source
 800433c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004346:	f023 0307 	bic.w	r3, r3, #7
 800434a:	6093      	str	r3, [r2, #8]
    TIM2->CR1		&=	~(TIM_CR1_UDIS);	// Step 2 - UEV enabled
 800434c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004356:	f023 0302 	bic.w	r3, r3, #2
 800435a:	6013      	str	r3, [r2, #0]
    TIM2->CR1		&=	~(TIM_CR1_DIR);		// 	Counter as upcounter
 800435c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004366:	f023 0310 	bic.w	r3, r3, #16
 800436a:	6013      	str	r3, [r2, #0]
    TIM2->CR1		&=	~(TIM_CR1_CMS);		//	Edge-aligned mode
 800436c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004376:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800437a:	6013      	str	r3, [r2, #0]
    TIM2->SR		&=	~(TIM_SR_UIF);		// Step 3 - Clear Update Interrupt Flag
 800437c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	6113      	str	r3, [r2, #16]
    TIM5->CR1		&=	~(TIM_CR1_UDIS);
    TIM5->CR1		&=	~(TIM_CR1_DIR);
    TIM5->CR1		&=	~(TIM_CR1_CMS);
    TIM5->SR		&=	~(TIM_SR_UIF);
  }
}
 800438c:	e076      	b.n	800447c <USER_TIM_Init+0x15c>
  else if( TIM == 1 )
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d124      	bne.n	80043de <USER_TIM_Init+0xbe>
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM3EN;	// Clock enable for TIM3
 8004394:	4b3c      	ldr	r3, [pc, #240]	; (8004488 <USER_TIM_Init+0x168>)
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	4a3b      	ldr	r2, [pc, #236]	; (8004488 <USER_TIM_Init+0x168>)
 800439a:	f043 0302 	orr.w	r3, r3, #2
 800439e:	61d3      	str	r3, [r2, #28]
    TIM3->SMCR		&=	~(TIM_SMCR_SMS);
 80043a0:	4b3a      	ldr	r3, [pc, #232]	; (800448c <USER_TIM_Init+0x16c>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4a39      	ldr	r2, [pc, #228]	; (800448c <USER_TIM_Init+0x16c>)
 80043a6:	f023 0307 	bic.w	r3, r3, #7
 80043aa:	6093      	str	r3, [r2, #8]
    TIM3->CR1		&=	~(TIM_CR1_UDIS);
 80043ac:	4b37      	ldr	r3, [pc, #220]	; (800448c <USER_TIM_Init+0x16c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a36      	ldr	r2, [pc, #216]	; (800448c <USER_TIM_Init+0x16c>)
 80043b2:	f023 0302 	bic.w	r3, r3, #2
 80043b6:	6013      	str	r3, [r2, #0]
    TIM3->CR1		&=	~(TIM_CR1_DIR);
 80043b8:	4b34      	ldr	r3, [pc, #208]	; (800448c <USER_TIM_Init+0x16c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a33      	ldr	r2, [pc, #204]	; (800448c <USER_TIM_Init+0x16c>)
 80043be:	f023 0310 	bic.w	r3, r3, #16
 80043c2:	6013      	str	r3, [r2, #0]
    TIM3->CR1		&=	~(TIM_CR1_CMS);
 80043c4:	4b31      	ldr	r3, [pc, #196]	; (800448c <USER_TIM_Init+0x16c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a30      	ldr	r2, [pc, #192]	; (800448c <USER_TIM_Init+0x16c>)
 80043ca:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80043ce:	6013      	str	r3, [r2, #0]
    TIM3->SR		&=	~(TIM_SR_UIF);
 80043d0:	4b2e      	ldr	r3, [pc, #184]	; (800448c <USER_TIM_Init+0x16c>)
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	4a2d      	ldr	r2, [pc, #180]	; (800448c <USER_TIM_Init+0x16c>)
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	6113      	str	r3, [r2, #16]
}
 80043dc:	e04e      	b.n	800447c <USER_TIM_Init+0x15c>
  else if( TIM == 2 )
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d124      	bne.n	800442e <USER_TIM_Init+0x10e>
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM4EN;	// Clock enable for TIM4
 80043e4:	4b28      	ldr	r3, [pc, #160]	; (8004488 <USER_TIM_Init+0x168>)
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	4a27      	ldr	r2, [pc, #156]	; (8004488 <USER_TIM_Init+0x168>)
 80043ea:	f043 0304 	orr.w	r3, r3, #4
 80043ee:	61d3      	str	r3, [r2, #28]
    TIM4->SMCR		&=	~(TIM_SMCR_SMS);
 80043f0:	4b27      	ldr	r3, [pc, #156]	; (8004490 <USER_TIM_Init+0x170>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	4a26      	ldr	r2, [pc, #152]	; (8004490 <USER_TIM_Init+0x170>)
 80043f6:	f023 0307 	bic.w	r3, r3, #7
 80043fa:	6093      	str	r3, [r2, #8]
    TIM4->CR1		&=	~(TIM_CR1_UDIS);
 80043fc:	4b24      	ldr	r3, [pc, #144]	; (8004490 <USER_TIM_Init+0x170>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a23      	ldr	r2, [pc, #140]	; (8004490 <USER_TIM_Init+0x170>)
 8004402:	f023 0302 	bic.w	r3, r3, #2
 8004406:	6013      	str	r3, [r2, #0]
    TIM4->CR1		&=	~(TIM_CR1_DIR);
 8004408:	4b21      	ldr	r3, [pc, #132]	; (8004490 <USER_TIM_Init+0x170>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a20      	ldr	r2, [pc, #128]	; (8004490 <USER_TIM_Init+0x170>)
 800440e:	f023 0310 	bic.w	r3, r3, #16
 8004412:	6013      	str	r3, [r2, #0]
    TIM4->CR1		&=	~(TIM_CR1_CMS);
 8004414:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <USER_TIM_Init+0x170>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <USER_TIM_Init+0x170>)
 800441a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800441e:	6013      	str	r3, [r2, #0]
    TIM4->SR		&=	~(TIM_SR_UIF);
 8004420:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <USER_TIM_Init+0x170>)
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	4a1a      	ldr	r2, [pc, #104]	; (8004490 <USER_TIM_Init+0x170>)
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	6113      	str	r3, [r2, #16]
}
 800442c:	e026      	b.n	800447c <USER_TIM_Init+0x15c>
  else if( TIM == 3 )
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d123      	bne.n	800447c <USER_TIM_Init+0x15c>
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM5EN;	// Clock enable for TIM5
 8004434:	4b14      	ldr	r3, [pc, #80]	; (8004488 <USER_TIM_Init+0x168>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	4a13      	ldr	r2, [pc, #76]	; (8004488 <USER_TIM_Init+0x168>)
 800443a:	f043 0308 	orr.w	r3, r3, #8
 800443e:	61d3      	str	r3, [r2, #28]
    TIM5->SMCR		&=	~(TIM_SMCR_SMS);
 8004440:	4b14      	ldr	r3, [pc, #80]	; (8004494 <USER_TIM_Init+0x174>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4a13      	ldr	r2, [pc, #76]	; (8004494 <USER_TIM_Init+0x174>)
 8004446:	f023 0307 	bic.w	r3, r3, #7
 800444a:	6093      	str	r3, [r2, #8]
    TIM5->CR1		&=	~(TIM_CR1_UDIS);
 800444c:	4b11      	ldr	r3, [pc, #68]	; (8004494 <USER_TIM_Init+0x174>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a10      	ldr	r2, [pc, #64]	; (8004494 <USER_TIM_Init+0x174>)
 8004452:	f023 0302 	bic.w	r3, r3, #2
 8004456:	6013      	str	r3, [r2, #0]
    TIM5->CR1		&=	~(TIM_CR1_DIR);
 8004458:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <USER_TIM_Init+0x174>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0d      	ldr	r2, [pc, #52]	; (8004494 <USER_TIM_Init+0x174>)
 800445e:	f023 0310 	bic.w	r3, r3, #16
 8004462:	6013      	str	r3, [r2, #0]
    TIM5->CR1		&=	~(TIM_CR1_CMS);
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <USER_TIM_Init+0x174>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <USER_TIM_Init+0x174>)
 800446a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800446e:	6013      	str	r3, [r2, #0]
    TIM5->SR		&=	~(TIM_SR_UIF);
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <USER_TIM_Init+0x174>)
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	4a07      	ldr	r2, [pc, #28]	; (8004494 <USER_TIM_Init+0x174>)
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	6113      	str	r3, [r2, #16]
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	40000400 	.word	0x40000400
 8004490:	40000800 	.word	0x40000800
 8004494:	40000c00 	.word	0x40000c00

08004498 <USER_TIM_Delay>:

// Generate delay via TIM timer

void USER_TIM_Delay( uint8_t TIM, uint16_t TIM_PSC, uint16_t TIM_CNT )
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
 80044a2:	460b      	mov	r3, r1
 80044a4:	80bb      	strh	r3, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	807b      	strh	r3, [r7, #2]
  if( TIM == 0 )
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d128      	bne.n	8004502 <USER_TIM_Delay+0x6a>
  {
    TIM2->PSC	=	TIM_PSC;			// Configure initial prescaler and count values
 80044b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044b4:	88bb      	ldrh	r3, [r7, #4]
 80044b6:	6293      	str	r3, [r2, #40]	; 0x28
    TIM2->CNT	=	TIM_CNT;
 80044b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044bc:	887b      	ldrh	r3, [r7, #2]
 80044be:	6253      	str	r3, [r2, #36]	; 0x24

    TIM2->CR1	|=	TIM_CR1_CEN;			// Enable TIM2 timer to start counting
 80044c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6013      	str	r3, [r2, #0]

    while(!( TIM2->SR & TIM_SR_UIF ));			// Wait for UIF
 80044d0:	bf00      	nop
 80044d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f8      	beq.n	80044d2 <USER_TIM_Delay+0x3a>
    TIM2->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM2 timer
 80044e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	6013      	str	r3, [r2, #0]

    TIM2->SR	&=	~(TIM_SR_UIF);			// Clear UIF
 80044f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	6113      	str	r3, [r2, #16]
    while(!( TIM5->SR & TIM_SR_UIF ));
    TIM5->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM5 timer

    TIM5->SR	&=	~(TIM_SR_UIF);
  }
}
 8004500:	e067      	b.n	80045d2 <USER_TIM_Delay+0x13a>
  else if( TIM == 1 )
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d11f      	bne.n	8004548 <USER_TIM_Delay+0xb0>
    TIM3->PSC	=	TIM_PSC;
 8004508:	4a34      	ldr	r2, [pc, #208]	; (80045dc <USER_TIM_Delay+0x144>)
 800450a:	88bb      	ldrh	r3, [r7, #4]
 800450c:	6293      	str	r3, [r2, #40]	; 0x28
    TIM3->CNT	=	TIM_CNT;
 800450e:	4a33      	ldr	r2, [pc, #204]	; (80045dc <USER_TIM_Delay+0x144>)
 8004510:	887b      	ldrh	r3, [r7, #2]
 8004512:	6253      	str	r3, [r2, #36]	; 0x24
    TIM3->CR1	|=	TIM_CR1_CEN;			// Enable TIM3 timer to start counting
 8004514:	4b31      	ldr	r3, [pc, #196]	; (80045dc <USER_TIM_Delay+0x144>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a30      	ldr	r2, [pc, #192]	; (80045dc <USER_TIM_Delay+0x144>)
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	6013      	str	r3, [r2, #0]
    while(!( TIM3->SR & TIM_SR_UIF ));
 8004520:	bf00      	nop
 8004522:	4b2e      	ldr	r3, [pc, #184]	; (80045dc <USER_TIM_Delay+0x144>)
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f9      	beq.n	8004522 <USER_TIM_Delay+0x8a>
    TIM3->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM3 timer
 800452e:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <USER_TIM_Delay+0x144>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <USER_TIM_Delay+0x144>)
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	6013      	str	r3, [r2, #0]
    TIM3->SR	&=	~(TIM_SR_UIF);
 800453a:	4b28      	ldr	r3, [pc, #160]	; (80045dc <USER_TIM_Delay+0x144>)
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	4a27      	ldr	r2, [pc, #156]	; (80045dc <USER_TIM_Delay+0x144>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	6113      	str	r3, [r2, #16]
}
 8004546:	e044      	b.n	80045d2 <USER_TIM_Delay+0x13a>
  else if( TIM == 2 )
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d11f      	bne.n	800458e <USER_TIM_Delay+0xf6>
    TIM4->PSC	=	TIM_PSC;
 800454e:	4a24      	ldr	r2, [pc, #144]	; (80045e0 <USER_TIM_Delay+0x148>)
 8004550:	88bb      	ldrh	r3, [r7, #4]
 8004552:	6293      	str	r3, [r2, #40]	; 0x28
    TIM4->CNT	=	TIM_CNT;
 8004554:	4a22      	ldr	r2, [pc, #136]	; (80045e0 <USER_TIM_Delay+0x148>)
 8004556:	887b      	ldrh	r3, [r7, #2]
 8004558:	6253      	str	r3, [r2, #36]	; 0x24
    TIM4->CR1	|=	TIM_CR1_CEN;			// Enable TIM4 timer to start counting
 800455a:	4b21      	ldr	r3, [pc, #132]	; (80045e0 <USER_TIM_Delay+0x148>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a20      	ldr	r2, [pc, #128]	; (80045e0 <USER_TIM_Delay+0x148>)
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	6013      	str	r3, [r2, #0]
    while(!( TIM4->SR & TIM_SR_UIF ));
 8004566:	bf00      	nop
 8004568:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <USER_TIM_Delay+0x148>)
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f9      	beq.n	8004568 <USER_TIM_Delay+0xd0>
    TIM4->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM4 timer
 8004574:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <USER_TIM_Delay+0x148>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a19      	ldr	r2, [pc, #100]	; (80045e0 <USER_TIM_Delay+0x148>)
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	6013      	str	r3, [r2, #0]
    TIM4->SR	&=	~(TIM_SR_UIF);
 8004580:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <USER_TIM_Delay+0x148>)
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <USER_TIM_Delay+0x148>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	6113      	str	r3, [r2, #16]
}
 800458c:	e021      	b.n	80045d2 <USER_TIM_Delay+0x13a>
  else if( TIM == 3 )
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d11e      	bne.n	80045d2 <USER_TIM_Delay+0x13a>
    TIM5->PSC	=	TIM_PSC;
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <USER_TIM_Delay+0x14c>)
 8004596:	88bb      	ldrh	r3, [r7, #4]
 8004598:	6293      	str	r3, [r2, #40]	; 0x28
    TIM5->CNT	=	TIM_CNT;
 800459a:	4a12      	ldr	r2, [pc, #72]	; (80045e4 <USER_TIM_Delay+0x14c>)
 800459c:	887b      	ldrh	r3, [r7, #2]
 800459e:	6253      	str	r3, [r2, #36]	; 0x24
    TIM5->CR1	|=	TIM_CR1_CEN;			// Enable TIM5 timer to start counting
 80045a0:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <USER_TIM_Delay+0x14c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <USER_TIM_Delay+0x14c>)
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	6013      	str	r3, [r2, #0]
    while(!( TIM5->SR & TIM_SR_UIF ));
 80045ac:	bf00      	nop
 80045ae:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <USER_TIM_Delay+0x14c>)
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f9      	beq.n	80045ae <USER_TIM_Delay+0x116>
    TIM5->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM5 timer
 80045ba:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <USER_TIM_Delay+0x14c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <USER_TIM_Delay+0x14c>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6013      	str	r3, [r2, #0]
    TIM5->SR	&=	~(TIM_SR_UIF);
 80045c6:	4b07      	ldr	r3, [pc, #28]	; (80045e4 <USER_TIM_Delay+0x14c>)
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	4a06      	ldr	r2, [pc, #24]	; (80045e4 <USER_TIM_Delay+0x14c>)
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	6113      	str	r3, [r2, #16]
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr
 80045dc:	40000400 	.word	0x40000400
 80045e0:	40000800 	.word	0x40000800
 80045e4:	40000c00 	.word	0x40000c00

080045e8 <USER_USART_Init>:
#include "GPIO.h"

// Initialize USART

void USER_USART_Init( uint8_t USART )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	71fb      	strb	r3, [r7, #7]
  /* Only USART1 is clocked with PCLK2 (72 MHz max). Other USARTs are clocked with
  PCLK1 (36 MHz max) */

  if( USART == 0 )
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d12c      	bne.n	8004652 <USER_USART_Init+0x6a>
  {
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; 		// Clock enable for USART1
 80045f8:	4b47      	ldr	r3, [pc, #284]	; (8004718 <USER_USART_Init+0x130>)
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	4a46      	ldr	r2, [pc, #280]	; (8004718 <USER_USART_Init+0x130>)
 80045fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004602:	6193      	str	r3, [r2, #24]
    USER_GPIO_Define(PORTA, 9, OUT_10, OUT_AF_PP);	// Pin PA9 (USART1_TX) as alternate function output push-pull, max speed 10 MHz
 8004604:	2302      	movs	r3, #2
 8004606:	2201      	movs	r2, #1
 8004608:	2109      	movs	r1, #9
 800460a:	2000      	movs	r0, #0
 800460c:	f7fd fe06 	bl	800221c <USER_GPIO_Define>

    USART1->CR1	|=	 USART_CR1_UE;			// Step 1 - USART enabled
 8004610:	4b42      	ldr	r3, [pc, #264]	; (800471c <USER_USART_Init+0x134>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4a41      	ldr	r2, [pc, #260]	; (800471c <USER_USART_Init+0x134>)
 8004616:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800461a:	60d3      	str	r3, [r2, #12]
    USART1->CR1	&=	~USART_CR1_M;			// Step 2 - 8 Data bits
 800461c:	4b3f      	ldr	r3, [pc, #252]	; (800471c <USER_USART_Init+0x134>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a3e      	ldr	r2, [pc, #248]	; (800471c <USER_USART_Init+0x134>)
 8004622:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004626:	f023 031f 	bic.w	r3, r3, #31
 800462a:	60d3      	str	r3, [r2, #12]
    USART1->CR2	&=	~USART_CR2_STOP;		// Step 3 - 1 Stop bit
 800462c:	4b3b      	ldr	r3, [pc, #236]	; (800471c <USER_USART_Init+0x134>)
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	4a3a      	ldr	r2, [pc, #232]	; (800471c <USER_USART_Init+0x134>)
 8004632:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004636:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800463a:	6113      	str	r3, [r2, #16]
    USART1->BRR	 =	 USARTDIV_64MHZ;		// Step 5 - Desired baud rate
 800463c:	4b37      	ldr	r3, [pc, #220]	; (800471c <USER_USART_Init+0x134>)
 800463e:	f240 222b 	movw	r2, #555	; 0x22b
 8004642:	609a      	str	r2, [r3, #8]
    USART1->CR1	|= 	 USART_CR1_TE;			// Step 6 - Transmitter enabled
 8004644:	4b35      	ldr	r3, [pc, #212]	; (800471c <USER_USART_Init+0x134>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4a34      	ldr	r2, [pc, #208]	; (800471c <USER_USART_Init+0x134>)
 800464a:	f043 0308 	orr.w	r3, r3, #8
 800464e:	60d3      	str	r3, [r2, #12]
    USART3->CR1	&=	~USART_CR1_M;
    USART3->CR2	&=	~USART_CR2_STOP;
    USART3->BRR	 =	 USARTDIV_8MHZ;
    USART3->CR1	|= 	 USART_CR1_TE;
  }
}
 8004650:	e05e      	b.n	8004710 <USER_USART_Init+0x128>
  else if( USART == 1 )
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d12c      	bne.n	80046b2 <USER_USART_Init+0xca>
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; 		// Clock enable for USART2
 8004658:	4b2f      	ldr	r3, [pc, #188]	; (8004718 <USER_USART_Init+0x130>)
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	4a2e      	ldr	r2, [pc, #184]	; (8004718 <USER_USART_Init+0x130>)
 800465e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004662:	61d3      	str	r3, [r2, #28]
    USER_GPIO_Define(PORTA, 2, OUT_10, OUT_AF_PP);	// Pin PA2 (USART2_TX) as alternate function output push-pull, max speed 10 MHz
 8004664:	2302      	movs	r3, #2
 8004666:	2201      	movs	r2, #1
 8004668:	2102      	movs	r1, #2
 800466a:	2000      	movs	r0, #0
 800466c:	f7fd fdd6 	bl	800221c <USER_GPIO_Define>
    USART2->CR1	|=	 USART_CR1_UE;
 8004670:	4b2b      	ldr	r3, [pc, #172]	; (8004720 <USER_USART_Init+0x138>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <USER_USART_Init+0x138>)
 8004676:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800467a:	60d3      	str	r3, [r2, #12]
    USART2->CR1	&=	~USART_CR1_M;
 800467c:	4b28      	ldr	r3, [pc, #160]	; (8004720 <USER_USART_Init+0x138>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a27      	ldr	r2, [pc, #156]	; (8004720 <USER_USART_Init+0x138>)
 8004682:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004686:	f023 031f 	bic.w	r3, r3, #31
 800468a:	60d3      	str	r3, [r2, #12]
    USART2->CR2	&=	~USART_CR2_STOP;
 800468c:	4b24      	ldr	r3, [pc, #144]	; (8004720 <USER_USART_Init+0x138>)
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	4a23      	ldr	r2, [pc, #140]	; (8004720 <USER_USART_Init+0x138>)
 8004692:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004696:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800469a:	6113      	str	r3, [r2, #16]
    USART2->BRR	 =	 USARTDIV_8MHZ;
 800469c:	4b20      	ldr	r3, [pc, #128]	; (8004720 <USER_USART_Init+0x138>)
 800469e:	f240 222b 	movw	r2, #555	; 0x22b
 80046a2:	609a      	str	r2, [r3, #8]
    USART2->CR1	|= 	 USART_CR1_TE;
 80046a4:	4b1e      	ldr	r3, [pc, #120]	; (8004720 <USER_USART_Init+0x138>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <USER_USART_Init+0x138>)
 80046aa:	f043 0308 	orr.w	r3, r3, #8
 80046ae:	60d3      	str	r3, [r2, #12]
}
 80046b0:	e02e      	b.n	8004710 <USER_USART_Init+0x128>
  else if( USART == 2 )
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d12b      	bne.n	8004710 <USER_USART_Init+0x128>
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN; 		// Clock enable for USART3
 80046b8:	4b17      	ldr	r3, [pc, #92]	; (8004718 <USER_USART_Init+0x130>)
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	4a16      	ldr	r2, [pc, #88]	; (8004718 <USER_USART_Init+0x130>)
 80046be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c2:	61d3      	str	r3, [r2, #28]
    USER_GPIO_Define(PORTA, 2, OUT_10, OUT_AF_PP);	// Pin PB10 (USART3_TX) as alternate function output push-pull, max speed 10 MHz
 80046c4:	2302      	movs	r3, #2
 80046c6:	2201      	movs	r2, #1
 80046c8:	2102      	movs	r1, #2
 80046ca:	2000      	movs	r0, #0
 80046cc:	f7fd fda6 	bl	800221c <USER_GPIO_Define>
    USART3->CR1	|=	 USART_CR1_UE;
 80046d0:	4b14      	ldr	r3, [pc, #80]	; (8004724 <USER_USART_Init+0x13c>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a13      	ldr	r2, [pc, #76]	; (8004724 <USER_USART_Init+0x13c>)
 80046d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046da:	60d3      	str	r3, [r2, #12]
    USART3->CR1	&=	~USART_CR1_M;
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <USER_USART_Init+0x13c>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a10      	ldr	r2, [pc, #64]	; (8004724 <USER_USART_Init+0x13c>)
 80046e2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80046e6:	f023 031f 	bic.w	r3, r3, #31
 80046ea:	60d3      	str	r3, [r2, #12]
    USART3->CR2	&=	~USART_CR2_STOP;
 80046ec:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <USER_USART_Init+0x13c>)
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	4a0c      	ldr	r2, [pc, #48]	; (8004724 <USER_USART_Init+0x13c>)
 80046f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80046f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046fa:	6113      	str	r3, [r2, #16]
    USART3->BRR	 =	 USARTDIV_8MHZ;
 80046fc:	4b09      	ldr	r3, [pc, #36]	; (8004724 <USER_USART_Init+0x13c>)
 80046fe:	f240 222b 	movw	r2, #555	; 0x22b
 8004702:	609a      	str	r2, [r3, #8]
    USART3->CR1	|= 	 USART_CR1_TE;
 8004704:	4b07      	ldr	r3, [pc, #28]	; (8004724 <USER_USART_Init+0x13c>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4a06      	ldr	r2, [pc, #24]	; (8004724 <USER_USART_Init+0x13c>)
 800470a:	f043 0308 	orr.w	r3, r3, #8
 800470e:	60d3      	str	r3, [r2, #12]
}
 8004710:	bf00      	nop
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40021000 	.word	0x40021000
 800471c:	40013800 	.word	0x40013800
 8004720:	40004400 	.word	0x40004400
 8004724:	40004800 	.word	0x40004800

08004728 <_write>:
 *
 * It redirects standard output stream in C to USART peripheral
 * device */

int _write( int file, char *ptr, int len )
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for( DataIdx = 0 ; DataIdx < len; DataIdx++ )
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e00f      	b.n	800475a <_write+0x32>
  {
    while(!( USART1->SR & USART_SR_TXE ));		// Wait until USART_DR is empty
 800473a:	bf00      	nop
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <_write+0x48>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f9      	beq.n	800473c <_write+0x14>
    USART1->DR = *ptr++;				// Transmit data
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	60ba      	str	r2, [r7, #8]
 800474e:	781a      	ldrb	r2, [r3, #0]
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <_write+0x48>)
 8004752:	605a      	str	r2, [r3, #4]
  for( DataIdx = 0 ; DataIdx < len; DataIdx++ )
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	3301      	adds	r3, #1
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	429a      	cmp	r2, r3
 8004760:	dbeb      	blt.n	800473a <_write+0x12>
  }

  return len;
 8004762:	687b      	ldr	r3, [r7, #4]
}
 8004764:	4618      	mov	r0, r3
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40013800 	.word	0x40013800

08004774 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004774:	480d      	ldr	r0, [pc, #52]	; (80047ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004776:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004778:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800477c:	480c      	ldr	r0, [pc, #48]	; (80047b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800477e:	490d      	ldr	r1, [pc, #52]	; (80047b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004780:	4a0d      	ldr	r2, [pc, #52]	; (80047b8 <LoopForever+0xe>)
  movs r3, #0
 8004782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004784:	e002      	b.n	800478c <LoopCopyDataInit>

08004786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800478a:	3304      	adds	r3, #4

0800478c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800478c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800478e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004790:	d3f9      	bcc.n	8004786 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004794:	4c0a      	ldr	r4, [pc, #40]	; (80047c0 <LoopForever+0x16>)
  movs r3, #0
 8004796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004798:	e001      	b.n	800479e <LoopFillZerobss>

0800479a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800479a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800479c:	3204      	adds	r2, #4

0800479e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800479e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047a0:	d3fb      	bcc.n	800479a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80047a2:	f001 f841 	bl	8005828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047a6:	f7ff f873 	bl	8003890 <main>

080047aa <LoopForever>:

LoopForever:
  b LoopForever
 80047aa:	e7fe      	b.n	80047aa <LoopForever>
  ldr   r0, =_estack
 80047ac:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80047b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047b4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80047b8:	0800c190 	.word	0x0800c190
  ldr r2, =_sbss
 80047bc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80047c0:	2000084c 	.word	0x2000084c

080047c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047c4:	e7fe      	b.n	80047c4 <ADC1_2_IRQHandler>

080047c6 <__cvt>:
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047cc:	461f      	mov	r7, r3
 80047ce:	bfbb      	ittet	lt
 80047d0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80047d4:	461f      	movlt	r7, r3
 80047d6:	2300      	movge	r3, #0
 80047d8:	232d      	movlt	r3, #45	; 0x2d
 80047da:	b088      	sub	sp, #32
 80047dc:	4614      	mov	r4, r2
 80047de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80047e2:	7013      	strb	r3, [r2, #0]
 80047e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80047e6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80047ea:	f023 0820 	bic.w	r8, r3, #32
 80047ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047f2:	d005      	beq.n	8004800 <__cvt+0x3a>
 80047f4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80047f8:	d100      	bne.n	80047fc <__cvt+0x36>
 80047fa:	3501      	adds	r5, #1
 80047fc:	2302      	movs	r3, #2
 80047fe:	e000      	b.n	8004802 <__cvt+0x3c>
 8004800:	2303      	movs	r3, #3
 8004802:	aa07      	add	r2, sp, #28
 8004804:	9204      	str	r2, [sp, #16]
 8004806:	aa06      	add	r2, sp, #24
 8004808:	e9cd a202 	strd	sl, r2, [sp, #8]
 800480c:	e9cd 3500 	strd	r3, r5, [sp]
 8004810:	4622      	mov	r2, r4
 8004812:	463b      	mov	r3, r7
 8004814:	f001 f8dc 	bl	80059d0 <_dtoa_r>
 8004818:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800481c:	4606      	mov	r6, r0
 800481e:	d102      	bne.n	8004826 <__cvt+0x60>
 8004820:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004822:	07db      	lsls	r3, r3, #31
 8004824:	d522      	bpl.n	800486c <__cvt+0xa6>
 8004826:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800482a:	eb06 0905 	add.w	r9, r6, r5
 800482e:	d110      	bne.n	8004852 <__cvt+0x8c>
 8004830:	7833      	ldrb	r3, [r6, #0]
 8004832:	2b30      	cmp	r3, #48	; 0x30
 8004834:	d10a      	bne.n	800484c <__cvt+0x86>
 8004836:	2200      	movs	r2, #0
 8004838:	2300      	movs	r3, #0
 800483a:	4620      	mov	r0, r4
 800483c:	4639      	mov	r1, r7
 800483e:	f7fc f8c3 	bl	80009c8 <__aeabi_dcmpeq>
 8004842:	b918      	cbnz	r0, 800484c <__cvt+0x86>
 8004844:	f1c5 0501 	rsb	r5, r5, #1
 8004848:	f8ca 5000 	str.w	r5, [sl]
 800484c:	f8da 3000 	ldr.w	r3, [sl]
 8004850:	4499      	add	r9, r3
 8004852:	2200      	movs	r2, #0
 8004854:	2300      	movs	r3, #0
 8004856:	4620      	mov	r0, r4
 8004858:	4639      	mov	r1, r7
 800485a:	f7fc f8b5 	bl	80009c8 <__aeabi_dcmpeq>
 800485e:	b108      	cbz	r0, 8004864 <__cvt+0x9e>
 8004860:	f8cd 901c 	str.w	r9, [sp, #28]
 8004864:	2230      	movs	r2, #48	; 0x30
 8004866:	9b07      	ldr	r3, [sp, #28]
 8004868:	454b      	cmp	r3, r9
 800486a:	d307      	bcc.n	800487c <__cvt+0xb6>
 800486c:	4630      	mov	r0, r6
 800486e:	9b07      	ldr	r3, [sp, #28]
 8004870:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004872:	1b9b      	subs	r3, r3, r6
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	b008      	add	sp, #32
 8004878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487c:	1c59      	adds	r1, r3, #1
 800487e:	9107      	str	r1, [sp, #28]
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	e7f0      	b.n	8004866 <__cvt+0xa0>

08004884 <__exponent>:
 8004884:	4603      	mov	r3, r0
 8004886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004888:	2900      	cmp	r1, #0
 800488a:	f803 2b02 	strb.w	r2, [r3], #2
 800488e:	bfb6      	itet	lt
 8004890:	222d      	movlt	r2, #45	; 0x2d
 8004892:	222b      	movge	r2, #43	; 0x2b
 8004894:	4249      	neglt	r1, r1
 8004896:	2909      	cmp	r1, #9
 8004898:	7042      	strb	r2, [r0, #1]
 800489a:	dd2a      	ble.n	80048f2 <__exponent+0x6e>
 800489c:	f10d 0207 	add.w	r2, sp, #7
 80048a0:	4617      	mov	r7, r2
 80048a2:	260a      	movs	r6, #10
 80048a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80048a8:	4694      	mov	ip, r2
 80048aa:	fb06 1415 	mls	r4, r6, r5, r1
 80048ae:	3430      	adds	r4, #48	; 0x30
 80048b0:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80048b4:	460c      	mov	r4, r1
 80048b6:	2c63      	cmp	r4, #99	; 0x63
 80048b8:	4629      	mov	r1, r5
 80048ba:	f102 32ff 	add.w	r2, r2, #4294967295
 80048be:	dcf1      	bgt.n	80048a4 <__exponent+0x20>
 80048c0:	3130      	adds	r1, #48	; 0x30
 80048c2:	f1ac 0402 	sub.w	r4, ip, #2
 80048c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80048ca:	4622      	mov	r2, r4
 80048cc:	1c41      	adds	r1, r0, #1
 80048ce:	42ba      	cmp	r2, r7
 80048d0:	d30a      	bcc.n	80048e8 <__exponent+0x64>
 80048d2:	f10d 0209 	add.w	r2, sp, #9
 80048d6:	eba2 020c 	sub.w	r2, r2, ip
 80048da:	42bc      	cmp	r4, r7
 80048dc:	bf88      	it	hi
 80048de:	2200      	movhi	r2, #0
 80048e0:	4413      	add	r3, r2
 80048e2:	1a18      	subs	r0, r3, r0
 80048e4:	b003      	add	sp, #12
 80048e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80048ec:	f801 5f01 	strb.w	r5, [r1, #1]!
 80048f0:	e7ed      	b.n	80048ce <__exponent+0x4a>
 80048f2:	2330      	movs	r3, #48	; 0x30
 80048f4:	3130      	adds	r1, #48	; 0x30
 80048f6:	7083      	strb	r3, [r0, #2]
 80048f8:	70c1      	strb	r1, [r0, #3]
 80048fa:	1d03      	adds	r3, r0, #4
 80048fc:	e7f1      	b.n	80048e2 <__exponent+0x5e>
	...

08004900 <_printf_float>:
 8004900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004904:	b091      	sub	sp, #68	; 0x44
 8004906:	460c      	mov	r4, r1
 8004908:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800490c:	4616      	mov	r6, r2
 800490e:	461f      	mov	r7, r3
 8004910:	4605      	mov	r5, r0
 8004912:	f000 ff39 	bl	8005788 <_localeconv_r>
 8004916:	6803      	ldr	r3, [r0, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	9309      	str	r3, [sp, #36]	; 0x24
 800491c:	f7fb fc28 	bl	8000170 <strlen>
 8004920:	2300      	movs	r3, #0
 8004922:	930e      	str	r3, [sp, #56]	; 0x38
 8004924:	f8d8 3000 	ldr.w	r3, [r8]
 8004928:	900a      	str	r0, [sp, #40]	; 0x28
 800492a:	3307      	adds	r3, #7
 800492c:	f023 0307 	bic.w	r3, r3, #7
 8004930:	f103 0208 	add.w	r2, r3, #8
 8004934:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004938:	f8d4 b000 	ldr.w	fp, [r4]
 800493c:	f8c8 2000 	str.w	r2, [r8]
 8004940:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004944:	4652      	mov	r2, sl
 8004946:	4643      	mov	r3, r8
 8004948:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800494c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004950:	930b      	str	r3, [sp, #44]	; 0x2c
 8004952:	f04f 32ff 	mov.w	r2, #4294967295
 8004956:	4650      	mov	r0, sl
 8004958:	4b9c      	ldr	r3, [pc, #624]	; (8004bcc <_printf_float+0x2cc>)
 800495a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800495c:	f7fc f866 	bl	8000a2c <__aeabi_dcmpun>
 8004960:	bb70      	cbnz	r0, 80049c0 <_printf_float+0xc0>
 8004962:	f04f 32ff 	mov.w	r2, #4294967295
 8004966:	4650      	mov	r0, sl
 8004968:	4b98      	ldr	r3, [pc, #608]	; (8004bcc <_printf_float+0x2cc>)
 800496a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800496c:	f7fc f840 	bl	80009f0 <__aeabi_dcmple>
 8004970:	bb30      	cbnz	r0, 80049c0 <_printf_float+0xc0>
 8004972:	2200      	movs	r2, #0
 8004974:	2300      	movs	r3, #0
 8004976:	4650      	mov	r0, sl
 8004978:	4641      	mov	r1, r8
 800497a:	f7fc f82f 	bl	80009dc <__aeabi_dcmplt>
 800497e:	b110      	cbz	r0, 8004986 <_printf_float+0x86>
 8004980:	232d      	movs	r3, #45	; 0x2d
 8004982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004986:	4a92      	ldr	r2, [pc, #584]	; (8004bd0 <_printf_float+0x2d0>)
 8004988:	4b92      	ldr	r3, [pc, #584]	; (8004bd4 <_printf_float+0x2d4>)
 800498a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800498e:	bf94      	ite	ls
 8004990:	4690      	movls	r8, r2
 8004992:	4698      	movhi	r8, r3
 8004994:	2303      	movs	r3, #3
 8004996:	f04f 0a00 	mov.w	sl, #0
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	f02b 0304 	bic.w	r3, fp, #4
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	4633      	mov	r3, r6
 80049a4:	4621      	mov	r1, r4
 80049a6:	4628      	mov	r0, r5
 80049a8:	9700      	str	r7, [sp, #0]
 80049aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80049ac:	f000 f9d6 	bl	8004d5c <_printf_common>
 80049b0:	3001      	adds	r0, #1
 80049b2:	f040 8090 	bne.w	8004ad6 <_printf_float+0x1d6>
 80049b6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ba:	b011      	add	sp, #68	; 0x44
 80049bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c0:	4652      	mov	r2, sl
 80049c2:	4643      	mov	r3, r8
 80049c4:	4650      	mov	r0, sl
 80049c6:	4641      	mov	r1, r8
 80049c8:	f7fc f830 	bl	8000a2c <__aeabi_dcmpun>
 80049cc:	b148      	cbz	r0, 80049e2 <_printf_float+0xe2>
 80049ce:	f1b8 0f00 	cmp.w	r8, #0
 80049d2:	bfb8      	it	lt
 80049d4:	232d      	movlt	r3, #45	; 0x2d
 80049d6:	4a80      	ldr	r2, [pc, #512]	; (8004bd8 <_printf_float+0x2d8>)
 80049d8:	bfb8      	it	lt
 80049da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80049de:	4b7f      	ldr	r3, [pc, #508]	; (8004bdc <_printf_float+0x2dc>)
 80049e0:	e7d3      	b.n	800498a <_printf_float+0x8a>
 80049e2:	6863      	ldr	r3, [r4, #4]
 80049e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	d142      	bne.n	8004a72 <_printf_float+0x172>
 80049ec:	2306      	movs	r3, #6
 80049ee:	6063      	str	r3, [r4, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	9206      	str	r2, [sp, #24]
 80049f4:	aa0e      	add	r2, sp, #56	; 0x38
 80049f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80049fa:	aa0d      	add	r2, sp, #52	; 0x34
 80049fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004a00:	9203      	str	r2, [sp, #12]
 8004a02:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004a06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004a0a:	6023      	str	r3, [r4, #0]
 8004a0c:	6863      	ldr	r3, [r4, #4]
 8004a0e:	4652      	mov	r2, sl
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	4628      	mov	r0, r5
 8004a14:	4643      	mov	r3, r8
 8004a16:	910b      	str	r1, [sp, #44]	; 0x2c
 8004a18:	f7ff fed5 	bl	80047c6 <__cvt>
 8004a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a1e:	4680      	mov	r8, r0
 8004a20:	2947      	cmp	r1, #71	; 0x47
 8004a22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a24:	d108      	bne.n	8004a38 <_printf_float+0x138>
 8004a26:	1cc8      	adds	r0, r1, #3
 8004a28:	db02      	blt.n	8004a30 <_printf_float+0x130>
 8004a2a:	6863      	ldr	r3, [r4, #4]
 8004a2c:	4299      	cmp	r1, r3
 8004a2e:	dd40      	ble.n	8004ab2 <_printf_float+0x1b2>
 8004a30:	f1a9 0902 	sub.w	r9, r9, #2
 8004a34:	fa5f f989 	uxtb.w	r9, r9
 8004a38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a3c:	d81f      	bhi.n	8004a7e <_printf_float+0x17e>
 8004a3e:	464a      	mov	r2, r9
 8004a40:	3901      	subs	r1, #1
 8004a42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a46:	910d      	str	r1, [sp, #52]	; 0x34
 8004a48:	f7ff ff1c 	bl	8004884 <__exponent>
 8004a4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a4e:	4682      	mov	sl, r0
 8004a50:	1813      	adds	r3, r2, r0
 8004a52:	2a01      	cmp	r2, #1
 8004a54:	6123      	str	r3, [r4, #16]
 8004a56:	dc02      	bgt.n	8004a5e <_printf_float+0x15e>
 8004a58:	6822      	ldr	r2, [r4, #0]
 8004a5a:	07d2      	lsls	r2, r2, #31
 8004a5c:	d501      	bpl.n	8004a62 <_printf_float+0x162>
 8004a5e:	3301      	adds	r3, #1
 8004a60:	6123      	str	r3, [r4, #16]
 8004a62:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d09b      	beq.n	80049a2 <_printf_float+0xa2>
 8004a6a:	232d      	movs	r3, #45	; 0x2d
 8004a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a70:	e797      	b.n	80049a2 <_printf_float+0xa2>
 8004a72:	2947      	cmp	r1, #71	; 0x47
 8004a74:	d1bc      	bne.n	80049f0 <_printf_float+0xf0>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1ba      	bne.n	80049f0 <_printf_float+0xf0>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e7b7      	b.n	80049ee <_printf_float+0xee>
 8004a7e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004a82:	d118      	bne.n	8004ab6 <_printf_float+0x1b6>
 8004a84:	2900      	cmp	r1, #0
 8004a86:	6863      	ldr	r3, [r4, #4]
 8004a88:	dd0b      	ble.n	8004aa2 <_printf_float+0x1a2>
 8004a8a:	6121      	str	r1, [r4, #16]
 8004a8c:	b913      	cbnz	r3, 8004a94 <_printf_float+0x194>
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	07d0      	lsls	r0, r2, #31
 8004a92:	d502      	bpl.n	8004a9a <_printf_float+0x19a>
 8004a94:	3301      	adds	r3, #1
 8004a96:	440b      	add	r3, r1
 8004a98:	6123      	str	r3, [r4, #16]
 8004a9a:	f04f 0a00 	mov.w	sl, #0
 8004a9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004aa0:	e7df      	b.n	8004a62 <_printf_float+0x162>
 8004aa2:	b913      	cbnz	r3, 8004aaa <_printf_float+0x1aa>
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	07d2      	lsls	r2, r2, #31
 8004aa8:	d501      	bpl.n	8004aae <_printf_float+0x1ae>
 8004aaa:	3302      	adds	r3, #2
 8004aac:	e7f4      	b.n	8004a98 <_printf_float+0x198>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e7f2      	b.n	8004a98 <_printf_float+0x198>
 8004ab2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ab8:	4299      	cmp	r1, r3
 8004aba:	db05      	blt.n	8004ac8 <_printf_float+0x1c8>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	6121      	str	r1, [r4, #16]
 8004ac0:	07d8      	lsls	r0, r3, #31
 8004ac2:	d5ea      	bpl.n	8004a9a <_printf_float+0x19a>
 8004ac4:	1c4b      	adds	r3, r1, #1
 8004ac6:	e7e7      	b.n	8004a98 <_printf_float+0x198>
 8004ac8:	2900      	cmp	r1, #0
 8004aca:	bfcc      	ite	gt
 8004acc:	2201      	movgt	r2, #1
 8004ace:	f1c1 0202 	rsble	r2, r1, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	e7e0      	b.n	8004a98 <_printf_float+0x198>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	055a      	lsls	r2, r3, #21
 8004ada:	d407      	bmi.n	8004aec <_printf_float+0x1ec>
 8004adc:	6923      	ldr	r3, [r4, #16]
 8004ade:	4642      	mov	r2, r8
 8004ae0:	4631      	mov	r1, r6
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	47b8      	blx	r7
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	d12b      	bne.n	8004b42 <_printf_float+0x242>
 8004aea:	e764      	b.n	80049b6 <_printf_float+0xb6>
 8004aec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004af0:	f240 80dd 	bls.w	8004cae <_printf_float+0x3ae>
 8004af4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004af8:	2200      	movs	r2, #0
 8004afa:	2300      	movs	r3, #0
 8004afc:	f7fb ff64 	bl	80009c8 <__aeabi_dcmpeq>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d033      	beq.n	8004b6c <_printf_float+0x26c>
 8004b04:	2301      	movs	r3, #1
 8004b06:	4631      	mov	r1, r6
 8004b08:	4628      	mov	r0, r5
 8004b0a:	4a35      	ldr	r2, [pc, #212]	; (8004be0 <_printf_float+0x2e0>)
 8004b0c:	47b8      	blx	r7
 8004b0e:	3001      	adds	r0, #1
 8004b10:	f43f af51 	beq.w	80049b6 <_printf_float+0xb6>
 8004b14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	db02      	blt.n	8004b22 <_printf_float+0x222>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	07d8      	lsls	r0, r3, #31
 8004b20:	d50f      	bpl.n	8004b42 <_printf_float+0x242>
 8004b22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b26:	4631      	mov	r1, r6
 8004b28:	4628      	mov	r0, r5
 8004b2a:	47b8      	blx	r7
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	f43f af42 	beq.w	80049b6 <_printf_float+0xb6>
 8004b32:	f04f 0800 	mov.w	r8, #0
 8004b36:	f104 091a 	add.w	r9, r4, #26
 8004b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	4543      	cmp	r3, r8
 8004b40:	dc09      	bgt.n	8004b56 <_printf_float+0x256>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	079b      	lsls	r3, r3, #30
 8004b46:	f100 8104 	bmi.w	8004d52 <_printf_float+0x452>
 8004b4a:	68e0      	ldr	r0, [r4, #12]
 8004b4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b4e:	4298      	cmp	r0, r3
 8004b50:	bfb8      	it	lt
 8004b52:	4618      	movlt	r0, r3
 8004b54:	e731      	b.n	80049ba <_printf_float+0xba>
 8004b56:	2301      	movs	r3, #1
 8004b58:	464a      	mov	r2, r9
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	47b8      	blx	r7
 8004b60:	3001      	adds	r0, #1
 8004b62:	f43f af28 	beq.w	80049b6 <_printf_float+0xb6>
 8004b66:	f108 0801 	add.w	r8, r8, #1
 8004b6a:	e7e6      	b.n	8004b3a <_printf_float+0x23a>
 8004b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	dc38      	bgt.n	8004be4 <_printf_float+0x2e4>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4631      	mov	r1, r6
 8004b76:	4628      	mov	r0, r5
 8004b78:	4a19      	ldr	r2, [pc, #100]	; (8004be0 <_printf_float+0x2e0>)
 8004b7a:	47b8      	blx	r7
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f43f af1a 	beq.w	80049b6 <_printf_float+0xb6>
 8004b82:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004b86:	4313      	orrs	r3, r2
 8004b88:	d102      	bne.n	8004b90 <_printf_float+0x290>
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	07d9      	lsls	r1, r3, #31
 8004b8e:	d5d8      	bpl.n	8004b42 <_printf_float+0x242>
 8004b90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b94:	4631      	mov	r1, r6
 8004b96:	4628      	mov	r0, r5
 8004b98:	47b8      	blx	r7
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f43f af0b 	beq.w	80049b6 <_printf_float+0xb6>
 8004ba0:	f04f 0900 	mov.w	r9, #0
 8004ba4:	f104 0a1a 	add.w	sl, r4, #26
 8004ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004baa:	425b      	negs	r3, r3
 8004bac:	454b      	cmp	r3, r9
 8004bae:	dc01      	bgt.n	8004bb4 <_printf_float+0x2b4>
 8004bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bb2:	e794      	b.n	8004ade <_printf_float+0x1de>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4652      	mov	r2, sl
 8004bb8:	4631      	mov	r1, r6
 8004bba:	4628      	mov	r0, r5
 8004bbc:	47b8      	blx	r7
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	f43f aef9 	beq.w	80049b6 <_printf_float+0xb6>
 8004bc4:	f109 0901 	add.w	r9, r9, #1
 8004bc8:	e7ee      	b.n	8004ba8 <_printf_float+0x2a8>
 8004bca:	bf00      	nop
 8004bcc:	7fefffff 	.word	0x7fefffff
 8004bd0:	0800bd2c 	.word	0x0800bd2c
 8004bd4:	0800bd30 	.word	0x0800bd30
 8004bd8:	0800bd34 	.word	0x0800bd34
 8004bdc:	0800bd38 	.word	0x0800bd38
 8004be0:	0800bd3c 	.word	0x0800bd3c
 8004be4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004be6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004be8:	429a      	cmp	r2, r3
 8004bea:	bfa8      	it	ge
 8004bec:	461a      	movge	r2, r3
 8004bee:	2a00      	cmp	r2, #0
 8004bf0:	4691      	mov	r9, r2
 8004bf2:	dc37      	bgt.n	8004c64 <_printf_float+0x364>
 8004bf4:	f04f 0b00 	mov.w	fp, #0
 8004bf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bfc:	f104 021a 	add.w	r2, r4, #26
 8004c00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004c04:	ebaa 0309 	sub.w	r3, sl, r9
 8004c08:	455b      	cmp	r3, fp
 8004c0a:	dc33      	bgt.n	8004c74 <_printf_float+0x374>
 8004c0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c10:	429a      	cmp	r2, r3
 8004c12:	db3b      	blt.n	8004c8c <_printf_float+0x38c>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	07da      	lsls	r2, r3, #31
 8004c18:	d438      	bmi.n	8004c8c <_printf_float+0x38c>
 8004c1a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004c1e:	eba2 0903 	sub.w	r9, r2, r3
 8004c22:	eba2 020a 	sub.w	r2, r2, sl
 8004c26:	4591      	cmp	r9, r2
 8004c28:	bfa8      	it	ge
 8004c2a:	4691      	movge	r9, r2
 8004c2c:	f1b9 0f00 	cmp.w	r9, #0
 8004c30:	dc34      	bgt.n	8004c9c <_printf_float+0x39c>
 8004c32:	f04f 0800 	mov.w	r8, #0
 8004c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c3a:	f104 0a1a 	add.w	sl, r4, #26
 8004c3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c42:	1a9b      	subs	r3, r3, r2
 8004c44:	eba3 0309 	sub.w	r3, r3, r9
 8004c48:	4543      	cmp	r3, r8
 8004c4a:	f77f af7a 	ble.w	8004b42 <_printf_float+0x242>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4652      	mov	r2, sl
 8004c52:	4631      	mov	r1, r6
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b8      	blx	r7
 8004c58:	3001      	adds	r0, #1
 8004c5a:	f43f aeac 	beq.w	80049b6 <_printf_float+0xb6>
 8004c5e:	f108 0801 	add.w	r8, r8, #1
 8004c62:	e7ec      	b.n	8004c3e <_printf_float+0x33e>
 8004c64:	4613      	mov	r3, r2
 8004c66:	4631      	mov	r1, r6
 8004c68:	4642      	mov	r2, r8
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	47b8      	blx	r7
 8004c6e:	3001      	adds	r0, #1
 8004c70:	d1c0      	bne.n	8004bf4 <_printf_float+0x2f4>
 8004c72:	e6a0      	b.n	80049b6 <_printf_float+0xb6>
 8004c74:	2301      	movs	r3, #1
 8004c76:	4631      	mov	r1, r6
 8004c78:	4628      	mov	r0, r5
 8004c7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c7c:	47b8      	blx	r7
 8004c7e:	3001      	adds	r0, #1
 8004c80:	f43f ae99 	beq.w	80049b6 <_printf_float+0xb6>
 8004c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c86:	f10b 0b01 	add.w	fp, fp, #1
 8004c8a:	e7b9      	b.n	8004c00 <_printf_float+0x300>
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c92:	4628      	mov	r0, r5
 8004c94:	47b8      	blx	r7
 8004c96:	3001      	adds	r0, #1
 8004c98:	d1bf      	bne.n	8004c1a <_printf_float+0x31a>
 8004c9a:	e68c      	b.n	80049b6 <_printf_float+0xb6>
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	eb08 020a 	add.w	r2, r8, sl
 8004ca6:	47b8      	blx	r7
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d1c2      	bne.n	8004c32 <_printf_float+0x332>
 8004cac:	e683      	b.n	80049b6 <_printf_float+0xb6>
 8004cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cb0:	2a01      	cmp	r2, #1
 8004cb2:	dc01      	bgt.n	8004cb8 <_printf_float+0x3b8>
 8004cb4:	07db      	lsls	r3, r3, #31
 8004cb6:	d539      	bpl.n	8004d2c <_printf_float+0x42c>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4642      	mov	r2, r8
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	47b8      	blx	r7
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f43f ae77 	beq.w	80049b6 <_printf_float+0xb6>
 8004cc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ccc:	4631      	mov	r1, r6
 8004cce:	4628      	mov	r0, r5
 8004cd0:	47b8      	blx	r7
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	f43f ae6f 	beq.w	80049b6 <_printf_float+0xb6>
 8004cd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004ce4:	f7fb fe70 	bl	80009c8 <__aeabi_dcmpeq>
 8004ce8:	b9d8      	cbnz	r0, 8004d22 <_printf_float+0x422>
 8004cea:	f109 33ff 	add.w	r3, r9, #4294967295
 8004cee:	f108 0201 	add.w	r2, r8, #1
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	47b8      	blx	r7
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d10e      	bne.n	8004d1a <_printf_float+0x41a>
 8004cfc:	e65b      	b.n	80049b6 <_printf_float+0xb6>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	464a      	mov	r2, r9
 8004d02:	4631      	mov	r1, r6
 8004d04:	4628      	mov	r0, r5
 8004d06:	47b8      	blx	r7
 8004d08:	3001      	adds	r0, #1
 8004d0a:	f43f ae54 	beq.w	80049b6 <_printf_float+0xb6>
 8004d0e:	f108 0801 	add.w	r8, r8, #1
 8004d12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d14:	3b01      	subs	r3, #1
 8004d16:	4543      	cmp	r3, r8
 8004d18:	dcf1      	bgt.n	8004cfe <_printf_float+0x3fe>
 8004d1a:	4653      	mov	r3, sl
 8004d1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d20:	e6de      	b.n	8004ae0 <_printf_float+0x1e0>
 8004d22:	f04f 0800 	mov.w	r8, #0
 8004d26:	f104 091a 	add.w	r9, r4, #26
 8004d2a:	e7f2      	b.n	8004d12 <_printf_float+0x412>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4642      	mov	r2, r8
 8004d30:	e7df      	b.n	8004cf2 <_printf_float+0x3f2>
 8004d32:	2301      	movs	r3, #1
 8004d34:	464a      	mov	r2, r9
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	f43f ae3a 	beq.w	80049b6 <_printf_float+0xb6>
 8004d42:	f108 0801 	add.w	r8, r8, #1
 8004d46:	68e3      	ldr	r3, [r4, #12]
 8004d48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004d4a:	1a5b      	subs	r3, r3, r1
 8004d4c:	4543      	cmp	r3, r8
 8004d4e:	dcf0      	bgt.n	8004d32 <_printf_float+0x432>
 8004d50:	e6fb      	b.n	8004b4a <_printf_float+0x24a>
 8004d52:	f04f 0800 	mov.w	r8, #0
 8004d56:	f104 0919 	add.w	r9, r4, #25
 8004d5a:	e7f4      	b.n	8004d46 <_printf_float+0x446>

08004d5c <_printf_common>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	4616      	mov	r6, r2
 8004d62:	4699      	mov	r9, r3
 8004d64:	688a      	ldr	r2, [r1, #8]
 8004d66:	690b      	ldr	r3, [r1, #16]
 8004d68:	4607      	mov	r7, r0
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	bfb8      	it	lt
 8004d6e:	4613      	movlt	r3, r2
 8004d70:	6033      	str	r3, [r6, #0]
 8004d72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d76:	460c      	mov	r4, r1
 8004d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d7c:	b10a      	cbz	r2, 8004d82 <_printf_common+0x26>
 8004d7e:	3301      	adds	r3, #1
 8004d80:	6033      	str	r3, [r6, #0]
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	0699      	lsls	r1, r3, #26
 8004d86:	bf42      	ittt	mi
 8004d88:	6833      	ldrmi	r3, [r6, #0]
 8004d8a:	3302      	addmi	r3, #2
 8004d8c:	6033      	strmi	r3, [r6, #0]
 8004d8e:	6825      	ldr	r5, [r4, #0]
 8004d90:	f015 0506 	ands.w	r5, r5, #6
 8004d94:	d106      	bne.n	8004da4 <_printf_common+0x48>
 8004d96:	f104 0a19 	add.w	sl, r4, #25
 8004d9a:	68e3      	ldr	r3, [r4, #12]
 8004d9c:	6832      	ldr	r2, [r6, #0]
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	dc2b      	bgt.n	8004dfc <_printf_common+0xa0>
 8004da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004da8:	1e13      	subs	r3, r2, #0
 8004daa:	6822      	ldr	r2, [r4, #0]
 8004dac:	bf18      	it	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	0692      	lsls	r2, r2, #26
 8004db2:	d430      	bmi.n	8004e16 <_printf_common+0xba>
 8004db4:	4649      	mov	r1, r9
 8004db6:	4638      	mov	r0, r7
 8004db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dbc:	47c0      	blx	r8
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d023      	beq.n	8004e0a <_printf_common+0xae>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	6922      	ldr	r2, [r4, #16]
 8004dc6:	f003 0306 	and.w	r3, r3, #6
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	bf14      	ite	ne
 8004dce:	2500      	movne	r5, #0
 8004dd0:	6833      	ldreq	r3, [r6, #0]
 8004dd2:	f04f 0600 	mov.w	r6, #0
 8004dd6:	bf08      	it	eq
 8004dd8:	68e5      	ldreq	r5, [r4, #12]
 8004dda:	f104 041a 	add.w	r4, r4, #26
 8004dde:	bf08      	it	eq
 8004de0:	1aed      	subeq	r5, r5, r3
 8004de2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004de6:	bf08      	it	eq
 8004de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dec:	4293      	cmp	r3, r2
 8004dee:	bfc4      	itt	gt
 8004df0:	1a9b      	subgt	r3, r3, r2
 8004df2:	18ed      	addgt	r5, r5, r3
 8004df4:	42b5      	cmp	r5, r6
 8004df6:	d11a      	bne.n	8004e2e <_printf_common+0xd2>
 8004df8:	2000      	movs	r0, #0
 8004dfa:	e008      	b.n	8004e0e <_printf_common+0xb2>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4652      	mov	r2, sl
 8004e00:	4649      	mov	r1, r9
 8004e02:	4638      	mov	r0, r7
 8004e04:	47c0      	blx	r8
 8004e06:	3001      	adds	r0, #1
 8004e08:	d103      	bne.n	8004e12 <_printf_common+0xb6>
 8004e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e12:	3501      	adds	r5, #1
 8004e14:	e7c1      	b.n	8004d9a <_printf_common+0x3e>
 8004e16:	2030      	movs	r0, #48	; 0x30
 8004e18:	18e1      	adds	r1, r4, r3
 8004e1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e24:	4422      	add	r2, r4
 8004e26:	3302      	adds	r3, #2
 8004e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e2c:	e7c2      	b.n	8004db4 <_printf_common+0x58>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	4622      	mov	r2, r4
 8004e32:	4649      	mov	r1, r9
 8004e34:	4638      	mov	r0, r7
 8004e36:	47c0      	blx	r8
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d0e6      	beq.n	8004e0a <_printf_common+0xae>
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	e7d9      	b.n	8004df4 <_printf_common+0x98>

08004e40 <_printf_i>:
 8004e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	7e0f      	ldrb	r7, [r1, #24]
 8004e46:	4691      	mov	r9, r2
 8004e48:	2f78      	cmp	r7, #120	; 0x78
 8004e4a:	4680      	mov	r8, r0
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	469a      	mov	sl, r3
 8004e50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e56:	d807      	bhi.n	8004e68 <_printf_i+0x28>
 8004e58:	2f62      	cmp	r7, #98	; 0x62
 8004e5a:	d80a      	bhi.n	8004e72 <_printf_i+0x32>
 8004e5c:	2f00      	cmp	r7, #0
 8004e5e:	f000 80d5 	beq.w	800500c <_printf_i+0x1cc>
 8004e62:	2f58      	cmp	r7, #88	; 0x58
 8004e64:	f000 80c1 	beq.w	8004fea <_printf_i+0x1aa>
 8004e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e70:	e03a      	b.n	8004ee8 <_printf_i+0xa8>
 8004e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e76:	2b15      	cmp	r3, #21
 8004e78:	d8f6      	bhi.n	8004e68 <_printf_i+0x28>
 8004e7a:	a101      	add	r1, pc, #4	; (adr r1, 8004e80 <_printf_i+0x40>)
 8004e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e80:	08004ed9 	.word	0x08004ed9
 8004e84:	08004eed 	.word	0x08004eed
 8004e88:	08004e69 	.word	0x08004e69
 8004e8c:	08004e69 	.word	0x08004e69
 8004e90:	08004e69 	.word	0x08004e69
 8004e94:	08004e69 	.word	0x08004e69
 8004e98:	08004eed 	.word	0x08004eed
 8004e9c:	08004e69 	.word	0x08004e69
 8004ea0:	08004e69 	.word	0x08004e69
 8004ea4:	08004e69 	.word	0x08004e69
 8004ea8:	08004e69 	.word	0x08004e69
 8004eac:	08004ff3 	.word	0x08004ff3
 8004eb0:	08004f19 	.word	0x08004f19
 8004eb4:	08004fad 	.word	0x08004fad
 8004eb8:	08004e69 	.word	0x08004e69
 8004ebc:	08004e69 	.word	0x08004e69
 8004ec0:	08005015 	.word	0x08005015
 8004ec4:	08004e69 	.word	0x08004e69
 8004ec8:	08004f19 	.word	0x08004f19
 8004ecc:	08004e69 	.word	0x08004e69
 8004ed0:	08004e69 	.word	0x08004e69
 8004ed4:	08004fb5 	.word	0x08004fb5
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	1d1a      	adds	r2, r3, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	602a      	str	r2, [r5, #0]
 8004ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0a0      	b.n	800502e <_printf_i+0x1ee>
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	682b      	ldr	r3, [r5, #0]
 8004ef0:	0607      	lsls	r7, r0, #24
 8004ef2:	f103 0104 	add.w	r1, r3, #4
 8004ef6:	6029      	str	r1, [r5, #0]
 8004ef8:	d501      	bpl.n	8004efe <_printf_i+0xbe>
 8004efa:	681e      	ldr	r6, [r3, #0]
 8004efc:	e003      	b.n	8004f06 <_printf_i+0xc6>
 8004efe:	0646      	lsls	r6, r0, #25
 8004f00:	d5fb      	bpl.n	8004efa <_printf_i+0xba>
 8004f02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f06:	2e00      	cmp	r6, #0
 8004f08:	da03      	bge.n	8004f12 <_printf_i+0xd2>
 8004f0a:	232d      	movs	r3, #45	; 0x2d
 8004f0c:	4276      	negs	r6, r6
 8004f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f12:	230a      	movs	r3, #10
 8004f14:	4859      	ldr	r0, [pc, #356]	; (800507c <_printf_i+0x23c>)
 8004f16:	e012      	b.n	8004f3e <_printf_i+0xfe>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	6820      	ldr	r0, [r4, #0]
 8004f1c:	1d19      	adds	r1, r3, #4
 8004f1e:	6029      	str	r1, [r5, #0]
 8004f20:	0605      	lsls	r5, r0, #24
 8004f22:	d501      	bpl.n	8004f28 <_printf_i+0xe8>
 8004f24:	681e      	ldr	r6, [r3, #0]
 8004f26:	e002      	b.n	8004f2e <_printf_i+0xee>
 8004f28:	0641      	lsls	r1, r0, #25
 8004f2a:	d5fb      	bpl.n	8004f24 <_printf_i+0xe4>
 8004f2c:	881e      	ldrh	r6, [r3, #0]
 8004f2e:	2f6f      	cmp	r7, #111	; 0x6f
 8004f30:	bf0c      	ite	eq
 8004f32:	2308      	moveq	r3, #8
 8004f34:	230a      	movne	r3, #10
 8004f36:	4851      	ldr	r0, [pc, #324]	; (800507c <_printf_i+0x23c>)
 8004f38:	2100      	movs	r1, #0
 8004f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f3e:	6865      	ldr	r5, [r4, #4]
 8004f40:	2d00      	cmp	r5, #0
 8004f42:	bfa8      	it	ge
 8004f44:	6821      	ldrge	r1, [r4, #0]
 8004f46:	60a5      	str	r5, [r4, #8]
 8004f48:	bfa4      	itt	ge
 8004f4a:	f021 0104 	bicge.w	r1, r1, #4
 8004f4e:	6021      	strge	r1, [r4, #0]
 8004f50:	b90e      	cbnz	r6, 8004f56 <_printf_i+0x116>
 8004f52:	2d00      	cmp	r5, #0
 8004f54:	d04b      	beq.n	8004fee <_printf_i+0x1ae>
 8004f56:	4615      	mov	r5, r2
 8004f58:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f5c:	fb03 6711 	mls	r7, r3, r1, r6
 8004f60:	5dc7      	ldrb	r7, [r0, r7]
 8004f62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f66:	4637      	mov	r7, r6
 8004f68:	42bb      	cmp	r3, r7
 8004f6a:	460e      	mov	r6, r1
 8004f6c:	d9f4      	bls.n	8004f58 <_printf_i+0x118>
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d10b      	bne.n	8004f8a <_printf_i+0x14a>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	07de      	lsls	r6, r3, #31
 8004f76:	d508      	bpl.n	8004f8a <_printf_i+0x14a>
 8004f78:	6923      	ldr	r3, [r4, #16]
 8004f7a:	6861      	ldr	r1, [r4, #4]
 8004f7c:	4299      	cmp	r1, r3
 8004f7e:	bfde      	ittt	le
 8004f80:	2330      	movle	r3, #48	; 0x30
 8004f82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f8a:	1b52      	subs	r2, r2, r5
 8004f8c:	6122      	str	r2, [r4, #16]
 8004f8e:	464b      	mov	r3, r9
 8004f90:	4621      	mov	r1, r4
 8004f92:	4640      	mov	r0, r8
 8004f94:	f8cd a000 	str.w	sl, [sp]
 8004f98:	aa03      	add	r2, sp, #12
 8004f9a:	f7ff fedf 	bl	8004d5c <_printf_common>
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d14a      	bne.n	8005038 <_printf_i+0x1f8>
 8004fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa6:	b004      	add	sp, #16
 8004fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	f043 0320 	orr.w	r3, r3, #32
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	2778      	movs	r7, #120	; 0x78
 8004fb6:	4832      	ldr	r0, [pc, #200]	; (8005080 <_printf_i+0x240>)
 8004fb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	6829      	ldr	r1, [r5, #0]
 8004fc0:	061f      	lsls	r7, r3, #24
 8004fc2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fc6:	d402      	bmi.n	8004fce <_printf_i+0x18e>
 8004fc8:	065f      	lsls	r7, r3, #25
 8004fca:	bf48      	it	mi
 8004fcc:	b2b6      	uxthmi	r6, r6
 8004fce:	07df      	lsls	r7, r3, #31
 8004fd0:	bf48      	it	mi
 8004fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd6:	6029      	str	r1, [r5, #0]
 8004fd8:	bf48      	it	mi
 8004fda:	6023      	strmi	r3, [r4, #0]
 8004fdc:	b91e      	cbnz	r6, 8004fe6 <_printf_i+0x1a6>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	f023 0320 	bic.w	r3, r3, #32
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	2310      	movs	r3, #16
 8004fe8:	e7a6      	b.n	8004f38 <_printf_i+0xf8>
 8004fea:	4824      	ldr	r0, [pc, #144]	; (800507c <_printf_i+0x23c>)
 8004fec:	e7e4      	b.n	8004fb8 <_printf_i+0x178>
 8004fee:	4615      	mov	r5, r2
 8004ff0:	e7bd      	b.n	8004f6e <_printf_i+0x12e>
 8004ff2:	682b      	ldr	r3, [r5, #0]
 8004ff4:	6826      	ldr	r6, [r4, #0]
 8004ff6:	1d18      	adds	r0, r3, #4
 8004ff8:	6961      	ldr	r1, [r4, #20]
 8004ffa:	6028      	str	r0, [r5, #0]
 8004ffc:	0635      	lsls	r5, r6, #24
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	d501      	bpl.n	8005006 <_printf_i+0x1c6>
 8005002:	6019      	str	r1, [r3, #0]
 8005004:	e002      	b.n	800500c <_printf_i+0x1cc>
 8005006:	0670      	lsls	r0, r6, #25
 8005008:	d5fb      	bpl.n	8005002 <_printf_i+0x1c2>
 800500a:	8019      	strh	r1, [r3, #0]
 800500c:	2300      	movs	r3, #0
 800500e:	4615      	mov	r5, r2
 8005010:	6123      	str	r3, [r4, #16]
 8005012:	e7bc      	b.n	8004f8e <_printf_i+0x14e>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	2100      	movs	r1, #0
 8005018:	1d1a      	adds	r2, r3, #4
 800501a:	602a      	str	r2, [r5, #0]
 800501c:	681d      	ldr	r5, [r3, #0]
 800501e:	6862      	ldr	r2, [r4, #4]
 8005020:	4628      	mov	r0, r5
 8005022:	f000 fc28 	bl	8005876 <memchr>
 8005026:	b108      	cbz	r0, 800502c <_printf_i+0x1ec>
 8005028:	1b40      	subs	r0, r0, r5
 800502a:	6060      	str	r0, [r4, #4]
 800502c:	6863      	ldr	r3, [r4, #4]
 800502e:	6123      	str	r3, [r4, #16]
 8005030:	2300      	movs	r3, #0
 8005032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005036:	e7aa      	b.n	8004f8e <_printf_i+0x14e>
 8005038:	462a      	mov	r2, r5
 800503a:	4649      	mov	r1, r9
 800503c:	4640      	mov	r0, r8
 800503e:	6923      	ldr	r3, [r4, #16]
 8005040:	47d0      	blx	sl
 8005042:	3001      	adds	r0, #1
 8005044:	d0ad      	beq.n	8004fa2 <_printf_i+0x162>
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	079b      	lsls	r3, r3, #30
 800504a:	d413      	bmi.n	8005074 <_printf_i+0x234>
 800504c:	68e0      	ldr	r0, [r4, #12]
 800504e:	9b03      	ldr	r3, [sp, #12]
 8005050:	4298      	cmp	r0, r3
 8005052:	bfb8      	it	lt
 8005054:	4618      	movlt	r0, r3
 8005056:	e7a6      	b.n	8004fa6 <_printf_i+0x166>
 8005058:	2301      	movs	r3, #1
 800505a:	4632      	mov	r2, r6
 800505c:	4649      	mov	r1, r9
 800505e:	4640      	mov	r0, r8
 8005060:	47d0      	blx	sl
 8005062:	3001      	adds	r0, #1
 8005064:	d09d      	beq.n	8004fa2 <_printf_i+0x162>
 8005066:	3501      	adds	r5, #1
 8005068:	68e3      	ldr	r3, [r4, #12]
 800506a:	9903      	ldr	r1, [sp, #12]
 800506c:	1a5b      	subs	r3, r3, r1
 800506e:	42ab      	cmp	r3, r5
 8005070:	dcf2      	bgt.n	8005058 <_printf_i+0x218>
 8005072:	e7eb      	b.n	800504c <_printf_i+0x20c>
 8005074:	2500      	movs	r5, #0
 8005076:	f104 0619 	add.w	r6, r4, #25
 800507a:	e7f5      	b.n	8005068 <_printf_i+0x228>
 800507c:	0800bd3e 	.word	0x0800bd3e
 8005080:	0800bd4f 	.word	0x0800bd4f

08005084 <_scanf_float>:
 8005084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005088:	b087      	sub	sp, #28
 800508a:	9303      	str	r3, [sp, #12]
 800508c:	688b      	ldr	r3, [r1, #8]
 800508e:	4617      	mov	r7, r2
 8005090:	1e5a      	subs	r2, r3, #1
 8005092:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005096:	bf85      	ittet	hi
 8005098:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800509c:	195b      	addhi	r3, r3, r5
 800509e:	2300      	movls	r3, #0
 80050a0:	9302      	strhi	r3, [sp, #8]
 80050a2:	bf88      	it	hi
 80050a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80050a8:	468b      	mov	fp, r1
 80050aa:	f04f 0500 	mov.w	r5, #0
 80050ae:	bf8c      	ite	hi
 80050b0:	608b      	strhi	r3, [r1, #8]
 80050b2:	9302      	strls	r3, [sp, #8]
 80050b4:	680b      	ldr	r3, [r1, #0]
 80050b6:	4680      	mov	r8, r0
 80050b8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80050bc:	f84b 3b1c 	str.w	r3, [fp], #28
 80050c0:	460c      	mov	r4, r1
 80050c2:	465e      	mov	r6, fp
 80050c4:	46aa      	mov	sl, r5
 80050c6:	46a9      	mov	r9, r5
 80050c8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80050cc:	9501      	str	r5, [sp, #4]
 80050ce:	68a2      	ldr	r2, [r4, #8]
 80050d0:	b152      	cbz	r2, 80050e8 <_scanf_float+0x64>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b4e      	cmp	r3, #78	; 0x4e
 80050d8:	d864      	bhi.n	80051a4 <_scanf_float+0x120>
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	d83c      	bhi.n	8005158 <_scanf_float+0xd4>
 80050de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80050e2:	b2c8      	uxtb	r0, r1
 80050e4:	280e      	cmp	r0, #14
 80050e6:	d93a      	bls.n	800515e <_scanf_float+0xda>
 80050e8:	f1b9 0f00 	cmp.w	r9, #0
 80050ec:	d003      	beq.n	80050f6 <_scanf_float+0x72>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050fa:	f1ba 0f01 	cmp.w	sl, #1
 80050fe:	f200 8113 	bhi.w	8005328 <_scanf_float+0x2a4>
 8005102:	455e      	cmp	r6, fp
 8005104:	f200 8105 	bhi.w	8005312 <_scanf_float+0x28e>
 8005108:	2501      	movs	r5, #1
 800510a:	4628      	mov	r0, r5
 800510c:	b007      	add	sp, #28
 800510e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005112:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005116:	2a0d      	cmp	r2, #13
 8005118:	d8e6      	bhi.n	80050e8 <_scanf_float+0x64>
 800511a:	a101      	add	r1, pc, #4	; (adr r1, 8005120 <_scanf_float+0x9c>)
 800511c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005120:	0800525f 	.word	0x0800525f
 8005124:	080050e9 	.word	0x080050e9
 8005128:	080050e9 	.word	0x080050e9
 800512c:	080050e9 	.word	0x080050e9
 8005130:	080052bf 	.word	0x080052bf
 8005134:	08005297 	.word	0x08005297
 8005138:	080050e9 	.word	0x080050e9
 800513c:	080050e9 	.word	0x080050e9
 8005140:	0800526d 	.word	0x0800526d
 8005144:	080050e9 	.word	0x080050e9
 8005148:	080050e9 	.word	0x080050e9
 800514c:	080050e9 	.word	0x080050e9
 8005150:	080050e9 	.word	0x080050e9
 8005154:	08005225 	.word	0x08005225
 8005158:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800515c:	e7db      	b.n	8005116 <_scanf_float+0x92>
 800515e:	290e      	cmp	r1, #14
 8005160:	d8c2      	bhi.n	80050e8 <_scanf_float+0x64>
 8005162:	a001      	add	r0, pc, #4	; (adr r0, 8005168 <_scanf_float+0xe4>)
 8005164:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005168:	08005217 	.word	0x08005217
 800516c:	080050e9 	.word	0x080050e9
 8005170:	08005217 	.word	0x08005217
 8005174:	080052ab 	.word	0x080052ab
 8005178:	080050e9 	.word	0x080050e9
 800517c:	080051c5 	.word	0x080051c5
 8005180:	08005201 	.word	0x08005201
 8005184:	08005201 	.word	0x08005201
 8005188:	08005201 	.word	0x08005201
 800518c:	08005201 	.word	0x08005201
 8005190:	08005201 	.word	0x08005201
 8005194:	08005201 	.word	0x08005201
 8005198:	08005201 	.word	0x08005201
 800519c:	08005201 	.word	0x08005201
 80051a0:	08005201 	.word	0x08005201
 80051a4:	2b6e      	cmp	r3, #110	; 0x6e
 80051a6:	d809      	bhi.n	80051bc <_scanf_float+0x138>
 80051a8:	2b60      	cmp	r3, #96	; 0x60
 80051aa:	d8b2      	bhi.n	8005112 <_scanf_float+0x8e>
 80051ac:	2b54      	cmp	r3, #84	; 0x54
 80051ae:	d077      	beq.n	80052a0 <_scanf_float+0x21c>
 80051b0:	2b59      	cmp	r3, #89	; 0x59
 80051b2:	d199      	bne.n	80050e8 <_scanf_float+0x64>
 80051b4:	2d07      	cmp	r5, #7
 80051b6:	d197      	bne.n	80050e8 <_scanf_float+0x64>
 80051b8:	2508      	movs	r5, #8
 80051ba:	e029      	b.n	8005210 <_scanf_float+0x18c>
 80051bc:	2b74      	cmp	r3, #116	; 0x74
 80051be:	d06f      	beq.n	80052a0 <_scanf_float+0x21c>
 80051c0:	2b79      	cmp	r3, #121	; 0x79
 80051c2:	e7f6      	b.n	80051b2 <_scanf_float+0x12e>
 80051c4:	6821      	ldr	r1, [r4, #0]
 80051c6:	05c8      	lsls	r0, r1, #23
 80051c8:	d51a      	bpl.n	8005200 <_scanf_float+0x17c>
 80051ca:	9b02      	ldr	r3, [sp, #8]
 80051cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80051d0:	6021      	str	r1, [r4, #0]
 80051d2:	f109 0901 	add.w	r9, r9, #1
 80051d6:	b11b      	cbz	r3, 80051e0 <_scanf_float+0x15c>
 80051d8:	3b01      	subs	r3, #1
 80051da:	3201      	adds	r2, #1
 80051dc:	9302      	str	r3, [sp, #8]
 80051de:	60a2      	str	r2, [r4, #8]
 80051e0:	68a3      	ldr	r3, [r4, #8]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	60a3      	str	r3, [r4, #8]
 80051e6:	6923      	ldr	r3, [r4, #16]
 80051e8:	3301      	adds	r3, #1
 80051ea:	6123      	str	r3, [r4, #16]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	607b      	str	r3, [r7, #4]
 80051f4:	f340 8084 	ble.w	8005300 <_scanf_float+0x27c>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	3301      	adds	r3, #1
 80051fc:	603b      	str	r3, [r7, #0]
 80051fe:	e766      	b.n	80050ce <_scanf_float+0x4a>
 8005200:	eb1a 0f05 	cmn.w	sl, r5
 8005204:	f47f af70 	bne.w	80050e8 <_scanf_float+0x64>
 8005208:	6822      	ldr	r2, [r4, #0]
 800520a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800520e:	6022      	str	r2, [r4, #0]
 8005210:	f806 3b01 	strb.w	r3, [r6], #1
 8005214:	e7e4      	b.n	80051e0 <_scanf_float+0x15c>
 8005216:	6822      	ldr	r2, [r4, #0]
 8005218:	0610      	lsls	r0, r2, #24
 800521a:	f57f af65 	bpl.w	80050e8 <_scanf_float+0x64>
 800521e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005222:	e7f4      	b.n	800520e <_scanf_float+0x18a>
 8005224:	f1ba 0f00 	cmp.w	sl, #0
 8005228:	d10e      	bne.n	8005248 <_scanf_float+0x1c4>
 800522a:	f1b9 0f00 	cmp.w	r9, #0
 800522e:	d10e      	bne.n	800524e <_scanf_float+0x1ca>
 8005230:	6822      	ldr	r2, [r4, #0]
 8005232:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005236:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800523a:	d108      	bne.n	800524e <_scanf_float+0x1ca>
 800523c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005240:	f04f 0a01 	mov.w	sl, #1
 8005244:	6022      	str	r2, [r4, #0]
 8005246:	e7e3      	b.n	8005210 <_scanf_float+0x18c>
 8005248:	f1ba 0f02 	cmp.w	sl, #2
 800524c:	d055      	beq.n	80052fa <_scanf_float+0x276>
 800524e:	2d01      	cmp	r5, #1
 8005250:	d002      	beq.n	8005258 <_scanf_float+0x1d4>
 8005252:	2d04      	cmp	r5, #4
 8005254:	f47f af48 	bne.w	80050e8 <_scanf_float+0x64>
 8005258:	3501      	adds	r5, #1
 800525a:	b2ed      	uxtb	r5, r5
 800525c:	e7d8      	b.n	8005210 <_scanf_float+0x18c>
 800525e:	f1ba 0f01 	cmp.w	sl, #1
 8005262:	f47f af41 	bne.w	80050e8 <_scanf_float+0x64>
 8005266:	f04f 0a02 	mov.w	sl, #2
 800526a:	e7d1      	b.n	8005210 <_scanf_float+0x18c>
 800526c:	b97d      	cbnz	r5, 800528e <_scanf_float+0x20a>
 800526e:	f1b9 0f00 	cmp.w	r9, #0
 8005272:	f47f af3c 	bne.w	80050ee <_scanf_float+0x6a>
 8005276:	6822      	ldr	r2, [r4, #0]
 8005278:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800527c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005280:	f47f af39 	bne.w	80050f6 <_scanf_float+0x72>
 8005284:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005288:	2501      	movs	r5, #1
 800528a:	6022      	str	r2, [r4, #0]
 800528c:	e7c0      	b.n	8005210 <_scanf_float+0x18c>
 800528e:	2d03      	cmp	r5, #3
 8005290:	d0e2      	beq.n	8005258 <_scanf_float+0x1d4>
 8005292:	2d05      	cmp	r5, #5
 8005294:	e7de      	b.n	8005254 <_scanf_float+0x1d0>
 8005296:	2d02      	cmp	r5, #2
 8005298:	f47f af26 	bne.w	80050e8 <_scanf_float+0x64>
 800529c:	2503      	movs	r5, #3
 800529e:	e7b7      	b.n	8005210 <_scanf_float+0x18c>
 80052a0:	2d06      	cmp	r5, #6
 80052a2:	f47f af21 	bne.w	80050e8 <_scanf_float+0x64>
 80052a6:	2507      	movs	r5, #7
 80052a8:	e7b2      	b.n	8005210 <_scanf_float+0x18c>
 80052aa:	6822      	ldr	r2, [r4, #0]
 80052ac:	0591      	lsls	r1, r2, #22
 80052ae:	f57f af1b 	bpl.w	80050e8 <_scanf_float+0x64>
 80052b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80052b6:	6022      	str	r2, [r4, #0]
 80052b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80052bc:	e7a8      	b.n	8005210 <_scanf_float+0x18c>
 80052be:	6822      	ldr	r2, [r4, #0]
 80052c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80052c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80052c8:	d006      	beq.n	80052d8 <_scanf_float+0x254>
 80052ca:	0550      	lsls	r0, r2, #21
 80052cc:	f57f af0c 	bpl.w	80050e8 <_scanf_float+0x64>
 80052d0:	f1b9 0f00 	cmp.w	r9, #0
 80052d4:	f43f af0f 	beq.w	80050f6 <_scanf_float+0x72>
 80052d8:	0591      	lsls	r1, r2, #22
 80052da:	bf58      	it	pl
 80052dc:	9901      	ldrpl	r1, [sp, #4]
 80052de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052e2:	bf58      	it	pl
 80052e4:	eba9 0101 	subpl.w	r1, r9, r1
 80052e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80052ec:	f04f 0900 	mov.w	r9, #0
 80052f0:	bf58      	it	pl
 80052f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80052f6:	6022      	str	r2, [r4, #0]
 80052f8:	e78a      	b.n	8005210 <_scanf_float+0x18c>
 80052fa:	f04f 0a03 	mov.w	sl, #3
 80052fe:	e787      	b.n	8005210 <_scanf_float+0x18c>
 8005300:	4639      	mov	r1, r7
 8005302:	4640      	mov	r0, r8
 8005304:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005308:	4798      	blx	r3
 800530a:	2800      	cmp	r0, #0
 800530c:	f43f aedf 	beq.w	80050ce <_scanf_float+0x4a>
 8005310:	e6ea      	b.n	80050e8 <_scanf_float+0x64>
 8005312:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005316:	463a      	mov	r2, r7
 8005318:	4640      	mov	r0, r8
 800531a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800531e:	4798      	blx	r3
 8005320:	6923      	ldr	r3, [r4, #16]
 8005322:	3b01      	subs	r3, #1
 8005324:	6123      	str	r3, [r4, #16]
 8005326:	e6ec      	b.n	8005102 <_scanf_float+0x7e>
 8005328:	1e6b      	subs	r3, r5, #1
 800532a:	2b06      	cmp	r3, #6
 800532c:	d825      	bhi.n	800537a <_scanf_float+0x2f6>
 800532e:	2d02      	cmp	r5, #2
 8005330:	d836      	bhi.n	80053a0 <_scanf_float+0x31c>
 8005332:	455e      	cmp	r6, fp
 8005334:	f67f aee8 	bls.w	8005108 <_scanf_float+0x84>
 8005338:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800533c:	463a      	mov	r2, r7
 800533e:	4640      	mov	r0, r8
 8005340:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005344:	4798      	blx	r3
 8005346:	6923      	ldr	r3, [r4, #16]
 8005348:	3b01      	subs	r3, #1
 800534a:	6123      	str	r3, [r4, #16]
 800534c:	e7f1      	b.n	8005332 <_scanf_float+0x2ae>
 800534e:	9802      	ldr	r0, [sp, #8]
 8005350:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005354:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005358:	463a      	mov	r2, r7
 800535a:	9002      	str	r0, [sp, #8]
 800535c:	4640      	mov	r0, r8
 800535e:	4798      	blx	r3
 8005360:	6923      	ldr	r3, [r4, #16]
 8005362:	3b01      	subs	r3, #1
 8005364:	6123      	str	r3, [r4, #16]
 8005366:	f10a 3aff 	add.w	sl, sl, #4294967295
 800536a:	fa5f fa8a 	uxtb.w	sl, sl
 800536e:	f1ba 0f02 	cmp.w	sl, #2
 8005372:	d1ec      	bne.n	800534e <_scanf_float+0x2ca>
 8005374:	3d03      	subs	r5, #3
 8005376:	b2ed      	uxtb	r5, r5
 8005378:	1b76      	subs	r6, r6, r5
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	05da      	lsls	r2, r3, #23
 800537e:	d52f      	bpl.n	80053e0 <_scanf_float+0x35c>
 8005380:	055b      	lsls	r3, r3, #21
 8005382:	d510      	bpl.n	80053a6 <_scanf_float+0x322>
 8005384:	455e      	cmp	r6, fp
 8005386:	f67f aebf 	bls.w	8005108 <_scanf_float+0x84>
 800538a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800538e:	463a      	mov	r2, r7
 8005390:	4640      	mov	r0, r8
 8005392:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005396:	4798      	blx	r3
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	3b01      	subs	r3, #1
 800539c:	6123      	str	r3, [r4, #16]
 800539e:	e7f1      	b.n	8005384 <_scanf_float+0x300>
 80053a0:	46aa      	mov	sl, r5
 80053a2:	9602      	str	r6, [sp, #8]
 80053a4:	e7df      	b.n	8005366 <_scanf_float+0x2e2>
 80053a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80053aa:	6923      	ldr	r3, [r4, #16]
 80053ac:	2965      	cmp	r1, #101	; 0x65
 80053ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80053b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80053b6:	6123      	str	r3, [r4, #16]
 80053b8:	d00c      	beq.n	80053d4 <_scanf_float+0x350>
 80053ba:	2945      	cmp	r1, #69	; 0x45
 80053bc:	d00a      	beq.n	80053d4 <_scanf_float+0x350>
 80053be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053c2:	463a      	mov	r2, r7
 80053c4:	4640      	mov	r0, r8
 80053c6:	4798      	blx	r3
 80053c8:	6923      	ldr	r3, [r4, #16]
 80053ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	1eb5      	subs	r5, r6, #2
 80053d2:	6123      	str	r3, [r4, #16]
 80053d4:	463a      	mov	r2, r7
 80053d6:	4640      	mov	r0, r8
 80053d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053dc:	4798      	blx	r3
 80053de:	462e      	mov	r6, r5
 80053e0:	6825      	ldr	r5, [r4, #0]
 80053e2:	f015 0510 	ands.w	r5, r5, #16
 80053e6:	d155      	bne.n	8005494 <_scanf_float+0x410>
 80053e8:	7035      	strb	r5, [r6, #0]
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f4:	d11d      	bne.n	8005432 <_scanf_float+0x3ae>
 80053f6:	9b01      	ldr	r3, [sp, #4]
 80053f8:	454b      	cmp	r3, r9
 80053fa:	eba3 0209 	sub.w	r2, r3, r9
 80053fe:	d125      	bne.n	800544c <_scanf_float+0x3c8>
 8005400:	2200      	movs	r2, #0
 8005402:	4659      	mov	r1, fp
 8005404:	4640      	mov	r0, r8
 8005406:	f002 fc77 	bl	8007cf8 <_strtod_r>
 800540a:	9b03      	ldr	r3, [sp, #12]
 800540c:	f8d4 c000 	ldr.w	ip, [r4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f01c 0f02 	tst.w	ip, #2
 8005416:	4606      	mov	r6, r0
 8005418:	460f      	mov	r7, r1
 800541a:	f103 0204 	add.w	r2, r3, #4
 800541e:	d020      	beq.n	8005462 <_scanf_float+0x3de>
 8005420:	9903      	ldr	r1, [sp, #12]
 8005422:	600a      	str	r2, [r1, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	e9c3 6700 	strd	r6, r7, [r3]
 800542a:	68e3      	ldr	r3, [r4, #12]
 800542c:	3301      	adds	r3, #1
 800542e:	60e3      	str	r3, [r4, #12]
 8005430:	e66b      	b.n	800510a <_scanf_float+0x86>
 8005432:	9b04      	ldr	r3, [sp, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0e3      	beq.n	8005400 <_scanf_float+0x37c>
 8005438:	9905      	ldr	r1, [sp, #20]
 800543a:	230a      	movs	r3, #10
 800543c:	462a      	mov	r2, r5
 800543e:	4640      	mov	r0, r8
 8005440:	3101      	adds	r1, #1
 8005442:	f002 fcdd 	bl	8007e00 <_strtol_r>
 8005446:	9b04      	ldr	r3, [sp, #16]
 8005448:	9e05      	ldr	r6, [sp, #20]
 800544a:	1ac2      	subs	r2, r0, r3
 800544c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005450:	429e      	cmp	r6, r3
 8005452:	bf28      	it	cs
 8005454:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005458:	4630      	mov	r0, r6
 800545a:	490f      	ldr	r1, [pc, #60]	; (8005498 <_scanf_float+0x414>)
 800545c:	f000 f928 	bl	80056b0 <siprintf>
 8005460:	e7ce      	b.n	8005400 <_scanf_float+0x37c>
 8005462:	f01c 0f04 	tst.w	ip, #4
 8005466:	d1db      	bne.n	8005420 <_scanf_float+0x39c>
 8005468:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800546c:	f8cc 2000 	str.w	r2, [ip]
 8005470:	f8d3 8000 	ldr.w	r8, [r3]
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	f7fb fad8 	bl	8000a2c <__aeabi_dcmpun>
 800547c:	b128      	cbz	r0, 800548a <_scanf_float+0x406>
 800547e:	4807      	ldr	r0, [pc, #28]	; (800549c <_scanf_float+0x418>)
 8005480:	f000 fa16 	bl	80058b0 <nanf>
 8005484:	f8c8 0000 	str.w	r0, [r8]
 8005488:	e7cf      	b.n	800542a <_scanf_float+0x3a6>
 800548a:	4630      	mov	r0, r6
 800548c:	4639      	mov	r1, r7
 800548e:	f7fb fb2b 	bl	8000ae8 <__aeabi_d2f>
 8005492:	e7f7      	b.n	8005484 <_scanf_float+0x400>
 8005494:	2500      	movs	r5, #0
 8005496:	e638      	b.n	800510a <_scanf_float+0x86>
 8005498:	0800bd60 	.word	0x0800bd60
 800549c:	0800c0f5 	.word	0x0800c0f5

080054a0 <std>:
 80054a0:	2300      	movs	r3, #0
 80054a2:	b510      	push	{r4, lr}
 80054a4:	4604      	mov	r4, r0
 80054a6:	e9c0 3300 	strd	r3, r3, [r0]
 80054aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ae:	6083      	str	r3, [r0, #8]
 80054b0:	8181      	strh	r1, [r0, #12]
 80054b2:	6643      	str	r3, [r0, #100]	; 0x64
 80054b4:	81c2      	strh	r2, [r0, #14]
 80054b6:	6183      	str	r3, [r0, #24]
 80054b8:	4619      	mov	r1, r3
 80054ba:	2208      	movs	r2, #8
 80054bc:	305c      	adds	r0, #92	; 0x5c
 80054be:	f000 f95a 	bl	8005776 <memset>
 80054c2:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <std+0x58>)
 80054c4:	6224      	str	r4, [r4, #32]
 80054c6:	6263      	str	r3, [r4, #36]	; 0x24
 80054c8:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <std+0x5c>)
 80054ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80054cc:	4b0c      	ldr	r3, [pc, #48]	; (8005500 <std+0x60>)
 80054ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054d0:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <std+0x64>)
 80054d2:	6323      	str	r3, [r4, #48]	; 0x30
 80054d4:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <std+0x68>)
 80054d6:	429c      	cmp	r4, r3
 80054d8:	d006      	beq.n	80054e8 <std+0x48>
 80054da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80054de:	4294      	cmp	r4, r2
 80054e0:	d002      	beq.n	80054e8 <std+0x48>
 80054e2:	33d0      	adds	r3, #208	; 0xd0
 80054e4:	429c      	cmp	r4, r3
 80054e6:	d105      	bne.n	80054f4 <std+0x54>
 80054e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f0:	f000 b9be 	b.w	8005870 <__retarget_lock_init_recursive>
 80054f4:	bd10      	pop	{r4, pc}
 80054f6:	bf00      	nop
 80054f8:	080056f1 	.word	0x080056f1
 80054fc:	08005713 	.word	0x08005713
 8005500:	0800574b 	.word	0x0800574b
 8005504:	0800576f 	.word	0x0800576f
 8005508:	20000700 	.word	0x20000700

0800550c <stdio_exit_handler>:
 800550c:	4a02      	ldr	r2, [pc, #8]	; (8005518 <stdio_exit_handler+0xc>)
 800550e:	4903      	ldr	r1, [pc, #12]	; (800551c <stdio_exit_handler+0x10>)
 8005510:	4803      	ldr	r0, [pc, #12]	; (8005520 <stdio_exit_handler+0x14>)
 8005512:	f000 b869 	b.w	80055e8 <_fwalk_sglue>
 8005516:	bf00      	nop
 8005518:	20000028 	.word	0x20000028
 800551c:	0800843d 	.word	0x0800843d
 8005520:	20000034 	.word	0x20000034

08005524 <cleanup_stdio>:
 8005524:	6841      	ldr	r1, [r0, #4]
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <cleanup_stdio+0x34>)
 8005528:	b510      	push	{r4, lr}
 800552a:	4299      	cmp	r1, r3
 800552c:	4604      	mov	r4, r0
 800552e:	d001      	beq.n	8005534 <cleanup_stdio+0x10>
 8005530:	f002 ff84 	bl	800843c <_fflush_r>
 8005534:	68a1      	ldr	r1, [r4, #8]
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <cleanup_stdio+0x38>)
 8005538:	4299      	cmp	r1, r3
 800553a:	d002      	beq.n	8005542 <cleanup_stdio+0x1e>
 800553c:	4620      	mov	r0, r4
 800553e:	f002 ff7d 	bl	800843c <_fflush_r>
 8005542:	68e1      	ldr	r1, [r4, #12]
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <cleanup_stdio+0x3c>)
 8005546:	4299      	cmp	r1, r3
 8005548:	d004      	beq.n	8005554 <cleanup_stdio+0x30>
 800554a:	4620      	mov	r0, r4
 800554c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005550:	f002 bf74 	b.w	800843c <_fflush_r>
 8005554:	bd10      	pop	{r4, pc}
 8005556:	bf00      	nop
 8005558:	20000700 	.word	0x20000700
 800555c:	20000768 	.word	0x20000768
 8005560:	200007d0 	.word	0x200007d0

08005564 <global_stdio_init.part.0>:
 8005564:	b510      	push	{r4, lr}
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <global_stdio_init.part.0+0x30>)
 8005568:	4c0b      	ldr	r4, [pc, #44]	; (8005598 <global_stdio_init.part.0+0x34>)
 800556a:	4a0c      	ldr	r2, [pc, #48]	; (800559c <global_stdio_init.part.0+0x38>)
 800556c:	4620      	mov	r0, r4
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	2104      	movs	r1, #4
 8005572:	2200      	movs	r2, #0
 8005574:	f7ff ff94 	bl	80054a0 <std>
 8005578:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800557c:	2201      	movs	r2, #1
 800557e:	2109      	movs	r1, #9
 8005580:	f7ff ff8e 	bl	80054a0 <std>
 8005584:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005588:	2202      	movs	r2, #2
 800558a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800558e:	2112      	movs	r1, #18
 8005590:	f7ff bf86 	b.w	80054a0 <std>
 8005594:	20000838 	.word	0x20000838
 8005598:	20000700 	.word	0x20000700
 800559c:	0800550d 	.word	0x0800550d

080055a0 <__sfp_lock_acquire>:
 80055a0:	4801      	ldr	r0, [pc, #4]	; (80055a8 <__sfp_lock_acquire+0x8>)
 80055a2:	f000 b966 	b.w	8005872 <__retarget_lock_acquire_recursive>
 80055a6:	bf00      	nop
 80055a8:	20000841 	.word	0x20000841

080055ac <__sfp_lock_release>:
 80055ac:	4801      	ldr	r0, [pc, #4]	; (80055b4 <__sfp_lock_release+0x8>)
 80055ae:	f000 b961 	b.w	8005874 <__retarget_lock_release_recursive>
 80055b2:	bf00      	nop
 80055b4:	20000841 	.word	0x20000841

080055b8 <__sinit>:
 80055b8:	b510      	push	{r4, lr}
 80055ba:	4604      	mov	r4, r0
 80055bc:	f7ff fff0 	bl	80055a0 <__sfp_lock_acquire>
 80055c0:	6a23      	ldr	r3, [r4, #32]
 80055c2:	b11b      	cbz	r3, 80055cc <__sinit+0x14>
 80055c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c8:	f7ff bff0 	b.w	80055ac <__sfp_lock_release>
 80055cc:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <__sinit+0x28>)
 80055ce:	6223      	str	r3, [r4, #32]
 80055d0:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <__sinit+0x2c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f5      	bne.n	80055c4 <__sinit+0xc>
 80055d8:	f7ff ffc4 	bl	8005564 <global_stdio_init.part.0>
 80055dc:	e7f2      	b.n	80055c4 <__sinit+0xc>
 80055de:	bf00      	nop
 80055e0:	08005525 	.word	0x08005525
 80055e4:	20000838 	.word	0x20000838

080055e8 <_fwalk_sglue>:
 80055e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ec:	4607      	mov	r7, r0
 80055ee:	4688      	mov	r8, r1
 80055f0:	4614      	mov	r4, r2
 80055f2:	2600      	movs	r6, #0
 80055f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055f8:	f1b9 0901 	subs.w	r9, r9, #1
 80055fc:	d505      	bpl.n	800560a <_fwalk_sglue+0x22>
 80055fe:	6824      	ldr	r4, [r4, #0]
 8005600:	2c00      	cmp	r4, #0
 8005602:	d1f7      	bne.n	80055f4 <_fwalk_sglue+0xc>
 8005604:	4630      	mov	r0, r6
 8005606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800560a:	89ab      	ldrh	r3, [r5, #12]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d907      	bls.n	8005620 <_fwalk_sglue+0x38>
 8005610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005614:	3301      	adds	r3, #1
 8005616:	d003      	beq.n	8005620 <_fwalk_sglue+0x38>
 8005618:	4629      	mov	r1, r5
 800561a:	4638      	mov	r0, r7
 800561c:	47c0      	blx	r8
 800561e:	4306      	orrs	r6, r0
 8005620:	3568      	adds	r5, #104	; 0x68
 8005622:	e7e9      	b.n	80055f8 <_fwalk_sglue+0x10>

08005624 <iprintf>:
 8005624:	b40f      	push	{r0, r1, r2, r3}
 8005626:	b507      	push	{r0, r1, r2, lr}
 8005628:	4906      	ldr	r1, [pc, #24]	; (8005644 <iprintf+0x20>)
 800562a:	ab04      	add	r3, sp, #16
 800562c:	6808      	ldr	r0, [r1, #0]
 800562e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005632:	6881      	ldr	r1, [r0, #8]
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	f002 fd65 	bl	8008104 <_vfiprintf_r>
 800563a:	b003      	add	sp, #12
 800563c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005640:	b004      	add	sp, #16
 8005642:	4770      	bx	lr
 8005644:	20000080 	.word	0x20000080

08005648 <sniprintf>:
 8005648:	b40c      	push	{r2, r3}
 800564a:	b530      	push	{r4, r5, lr}
 800564c:	4b17      	ldr	r3, [pc, #92]	; (80056ac <sniprintf+0x64>)
 800564e:	1e0c      	subs	r4, r1, #0
 8005650:	681d      	ldr	r5, [r3, #0]
 8005652:	b09d      	sub	sp, #116	; 0x74
 8005654:	da08      	bge.n	8005668 <sniprintf+0x20>
 8005656:	238b      	movs	r3, #139	; 0x8b
 8005658:	f04f 30ff 	mov.w	r0, #4294967295
 800565c:	602b      	str	r3, [r5, #0]
 800565e:	b01d      	add	sp, #116	; 0x74
 8005660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005664:	b002      	add	sp, #8
 8005666:	4770      	bx	lr
 8005668:	f44f 7302 	mov.w	r3, #520	; 0x208
 800566c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005670:	bf0c      	ite	eq
 8005672:	4623      	moveq	r3, r4
 8005674:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005678:	9304      	str	r3, [sp, #16]
 800567a:	9307      	str	r3, [sp, #28]
 800567c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005680:	9002      	str	r0, [sp, #8]
 8005682:	9006      	str	r0, [sp, #24]
 8005684:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005688:	4628      	mov	r0, r5
 800568a:	ab21      	add	r3, sp, #132	; 0x84
 800568c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800568e:	a902      	add	r1, sp, #8
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	f002 fc11 	bl	8007eb8 <_svfiprintf_r>
 8005696:	1c43      	adds	r3, r0, #1
 8005698:	bfbc      	itt	lt
 800569a:	238b      	movlt	r3, #139	; 0x8b
 800569c:	602b      	strlt	r3, [r5, #0]
 800569e:	2c00      	cmp	r4, #0
 80056a0:	d0dd      	beq.n	800565e <sniprintf+0x16>
 80056a2:	2200      	movs	r2, #0
 80056a4:	9b02      	ldr	r3, [sp, #8]
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	e7d9      	b.n	800565e <sniprintf+0x16>
 80056aa:	bf00      	nop
 80056ac:	20000080 	.word	0x20000080

080056b0 <siprintf>:
 80056b0:	b40e      	push	{r1, r2, r3}
 80056b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056b6:	b500      	push	{lr}
 80056b8:	b09c      	sub	sp, #112	; 0x70
 80056ba:	ab1d      	add	r3, sp, #116	; 0x74
 80056bc:	9002      	str	r0, [sp, #8]
 80056be:	9006      	str	r0, [sp, #24]
 80056c0:	9107      	str	r1, [sp, #28]
 80056c2:	9104      	str	r1, [sp, #16]
 80056c4:	4808      	ldr	r0, [pc, #32]	; (80056e8 <siprintf+0x38>)
 80056c6:	4909      	ldr	r1, [pc, #36]	; (80056ec <siprintf+0x3c>)
 80056c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80056cc:	9105      	str	r1, [sp, #20]
 80056ce:	6800      	ldr	r0, [r0, #0]
 80056d0:	a902      	add	r1, sp, #8
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	f002 fbf0 	bl	8007eb8 <_svfiprintf_r>
 80056d8:	2200      	movs	r2, #0
 80056da:	9b02      	ldr	r3, [sp, #8]
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	b01c      	add	sp, #112	; 0x70
 80056e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056e4:	b003      	add	sp, #12
 80056e6:	4770      	bx	lr
 80056e8:	20000080 	.word	0x20000080
 80056ec:	ffff0208 	.word	0xffff0208

080056f0 <__sread>:
 80056f0:	b510      	push	{r4, lr}
 80056f2:	460c      	mov	r4, r1
 80056f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f8:	f000 f86c 	bl	80057d4 <_read_r>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	bfab      	itete	ge
 8005700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005702:	89a3      	ldrhlt	r3, [r4, #12]
 8005704:	181b      	addge	r3, r3, r0
 8005706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800570a:	bfac      	ite	ge
 800570c:	6563      	strge	r3, [r4, #84]	; 0x54
 800570e:	81a3      	strhlt	r3, [r4, #12]
 8005710:	bd10      	pop	{r4, pc}

08005712 <__swrite>:
 8005712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005716:	461f      	mov	r7, r3
 8005718:	898b      	ldrh	r3, [r1, #12]
 800571a:	4605      	mov	r5, r0
 800571c:	05db      	lsls	r3, r3, #23
 800571e:	460c      	mov	r4, r1
 8005720:	4616      	mov	r6, r2
 8005722:	d505      	bpl.n	8005730 <__swrite+0x1e>
 8005724:	2302      	movs	r3, #2
 8005726:	2200      	movs	r2, #0
 8005728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572c:	f000 f840 	bl	80057b0 <_lseek_r>
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	4632      	mov	r2, r6
 8005734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005738:	81a3      	strh	r3, [r4, #12]
 800573a:	4628      	mov	r0, r5
 800573c:	463b      	mov	r3, r7
 800573e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005746:	f000 b857 	b.w	80057f8 <_write_r>

0800574a <__sseek>:
 800574a:	b510      	push	{r4, lr}
 800574c:	460c      	mov	r4, r1
 800574e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005752:	f000 f82d 	bl	80057b0 <_lseek_r>
 8005756:	1c43      	adds	r3, r0, #1
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	bf15      	itete	ne
 800575c:	6560      	strne	r0, [r4, #84]	; 0x54
 800575e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005766:	81a3      	strheq	r3, [r4, #12]
 8005768:	bf18      	it	ne
 800576a:	81a3      	strhne	r3, [r4, #12]
 800576c:	bd10      	pop	{r4, pc}

0800576e <__sclose>:
 800576e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005772:	f000 b80d 	b.w	8005790 <_close_r>

08005776 <memset>:
 8005776:	4603      	mov	r3, r0
 8005778:	4402      	add	r2, r0
 800577a:	4293      	cmp	r3, r2
 800577c:	d100      	bne.n	8005780 <memset+0xa>
 800577e:	4770      	bx	lr
 8005780:	f803 1b01 	strb.w	r1, [r3], #1
 8005784:	e7f9      	b.n	800577a <memset+0x4>
	...

08005788 <_localeconv_r>:
 8005788:	4800      	ldr	r0, [pc, #0]	; (800578c <_localeconv_r+0x4>)
 800578a:	4770      	bx	lr
 800578c:	20000174 	.word	0x20000174

08005790 <_close_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	2300      	movs	r3, #0
 8005794:	4d05      	ldr	r5, [pc, #20]	; (80057ac <_close_r+0x1c>)
 8005796:	4604      	mov	r4, r0
 8005798:	4608      	mov	r0, r1
 800579a:	602b      	str	r3, [r5, #0]
 800579c:	f7fe fd5a 	bl	8004254 <_close>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_close_r+0x1a>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_close_r+0x1a>
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	2000083c 	.word	0x2000083c

080057b0 <_lseek_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4604      	mov	r4, r0
 80057b4:	4608      	mov	r0, r1
 80057b6:	4611      	mov	r1, r2
 80057b8:	2200      	movs	r2, #0
 80057ba:	4d05      	ldr	r5, [pc, #20]	; (80057d0 <_lseek_r+0x20>)
 80057bc:	602a      	str	r2, [r5, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	f7fe fd6c 	bl	800429c <_lseek>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d102      	bne.n	80057ce <_lseek_r+0x1e>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b103      	cbz	r3, 80057ce <_lseek_r+0x1e>
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
 80057d0:	2000083c 	.word	0x2000083c

080057d4 <_read_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4604      	mov	r4, r0
 80057d8:	4608      	mov	r0, r1
 80057da:	4611      	mov	r1, r2
 80057dc:	2200      	movs	r2, #0
 80057de:	4d05      	ldr	r5, [pc, #20]	; (80057f4 <_read_r+0x20>)
 80057e0:	602a      	str	r2, [r5, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	f7fe fd19 	bl	800421a <_read>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d102      	bne.n	80057f2 <_read_r+0x1e>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	b103      	cbz	r3, 80057f2 <_read_r+0x1e>
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	2000083c 	.word	0x2000083c

080057f8 <_write_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4604      	mov	r4, r0
 80057fc:	4608      	mov	r0, r1
 80057fe:	4611      	mov	r1, r2
 8005800:	2200      	movs	r2, #0
 8005802:	4d05      	ldr	r5, [pc, #20]	; (8005818 <_write_r+0x20>)
 8005804:	602a      	str	r2, [r5, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	f7fe ff8e 	bl	8004728 <_write>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	d102      	bne.n	8005816 <_write_r+0x1e>
 8005810:	682b      	ldr	r3, [r5, #0]
 8005812:	b103      	cbz	r3, 8005816 <_write_r+0x1e>
 8005814:	6023      	str	r3, [r4, #0]
 8005816:	bd38      	pop	{r3, r4, r5, pc}
 8005818:	2000083c 	.word	0x2000083c

0800581c <__errno>:
 800581c:	4b01      	ldr	r3, [pc, #4]	; (8005824 <__errno+0x8>)
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20000080 	.word	0x20000080

08005828 <__libc_init_array>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	2600      	movs	r6, #0
 800582c:	4d0c      	ldr	r5, [pc, #48]	; (8005860 <__libc_init_array+0x38>)
 800582e:	4c0d      	ldr	r4, [pc, #52]	; (8005864 <__libc_init_array+0x3c>)
 8005830:	1b64      	subs	r4, r4, r5
 8005832:	10a4      	asrs	r4, r4, #2
 8005834:	42a6      	cmp	r6, r4
 8005836:	d109      	bne.n	800584c <__libc_init_array+0x24>
 8005838:	f004 fb70 	bl	8009f1c <_init>
 800583c:	2600      	movs	r6, #0
 800583e:	4d0a      	ldr	r5, [pc, #40]	; (8005868 <__libc_init_array+0x40>)
 8005840:	4c0a      	ldr	r4, [pc, #40]	; (800586c <__libc_init_array+0x44>)
 8005842:	1b64      	subs	r4, r4, r5
 8005844:	10a4      	asrs	r4, r4, #2
 8005846:	42a6      	cmp	r6, r4
 8005848:	d105      	bne.n	8005856 <__libc_init_array+0x2e>
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005850:	4798      	blx	r3
 8005852:	3601      	adds	r6, #1
 8005854:	e7ee      	b.n	8005834 <__libc_init_array+0xc>
 8005856:	f855 3b04 	ldr.w	r3, [r5], #4
 800585a:	4798      	blx	r3
 800585c:	3601      	adds	r6, #1
 800585e:	e7f2      	b.n	8005846 <__libc_init_array+0x1e>
 8005860:	0800c188 	.word	0x0800c188
 8005864:	0800c188 	.word	0x0800c188
 8005868:	0800c188 	.word	0x0800c188
 800586c:	0800c18c 	.word	0x0800c18c

08005870 <__retarget_lock_init_recursive>:
 8005870:	4770      	bx	lr

08005872 <__retarget_lock_acquire_recursive>:
 8005872:	4770      	bx	lr

08005874 <__retarget_lock_release_recursive>:
 8005874:	4770      	bx	lr

08005876 <memchr>:
 8005876:	4603      	mov	r3, r0
 8005878:	b510      	push	{r4, lr}
 800587a:	b2c9      	uxtb	r1, r1
 800587c:	4402      	add	r2, r0
 800587e:	4293      	cmp	r3, r2
 8005880:	4618      	mov	r0, r3
 8005882:	d101      	bne.n	8005888 <memchr+0x12>
 8005884:	2000      	movs	r0, #0
 8005886:	e003      	b.n	8005890 <memchr+0x1a>
 8005888:	7804      	ldrb	r4, [r0, #0]
 800588a:	3301      	adds	r3, #1
 800588c:	428c      	cmp	r4, r1
 800588e:	d1f6      	bne.n	800587e <memchr+0x8>
 8005890:	bd10      	pop	{r4, pc}

08005892 <memcpy>:
 8005892:	440a      	add	r2, r1
 8005894:	4291      	cmp	r1, r2
 8005896:	f100 33ff 	add.w	r3, r0, #4294967295
 800589a:	d100      	bne.n	800589e <memcpy+0xc>
 800589c:	4770      	bx	lr
 800589e:	b510      	push	{r4, lr}
 80058a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a4:	4291      	cmp	r1, r2
 80058a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058aa:	d1f9      	bne.n	80058a0 <memcpy+0xe>
 80058ac:	bd10      	pop	{r4, pc}
	...

080058b0 <nanf>:
 80058b0:	4800      	ldr	r0, [pc, #0]	; (80058b4 <nanf+0x4>)
 80058b2:	4770      	bx	lr
 80058b4:	7fc00000 	.word	0x7fc00000

080058b8 <quorem>:
 80058b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	6903      	ldr	r3, [r0, #16]
 80058be:	690c      	ldr	r4, [r1, #16]
 80058c0:	4607      	mov	r7, r0
 80058c2:	42a3      	cmp	r3, r4
 80058c4:	db7f      	blt.n	80059c6 <quorem+0x10e>
 80058c6:	3c01      	subs	r4, #1
 80058c8:	f100 0514 	add.w	r5, r0, #20
 80058cc:	f101 0814 	add.w	r8, r1, #20
 80058d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058d4:	9301      	str	r3, [sp, #4]
 80058d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80058da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058de:	3301      	adds	r3, #1
 80058e0:	429a      	cmp	r2, r3
 80058e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80058e6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80058ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80058ee:	d331      	bcc.n	8005954 <quorem+0x9c>
 80058f0:	f04f 0e00 	mov.w	lr, #0
 80058f4:	4640      	mov	r0, r8
 80058f6:	46ac      	mov	ip, r5
 80058f8:	46f2      	mov	sl, lr
 80058fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80058fe:	b293      	uxth	r3, r2
 8005900:	fb06 e303 	mla	r3, r6, r3, lr
 8005904:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005908:	0c1a      	lsrs	r2, r3, #16
 800590a:	b29b      	uxth	r3, r3
 800590c:	fb06 220e 	mla	r2, r6, lr, r2
 8005910:	ebaa 0303 	sub.w	r3, sl, r3
 8005914:	f8dc a000 	ldr.w	sl, [ip]
 8005918:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800591c:	fa1f fa8a 	uxth.w	sl, sl
 8005920:	4453      	add	r3, sl
 8005922:	f8dc a000 	ldr.w	sl, [ip]
 8005926:	b292      	uxth	r2, r2
 8005928:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800592c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005930:	b29b      	uxth	r3, r3
 8005932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005936:	4581      	cmp	r9, r0
 8005938:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800593c:	f84c 3b04 	str.w	r3, [ip], #4
 8005940:	d2db      	bcs.n	80058fa <quorem+0x42>
 8005942:	f855 300b 	ldr.w	r3, [r5, fp]
 8005946:	b92b      	cbnz	r3, 8005954 <quorem+0x9c>
 8005948:	9b01      	ldr	r3, [sp, #4]
 800594a:	3b04      	subs	r3, #4
 800594c:	429d      	cmp	r5, r3
 800594e:	461a      	mov	r2, r3
 8005950:	d32d      	bcc.n	80059ae <quorem+0xf6>
 8005952:	613c      	str	r4, [r7, #16]
 8005954:	4638      	mov	r0, r7
 8005956:	f001 f9df 	bl	8006d18 <__mcmp>
 800595a:	2800      	cmp	r0, #0
 800595c:	db23      	blt.n	80059a6 <quorem+0xee>
 800595e:	4629      	mov	r1, r5
 8005960:	2000      	movs	r0, #0
 8005962:	3601      	adds	r6, #1
 8005964:	f858 2b04 	ldr.w	r2, [r8], #4
 8005968:	f8d1 c000 	ldr.w	ip, [r1]
 800596c:	b293      	uxth	r3, r2
 800596e:	1ac3      	subs	r3, r0, r3
 8005970:	0c12      	lsrs	r2, r2, #16
 8005972:	fa1f f08c 	uxth.w	r0, ip
 8005976:	4403      	add	r3, r0
 8005978:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800597c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005980:	b29b      	uxth	r3, r3
 8005982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005986:	45c1      	cmp	r9, r8
 8005988:	ea4f 4022 	mov.w	r0, r2, asr #16
 800598c:	f841 3b04 	str.w	r3, [r1], #4
 8005990:	d2e8      	bcs.n	8005964 <quorem+0xac>
 8005992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800599a:	b922      	cbnz	r2, 80059a6 <quorem+0xee>
 800599c:	3b04      	subs	r3, #4
 800599e:	429d      	cmp	r5, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	d30a      	bcc.n	80059ba <quorem+0x102>
 80059a4:	613c      	str	r4, [r7, #16]
 80059a6:	4630      	mov	r0, r6
 80059a8:	b003      	add	sp, #12
 80059aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	3b04      	subs	r3, #4
 80059b2:	2a00      	cmp	r2, #0
 80059b4:	d1cd      	bne.n	8005952 <quorem+0x9a>
 80059b6:	3c01      	subs	r4, #1
 80059b8:	e7c8      	b.n	800594c <quorem+0x94>
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	3b04      	subs	r3, #4
 80059be:	2a00      	cmp	r2, #0
 80059c0:	d1f0      	bne.n	80059a4 <quorem+0xec>
 80059c2:	3c01      	subs	r4, #1
 80059c4:	e7eb      	b.n	800599e <quorem+0xe6>
 80059c6:	2000      	movs	r0, #0
 80059c8:	e7ee      	b.n	80059a8 <quorem+0xf0>
 80059ca:	0000      	movs	r0, r0
 80059cc:	0000      	movs	r0, r0
	...

080059d0 <_dtoa_r>:
 80059d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	4616      	mov	r6, r2
 80059d6:	461f      	mov	r7, r3
 80059d8:	69c4      	ldr	r4, [r0, #28]
 80059da:	b099      	sub	sp, #100	; 0x64
 80059dc:	4605      	mov	r5, r0
 80059de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80059e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80059e6:	b974      	cbnz	r4, 8005a06 <_dtoa_r+0x36>
 80059e8:	2010      	movs	r0, #16
 80059ea:	f000 fe1d 	bl	8006628 <malloc>
 80059ee:	4602      	mov	r2, r0
 80059f0:	61e8      	str	r0, [r5, #28]
 80059f2:	b920      	cbnz	r0, 80059fe <_dtoa_r+0x2e>
 80059f4:	21ef      	movs	r1, #239	; 0xef
 80059f6:	4bac      	ldr	r3, [pc, #688]	; (8005ca8 <_dtoa_r+0x2d8>)
 80059f8:	48ac      	ldr	r0, [pc, #688]	; (8005cac <_dtoa_r+0x2dc>)
 80059fa:	f002 fe1f 	bl	800863c <__assert_func>
 80059fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a02:	6004      	str	r4, [r0, #0]
 8005a04:	60c4      	str	r4, [r0, #12]
 8005a06:	69eb      	ldr	r3, [r5, #28]
 8005a08:	6819      	ldr	r1, [r3, #0]
 8005a0a:	b151      	cbz	r1, 8005a22 <_dtoa_r+0x52>
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4093      	lsls	r3, r2
 8005a12:	604a      	str	r2, [r1, #4]
 8005a14:	608b      	str	r3, [r1, #8]
 8005a16:	4628      	mov	r0, r5
 8005a18:	f000 fefa 	bl	8006810 <_Bfree>
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	69eb      	ldr	r3, [r5, #28]
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	1e3b      	subs	r3, r7, #0
 8005a24:	bfaf      	iteee	ge
 8005a26:	2300      	movge	r3, #0
 8005a28:	2201      	movlt	r2, #1
 8005a2a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a2e:	9305      	strlt	r3, [sp, #20]
 8005a30:	bfa8      	it	ge
 8005a32:	f8c8 3000 	strge.w	r3, [r8]
 8005a36:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005a3a:	4b9d      	ldr	r3, [pc, #628]	; (8005cb0 <_dtoa_r+0x2e0>)
 8005a3c:	bfb8      	it	lt
 8005a3e:	f8c8 2000 	strlt.w	r2, [r8]
 8005a42:	ea33 0309 	bics.w	r3, r3, r9
 8005a46:	d119      	bne.n	8005a7c <_dtoa_r+0xac>
 8005a48:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a54:	4333      	orrs	r3, r6
 8005a56:	f000 8589 	beq.w	800656c <_dtoa_r+0xb9c>
 8005a5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a5c:	b953      	cbnz	r3, 8005a74 <_dtoa_r+0xa4>
 8005a5e:	4b95      	ldr	r3, [pc, #596]	; (8005cb4 <_dtoa_r+0x2e4>)
 8005a60:	e023      	b.n	8005aaa <_dtoa_r+0xda>
 8005a62:	4b95      	ldr	r3, [pc, #596]	; (8005cb8 <_dtoa_r+0x2e8>)
 8005a64:	9303      	str	r3, [sp, #12]
 8005a66:	3308      	adds	r3, #8
 8005a68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	9803      	ldr	r0, [sp, #12]
 8005a6e:	b019      	add	sp, #100	; 0x64
 8005a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a74:	4b8f      	ldr	r3, [pc, #572]	; (8005cb4 <_dtoa_r+0x2e4>)
 8005a76:	9303      	str	r3, [sp, #12]
 8005a78:	3303      	adds	r3, #3
 8005a7a:	e7f5      	b.n	8005a68 <_dtoa_r+0x98>
 8005a7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005a80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005a84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a88:	2200      	movs	r2, #0
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f7fa ff9c 	bl	80009c8 <__aeabi_dcmpeq>
 8005a90:	4680      	mov	r8, r0
 8005a92:	b160      	cbz	r0, 8005aae <_dtoa_r+0xde>
 8005a94:	2301      	movs	r3, #1
 8005a96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8562 	beq.w	8006566 <_dtoa_r+0xb96>
 8005aa2:	4b86      	ldr	r3, [pc, #536]	; (8005cbc <_dtoa_r+0x2ec>)
 8005aa4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	9303      	str	r3, [sp, #12]
 8005aac:	e7de      	b.n	8005a6c <_dtoa_r+0x9c>
 8005aae:	ab16      	add	r3, sp, #88	; 0x58
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	ab17      	add	r3, sp, #92	; 0x5c
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005abc:	f001 fa3c 	bl	8006f38 <__d2b>
 8005ac0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005ac4:	4682      	mov	sl, r0
 8005ac6:	2c00      	cmp	r4, #0
 8005ac8:	d07e      	beq.n	8005bc8 <_dtoa_r+0x1f8>
 8005aca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ad0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ad8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005adc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005ae0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	4b75      	ldr	r3, [pc, #468]	; (8005cc0 <_dtoa_r+0x2f0>)
 8005aea:	f7fa fb4d 	bl	8000188 <__aeabi_dsub>
 8005aee:	a368      	add	r3, pc, #416	; (adr r3, 8005c90 <_dtoa_r+0x2c0>)
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f7fa fd00 	bl	80004f8 <__aeabi_dmul>
 8005af8:	a367      	add	r3, pc, #412	; (adr r3, 8005c98 <_dtoa_r+0x2c8>)
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	f7fa fb45 	bl	800018c <__adddf3>
 8005b02:	4606      	mov	r6, r0
 8005b04:	4620      	mov	r0, r4
 8005b06:	460f      	mov	r7, r1
 8005b08:	f7fa fc8c 	bl	8000424 <__aeabi_i2d>
 8005b0c:	a364      	add	r3, pc, #400	; (adr r3, 8005ca0 <_dtoa_r+0x2d0>)
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f7fa fcf1 	bl	80004f8 <__aeabi_dmul>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	f7fa fb35 	bl	800018c <__adddf3>
 8005b22:	4606      	mov	r6, r0
 8005b24:	460f      	mov	r7, r1
 8005b26:	f7fa ff97 	bl	8000a58 <__aeabi_d2iz>
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	4683      	mov	fp, r0
 8005b2e:	2300      	movs	r3, #0
 8005b30:	4630      	mov	r0, r6
 8005b32:	4639      	mov	r1, r7
 8005b34:	f7fa ff52 	bl	80009dc <__aeabi_dcmplt>
 8005b38:	b148      	cbz	r0, 8005b4e <_dtoa_r+0x17e>
 8005b3a:	4658      	mov	r0, fp
 8005b3c:	f7fa fc72 	bl	8000424 <__aeabi_i2d>
 8005b40:	4632      	mov	r2, r6
 8005b42:	463b      	mov	r3, r7
 8005b44:	f7fa ff40 	bl	80009c8 <__aeabi_dcmpeq>
 8005b48:	b908      	cbnz	r0, 8005b4e <_dtoa_r+0x17e>
 8005b4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b4e:	f1bb 0f16 	cmp.w	fp, #22
 8005b52:	d857      	bhi.n	8005c04 <_dtoa_r+0x234>
 8005b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b58:	4b5a      	ldr	r3, [pc, #360]	; (8005cc4 <_dtoa_r+0x2f4>)
 8005b5a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f7fa ff3b 	bl	80009dc <__aeabi_dcmplt>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d04e      	beq.n	8005c08 <_dtoa_r+0x238>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b70:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b74:	1b1b      	subs	r3, r3, r4
 8005b76:	1e5a      	subs	r2, r3, #1
 8005b78:	bf46      	itte	mi
 8005b7a:	f1c3 0901 	rsbmi	r9, r3, #1
 8005b7e:	2300      	movmi	r3, #0
 8005b80:	f04f 0900 	movpl.w	r9, #0
 8005b84:	9209      	str	r2, [sp, #36]	; 0x24
 8005b86:	bf48      	it	mi
 8005b88:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005b8a:	f1bb 0f00 	cmp.w	fp, #0
 8005b8e:	db3d      	blt.n	8005c0c <_dtoa_r+0x23c>
 8005b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b92:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005b96:	445b      	add	r3, fp
 8005b98:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8005b9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ba0:	2b09      	cmp	r3, #9
 8005ba2:	d867      	bhi.n	8005c74 <_dtoa_r+0x2a4>
 8005ba4:	2b05      	cmp	r3, #5
 8005ba6:	bfc4      	itt	gt
 8005ba8:	3b04      	subgt	r3, #4
 8005baa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005bac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bae:	bfc8      	it	gt
 8005bb0:	2400      	movgt	r4, #0
 8005bb2:	f1a3 0302 	sub.w	r3, r3, #2
 8005bb6:	bfd8      	it	le
 8005bb8:	2401      	movle	r4, #1
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	f200 8086 	bhi.w	8005ccc <_dtoa_r+0x2fc>
 8005bc0:	e8df f003 	tbb	[pc, r3]
 8005bc4:	5637392c 	.word	0x5637392c
 8005bc8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005bcc:	441c      	add	r4, r3
 8005bce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	bfc1      	itttt	gt
 8005bd6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005bda:	fa09 f903 	lslgt.w	r9, r9, r3
 8005bde:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005be2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005be6:	bfd6      	itet	le
 8005be8:	f1c3 0320 	rsble	r3, r3, #32
 8005bec:	ea49 0003 	orrgt.w	r0, r9, r3
 8005bf0:	fa06 f003 	lslle.w	r0, r6, r3
 8005bf4:	f7fa fc06 	bl	8000404 <__aeabi_ui2d>
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005bfe:	3c01      	subs	r4, #1
 8005c00:	9213      	str	r2, [sp, #76]	; 0x4c
 8005c02:	e76f      	b.n	8005ae4 <_dtoa_r+0x114>
 8005c04:	2301      	movs	r3, #1
 8005c06:	e7b3      	b.n	8005b70 <_dtoa_r+0x1a0>
 8005c08:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c0a:	e7b2      	b.n	8005b72 <_dtoa_r+0x1a2>
 8005c0c:	f1cb 0300 	rsb	r3, fp, #0
 8005c10:	930a      	str	r3, [sp, #40]	; 0x28
 8005c12:	2300      	movs	r3, #0
 8005c14:	eba9 090b 	sub.w	r9, r9, fp
 8005c18:	930e      	str	r3, [sp, #56]	; 0x38
 8005c1a:	e7c0      	b.n	8005b9e <_dtoa_r+0x1ce>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	dc55      	bgt.n	8005cd2 <_dtoa_r+0x302>
 8005c26:	2301      	movs	r3, #1
 8005c28:	461a      	mov	r2, r3
 8005c2a:	9306      	str	r3, [sp, #24]
 8005c2c:	9308      	str	r3, [sp, #32]
 8005c2e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005c30:	e00b      	b.n	8005c4a <_dtoa_r+0x27a>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e7f3      	b.n	8005c1e <_dtoa_r+0x24e>
 8005c36:	2300      	movs	r3, #0
 8005c38:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c3c:	445b      	add	r3, fp
 8005c3e:	9306      	str	r3, [sp, #24]
 8005c40:	3301      	adds	r3, #1
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	9308      	str	r3, [sp, #32]
 8005c46:	bfb8      	it	lt
 8005c48:	2301      	movlt	r3, #1
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	2204      	movs	r2, #4
 8005c4e:	69e8      	ldr	r0, [r5, #28]
 8005c50:	f102 0614 	add.w	r6, r2, #20
 8005c54:	429e      	cmp	r6, r3
 8005c56:	d940      	bls.n	8005cda <_dtoa_r+0x30a>
 8005c58:	6041      	str	r1, [r0, #4]
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	f000 fd98 	bl	8006790 <_Balloc>
 8005c60:	9003      	str	r0, [sp, #12]
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d13c      	bne.n	8005ce0 <_dtoa_r+0x310>
 8005c66:	4602      	mov	r2, r0
 8005c68:	f240 11af 	movw	r1, #431	; 0x1af
 8005c6c:	4b16      	ldr	r3, [pc, #88]	; (8005cc8 <_dtoa_r+0x2f8>)
 8005c6e:	e6c3      	b.n	80059f8 <_dtoa_r+0x28>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e7e1      	b.n	8005c38 <_dtoa_r+0x268>
 8005c74:	2401      	movs	r4, #1
 8005c76:	2300      	movs	r3, #0
 8005c78:	940b      	str	r4, [sp, #44]	; 0x2c
 8005c7a:	9322      	str	r3, [sp, #136]	; 0x88
 8005c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c80:	2200      	movs	r2, #0
 8005c82:	9306      	str	r3, [sp, #24]
 8005c84:	9308      	str	r3, [sp, #32]
 8005c86:	2312      	movs	r3, #18
 8005c88:	e7d1      	b.n	8005c2e <_dtoa_r+0x25e>
 8005c8a:	bf00      	nop
 8005c8c:	f3af 8000 	nop.w
 8005c90:	636f4361 	.word	0x636f4361
 8005c94:	3fd287a7 	.word	0x3fd287a7
 8005c98:	8b60c8b3 	.word	0x8b60c8b3
 8005c9c:	3fc68a28 	.word	0x3fc68a28
 8005ca0:	509f79fb 	.word	0x509f79fb
 8005ca4:	3fd34413 	.word	0x3fd34413
 8005ca8:	0800bd72 	.word	0x0800bd72
 8005cac:	0800bd89 	.word	0x0800bd89
 8005cb0:	7ff00000 	.word	0x7ff00000
 8005cb4:	0800bd6e 	.word	0x0800bd6e
 8005cb8:	0800bd65 	.word	0x0800bd65
 8005cbc:	0800bd3d 	.word	0x0800bd3d
 8005cc0:	3ff80000 	.word	0x3ff80000
 8005cc4:	0800be78 	.word	0x0800be78
 8005cc8:	0800bde1 	.word	0x0800bde1
 8005ccc:	2301      	movs	r3, #1
 8005cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cd0:	e7d4      	b.n	8005c7c <_dtoa_r+0x2ac>
 8005cd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cd4:	9306      	str	r3, [sp, #24]
 8005cd6:	9308      	str	r3, [sp, #32]
 8005cd8:	e7b7      	b.n	8005c4a <_dtoa_r+0x27a>
 8005cda:	3101      	adds	r1, #1
 8005cdc:	0052      	lsls	r2, r2, #1
 8005cde:	e7b7      	b.n	8005c50 <_dtoa_r+0x280>
 8005ce0:	69eb      	ldr	r3, [r5, #28]
 8005ce2:	9a03      	ldr	r2, [sp, #12]
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	9b08      	ldr	r3, [sp, #32]
 8005ce8:	2b0e      	cmp	r3, #14
 8005cea:	f200 80a8 	bhi.w	8005e3e <_dtoa_r+0x46e>
 8005cee:	2c00      	cmp	r4, #0
 8005cf0:	f000 80a5 	beq.w	8005e3e <_dtoa_r+0x46e>
 8005cf4:	f1bb 0f00 	cmp.w	fp, #0
 8005cf8:	dd34      	ble.n	8005d64 <_dtoa_r+0x394>
 8005cfa:	4b9a      	ldr	r3, [pc, #616]	; (8005f64 <_dtoa_r+0x594>)
 8005cfc:	f00b 020f 	and.w	r2, fp, #15
 8005d00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d04:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005d08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d0c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d10:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005d14:	d016      	beq.n	8005d44 <_dtoa_r+0x374>
 8005d16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d1a:	4b93      	ldr	r3, [pc, #588]	; (8005f68 <_dtoa_r+0x598>)
 8005d1c:	2703      	movs	r7, #3
 8005d1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d22:	f7fa fd13 	bl	800074c <__aeabi_ddiv>
 8005d26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d2a:	f004 040f 	and.w	r4, r4, #15
 8005d2e:	4e8e      	ldr	r6, [pc, #568]	; (8005f68 <_dtoa_r+0x598>)
 8005d30:	b954      	cbnz	r4, 8005d48 <_dtoa_r+0x378>
 8005d32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d3a:	f7fa fd07 	bl	800074c <__aeabi_ddiv>
 8005d3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d42:	e029      	b.n	8005d98 <_dtoa_r+0x3c8>
 8005d44:	2702      	movs	r7, #2
 8005d46:	e7f2      	b.n	8005d2e <_dtoa_r+0x35e>
 8005d48:	07e1      	lsls	r1, r4, #31
 8005d4a:	d508      	bpl.n	8005d5e <_dtoa_r+0x38e>
 8005d4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d54:	f7fa fbd0 	bl	80004f8 <__aeabi_dmul>
 8005d58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d5c:	3701      	adds	r7, #1
 8005d5e:	1064      	asrs	r4, r4, #1
 8005d60:	3608      	adds	r6, #8
 8005d62:	e7e5      	b.n	8005d30 <_dtoa_r+0x360>
 8005d64:	f000 80a5 	beq.w	8005eb2 <_dtoa_r+0x4e2>
 8005d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d6c:	f1cb 0400 	rsb	r4, fp, #0
 8005d70:	4b7c      	ldr	r3, [pc, #496]	; (8005f64 <_dtoa_r+0x594>)
 8005d72:	f004 020f 	and.w	r2, r4, #15
 8005d76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	f7fa fbbb 	bl	80004f8 <__aeabi_dmul>
 8005d82:	2702      	movs	r7, #2
 8005d84:	2300      	movs	r3, #0
 8005d86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d8a:	4e77      	ldr	r6, [pc, #476]	; (8005f68 <_dtoa_r+0x598>)
 8005d8c:	1124      	asrs	r4, r4, #4
 8005d8e:	2c00      	cmp	r4, #0
 8005d90:	f040 8084 	bne.w	8005e9c <_dtoa_r+0x4cc>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1d2      	bne.n	8005d3e <_dtoa_r+0x36e>
 8005d98:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d9c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005da0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8087 	beq.w	8005eb6 <_dtoa_r+0x4e6>
 8005da8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dac:	2200      	movs	r2, #0
 8005dae:	4b6f      	ldr	r3, [pc, #444]	; (8005f6c <_dtoa_r+0x59c>)
 8005db0:	f7fa fe14 	bl	80009dc <__aeabi_dcmplt>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d07e      	beq.n	8005eb6 <_dtoa_r+0x4e6>
 8005db8:	9b08      	ldr	r3, [sp, #32]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d07b      	beq.n	8005eb6 <_dtoa_r+0x4e6>
 8005dbe:	9b06      	ldr	r3, [sp, #24]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	dd38      	ble.n	8005e36 <_dtoa_r+0x466>
 8005dc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4b69      	ldr	r3, [pc, #420]	; (8005f70 <_dtoa_r+0x5a0>)
 8005dcc:	f7fa fb94 	bl	80004f8 <__aeabi_dmul>
 8005dd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dd4:	9c06      	ldr	r4, [sp, #24]
 8005dd6:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005dda:	3701      	adds	r7, #1
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7fa fb21 	bl	8000424 <__aeabi_i2d>
 8005de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005de6:	f7fa fb87 	bl	80004f8 <__aeabi_dmul>
 8005dea:	2200      	movs	r2, #0
 8005dec:	4b61      	ldr	r3, [pc, #388]	; (8005f74 <_dtoa_r+0x5a4>)
 8005dee:	f7fa f9cd 	bl	800018c <__adddf3>
 8005df2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005df6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dfa:	9611      	str	r6, [sp, #68]	; 0x44
 8005dfc:	2c00      	cmp	r4, #0
 8005dfe:	d15d      	bne.n	8005ebc <_dtoa_r+0x4ec>
 8005e00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e04:	2200      	movs	r2, #0
 8005e06:	4b5c      	ldr	r3, [pc, #368]	; (8005f78 <_dtoa_r+0x5a8>)
 8005e08:	f7fa f9be 	bl	8000188 <__aeabi_dsub>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e14:	4633      	mov	r3, r6
 8005e16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e18:	f7fa fdfe 	bl	8000a18 <__aeabi_dcmpgt>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	f040 8295 	bne.w	800634c <_dtoa_r+0x97c>
 8005e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005e2c:	f7fa fdd6 	bl	80009dc <__aeabi_dcmplt>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	f040 8289 	bne.w	8006348 <_dtoa_r+0x978>
 8005e36:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005e3a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f2c0 8151 	blt.w	80060e8 <_dtoa_r+0x718>
 8005e46:	f1bb 0f0e 	cmp.w	fp, #14
 8005e4a:	f300 814d 	bgt.w	80060e8 <_dtoa_r+0x718>
 8005e4e:	4b45      	ldr	r3, [pc, #276]	; (8005f64 <_dtoa_r+0x594>)
 8005e50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e58:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005e5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f280 80da 	bge.w	8006018 <_dtoa_r+0x648>
 8005e64:	9b08      	ldr	r3, [sp, #32]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f300 80d6 	bgt.w	8006018 <_dtoa_r+0x648>
 8005e6c:	f040 826b 	bne.w	8006346 <_dtoa_r+0x976>
 8005e70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e74:	2200      	movs	r2, #0
 8005e76:	4b40      	ldr	r3, [pc, #256]	; (8005f78 <_dtoa_r+0x5a8>)
 8005e78:	f7fa fb3e 	bl	80004f8 <__aeabi_dmul>
 8005e7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e80:	f7fa fdc0 	bl	8000a04 <__aeabi_dcmpge>
 8005e84:	9c08      	ldr	r4, [sp, #32]
 8005e86:	4626      	mov	r6, r4
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	f040 8241 	bne.w	8006310 <_dtoa_r+0x940>
 8005e8e:	2331      	movs	r3, #49	; 0x31
 8005e90:	9f03      	ldr	r7, [sp, #12]
 8005e92:	f10b 0b01 	add.w	fp, fp, #1
 8005e96:	f807 3b01 	strb.w	r3, [r7], #1
 8005e9a:	e23d      	b.n	8006318 <_dtoa_r+0x948>
 8005e9c:	07e2      	lsls	r2, r4, #31
 8005e9e:	d505      	bpl.n	8005eac <_dtoa_r+0x4dc>
 8005ea0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ea4:	f7fa fb28 	bl	80004f8 <__aeabi_dmul>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	3701      	adds	r7, #1
 8005eac:	1064      	asrs	r4, r4, #1
 8005eae:	3608      	adds	r6, #8
 8005eb0:	e76d      	b.n	8005d8e <_dtoa_r+0x3be>
 8005eb2:	2702      	movs	r7, #2
 8005eb4:	e770      	b.n	8005d98 <_dtoa_r+0x3c8>
 8005eb6:	46d8      	mov	r8, fp
 8005eb8:	9c08      	ldr	r4, [sp, #32]
 8005eba:	e78f      	b.n	8005ddc <_dtoa_r+0x40c>
 8005ebc:	9903      	ldr	r1, [sp, #12]
 8005ebe:	4b29      	ldr	r3, [pc, #164]	; (8005f64 <_dtoa_r+0x594>)
 8005ec0:	4421      	add	r1, r4
 8005ec2:	9112      	str	r1, [sp, #72]	; 0x48
 8005ec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ec6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005eca:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005ece:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ed2:	2900      	cmp	r1, #0
 8005ed4:	d054      	beq.n	8005f80 <_dtoa_r+0x5b0>
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	4928      	ldr	r1, [pc, #160]	; (8005f7c <_dtoa_r+0x5ac>)
 8005eda:	f7fa fc37 	bl	800074c <__aeabi_ddiv>
 8005ede:	463b      	mov	r3, r7
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	f7fa f951 	bl	8000188 <__aeabi_dsub>
 8005ee6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005eea:	9f03      	ldr	r7, [sp, #12]
 8005eec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ef0:	f7fa fdb2 	bl	8000a58 <__aeabi_d2iz>
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	f7fa fa95 	bl	8000424 <__aeabi_i2d>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f02:	f7fa f941 	bl	8000188 <__aeabi_dsub>
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	3430      	adds	r4, #48	; 0x30
 8005f0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f14:	f807 4b01 	strb.w	r4, [r7], #1
 8005f18:	f7fa fd60 	bl	80009dc <__aeabi_dcmplt>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d173      	bne.n	8006008 <_dtoa_r+0x638>
 8005f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f24:	2000      	movs	r0, #0
 8005f26:	4911      	ldr	r1, [pc, #68]	; (8005f6c <_dtoa_r+0x59c>)
 8005f28:	f7fa f92e 	bl	8000188 <__aeabi_dsub>
 8005f2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f30:	f7fa fd54 	bl	80009dc <__aeabi_dcmplt>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	f040 80b6 	bne.w	80060a6 <_dtoa_r+0x6d6>
 8005f3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f3c:	429f      	cmp	r7, r3
 8005f3e:	f43f af7a 	beq.w	8005e36 <_dtoa_r+0x466>
 8005f42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f46:	2200      	movs	r2, #0
 8005f48:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <_dtoa_r+0x5a0>)
 8005f4a:	f7fa fad5 	bl	80004f8 <__aeabi_dmul>
 8005f4e:	2200      	movs	r2, #0
 8005f50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f58:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <_dtoa_r+0x5a0>)
 8005f5a:	f7fa facd 	bl	80004f8 <__aeabi_dmul>
 8005f5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f62:	e7c3      	b.n	8005eec <_dtoa_r+0x51c>
 8005f64:	0800be78 	.word	0x0800be78
 8005f68:	0800be50 	.word	0x0800be50
 8005f6c:	3ff00000 	.word	0x3ff00000
 8005f70:	40240000 	.word	0x40240000
 8005f74:	401c0000 	.word	0x401c0000
 8005f78:	40140000 	.word	0x40140000
 8005f7c:	3fe00000 	.word	0x3fe00000
 8005f80:	4630      	mov	r0, r6
 8005f82:	4639      	mov	r1, r7
 8005f84:	f7fa fab8 	bl	80004f8 <__aeabi_dmul>
 8005f88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f8e:	9c03      	ldr	r4, [sp, #12]
 8005f90:	9314      	str	r3, [sp, #80]	; 0x50
 8005f92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f96:	f7fa fd5f 	bl	8000a58 <__aeabi_d2iz>
 8005f9a:	9015      	str	r0, [sp, #84]	; 0x54
 8005f9c:	f7fa fa42 	bl	8000424 <__aeabi_i2d>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fa8:	f7fa f8ee 	bl	8000188 <__aeabi_dsub>
 8005fac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fae:	4606      	mov	r6, r0
 8005fb0:	3330      	adds	r3, #48	; 0x30
 8005fb2:	f804 3b01 	strb.w	r3, [r4], #1
 8005fb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fb8:	460f      	mov	r7, r1
 8005fba:	429c      	cmp	r4, r3
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	d124      	bne.n	800600c <_dtoa_r+0x63c>
 8005fc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fc6:	4baf      	ldr	r3, [pc, #700]	; (8006284 <_dtoa_r+0x8b4>)
 8005fc8:	f7fa f8e0 	bl	800018c <__adddf3>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	f7fa fd20 	bl	8000a18 <__aeabi_dcmpgt>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d163      	bne.n	80060a4 <_dtoa_r+0x6d4>
 8005fdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	49a8      	ldr	r1, [pc, #672]	; (8006284 <_dtoa_r+0x8b4>)
 8005fe4:	f7fa f8d0 	bl	8000188 <__aeabi_dsub>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4630      	mov	r0, r6
 8005fee:	4639      	mov	r1, r7
 8005ff0:	f7fa fcf4 	bl	80009dc <__aeabi_dcmplt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	f43f af1e 	beq.w	8005e36 <_dtoa_r+0x466>
 8005ffa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005ffc:	1e7b      	subs	r3, r7, #1
 8005ffe:	9314      	str	r3, [sp, #80]	; 0x50
 8006000:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006004:	2b30      	cmp	r3, #48	; 0x30
 8006006:	d0f8      	beq.n	8005ffa <_dtoa_r+0x62a>
 8006008:	46c3      	mov	fp, r8
 800600a:	e03b      	b.n	8006084 <_dtoa_r+0x6b4>
 800600c:	4b9e      	ldr	r3, [pc, #632]	; (8006288 <_dtoa_r+0x8b8>)
 800600e:	f7fa fa73 	bl	80004f8 <__aeabi_dmul>
 8006012:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006016:	e7bc      	b.n	8005f92 <_dtoa_r+0x5c2>
 8006018:	9f03      	ldr	r7, [sp, #12]
 800601a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800601e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006022:	4640      	mov	r0, r8
 8006024:	4649      	mov	r1, r9
 8006026:	f7fa fb91 	bl	800074c <__aeabi_ddiv>
 800602a:	f7fa fd15 	bl	8000a58 <__aeabi_d2iz>
 800602e:	4604      	mov	r4, r0
 8006030:	f7fa f9f8 	bl	8000424 <__aeabi_i2d>
 8006034:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006038:	f7fa fa5e 	bl	80004f8 <__aeabi_dmul>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4640      	mov	r0, r8
 8006042:	4649      	mov	r1, r9
 8006044:	f7fa f8a0 	bl	8000188 <__aeabi_dsub>
 8006048:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800604c:	f807 6b01 	strb.w	r6, [r7], #1
 8006050:	9e03      	ldr	r6, [sp, #12]
 8006052:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006056:	1bbe      	subs	r6, r7, r6
 8006058:	45b4      	cmp	ip, r6
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	d136      	bne.n	80060ce <_dtoa_r+0x6fe>
 8006060:	f7fa f894 	bl	800018c <__adddf3>
 8006064:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006068:	4680      	mov	r8, r0
 800606a:	4689      	mov	r9, r1
 800606c:	f7fa fcd4 	bl	8000a18 <__aeabi_dcmpgt>
 8006070:	bb58      	cbnz	r0, 80060ca <_dtoa_r+0x6fa>
 8006072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006076:	4640      	mov	r0, r8
 8006078:	4649      	mov	r1, r9
 800607a:	f7fa fca5 	bl	80009c8 <__aeabi_dcmpeq>
 800607e:	b108      	cbz	r0, 8006084 <_dtoa_r+0x6b4>
 8006080:	07e3      	lsls	r3, r4, #31
 8006082:	d422      	bmi.n	80060ca <_dtoa_r+0x6fa>
 8006084:	4651      	mov	r1, sl
 8006086:	4628      	mov	r0, r5
 8006088:	f000 fbc2 	bl	8006810 <_Bfree>
 800608c:	2300      	movs	r3, #0
 800608e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006090:	703b      	strb	r3, [r7, #0]
 8006092:	f10b 0301 	add.w	r3, fp, #1
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800609a:	2b00      	cmp	r3, #0
 800609c:	f43f ace6 	beq.w	8005a6c <_dtoa_r+0x9c>
 80060a0:	601f      	str	r7, [r3, #0]
 80060a2:	e4e3      	b.n	8005a6c <_dtoa_r+0x9c>
 80060a4:	4627      	mov	r7, r4
 80060a6:	463b      	mov	r3, r7
 80060a8:	461f      	mov	r7, r3
 80060aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060ae:	2a39      	cmp	r2, #57	; 0x39
 80060b0:	d107      	bne.n	80060c2 <_dtoa_r+0x6f2>
 80060b2:	9a03      	ldr	r2, [sp, #12]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d1f7      	bne.n	80060a8 <_dtoa_r+0x6d8>
 80060b8:	2230      	movs	r2, #48	; 0x30
 80060ba:	9903      	ldr	r1, [sp, #12]
 80060bc:	f108 0801 	add.w	r8, r8, #1
 80060c0:	700a      	strb	r2, [r1, #0]
 80060c2:	781a      	ldrb	r2, [r3, #0]
 80060c4:	3201      	adds	r2, #1
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	e79e      	b.n	8006008 <_dtoa_r+0x638>
 80060ca:	46d8      	mov	r8, fp
 80060cc:	e7eb      	b.n	80060a6 <_dtoa_r+0x6d6>
 80060ce:	2200      	movs	r2, #0
 80060d0:	4b6d      	ldr	r3, [pc, #436]	; (8006288 <_dtoa_r+0x8b8>)
 80060d2:	f7fa fa11 	bl	80004f8 <__aeabi_dmul>
 80060d6:	2200      	movs	r2, #0
 80060d8:	2300      	movs	r3, #0
 80060da:	4680      	mov	r8, r0
 80060dc:	4689      	mov	r9, r1
 80060de:	f7fa fc73 	bl	80009c8 <__aeabi_dcmpeq>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d09b      	beq.n	800601e <_dtoa_r+0x64e>
 80060e6:	e7cd      	b.n	8006084 <_dtoa_r+0x6b4>
 80060e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060ea:	2a00      	cmp	r2, #0
 80060ec:	f000 80c4 	beq.w	8006278 <_dtoa_r+0x8a8>
 80060f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80060f2:	2a01      	cmp	r2, #1
 80060f4:	f300 80a8 	bgt.w	8006248 <_dtoa_r+0x878>
 80060f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	f000 80a0 	beq.w	8006240 <_dtoa_r+0x870>
 8006100:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006104:	464f      	mov	r7, r9
 8006106:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800610a:	2101      	movs	r1, #1
 800610c:	441a      	add	r2, r3
 800610e:	4628      	mov	r0, r5
 8006110:	4499      	add	r9, r3
 8006112:	9209      	str	r2, [sp, #36]	; 0x24
 8006114:	f000 fc7c 	bl	8006a10 <__i2b>
 8006118:	4606      	mov	r6, r0
 800611a:	b15f      	cbz	r7, 8006134 <_dtoa_r+0x764>
 800611c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	dd08      	ble.n	8006134 <_dtoa_r+0x764>
 8006122:	42bb      	cmp	r3, r7
 8006124:	bfa8      	it	ge
 8006126:	463b      	movge	r3, r7
 8006128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800612a:	eba9 0903 	sub.w	r9, r9, r3
 800612e:	1aff      	subs	r7, r7, r3
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	9309      	str	r3, [sp, #36]	; 0x24
 8006134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006136:	b1f3      	cbz	r3, 8006176 <_dtoa_r+0x7a6>
 8006138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 80a0 	beq.w	8006280 <_dtoa_r+0x8b0>
 8006140:	2c00      	cmp	r4, #0
 8006142:	dd10      	ble.n	8006166 <_dtoa_r+0x796>
 8006144:	4631      	mov	r1, r6
 8006146:	4622      	mov	r2, r4
 8006148:	4628      	mov	r0, r5
 800614a:	f000 fd1f 	bl	8006b8c <__pow5mult>
 800614e:	4652      	mov	r2, sl
 8006150:	4601      	mov	r1, r0
 8006152:	4606      	mov	r6, r0
 8006154:	4628      	mov	r0, r5
 8006156:	f000 fc71 	bl	8006a3c <__multiply>
 800615a:	4680      	mov	r8, r0
 800615c:	4651      	mov	r1, sl
 800615e:	4628      	mov	r0, r5
 8006160:	f000 fb56 	bl	8006810 <_Bfree>
 8006164:	46c2      	mov	sl, r8
 8006166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006168:	1b1a      	subs	r2, r3, r4
 800616a:	d004      	beq.n	8006176 <_dtoa_r+0x7a6>
 800616c:	4651      	mov	r1, sl
 800616e:	4628      	mov	r0, r5
 8006170:	f000 fd0c 	bl	8006b8c <__pow5mult>
 8006174:	4682      	mov	sl, r0
 8006176:	2101      	movs	r1, #1
 8006178:	4628      	mov	r0, r5
 800617a:	f000 fc49 	bl	8006a10 <__i2b>
 800617e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006180:	4604      	mov	r4, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	f340 8082 	ble.w	800628c <_dtoa_r+0x8bc>
 8006188:	461a      	mov	r2, r3
 800618a:	4601      	mov	r1, r0
 800618c:	4628      	mov	r0, r5
 800618e:	f000 fcfd 	bl	8006b8c <__pow5mult>
 8006192:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006194:	4604      	mov	r4, r0
 8006196:	2b01      	cmp	r3, #1
 8006198:	dd7b      	ble.n	8006292 <_dtoa_r+0x8c2>
 800619a:	f04f 0800 	mov.w	r8, #0
 800619e:	6923      	ldr	r3, [r4, #16]
 80061a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061a4:	6918      	ldr	r0, [r3, #16]
 80061a6:	f000 fbe5 	bl	8006974 <__hi0bits>
 80061aa:	f1c0 0020 	rsb	r0, r0, #32
 80061ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b0:	4418      	add	r0, r3
 80061b2:	f010 001f 	ands.w	r0, r0, #31
 80061b6:	f000 8092 	beq.w	80062de <_dtoa_r+0x90e>
 80061ba:	f1c0 0320 	rsb	r3, r0, #32
 80061be:	2b04      	cmp	r3, #4
 80061c0:	f340 8085 	ble.w	80062ce <_dtoa_r+0x8fe>
 80061c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c6:	f1c0 001c 	rsb	r0, r0, #28
 80061ca:	4403      	add	r3, r0
 80061cc:	4481      	add	r9, r0
 80061ce:	4407      	add	r7, r0
 80061d0:	9309      	str	r3, [sp, #36]	; 0x24
 80061d2:	f1b9 0f00 	cmp.w	r9, #0
 80061d6:	dd05      	ble.n	80061e4 <_dtoa_r+0x814>
 80061d8:	4651      	mov	r1, sl
 80061da:	464a      	mov	r2, r9
 80061dc:	4628      	mov	r0, r5
 80061de:	f000 fd2f 	bl	8006c40 <__lshift>
 80061e2:	4682      	mov	sl, r0
 80061e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	dd05      	ble.n	80061f6 <_dtoa_r+0x826>
 80061ea:	4621      	mov	r1, r4
 80061ec:	461a      	mov	r2, r3
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 fd26 	bl	8006c40 <__lshift>
 80061f4:	4604      	mov	r4, r0
 80061f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d072      	beq.n	80062e2 <_dtoa_r+0x912>
 80061fc:	4621      	mov	r1, r4
 80061fe:	4650      	mov	r0, sl
 8006200:	f000 fd8a 	bl	8006d18 <__mcmp>
 8006204:	2800      	cmp	r0, #0
 8006206:	da6c      	bge.n	80062e2 <_dtoa_r+0x912>
 8006208:	2300      	movs	r3, #0
 800620a:	4651      	mov	r1, sl
 800620c:	220a      	movs	r2, #10
 800620e:	4628      	mov	r0, r5
 8006210:	f000 fb20 	bl	8006854 <__multadd>
 8006214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006216:	4682      	mov	sl, r0
 8006218:	f10b 3bff 	add.w	fp, fp, #4294967295
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 81ac 	beq.w	800657a <_dtoa_r+0xbaa>
 8006222:	2300      	movs	r3, #0
 8006224:	4631      	mov	r1, r6
 8006226:	220a      	movs	r2, #10
 8006228:	4628      	mov	r0, r5
 800622a:	f000 fb13 	bl	8006854 <__multadd>
 800622e:	9b06      	ldr	r3, [sp, #24]
 8006230:	4606      	mov	r6, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	f300 8093 	bgt.w	800635e <_dtoa_r+0x98e>
 8006238:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800623a:	2b02      	cmp	r3, #2
 800623c:	dc59      	bgt.n	80062f2 <_dtoa_r+0x922>
 800623e:	e08e      	b.n	800635e <_dtoa_r+0x98e>
 8006240:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006242:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006246:	e75d      	b.n	8006104 <_dtoa_r+0x734>
 8006248:	9b08      	ldr	r3, [sp, #32]
 800624a:	1e5c      	subs	r4, r3, #1
 800624c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800624e:	42a3      	cmp	r3, r4
 8006250:	bfbf      	itttt	lt
 8006252:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006254:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006256:	1ae3      	sublt	r3, r4, r3
 8006258:	18d2      	addlt	r2, r2, r3
 800625a:	bfa8      	it	ge
 800625c:	1b1c      	subge	r4, r3, r4
 800625e:	9b08      	ldr	r3, [sp, #32]
 8006260:	bfbe      	ittt	lt
 8006262:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006264:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006266:	2400      	movlt	r4, #0
 8006268:	2b00      	cmp	r3, #0
 800626a:	bfb5      	itete	lt
 800626c:	eba9 0703 	sublt.w	r7, r9, r3
 8006270:	464f      	movge	r7, r9
 8006272:	2300      	movlt	r3, #0
 8006274:	9b08      	ldrge	r3, [sp, #32]
 8006276:	e747      	b.n	8006108 <_dtoa_r+0x738>
 8006278:	464f      	mov	r7, r9
 800627a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800627c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800627e:	e74c      	b.n	800611a <_dtoa_r+0x74a>
 8006280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006282:	e773      	b.n	800616c <_dtoa_r+0x79c>
 8006284:	3fe00000 	.word	0x3fe00000
 8006288:	40240000 	.word	0x40240000
 800628c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800628e:	2b01      	cmp	r3, #1
 8006290:	dc18      	bgt.n	80062c4 <_dtoa_r+0x8f4>
 8006292:	9b04      	ldr	r3, [sp, #16]
 8006294:	b9b3      	cbnz	r3, 80062c4 <_dtoa_r+0x8f4>
 8006296:	9b05      	ldr	r3, [sp, #20]
 8006298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800629c:	b993      	cbnz	r3, 80062c4 <_dtoa_r+0x8f4>
 800629e:	9b05      	ldr	r3, [sp, #20]
 80062a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062a4:	0d1b      	lsrs	r3, r3, #20
 80062a6:	051b      	lsls	r3, r3, #20
 80062a8:	b17b      	cbz	r3, 80062ca <_dtoa_r+0x8fa>
 80062aa:	f04f 0801 	mov.w	r8, #1
 80062ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b0:	f109 0901 	add.w	r9, r9, #1
 80062b4:	3301      	adds	r3, #1
 80062b6:	9309      	str	r3, [sp, #36]	; 0x24
 80062b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f47f af6f 	bne.w	800619e <_dtoa_r+0x7ce>
 80062c0:	2001      	movs	r0, #1
 80062c2:	e774      	b.n	80061ae <_dtoa_r+0x7de>
 80062c4:	f04f 0800 	mov.w	r8, #0
 80062c8:	e7f6      	b.n	80062b8 <_dtoa_r+0x8e8>
 80062ca:	4698      	mov	r8, r3
 80062cc:	e7f4      	b.n	80062b8 <_dtoa_r+0x8e8>
 80062ce:	d080      	beq.n	80061d2 <_dtoa_r+0x802>
 80062d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d2:	331c      	adds	r3, #28
 80062d4:	441a      	add	r2, r3
 80062d6:	4499      	add	r9, r3
 80062d8:	441f      	add	r7, r3
 80062da:	9209      	str	r2, [sp, #36]	; 0x24
 80062dc:	e779      	b.n	80061d2 <_dtoa_r+0x802>
 80062de:	4603      	mov	r3, r0
 80062e0:	e7f6      	b.n	80062d0 <_dtoa_r+0x900>
 80062e2:	9b08      	ldr	r3, [sp, #32]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	dc34      	bgt.n	8006352 <_dtoa_r+0x982>
 80062e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	dd31      	ble.n	8006352 <_dtoa_r+0x982>
 80062ee:	9b08      	ldr	r3, [sp, #32]
 80062f0:	9306      	str	r3, [sp, #24]
 80062f2:	9b06      	ldr	r3, [sp, #24]
 80062f4:	b963      	cbnz	r3, 8006310 <_dtoa_r+0x940>
 80062f6:	4621      	mov	r1, r4
 80062f8:	2205      	movs	r2, #5
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 faaa 	bl	8006854 <__multadd>
 8006300:	4601      	mov	r1, r0
 8006302:	4604      	mov	r4, r0
 8006304:	4650      	mov	r0, sl
 8006306:	f000 fd07 	bl	8006d18 <__mcmp>
 800630a:	2800      	cmp	r0, #0
 800630c:	f73f adbf 	bgt.w	8005e8e <_dtoa_r+0x4be>
 8006310:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006312:	9f03      	ldr	r7, [sp, #12]
 8006314:	ea6f 0b03 	mvn.w	fp, r3
 8006318:	f04f 0800 	mov.w	r8, #0
 800631c:	4621      	mov	r1, r4
 800631e:	4628      	mov	r0, r5
 8006320:	f000 fa76 	bl	8006810 <_Bfree>
 8006324:	2e00      	cmp	r6, #0
 8006326:	f43f aead 	beq.w	8006084 <_dtoa_r+0x6b4>
 800632a:	f1b8 0f00 	cmp.w	r8, #0
 800632e:	d005      	beq.n	800633c <_dtoa_r+0x96c>
 8006330:	45b0      	cmp	r8, r6
 8006332:	d003      	beq.n	800633c <_dtoa_r+0x96c>
 8006334:	4641      	mov	r1, r8
 8006336:	4628      	mov	r0, r5
 8006338:	f000 fa6a 	bl	8006810 <_Bfree>
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	f000 fa66 	bl	8006810 <_Bfree>
 8006344:	e69e      	b.n	8006084 <_dtoa_r+0x6b4>
 8006346:	2400      	movs	r4, #0
 8006348:	4626      	mov	r6, r4
 800634a:	e7e1      	b.n	8006310 <_dtoa_r+0x940>
 800634c:	46c3      	mov	fp, r8
 800634e:	4626      	mov	r6, r4
 8006350:	e59d      	b.n	8005e8e <_dtoa_r+0x4be>
 8006352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80c8 	beq.w	80064ea <_dtoa_r+0xb1a>
 800635a:	9b08      	ldr	r3, [sp, #32]
 800635c:	9306      	str	r3, [sp, #24]
 800635e:	2f00      	cmp	r7, #0
 8006360:	dd05      	ble.n	800636e <_dtoa_r+0x99e>
 8006362:	4631      	mov	r1, r6
 8006364:	463a      	mov	r2, r7
 8006366:	4628      	mov	r0, r5
 8006368:	f000 fc6a 	bl	8006c40 <__lshift>
 800636c:	4606      	mov	r6, r0
 800636e:	f1b8 0f00 	cmp.w	r8, #0
 8006372:	d05b      	beq.n	800642c <_dtoa_r+0xa5c>
 8006374:	4628      	mov	r0, r5
 8006376:	6871      	ldr	r1, [r6, #4]
 8006378:	f000 fa0a 	bl	8006790 <_Balloc>
 800637c:	4607      	mov	r7, r0
 800637e:	b928      	cbnz	r0, 800638c <_dtoa_r+0x9bc>
 8006380:	4602      	mov	r2, r0
 8006382:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006386:	4b81      	ldr	r3, [pc, #516]	; (800658c <_dtoa_r+0xbbc>)
 8006388:	f7ff bb36 	b.w	80059f8 <_dtoa_r+0x28>
 800638c:	6932      	ldr	r2, [r6, #16]
 800638e:	f106 010c 	add.w	r1, r6, #12
 8006392:	3202      	adds	r2, #2
 8006394:	0092      	lsls	r2, r2, #2
 8006396:	300c      	adds	r0, #12
 8006398:	f7ff fa7b 	bl	8005892 <memcpy>
 800639c:	2201      	movs	r2, #1
 800639e:	4639      	mov	r1, r7
 80063a0:	4628      	mov	r0, r5
 80063a2:	f000 fc4d 	bl	8006c40 <__lshift>
 80063a6:	46b0      	mov	r8, r6
 80063a8:	4606      	mov	r6, r0
 80063aa:	9b03      	ldr	r3, [sp, #12]
 80063ac:	9a03      	ldr	r2, [sp, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	9308      	str	r3, [sp, #32]
 80063b2:	9b06      	ldr	r3, [sp, #24]
 80063b4:	4413      	add	r3, r2
 80063b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80063b8:	9b04      	ldr	r3, [sp, #16]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	930a      	str	r3, [sp, #40]	; 0x28
 80063c0:	9b08      	ldr	r3, [sp, #32]
 80063c2:	4621      	mov	r1, r4
 80063c4:	3b01      	subs	r3, #1
 80063c6:	4650      	mov	r0, sl
 80063c8:	9304      	str	r3, [sp, #16]
 80063ca:	f7ff fa75 	bl	80058b8 <quorem>
 80063ce:	4641      	mov	r1, r8
 80063d0:	9006      	str	r0, [sp, #24]
 80063d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80063d6:	4650      	mov	r0, sl
 80063d8:	f000 fc9e 	bl	8006d18 <__mcmp>
 80063dc:	4632      	mov	r2, r6
 80063de:	9009      	str	r0, [sp, #36]	; 0x24
 80063e0:	4621      	mov	r1, r4
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 fcb4 	bl	8006d50 <__mdiff>
 80063e8:	68c2      	ldr	r2, [r0, #12]
 80063ea:	4607      	mov	r7, r0
 80063ec:	bb02      	cbnz	r2, 8006430 <_dtoa_r+0xa60>
 80063ee:	4601      	mov	r1, r0
 80063f0:	4650      	mov	r0, sl
 80063f2:	f000 fc91 	bl	8006d18 <__mcmp>
 80063f6:	4602      	mov	r2, r0
 80063f8:	4639      	mov	r1, r7
 80063fa:	4628      	mov	r0, r5
 80063fc:	920c      	str	r2, [sp, #48]	; 0x30
 80063fe:	f000 fa07 	bl	8006810 <_Bfree>
 8006402:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006406:	9f08      	ldr	r7, [sp, #32]
 8006408:	ea43 0102 	orr.w	r1, r3, r2
 800640c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800640e:	4319      	orrs	r1, r3
 8006410:	d110      	bne.n	8006434 <_dtoa_r+0xa64>
 8006412:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006416:	d029      	beq.n	800646c <_dtoa_r+0xa9c>
 8006418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800641a:	2b00      	cmp	r3, #0
 800641c:	dd02      	ble.n	8006424 <_dtoa_r+0xa54>
 800641e:	9b06      	ldr	r3, [sp, #24]
 8006420:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006424:	9b04      	ldr	r3, [sp, #16]
 8006426:	f883 9000 	strb.w	r9, [r3]
 800642a:	e777      	b.n	800631c <_dtoa_r+0x94c>
 800642c:	4630      	mov	r0, r6
 800642e:	e7ba      	b.n	80063a6 <_dtoa_r+0x9d6>
 8006430:	2201      	movs	r2, #1
 8006432:	e7e1      	b.n	80063f8 <_dtoa_r+0xa28>
 8006434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006436:	2b00      	cmp	r3, #0
 8006438:	db04      	blt.n	8006444 <_dtoa_r+0xa74>
 800643a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800643c:	430b      	orrs	r3, r1
 800643e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006440:	430b      	orrs	r3, r1
 8006442:	d120      	bne.n	8006486 <_dtoa_r+0xab6>
 8006444:	2a00      	cmp	r2, #0
 8006446:	dded      	ble.n	8006424 <_dtoa_r+0xa54>
 8006448:	4651      	mov	r1, sl
 800644a:	2201      	movs	r2, #1
 800644c:	4628      	mov	r0, r5
 800644e:	f000 fbf7 	bl	8006c40 <__lshift>
 8006452:	4621      	mov	r1, r4
 8006454:	4682      	mov	sl, r0
 8006456:	f000 fc5f 	bl	8006d18 <__mcmp>
 800645a:	2800      	cmp	r0, #0
 800645c:	dc03      	bgt.n	8006466 <_dtoa_r+0xa96>
 800645e:	d1e1      	bne.n	8006424 <_dtoa_r+0xa54>
 8006460:	f019 0f01 	tst.w	r9, #1
 8006464:	d0de      	beq.n	8006424 <_dtoa_r+0xa54>
 8006466:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800646a:	d1d8      	bne.n	800641e <_dtoa_r+0xa4e>
 800646c:	2339      	movs	r3, #57	; 0x39
 800646e:	9a04      	ldr	r2, [sp, #16]
 8006470:	7013      	strb	r3, [r2, #0]
 8006472:	463b      	mov	r3, r7
 8006474:	461f      	mov	r7, r3
 8006476:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800647a:	3b01      	subs	r3, #1
 800647c:	2a39      	cmp	r2, #57	; 0x39
 800647e:	d06b      	beq.n	8006558 <_dtoa_r+0xb88>
 8006480:	3201      	adds	r2, #1
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	e74a      	b.n	800631c <_dtoa_r+0x94c>
 8006486:	2a00      	cmp	r2, #0
 8006488:	dd07      	ble.n	800649a <_dtoa_r+0xaca>
 800648a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800648e:	d0ed      	beq.n	800646c <_dtoa_r+0xa9c>
 8006490:	9a04      	ldr	r2, [sp, #16]
 8006492:	f109 0301 	add.w	r3, r9, #1
 8006496:	7013      	strb	r3, [r2, #0]
 8006498:	e740      	b.n	800631c <_dtoa_r+0x94c>
 800649a:	9b08      	ldr	r3, [sp, #32]
 800649c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800649e:	f803 9c01 	strb.w	r9, [r3, #-1]
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d042      	beq.n	800652c <_dtoa_r+0xb5c>
 80064a6:	4651      	mov	r1, sl
 80064a8:	2300      	movs	r3, #0
 80064aa:	220a      	movs	r2, #10
 80064ac:	4628      	mov	r0, r5
 80064ae:	f000 f9d1 	bl	8006854 <__multadd>
 80064b2:	45b0      	cmp	r8, r6
 80064b4:	4682      	mov	sl, r0
 80064b6:	f04f 0300 	mov.w	r3, #0
 80064ba:	f04f 020a 	mov.w	r2, #10
 80064be:	4641      	mov	r1, r8
 80064c0:	4628      	mov	r0, r5
 80064c2:	d107      	bne.n	80064d4 <_dtoa_r+0xb04>
 80064c4:	f000 f9c6 	bl	8006854 <__multadd>
 80064c8:	4680      	mov	r8, r0
 80064ca:	4606      	mov	r6, r0
 80064cc:	9b08      	ldr	r3, [sp, #32]
 80064ce:	3301      	adds	r3, #1
 80064d0:	9308      	str	r3, [sp, #32]
 80064d2:	e775      	b.n	80063c0 <_dtoa_r+0x9f0>
 80064d4:	f000 f9be 	bl	8006854 <__multadd>
 80064d8:	4631      	mov	r1, r6
 80064da:	4680      	mov	r8, r0
 80064dc:	2300      	movs	r3, #0
 80064de:	220a      	movs	r2, #10
 80064e0:	4628      	mov	r0, r5
 80064e2:	f000 f9b7 	bl	8006854 <__multadd>
 80064e6:	4606      	mov	r6, r0
 80064e8:	e7f0      	b.n	80064cc <_dtoa_r+0xafc>
 80064ea:	9b08      	ldr	r3, [sp, #32]
 80064ec:	9306      	str	r3, [sp, #24]
 80064ee:	9f03      	ldr	r7, [sp, #12]
 80064f0:	4621      	mov	r1, r4
 80064f2:	4650      	mov	r0, sl
 80064f4:	f7ff f9e0 	bl	80058b8 <quorem>
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80064fe:	f807 9b01 	strb.w	r9, [r7], #1
 8006502:	1afa      	subs	r2, r7, r3
 8006504:	9b06      	ldr	r3, [sp, #24]
 8006506:	4293      	cmp	r3, r2
 8006508:	dd07      	ble.n	800651a <_dtoa_r+0xb4a>
 800650a:	4651      	mov	r1, sl
 800650c:	2300      	movs	r3, #0
 800650e:	220a      	movs	r2, #10
 8006510:	4628      	mov	r0, r5
 8006512:	f000 f99f 	bl	8006854 <__multadd>
 8006516:	4682      	mov	sl, r0
 8006518:	e7ea      	b.n	80064f0 <_dtoa_r+0xb20>
 800651a:	9b06      	ldr	r3, [sp, #24]
 800651c:	f04f 0800 	mov.w	r8, #0
 8006520:	2b00      	cmp	r3, #0
 8006522:	bfcc      	ite	gt
 8006524:	461f      	movgt	r7, r3
 8006526:	2701      	movle	r7, #1
 8006528:	9b03      	ldr	r3, [sp, #12]
 800652a:	441f      	add	r7, r3
 800652c:	4651      	mov	r1, sl
 800652e:	2201      	movs	r2, #1
 8006530:	4628      	mov	r0, r5
 8006532:	f000 fb85 	bl	8006c40 <__lshift>
 8006536:	4621      	mov	r1, r4
 8006538:	4682      	mov	sl, r0
 800653a:	f000 fbed 	bl	8006d18 <__mcmp>
 800653e:	2800      	cmp	r0, #0
 8006540:	dc97      	bgt.n	8006472 <_dtoa_r+0xaa2>
 8006542:	d102      	bne.n	800654a <_dtoa_r+0xb7a>
 8006544:	f019 0f01 	tst.w	r9, #1
 8006548:	d193      	bne.n	8006472 <_dtoa_r+0xaa2>
 800654a:	463b      	mov	r3, r7
 800654c:	461f      	mov	r7, r3
 800654e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006552:	2a30      	cmp	r2, #48	; 0x30
 8006554:	d0fa      	beq.n	800654c <_dtoa_r+0xb7c>
 8006556:	e6e1      	b.n	800631c <_dtoa_r+0x94c>
 8006558:	9a03      	ldr	r2, [sp, #12]
 800655a:	429a      	cmp	r2, r3
 800655c:	d18a      	bne.n	8006474 <_dtoa_r+0xaa4>
 800655e:	2331      	movs	r3, #49	; 0x31
 8006560:	f10b 0b01 	add.w	fp, fp, #1
 8006564:	e797      	b.n	8006496 <_dtoa_r+0xac6>
 8006566:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <_dtoa_r+0xbc0>)
 8006568:	f7ff ba9f 	b.w	8005aaa <_dtoa_r+0xda>
 800656c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800656e:	2b00      	cmp	r3, #0
 8006570:	f47f aa77 	bne.w	8005a62 <_dtoa_r+0x92>
 8006574:	4b07      	ldr	r3, [pc, #28]	; (8006594 <_dtoa_r+0xbc4>)
 8006576:	f7ff ba98 	b.w	8005aaa <_dtoa_r+0xda>
 800657a:	9b06      	ldr	r3, [sp, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	dcb6      	bgt.n	80064ee <_dtoa_r+0xb1e>
 8006580:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006582:	2b02      	cmp	r3, #2
 8006584:	f73f aeb5 	bgt.w	80062f2 <_dtoa_r+0x922>
 8006588:	e7b1      	b.n	80064ee <_dtoa_r+0xb1e>
 800658a:	bf00      	nop
 800658c:	0800bde1 	.word	0x0800bde1
 8006590:	0800bd3c 	.word	0x0800bd3c
 8006594:	0800bd65 	.word	0x0800bd65

08006598 <_free_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4605      	mov	r5, r0
 800659c:	2900      	cmp	r1, #0
 800659e:	d040      	beq.n	8006622 <_free_r+0x8a>
 80065a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065a4:	1f0c      	subs	r4, r1, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	bfb8      	it	lt
 80065aa:	18e4      	addlt	r4, r4, r3
 80065ac:	f000 f8e4 	bl	8006778 <__malloc_lock>
 80065b0:	4a1c      	ldr	r2, [pc, #112]	; (8006624 <_free_r+0x8c>)
 80065b2:	6813      	ldr	r3, [r2, #0]
 80065b4:	b933      	cbnz	r3, 80065c4 <_free_r+0x2c>
 80065b6:	6063      	str	r3, [r4, #4]
 80065b8:	6014      	str	r4, [r2, #0]
 80065ba:	4628      	mov	r0, r5
 80065bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065c0:	f000 b8e0 	b.w	8006784 <__malloc_unlock>
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	d908      	bls.n	80065da <_free_r+0x42>
 80065c8:	6820      	ldr	r0, [r4, #0]
 80065ca:	1821      	adds	r1, r4, r0
 80065cc:	428b      	cmp	r3, r1
 80065ce:	bf01      	itttt	eq
 80065d0:	6819      	ldreq	r1, [r3, #0]
 80065d2:	685b      	ldreq	r3, [r3, #4]
 80065d4:	1809      	addeq	r1, r1, r0
 80065d6:	6021      	streq	r1, [r4, #0]
 80065d8:	e7ed      	b.n	80065b6 <_free_r+0x1e>
 80065da:	461a      	mov	r2, r3
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	b10b      	cbz	r3, 80065e4 <_free_r+0x4c>
 80065e0:	42a3      	cmp	r3, r4
 80065e2:	d9fa      	bls.n	80065da <_free_r+0x42>
 80065e4:	6811      	ldr	r1, [r2, #0]
 80065e6:	1850      	adds	r0, r2, r1
 80065e8:	42a0      	cmp	r0, r4
 80065ea:	d10b      	bne.n	8006604 <_free_r+0x6c>
 80065ec:	6820      	ldr	r0, [r4, #0]
 80065ee:	4401      	add	r1, r0
 80065f0:	1850      	adds	r0, r2, r1
 80065f2:	4283      	cmp	r3, r0
 80065f4:	6011      	str	r1, [r2, #0]
 80065f6:	d1e0      	bne.n	80065ba <_free_r+0x22>
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	4408      	add	r0, r1
 80065fe:	6010      	str	r0, [r2, #0]
 8006600:	6053      	str	r3, [r2, #4]
 8006602:	e7da      	b.n	80065ba <_free_r+0x22>
 8006604:	d902      	bls.n	800660c <_free_r+0x74>
 8006606:	230c      	movs	r3, #12
 8006608:	602b      	str	r3, [r5, #0]
 800660a:	e7d6      	b.n	80065ba <_free_r+0x22>
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	1821      	adds	r1, r4, r0
 8006610:	428b      	cmp	r3, r1
 8006612:	bf01      	itttt	eq
 8006614:	6819      	ldreq	r1, [r3, #0]
 8006616:	685b      	ldreq	r3, [r3, #4]
 8006618:	1809      	addeq	r1, r1, r0
 800661a:	6021      	streq	r1, [r4, #0]
 800661c:	6063      	str	r3, [r4, #4]
 800661e:	6054      	str	r4, [r2, #4]
 8006620:	e7cb      	b.n	80065ba <_free_r+0x22>
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	20000844 	.word	0x20000844

08006628 <malloc>:
 8006628:	4b02      	ldr	r3, [pc, #8]	; (8006634 <malloc+0xc>)
 800662a:	4601      	mov	r1, r0
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	f000 b823 	b.w	8006678 <_malloc_r>
 8006632:	bf00      	nop
 8006634:	20000080 	.word	0x20000080

08006638 <sbrk_aligned>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	4e0e      	ldr	r6, [pc, #56]	; (8006674 <sbrk_aligned+0x3c>)
 800663c:	460c      	mov	r4, r1
 800663e:	6831      	ldr	r1, [r6, #0]
 8006640:	4605      	mov	r5, r0
 8006642:	b911      	cbnz	r1, 800664a <sbrk_aligned+0x12>
 8006644:	f001 ffe4 	bl	8008610 <_sbrk_r>
 8006648:	6030      	str	r0, [r6, #0]
 800664a:	4621      	mov	r1, r4
 800664c:	4628      	mov	r0, r5
 800664e:	f001 ffdf 	bl	8008610 <_sbrk_r>
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	d00a      	beq.n	800666c <sbrk_aligned+0x34>
 8006656:	1cc4      	adds	r4, r0, #3
 8006658:	f024 0403 	bic.w	r4, r4, #3
 800665c:	42a0      	cmp	r0, r4
 800665e:	d007      	beq.n	8006670 <sbrk_aligned+0x38>
 8006660:	1a21      	subs	r1, r4, r0
 8006662:	4628      	mov	r0, r5
 8006664:	f001 ffd4 	bl	8008610 <_sbrk_r>
 8006668:	3001      	adds	r0, #1
 800666a:	d101      	bne.n	8006670 <sbrk_aligned+0x38>
 800666c:	f04f 34ff 	mov.w	r4, #4294967295
 8006670:	4620      	mov	r0, r4
 8006672:	bd70      	pop	{r4, r5, r6, pc}
 8006674:	20000848 	.word	0x20000848

08006678 <_malloc_r>:
 8006678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800667c:	1ccd      	adds	r5, r1, #3
 800667e:	f025 0503 	bic.w	r5, r5, #3
 8006682:	3508      	adds	r5, #8
 8006684:	2d0c      	cmp	r5, #12
 8006686:	bf38      	it	cc
 8006688:	250c      	movcc	r5, #12
 800668a:	2d00      	cmp	r5, #0
 800668c:	4607      	mov	r7, r0
 800668e:	db01      	blt.n	8006694 <_malloc_r+0x1c>
 8006690:	42a9      	cmp	r1, r5
 8006692:	d905      	bls.n	80066a0 <_malloc_r+0x28>
 8006694:	230c      	movs	r3, #12
 8006696:	2600      	movs	r6, #0
 8006698:	603b      	str	r3, [r7, #0]
 800669a:	4630      	mov	r0, r6
 800669c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006774 <_malloc_r+0xfc>
 80066a4:	f000 f868 	bl	8006778 <__malloc_lock>
 80066a8:	f8d8 3000 	ldr.w	r3, [r8]
 80066ac:	461c      	mov	r4, r3
 80066ae:	bb5c      	cbnz	r4, 8006708 <_malloc_r+0x90>
 80066b0:	4629      	mov	r1, r5
 80066b2:	4638      	mov	r0, r7
 80066b4:	f7ff ffc0 	bl	8006638 <sbrk_aligned>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	4604      	mov	r4, r0
 80066bc:	d155      	bne.n	800676a <_malloc_r+0xf2>
 80066be:	f8d8 4000 	ldr.w	r4, [r8]
 80066c2:	4626      	mov	r6, r4
 80066c4:	2e00      	cmp	r6, #0
 80066c6:	d145      	bne.n	8006754 <_malloc_r+0xdc>
 80066c8:	2c00      	cmp	r4, #0
 80066ca:	d048      	beq.n	800675e <_malloc_r+0xe6>
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	4631      	mov	r1, r6
 80066d0:	4638      	mov	r0, r7
 80066d2:	eb04 0903 	add.w	r9, r4, r3
 80066d6:	f001 ff9b 	bl	8008610 <_sbrk_r>
 80066da:	4581      	cmp	r9, r0
 80066dc:	d13f      	bne.n	800675e <_malloc_r+0xe6>
 80066de:	6821      	ldr	r1, [r4, #0]
 80066e0:	4638      	mov	r0, r7
 80066e2:	1a6d      	subs	r5, r5, r1
 80066e4:	4629      	mov	r1, r5
 80066e6:	f7ff ffa7 	bl	8006638 <sbrk_aligned>
 80066ea:	3001      	adds	r0, #1
 80066ec:	d037      	beq.n	800675e <_malloc_r+0xe6>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	442b      	add	r3, r5
 80066f2:	6023      	str	r3, [r4, #0]
 80066f4:	f8d8 3000 	ldr.w	r3, [r8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d038      	beq.n	800676e <_malloc_r+0xf6>
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	42a2      	cmp	r2, r4
 8006700:	d12b      	bne.n	800675a <_malloc_r+0xe2>
 8006702:	2200      	movs	r2, #0
 8006704:	605a      	str	r2, [r3, #4]
 8006706:	e00f      	b.n	8006728 <_malloc_r+0xb0>
 8006708:	6822      	ldr	r2, [r4, #0]
 800670a:	1b52      	subs	r2, r2, r5
 800670c:	d41f      	bmi.n	800674e <_malloc_r+0xd6>
 800670e:	2a0b      	cmp	r2, #11
 8006710:	d917      	bls.n	8006742 <_malloc_r+0xca>
 8006712:	1961      	adds	r1, r4, r5
 8006714:	42a3      	cmp	r3, r4
 8006716:	6025      	str	r5, [r4, #0]
 8006718:	bf18      	it	ne
 800671a:	6059      	strne	r1, [r3, #4]
 800671c:	6863      	ldr	r3, [r4, #4]
 800671e:	bf08      	it	eq
 8006720:	f8c8 1000 	streq.w	r1, [r8]
 8006724:	5162      	str	r2, [r4, r5]
 8006726:	604b      	str	r3, [r1, #4]
 8006728:	4638      	mov	r0, r7
 800672a:	f104 060b 	add.w	r6, r4, #11
 800672e:	f000 f829 	bl	8006784 <__malloc_unlock>
 8006732:	f026 0607 	bic.w	r6, r6, #7
 8006736:	1d23      	adds	r3, r4, #4
 8006738:	1af2      	subs	r2, r6, r3
 800673a:	d0ae      	beq.n	800669a <_malloc_r+0x22>
 800673c:	1b9b      	subs	r3, r3, r6
 800673e:	50a3      	str	r3, [r4, r2]
 8006740:	e7ab      	b.n	800669a <_malloc_r+0x22>
 8006742:	42a3      	cmp	r3, r4
 8006744:	6862      	ldr	r2, [r4, #4]
 8006746:	d1dd      	bne.n	8006704 <_malloc_r+0x8c>
 8006748:	f8c8 2000 	str.w	r2, [r8]
 800674c:	e7ec      	b.n	8006728 <_malloc_r+0xb0>
 800674e:	4623      	mov	r3, r4
 8006750:	6864      	ldr	r4, [r4, #4]
 8006752:	e7ac      	b.n	80066ae <_malloc_r+0x36>
 8006754:	4634      	mov	r4, r6
 8006756:	6876      	ldr	r6, [r6, #4]
 8006758:	e7b4      	b.n	80066c4 <_malloc_r+0x4c>
 800675a:	4613      	mov	r3, r2
 800675c:	e7cc      	b.n	80066f8 <_malloc_r+0x80>
 800675e:	230c      	movs	r3, #12
 8006760:	4638      	mov	r0, r7
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	f000 f80e 	bl	8006784 <__malloc_unlock>
 8006768:	e797      	b.n	800669a <_malloc_r+0x22>
 800676a:	6025      	str	r5, [r4, #0]
 800676c:	e7dc      	b.n	8006728 <_malloc_r+0xb0>
 800676e:	605b      	str	r3, [r3, #4]
 8006770:	deff      	udf	#255	; 0xff
 8006772:	bf00      	nop
 8006774:	20000844 	.word	0x20000844

08006778 <__malloc_lock>:
 8006778:	4801      	ldr	r0, [pc, #4]	; (8006780 <__malloc_lock+0x8>)
 800677a:	f7ff b87a 	b.w	8005872 <__retarget_lock_acquire_recursive>
 800677e:	bf00      	nop
 8006780:	20000840 	.word	0x20000840

08006784 <__malloc_unlock>:
 8006784:	4801      	ldr	r0, [pc, #4]	; (800678c <__malloc_unlock+0x8>)
 8006786:	f7ff b875 	b.w	8005874 <__retarget_lock_release_recursive>
 800678a:	bf00      	nop
 800678c:	20000840 	.word	0x20000840

08006790 <_Balloc>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	69c6      	ldr	r6, [r0, #28]
 8006794:	4604      	mov	r4, r0
 8006796:	460d      	mov	r5, r1
 8006798:	b976      	cbnz	r6, 80067b8 <_Balloc+0x28>
 800679a:	2010      	movs	r0, #16
 800679c:	f7ff ff44 	bl	8006628 <malloc>
 80067a0:	4602      	mov	r2, r0
 80067a2:	61e0      	str	r0, [r4, #28]
 80067a4:	b920      	cbnz	r0, 80067b0 <_Balloc+0x20>
 80067a6:	216b      	movs	r1, #107	; 0x6b
 80067a8:	4b17      	ldr	r3, [pc, #92]	; (8006808 <_Balloc+0x78>)
 80067aa:	4818      	ldr	r0, [pc, #96]	; (800680c <_Balloc+0x7c>)
 80067ac:	f001 ff46 	bl	800863c <__assert_func>
 80067b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067b4:	6006      	str	r6, [r0, #0]
 80067b6:	60c6      	str	r6, [r0, #12]
 80067b8:	69e6      	ldr	r6, [r4, #28]
 80067ba:	68f3      	ldr	r3, [r6, #12]
 80067bc:	b183      	cbz	r3, 80067e0 <_Balloc+0x50>
 80067be:	69e3      	ldr	r3, [r4, #28]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067c6:	b9b8      	cbnz	r0, 80067f8 <_Balloc+0x68>
 80067c8:	2101      	movs	r1, #1
 80067ca:	fa01 f605 	lsl.w	r6, r1, r5
 80067ce:	1d72      	adds	r2, r6, #5
 80067d0:	4620      	mov	r0, r4
 80067d2:	0092      	lsls	r2, r2, #2
 80067d4:	f001 ff50 	bl	8008678 <_calloc_r>
 80067d8:	b160      	cbz	r0, 80067f4 <_Balloc+0x64>
 80067da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80067de:	e00e      	b.n	80067fe <_Balloc+0x6e>
 80067e0:	2221      	movs	r2, #33	; 0x21
 80067e2:	2104      	movs	r1, #4
 80067e4:	4620      	mov	r0, r4
 80067e6:	f001 ff47 	bl	8008678 <_calloc_r>
 80067ea:	69e3      	ldr	r3, [r4, #28]
 80067ec:	60f0      	str	r0, [r6, #12]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e4      	bne.n	80067be <_Balloc+0x2e>
 80067f4:	2000      	movs	r0, #0
 80067f6:	bd70      	pop	{r4, r5, r6, pc}
 80067f8:	6802      	ldr	r2, [r0, #0]
 80067fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067fe:	2300      	movs	r3, #0
 8006800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006804:	e7f7      	b.n	80067f6 <_Balloc+0x66>
 8006806:	bf00      	nop
 8006808:	0800bd72 	.word	0x0800bd72
 800680c:	0800bdf2 	.word	0x0800bdf2

08006810 <_Bfree>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	69c6      	ldr	r6, [r0, #28]
 8006814:	4605      	mov	r5, r0
 8006816:	460c      	mov	r4, r1
 8006818:	b976      	cbnz	r6, 8006838 <_Bfree+0x28>
 800681a:	2010      	movs	r0, #16
 800681c:	f7ff ff04 	bl	8006628 <malloc>
 8006820:	4602      	mov	r2, r0
 8006822:	61e8      	str	r0, [r5, #28]
 8006824:	b920      	cbnz	r0, 8006830 <_Bfree+0x20>
 8006826:	218f      	movs	r1, #143	; 0x8f
 8006828:	4b08      	ldr	r3, [pc, #32]	; (800684c <_Bfree+0x3c>)
 800682a:	4809      	ldr	r0, [pc, #36]	; (8006850 <_Bfree+0x40>)
 800682c:	f001 ff06 	bl	800863c <__assert_func>
 8006830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006834:	6006      	str	r6, [r0, #0]
 8006836:	60c6      	str	r6, [r0, #12]
 8006838:	b13c      	cbz	r4, 800684a <_Bfree+0x3a>
 800683a:	69eb      	ldr	r3, [r5, #28]
 800683c:	6862      	ldr	r2, [r4, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006844:	6021      	str	r1, [r4, #0]
 8006846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	0800bd72 	.word	0x0800bd72
 8006850:	0800bdf2 	.word	0x0800bdf2

08006854 <__multadd>:
 8006854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006858:	4607      	mov	r7, r0
 800685a:	460c      	mov	r4, r1
 800685c:	461e      	mov	r6, r3
 800685e:	2000      	movs	r0, #0
 8006860:	690d      	ldr	r5, [r1, #16]
 8006862:	f101 0c14 	add.w	ip, r1, #20
 8006866:	f8dc 3000 	ldr.w	r3, [ip]
 800686a:	3001      	adds	r0, #1
 800686c:	b299      	uxth	r1, r3
 800686e:	fb02 6101 	mla	r1, r2, r1, r6
 8006872:	0c1e      	lsrs	r6, r3, #16
 8006874:	0c0b      	lsrs	r3, r1, #16
 8006876:	fb02 3306 	mla	r3, r2, r6, r3
 800687a:	b289      	uxth	r1, r1
 800687c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006880:	4285      	cmp	r5, r0
 8006882:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006886:	f84c 1b04 	str.w	r1, [ip], #4
 800688a:	dcec      	bgt.n	8006866 <__multadd+0x12>
 800688c:	b30e      	cbz	r6, 80068d2 <__multadd+0x7e>
 800688e:	68a3      	ldr	r3, [r4, #8]
 8006890:	42ab      	cmp	r3, r5
 8006892:	dc19      	bgt.n	80068c8 <__multadd+0x74>
 8006894:	6861      	ldr	r1, [r4, #4]
 8006896:	4638      	mov	r0, r7
 8006898:	3101      	adds	r1, #1
 800689a:	f7ff ff79 	bl	8006790 <_Balloc>
 800689e:	4680      	mov	r8, r0
 80068a0:	b928      	cbnz	r0, 80068ae <__multadd+0x5a>
 80068a2:	4602      	mov	r2, r0
 80068a4:	21ba      	movs	r1, #186	; 0xba
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <__multadd+0x84>)
 80068a8:	480c      	ldr	r0, [pc, #48]	; (80068dc <__multadd+0x88>)
 80068aa:	f001 fec7 	bl	800863c <__assert_func>
 80068ae:	6922      	ldr	r2, [r4, #16]
 80068b0:	f104 010c 	add.w	r1, r4, #12
 80068b4:	3202      	adds	r2, #2
 80068b6:	0092      	lsls	r2, r2, #2
 80068b8:	300c      	adds	r0, #12
 80068ba:	f7fe ffea 	bl	8005892 <memcpy>
 80068be:	4621      	mov	r1, r4
 80068c0:	4638      	mov	r0, r7
 80068c2:	f7ff ffa5 	bl	8006810 <_Bfree>
 80068c6:	4644      	mov	r4, r8
 80068c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068cc:	3501      	adds	r5, #1
 80068ce:	615e      	str	r6, [r3, #20]
 80068d0:	6125      	str	r5, [r4, #16]
 80068d2:	4620      	mov	r0, r4
 80068d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068d8:	0800bde1 	.word	0x0800bde1
 80068dc:	0800bdf2 	.word	0x0800bdf2

080068e0 <__s2b>:
 80068e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e4:	4615      	mov	r5, r2
 80068e6:	2209      	movs	r2, #9
 80068e8:	461f      	mov	r7, r3
 80068ea:	3308      	adds	r3, #8
 80068ec:	460c      	mov	r4, r1
 80068ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80068f2:	4606      	mov	r6, r0
 80068f4:	2201      	movs	r2, #1
 80068f6:	2100      	movs	r1, #0
 80068f8:	429a      	cmp	r2, r3
 80068fa:	db09      	blt.n	8006910 <__s2b+0x30>
 80068fc:	4630      	mov	r0, r6
 80068fe:	f7ff ff47 	bl	8006790 <_Balloc>
 8006902:	b940      	cbnz	r0, 8006916 <__s2b+0x36>
 8006904:	4602      	mov	r2, r0
 8006906:	21d3      	movs	r1, #211	; 0xd3
 8006908:	4b18      	ldr	r3, [pc, #96]	; (800696c <__s2b+0x8c>)
 800690a:	4819      	ldr	r0, [pc, #100]	; (8006970 <__s2b+0x90>)
 800690c:	f001 fe96 	bl	800863c <__assert_func>
 8006910:	0052      	lsls	r2, r2, #1
 8006912:	3101      	adds	r1, #1
 8006914:	e7f0      	b.n	80068f8 <__s2b+0x18>
 8006916:	9b08      	ldr	r3, [sp, #32]
 8006918:	2d09      	cmp	r5, #9
 800691a:	6143      	str	r3, [r0, #20]
 800691c:	f04f 0301 	mov.w	r3, #1
 8006920:	6103      	str	r3, [r0, #16]
 8006922:	dd16      	ble.n	8006952 <__s2b+0x72>
 8006924:	f104 0909 	add.w	r9, r4, #9
 8006928:	46c8      	mov	r8, r9
 800692a:	442c      	add	r4, r5
 800692c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006930:	4601      	mov	r1, r0
 8006932:	220a      	movs	r2, #10
 8006934:	4630      	mov	r0, r6
 8006936:	3b30      	subs	r3, #48	; 0x30
 8006938:	f7ff ff8c 	bl	8006854 <__multadd>
 800693c:	45a0      	cmp	r8, r4
 800693e:	d1f5      	bne.n	800692c <__s2b+0x4c>
 8006940:	f1a5 0408 	sub.w	r4, r5, #8
 8006944:	444c      	add	r4, r9
 8006946:	1b2d      	subs	r5, r5, r4
 8006948:	1963      	adds	r3, r4, r5
 800694a:	42bb      	cmp	r3, r7
 800694c:	db04      	blt.n	8006958 <__s2b+0x78>
 800694e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006952:	2509      	movs	r5, #9
 8006954:	340a      	adds	r4, #10
 8006956:	e7f6      	b.n	8006946 <__s2b+0x66>
 8006958:	f814 3b01 	ldrb.w	r3, [r4], #1
 800695c:	4601      	mov	r1, r0
 800695e:	220a      	movs	r2, #10
 8006960:	4630      	mov	r0, r6
 8006962:	3b30      	subs	r3, #48	; 0x30
 8006964:	f7ff ff76 	bl	8006854 <__multadd>
 8006968:	e7ee      	b.n	8006948 <__s2b+0x68>
 800696a:	bf00      	nop
 800696c:	0800bde1 	.word	0x0800bde1
 8006970:	0800bdf2 	.word	0x0800bdf2

08006974 <__hi0bits>:
 8006974:	0c02      	lsrs	r2, r0, #16
 8006976:	0412      	lsls	r2, r2, #16
 8006978:	4603      	mov	r3, r0
 800697a:	b9ca      	cbnz	r2, 80069b0 <__hi0bits+0x3c>
 800697c:	0403      	lsls	r3, r0, #16
 800697e:	2010      	movs	r0, #16
 8006980:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006984:	bf04      	itt	eq
 8006986:	021b      	lsleq	r3, r3, #8
 8006988:	3008      	addeq	r0, #8
 800698a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800698e:	bf04      	itt	eq
 8006990:	011b      	lsleq	r3, r3, #4
 8006992:	3004      	addeq	r0, #4
 8006994:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006998:	bf04      	itt	eq
 800699a:	009b      	lsleq	r3, r3, #2
 800699c:	3002      	addeq	r0, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	db05      	blt.n	80069ae <__hi0bits+0x3a>
 80069a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80069a6:	f100 0001 	add.w	r0, r0, #1
 80069aa:	bf08      	it	eq
 80069ac:	2020      	moveq	r0, #32
 80069ae:	4770      	bx	lr
 80069b0:	2000      	movs	r0, #0
 80069b2:	e7e5      	b.n	8006980 <__hi0bits+0xc>

080069b4 <__lo0bits>:
 80069b4:	6803      	ldr	r3, [r0, #0]
 80069b6:	4602      	mov	r2, r0
 80069b8:	f013 0007 	ands.w	r0, r3, #7
 80069bc:	d00b      	beq.n	80069d6 <__lo0bits+0x22>
 80069be:	07d9      	lsls	r1, r3, #31
 80069c0:	d421      	bmi.n	8006a06 <__lo0bits+0x52>
 80069c2:	0798      	lsls	r0, r3, #30
 80069c4:	bf49      	itett	mi
 80069c6:	085b      	lsrmi	r3, r3, #1
 80069c8:	089b      	lsrpl	r3, r3, #2
 80069ca:	2001      	movmi	r0, #1
 80069cc:	6013      	strmi	r3, [r2, #0]
 80069ce:	bf5c      	itt	pl
 80069d0:	2002      	movpl	r0, #2
 80069d2:	6013      	strpl	r3, [r2, #0]
 80069d4:	4770      	bx	lr
 80069d6:	b299      	uxth	r1, r3
 80069d8:	b909      	cbnz	r1, 80069de <__lo0bits+0x2a>
 80069da:	2010      	movs	r0, #16
 80069dc:	0c1b      	lsrs	r3, r3, #16
 80069de:	b2d9      	uxtb	r1, r3
 80069e0:	b909      	cbnz	r1, 80069e6 <__lo0bits+0x32>
 80069e2:	3008      	adds	r0, #8
 80069e4:	0a1b      	lsrs	r3, r3, #8
 80069e6:	0719      	lsls	r1, r3, #28
 80069e8:	bf04      	itt	eq
 80069ea:	091b      	lsreq	r3, r3, #4
 80069ec:	3004      	addeq	r0, #4
 80069ee:	0799      	lsls	r1, r3, #30
 80069f0:	bf04      	itt	eq
 80069f2:	089b      	lsreq	r3, r3, #2
 80069f4:	3002      	addeq	r0, #2
 80069f6:	07d9      	lsls	r1, r3, #31
 80069f8:	d403      	bmi.n	8006a02 <__lo0bits+0x4e>
 80069fa:	085b      	lsrs	r3, r3, #1
 80069fc:	f100 0001 	add.w	r0, r0, #1
 8006a00:	d003      	beq.n	8006a0a <__lo0bits+0x56>
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	4770      	bx	lr
 8006a06:	2000      	movs	r0, #0
 8006a08:	4770      	bx	lr
 8006a0a:	2020      	movs	r0, #32
 8006a0c:	4770      	bx	lr
	...

08006a10 <__i2b>:
 8006a10:	b510      	push	{r4, lr}
 8006a12:	460c      	mov	r4, r1
 8006a14:	2101      	movs	r1, #1
 8006a16:	f7ff febb 	bl	8006790 <_Balloc>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	b928      	cbnz	r0, 8006a2a <__i2b+0x1a>
 8006a1e:	f240 1145 	movw	r1, #325	; 0x145
 8006a22:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <__i2b+0x24>)
 8006a24:	4804      	ldr	r0, [pc, #16]	; (8006a38 <__i2b+0x28>)
 8006a26:	f001 fe09 	bl	800863c <__assert_func>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	6144      	str	r4, [r0, #20]
 8006a2e:	6103      	str	r3, [r0, #16]
 8006a30:	bd10      	pop	{r4, pc}
 8006a32:	bf00      	nop
 8006a34:	0800bde1 	.word	0x0800bde1
 8006a38:	0800bdf2 	.word	0x0800bdf2

08006a3c <__multiply>:
 8006a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a40:	4691      	mov	r9, r2
 8006a42:	690a      	ldr	r2, [r1, #16]
 8006a44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a48:	460c      	mov	r4, r1
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	bfbe      	ittt	lt
 8006a4e:	460b      	movlt	r3, r1
 8006a50:	464c      	movlt	r4, r9
 8006a52:	4699      	movlt	r9, r3
 8006a54:	6927      	ldr	r7, [r4, #16]
 8006a56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a5a:	68a3      	ldr	r3, [r4, #8]
 8006a5c:	6861      	ldr	r1, [r4, #4]
 8006a5e:	eb07 060a 	add.w	r6, r7, sl
 8006a62:	42b3      	cmp	r3, r6
 8006a64:	b085      	sub	sp, #20
 8006a66:	bfb8      	it	lt
 8006a68:	3101      	addlt	r1, #1
 8006a6a:	f7ff fe91 	bl	8006790 <_Balloc>
 8006a6e:	b930      	cbnz	r0, 8006a7e <__multiply+0x42>
 8006a70:	4602      	mov	r2, r0
 8006a72:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006a76:	4b43      	ldr	r3, [pc, #268]	; (8006b84 <__multiply+0x148>)
 8006a78:	4843      	ldr	r0, [pc, #268]	; (8006b88 <__multiply+0x14c>)
 8006a7a:	f001 fddf 	bl	800863c <__assert_func>
 8006a7e:	f100 0514 	add.w	r5, r0, #20
 8006a82:	462b      	mov	r3, r5
 8006a84:	2200      	movs	r2, #0
 8006a86:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a8a:	4543      	cmp	r3, r8
 8006a8c:	d321      	bcc.n	8006ad2 <__multiply+0x96>
 8006a8e:	f104 0314 	add.w	r3, r4, #20
 8006a92:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006a96:	f109 0314 	add.w	r3, r9, #20
 8006a9a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006a9e:	9202      	str	r2, [sp, #8]
 8006aa0:	1b3a      	subs	r2, r7, r4
 8006aa2:	3a15      	subs	r2, #21
 8006aa4:	f022 0203 	bic.w	r2, r2, #3
 8006aa8:	3204      	adds	r2, #4
 8006aaa:	f104 0115 	add.w	r1, r4, #21
 8006aae:	428f      	cmp	r7, r1
 8006ab0:	bf38      	it	cc
 8006ab2:	2204      	movcc	r2, #4
 8006ab4:	9201      	str	r2, [sp, #4]
 8006ab6:	9a02      	ldr	r2, [sp, #8]
 8006ab8:	9303      	str	r3, [sp, #12]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d80c      	bhi.n	8006ad8 <__multiply+0x9c>
 8006abe:	2e00      	cmp	r6, #0
 8006ac0:	dd03      	ble.n	8006aca <__multiply+0x8e>
 8006ac2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d05a      	beq.n	8006b80 <__multiply+0x144>
 8006aca:	6106      	str	r6, [r0, #16]
 8006acc:	b005      	add	sp, #20
 8006ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad2:	f843 2b04 	str.w	r2, [r3], #4
 8006ad6:	e7d8      	b.n	8006a8a <__multiply+0x4e>
 8006ad8:	f8b3 a000 	ldrh.w	sl, [r3]
 8006adc:	f1ba 0f00 	cmp.w	sl, #0
 8006ae0:	d023      	beq.n	8006b2a <__multiply+0xee>
 8006ae2:	46a9      	mov	r9, r5
 8006ae4:	f04f 0c00 	mov.w	ip, #0
 8006ae8:	f104 0e14 	add.w	lr, r4, #20
 8006aec:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006af0:	f8d9 1000 	ldr.w	r1, [r9]
 8006af4:	fa1f fb82 	uxth.w	fp, r2
 8006af8:	b289      	uxth	r1, r1
 8006afa:	fb0a 110b 	mla	r1, sl, fp, r1
 8006afe:	4461      	add	r1, ip
 8006b00:	f8d9 c000 	ldr.w	ip, [r9]
 8006b04:	0c12      	lsrs	r2, r2, #16
 8006b06:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006b0a:	fb0a c202 	mla	r2, sl, r2, ip
 8006b0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b12:	b289      	uxth	r1, r1
 8006b14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b18:	4577      	cmp	r7, lr
 8006b1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b1e:	f849 1b04 	str.w	r1, [r9], #4
 8006b22:	d8e3      	bhi.n	8006aec <__multiply+0xb0>
 8006b24:	9a01      	ldr	r2, [sp, #4]
 8006b26:	f845 c002 	str.w	ip, [r5, r2]
 8006b2a:	9a03      	ldr	r2, [sp, #12]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b32:	f1b9 0f00 	cmp.w	r9, #0
 8006b36:	d021      	beq.n	8006b7c <__multiply+0x140>
 8006b38:	46ae      	mov	lr, r5
 8006b3a:	f04f 0a00 	mov.w	sl, #0
 8006b3e:	6829      	ldr	r1, [r5, #0]
 8006b40:	f104 0c14 	add.w	ip, r4, #20
 8006b44:	f8bc b000 	ldrh.w	fp, [ip]
 8006b48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b4c:	b289      	uxth	r1, r1
 8006b4e:	fb09 220b 	mla	r2, r9, fp, r2
 8006b52:	4452      	add	r2, sl
 8006b54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b58:	f84e 1b04 	str.w	r1, [lr], #4
 8006b5c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b64:	f8be 1000 	ldrh.w	r1, [lr]
 8006b68:	4567      	cmp	r7, ip
 8006b6a:	fb09 110a 	mla	r1, r9, sl, r1
 8006b6e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006b72:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b76:	d8e5      	bhi.n	8006b44 <__multiply+0x108>
 8006b78:	9a01      	ldr	r2, [sp, #4]
 8006b7a:	50a9      	str	r1, [r5, r2]
 8006b7c:	3504      	adds	r5, #4
 8006b7e:	e79a      	b.n	8006ab6 <__multiply+0x7a>
 8006b80:	3e01      	subs	r6, #1
 8006b82:	e79c      	b.n	8006abe <__multiply+0x82>
 8006b84:	0800bde1 	.word	0x0800bde1
 8006b88:	0800bdf2 	.word	0x0800bdf2

08006b8c <__pow5mult>:
 8006b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b90:	4615      	mov	r5, r2
 8006b92:	f012 0203 	ands.w	r2, r2, #3
 8006b96:	4606      	mov	r6, r0
 8006b98:	460f      	mov	r7, r1
 8006b9a:	d007      	beq.n	8006bac <__pow5mult+0x20>
 8006b9c:	4c25      	ldr	r4, [pc, #148]	; (8006c34 <__pow5mult+0xa8>)
 8006b9e:	3a01      	subs	r2, #1
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ba6:	f7ff fe55 	bl	8006854 <__multadd>
 8006baa:	4607      	mov	r7, r0
 8006bac:	10ad      	asrs	r5, r5, #2
 8006bae:	d03d      	beq.n	8006c2c <__pow5mult+0xa0>
 8006bb0:	69f4      	ldr	r4, [r6, #28]
 8006bb2:	b97c      	cbnz	r4, 8006bd4 <__pow5mult+0x48>
 8006bb4:	2010      	movs	r0, #16
 8006bb6:	f7ff fd37 	bl	8006628 <malloc>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	61f0      	str	r0, [r6, #28]
 8006bbe:	b928      	cbnz	r0, 8006bcc <__pow5mult+0x40>
 8006bc0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006bc4:	4b1c      	ldr	r3, [pc, #112]	; (8006c38 <__pow5mult+0xac>)
 8006bc6:	481d      	ldr	r0, [pc, #116]	; (8006c3c <__pow5mult+0xb0>)
 8006bc8:	f001 fd38 	bl	800863c <__assert_func>
 8006bcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bd0:	6004      	str	r4, [r0, #0]
 8006bd2:	60c4      	str	r4, [r0, #12]
 8006bd4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006bd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006bdc:	b94c      	cbnz	r4, 8006bf2 <__pow5mult+0x66>
 8006bde:	f240 2171 	movw	r1, #625	; 0x271
 8006be2:	4630      	mov	r0, r6
 8006be4:	f7ff ff14 	bl	8006a10 <__i2b>
 8006be8:	2300      	movs	r3, #0
 8006bea:	4604      	mov	r4, r0
 8006bec:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bf0:	6003      	str	r3, [r0, #0]
 8006bf2:	f04f 0900 	mov.w	r9, #0
 8006bf6:	07eb      	lsls	r3, r5, #31
 8006bf8:	d50a      	bpl.n	8006c10 <__pow5mult+0x84>
 8006bfa:	4639      	mov	r1, r7
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f7ff ff1c 	bl	8006a3c <__multiply>
 8006c04:	4680      	mov	r8, r0
 8006c06:	4639      	mov	r1, r7
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f7ff fe01 	bl	8006810 <_Bfree>
 8006c0e:	4647      	mov	r7, r8
 8006c10:	106d      	asrs	r5, r5, #1
 8006c12:	d00b      	beq.n	8006c2c <__pow5mult+0xa0>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	b938      	cbnz	r0, 8006c28 <__pow5mult+0x9c>
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f7ff ff0d 	bl	8006a3c <__multiply>
 8006c22:	6020      	str	r0, [r4, #0]
 8006c24:	f8c0 9000 	str.w	r9, [r0]
 8006c28:	4604      	mov	r4, r0
 8006c2a:	e7e4      	b.n	8006bf6 <__pow5mult+0x6a>
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c32:	bf00      	nop
 8006c34:	0800bf40 	.word	0x0800bf40
 8006c38:	0800bd72 	.word	0x0800bd72
 8006c3c:	0800bdf2 	.word	0x0800bdf2

08006c40 <__lshift>:
 8006c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	460c      	mov	r4, r1
 8006c46:	4607      	mov	r7, r0
 8006c48:	4691      	mov	r9, r2
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	6849      	ldr	r1, [r1, #4]
 8006c4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c52:	68a3      	ldr	r3, [r4, #8]
 8006c54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c58:	f108 0601 	add.w	r6, r8, #1
 8006c5c:	42b3      	cmp	r3, r6
 8006c5e:	db0b      	blt.n	8006c78 <__lshift+0x38>
 8006c60:	4638      	mov	r0, r7
 8006c62:	f7ff fd95 	bl	8006790 <_Balloc>
 8006c66:	4605      	mov	r5, r0
 8006c68:	b948      	cbnz	r0, 8006c7e <__lshift+0x3e>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006c70:	4b27      	ldr	r3, [pc, #156]	; (8006d10 <__lshift+0xd0>)
 8006c72:	4828      	ldr	r0, [pc, #160]	; (8006d14 <__lshift+0xd4>)
 8006c74:	f001 fce2 	bl	800863c <__assert_func>
 8006c78:	3101      	adds	r1, #1
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	e7ee      	b.n	8006c5c <__lshift+0x1c>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f100 0114 	add.w	r1, r0, #20
 8006c84:	f100 0210 	add.w	r2, r0, #16
 8006c88:	4618      	mov	r0, r3
 8006c8a:	4553      	cmp	r3, sl
 8006c8c:	db33      	blt.n	8006cf6 <__lshift+0xb6>
 8006c8e:	6920      	ldr	r0, [r4, #16]
 8006c90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c94:	f104 0314 	add.w	r3, r4, #20
 8006c98:	f019 091f 	ands.w	r9, r9, #31
 8006c9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ca0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ca4:	d02b      	beq.n	8006cfe <__lshift+0xbe>
 8006ca6:	468a      	mov	sl, r1
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f1c9 0e20 	rsb	lr, r9, #32
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	fa00 f009 	lsl.w	r0, r0, r9
 8006cb4:	4310      	orrs	r0, r2
 8006cb6:	f84a 0b04 	str.w	r0, [sl], #4
 8006cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cbe:	459c      	cmp	ip, r3
 8006cc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006cc4:	d8f3      	bhi.n	8006cae <__lshift+0x6e>
 8006cc6:	ebac 0304 	sub.w	r3, ip, r4
 8006cca:	3b15      	subs	r3, #21
 8006ccc:	f023 0303 	bic.w	r3, r3, #3
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	f104 0015 	add.w	r0, r4, #21
 8006cd6:	4584      	cmp	ip, r0
 8006cd8:	bf38      	it	cc
 8006cda:	2304      	movcc	r3, #4
 8006cdc:	50ca      	str	r2, [r1, r3]
 8006cde:	b10a      	cbz	r2, 8006ce4 <__lshift+0xa4>
 8006ce0:	f108 0602 	add.w	r6, r8, #2
 8006ce4:	3e01      	subs	r6, #1
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	4621      	mov	r1, r4
 8006cea:	612e      	str	r6, [r5, #16]
 8006cec:	f7ff fd90 	bl	8006810 <_Bfree>
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	e7c5      	b.n	8006c8a <__lshift+0x4a>
 8006cfe:	3904      	subs	r1, #4
 8006d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d04:	459c      	cmp	ip, r3
 8006d06:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d0a:	d8f9      	bhi.n	8006d00 <__lshift+0xc0>
 8006d0c:	e7ea      	b.n	8006ce4 <__lshift+0xa4>
 8006d0e:	bf00      	nop
 8006d10:	0800bde1 	.word	0x0800bde1
 8006d14:	0800bdf2 	.word	0x0800bdf2

08006d18 <__mcmp>:
 8006d18:	4603      	mov	r3, r0
 8006d1a:	690a      	ldr	r2, [r1, #16]
 8006d1c:	6900      	ldr	r0, [r0, #16]
 8006d1e:	b530      	push	{r4, r5, lr}
 8006d20:	1a80      	subs	r0, r0, r2
 8006d22:	d10d      	bne.n	8006d40 <__mcmp+0x28>
 8006d24:	3314      	adds	r3, #20
 8006d26:	3114      	adds	r1, #20
 8006d28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d38:	4295      	cmp	r5, r2
 8006d3a:	d002      	beq.n	8006d42 <__mcmp+0x2a>
 8006d3c:	d304      	bcc.n	8006d48 <__mcmp+0x30>
 8006d3e:	2001      	movs	r0, #1
 8006d40:	bd30      	pop	{r4, r5, pc}
 8006d42:	42a3      	cmp	r3, r4
 8006d44:	d3f4      	bcc.n	8006d30 <__mcmp+0x18>
 8006d46:	e7fb      	b.n	8006d40 <__mcmp+0x28>
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4c:	e7f8      	b.n	8006d40 <__mcmp+0x28>
	...

08006d50 <__mdiff>:
 8006d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	460d      	mov	r5, r1
 8006d56:	4607      	mov	r7, r0
 8006d58:	4611      	mov	r1, r2
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	4614      	mov	r4, r2
 8006d5e:	f7ff ffdb 	bl	8006d18 <__mcmp>
 8006d62:	1e06      	subs	r6, r0, #0
 8006d64:	d111      	bne.n	8006d8a <__mdiff+0x3a>
 8006d66:	4631      	mov	r1, r6
 8006d68:	4638      	mov	r0, r7
 8006d6a:	f7ff fd11 	bl	8006790 <_Balloc>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	b928      	cbnz	r0, 8006d7e <__mdiff+0x2e>
 8006d72:	f240 2137 	movw	r1, #567	; 0x237
 8006d76:	4b3a      	ldr	r3, [pc, #232]	; (8006e60 <__mdiff+0x110>)
 8006d78:	483a      	ldr	r0, [pc, #232]	; (8006e64 <__mdiff+0x114>)
 8006d7a:	f001 fc5f 	bl	800863c <__assert_func>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006d84:	4610      	mov	r0, r2
 8006d86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8a:	bfa4      	itt	ge
 8006d8c:	4623      	movge	r3, r4
 8006d8e:	462c      	movge	r4, r5
 8006d90:	4638      	mov	r0, r7
 8006d92:	6861      	ldr	r1, [r4, #4]
 8006d94:	bfa6      	itte	ge
 8006d96:	461d      	movge	r5, r3
 8006d98:	2600      	movge	r6, #0
 8006d9a:	2601      	movlt	r6, #1
 8006d9c:	f7ff fcf8 	bl	8006790 <_Balloc>
 8006da0:	4602      	mov	r2, r0
 8006da2:	b918      	cbnz	r0, 8006dac <__mdiff+0x5c>
 8006da4:	f240 2145 	movw	r1, #581	; 0x245
 8006da8:	4b2d      	ldr	r3, [pc, #180]	; (8006e60 <__mdiff+0x110>)
 8006daa:	e7e5      	b.n	8006d78 <__mdiff+0x28>
 8006dac:	f102 0814 	add.w	r8, r2, #20
 8006db0:	46c2      	mov	sl, r8
 8006db2:	f04f 0c00 	mov.w	ip, #0
 8006db6:	6927      	ldr	r7, [r4, #16]
 8006db8:	60c6      	str	r6, [r0, #12]
 8006dba:	692e      	ldr	r6, [r5, #16]
 8006dbc:	f104 0014 	add.w	r0, r4, #20
 8006dc0:	f105 0914 	add.w	r9, r5, #20
 8006dc4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006dc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006dcc:	3410      	adds	r4, #16
 8006dce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006dd2:	f859 3b04 	ldr.w	r3, [r9], #4
 8006dd6:	fa1f f18b 	uxth.w	r1, fp
 8006dda:	4461      	add	r1, ip
 8006ddc:	fa1f fc83 	uxth.w	ip, r3
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	eba1 010c 	sub.w	r1, r1, ip
 8006de6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006dea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006dee:	b289      	uxth	r1, r1
 8006df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006df4:	454e      	cmp	r6, r9
 8006df6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006dfa:	f84a 1b04 	str.w	r1, [sl], #4
 8006dfe:	d8e6      	bhi.n	8006dce <__mdiff+0x7e>
 8006e00:	1b73      	subs	r3, r6, r5
 8006e02:	3b15      	subs	r3, #21
 8006e04:	f023 0303 	bic.w	r3, r3, #3
 8006e08:	3515      	adds	r5, #21
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	42ae      	cmp	r6, r5
 8006e0e:	bf38      	it	cc
 8006e10:	2304      	movcc	r3, #4
 8006e12:	4418      	add	r0, r3
 8006e14:	4443      	add	r3, r8
 8006e16:	461e      	mov	r6, r3
 8006e18:	4605      	mov	r5, r0
 8006e1a:	4575      	cmp	r5, lr
 8006e1c:	d30e      	bcc.n	8006e3c <__mdiff+0xec>
 8006e1e:	f10e 0103 	add.w	r1, lr, #3
 8006e22:	1a09      	subs	r1, r1, r0
 8006e24:	f021 0103 	bic.w	r1, r1, #3
 8006e28:	3803      	subs	r0, #3
 8006e2a:	4586      	cmp	lr, r0
 8006e2c:	bf38      	it	cc
 8006e2e:	2100      	movcc	r1, #0
 8006e30:	440b      	add	r3, r1
 8006e32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e36:	b189      	cbz	r1, 8006e5c <__mdiff+0x10c>
 8006e38:	6117      	str	r7, [r2, #16]
 8006e3a:	e7a3      	b.n	8006d84 <__mdiff+0x34>
 8006e3c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006e40:	fa1f f188 	uxth.w	r1, r8
 8006e44:	4461      	add	r1, ip
 8006e46:	140c      	asrs	r4, r1, #16
 8006e48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e4c:	b289      	uxth	r1, r1
 8006e4e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006e52:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006e56:	f846 1b04 	str.w	r1, [r6], #4
 8006e5a:	e7de      	b.n	8006e1a <__mdiff+0xca>
 8006e5c:	3f01      	subs	r7, #1
 8006e5e:	e7e8      	b.n	8006e32 <__mdiff+0xe2>
 8006e60:	0800bde1 	.word	0x0800bde1
 8006e64:	0800bdf2 	.word	0x0800bdf2

08006e68 <__ulp>:
 8006e68:	4b0e      	ldr	r3, [pc, #56]	; (8006ea4 <__ulp+0x3c>)
 8006e6a:	400b      	ands	r3, r1
 8006e6c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	dc08      	bgt.n	8006e86 <__ulp+0x1e>
 8006e74:	425b      	negs	r3, r3
 8006e76:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006e7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e7e:	da04      	bge.n	8006e8a <__ulp+0x22>
 8006e80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e84:	4113      	asrs	r3, r2
 8006e86:	2200      	movs	r2, #0
 8006e88:	e008      	b.n	8006e9c <__ulp+0x34>
 8006e8a:	f1a2 0314 	sub.w	r3, r2, #20
 8006e8e:	2b1e      	cmp	r3, #30
 8006e90:	bfd6      	itet	le
 8006e92:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006e96:	2201      	movgt	r2, #1
 8006e98:	40da      	lsrle	r2, r3
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	7ff00000 	.word	0x7ff00000

08006ea8 <__b2d>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	6905      	ldr	r5, [r0, #16]
 8006eac:	f100 0714 	add.w	r7, r0, #20
 8006eb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006eb4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006eb8:	1f2e      	subs	r6, r5, #4
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f7ff fd5a 	bl	8006974 <__hi0bits>
 8006ec0:	f1c0 0220 	rsb	r2, r0, #32
 8006ec4:	280a      	cmp	r0, #10
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006f34 <__b2d+0x8c>
 8006ecc:	600a      	str	r2, [r1, #0]
 8006ece:	dc12      	bgt.n	8006ef6 <__b2d+0x4e>
 8006ed0:	f1c0 0e0b 	rsb	lr, r0, #11
 8006ed4:	fa24 f20e 	lsr.w	r2, r4, lr
 8006ed8:	42b7      	cmp	r7, r6
 8006eda:	ea42 010c 	orr.w	r1, r2, ip
 8006ede:	bf2c      	ite	cs
 8006ee0:	2200      	movcs	r2, #0
 8006ee2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006ee6:	3315      	adds	r3, #21
 8006ee8:	fa04 f303 	lsl.w	r3, r4, r3
 8006eec:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef6:	42b7      	cmp	r7, r6
 8006ef8:	bf2e      	itee	cs
 8006efa:	2200      	movcs	r2, #0
 8006efc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006f00:	f1a5 0608 	subcc.w	r6, r5, #8
 8006f04:	3b0b      	subs	r3, #11
 8006f06:	d012      	beq.n	8006f2e <__b2d+0x86>
 8006f08:	f1c3 0520 	rsb	r5, r3, #32
 8006f0c:	fa22 f105 	lsr.w	r1, r2, r5
 8006f10:	409c      	lsls	r4, r3
 8006f12:	430c      	orrs	r4, r1
 8006f14:	42be      	cmp	r6, r7
 8006f16:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006f1a:	bf94      	ite	ls
 8006f1c:	2400      	movls	r4, #0
 8006f1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006f22:	409a      	lsls	r2, r3
 8006f24:	40ec      	lsrs	r4, r5
 8006f26:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006f2a:	4322      	orrs	r2, r4
 8006f2c:	e7e1      	b.n	8006ef2 <__b2d+0x4a>
 8006f2e:	ea44 010c 	orr.w	r1, r4, ip
 8006f32:	e7de      	b.n	8006ef2 <__b2d+0x4a>
 8006f34:	3ff00000 	.word	0x3ff00000

08006f38 <__d2b>:
 8006f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	4617      	mov	r7, r2
 8006f3e:	461c      	mov	r4, r3
 8006f40:	9e08      	ldr	r6, [sp, #32]
 8006f42:	f7ff fc25 	bl	8006790 <_Balloc>
 8006f46:	4605      	mov	r5, r0
 8006f48:	b930      	cbnz	r0, 8006f58 <__d2b+0x20>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	f240 310f 	movw	r1, #783	; 0x30f
 8006f50:	4b22      	ldr	r3, [pc, #136]	; (8006fdc <__d2b+0xa4>)
 8006f52:	4823      	ldr	r0, [pc, #140]	; (8006fe0 <__d2b+0xa8>)
 8006f54:	f001 fb72 	bl	800863c <__assert_func>
 8006f58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006f5c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006f60:	bb24      	cbnz	r4, 8006fac <__d2b+0x74>
 8006f62:	2f00      	cmp	r7, #0
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	d026      	beq.n	8006fb6 <__d2b+0x7e>
 8006f68:	4668      	mov	r0, sp
 8006f6a:	9700      	str	r7, [sp, #0]
 8006f6c:	f7ff fd22 	bl	80069b4 <__lo0bits>
 8006f70:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f74:	b1e8      	cbz	r0, 8006fb2 <__d2b+0x7a>
 8006f76:	f1c0 0320 	rsb	r3, r0, #32
 8006f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7e:	430b      	orrs	r3, r1
 8006f80:	40c2      	lsrs	r2, r0
 8006f82:	616b      	str	r3, [r5, #20]
 8006f84:	9201      	str	r2, [sp, #4]
 8006f86:	9b01      	ldr	r3, [sp, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	bf14      	ite	ne
 8006f8c:	2102      	movne	r1, #2
 8006f8e:	2101      	moveq	r1, #1
 8006f90:	61ab      	str	r3, [r5, #24]
 8006f92:	6129      	str	r1, [r5, #16]
 8006f94:	b1bc      	cbz	r4, 8006fc6 <__d2b+0x8e>
 8006f96:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006f9a:	4404      	add	r4, r0
 8006f9c:	6034      	str	r4, [r6, #0]
 8006f9e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa4:	6018      	str	r0, [r3, #0]
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	b003      	add	sp, #12
 8006faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fb0:	e7d7      	b.n	8006f62 <__d2b+0x2a>
 8006fb2:	6169      	str	r1, [r5, #20]
 8006fb4:	e7e7      	b.n	8006f86 <__d2b+0x4e>
 8006fb6:	a801      	add	r0, sp, #4
 8006fb8:	f7ff fcfc 	bl	80069b4 <__lo0bits>
 8006fbc:	9b01      	ldr	r3, [sp, #4]
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	616b      	str	r3, [r5, #20]
 8006fc2:	3020      	adds	r0, #32
 8006fc4:	e7e5      	b.n	8006f92 <__d2b+0x5a>
 8006fc6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fca:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006fce:	6030      	str	r0, [r6, #0]
 8006fd0:	6918      	ldr	r0, [r3, #16]
 8006fd2:	f7ff fccf 	bl	8006974 <__hi0bits>
 8006fd6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006fda:	e7e2      	b.n	8006fa2 <__d2b+0x6a>
 8006fdc:	0800bde1 	.word	0x0800bde1
 8006fe0:	0800bdf2 	.word	0x0800bdf2

08006fe4 <__ratio>:
 8006fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe8:	4688      	mov	r8, r1
 8006fea:	4669      	mov	r1, sp
 8006fec:	4681      	mov	r9, r0
 8006fee:	f7ff ff5b 	bl	8006ea8 <__b2d>
 8006ff2:	460f      	mov	r7, r1
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	a901      	add	r1, sp, #4
 8006ffc:	f7ff ff54 	bl	8006ea8 <__b2d>
 8007000:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007004:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007008:	468b      	mov	fp, r1
 800700a:	eba3 0c02 	sub.w	ip, r3, r2
 800700e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007012:	1a9b      	subs	r3, r3, r2
 8007014:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007018:	2b00      	cmp	r3, #0
 800701a:	bfd5      	itete	le
 800701c:	460a      	movle	r2, r1
 800701e:	462a      	movgt	r2, r5
 8007020:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007024:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007028:	bfd8      	it	le
 800702a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800702e:	465b      	mov	r3, fp
 8007030:	4602      	mov	r2, r0
 8007032:	4639      	mov	r1, r7
 8007034:	4620      	mov	r0, r4
 8007036:	f7f9 fb89 	bl	800074c <__aeabi_ddiv>
 800703a:	b003      	add	sp, #12
 800703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007040 <__copybits>:
 8007040:	3901      	subs	r1, #1
 8007042:	b570      	push	{r4, r5, r6, lr}
 8007044:	1149      	asrs	r1, r1, #5
 8007046:	6914      	ldr	r4, [r2, #16]
 8007048:	3101      	adds	r1, #1
 800704a:	f102 0314 	add.w	r3, r2, #20
 800704e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007052:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007056:	1f05      	subs	r5, r0, #4
 8007058:	42a3      	cmp	r3, r4
 800705a:	d30c      	bcc.n	8007076 <__copybits+0x36>
 800705c:	1aa3      	subs	r3, r4, r2
 800705e:	3b11      	subs	r3, #17
 8007060:	f023 0303 	bic.w	r3, r3, #3
 8007064:	3211      	adds	r2, #17
 8007066:	42a2      	cmp	r2, r4
 8007068:	bf88      	it	hi
 800706a:	2300      	movhi	r3, #0
 800706c:	4418      	add	r0, r3
 800706e:	2300      	movs	r3, #0
 8007070:	4288      	cmp	r0, r1
 8007072:	d305      	bcc.n	8007080 <__copybits+0x40>
 8007074:	bd70      	pop	{r4, r5, r6, pc}
 8007076:	f853 6b04 	ldr.w	r6, [r3], #4
 800707a:	f845 6f04 	str.w	r6, [r5, #4]!
 800707e:	e7eb      	b.n	8007058 <__copybits+0x18>
 8007080:	f840 3b04 	str.w	r3, [r0], #4
 8007084:	e7f4      	b.n	8007070 <__copybits+0x30>

08007086 <__any_on>:
 8007086:	f100 0214 	add.w	r2, r0, #20
 800708a:	6900      	ldr	r0, [r0, #16]
 800708c:	114b      	asrs	r3, r1, #5
 800708e:	4298      	cmp	r0, r3
 8007090:	b510      	push	{r4, lr}
 8007092:	db11      	blt.n	80070b8 <__any_on+0x32>
 8007094:	dd0a      	ble.n	80070ac <__any_on+0x26>
 8007096:	f011 011f 	ands.w	r1, r1, #31
 800709a:	d007      	beq.n	80070ac <__any_on+0x26>
 800709c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80070a0:	fa24 f001 	lsr.w	r0, r4, r1
 80070a4:	fa00 f101 	lsl.w	r1, r0, r1
 80070a8:	428c      	cmp	r4, r1
 80070aa:	d10b      	bne.n	80070c4 <__any_on+0x3e>
 80070ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d803      	bhi.n	80070bc <__any_on+0x36>
 80070b4:	2000      	movs	r0, #0
 80070b6:	bd10      	pop	{r4, pc}
 80070b8:	4603      	mov	r3, r0
 80070ba:	e7f7      	b.n	80070ac <__any_on+0x26>
 80070bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80070c0:	2900      	cmp	r1, #0
 80070c2:	d0f5      	beq.n	80070b0 <__any_on+0x2a>
 80070c4:	2001      	movs	r0, #1
 80070c6:	e7f6      	b.n	80070b6 <__any_on+0x30>

080070c8 <sulp>:
 80070c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070cc:	460f      	mov	r7, r1
 80070ce:	4690      	mov	r8, r2
 80070d0:	f7ff feca 	bl	8006e68 <__ulp>
 80070d4:	4604      	mov	r4, r0
 80070d6:	460d      	mov	r5, r1
 80070d8:	f1b8 0f00 	cmp.w	r8, #0
 80070dc:	d011      	beq.n	8007102 <sulp+0x3a>
 80070de:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80070e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	dd0b      	ble.n	8007102 <sulp+0x3a>
 80070ea:	2400      	movs	r4, #0
 80070ec:	051b      	lsls	r3, r3, #20
 80070ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070f6:	4622      	mov	r2, r4
 80070f8:	462b      	mov	r3, r5
 80070fa:	f7f9 f9fd 	bl	80004f8 <__aeabi_dmul>
 80070fe:	4604      	mov	r4, r0
 8007100:	460d      	mov	r5, r1
 8007102:	4620      	mov	r0, r4
 8007104:	4629      	mov	r1, r5
 8007106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800710a:	0000      	movs	r0, r0
 800710c:	0000      	movs	r0, r0
	...

08007110 <_strtod_l>:
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	b09f      	sub	sp, #124	; 0x7c
 8007116:	9217      	str	r2, [sp, #92]	; 0x5c
 8007118:	2200      	movs	r2, #0
 800711a:	4604      	mov	r4, r0
 800711c:	921a      	str	r2, [sp, #104]	; 0x68
 800711e:	460d      	mov	r5, r1
 8007120:	f04f 0800 	mov.w	r8, #0
 8007124:	f04f 0900 	mov.w	r9, #0
 8007128:	460a      	mov	r2, r1
 800712a:	9219      	str	r2, [sp, #100]	; 0x64
 800712c:	7811      	ldrb	r1, [r2, #0]
 800712e:	292b      	cmp	r1, #43	; 0x2b
 8007130:	d04a      	beq.n	80071c8 <_strtod_l+0xb8>
 8007132:	d838      	bhi.n	80071a6 <_strtod_l+0x96>
 8007134:	290d      	cmp	r1, #13
 8007136:	d832      	bhi.n	800719e <_strtod_l+0x8e>
 8007138:	2908      	cmp	r1, #8
 800713a:	d832      	bhi.n	80071a2 <_strtod_l+0x92>
 800713c:	2900      	cmp	r1, #0
 800713e:	d03b      	beq.n	80071b8 <_strtod_l+0xa8>
 8007140:	2200      	movs	r2, #0
 8007142:	920e      	str	r2, [sp, #56]	; 0x38
 8007144:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007146:	7832      	ldrb	r2, [r6, #0]
 8007148:	2a30      	cmp	r2, #48	; 0x30
 800714a:	f040 80b2 	bne.w	80072b2 <_strtod_l+0x1a2>
 800714e:	7872      	ldrb	r2, [r6, #1]
 8007150:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007154:	2a58      	cmp	r2, #88	; 0x58
 8007156:	d16e      	bne.n	8007236 <_strtod_l+0x126>
 8007158:	9302      	str	r3, [sp, #8]
 800715a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800715c:	4620      	mov	r0, r4
 800715e:	9301      	str	r3, [sp, #4]
 8007160:	ab1a      	add	r3, sp, #104	; 0x68
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	4a8c      	ldr	r2, [pc, #560]	; (8007398 <_strtod_l+0x288>)
 8007166:	ab1b      	add	r3, sp, #108	; 0x6c
 8007168:	a919      	add	r1, sp, #100	; 0x64
 800716a:	f001 fb01 	bl	8008770 <__gethex>
 800716e:	f010 070f 	ands.w	r7, r0, #15
 8007172:	4605      	mov	r5, r0
 8007174:	d005      	beq.n	8007182 <_strtod_l+0x72>
 8007176:	2f06      	cmp	r7, #6
 8007178:	d128      	bne.n	80071cc <_strtod_l+0xbc>
 800717a:	2300      	movs	r3, #0
 800717c:	3601      	adds	r6, #1
 800717e:	9619      	str	r6, [sp, #100]	; 0x64
 8007180:	930e      	str	r3, [sp, #56]	; 0x38
 8007182:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007184:	2b00      	cmp	r3, #0
 8007186:	f040 85a0 	bne.w	8007cca <_strtod_l+0xbba>
 800718a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800718c:	b1cb      	cbz	r3, 80071c2 <_strtod_l+0xb2>
 800718e:	4642      	mov	r2, r8
 8007190:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007194:	4610      	mov	r0, r2
 8007196:	4619      	mov	r1, r3
 8007198:	b01f      	add	sp, #124	; 0x7c
 800719a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719e:	2920      	cmp	r1, #32
 80071a0:	d1ce      	bne.n	8007140 <_strtod_l+0x30>
 80071a2:	3201      	adds	r2, #1
 80071a4:	e7c1      	b.n	800712a <_strtod_l+0x1a>
 80071a6:	292d      	cmp	r1, #45	; 0x2d
 80071a8:	d1ca      	bne.n	8007140 <_strtod_l+0x30>
 80071aa:	2101      	movs	r1, #1
 80071ac:	910e      	str	r1, [sp, #56]	; 0x38
 80071ae:	1c51      	adds	r1, r2, #1
 80071b0:	9119      	str	r1, [sp, #100]	; 0x64
 80071b2:	7852      	ldrb	r2, [r2, #1]
 80071b4:	2a00      	cmp	r2, #0
 80071b6:	d1c5      	bne.n	8007144 <_strtod_l+0x34>
 80071b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ba:	9519      	str	r5, [sp, #100]	; 0x64
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 8582 	bne.w	8007cc6 <_strtod_l+0xbb6>
 80071c2:	4642      	mov	r2, r8
 80071c4:	464b      	mov	r3, r9
 80071c6:	e7e5      	b.n	8007194 <_strtod_l+0x84>
 80071c8:	2100      	movs	r1, #0
 80071ca:	e7ef      	b.n	80071ac <_strtod_l+0x9c>
 80071cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80071ce:	b13a      	cbz	r2, 80071e0 <_strtod_l+0xd0>
 80071d0:	2135      	movs	r1, #53	; 0x35
 80071d2:	a81c      	add	r0, sp, #112	; 0x70
 80071d4:	f7ff ff34 	bl	8007040 <__copybits>
 80071d8:	4620      	mov	r0, r4
 80071da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80071dc:	f7ff fb18 	bl	8006810 <_Bfree>
 80071e0:	3f01      	subs	r7, #1
 80071e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80071e4:	2f04      	cmp	r7, #4
 80071e6:	d806      	bhi.n	80071f6 <_strtod_l+0xe6>
 80071e8:	e8df f007 	tbb	[pc, r7]
 80071ec:	201d0314 	.word	0x201d0314
 80071f0:	14          	.byte	0x14
 80071f1:	00          	.byte	0x00
 80071f2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80071f6:	05e9      	lsls	r1, r5, #23
 80071f8:	bf48      	it	mi
 80071fa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80071fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007202:	0d1b      	lsrs	r3, r3, #20
 8007204:	051b      	lsls	r3, r3, #20
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1bb      	bne.n	8007182 <_strtod_l+0x72>
 800720a:	f7fe fb07 	bl	800581c <__errno>
 800720e:	2322      	movs	r3, #34	; 0x22
 8007210:	6003      	str	r3, [r0, #0]
 8007212:	e7b6      	b.n	8007182 <_strtod_l+0x72>
 8007214:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007218:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800721c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007220:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007224:	e7e7      	b.n	80071f6 <_strtod_l+0xe6>
 8007226:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800739c <_strtod_l+0x28c>
 800722a:	e7e4      	b.n	80071f6 <_strtod_l+0xe6>
 800722c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007230:	f04f 38ff 	mov.w	r8, #4294967295
 8007234:	e7df      	b.n	80071f6 <_strtod_l+0xe6>
 8007236:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	9219      	str	r2, [sp, #100]	; 0x64
 800723c:	785b      	ldrb	r3, [r3, #1]
 800723e:	2b30      	cmp	r3, #48	; 0x30
 8007240:	d0f9      	beq.n	8007236 <_strtod_l+0x126>
 8007242:	2b00      	cmp	r3, #0
 8007244:	d09d      	beq.n	8007182 <_strtod_l+0x72>
 8007246:	2301      	movs	r3, #1
 8007248:	f04f 0a00 	mov.w	sl, #0
 800724c:	220a      	movs	r2, #10
 800724e:	46d3      	mov	fp, sl
 8007250:	9305      	str	r3, [sp, #20]
 8007252:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007254:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007258:	930b      	str	r3, [sp, #44]	; 0x2c
 800725a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800725c:	7806      	ldrb	r6, [r0, #0]
 800725e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007262:	b2d9      	uxtb	r1, r3
 8007264:	2909      	cmp	r1, #9
 8007266:	d926      	bls.n	80072b6 <_strtod_l+0x1a6>
 8007268:	2201      	movs	r2, #1
 800726a:	494d      	ldr	r1, [pc, #308]	; (80073a0 <_strtod_l+0x290>)
 800726c:	f001 f9be 	bl	80085ec <strncmp>
 8007270:	2800      	cmp	r0, #0
 8007272:	d030      	beq.n	80072d6 <_strtod_l+0x1c6>
 8007274:	2000      	movs	r0, #0
 8007276:	4632      	mov	r2, r6
 8007278:	4603      	mov	r3, r0
 800727a:	465e      	mov	r6, fp
 800727c:	9008      	str	r0, [sp, #32]
 800727e:	2a65      	cmp	r2, #101	; 0x65
 8007280:	d001      	beq.n	8007286 <_strtod_l+0x176>
 8007282:	2a45      	cmp	r2, #69	; 0x45
 8007284:	d113      	bne.n	80072ae <_strtod_l+0x19e>
 8007286:	b91e      	cbnz	r6, 8007290 <_strtod_l+0x180>
 8007288:	9a05      	ldr	r2, [sp, #20]
 800728a:	4302      	orrs	r2, r0
 800728c:	d094      	beq.n	80071b8 <_strtod_l+0xa8>
 800728e:	2600      	movs	r6, #0
 8007290:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007292:	1c6a      	adds	r2, r5, #1
 8007294:	9219      	str	r2, [sp, #100]	; 0x64
 8007296:	786a      	ldrb	r2, [r5, #1]
 8007298:	2a2b      	cmp	r2, #43	; 0x2b
 800729a:	d074      	beq.n	8007386 <_strtod_l+0x276>
 800729c:	2a2d      	cmp	r2, #45	; 0x2d
 800729e:	d078      	beq.n	8007392 <_strtod_l+0x282>
 80072a0:	f04f 0c00 	mov.w	ip, #0
 80072a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072a8:	2909      	cmp	r1, #9
 80072aa:	d97f      	bls.n	80073ac <_strtod_l+0x29c>
 80072ac:	9519      	str	r5, [sp, #100]	; 0x64
 80072ae:	2700      	movs	r7, #0
 80072b0:	e09e      	b.n	80073f0 <_strtod_l+0x2e0>
 80072b2:	2300      	movs	r3, #0
 80072b4:	e7c8      	b.n	8007248 <_strtod_l+0x138>
 80072b6:	f1bb 0f08 	cmp.w	fp, #8
 80072ba:	bfd8      	it	le
 80072bc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80072be:	f100 0001 	add.w	r0, r0, #1
 80072c2:	bfd6      	itet	le
 80072c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80072c8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80072cc:	930a      	strle	r3, [sp, #40]	; 0x28
 80072ce:	f10b 0b01 	add.w	fp, fp, #1
 80072d2:	9019      	str	r0, [sp, #100]	; 0x64
 80072d4:	e7c1      	b.n	800725a <_strtod_l+0x14a>
 80072d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	9219      	str	r2, [sp, #100]	; 0x64
 80072dc:	785a      	ldrb	r2, [r3, #1]
 80072de:	f1bb 0f00 	cmp.w	fp, #0
 80072e2:	d037      	beq.n	8007354 <_strtod_l+0x244>
 80072e4:	465e      	mov	r6, fp
 80072e6:	9008      	str	r0, [sp, #32]
 80072e8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80072ec:	2b09      	cmp	r3, #9
 80072ee:	d912      	bls.n	8007316 <_strtod_l+0x206>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e7c4      	b.n	800727e <_strtod_l+0x16e>
 80072f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072f6:	3001      	adds	r0, #1
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	9219      	str	r2, [sp, #100]	; 0x64
 80072fc:	785a      	ldrb	r2, [r3, #1]
 80072fe:	2a30      	cmp	r2, #48	; 0x30
 8007300:	d0f8      	beq.n	80072f4 <_strtod_l+0x1e4>
 8007302:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007306:	2b08      	cmp	r3, #8
 8007308:	f200 84e4 	bhi.w	8007cd4 <_strtod_l+0xbc4>
 800730c:	9008      	str	r0, [sp, #32]
 800730e:	2000      	movs	r0, #0
 8007310:	4606      	mov	r6, r0
 8007312:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007314:	930b      	str	r3, [sp, #44]	; 0x2c
 8007316:	3a30      	subs	r2, #48	; 0x30
 8007318:	f100 0301 	add.w	r3, r0, #1
 800731c:	d014      	beq.n	8007348 <_strtod_l+0x238>
 800731e:	9908      	ldr	r1, [sp, #32]
 8007320:	eb00 0c06 	add.w	ip, r0, r6
 8007324:	4419      	add	r1, r3
 8007326:	9108      	str	r1, [sp, #32]
 8007328:	4633      	mov	r3, r6
 800732a:	210a      	movs	r1, #10
 800732c:	4563      	cmp	r3, ip
 800732e:	d113      	bne.n	8007358 <_strtod_l+0x248>
 8007330:	1833      	adds	r3, r6, r0
 8007332:	2b08      	cmp	r3, #8
 8007334:	f106 0601 	add.w	r6, r6, #1
 8007338:	4406      	add	r6, r0
 800733a:	dc1a      	bgt.n	8007372 <_strtod_l+0x262>
 800733c:	230a      	movs	r3, #10
 800733e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007340:	fb03 2301 	mla	r3, r3, r1, r2
 8007344:	930a      	str	r3, [sp, #40]	; 0x28
 8007346:	2300      	movs	r3, #0
 8007348:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800734a:	4618      	mov	r0, r3
 800734c:	1c51      	adds	r1, r2, #1
 800734e:	9119      	str	r1, [sp, #100]	; 0x64
 8007350:	7852      	ldrb	r2, [r2, #1]
 8007352:	e7c9      	b.n	80072e8 <_strtod_l+0x1d8>
 8007354:	4658      	mov	r0, fp
 8007356:	e7d2      	b.n	80072fe <_strtod_l+0x1ee>
 8007358:	2b08      	cmp	r3, #8
 800735a:	f103 0301 	add.w	r3, r3, #1
 800735e:	dc03      	bgt.n	8007368 <_strtod_l+0x258>
 8007360:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007362:	434f      	muls	r7, r1
 8007364:	970a      	str	r7, [sp, #40]	; 0x28
 8007366:	e7e1      	b.n	800732c <_strtod_l+0x21c>
 8007368:	2b10      	cmp	r3, #16
 800736a:	bfd8      	it	le
 800736c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007370:	e7dc      	b.n	800732c <_strtod_l+0x21c>
 8007372:	2e10      	cmp	r6, #16
 8007374:	bfdc      	itt	le
 8007376:	230a      	movle	r3, #10
 8007378:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800737c:	e7e3      	b.n	8007346 <_strtod_l+0x236>
 800737e:	2300      	movs	r3, #0
 8007380:	9308      	str	r3, [sp, #32]
 8007382:	2301      	movs	r3, #1
 8007384:	e780      	b.n	8007288 <_strtod_l+0x178>
 8007386:	f04f 0c00 	mov.w	ip, #0
 800738a:	1caa      	adds	r2, r5, #2
 800738c:	9219      	str	r2, [sp, #100]	; 0x64
 800738e:	78aa      	ldrb	r2, [r5, #2]
 8007390:	e788      	b.n	80072a4 <_strtod_l+0x194>
 8007392:	f04f 0c01 	mov.w	ip, #1
 8007396:	e7f8      	b.n	800738a <_strtod_l+0x27a>
 8007398:	0800bf50 	.word	0x0800bf50
 800739c:	7ff00000 	.word	0x7ff00000
 80073a0:	0800bf4c 	.word	0x0800bf4c
 80073a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073a6:	1c51      	adds	r1, r2, #1
 80073a8:	9119      	str	r1, [sp, #100]	; 0x64
 80073aa:	7852      	ldrb	r2, [r2, #1]
 80073ac:	2a30      	cmp	r2, #48	; 0x30
 80073ae:	d0f9      	beq.n	80073a4 <_strtod_l+0x294>
 80073b0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80073b4:	2908      	cmp	r1, #8
 80073b6:	f63f af7a 	bhi.w	80072ae <_strtod_l+0x19e>
 80073ba:	3a30      	subs	r2, #48	; 0x30
 80073bc:	9209      	str	r2, [sp, #36]	; 0x24
 80073be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073c0:	920c      	str	r2, [sp, #48]	; 0x30
 80073c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073c4:	1c57      	adds	r7, r2, #1
 80073c6:	9719      	str	r7, [sp, #100]	; 0x64
 80073c8:	7852      	ldrb	r2, [r2, #1]
 80073ca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80073ce:	f1be 0f09 	cmp.w	lr, #9
 80073d2:	d938      	bls.n	8007446 <_strtod_l+0x336>
 80073d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073d6:	1a7f      	subs	r7, r7, r1
 80073d8:	2f08      	cmp	r7, #8
 80073da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80073de:	dc03      	bgt.n	80073e8 <_strtod_l+0x2d8>
 80073e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073e2:	428f      	cmp	r7, r1
 80073e4:	bfa8      	it	ge
 80073e6:	460f      	movge	r7, r1
 80073e8:	f1bc 0f00 	cmp.w	ip, #0
 80073ec:	d000      	beq.n	80073f0 <_strtod_l+0x2e0>
 80073ee:	427f      	negs	r7, r7
 80073f0:	2e00      	cmp	r6, #0
 80073f2:	d14f      	bne.n	8007494 <_strtod_l+0x384>
 80073f4:	9905      	ldr	r1, [sp, #20]
 80073f6:	4301      	orrs	r1, r0
 80073f8:	f47f aec3 	bne.w	8007182 <_strtod_l+0x72>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f47f aedb 	bne.w	80071b8 <_strtod_l+0xa8>
 8007402:	2a69      	cmp	r2, #105	; 0x69
 8007404:	d029      	beq.n	800745a <_strtod_l+0x34a>
 8007406:	dc26      	bgt.n	8007456 <_strtod_l+0x346>
 8007408:	2a49      	cmp	r2, #73	; 0x49
 800740a:	d026      	beq.n	800745a <_strtod_l+0x34a>
 800740c:	2a4e      	cmp	r2, #78	; 0x4e
 800740e:	f47f aed3 	bne.w	80071b8 <_strtod_l+0xa8>
 8007412:	499a      	ldr	r1, [pc, #616]	; (800767c <_strtod_l+0x56c>)
 8007414:	a819      	add	r0, sp, #100	; 0x64
 8007416:	f001 fbed 	bl	8008bf4 <__match>
 800741a:	2800      	cmp	r0, #0
 800741c:	f43f aecc 	beq.w	80071b8 <_strtod_l+0xa8>
 8007420:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b28      	cmp	r3, #40	; 0x28
 8007426:	d12f      	bne.n	8007488 <_strtod_l+0x378>
 8007428:	4995      	ldr	r1, [pc, #596]	; (8007680 <_strtod_l+0x570>)
 800742a:	aa1c      	add	r2, sp, #112	; 0x70
 800742c:	a819      	add	r0, sp, #100	; 0x64
 800742e:	f001 fbf5 	bl	8008c1c <__hexnan>
 8007432:	2805      	cmp	r0, #5
 8007434:	d128      	bne.n	8007488 <_strtod_l+0x378>
 8007436:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007438:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800743c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007440:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007444:	e69d      	b.n	8007182 <_strtod_l+0x72>
 8007446:	210a      	movs	r1, #10
 8007448:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800744a:	fb01 2107 	mla	r1, r1, r7, r2
 800744e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007452:	9209      	str	r2, [sp, #36]	; 0x24
 8007454:	e7b5      	b.n	80073c2 <_strtod_l+0x2b2>
 8007456:	2a6e      	cmp	r2, #110	; 0x6e
 8007458:	e7d9      	b.n	800740e <_strtod_l+0x2fe>
 800745a:	498a      	ldr	r1, [pc, #552]	; (8007684 <_strtod_l+0x574>)
 800745c:	a819      	add	r0, sp, #100	; 0x64
 800745e:	f001 fbc9 	bl	8008bf4 <__match>
 8007462:	2800      	cmp	r0, #0
 8007464:	f43f aea8 	beq.w	80071b8 <_strtod_l+0xa8>
 8007468:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800746a:	4987      	ldr	r1, [pc, #540]	; (8007688 <_strtod_l+0x578>)
 800746c:	3b01      	subs	r3, #1
 800746e:	a819      	add	r0, sp, #100	; 0x64
 8007470:	9319      	str	r3, [sp, #100]	; 0x64
 8007472:	f001 fbbf 	bl	8008bf4 <__match>
 8007476:	b910      	cbnz	r0, 800747e <_strtod_l+0x36e>
 8007478:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800747a:	3301      	adds	r3, #1
 800747c:	9319      	str	r3, [sp, #100]	; 0x64
 800747e:	f04f 0800 	mov.w	r8, #0
 8007482:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800768c <_strtod_l+0x57c>
 8007486:	e67c      	b.n	8007182 <_strtod_l+0x72>
 8007488:	4881      	ldr	r0, [pc, #516]	; (8007690 <_strtod_l+0x580>)
 800748a:	f001 f8d1 	bl	8008630 <nan>
 800748e:	4680      	mov	r8, r0
 8007490:	4689      	mov	r9, r1
 8007492:	e676      	b.n	8007182 <_strtod_l+0x72>
 8007494:	9b08      	ldr	r3, [sp, #32]
 8007496:	f1bb 0f00 	cmp.w	fp, #0
 800749a:	bf08      	it	eq
 800749c:	46b3      	moveq	fp, r6
 800749e:	1afb      	subs	r3, r7, r3
 80074a0:	2e10      	cmp	r6, #16
 80074a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074a4:	4635      	mov	r5, r6
 80074a6:	9309      	str	r3, [sp, #36]	; 0x24
 80074a8:	bfa8      	it	ge
 80074aa:	2510      	movge	r5, #16
 80074ac:	f7f8 ffaa 	bl	8000404 <__aeabi_ui2d>
 80074b0:	2e09      	cmp	r6, #9
 80074b2:	4680      	mov	r8, r0
 80074b4:	4689      	mov	r9, r1
 80074b6:	dd13      	ble.n	80074e0 <_strtod_l+0x3d0>
 80074b8:	4b76      	ldr	r3, [pc, #472]	; (8007694 <_strtod_l+0x584>)
 80074ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80074be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074c2:	f7f9 f819 	bl	80004f8 <__aeabi_dmul>
 80074c6:	4680      	mov	r8, r0
 80074c8:	4650      	mov	r0, sl
 80074ca:	4689      	mov	r9, r1
 80074cc:	f7f8 ff9a 	bl	8000404 <__aeabi_ui2d>
 80074d0:	4602      	mov	r2, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	4640      	mov	r0, r8
 80074d6:	4649      	mov	r1, r9
 80074d8:	f7f8 fe58 	bl	800018c <__adddf3>
 80074dc:	4680      	mov	r8, r0
 80074de:	4689      	mov	r9, r1
 80074e0:	2e0f      	cmp	r6, #15
 80074e2:	dc36      	bgt.n	8007552 <_strtod_l+0x442>
 80074e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f43f ae4b 	beq.w	8007182 <_strtod_l+0x72>
 80074ec:	dd22      	ble.n	8007534 <_strtod_l+0x424>
 80074ee:	2b16      	cmp	r3, #22
 80074f0:	dc09      	bgt.n	8007506 <_strtod_l+0x3f6>
 80074f2:	4968      	ldr	r1, [pc, #416]	; (8007694 <_strtod_l+0x584>)
 80074f4:	4642      	mov	r2, r8
 80074f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074fa:	464b      	mov	r3, r9
 80074fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007500:	f7f8 fffa 	bl	80004f8 <__aeabi_dmul>
 8007504:	e7c3      	b.n	800748e <_strtod_l+0x37e>
 8007506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007508:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800750c:	4293      	cmp	r3, r2
 800750e:	db20      	blt.n	8007552 <_strtod_l+0x442>
 8007510:	4c60      	ldr	r4, [pc, #384]	; (8007694 <_strtod_l+0x584>)
 8007512:	f1c6 060f 	rsb	r6, r6, #15
 8007516:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800751a:	4642      	mov	r2, r8
 800751c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007520:	464b      	mov	r3, r9
 8007522:	f7f8 ffe9 	bl	80004f8 <__aeabi_dmul>
 8007526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007528:	1b9e      	subs	r6, r3, r6
 800752a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800752e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007532:	e7e5      	b.n	8007500 <_strtod_l+0x3f0>
 8007534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007536:	3316      	adds	r3, #22
 8007538:	db0b      	blt.n	8007552 <_strtod_l+0x442>
 800753a:	9b08      	ldr	r3, [sp, #32]
 800753c:	4640      	mov	r0, r8
 800753e:	1bdf      	subs	r7, r3, r7
 8007540:	4b54      	ldr	r3, [pc, #336]	; (8007694 <_strtod_l+0x584>)
 8007542:	4649      	mov	r1, r9
 8007544:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800754c:	f7f9 f8fe 	bl	800074c <__aeabi_ddiv>
 8007550:	e79d      	b.n	800748e <_strtod_l+0x37e>
 8007552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007554:	1b75      	subs	r5, r6, r5
 8007556:	441d      	add	r5, r3
 8007558:	2d00      	cmp	r5, #0
 800755a:	dd70      	ble.n	800763e <_strtod_l+0x52e>
 800755c:	f015 030f 	ands.w	r3, r5, #15
 8007560:	d00a      	beq.n	8007578 <_strtod_l+0x468>
 8007562:	494c      	ldr	r1, [pc, #304]	; (8007694 <_strtod_l+0x584>)
 8007564:	4642      	mov	r2, r8
 8007566:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800756a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800756e:	464b      	mov	r3, r9
 8007570:	f7f8 ffc2 	bl	80004f8 <__aeabi_dmul>
 8007574:	4680      	mov	r8, r0
 8007576:	4689      	mov	r9, r1
 8007578:	f035 050f 	bics.w	r5, r5, #15
 800757c:	d04d      	beq.n	800761a <_strtod_l+0x50a>
 800757e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007582:	dd22      	ble.n	80075ca <_strtod_l+0x4ba>
 8007584:	2600      	movs	r6, #0
 8007586:	46b3      	mov	fp, r6
 8007588:	960b      	str	r6, [sp, #44]	; 0x2c
 800758a:	9608      	str	r6, [sp, #32]
 800758c:	2322      	movs	r3, #34	; 0x22
 800758e:	f04f 0800 	mov.w	r8, #0
 8007592:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800768c <_strtod_l+0x57c>
 8007596:	6023      	str	r3, [r4, #0]
 8007598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800759a:	2b00      	cmp	r3, #0
 800759c:	f43f adf1 	beq.w	8007182 <_strtod_l+0x72>
 80075a0:	4620      	mov	r0, r4
 80075a2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80075a4:	f7ff f934 	bl	8006810 <_Bfree>
 80075a8:	4620      	mov	r0, r4
 80075aa:	9908      	ldr	r1, [sp, #32]
 80075ac:	f7ff f930 	bl	8006810 <_Bfree>
 80075b0:	4659      	mov	r1, fp
 80075b2:	4620      	mov	r0, r4
 80075b4:	f7ff f92c 	bl	8006810 <_Bfree>
 80075b8:	4620      	mov	r0, r4
 80075ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075bc:	f7ff f928 	bl	8006810 <_Bfree>
 80075c0:	4631      	mov	r1, r6
 80075c2:	4620      	mov	r0, r4
 80075c4:	f7ff f924 	bl	8006810 <_Bfree>
 80075c8:	e5db      	b.n	8007182 <_strtod_l+0x72>
 80075ca:	4b33      	ldr	r3, [pc, #204]	; (8007698 <_strtod_l+0x588>)
 80075cc:	4640      	mov	r0, r8
 80075ce:	9305      	str	r3, [sp, #20]
 80075d0:	2300      	movs	r3, #0
 80075d2:	4649      	mov	r1, r9
 80075d4:	469a      	mov	sl, r3
 80075d6:	112d      	asrs	r5, r5, #4
 80075d8:	2d01      	cmp	r5, #1
 80075da:	dc21      	bgt.n	8007620 <_strtod_l+0x510>
 80075dc:	b10b      	cbz	r3, 80075e2 <_strtod_l+0x4d2>
 80075de:	4680      	mov	r8, r0
 80075e0:	4689      	mov	r9, r1
 80075e2:	492d      	ldr	r1, [pc, #180]	; (8007698 <_strtod_l+0x588>)
 80075e4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80075e8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80075ec:	4642      	mov	r2, r8
 80075ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075f2:	464b      	mov	r3, r9
 80075f4:	f7f8 ff80 	bl	80004f8 <__aeabi_dmul>
 80075f8:	4b24      	ldr	r3, [pc, #144]	; (800768c <_strtod_l+0x57c>)
 80075fa:	460a      	mov	r2, r1
 80075fc:	400b      	ands	r3, r1
 80075fe:	4927      	ldr	r1, [pc, #156]	; (800769c <_strtod_l+0x58c>)
 8007600:	4680      	mov	r8, r0
 8007602:	428b      	cmp	r3, r1
 8007604:	d8be      	bhi.n	8007584 <_strtod_l+0x474>
 8007606:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800760a:	428b      	cmp	r3, r1
 800760c:	bf86      	itte	hi
 800760e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007612:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80076a0 <_strtod_l+0x590>
 8007616:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800761a:	2300      	movs	r3, #0
 800761c:	9305      	str	r3, [sp, #20]
 800761e:	e07b      	b.n	8007718 <_strtod_l+0x608>
 8007620:	07ea      	lsls	r2, r5, #31
 8007622:	d505      	bpl.n	8007630 <_strtod_l+0x520>
 8007624:	9b05      	ldr	r3, [sp, #20]
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	f7f8 ff65 	bl	80004f8 <__aeabi_dmul>
 800762e:	2301      	movs	r3, #1
 8007630:	9a05      	ldr	r2, [sp, #20]
 8007632:	f10a 0a01 	add.w	sl, sl, #1
 8007636:	3208      	adds	r2, #8
 8007638:	106d      	asrs	r5, r5, #1
 800763a:	9205      	str	r2, [sp, #20]
 800763c:	e7cc      	b.n	80075d8 <_strtod_l+0x4c8>
 800763e:	d0ec      	beq.n	800761a <_strtod_l+0x50a>
 8007640:	426d      	negs	r5, r5
 8007642:	f015 020f 	ands.w	r2, r5, #15
 8007646:	d00a      	beq.n	800765e <_strtod_l+0x54e>
 8007648:	4b12      	ldr	r3, [pc, #72]	; (8007694 <_strtod_l+0x584>)
 800764a:	4640      	mov	r0, r8
 800764c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007650:	4649      	mov	r1, r9
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	f7f9 f879 	bl	800074c <__aeabi_ddiv>
 800765a:	4680      	mov	r8, r0
 800765c:	4689      	mov	r9, r1
 800765e:	112d      	asrs	r5, r5, #4
 8007660:	d0db      	beq.n	800761a <_strtod_l+0x50a>
 8007662:	2d1f      	cmp	r5, #31
 8007664:	dd1e      	ble.n	80076a4 <_strtod_l+0x594>
 8007666:	2600      	movs	r6, #0
 8007668:	46b3      	mov	fp, r6
 800766a:	960b      	str	r6, [sp, #44]	; 0x2c
 800766c:	9608      	str	r6, [sp, #32]
 800766e:	2322      	movs	r3, #34	; 0x22
 8007670:	f04f 0800 	mov.w	r8, #0
 8007674:	f04f 0900 	mov.w	r9, #0
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	e78d      	b.n	8007598 <_strtod_l+0x488>
 800767c:	0800bd39 	.word	0x0800bd39
 8007680:	0800bf64 	.word	0x0800bf64
 8007684:	0800bd31 	.word	0x0800bd31
 8007688:	0800bd68 	.word	0x0800bd68
 800768c:	7ff00000 	.word	0x7ff00000
 8007690:	0800c0f5 	.word	0x0800c0f5
 8007694:	0800be78 	.word	0x0800be78
 8007698:	0800be50 	.word	0x0800be50
 800769c:	7ca00000 	.word	0x7ca00000
 80076a0:	7fefffff 	.word	0x7fefffff
 80076a4:	f015 0310 	ands.w	r3, r5, #16
 80076a8:	bf18      	it	ne
 80076aa:	236a      	movne	r3, #106	; 0x6a
 80076ac:	4640      	mov	r0, r8
 80076ae:	9305      	str	r3, [sp, #20]
 80076b0:	4649      	mov	r1, r9
 80076b2:	2300      	movs	r3, #0
 80076b4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007980 <_strtod_l+0x870>
 80076b8:	07ea      	lsls	r2, r5, #31
 80076ba:	d504      	bpl.n	80076c6 <_strtod_l+0x5b6>
 80076bc:	e9da 2300 	ldrd	r2, r3, [sl]
 80076c0:	f7f8 ff1a 	bl	80004f8 <__aeabi_dmul>
 80076c4:	2301      	movs	r3, #1
 80076c6:	106d      	asrs	r5, r5, #1
 80076c8:	f10a 0a08 	add.w	sl, sl, #8
 80076cc:	d1f4      	bne.n	80076b8 <_strtod_l+0x5a8>
 80076ce:	b10b      	cbz	r3, 80076d4 <_strtod_l+0x5c4>
 80076d0:	4680      	mov	r8, r0
 80076d2:	4689      	mov	r9, r1
 80076d4:	9b05      	ldr	r3, [sp, #20]
 80076d6:	b1bb      	cbz	r3, 8007708 <_strtod_l+0x5f8>
 80076d8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80076dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	4649      	mov	r1, r9
 80076e4:	dd10      	ble.n	8007708 <_strtod_l+0x5f8>
 80076e6:	2b1f      	cmp	r3, #31
 80076e8:	f340 8128 	ble.w	800793c <_strtod_l+0x82c>
 80076ec:	2b34      	cmp	r3, #52	; 0x34
 80076ee:	bfd8      	it	le
 80076f0:	f04f 33ff 	movle.w	r3, #4294967295
 80076f4:	f04f 0800 	mov.w	r8, #0
 80076f8:	bfcf      	iteee	gt
 80076fa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80076fe:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007702:	4093      	lslle	r3, r2
 8007704:	ea03 0901 	andle.w	r9, r3, r1
 8007708:	2200      	movs	r2, #0
 800770a:	2300      	movs	r3, #0
 800770c:	4640      	mov	r0, r8
 800770e:	4649      	mov	r1, r9
 8007710:	f7f9 f95a 	bl	80009c8 <__aeabi_dcmpeq>
 8007714:	2800      	cmp	r0, #0
 8007716:	d1a6      	bne.n	8007666 <_strtod_l+0x556>
 8007718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800771a:	465a      	mov	r2, fp
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	4620      	mov	r0, r4
 8007720:	4633      	mov	r3, r6
 8007722:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007724:	f7ff f8dc 	bl	80068e0 <__s2b>
 8007728:	900b      	str	r0, [sp, #44]	; 0x2c
 800772a:	2800      	cmp	r0, #0
 800772c:	f43f af2a 	beq.w	8007584 <_strtod_l+0x474>
 8007730:	2600      	movs	r6, #0
 8007732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007734:	9b08      	ldr	r3, [sp, #32]
 8007736:	2a00      	cmp	r2, #0
 8007738:	eba3 0307 	sub.w	r3, r3, r7
 800773c:	bfa8      	it	ge
 800773e:	2300      	movge	r3, #0
 8007740:	46b3      	mov	fp, r6
 8007742:	9312      	str	r3, [sp, #72]	; 0x48
 8007744:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007748:	9316      	str	r3, [sp, #88]	; 0x58
 800774a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800774c:	4620      	mov	r0, r4
 800774e:	6859      	ldr	r1, [r3, #4]
 8007750:	f7ff f81e 	bl	8006790 <_Balloc>
 8007754:	9008      	str	r0, [sp, #32]
 8007756:	2800      	cmp	r0, #0
 8007758:	f43f af18 	beq.w	800758c <_strtod_l+0x47c>
 800775c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800775e:	300c      	adds	r0, #12
 8007760:	691a      	ldr	r2, [r3, #16]
 8007762:	f103 010c 	add.w	r1, r3, #12
 8007766:	3202      	adds	r2, #2
 8007768:	0092      	lsls	r2, r2, #2
 800776a:	f7fe f892 	bl	8005892 <memcpy>
 800776e:	ab1c      	add	r3, sp, #112	; 0x70
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	ab1b      	add	r3, sp, #108	; 0x6c
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	4642      	mov	r2, r8
 8007778:	464b      	mov	r3, r9
 800777a:	4620      	mov	r0, r4
 800777c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007780:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007784:	f7ff fbd8 	bl	8006f38 <__d2b>
 8007788:	901a      	str	r0, [sp, #104]	; 0x68
 800778a:	2800      	cmp	r0, #0
 800778c:	f43f aefe 	beq.w	800758c <_strtod_l+0x47c>
 8007790:	2101      	movs	r1, #1
 8007792:	4620      	mov	r0, r4
 8007794:	f7ff f93c 	bl	8006a10 <__i2b>
 8007798:	4683      	mov	fp, r0
 800779a:	2800      	cmp	r0, #0
 800779c:	f43f aef6 	beq.w	800758c <_strtod_l+0x47c>
 80077a0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80077a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80077a4:	2f00      	cmp	r7, #0
 80077a6:	bfab      	itete	ge
 80077a8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80077aa:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80077ac:	eb07 0a03 	addge.w	sl, r7, r3
 80077b0:	1bdd      	sublt	r5, r3, r7
 80077b2:	9b05      	ldr	r3, [sp, #20]
 80077b4:	bfa8      	it	ge
 80077b6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80077b8:	eba7 0703 	sub.w	r7, r7, r3
 80077bc:	4417      	add	r7, r2
 80077be:	4b71      	ldr	r3, [pc, #452]	; (8007984 <_strtod_l+0x874>)
 80077c0:	f107 37ff 	add.w	r7, r7, #4294967295
 80077c4:	bfb8      	it	lt
 80077c6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80077ca:	429f      	cmp	r7, r3
 80077cc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80077d0:	f280 80c7 	bge.w	8007962 <_strtod_l+0x852>
 80077d4:	1bdb      	subs	r3, r3, r7
 80077d6:	2b1f      	cmp	r3, #31
 80077d8:	f04f 0101 	mov.w	r1, #1
 80077dc:	eba2 0203 	sub.w	r2, r2, r3
 80077e0:	f300 80b3 	bgt.w	800794a <_strtod_l+0x83a>
 80077e4:	fa01 f303 	lsl.w	r3, r1, r3
 80077e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80077ea:	2300      	movs	r3, #0
 80077ec:	9310      	str	r3, [sp, #64]	; 0x40
 80077ee:	eb0a 0702 	add.w	r7, sl, r2
 80077f2:	9b05      	ldr	r3, [sp, #20]
 80077f4:	45ba      	cmp	sl, r7
 80077f6:	4415      	add	r5, r2
 80077f8:	441d      	add	r5, r3
 80077fa:	4653      	mov	r3, sl
 80077fc:	bfa8      	it	ge
 80077fe:	463b      	movge	r3, r7
 8007800:	42ab      	cmp	r3, r5
 8007802:	bfa8      	it	ge
 8007804:	462b      	movge	r3, r5
 8007806:	2b00      	cmp	r3, #0
 8007808:	bfc2      	ittt	gt
 800780a:	1aff      	subgt	r7, r7, r3
 800780c:	1aed      	subgt	r5, r5, r3
 800780e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007812:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007814:	2b00      	cmp	r3, #0
 8007816:	dd17      	ble.n	8007848 <_strtod_l+0x738>
 8007818:	4659      	mov	r1, fp
 800781a:	461a      	mov	r2, r3
 800781c:	4620      	mov	r0, r4
 800781e:	f7ff f9b5 	bl	8006b8c <__pow5mult>
 8007822:	4683      	mov	fp, r0
 8007824:	2800      	cmp	r0, #0
 8007826:	f43f aeb1 	beq.w	800758c <_strtod_l+0x47c>
 800782a:	4601      	mov	r1, r0
 800782c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800782e:	4620      	mov	r0, r4
 8007830:	f7ff f904 	bl	8006a3c <__multiply>
 8007834:	900a      	str	r0, [sp, #40]	; 0x28
 8007836:	2800      	cmp	r0, #0
 8007838:	f43f aea8 	beq.w	800758c <_strtod_l+0x47c>
 800783c:	4620      	mov	r0, r4
 800783e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007840:	f7fe ffe6 	bl	8006810 <_Bfree>
 8007844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007846:	931a      	str	r3, [sp, #104]	; 0x68
 8007848:	2f00      	cmp	r7, #0
 800784a:	f300 808f 	bgt.w	800796c <_strtod_l+0x85c>
 800784e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007850:	2b00      	cmp	r3, #0
 8007852:	dd08      	ble.n	8007866 <_strtod_l+0x756>
 8007854:	4620      	mov	r0, r4
 8007856:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007858:	9908      	ldr	r1, [sp, #32]
 800785a:	f7ff f997 	bl	8006b8c <__pow5mult>
 800785e:	9008      	str	r0, [sp, #32]
 8007860:	2800      	cmp	r0, #0
 8007862:	f43f ae93 	beq.w	800758c <_strtod_l+0x47c>
 8007866:	2d00      	cmp	r5, #0
 8007868:	dd08      	ble.n	800787c <_strtod_l+0x76c>
 800786a:	462a      	mov	r2, r5
 800786c:	4620      	mov	r0, r4
 800786e:	9908      	ldr	r1, [sp, #32]
 8007870:	f7ff f9e6 	bl	8006c40 <__lshift>
 8007874:	9008      	str	r0, [sp, #32]
 8007876:	2800      	cmp	r0, #0
 8007878:	f43f ae88 	beq.w	800758c <_strtod_l+0x47c>
 800787c:	f1ba 0f00 	cmp.w	sl, #0
 8007880:	dd08      	ble.n	8007894 <_strtod_l+0x784>
 8007882:	4659      	mov	r1, fp
 8007884:	4652      	mov	r2, sl
 8007886:	4620      	mov	r0, r4
 8007888:	f7ff f9da 	bl	8006c40 <__lshift>
 800788c:	4683      	mov	fp, r0
 800788e:	2800      	cmp	r0, #0
 8007890:	f43f ae7c 	beq.w	800758c <_strtod_l+0x47c>
 8007894:	4620      	mov	r0, r4
 8007896:	9a08      	ldr	r2, [sp, #32]
 8007898:	991a      	ldr	r1, [sp, #104]	; 0x68
 800789a:	f7ff fa59 	bl	8006d50 <__mdiff>
 800789e:	4606      	mov	r6, r0
 80078a0:	2800      	cmp	r0, #0
 80078a2:	f43f ae73 	beq.w	800758c <_strtod_l+0x47c>
 80078a6:	2500      	movs	r5, #0
 80078a8:	68c3      	ldr	r3, [r0, #12]
 80078aa:	4659      	mov	r1, fp
 80078ac:	60c5      	str	r5, [r0, #12]
 80078ae:	930a      	str	r3, [sp, #40]	; 0x28
 80078b0:	f7ff fa32 	bl	8006d18 <__mcmp>
 80078b4:	42a8      	cmp	r0, r5
 80078b6:	da6b      	bge.n	8007990 <_strtod_l+0x880>
 80078b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ba:	ea53 0308 	orrs.w	r3, r3, r8
 80078be:	f040 808f 	bne.w	80079e0 <_strtod_l+0x8d0>
 80078c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f040 808a 	bne.w	80079e0 <_strtod_l+0x8d0>
 80078cc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078d0:	0d1b      	lsrs	r3, r3, #20
 80078d2:	051b      	lsls	r3, r3, #20
 80078d4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80078d8:	f240 8082 	bls.w	80079e0 <_strtod_l+0x8d0>
 80078dc:	6973      	ldr	r3, [r6, #20]
 80078de:	b913      	cbnz	r3, 80078e6 <_strtod_l+0x7d6>
 80078e0:	6933      	ldr	r3, [r6, #16]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	dd7c      	ble.n	80079e0 <_strtod_l+0x8d0>
 80078e6:	4631      	mov	r1, r6
 80078e8:	2201      	movs	r2, #1
 80078ea:	4620      	mov	r0, r4
 80078ec:	f7ff f9a8 	bl	8006c40 <__lshift>
 80078f0:	4659      	mov	r1, fp
 80078f2:	4606      	mov	r6, r0
 80078f4:	f7ff fa10 	bl	8006d18 <__mcmp>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	dd71      	ble.n	80079e0 <_strtod_l+0x8d0>
 80078fc:	9905      	ldr	r1, [sp, #20]
 80078fe:	464b      	mov	r3, r9
 8007900:	4a21      	ldr	r2, [pc, #132]	; (8007988 <_strtod_l+0x878>)
 8007902:	2900      	cmp	r1, #0
 8007904:	f000 808d 	beq.w	8007a22 <_strtod_l+0x912>
 8007908:	ea02 0109 	and.w	r1, r2, r9
 800790c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007910:	f300 8087 	bgt.w	8007a22 <_strtod_l+0x912>
 8007914:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007918:	f77f aea9 	ble.w	800766e <_strtod_l+0x55e>
 800791c:	4640      	mov	r0, r8
 800791e:	4649      	mov	r1, r9
 8007920:	4b1a      	ldr	r3, [pc, #104]	; (800798c <_strtod_l+0x87c>)
 8007922:	2200      	movs	r2, #0
 8007924:	f7f8 fde8 	bl	80004f8 <__aeabi_dmul>
 8007928:	4b17      	ldr	r3, [pc, #92]	; (8007988 <_strtod_l+0x878>)
 800792a:	4680      	mov	r8, r0
 800792c:	400b      	ands	r3, r1
 800792e:	4689      	mov	r9, r1
 8007930:	2b00      	cmp	r3, #0
 8007932:	f47f ae35 	bne.w	80075a0 <_strtod_l+0x490>
 8007936:	2322      	movs	r3, #34	; 0x22
 8007938:	6023      	str	r3, [r4, #0]
 800793a:	e631      	b.n	80075a0 <_strtod_l+0x490>
 800793c:	f04f 32ff 	mov.w	r2, #4294967295
 8007940:	fa02 f303 	lsl.w	r3, r2, r3
 8007944:	ea03 0808 	and.w	r8, r3, r8
 8007948:	e6de      	b.n	8007708 <_strtod_l+0x5f8>
 800794a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800794e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007952:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007956:	37e2      	adds	r7, #226	; 0xe2
 8007958:	fa01 f307 	lsl.w	r3, r1, r7
 800795c:	9310      	str	r3, [sp, #64]	; 0x40
 800795e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007960:	e745      	b.n	80077ee <_strtod_l+0x6de>
 8007962:	2300      	movs	r3, #0
 8007964:	9310      	str	r3, [sp, #64]	; 0x40
 8007966:	2301      	movs	r3, #1
 8007968:	9313      	str	r3, [sp, #76]	; 0x4c
 800796a:	e740      	b.n	80077ee <_strtod_l+0x6de>
 800796c:	463a      	mov	r2, r7
 800796e:	4620      	mov	r0, r4
 8007970:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007972:	f7ff f965 	bl	8006c40 <__lshift>
 8007976:	901a      	str	r0, [sp, #104]	; 0x68
 8007978:	2800      	cmp	r0, #0
 800797a:	f47f af68 	bne.w	800784e <_strtod_l+0x73e>
 800797e:	e605      	b.n	800758c <_strtod_l+0x47c>
 8007980:	0800bf78 	.word	0x0800bf78
 8007984:	fffffc02 	.word	0xfffffc02
 8007988:	7ff00000 	.word	0x7ff00000
 800798c:	39500000 	.word	0x39500000
 8007990:	46ca      	mov	sl, r9
 8007992:	d165      	bne.n	8007a60 <_strtod_l+0x950>
 8007994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007996:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800799a:	b352      	cbz	r2, 80079f2 <_strtod_l+0x8e2>
 800799c:	4a9e      	ldr	r2, [pc, #632]	; (8007c18 <_strtod_l+0xb08>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d12a      	bne.n	80079f8 <_strtod_l+0x8e8>
 80079a2:	9b05      	ldr	r3, [sp, #20]
 80079a4:	4641      	mov	r1, r8
 80079a6:	b1fb      	cbz	r3, 80079e8 <_strtod_l+0x8d8>
 80079a8:	4b9c      	ldr	r3, [pc, #624]	; (8007c1c <_strtod_l+0xb0c>)
 80079aa:	f04f 32ff 	mov.w	r2, #4294967295
 80079ae:	ea09 0303 	and.w	r3, r9, r3
 80079b2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079b6:	d81a      	bhi.n	80079ee <_strtod_l+0x8de>
 80079b8:	0d1b      	lsrs	r3, r3, #20
 80079ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079be:	fa02 f303 	lsl.w	r3, r2, r3
 80079c2:	4299      	cmp	r1, r3
 80079c4:	d118      	bne.n	80079f8 <_strtod_l+0x8e8>
 80079c6:	4b96      	ldr	r3, [pc, #600]	; (8007c20 <_strtod_l+0xb10>)
 80079c8:	459a      	cmp	sl, r3
 80079ca:	d102      	bne.n	80079d2 <_strtod_l+0x8c2>
 80079cc:	3101      	adds	r1, #1
 80079ce:	f43f addd 	beq.w	800758c <_strtod_l+0x47c>
 80079d2:	f04f 0800 	mov.w	r8, #0
 80079d6:	4b91      	ldr	r3, [pc, #580]	; (8007c1c <_strtod_l+0xb0c>)
 80079d8:	ea0a 0303 	and.w	r3, sl, r3
 80079dc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80079e0:	9b05      	ldr	r3, [sp, #20]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d19a      	bne.n	800791c <_strtod_l+0x80c>
 80079e6:	e5db      	b.n	80075a0 <_strtod_l+0x490>
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ec:	e7e9      	b.n	80079c2 <_strtod_l+0x8b2>
 80079ee:	4613      	mov	r3, r2
 80079f0:	e7e7      	b.n	80079c2 <_strtod_l+0x8b2>
 80079f2:	ea53 0308 	orrs.w	r3, r3, r8
 80079f6:	d081      	beq.n	80078fc <_strtod_l+0x7ec>
 80079f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079fa:	b1e3      	cbz	r3, 8007a36 <_strtod_l+0x926>
 80079fc:	ea13 0f0a 	tst.w	r3, sl
 8007a00:	d0ee      	beq.n	80079e0 <_strtod_l+0x8d0>
 8007a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a04:	4640      	mov	r0, r8
 8007a06:	4649      	mov	r1, r9
 8007a08:	9a05      	ldr	r2, [sp, #20]
 8007a0a:	b1c3      	cbz	r3, 8007a3e <_strtod_l+0x92e>
 8007a0c:	f7ff fb5c 	bl	80070c8 <sulp>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a18:	f7f8 fbb8 	bl	800018c <__adddf3>
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	4689      	mov	r9, r1
 8007a20:	e7de      	b.n	80079e0 <_strtod_l+0x8d0>
 8007a22:	4013      	ands	r3, r2
 8007a24:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a28:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007a2c:	f04f 38ff 	mov.w	r8, #4294967295
 8007a30:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007a34:	e7d4      	b.n	80079e0 <_strtod_l+0x8d0>
 8007a36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a38:	ea13 0f08 	tst.w	r3, r8
 8007a3c:	e7e0      	b.n	8007a00 <_strtod_l+0x8f0>
 8007a3e:	f7ff fb43 	bl	80070c8 <sulp>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a4a:	f7f8 fb9d 	bl	8000188 <__aeabi_dsub>
 8007a4e:	2200      	movs	r2, #0
 8007a50:	2300      	movs	r3, #0
 8007a52:	4680      	mov	r8, r0
 8007a54:	4689      	mov	r9, r1
 8007a56:	f7f8 ffb7 	bl	80009c8 <__aeabi_dcmpeq>
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d0c0      	beq.n	80079e0 <_strtod_l+0x8d0>
 8007a5e:	e606      	b.n	800766e <_strtod_l+0x55e>
 8007a60:	4659      	mov	r1, fp
 8007a62:	4630      	mov	r0, r6
 8007a64:	f7ff fabe 	bl	8006fe4 <__ratio>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a70:	2200      	movs	r2, #0
 8007a72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a76:	f7f8 ffbb 	bl	80009f0 <__aeabi_dcmple>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d06f      	beq.n	8007b5e <_strtod_l+0xa4e>
 8007a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d17c      	bne.n	8007b7e <_strtod_l+0xa6e>
 8007a84:	f1b8 0f00 	cmp.w	r8, #0
 8007a88:	d159      	bne.n	8007b3e <_strtod_l+0xa2e>
 8007a8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d17b      	bne.n	8007b8a <_strtod_l+0xa7a>
 8007a92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a96:	2200      	movs	r2, #0
 8007a98:	4b62      	ldr	r3, [pc, #392]	; (8007c24 <_strtod_l+0xb14>)
 8007a9a:	f7f8 ff9f 	bl	80009dc <__aeabi_dcmplt>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d15a      	bne.n	8007b58 <_strtod_l+0xa48>
 8007aa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	4b5f      	ldr	r3, [pc, #380]	; (8007c28 <_strtod_l+0xb18>)
 8007aaa:	f7f8 fd25 	bl	80004f8 <__aeabi_dmul>
 8007aae:	4605      	mov	r5, r0
 8007ab0:	460f      	mov	r7, r1
 8007ab2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007ab6:	9506      	str	r5, [sp, #24]
 8007ab8:	9307      	str	r3, [sp, #28]
 8007aba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007abe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007ac2:	4b56      	ldr	r3, [pc, #344]	; (8007c1c <_strtod_l+0xb0c>)
 8007ac4:	4a55      	ldr	r2, [pc, #340]	; (8007c1c <_strtod_l+0xb0c>)
 8007ac6:	ea0a 0303 	and.w	r3, sl, r3
 8007aca:	9313      	str	r3, [sp, #76]	; 0x4c
 8007acc:	4b57      	ldr	r3, [pc, #348]	; (8007c2c <_strtod_l+0xb1c>)
 8007ace:	ea0a 0202 	and.w	r2, sl, r2
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	f040 80b0 	bne.w	8007c38 <_strtod_l+0xb28>
 8007ad8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007adc:	4640      	mov	r0, r8
 8007ade:	4649      	mov	r1, r9
 8007ae0:	f7ff f9c2 	bl	8006e68 <__ulp>
 8007ae4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ae8:	f7f8 fd06 	bl	80004f8 <__aeabi_dmul>
 8007aec:	4642      	mov	r2, r8
 8007aee:	464b      	mov	r3, r9
 8007af0:	f7f8 fb4c 	bl	800018c <__adddf3>
 8007af4:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007c1c <_strtod_l+0xb0c>
 8007af8:	4a4d      	ldr	r2, [pc, #308]	; (8007c30 <_strtod_l+0xb20>)
 8007afa:	ea01 0a0a 	and.w	sl, r1, sl
 8007afe:	4592      	cmp	sl, r2
 8007b00:	4680      	mov	r8, r0
 8007b02:	d948      	bls.n	8007b96 <_strtod_l+0xa86>
 8007b04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b06:	4b46      	ldr	r3, [pc, #280]	; (8007c20 <_strtod_l+0xb10>)
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d103      	bne.n	8007b14 <_strtod_l+0xa04>
 8007b0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b0e:	3301      	adds	r3, #1
 8007b10:	f43f ad3c 	beq.w	800758c <_strtod_l+0x47c>
 8007b14:	f04f 38ff 	mov.w	r8, #4294967295
 8007b18:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007c20 <_strtod_l+0xb10>
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b20:	f7fe fe76 	bl	8006810 <_Bfree>
 8007b24:	4620      	mov	r0, r4
 8007b26:	9908      	ldr	r1, [sp, #32]
 8007b28:	f7fe fe72 	bl	8006810 <_Bfree>
 8007b2c:	4659      	mov	r1, fp
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f7fe fe6e 	bl	8006810 <_Bfree>
 8007b34:	4631      	mov	r1, r6
 8007b36:	4620      	mov	r0, r4
 8007b38:	f7fe fe6a 	bl	8006810 <_Bfree>
 8007b3c:	e605      	b.n	800774a <_strtod_l+0x63a>
 8007b3e:	f1b8 0f01 	cmp.w	r8, #1
 8007b42:	d103      	bne.n	8007b4c <_strtod_l+0xa3c>
 8007b44:	f1b9 0f00 	cmp.w	r9, #0
 8007b48:	f43f ad91 	beq.w	800766e <_strtod_l+0x55e>
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	4b39      	ldr	r3, [pc, #228]	; (8007c34 <_strtod_l+0xb24>)
 8007b50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007b52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b56:	e016      	b.n	8007b86 <_strtod_l+0xa76>
 8007b58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007b5a:	4f33      	ldr	r7, [pc, #204]	; (8007c28 <_strtod_l+0xb18>)
 8007b5c:	e7a9      	b.n	8007ab2 <_strtod_l+0x9a2>
 8007b5e:	4b32      	ldr	r3, [pc, #200]	; (8007c28 <_strtod_l+0xb18>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b66:	f7f8 fcc7 	bl	80004f8 <__aeabi_dmul>
 8007b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	460f      	mov	r7, r1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d09e      	beq.n	8007ab2 <_strtod_l+0x9a2>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b7c:	e79d      	b.n	8007aba <_strtod_l+0x9aa>
 8007b7e:	2200      	movs	r2, #0
 8007b80:	4b28      	ldr	r3, [pc, #160]	; (8007c24 <_strtod_l+0xb14>)
 8007b82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b86:	4f27      	ldr	r7, [pc, #156]	; (8007c24 <_strtod_l+0xb14>)
 8007b88:	e797      	b.n	8007aba <_strtod_l+0x9aa>
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	4b29      	ldr	r3, [pc, #164]	; (8007c34 <_strtod_l+0xb24>)
 8007b8e:	4645      	mov	r5, r8
 8007b90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b94:	e7f7      	b.n	8007b86 <_strtod_l+0xa76>
 8007b96:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007b9a:	9b05      	ldr	r3, [sp, #20]
 8007b9c:	46ca      	mov	sl, r9
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1bc      	bne.n	8007b1c <_strtod_l+0xa0c>
 8007ba2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ba6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ba8:	0d1b      	lsrs	r3, r3, #20
 8007baa:	051b      	lsls	r3, r3, #20
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d1b5      	bne.n	8007b1c <_strtod_l+0xa0c>
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	f7f9 fa46 	bl	8001044 <__aeabi_d2lz>
 8007bb8:	f7f8 fc70 	bl	800049c <__aeabi_l2d>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	f7f8 fae0 	bl	8000188 <__aeabi_dsub>
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4602      	mov	r2, r0
 8007bcc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007bd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd6:	ea4a 0a08 	orr.w	sl, sl, r8
 8007bda:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007bde:	d06c      	beq.n	8007cba <_strtod_l+0xbaa>
 8007be0:	a309      	add	r3, pc, #36	; (adr r3, 8007c08 <_strtod_l+0xaf8>)
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	f7f8 fef9 	bl	80009dc <__aeabi_dcmplt>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	f47f acd8 	bne.w	80075a0 <_strtod_l+0x490>
 8007bf0:	a307      	add	r3, pc, #28	; (adr r3, 8007c10 <_strtod_l+0xb00>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bfa:	f7f8 ff0d 	bl	8000a18 <__aeabi_dcmpgt>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d08c      	beq.n	8007b1c <_strtod_l+0xa0c>
 8007c02:	e4cd      	b.n	80075a0 <_strtod_l+0x490>
 8007c04:	f3af 8000 	nop.w
 8007c08:	94a03595 	.word	0x94a03595
 8007c0c:	3fdfffff 	.word	0x3fdfffff
 8007c10:	35afe535 	.word	0x35afe535
 8007c14:	3fe00000 	.word	0x3fe00000
 8007c18:	000fffff 	.word	0x000fffff
 8007c1c:	7ff00000 	.word	0x7ff00000
 8007c20:	7fefffff 	.word	0x7fefffff
 8007c24:	3ff00000 	.word	0x3ff00000
 8007c28:	3fe00000 	.word	0x3fe00000
 8007c2c:	7fe00000 	.word	0x7fe00000
 8007c30:	7c9fffff 	.word	0x7c9fffff
 8007c34:	bff00000 	.word	0xbff00000
 8007c38:	9b05      	ldr	r3, [sp, #20]
 8007c3a:	b333      	cbz	r3, 8007c8a <_strtod_l+0xb7a>
 8007c3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c42:	d822      	bhi.n	8007c8a <_strtod_l+0xb7a>
 8007c44:	a328      	add	r3, pc, #160	; (adr r3, 8007ce8 <_strtod_l+0xbd8>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	4639      	mov	r1, r7
 8007c4e:	f7f8 fecf 	bl	80009f0 <__aeabi_dcmple>
 8007c52:	b1a0      	cbz	r0, 8007c7e <_strtod_l+0xb6e>
 8007c54:	4639      	mov	r1, r7
 8007c56:	4628      	mov	r0, r5
 8007c58:	f7f8 ff26 	bl	8000aa8 <__aeabi_d2uiz>
 8007c5c:	2801      	cmp	r0, #1
 8007c5e:	bf38      	it	cc
 8007c60:	2001      	movcc	r0, #1
 8007c62:	f7f8 fbcf 	bl	8000404 <__aeabi_ui2d>
 8007c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c68:	4605      	mov	r5, r0
 8007c6a:	460f      	mov	r7, r1
 8007c6c:	bb03      	cbnz	r3, 8007cb0 <_strtod_l+0xba0>
 8007c6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c72:	9014      	str	r0, [sp, #80]	; 0x50
 8007c74:	9315      	str	r3, [sp, #84]	; 0x54
 8007c76:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007c7a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007c7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c82:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c86:	1a9b      	subs	r3, r3, r2
 8007c88:	9311      	str	r3, [sp, #68]	; 0x44
 8007c8a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c8e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007c92:	f7ff f8e9 	bl	8006e68 <__ulp>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	f7f8 fc2b 	bl	80004f8 <__aeabi_dmul>
 8007ca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ca6:	f7f8 fa71 	bl	800018c <__adddf3>
 8007caa:	4680      	mov	r8, r0
 8007cac:	4689      	mov	r9, r1
 8007cae:	e774      	b.n	8007b9a <_strtod_l+0xa8a>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007cb8:	e7dd      	b.n	8007c76 <_strtod_l+0xb66>
 8007cba:	a30d      	add	r3, pc, #52	; (adr r3, 8007cf0 <_strtod_l+0xbe0>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fe8c 	bl	80009dc <__aeabi_dcmplt>
 8007cc4:	e79b      	b.n	8007bfe <_strtod_l+0xaee>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	930e      	str	r3, [sp, #56]	; 0x38
 8007cca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ccc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cce:	6013      	str	r3, [r2, #0]
 8007cd0:	f7ff ba5b 	b.w	800718a <_strtod_l+0x7a>
 8007cd4:	2a65      	cmp	r2, #101	; 0x65
 8007cd6:	f43f ab52 	beq.w	800737e <_strtod_l+0x26e>
 8007cda:	2a45      	cmp	r2, #69	; 0x45
 8007cdc:	f43f ab4f 	beq.w	800737e <_strtod_l+0x26e>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f7ff bb87 	b.w	80073f4 <_strtod_l+0x2e4>
 8007ce6:	bf00      	nop
 8007ce8:	ffc00000 	.word	0xffc00000
 8007cec:	41dfffff 	.word	0x41dfffff
 8007cf0:	94a03595 	.word	0x94a03595
 8007cf4:	3fcfffff 	.word	0x3fcfffff

08007cf8 <_strtod_r>:
 8007cf8:	4b01      	ldr	r3, [pc, #4]	; (8007d00 <_strtod_r+0x8>)
 8007cfa:	f7ff ba09 	b.w	8007110 <_strtod_l>
 8007cfe:	bf00      	nop
 8007d00:	20000084 	.word	0x20000084

08007d04 <_strtol_l.constprop.0>:
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d0a:	4686      	mov	lr, r0
 8007d0c:	4690      	mov	r8, r2
 8007d0e:	d001      	beq.n	8007d14 <_strtol_l.constprop.0+0x10>
 8007d10:	2b24      	cmp	r3, #36	; 0x24
 8007d12:	d906      	bls.n	8007d22 <_strtol_l.constprop.0+0x1e>
 8007d14:	f7fd fd82 	bl	800581c <__errno>
 8007d18:	2316      	movs	r3, #22
 8007d1a:	6003      	str	r3, [r0, #0]
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d22:	460d      	mov	r5, r1
 8007d24:	4835      	ldr	r0, [pc, #212]	; (8007dfc <_strtol_l.constprop.0+0xf8>)
 8007d26:	462a      	mov	r2, r5
 8007d28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d2c:	5d06      	ldrb	r6, [r0, r4]
 8007d2e:	f016 0608 	ands.w	r6, r6, #8
 8007d32:	d1f8      	bne.n	8007d26 <_strtol_l.constprop.0+0x22>
 8007d34:	2c2d      	cmp	r4, #45	; 0x2d
 8007d36:	d12e      	bne.n	8007d96 <_strtol_l.constprop.0+0x92>
 8007d38:	2601      	movs	r6, #1
 8007d3a:	782c      	ldrb	r4, [r5, #0]
 8007d3c:	1c95      	adds	r5, r2, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d057      	beq.n	8007df2 <_strtol_l.constprop.0+0xee>
 8007d42:	2b10      	cmp	r3, #16
 8007d44:	d109      	bne.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007d46:	2c30      	cmp	r4, #48	; 0x30
 8007d48:	d107      	bne.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007d4a:	782a      	ldrb	r2, [r5, #0]
 8007d4c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007d50:	2a58      	cmp	r2, #88	; 0x58
 8007d52:	d149      	bne.n	8007de8 <_strtol_l.constprop.0+0xe4>
 8007d54:	2310      	movs	r3, #16
 8007d56:	786c      	ldrb	r4, [r5, #1]
 8007d58:	3502      	adds	r5, #2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007d60:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d64:	fbbc f9f3 	udiv	r9, ip, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d6e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007d72:	2f09      	cmp	r7, #9
 8007d74:	d814      	bhi.n	8007da0 <_strtol_l.constprop.0+0x9c>
 8007d76:	463c      	mov	r4, r7
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	dd20      	ble.n	8007dbe <_strtol_l.constprop.0+0xba>
 8007d7c:	1c57      	adds	r7, r2, #1
 8007d7e:	d007      	beq.n	8007d90 <_strtol_l.constprop.0+0x8c>
 8007d80:	4581      	cmp	r9, r0
 8007d82:	d319      	bcc.n	8007db8 <_strtol_l.constprop.0+0xb4>
 8007d84:	d101      	bne.n	8007d8a <_strtol_l.constprop.0+0x86>
 8007d86:	45a2      	cmp	sl, r4
 8007d88:	db16      	blt.n	8007db8 <_strtol_l.constprop.0+0xb4>
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	fb00 4003 	mla	r0, r0, r3, r4
 8007d90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d94:	e7eb      	b.n	8007d6e <_strtol_l.constprop.0+0x6a>
 8007d96:	2c2b      	cmp	r4, #43	; 0x2b
 8007d98:	bf04      	itt	eq
 8007d9a:	782c      	ldrbeq	r4, [r5, #0]
 8007d9c:	1c95      	addeq	r5, r2, #2
 8007d9e:	e7ce      	b.n	8007d3e <_strtol_l.constprop.0+0x3a>
 8007da0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007da4:	2f19      	cmp	r7, #25
 8007da6:	d801      	bhi.n	8007dac <_strtol_l.constprop.0+0xa8>
 8007da8:	3c37      	subs	r4, #55	; 0x37
 8007daa:	e7e5      	b.n	8007d78 <_strtol_l.constprop.0+0x74>
 8007dac:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007db0:	2f19      	cmp	r7, #25
 8007db2:	d804      	bhi.n	8007dbe <_strtol_l.constprop.0+0xba>
 8007db4:	3c57      	subs	r4, #87	; 0x57
 8007db6:	e7df      	b.n	8007d78 <_strtol_l.constprop.0+0x74>
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbc:	e7e8      	b.n	8007d90 <_strtol_l.constprop.0+0x8c>
 8007dbe:	1c53      	adds	r3, r2, #1
 8007dc0:	d108      	bne.n	8007dd4 <_strtol_l.constprop.0+0xd0>
 8007dc2:	2322      	movs	r3, #34	; 0x22
 8007dc4:	4660      	mov	r0, ip
 8007dc6:	f8ce 3000 	str.w	r3, [lr]
 8007dca:	f1b8 0f00 	cmp.w	r8, #0
 8007dce:	d0a6      	beq.n	8007d1e <_strtol_l.constprop.0+0x1a>
 8007dd0:	1e69      	subs	r1, r5, #1
 8007dd2:	e006      	b.n	8007de2 <_strtol_l.constprop.0+0xde>
 8007dd4:	b106      	cbz	r6, 8007dd8 <_strtol_l.constprop.0+0xd4>
 8007dd6:	4240      	negs	r0, r0
 8007dd8:	f1b8 0f00 	cmp.w	r8, #0
 8007ddc:	d09f      	beq.n	8007d1e <_strtol_l.constprop.0+0x1a>
 8007dde:	2a00      	cmp	r2, #0
 8007de0:	d1f6      	bne.n	8007dd0 <_strtol_l.constprop.0+0xcc>
 8007de2:	f8c8 1000 	str.w	r1, [r8]
 8007de6:	e79a      	b.n	8007d1e <_strtol_l.constprop.0+0x1a>
 8007de8:	2430      	movs	r4, #48	; 0x30
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1b5      	bne.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007dee:	2308      	movs	r3, #8
 8007df0:	e7b3      	b.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007df2:	2c30      	cmp	r4, #48	; 0x30
 8007df4:	d0a9      	beq.n	8007d4a <_strtol_l.constprop.0+0x46>
 8007df6:	230a      	movs	r3, #10
 8007df8:	e7af      	b.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007dfa:	bf00      	nop
 8007dfc:	0800bfa1 	.word	0x0800bfa1

08007e00 <_strtol_r>:
 8007e00:	f7ff bf80 	b.w	8007d04 <_strtol_l.constprop.0>

08007e04 <__ssputs_r>:
 8007e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	461f      	mov	r7, r3
 8007e0a:	688e      	ldr	r6, [r1, #8]
 8007e0c:	4682      	mov	sl, r0
 8007e0e:	42be      	cmp	r6, r7
 8007e10:	460c      	mov	r4, r1
 8007e12:	4690      	mov	r8, r2
 8007e14:	680b      	ldr	r3, [r1, #0]
 8007e16:	d82c      	bhi.n	8007e72 <__ssputs_r+0x6e>
 8007e18:	898a      	ldrh	r2, [r1, #12]
 8007e1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e1e:	d026      	beq.n	8007e6e <__ssputs_r+0x6a>
 8007e20:	6965      	ldr	r5, [r4, #20]
 8007e22:	6909      	ldr	r1, [r1, #16]
 8007e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e28:	eba3 0901 	sub.w	r9, r3, r1
 8007e2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e30:	1c7b      	adds	r3, r7, #1
 8007e32:	444b      	add	r3, r9
 8007e34:	106d      	asrs	r5, r5, #1
 8007e36:	429d      	cmp	r5, r3
 8007e38:	bf38      	it	cc
 8007e3a:	461d      	movcc	r5, r3
 8007e3c:	0553      	lsls	r3, r2, #21
 8007e3e:	d527      	bpl.n	8007e90 <__ssputs_r+0x8c>
 8007e40:	4629      	mov	r1, r5
 8007e42:	f7fe fc19 	bl	8006678 <_malloc_r>
 8007e46:	4606      	mov	r6, r0
 8007e48:	b360      	cbz	r0, 8007ea4 <__ssputs_r+0xa0>
 8007e4a:	464a      	mov	r2, r9
 8007e4c:	6921      	ldr	r1, [r4, #16]
 8007e4e:	f7fd fd20 	bl	8005892 <memcpy>
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	6126      	str	r6, [r4, #16]
 8007e60:	444e      	add	r6, r9
 8007e62:	6026      	str	r6, [r4, #0]
 8007e64:	463e      	mov	r6, r7
 8007e66:	6165      	str	r5, [r4, #20]
 8007e68:	eba5 0509 	sub.w	r5, r5, r9
 8007e6c:	60a5      	str	r5, [r4, #8]
 8007e6e:	42be      	cmp	r6, r7
 8007e70:	d900      	bls.n	8007e74 <__ssputs_r+0x70>
 8007e72:	463e      	mov	r6, r7
 8007e74:	4632      	mov	r2, r6
 8007e76:	4641      	mov	r1, r8
 8007e78:	6820      	ldr	r0, [r4, #0]
 8007e7a:	f000 fb9d 	bl	80085b8 <memmove>
 8007e7e:	2000      	movs	r0, #0
 8007e80:	68a3      	ldr	r3, [r4, #8]
 8007e82:	1b9b      	subs	r3, r3, r6
 8007e84:	60a3      	str	r3, [r4, #8]
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	4433      	add	r3, r6
 8007e8a:	6023      	str	r3, [r4, #0]
 8007e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e90:	462a      	mov	r2, r5
 8007e92:	f000 ff70 	bl	8008d76 <_realloc_r>
 8007e96:	4606      	mov	r6, r0
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d1e0      	bne.n	8007e5e <__ssputs_r+0x5a>
 8007e9c:	4650      	mov	r0, sl
 8007e9e:	6921      	ldr	r1, [r4, #16]
 8007ea0:	f7fe fb7a 	bl	8006598 <_free_r>
 8007ea4:	230c      	movs	r3, #12
 8007ea6:	f8ca 3000 	str.w	r3, [sl]
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eb4:	81a3      	strh	r3, [r4, #12]
 8007eb6:	e7e9      	b.n	8007e8c <__ssputs_r+0x88>

08007eb8 <_svfiprintf_r>:
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	4698      	mov	r8, r3
 8007ebe:	898b      	ldrh	r3, [r1, #12]
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	061b      	lsls	r3, r3, #24
 8007ec4:	460d      	mov	r5, r1
 8007ec6:	4614      	mov	r4, r2
 8007ec8:	b09d      	sub	sp, #116	; 0x74
 8007eca:	d50e      	bpl.n	8007eea <_svfiprintf_r+0x32>
 8007ecc:	690b      	ldr	r3, [r1, #16]
 8007ece:	b963      	cbnz	r3, 8007eea <_svfiprintf_r+0x32>
 8007ed0:	2140      	movs	r1, #64	; 0x40
 8007ed2:	f7fe fbd1 	bl	8006678 <_malloc_r>
 8007ed6:	6028      	str	r0, [r5, #0]
 8007ed8:	6128      	str	r0, [r5, #16]
 8007eda:	b920      	cbnz	r0, 8007ee6 <_svfiprintf_r+0x2e>
 8007edc:	230c      	movs	r3, #12
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee4:	e0d0      	b.n	8008088 <_svfiprintf_r+0x1d0>
 8007ee6:	2340      	movs	r3, #64	; 0x40
 8007ee8:	616b      	str	r3, [r5, #20]
 8007eea:	2300      	movs	r3, #0
 8007eec:	9309      	str	r3, [sp, #36]	; 0x24
 8007eee:	2320      	movs	r3, #32
 8007ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ef4:	2330      	movs	r3, #48	; 0x30
 8007ef6:	f04f 0901 	mov.w	r9, #1
 8007efa:	f8cd 800c 	str.w	r8, [sp, #12]
 8007efe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80080a0 <_svfiprintf_r+0x1e8>
 8007f02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f06:	4623      	mov	r3, r4
 8007f08:	469a      	mov	sl, r3
 8007f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f0e:	b10a      	cbz	r2, 8007f14 <_svfiprintf_r+0x5c>
 8007f10:	2a25      	cmp	r2, #37	; 0x25
 8007f12:	d1f9      	bne.n	8007f08 <_svfiprintf_r+0x50>
 8007f14:	ebba 0b04 	subs.w	fp, sl, r4
 8007f18:	d00b      	beq.n	8007f32 <_svfiprintf_r+0x7a>
 8007f1a:	465b      	mov	r3, fp
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4638      	mov	r0, r7
 8007f22:	f7ff ff6f 	bl	8007e04 <__ssputs_r>
 8007f26:	3001      	adds	r0, #1
 8007f28:	f000 80a9 	beq.w	800807e <_svfiprintf_r+0x1c6>
 8007f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f2e:	445a      	add	r2, fp
 8007f30:	9209      	str	r2, [sp, #36]	; 0x24
 8007f32:	f89a 3000 	ldrb.w	r3, [sl]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 80a1 	beq.w	800807e <_svfiprintf_r+0x1c6>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f46:	f10a 0a01 	add.w	sl, sl, #1
 8007f4a:	9304      	str	r3, [sp, #16]
 8007f4c:	9307      	str	r3, [sp, #28]
 8007f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f52:	931a      	str	r3, [sp, #104]	; 0x68
 8007f54:	4654      	mov	r4, sl
 8007f56:	2205      	movs	r2, #5
 8007f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5c:	4850      	ldr	r0, [pc, #320]	; (80080a0 <_svfiprintf_r+0x1e8>)
 8007f5e:	f7fd fc8a 	bl	8005876 <memchr>
 8007f62:	9a04      	ldr	r2, [sp, #16]
 8007f64:	b9d8      	cbnz	r0, 8007f9e <_svfiprintf_r+0xe6>
 8007f66:	06d0      	lsls	r0, r2, #27
 8007f68:	bf44      	itt	mi
 8007f6a:	2320      	movmi	r3, #32
 8007f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f70:	0711      	lsls	r1, r2, #28
 8007f72:	bf44      	itt	mi
 8007f74:	232b      	movmi	r3, #43	; 0x2b
 8007f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f80:	d015      	beq.n	8007fae <_svfiprintf_r+0xf6>
 8007f82:	4654      	mov	r4, sl
 8007f84:	2000      	movs	r0, #0
 8007f86:	f04f 0c0a 	mov.w	ip, #10
 8007f8a:	9a07      	ldr	r2, [sp, #28]
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f92:	3b30      	subs	r3, #48	; 0x30
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	d94d      	bls.n	8008034 <_svfiprintf_r+0x17c>
 8007f98:	b1b0      	cbz	r0, 8007fc8 <_svfiprintf_r+0x110>
 8007f9a:	9207      	str	r2, [sp, #28]
 8007f9c:	e014      	b.n	8007fc8 <_svfiprintf_r+0x110>
 8007f9e:	eba0 0308 	sub.w	r3, r0, r8
 8007fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	46a2      	mov	sl, r4
 8007faa:	9304      	str	r3, [sp, #16]
 8007fac:	e7d2      	b.n	8007f54 <_svfiprintf_r+0x9c>
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	1d19      	adds	r1, r3, #4
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	9103      	str	r1, [sp, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bfbb      	ittet	lt
 8007fba:	425b      	neglt	r3, r3
 8007fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8007fc0:	9307      	strge	r3, [sp, #28]
 8007fc2:	9307      	strlt	r3, [sp, #28]
 8007fc4:	bfb8      	it	lt
 8007fc6:	9204      	strlt	r2, [sp, #16]
 8007fc8:	7823      	ldrb	r3, [r4, #0]
 8007fca:	2b2e      	cmp	r3, #46	; 0x2e
 8007fcc:	d10c      	bne.n	8007fe8 <_svfiprintf_r+0x130>
 8007fce:	7863      	ldrb	r3, [r4, #1]
 8007fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd2:	d134      	bne.n	800803e <_svfiprintf_r+0x186>
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	3402      	adds	r4, #2
 8007fd8:	1d1a      	adds	r2, r3, #4
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	9203      	str	r2, [sp, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bfb8      	it	lt
 8007fe2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fe6:	9305      	str	r3, [sp, #20]
 8007fe8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80080a4 <_svfiprintf_r+0x1ec>
 8007fec:	2203      	movs	r2, #3
 8007fee:	4650      	mov	r0, sl
 8007ff0:	7821      	ldrb	r1, [r4, #0]
 8007ff2:	f7fd fc40 	bl	8005876 <memchr>
 8007ff6:	b138      	cbz	r0, 8008008 <_svfiprintf_r+0x150>
 8007ff8:	2240      	movs	r2, #64	; 0x40
 8007ffa:	9b04      	ldr	r3, [sp, #16]
 8007ffc:	eba0 000a 	sub.w	r0, r0, sl
 8008000:	4082      	lsls	r2, r0
 8008002:	4313      	orrs	r3, r2
 8008004:	3401      	adds	r4, #1
 8008006:	9304      	str	r3, [sp, #16]
 8008008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800c:	2206      	movs	r2, #6
 800800e:	4826      	ldr	r0, [pc, #152]	; (80080a8 <_svfiprintf_r+0x1f0>)
 8008010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008014:	f7fd fc2f 	bl	8005876 <memchr>
 8008018:	2800      	cmp	r0, #0
 800801a:	d038      	beq.n	800808e <_svfiprintf_r+0x1d6>
 800801c:	4b23      	ldr	r3, [pc, #140]	; (80080ac <_svfiprintf_r+0x1f4>)
 800801e:	bb1b      	cbnz	r3, 8008068 <_svfiprintf_r+0x1b0>
 8008020:	9b03      	ldr	r3, [sp, #12]
 8008022:	3307      	adds	r3, #7
 8008024:	f023 0307 	bic.w	r3, r3, #7
 8008028:	3308      	adds	r3, #8
 800802a:	9303      	str	r3, [sp, #12]
 800802c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802e:	4433      	add	r3, r6
 8008030:	9309      	str	r3, [sp, #36]	; 0x24
 8008032:	e768      	b.n	8007f06 <_svfiprintf_r+0x4e>
 8008034:	460c      	mov	r4, r1
 8008036:	2001      	movs	r0, #1
 8008038:	fb0c 3202 	mla	r2, ip, r2, r3
 800803c:	e7a6      	b.n	8007f8c <_svfiprintf_r+0xd4>
 800803e:	2300      	movs	r3, #0
 8008040:	f04f 0c0a 	mov.w	ip, #10
 8008044:	4619      	mov	r1, r3
 8008046:	3401      	adds	r4, #1
 8008048:	9305      	str	r3, [sp, #20]
 800804a:	4620      	mov	r0, r4
 800804c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008050:	3a30      	subs	r2, #48	; 0x30
 8008052:	2a09      	cmp	r2, #9
 8008054:	d903      	bls.n	800805e <_svfiprintf_r+0x1a6>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0c6      	beq.n	8007fe8 <_svfiprintf_r+0x130>
 800805a:	9105      	str	r1, [sp, #20]
 800805c:	e7c4      	b.n	8007fe8 <_svfiprintf_r+0x130>
 800805e:	4604      	mov	r4, r0
 8008060:	2301      	movs	r3, #1
 8008062:	fb0c 2101 	mla	r1, ip, r1, r2
 8008066:	e7f0      	b.n	800804a <_svfiprintf_r+0x192>
 8008068:	ab03      	add	r3, sp, #12
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	462a      	mov	r2, r5
 800806e:	4638      	mov	r0, r7
 8008070:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <_svfiprintf_r+0x1f8>)
 8008072:	a904      	add	r1, sp, #16
 8008074:	f7fc fc44 	bl	8004900 <_printf_float>
 8008078:	1c42      	adds	r2, r0, #1
 800807a:	4606      	mov	r6, r0
 800807c:	d1d6      	bne.n	800802c <_svfiprintf_r+0x174>
 800807e:	89ab      	ldrh	r3, [r5, #12]
 8008080:	065b      	lsls	r3, r3, #25
 8008082:	f53f af2d 	bmi.w	8007ee0 <_svfiprintf_r+0x28>
 8008086:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008088:	b01d      	add	sp, #116	; 0x74
 800808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808e:	ab03      	add	r3, sp, #12
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	462a      	mov	r2, r5
 8008094:	4638      	mov	r0, r7
 8008096:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <_svfiprintf_r+0x1f8>)
 8008098:	a904      	add	r1, sp, #16
 800809a:	f7fc fed1 	bl	8004e40 <_printf_i>
 800809e:	e7eb      	b.n	8008078 <_svfiprintf_r+0x1c0>
 80080a0:	0800c0a1 	.word	0x0800c0a1
 80080a4:	0800c0a7 	.word	0x0800c0a7
 80080a8:	0800c0ab 	.word	0x0800c0ab
 80080ac:	08004901 	.word	0x08004901
 80080b0:	08007e05 	.word	0x08007e05

080080b4 <__sfputc_r>:
 80080b4:	6893      	ldr	r3, [r2, #8]
 80080b6:	b410      	push	{r4}
 80080b8:	3b01      	subs	r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	6093      	str	r3, [r2, #8]
 80080be:	da07      	bge.n	80080d0 <__sfputc_r+0x1c>
 80080c0:	6994      	ldr	r4, [r2, #24]
 80080c2:	42a3      	cmp	r3, r4
 80080c4:	db01      	blt.n	80080ca <__sfputc_r+0x16>
 80080c6:	290a      	cmp	r1, #10
 80080c8:	d102      	bne.n	80080d0 <__sfputc_r+0x1c>
 80080ca:	bc10      	pop	{r4}
 80080cc:	f000 b9de 	b.w	800848c <__swbuf_r>
 80080d0:	6813      	ldr	r3, [r2, #0]
 80080d2:	1c58      	adds	r0, r3, #1
 80080d4:	6010      	str	r0, [r2, #0]
 80080d6:	7019      	strb	r1, [r3, #0]
 80080d8:	4608      	mov	r0, r1
 80080da:	bc10      	pop	{r4}
 80080dc:	4770      	bx	lr

080080de <__sfputs_r>:
 80080de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e0:	4606      	mov	r6, r0
 80080e2:	460f      	mov	r7, r1
 80080e4:	4614      	mov	r4, r2
 80080e6:	18d5      	adds	r5, r2, r3
 80080e8:	42ac      	cmp	r4, r5
 80080ea:	d101      	bne.n	80080f0 <__sfputs_r+0x12>
 80080ec:	2000      	movs	r0, #0
 80080ee:	e007      	b.n	8008100 <__sfputs_r+0x22>
 80080f0:	463a      	mov	r2, r7
 80080f2:	4630      	mov	r0, r6
 80080f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f8:	f7ff ffdc 	bl	80080b4 <__sfputc_r>
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	d1f3      	bne.n	80080e8 <__sfputs_r+0xa>
 8008100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008104 <_vfiprintf_r>:
 8008104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008108:	460d      	mov	r5, r1
 800810a:	4614      	mov	r4, r2
 800810c:	4698      	mov	r8, r3
 800810e:	4606      	mov	r6, r0
 8008110:	b09d      	sub	sp, #116	; 0x74
 8008112:	b118      	cbz	r0, 800811c <_vfiprintf_r+0x18>
 8008114:	6a03      	ldr	r3, [r0, #32]
 8008116:	b90b      	cbnz	r3, 800811c <_vfiprintf_r+0x18>
 8008118:	f7fd fa4e 	bl	80055b8 <__sinit>
 800811c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800811e:	07d9      	lsls	r1, r3, #31
 8008120:	d405      	bmi.n	800812e <_vfiprintf_r+0x2a>
 8008122:	89ab      	ldrh	r3, [r5, #12]
 8008124:	059a      	lsls	r2, r3, #22
 8008126:	d402      	bmi.n	800812e <_vfiprintf_r+0x2a>
 8008128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800812a:	f7fd fba2 	bl	8005872 <__retarget_lock_acquire_recursive>
 800812e:	89ab      	ldrh	r3, [r5, #12]
 8008130:	071b      	lsls	r3, r3, #28
 8008132:	d501      	bpl.n	8008138 <_vfiprintf_r+0x34>
 8008134:	692b      	ldr	r3, [r5, #16]
 8008136:	b99b      	cbnz	r3, 8008160 <_vfiprintf_r+0x5c>
 8008138:	4629      	mov	r1, r5
 800813a:	4630      	mov	r0, r6
 800813c:	f000 f9e4 	bl	8008508 <__swsetup_r>
 8008140:	b170      	cbz	r0, 8008160 <_vfiprintf_r+0x5c>
 8008142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008144:	07dc      	lsls	r4, r3, #31
 8008146:	d504      	bpl.n	8008152 <_vfiprintf_r+0x4e>
 8008148:	f04f 30ff 	mov.w	r0, #4294967295
 800814c:	b01d      	add	sp, #116	; 0x74
 800814e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008152:	89ab      	ldrh	r3, [r5, #12]
 8008154:	0598      	lsls	r0, r3, #22
 8008156:	d4f7      	bmi.n	8008148 <_vfiprintf_r+0x44>
 8008158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800815a:	f7fd fb8b 	bl	8005874 <__retarget_lock_release_recursive>
 800815e:	e7f3      	b.n	8008148 <_vfiprintf_r+0x44>
 8008160:	2300      	movs	r3, #0
 8008162:	9309      	str	r3, [sp, #36]	; 0x24
 8008164:	2320      	movs	r3, #32
 8008166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800816a:	2330      	movs	r3, #48	; 0x30
 800816c:	f04f 0901 	mov.w	r9, #1
 8008170:	f8cd 800c 	str.w	r8, [sp, #12]
 8008174:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008324 <_vfiprintf_r+0x220>
 8008178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800817c:	4623      	mov	r3, r4
 800817e:	469a      	mov	sl, r3
 8008180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008184:	b10a      	cbz	r2, 800818a <_vfiprintf_r+0x86>
 8008186:	2a25      	cmp	r2, #37	; 0x25
 8008188:	d1f9      	bne.n	800817e <_vfiprintf_r+0x7a>
 800818a:	ebba 0b04 	subs.w	fp, sl, r4
 800818e:	d00b      	beq.n	80081a8 <_vfiprintf_r+0xa4>
 8008190:	465b      	mov	r3, fp
 8008192:	4622      	mov	r2, r4
 8008194:	4629      	mov	r1, r5
 8008196:	4630      	mov	r0, r6
 8008198:	f7ff ffa1 	bl	80080de <__sfputs_r>
 800819c:	3001      	adds	r0, #1
 800819e:	f000 80a9 	beq.w	80082f4 <_vfiprintf_r+0x1f0>
 80081a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081a4:	445a      	add	r2, fp
 80081a6:	9209      	str	r2, [sp, #36]	; 0x24
 80081a8:	f89a 3000 	ldrb.w	r3, [sl]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 80a1 	beq.w	80082f4 <_vfiprintf_r+0x1f0>
 80081b2:	2300      	movs	r3, #0
 80081b4:	f04f 32ff 	mov.w	r2, #4294967295
 80081b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081bc:	f10a 0a01 	add.w	sl, sl, #1
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	9307      	str	r3, [sp, #28]
 80081c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081c8:	931a      	str	r3, [sp, #104]	; 0x68
 80081ca:	4654      	mov	r4, sl
 80081cc:	2205      	movs	r2, #5
 80081ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d2:	4854      	ldr	r0, [pc, #336]	; (8008324 <_vfiprintf_r+0x220>)
 80081d4:	f7fd fb4f 	bl	8005876 <memchr>
 80081d8:	9a04      	ldr	r2, [sp, #16]
 80081da:	b9d8      	cbnz	r0, 8008214 <_vfiprintf_r+0x110>
 80081dc:	06d1      	lsls	r1, r2, #27
 80081de:	bf44      	itt	mi
 80081e0:	2320      	movmi	r3, #32
 80081e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081e6:	0713      	lsls	r3, r2, #28
 80081e8:	bf44      	itt	mi
 80081ea:	232b      	movmi	r3, #43	; 0x2b
 80081ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081f0:	f89a 3000 	ldrb.w	r3, [sl]
 80081f4:	2b2a      	cmp	r3, #42	; 0x2a
 80081f6:	d015      	beq.n	8008224 <_vfiprintf_r+0x120>
 80081f8:	4654      	mov	r4, sl
 80081fa:	2000      	movs	r0, #0
 80081fc:	f04f 0c0a 	mov.w	ip, #10
 8008200:	9a07      	ldr	r2, [sp, #28]
 8008202:	4621      	mov	r1, r4
 8008204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008208:	3b30      	subs	r3, #48	; 0x30
 800820a:	2b09      	cmp	r3, #9
 800820c:	d94d      	bls.n	80082aa <_vfiprintf_r+0x1a6>
 800820e:	b1b0      	cbz	r0, 800823e <_vfiprintf_r+0x13a>
 8008210:	9207      	str	r2, [sp, #28]
 8008212:	e014      	b.n	800823e <_vfiprintf_r+0x13a>
 8008214:	eba0 0308 	sub.w	r3, r0, r8
 8008218:	fa09 f303 	lsl.w	r3, r9, r3
 800821c:	4313      	orrs	r3, r2
 800821e:	46a2      	mov	sl, r4
 8008220:	9304      	str	r3, [sp, #16]
 8008222:	e7d2      	b.n	80081ca <_vfiprintf_r+0xc6>
 8008224:	9b03      	ldr	r3, [sp, #12]
 8008226:	1d19      	adds	r1, r3, #4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	9103      	str	r1, [sp, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	bfbb      	ittet	lt
 8008230:	425b      	neglt	r3, r3
 8008232:	f042 0202 	orrlt.w	r2, r2, #2
 8008236:	9307      	strge	r3, [sp, #28]
 8008238:	9307      	strlt	r3, [sp, #28]
 800823a:	bfb8      	it	lt
 800823c:	9204      	strlt	r2, [sp, #16]
 800823e:	7823      	ldrb	r3, [r4, #0]
 8008240:	2b2e      	cmp	r3, #46	; 0x2e
 8008242:	d10c      	bne.n	800825e <_vfiprintf_r+0x15a>
 8008244:	7863      	ldrb	r3, [r4, #1]
 8008246:	2b2a      	cmp	r3, #42	; 0x2a
 8008248:	d134      	bne.n	80082b4 <_vfiprintf_r+0x1b0>
 800824a:	9b03      	ldr	r3, [sp, #12]
 800824c:	3402      	adds	r4, #2
 800824e:	1d1a      	adds	r2, r3, #4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	9203      	str	r2, [sp, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	bfb8      	it	lt
 8008258:	f04f 33ff 	movlt.w	r3, #4294967295
 800825c:	9305      	str	r3, [sp, #20]
 800825e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008328 <_vfiprintf_r+0x224>
 8008262:	2203      	movs	r2, #3
 8008264:	4650      	mov	r0, sl
 8008266:	7821      	ldrb	r1, [r4, #0]
 8008268:	f7fd fb05 	bl	8005876 <memchr>
 800826c:	b138      	cbz	r0, 800827e <_vfiprintf_r+0x17a>
 800826e:	2240      	movs	r2, #64	; 0x40
 8008270:	9b04      	ldr	r3, [sp, #16]
 8008272:	eba0 000a 	sub.w	r0, r0, sl
 8008276:	4082      	lsls	r2, r0
 8008278:	4313      	orrs	r3, r2
 800827a:	3401      	adds	r4, #1
 800827c:	9304      	str	r3, [sp, #16]
 800827e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008282:	2206      	movs	r2, #6
 8008284:	4829      	ldr	r0, [pc, #164]	; (800832c <_vfiprintf_r+0x228>)
 8008286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800828a:	f7fd faf4 	bl	8005876 <memchr>
 800828e:	2800      	cmp	r0, #0
 8008290:	d03f      	beq.n	8008312 <_vfiprintf_r+0x20e>
 8008292:	4b27      	ldr	r3, [pc, #156]	; (8008330 <_vfiprintf_r+0x22c>)
 8008294:	bb1b      	cbnz	r3, 80082de <_vfiprintf_r+0x1da>
 8008296:	9b03      	ldr	r3, [sp, #12]
 8008298:	3307      	adds	r3, #7
 800829a:	f023 0307 	bic.w	r3, r3, #7
 800829e:	3308      	adds	r3, #8
 80082a0:	9303      	str	r3, [sp, #12]
 80082a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a4:	443b      	add	r3, r7
 80082a6:	9309      	str	r3, [sp, #36]	; 0x24
 80082a8:	e768      	b.n	800817c <_vfiprintf_r+0x78>
 80082aa:	460c      	mov	r4, r1
 80082ac:	2001      	movs	r0, #1
 80082ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80082b2:	e7a6      	b.n	8008202 <_vfiprintf_r+0xfe>
 80082b4:	2300      	movs	r3, #0
 80082b6:	f04f 0c0a 	mov.w	ip, #10
 80082ba:	4619      	mov	r1, r3
 80082bc:	3401      	adds	r4, #1
 80082be:	9305      	str	r3, [sp, #20]
 80082c0:	4620      	mov	r0, r4
 80082c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082c6:	3a30      	subs	r2, #48	; 0x30
 80082c8:	2a09      	cmp	r2, #9
 80082ca:	d903      	bls.n	80082d4 <_vfiprintf_r+0x1d0>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0c6      	beq.n	800825e <_vfiprintf_r+0x15a>
 80082d0:	9105      	str	r1, [sp, #20]
 80082d2:	e7c4      	b.n	800825e <_vfiprintf_r+0x15a>
 80082d4:	4604      	mov	r4, r0
 80082d6:	2301      	movs	r3, #1
 80082d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80082dc:	e7f0      	b.n	80082c0 <_vfiprintf_r+0x1bc>
 80082de:	ab03      	add	r3, sp, #12
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	462a      	mov	r2, r5
 80082e4:	4630      	mov	r0, r6
 80082e6:	4b13      	ldr	r3, [pc, #76]	; (8008334 <_vfiprintf_r+0x230>)
 80082e8:	a904      	add	r1, sp, #16
 80082ea:	f7fc fb09 	bl	8004900 <_printf_float>
 80082ee:	4607      	mov	r7, r0
 80082f0:	1c78      	adds	r0, r7, #1
 80082f2:	d1d6      	bne.n	80082a2 <_vfiprintf_r+0x19e>
 80082f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082f6:	07d9      	lsls	r1, r3, #31
 80082f8:	d405      	bmi.n	8008306 <_vfiprintf_r+0x202>
 80082fa:	89ab      	ldrh	r3, [r5, #12]
 80082fc:	059a      	lsls	r2, r3, #22
 80082fe:	d402      	bmi.n	8008306 <_vfiprintf_r+0x202>
 8008300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008302:	f7fd fab7 	bl	8005874 <__retarget_lock_release_recursive>
 8008306:	89ab      	ldrh	r3, [r5, #12]
 8008308:	065b      	lsls	r3, r3, #25
 800830a:	f53f af1d 	bmi.w	8008148 <_vfiprintf_r+0x44>
 800830e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008310:	e71c      	b.n	800814c <_vfiprintf_r+0x48>
 8008312:	ab03      	add	r3, sp, #12
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	462a      	mov	r2, r5
 8008318:	4630      	mov	r0, r6
 800831a:	4b06      	ldr	r3, [pc, #24]	; (8008334 <_vfiprintf_r+0x230>)
 800831c:	a904      	add	r1, sp, #16
 800831e:	f7fc fd8f 	bl	8004e40 <_printf_i>
 8008322:	e7e4      	b.n	80082ee <_vfiprintf_r+0x1ea>
 8008324:	0800c0a1 	.word	0x0800c0a1
 8008328:	0800c0a7 	.word	0x0800c0a7
 800832c:	0800c0ab 	.word	0x0800c0ab
 8008330:	08004901 	.word	0x08004901
 8008334:	080080df 	.word	0x080080df

08008338 <__sflush_r>:
 8008338:	898a      	ldrh	r2, [r1, #12]
 800833a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833c:	4605      	mov	r5, r0
 800833e:	0710      	lsls	r0, r2, #28
 8008340:	460c      	mov	r4, r1
 8008342:	d457      	bmi.n	80083f4 <__sflush_r+0xbc>
 8008344:	684b      	ldr	r3, [r1, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	dc04      	bgt.n	8008354 <__sflush_r+0x1c>
 800834a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800834c:	2b00      	cmp	r3, #0
 800834e:	dc01      	bgt.n	8008354 <__sflush_r+0x1c>
 8008350:	2000      	movs	r0, #0
 8008352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008356:	2e00      	cmp	r6, #0
 8008358:	d0fa      	beq.n	8008350 <__sflush_r+0x18>
 800835a:	2300      	movs	r3, #0
 800835c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008360:	682f      	ldr	r7, [r5, #0]
 8008362:	6a21      	ldr	r1, [r4, #32]
 8008364:	602b      	str	r3, [r5, #0]
 8008366:	d032      	beq.n	80083ce <__sflush_r+0x96>
 8008368:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	075a      	lsls	r2, r3, #29
 800836e:	d505      	bpl.n	800837c <__sflush_r+0x44>
 8008370:	6863      	ldr	r3, [r4, #4]
 8008372:	1ac0      	subs	r0, r0, r3
 8008374:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008376:	b10b      	cbz	r3, 800837c <__sflush_r+0x44>
 8008378:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800837a:	1ac0      	subs	r0, r0, r3
 800837c:	2300      	movs	r3, #0
 800837e:	4602      	mov	r2, r0
 8008380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008382:	4628      	mov	r0, r5
 8008384:	6a21      	ldr	r1, [r4, #32]
 8008386:	47b0      	blx	r6
 8008388:	1c43      	adds	r3, r0, #1
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	d106      	bne.n	800839c <__sflush_r+0x64>
 800838e:	6829      	ldr	r1, [r5, #0]
 8008390:	291d      	cmp	r1, #29
 8008392:	d82b      	bhi.n	80083ec <__sflush_r+0xb4>
 8008394:	4a28      	ldr	r2, [pc, #160]	; (8008438 <__sflush_r+0x100>)
 8008396:	410a      	asrs	r2, r1
 8008398:	07d6      	lsls	r6, r2, #31
 800839a:	d427      	bmi.n	80083ec <__sflush_r+0xb4>
 800839c:	2200      	movs	r2, #0
 800839e:	6062      	str	r2, [r4, #4]
 80083a0:	6922      	ldr	r2, [r4, #16]
 80083a2:	04d9      	lsls	r1, r3, #19
 80083a4:	6022      	str	r2, [r4, #0]
 80083a6:	d504      	bpl.n	80083b2 <__sflush_r+0x7a>
 80083a8:	1c42      	adds	r2, r0, #1
 80083aa:	d101      	bne.n	80083b0 <__sflush_r+0x78>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b903      	cbnz	r3, 80083b2 <__sflush_r+0x7a>
 80083b0:	6560      	str	r0, [r4, #84]	; 0x54
 80083b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083b4:	602f      	str	r7, [r5, #0]
 80083b6:	2900      	cmp	r1, #0
 80083b8:	d0ca      	beq.n	8008350 <__sflush_r+0x18>
 80083ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083be:	4299      	cmp	r1, r3
 80083c0:	d002      	beq.n	80083c8 <__sflush_r+0x90>
 80083c2:	4628      	mov	r0, r5
 80083c4:	f7fe f8e8 	bl	8006598 <_free_r>
 80083c8:	2000      	movs	r0, #0
 80083ca:	6360      	str	r0, [r4, #52]	; 0x34
 80083cc:	e7c1      	b.n	8008352 <__sflush_r+0x1a>
 80083ce:	2301      	movs	r3, #1
 80083d0:	4628      	mov	r0, r5
 80083d2:	47b0      	blx	r6
 80083d4:	1c41      	adds	r1, r0, #1
 80083d6:	d1c8      	bne.n	800836a <__sflush_r+0x32>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0c5      	beq.n	800836a <__sflush_r+0x32>
 80083de:	2b1d      	cmp	r3, #29
 80083e0:	d001      	beq.n	80083e6 <__sflush_r+0xae>
 80083e2:	2b16      	cmp	r3, #22
 80083e4:	d101      	bne.n	80083ea <__sflush_r+0xb2>
 80083e6:	602f      	str	r7, [r5, #0]
 80083e8:	e7b2      	b.n	8008350 <__sflush_r+0x18>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f0:	81a3      	strh	r3, [r4, #12]
 80083f2:	e7ae      	b.n	8008352 <__sflush_r+0x1a>
 80083f4:	690f      	ldr	r7, [r1, #16]
 80083f6:	2f00      	cmp	r7, #0
 80083f8:	d0aa      	beq.n	8008350 <__sflush_r+0x18>
 80083fa:	0793      	lsls	r3, r2, #30
 80083fc:	bf18      	it	ne
 80083fe:	2300      	movne	r3, #0
 8008400:	680e      	ldr	r6, [r1, #0]
 8008402:	bf08      	it	eq
 8008404:	694b      	ldreq	r3, [r1, #20]
 8008406:	1bf6      	subs	r6, r6, r7
 8008408:	600f      	str	r7, [r1, #0]
 800840a:	608b      	str	r3, [r1, #8]
 800840c:	2e00      	cmp	r6, #0
 800840e:	dd9f      	ble.n	8008350 <__sflush_r+0x18>
 8008410:	4633      	mov	r3, r6
 8008412:	463a      	mov	r2, r7
 8008414:	4628      	mov	r0, r5
 8008416:	6a21      	ldr	r1, [r4, #32]
 8008418:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800841c:	47e0      	blx	ip
 800841e:	2800      	cmp	r0, #0
 8008420:	dc06      	bgt.n	8008430 <__sflush_r+0xf8>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f04f 30ff 	mov.w	r0, #4294967295
 8008428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842c:	81a3      	strh	r3, [r4, #12]
 800842e:	e790      	b.n	8008352 <__sflush_r+0x1a>
 8008430:	4407      	add	r7, r0
 8008432:	1a36      	subs	r6, r6, r0
 8008434:	e7ea      	b.n	800840c <__sflush_r+0xd4>
 8008436:	bf00      	nop
 8008438:	dfbffffe 	.word	0xdfbffffe

0800843c <_fflush_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	690b      	ldr	r3, [r1, #16]
 8008440:	4605      	mov	r5, r0
 8008442:	460c      	mov	r4, r1
 8008444:	b913      	cbnz	r3, 800844c <_fflush_r+0x10>
 8008446:	2500      	movs	r5, #0
 8008448:	4628      	mov	r0, r5
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	b118      	cbz	r0, 8008456 <_fflush_r+0x1a>
 800844e:	6a03      	ldr	r3, [r0, #32]
 8008450:	b90b      	cbnz	r3, 8008456 <_fflush_r+0x1a>
 8008452:	f7fd f8b1 	bl	80055b8 <__sinit>
 8008456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0f3      	beq.n	8008446 <_fflush_r+0xa>
 800845e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008460:	07d0      	lsls	r0, r2, #31
 8008462:	d404      	bmi.n	800846e <_fflush_r+0x32>
 8008464:	0599      	lsls	r1, r3, #22
 8008466:	d402      	bmi.n	800846e <_fflush_r+0x32>
 8008468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800846a:	f7fd fa02 	bl	8005872 <__retarget_lock_acquire_recursive>
 800846e:	4628      	mov	r0, r5
 8008470:	4621      	mov	r1, r4
 8008472:	f7ff ff61 	bl	8008338 <__sflush_r>
 8008476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008478:	4605      	mov	r5, r0
 800847a:	07da      	lsls	r2, r3, #31
 800847c:	d4e4      	bmi.n	8008448 <_fflush_r+0xc>
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	059b      	lsls	r3, r3, #22
 8008482:	d4e1      	bmi.n	8008448 <_fflush_r+0xc>
 8008484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008486:	f7fd f9f5 	bl	8005874 <__retarget_lock_release_recursive>
 800848a:	e7dd      	b.n	8008448 <_fflush_r+0xc>

0800848c <__swbuf_r>:
 800848c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848e:	460e      	mov	r6, r1
 8008490:	4614      	mov	r4, r2
 8008492:	4605      	mov	r5, r0
 8008494:	b118      	cbz	r0, 800849e <__swbuf_r+0x12>
 8008496:	6a03      	ldr	r3, [r0, #32]
 8008498:	b90b      	cbnz	r3, 800849e <__swbuf_r+0x12>
 800849a:	f7fd f88d 	bl	80055b8 <__sinit>
 800849e:	69a3      	ldr	r3, [r4, #24]
 80084a0:	60a3      	str	r3, [r4, #8]
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	071a      	lsls	r2, r3, #28
 80084a6:	d525      	bpl.n	80084f4 <__swbuf_r+0x68>
 80084a8:	6923      	ldr	r3, [r4, #16]
 80084aa:	b31b      	cbz	r3, 80084f4 <__swbuf_r+0x68>
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	6922      	ldr	r2, [r4, #16]
 80084b0:	b2f6      	uxtb	r6, r6
 80084b2:	1a98      	subs	r0, r3, r2
 80084b4:	6963      	ldr	r3, [r4, #20]
 80084b6:	4637      	mov	r7, r6
 80084b8:	4283      	cmp	r3, r0
 80084ba:	dc04      	bgt.n	80084c6 <__swbuf_r+0x3a>
 80084bc:	4621      	mov	r1, r4
 80084be:	4628      	mov	r0, r5
 80084c0:	f7ff ffbc 	bl	800843c <_fflush_r>
 80084c4:	b9e0      	cbnz	r0, 8008500 <__swbuf_r+0x74>
 80084c6:	68a3      	ldr	r3, [r4, #8]
 80084c8:	3b01      	subs	r3, #1
 80084ca:	60a3      	str	r3, [r4, #8]
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	6022      	str	r2, [r4, #0]
 80084d2:	701e      	strb	r6, [r3, #0]
 80084d4:	6962      	ldr	r2, [r4, #20]
 80084d6:	1c43      	adds	r3, r0, #1
 80084d8:	429a      	cmp	r2, r3
 80084da:	d004      	beq.n	80084e6 <__swbuf_r+0x5a>
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	07db      	lsls	r3, r3, #31
 80084e0:	d506      	bpl.n	80084f0 <__swbuf_r+0x64>
 80084e2:	2e0a      	cmp	r6, #10
 80084e4:	d104      	bne.n	80084f0 <__swbuf_r+0x64>
 80084e6:	4621      	mov	r1, r4
 80084e8:	4628      	mov	r0, r5
 80084ea:	f7ff ffa7 	bl	800843c <_fflush_r>
 80084ee:	b938      	cbnz	r0, 8008500 <__swbuf_r+0x74>
 80084f0:	4638      	mov	r0, r7
 80084f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084f4:	4621      	mov	r1, r4
 80084f6:	4628      	mov	r0, r5
 80084f8:	f000 f806 	bl	8008508 <__swsetup_r>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d0d5      	beq.n	80084ac <__swbuf_r+0x20>
 8008500:	f04f 37ff 	mov.w	r7, #4294967295
 8008504:	e7f4      	b.n	80084f0 <__swbuf_r+0x64>
	...

08008508 <__swsetup_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4b2a      	ldr	r3, [pc, #168]	; (80085b4 <__swsetup_r+0xac>)
 800850c:	4605      	mov	r5, r0
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	460c      	mov	r4, r1
 8008512:	b118      	cbz	r0, 800851c <__swsetup_r+0x14>
 8008514:	6a03      	ldr	r3, [r0, #32]
 8008516:	b90b      	cbnz	r3, 800851c <__swsetup_r+0x14>
 8008518:	f7fd f84e 	bl	80055b8 <__sinit>
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008522:	0718      	lsls	r0, r3, #28
 8008524:	d422      	bmi.n	800856c <__swsetup_r+0x64>
 8008526:	06d9      	lsls	r1, r3, #27
 8008528:	d407      	bmi.n	800853a <__swsetup_r+0x32>
 800852a:	2309      	movs	r3, #9
 800852c:	602b      	str	r3, [r5, #0]
 800852e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008532:	f04f 30ff 	mov.w	r0, #4294967295
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	e034      	b.n	80085a4 <__swsetup_r+0x9c>
 800853a:	0758      	lsls	r0, r3, #29
 800853c:	d512      	bpl.n	8008564 <__swsetup_r+0x5c>
 800853e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008540:	b141      	cbz	r1, 8008554 <__swsetup_r+0x4c>
 8008542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008546:	4299      	cmp	r1, r3
 8008548:	d002      	beq.n	8008550 <__swsetup_r+0x48>
 800854a:	4628      	mov	r0, r5
 800854c:	f7fe f824 	bl	8006598 <_free_r>
 8008550:	2300      	movs	r3, #0
 8008552:	6363      	str	r3, [r4, #52]	; 0x34
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800855a:	81a3      	strh	r3, [r4, #12]
 800855c:	2300      	movs	r3, #0
 800855e:	6063      	str	r3, [r4, #4]
 8008560:	6923      	ldr	r3, [r4, #16]
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	f043 0308 	orr.w	r3, r3, #8
 800856a:	81a3      	strh	r3, [r4, #12]
 800856c:	6923      	ldr	r3, [r4, #16]
 800856e:	b94b      	cbnz	r3, 8008584 <__swsetup_r+0x7c>
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800857a:	d003      	beq.n	8008584 <__swsetup_r+0x7c>
 800857c:	4621      	mov	r1, r4
 800857e:	4628      	mov	r0, r5
 8008580:	f000 fc6d 	bl	8008e5e <__smakebuf_r>
 8008584:	89a0      	ldrh	r0, [r4, #12]
 8008586:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800858a:	f010 0301 	ands.w	r3, r0, #1
 800858e:	d00a      	beq.n	80085a6 <__swsetup_r+0x9e>
 8008590:	2300      	movs	r3, #0
 8008592:	60a3      	str	r3, [r4, #8]
 8008594:	6963      	ldr	r3, [r4, #20]
 8008596:	425b      	negs	r3, r3
 8008598:	61a3      	str	r3, [r4, #24]
 800859a:	6923      	ldr	r3, [r4, #16]
 800859c:	b943      	cbnz	r3, 80085b0 <__swsetup_r+0xa8>
 800859e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085a2:	d1c4      	bne.n	800852e <__swsetup_r+0x26>
 80085a4:	bd38      	pop	{r3, r4, r5, pc}
 80085a6:	0781      	lsls	r1, r0, #30
 80085a8:	bf58      	it	pl
 80085aa:	6963      	ldrpl	r3, [r4, #20]
 80085ac:	60a3      	str	r3, [r4, #8]
 80085ae:	e7f4      	b.n	800859a <__swsetup_r+0x92>
 80085b0:	2000      	movs	r0, #0
 80085b2:	e7f7      	b.n	80085a4 <__swsetup_r+0x9c>
 80085b4:	20000080 	.word	0x20000080

080085b8 <memmove>:
 80085b8:	4288      	cmp	r0, r1
 80085ba:	b510      	push	{r4, lr}
 80085bc:	eb01 0402 	add.w	r4, r1, r2
 80085c0:	d902      	bls.n	80085c8 <memmove+0x10>
 80085c2:	4284      	cmp	r4, r0
 80085c4:	4623      	mov	r3, r4
 80085c6:	d807      	bhi.n	80085d8 <memmove+0x20>
 80085c8:	1e43      	subs	r3, r0, #1
 80085ca:	42a1      	cmp	r1, r4
 80085cc:	d008      	beq.n	80085e0 <memmove+0x28>
 80085ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085d6:	e7f8      	b.n	80085ca <memmove+0x12>
 80085d8:	4601      	mov	r1, r0
 80085da:	4402      	add	r2, r0
 80085dc:	428a      	cmp	r2, r1
 80085de:	d100      	bne.n	80085e2 <memmove+0x2a>
 80085e0:	bd10      	pop	{r4, pc}
 80085e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085ea:	e7f7      	b.n	80085dc <memmove+0x24>

080085ec <strncmp>:
 80085ec:	b510      	push	{r4, lr}
 80085ee:	b16a      	cbz	r2, 800860c <strncmp+0x20>
 80085f0:	3901      	subs	r1, #1
 80085f2:	1884      	adds	r4, r0, r2
 80085f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d103      	bne.n	8008608 <strncmp+0x1c>
 8008600:	42a0      	cmp	r0, r4
 8008602:	d001      	beq.n	8008608 <strncmp+0x1c>
 8008604:	2a00      	cmp	r2, #0
 8008606:	d1f5      	bne.n	80085f4 <strncmp+0x8>
 8008608:	1ad0      	subs	r0, r2, r3
 800860a:	bd10      	pop	{r4, pc}
 800860c:	4610      	mov	r0, r2
 800860e:	e7fc      	b.n	800860a <strncmp+0x1e>

08008610 <_sbrk_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	2300      	movs	r3, #0
 8008614:	4d05      	ldr	r5, [pc, #20]	; (800862c <_sbrk_r+0x1c>)
 8008616:	4604      	mov	r4, r0
 8008618:	4608      	mov	r0, r1
 800861a:	602b      	str	r3, [r5, #0]
 800861c:	f7fb fe4a 	bl	80042b4 <_sbrk>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_sbrk_r+0x1a>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	b103      	cbz	r3, 800862a <_sbrk_r+0x1a>
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	2000083c 	.word	0x2000083c

08008630 <nan>:
 8008630:	2000      	movs	r0, #0
 8008632:	4901      	ldr	r1, [pc, #4]	; (8008638 <nan+0x8>)
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	7ff80000 	.word	0x7ff80000

0800863c <__assert_func>:
 800863c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800863e:	4614      	mov	r4, r2
 8008640:	461a      	mov	r2, r3
 8008642:	4b09      	ldr	r3, [pc, #36]	; (8008668 <__assert_func+0x2c>)
 8008644:	4605      	mov	r5, r0
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68d8      	ldr	r0, [r3, #12]
 800864a:	b14c      	cbz	r4, 8008660 <__assert_func+0x24>
 800864c:	4b07      	ldr	r3, [pc, #28]	; (800866c <__assert_func+0x30>)
 800864e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008652:	9100      	str	r1, [sp, #0]
 8008654:	462b      	mov	r3, r5
 8008656:	4906      	ldr	r1, [pc, #24]	; (8008670 <__assert_func+0x34>)
 8008658:	f000 fbca 	bl	8008df0 <fiprintf>
 800865c:	f000 fc5e 	bl	8008f1c <abort>
 8008660:	4b04      	ldr	r3, [pc, #16]	; (8008674 <__assert_func+0x38>)
 8008662:	461c      	mov	r4, r3
 8008664:	e7f3      	b.n	800864e <__assert_func+0x12>
 8008666:	bf00      	nop
 8008668:	20000080 	.word	0x20000080
 800866c:	0800c0ba 	.word	0x0800c0ba
 8008670:	0800c0c7 	.word	0x0800c0c7
 8008674:	0800c0f5 	.word	0x0800c0f5

08008678 <_calloc_r>:
 8008678:	b570      	push	{r4, r5, r6, lr}
 800867a:	fba1 5402 	umull	r5, r4, r1, r2
 800867e:	b934      	cbnz	r4, 800868e <_calloc_r+0x16>
 8008680:	4629      	mov	r1, r5
 8008682:	f7fd fff9 	bl	8006678 <_malloc_r>
 8008686:	4606      	mov	r6, r0
 8008688:	b928      	cbnz	r0, 8008696 <_calloc_r+0x1e>
 800868a:	4630      	mov	r0, r6
 800868c:	bd70      	pop	{r4, r5, r6, pc}
 800868e:	220c      	movs	r2, #12
 8008690:	2600      	movs	r6, #0
 8008692:	6002      	str	r2, [r0, #0]
 8008694:	e7f9      	b.n	800868a <_calloc_r+0x12>
 8008696:	462a      	mov	r2, r5
 8008698:	4621      	mov	r1, r4
 800869a:	f7fd f86c 	bl	8005776 <memset>
 800869e:	e7f4      	b.n	800868a <_calloc_r+0x12>

080086a0 <rshift>:
 80086a0:	6903      	ldr	r3, [r0, #16]
 80086a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80086aa:	f100 0414 	add.w	r4, r0, #20
 80086ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80086b2:	dd46      	ble.n	8008742 <rshift+0xa2>
 80086b4:	f011 011f 	ands.w	r1, r1, #31
 80086b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80086bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80086c0:	d10c      	bne.n	80086dc <rshift+0x3c>
 80086c2:	4629      	mov	r1, r5
 80086c4:	f100 0710 	add.w	r7, r0, #16
 80086c8:	42b1      	cmp	r1, r6
 80086ca:	d335      	bcc.n	8008738 <rshift+0x98>
 80086cc:	1a9b      	subs	r3, r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	1eea      	subs	r2, r5, #3
 80086d2:	4296      	cmp	r6, r2
 80086d4:	bf38      	it	cc
 80086d6:	2300      	movcc	r3, #0
 80086d8:	4423      	add	r3, r4
 80086da:	e015      	b.n	8008708 <rshift+0x68>
 80086dc:	46a1      	mov	r9, r4
 80086de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80086e2:	f1c1 0820 	rsb	r8, r1, #32
 80086e6:	40cf      	lsrs	r7, r1
 80086e8:	f105 0e04 	add.w	lr, r5, #4
 80086ec:	4576      	cmp	r6, lr
 80086ee:	46f4      	mov	ip, lr
 80086f0:	d816      	bhi.n	8008720 <rshift+0x80>
 80086f2:	1a9a      	subs	r2, r3, r2
 80086f4:	0092      	lsls	r2, r2, #2
 80086f6:	3a04      	subs	r2, #4
 80086f8:	3501      	adds	r5, #1
 80086fa:	42ae      	cmp	r6, r5
 80086fc:	bf38      	it	cc
 80086fe:	2200      	movcc	r2, #0
 8008700:	18a3      	adds	r3, r4, r2
 8008702:	50a7      	str	r7, [r4, r2]
 8008704:	b107      	cbz	r7, 8008708 <rshift+0x68>
 8008706:	3304      	adds	r3, #4
 8008708:	42a3      	cmp	r3, r4
 800870a:	eba3 0204 	sub.w	r2, r3, r4
 800870e:	bf08      	it	eq
 8008710:	2300      	moveq	r3, #0
 8008712:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008716:	6102      	str	r2, [r0, #16]
 8008718:	bf08      	it	eq
 800871a:	6143      	streq	r3, [r0, #20]
 800871c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008720:	f8dc c000 	ldr.w	ip, [ip]
 8008724:	fa0c fc08 	lsl.w	ip, ip, r8
 8008728:	ea4c 0707 	orr.w	r7, ip, r7
 800872c:	f849 7b04 	str.w	r7, [r9], #4
 8008730:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008734:	40cf      	lsrs	r7, r1
 8008736:	e7d9      	b.n	80086ec <rshift+0x4c>
 8008738:	f851 cb04 	ldr.w	ip, [r1], #4
 800873c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008740:	e7c2      	b.n	80086c8 <rshift+0x28>
 8008742:	4623      	mov	r3, r4
 8008744:	e7e0      	b.n	8008708 <rshift+0x68>

08008746 <__hexdig_fun>:
 8008746:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800874a:	2b09      	cmp	r3, #9
 800874c:	d802      	bhi.n	8008754 <__hexdig_fun+0xe>
 800874e:	3820      	subs	r0, #32
 8008750:	b2c0      	uxtb	r0, r0
 8008752:	4770      	bx	lr
 8008754:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008758:	2b05      	cmp	r3, #5
 800875a:	d801      	bhi.n	8008760 <__hexdig_fun+0x1a>
 800875c:	3847      	subs	r0, #71	; 0x47
 800875e:	e7f7      	b.n	8008750 <__hexdig_fun+0xa>
 8008760:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008764:	2b05      	cmp	r3, #5
 8008766:	d801      	bhi.n	800876c <__hexdig_fun+0x26>
 8008768:	3827      	subs	r0, #39	; 0x27
 800876a:	e7f1      	b.n	8008750 <__hexdig_fun+0xa>
 800876c:	2000      	movs	r0, #0
 800876e:	4770      	bx	lr

08008770 <__gethex>:
 8008770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008774:	4681      	mov	r9, r0
 8008776:	468a      	mov	sl, r1
 8008778:	4617      	mov	r7, r2
 800877a:	680a      	ldr	r2, [r1, #0]
 800877c:	b085      	sub	sp, #20
 800877e:	f102 0b02 	add.w	fp, r2, #2
 8008782:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008786:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800878a:	9302      	str	r3, [sp, #8]
 800878c:	32fe      	adds	r2, #254	; 0xfe
 800878e:	eb02 030b 	add.w	r3, r2, fp
 8008792:	46d8      	mov	r8, fp
 8008794:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	2830      	cmp	r0, #48	; 0x30
 800879c:	d0f7      	beq.n	800878e <__gethex+0x1e>
 800879e:	f7ff ffd2 	bl	8008746 <__hexdig_fun>
 80087a2:	4604      	mov	r4, r0
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d138      	bne.n	800881a <__gethex+0xaa>
 80087a8:	2201      	movs	r2, #1
 80087aa:	4640      	mov	r0, r8
 80087ac:	49a7      	ldr	r1, [pc, #668]	; (8008a4c <__gethex+0x2dc>)
 80087ae:	f7ff ff1d 	bl	80085ec <strncmp>
 80087b2:	4606      	mov	r6, r0
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d169      	bne.n	800888c <__gethex+0x11c>
 80087b8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80087bc:	465d      	mov	r5, fp
 80087be:	f7ff ffc2 	bl	8008746 <__hexdig_fun>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d064      	beq.n	8008890 <__gethex+0x120>
 80087c6:	465a      	mov	r2, fp
 80087c8:	7810      	ldrb	r0, [r2, #0]
 80087ca:	4690      	mov	r8, r2
 80087cc:	2830      	cmp	r0, #48	; 0x30
 80087ce:	f102 0201 	add.w	r2, r2, #1
 80087d2:	d0f9      	beq.n	80087c8 <__gethex+0x58>
 80087d4:	f7ff ffb7 	bl	8008746 <__hexdig_fun>
 80087d8:	2301      	movs	r3, #1
 80087da:	fab0 f480 	clz	r4, r0
 80087de:	465e      	mov	r6, fp
 80087e0:	0964      	lsrs	r4, r4, #5
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	4642      	mov	r2, r8
 80087e6:	4615      	mov	r5, r2
 80087e8:	7828      	ldrb	r0, [r5, #0]
 80087ea:	3201      	adds	r2, #1
 80087ec:	f7ff ffab 	bl	8008746 <__hexdig_fun>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d1f8      	bne.n	80087e6 <__gethex+0x76>
 80087f4:	2201      	movs	r2, #1
 80087f6:	4628      	mov	r0, r5
 80087f8:	4994      	ldr	r1, [pc, #592]	; (8008a4c <__gethex+0x2dc>)
 80087fa:	f7ff fef7 	bl	80085ec <strncmp>
 80087fe:	b978      	cbnz	r0, 8008820 <__gethex+0xb0>
 8008800:	b946      	cbnz	r6, 8008814 <__gethex+0xa4>
 8008802:	1c6e      	adds	r6, r5, #1
 8008804:	4632      	mov	r2, r6
 8008806:	4615      	mov	r5, r2
 8008808:	7828      	ldrb	r0, [r5, #0]
 800880a:	3201      	adds	r2, #1
 800880c:	f7ff ff9b 	bl	8008746 <__hexdig_fun>
 8008810:	2800      	cmp	r0, #0
 8008812:	d1f8      	bne.n	8008806 <__gethex+0x96>
 8008814:	1b73      	subs	r3, r6, r5
 8008816:	009e      	lsls	r6, r3, #2
 8008818:	e004      	b.n	8008824 <__gethex+0xb4>
 800881a:	2400      	movs	r4, #0
 800881c:	4626      	mov	r6, r4
 800881e:	e7e1      	b.n	80087e4 <__gethex+0x74>
 8008820:	2e00      	cmp	r6, #0
 8008822:	d1f7      	bne.n	8008814 <__gethex+0xa4>
 8008824:	782b      	ldrb	r3, [r5, #0]
 8008826:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800882a:	2b50      	cmp	r3, #80	; 0x50
 800882c:	d13d      	bne.n	80088aa <__gethex+0x13a>
 800882e:	786b      	ldrb	r3, [r5, #1]
 8008830:	2b2b      	cmp	r3, #43	; 0x2b
 8008832:	d02f      	beq.n	8008894 <__gethex+0x124>
 8008834:	2b2d      	cmp	r3, #45	; 0x2d
 8008836:	d031      	beq.n	800889c <__gethex+0x12c>
 8008838:	f04f 0b00 	mov.w	fp, #0
 800883c:	1c69      	adds	r1, r5, #1
 800883e:	7808      	ldrb	r0, [r1, #0]
 8008840:	f7ff ff81 	bl	8008746 <__hexdig_fun>
 8008844:	1e42      	subs	r2, r0, #1
 8008846:	b2d2      	uxtb	r2, r2
 8008848:	2a18      	cmp	r2, #24
 800884a:	d82e      	bhi.n	80088aa <__gethex+0x13a>
 800884c:	f1a0 0210 	sub.w	r2, r0, #16
 8008850:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008854:	f7ff ff77 	bl	8008746 <__hexdig_fun>
 8008858:	f100 3cff 	add.w	ip, r0, #4294967295
 800885c:	fa5f fc8c 	uxtb.w	ip, ip
 8008860:	f1bc 0f18 	cmp.w	ip, #24
 8008864:	d91d      	bls.n	80088a2 <__gethex+0x132>
 8008866:	f1bb 0f00 	cmp.w	fp, #0
 800886a:	d000      	beq.n	800886e <__gethex+0xfe>
 800886c:	4252      	negs	r2, r2
 800886e:	4416      	add	r6, r2
 8008870:	f8ca 1000 	str.w	r1, [sl]
 8008874:	b1dc      	cbz	r4, 80088ae <__gethex+0x13e>
 8008876:	9b01      	ldr	r3, [sp, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	bf14      	ite	ne
 800887c:	f04f 0800 	movne.w	r8, #0
 8008880:	f04f 0806 	moveq.w	r8, #6
 8008884:	4640      	mov	r0, r8
 8008886:	b005      	add	sp, #20
 8008888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888c:	4645      	mov	r5, r8
 800888e:	4626      	mov	r6, r4
 8008890:	2401      	movs	r4, #1
 8008892:	e7c7      	b.n	8008824 <__gethex+0xb4>
 8008894:	f04f 0b00 	mov.w	fp, #0
 8008898:	1ca9      	adds	r1, r5, #2
 800889a:	e7d0      	b.n	800883e <__gethex+0xce>
 800889c:	f04f 0b01 	mov.w	fp, #1
 80088a0:	e7fa      	b.n	8008898 <__gethex+0x128>
 80088a2:	230a      	movs	r3, #10
 80088a4:	fb03 0002 	mla	r0, r3, r2, r0
 80088a8:	e7d0      	b.n	800884c <__gethex+0xdc>
 80088aa:	4629      	mov	r1, r5
 80088ac:	e7e0      	b.n	8008870 <__gethex+0x100>
 80088ae:	4621      	mov	r1, r4
 80088b0:	eba5 0308 	sub.w	r3, r5, r8
 80088b4:	3b01      	subs	r3, #1
 80088b6:	2b07      	cmp	r3, #7
 80088b8:	dc0a      	bgt.n	80088d0 <__gethex+0x160>
 80088ba:	4648      	mov	r0, r9
 80088bc:	f7fd ff68 	bl	8006790 <_Balloc>
 80088c0:	4604      	mov	r4, r0
 80088c2:	b940      	cbnz	r0, 80088d6 <__gethex+0x166>
 80088c4:	4602      	mov	r2, r0
 80088c6:	21e4      	movs	r1, #228	; 0xe4
 80088c8:	4b61      	ldr	r3, [pc, #388]	; (8008a50 <__gethex+0x2e0>)
 80088ca:	4862      	ldr	r0, [pc, #392]	; (8008a54 <__gethex+0x2e4>)
 80088cc:	f7ff feb6 	bl	800863c <__assert_func>
 80088d0:	3101      	adds	r1, #1
 80088d2:	105b      	asrs	r3, r3, #1
 80088d4:	e7ef      	b.n	80088b6 <__gethex+0x146>
 80088d6:	2300      	movs	r3, #0
 80088d8:	469b      	mov	fp, r3
 80088da:	f100 0a14 	add.w	sl, r0, #20
 80088de:	f8cd a004 	str.w	sl, [sp, #4]
 80088e2:	45a8      	cmp	r8, r5
 80088e4:	d344      	bcc.n	8008970 <__gethex+0x200>
 80088e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80088ea:	4658      	mov	r0, fp
 80088ec:	f848 bb04 	str.w	fp, [r8], #4
 80088f0:	eba8 080a 	sub.w	r8, r8, sl
 80088f4:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80088f8:	6122      	str	r2, [r4, #16]
 80088fa:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80088fe:	f7fe f839 	bl	8006974 <__hi0bits>
 8008902:	683d      	ldr	r5, [r7, #0]
 8008904:	eba8 0800 	sub.w	r8, r8, r0
 8008908:	45a8      	cmp	r8, r5
 800890a:	dd59      	ble.n	80089c0 <__gethex+0x250>
 800890c:	eba8 0805 	sub.w	r8, r8, r5
 8008910:	4641      	mov	r1, r8
 8008912:	4620      	mov	r0, r4
 8008914:	f7fe fbb7 	bl	8007086 <__any_on>
 8008918:	4683      	mov	fp, r0
 800891a:	b1b8      	cbz	r0, 800894c <__gethex+0x1dc>
 800891c:	f04f 0b01 	mov.w	fp, #1
 8008920:	f108 33ff 	add.w	r3, r8, #4294967295
 8008924:	1159      	asrs	r1, r3, #5
 8008926:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800892a:	f003 021f 	and.w	r2, r3, #31
 800892e:	fa0b f202 	lsl.w	r2, fp, r2
 8008932:	420a      	tst	r2, r1
 8008934:	d00a      	beq.n	800894c <__gethex+0x1dc>
 8008936:	455b      	cmp	r3, fp
 8008938:	dd06      	ble.n	8008948 <__gethex+0x1d8>
 800893a:	4620      	mov	r0, r4
 800893c:	f1a8 0102 	sub.w	r1, r8, #2
 8008940:	f7fe fba1 	bl	8007086 <__any_on>
 8008944:	2800      	cmp	r0, #0
 8008946:	d138      	bne.n	80089ba <__gethex+0x24a>
 8008948:	f04f 0b02 	mov.w	fp, #2
 800894c:	4641      	mov	r1, r8
 800894e:	4620      	mov	r0, r4
 8008950:	f7ff fea6 	bl	80086a0 <rshift>
 8008954:	4446      	add	r6, r8
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	42b3      	cmp	r3, r6
 800895a:	da41      	bge.n	80089e0 <__gethex+0x270>
 800895c:	4621      	mov	r1, r4
 800895e:	4648      	mov	r0, r9
 8008960:	f7fd ff56 	bl	8006810 <_Bfree>
 8008964:	2300      	movs	r3, #0
 8008966:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008968:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800896c:	6013      	str	r3, [r2, #0]
 800896e:	e789      	b.n	8008884 <__gethex+0x114>
 8008970:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008974:	2a2e      	cmp	r2, #46	; 0x2e
 8008976:	d014      	beq.n	80089a2 <__gethex+0x232>
 8008978:	2b20      	cmp	r3, #32
 800897a:	d106      	bne.n	800898a <__gethex+0x21a>
 800897c:	9b01      	ldr	r3, [sp, #4]
 800897e:	f843 bb04 	str.w	fp, [r3], #4
 8008982:	f04f 0b00 	mov.w	fp, #0
 8008986:	9301      	str	r3, [sp, #4]
 8008988:	465b      	mov	r3, fp
 800898a:	7828      	ldrb	r0, [r5, #0]
 800898c:	9303      	str	r3, [sp, #12]
 800898e:	f7ff feda 	bl	8008746 <__hexdig_fun>
 8008992:	9b03      	ldr	r3, [sp, #12]
 8008994:	f000 000f 	and.w	r0, r0, #15
 8008998:	4098      	lsls	r0, r3
 800899a:	ea4b 0b00 	orr.w	fp, fp, r0
 800899e:	3304      	adds	r3, #4
 80089a0:	e79f      	b.n	80088e2 <__gethex+0x172>
 80089a2:	45a8      	cmp	r8, r5
 80089a4:	d8e8      	bhi.n	8008978 <__gethex+0x208>
 80089a6:	2201      	movs	r2, #1
 80089a8:	4628      	mov	r0, r5
 80089aa:	4928      	ldr	r1, [pc, #160]	; (8008a4c <__gethex+0x2dc>)
 80089ac:	9303      	str	r3, [sp, #12]
 80089ae:	f7ff fe1d 	bl	80085ec <strncmp>
 80089b2:	9b03      	ldr	r3, [sp, #12]
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d1df      	bne.n	8008978 <__gethex+0x208>
 80089b8:	e793      	b.n	80088e2 <__gethex+0x172>
 80089ba:	f04f 0b03 	mov.w	fp, #3
 80089be:	e7c5      	b.n	800894c <__gethex+0x1dc>
 80089c0:	da0b      	bge.n	80089da <__gethex+0x26a>
 80089c2:	eba5 0808 	sub.w	r8, r5, r8
 80089c6:	4621      	mov	r1, r4
 80089c8:	4642      	mov	r2, r8
 80089ca:	4648      	mov	r0, r9
 80089cc:	f7fe f938 	bl	8006c40 <__lshift>
 80089d0:	4604      	mov	r4, r0
 80089d2:	eba6 0608 	sub.w	r6, r6, r8
 80089d6:	f100 0a14 	add.w	sl, r0, #20
 80089da:	f04f 0b00 	mov.w	fp, #0
 80089de:	e7ba      	b.n	8008956 <__gethex+0x1e6>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	42b3      	cmp	r3, r6
 80089e4:	dd74      	ble.n	8008ad0 <__gethex+0x360>
 80089e6:	1b9e      	subs	r6, r3, r6
 80089e8:	42b5      	cmp	r5, r6
 80089ea:	dc35      	bgt.n	8008a58 <__gethex+0x2e8>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d023      	beq.n	8008a3a <__gethex+0x2ca>
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d025      	beq.n	8008a42 <__gethex+0x2d2>
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d115      	bne.n	8008a26 <__gethex+0x2b6>
 80089fa:	42b5      	cmp	r5, r6
 80089fc:	d113      	bne.n	8008a26 <__gethex+0x2b6>
 80089fe:	2d01      	cmp	r5, #1
 8008a00:	d10b      	bne.n	8008a1a <__gethex+0x2aa>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	9a02      	ldr	r2, [sp, #8]
 8008a06:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	6123      	str	r3, [r4, #16]
 8008a10:	f8ca 3000 	str.w	r3, [sl]
 8008a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a16:	601c      	str	r4, [r3, #0]
 8008a18:	e734      	b.n	8008884 <__gethex+0x114>
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	1e69      	subs	r1, r5, #1
 8008a1e:	f7fe fb32 	bl	8007086 <__any_on>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d1ed      	bne.n	8008a02 <__gethex+0x292>
 8008a26:	4621      	mov	r1, r4
 8008a28:	4648      	mov	r0, r9
 8008a2a:	f7fd fef1 	bl	8006810 <_Bfree>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a32:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	e724      	b.n	8008884 <__gethex+0x114>
 8008a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1f2      	bne.n	8008a26 <__gethex+0x2b6>
 8008a40:	e7df      	b.n	8008a02 <__gethex+0x292>
 8008a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1dc      	bne.n	8008a02 <__gethex+0x292>
 8008a48:	e7ed      	b.n	8008a26 <__gethex+0x2b6>
 8008a4a:	bf00      	nop
 8008a4c:	0800bf4c 	.word	0x0800bf4c
 8008a50:	0800bde1 	.word	0x0800bde1
 8008a54:	0800c0f6 	.word	0x0800c0f6
 8008a58:	f106 38ff 	add.w	r8, r6, #4294967295
 8008a5c:	f1bb 0f00 	cmp.w	fp, #0
 8008a60:	d133      	bne.n	8008aca <__gethex+0x35a>
 8008a62:	f1b8 0f00 	cmp.w	r8, #0
 8008a66:	d004      	beq.n	8008a72 <__gethex+0x302>
 8008a68:	4641      	mov	r1, r8
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f7fe fb0b 	bl	8007086 <__any_on>
 8008a70:	4683      	mov	fp, r0
 8008a72:	2301      	movs	r3, #1
 8008a74:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008a78:	f008 081f 	and.w	r8, r8, #31
 8008a7c:	fa03 f308 	lsl.w	r3, r3, r8
 8008a80:	f04f 0802 	mov.w	r8, #2
 8008a84:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4213      	tst	r3, r2
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	bf18      	it	ne
 8008a90:	f04b 0b02 	orrne.w	fp, fp, #2
 8008a94:	1bad      	subs	r5, r5, r6
 8008a96:	f7ff fe03 	bl	80086a0 <rshift>
 8008a9a:	687e      	ldr	r6, [r7, #4]
 8008a9c:	f1bb 0f00 	cmp.w	fp, #0
 8008aa0:	d04a      	beq.n	8008b38 <__gethex+0x3c8>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d016      	beq.n	8008ad6 <__gethex+0x366>
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d018      	beq.n	8008ade <__gethex+0x36e>
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d109      	bne.n	8008ac4 <__gethex+0x354>
 8008ab0:	f01b 0f02 	tst.w	fp, #2
 8008ab4:	d006      	beq.n	8008ac4 <__gethex+0x354>
 8008ab6:	f8da 3000 	ldr.w	r3, [sl]
 8008aba:	ea4b 0b03 	orr.w	fp, fp, r3
 8008abe:	f01b 0f01 	tst.w	fp, #1
 8008ac2:	d10f      	bne.n	8008ae4 <__gethex+0x374>
 8008ac4:	f048 0810 	orr.w	r8, r8, #16
 8008ac8:	e036      	b.n	8008b38 <__gethex+0x3c8>
 8008aca:	f04f 0b01 	mov.w	fp, #1
 8008ace:	e7d0      	b.n	8008a72 <__gethex+0x302>
 8008ad0:	f04f 0801 	mov.w	r8, #1
 8008ad4:	e7e2      	b.n	8008a9c <__gethex+0x32c>
 8008ad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ad8:	f1c3 0301 	rsb	r3, r3, #1
 8008adc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d0ef      	beq.n	8008ac4 <__gethex+0x354>
 8008ae4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ae8:	f104 0214 	add.w	r2, r4, #20
 8008aec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	2300      	movs	r3, #0
 8008af4:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008af8:	4694      	mov	ip, r2
 8008afa:	f852 1b04 	ldr.w	r1, [r2], #4
 8008afe:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008b02:	d01e      	beq.n	8008b42 <__gethex+0x3d2>
 8008b04:	3101      	adds	r1, #1
 8008b06:	f8cc 1000 	str.w	r1, [ip]
 8008b0a:	f1b8 0f02 	cmp.w	r8, #2
 8008b0e:	f104 0214 	add.w	r2, r4, #20
 8008b12:	d13d      	bne.n	8008b90 <__gethex+0x420>
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	3b01      	subs	r3, #1
 8008b18:	42ab      	cmp	r3, r5
 8008b1a:	d10b      	bne.n	8008b34 <__gethex+0x3c4>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	1169      	asrs	r1, r5, #5
 8008b20:	f005 051f 	and.w	r5, r5, #31
 8008b24:	fa03 f505 	lsl.w	r5, r3, r5
 8008b28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b2c:	421d      	tst	r5, r3
 8008b2e:	bf18      	it	ne
 8008b30:	f04f 0801 	movne.w	r8, #1
 8008b34:	f048 0820 	orr.w	r8, r8, #32
 8008b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b3a:	601c      	str	r4, [r3, #0]
 8008b3c:	9b02      	ldr	r3, [sp, #8]
 8008b3e:	601e      	str	r6, [r3, #0]
 8008b40:	e6a0      	b.n	8008884 <__gethex+0x114>
 8008b42:	4290      	cmp	r0, r2
 8008b44:	f842 3c04 	str.w	r3, [r2, #-4]
 8008b48:	d8d6      	bhi.n	8008af8 <__gethex+0x388>
 8008b4a:	68a2      	ldr	r2, [r4, #8]
 8008b4c:	4593      	cmp	fp, r2
 8008b4e:	db17      	blt.n	8008b80 <__gethex+0x410>
 8008b50:	6861      	ldr	r1, [r4, #4]
 8008b52:	4648      	mov	r0, r9
 8008b54:	3101      	adds	r1, #1
 8008b56:	f7fd fe1b 	bl	8006790 <_Balloc>
 8008b5a:	4682      	mov	sl, r0
 8008b5c:	b918      	cbnz	r0, 8008b66 <__gethex+0x3f6>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	2184      	movs	r1, #132	; 0x84
 8008b62:	4b1a      	ldr	r3, [pc, #104]	; (8008bcc <__gethex+0x45c>)
 8008b64:	e6b1      	b.n	80088ca <__gethex+0x15a>
 8008b66:	6922      	ldr	r2, [r4, #16]
 8008b68:	f104 010c 	add.w	r1, r4, #12
 8008b6c:	3202      	adds	r2, #2
 8008b6e:	0092      	lsls	r2, r2, #2
 8008b70:	300c      	adds	r0, #12
 8008b72:	f7fc fe8e 	bl	8005892 <memcpy>
 8008b76:	4621      	mov	r1, r4
 8008b78:	4648      	mov	r0, r9
 8008b7a:	f7fd fe49 	bl	8006810 <_Bfree>
 8008b7e:	4654      	mov	r4, sl
 8008b80:	6922      	ldr	r2, [r4, #16]
 8008b82:	1c51      	adds	r1, r2, #1
 8008b84:	6121      	str	r1, [r4, #16]
 8008b86:	2101      	movs	r1, #1
 8008b88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008b8c:	6151      	str	r1, [r2, #20]
 8008b8e:	e7bc      	b.n	8008b0a <__gethex+0x39a>
 8008b90:	6921      	ldr	r1, [r4, #16]
 8008b92:	4559      	cmp	r1, fp
 8008b94:	dd0b      	ble.n	8008bae <__gethex+0x43e>
 8008b96:	2101      	movs	r1, #1
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f7ff fd81 	bl	80086a0 <rshift>
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	3601      	adds	r6, #1
 8008ba2:	42b3      	cmp	r3, r6
 8008ba4:	f6ff aeda 	blt.w	800895c <__gethex+0x1ec>
 8008ba8:	f04f 0801 	mov.w	r8, #1
 8008bac:	e7c2      	b.n	8008b34 <__gethex+0x3c4>
 8008bae:	f015 051f 	ands.w	r5, r5, #31
 8008bb2:	d0f9      	beq.n	8008ba8 <__gethex+0x438>
 8008bb4:	9b01      	ldr	r3, [sp, #4]
 8008bb6:	f1c5 0520 	rsb	r5, r5, #32
 8008bba:	441a      	add	r2, r3
 8008bbc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008bc0:	f7fd fed8 	bl	8006974 <__hi0bits>
 8008bc4:	42a8      	cmp	r0, r5
 8008bc6:	dbe6      	blt.n	8008b96 <__gethex+0x426>
 8008bc8:	e7ee      	b.n	8008ba8 <__gethex+0x438>
 8008bca:	bf00      	nop
 8008bcc:	0800bde1 	.word	0x0800bde1

08008bd0 <L_shift>:
 8008bd0:	f1c2 0208 	rsb	r2, r2, #8
 8008bd4:	0092      	lsls	r2, r2, #2
 8008bd6:	b570      	push	{r4, r5, r6, lr}
 8008bd8:	f1c2 0620 	rsb	r6, r2, #32
 8008bdc:	6843      	ldr	r3, [r0, #4]
 8008bde:	6804      	ldr	r4, [r0, #0]
 8008be0:	fa03 f506 	lsl.w	r5, r3, r6
 8008be4:	432c      	orrs	r4, r5
 8008be6:	40d3      	lsrs	r3, r2
 8008be8:	6004      	str	r4, [r0, #0]
 8008bea:	f840 3f04 	str.w	r3, [r0, #4]!
 8008bee:	4288      	cmp	r0, r1
 8008bf0:	d3f4      	bcc.n	8008bdc <L_shift+0xc>
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}

08008bf4 <__match>:
 8008bf4:	b530      	push	{r4, r5, lr}
 8008bf6:	6803      	ldr	r3, [r0, #0]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bfe:	b914      	cbnz	r4, 8008c06 <__match+0x12>
 8008c00:	6003      	str	r3, [r0, #0]
 8008c02:	2001      	movs	r0, #1
 8008c04:	bd30      	pop	{r4, r5, pc}
 8008c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008c0e:	2d19      	cmp	r5, #25
 8008c10:	bf98      	it	ls
 8008c12:	3220      	addls	r2, #32
 8008c14:	42a2      	cmp	r2, r4
 8008c16:	d0f0      	beq.n	8008bfa <__match+0x6>
 8008c18:	2000      	movs	r0, #0
 8008c1a:	e7f3      	b.n	8008c04 <__match+0x10>

08008c1c <__hexnan>:
 8008c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c20:	2500      	movs	r5, #0
 8008c22:	680b      	ldr	r3, [r1, #0]
 8008c24:	4682      	mov	sl, r0
 8008c26:	115e      	asrs	r6, r3, #5
 8008c28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c2c:	f013 031f 	ands.w	r3, r3, #31
 8008c30:	bf18      	it	ne
 8008c32:	3604      	addne	r6, #4
 8008c34:	1f37      	subs	r7, r6, #4
 8008c36:	4690      	mov	r8, r2
 8008c38:	46b9      	mov	r9, r7
 8008c3a:	463c      	mov	r4, r7
 8008c3c:	46ab      	mov	fp, r5
 8008c3e:	b087      	sub	sp, #28
 8008c40:	6801      	ldr	r1, [r0, #0]
 8008c42:	9301      	str	r3, [sp, #4]
 8008c44:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c48:	9502      	str	r5, [sp, #8]
 8008c4a:	784a      	ldrb	r2, [r1, #1]
 8008c4c:	1c4b      	adds	r3, r1, #1
 8008c4e:	9303      	str	r3, [sp, #12]
 8008c50:	b342      	cbz	r2, 8008ca4 <__hexnan+0x88>
 8008c52:	4610      	mov	r0, r2
 8008c54:	9105      	str	r1, [sp, #20]
 8008c56:	9204      	str	r2, [sp, #16]
 8008c58:	f7ff fd75 	bl	8008746 <__hexdig_fun>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d14f      	bne.n	8008d00 <__hexnan+0xe4>
 8008c60:	9a04      	ldr	r2, [sp, #16]
 8008c62:	9905      	ldr	r1, [sp, #20]
 8008c64:	2a20      	cmp	r2, #32
 8008c66:	d818      	bhi.n	8008c9a <__hexnan+0x7e>
 8008c68:	9b02      	ldr	r3, [sp, #8]
 8008c6a:	459b      	cmp	fp, r3
 8008c6c:	dd13      	ble.n	8008c96 <__hexnan+0x7a>
 8008c6e:	454c      	cmp	r4, r9
 8008c70:	d206      	bcs.n	8008c80 <__hexnan+0x64>
 8008c72:	2d07      	cmp	r5, #7
 8008c74:	dc04      	bgt.n	8008c80 <__hexnan+0x64>
 8008c76:	462a      	mov	r2, r5
 8008c78:	4649      	mov	r1, r9
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f7ff ffa8 	bl	8008bd0 <L_shift>
 8008c80:	4544      	cmp	r4, r8
 8008c82:	d950      	bls.n	8008d26 <__hexnan+0x10a>
 8008c84:	2300      	movs	r3, #0
 8008c86:	f1a4 0904 	sub.w	r9, r4, #4
 8008c8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c8e:	461d      	mov	r5, r3
 8008c90:	464c      	mov	r4, r9
 8008c92:	f8cd b008 	str.w	fp, [sp, #8]
 8008c96:	9903      	ldr	r1, [sp, #12]
 8008c98:	e7d7      	b.n	8008c4a <__hexnan+0x2e>
 8008c9a:	2a29      	cmp	r2, #41	; 0x29
 8008c9c:	d155      	bne.n	8008d4a <__hexnan+0x12e>
 8008c9e:	3102      	adds	r1, #2
 8008ca0:	f8ca 1000 	str.w	r1, [sl]
 8008ca4:	f1bb 0f00 	cmp.w	fp, #0
 8008ca8:	d04f      	beq.n	8008d4a <__hexnan+0x12e>
 8008caa:	454c      	cmp	r4, r9
 8008cac:	d206      	bcs.n	8008cbc <__hexnan+0xa0>
 8008cae:	2d07      	cmp	r5, #7
 8008cb0:	dc04      	bgt.n	8008cbc <__hexnan+0xa0>
 8008cb2:	462a      	mov	r2, r5
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f7ff ff8a 	bl	8008bd0 <L_shift>
 8008cbc:	4544      	cmp	r4, r8
 8008cbe:	d934      	bls.n	8008d2a <__hexnan+0x10e>
 8008cc0:	4623      	mov	r3, r4
 8008cc2:	f1a8 0204 	sub.w	r2, r8, #4
 8008cc6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008cca:	429f      	cmp	r7, r3
 8008ccc:	f842 1f04 	str.w	r1, [r2, #4]!
 8008cd0:	d2f9      	bcs.n	8008cc6 <__hexnan+0xaa>
 8008cd2:	1b3b      	subs	r3, r7, r4
 8008cd4:	f023 0303 	bic.w	r3, r3, #3
 8008cd8:	3304      	adds	r3, #4
 8008cda:	3e03      	subs	r6, #3
 8008cdc:	3401      	adds	r4, #1
 8008cde:	42a6      	cmp	r6, r4
 8008ce0:	bf38      	it	cc
 8008ce2:	2304      	movcc	r3, #4
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4443      	add	r3, r8
 8008ce8:	f843 2b04 	str.w	r2, [r3], #4
 8008cec:	429f      	cmp	r7, r3
 8008cee:	d2fb      	bcs.n	8008ce8 <__hexnan+0xcc>
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	b91b      	cbnz	r3, 8008cfc <__hexnan+0xe0>
 8008cf4:	4547      	cmp	r7, r8
 8008cf6:	d126      	bne.n	8008d46 <__hexnan+0x12a>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	603b      	str	r3, [r7, #0]
 8008cfc:	2005      	movs	r0, #5
 8008cfe:	e025      	b.n	8008d4c <__hexnan+0x130>
 8008d00:	3501      	adds	r5, #1
 8008d02:	2d08      	cmp	r5, #8
 8008d04:	f10b 0b01 	add.w	fp, fp, #1
 8008d08:	dd06      	ble.n	8008d18 <__hexnan+0xfc>
 8008d0a:	4544      	cmp	r4, r8
 8008d0c:	d9c3      	bls.n	8008c96 <__hexnan+0x7a>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2501      	movs	r5, #1
 8008d12:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d16:	3c04      	subs	r4, #4
 8008d18:	6822      	ldr	r2, [r4, #0]
 8008d1a:	f000 000f 	and.w	r0, r0, #15
 8008d1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008d22:	6020      	str	r0, [r4, #0]
 8008d24:	e7b7      	b.n	8008c96 <__hexnan+0x7a>
 8008d26:	2508      	movs	r5, #8
 8008d28:	e7b5      	b.n	8008c96 <__hexnan+0x7a>
 8008d2a:	9b01      	ldr	r3, [sp, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d0df      	beq.n	8008cf0 <__hexnan+0xd4>
 8008d30:	f04f 32ff 	mov.w	r2, #4294967295
 8008d34:	f1c3 0320 	rsb	r3, r3, #32
 8008d38:	40da      	lsrs	r2, r3
 8008d3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	f846 3c04 	str.w	r3, [r6, #-4]
 8008d44:	e7d4      	b.n	8008cf0 <__hexnan+0xd4>
 8008d46:	3f04      	subs	r7, #4
 8008d48:	e7d2      	b.n	8008cf0 <__hexnan+0xd4>
 8008d4a:	2004      	movs	r0, #4
 8008d4c:	b007      	add	sp, #28
 8008d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d52 <__ascii_mbtowc>:
 8008d52:	b082      	sub	sp, #8
 8008d54:	b901      	cbnz	r1, 8008d58 <__ascii_mbtowc+0x6>
 8008d56:	a901      	add	r1, sp, #4
 8008d58:	b142      	cbz	r2, 8008d6c <__ascii_mbtowc+0x1a>
 8008d5a:	b14b      	cbz	r3, 8008d70 <__ascii_mbtowc+0x1e>
 8008d5c:	7813      	ldrb	r3, [r2, #0]
 8008d5e:	600b      	str	r3, [r1, #0]
 8008d60:	7812      	ldrb	r2, [r2, #0]
 8008d62:	1e10      	subs	r0, r2, #0
 8008d64:	bf18      	it	ne
 8008d66:	2001      	movne	r0, #1
 8008d68:	b002      	add	sp, #8
 8008d6a:	4770      	bx	lr
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	e7fb      	b.n	8008d68 <__ascii_mbtowc+0x16>
 8008d70:	f06f 0001 	mvn.w	r0, #1
 8008d74:	e7f8      	b.n	8008d68 <__ascii_mbtowc+0x16>

08008d76 <_realloc_r>:
 8008d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d7a:	4680      	mov	r8, r0
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	460e      	mov	r6, r1
 8008d80:	b921      	cbnz	r1, 8008d8c <_realloc_r+0x16>
 8008d82:	4611      	mov	r1, r2
 8008d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d88:	f7fd bc76 	b.w	8006678 <_malloc_r>
 8008d8c:	b92a      	cbnz	r2, 8008d9a <_realloc_r+0x24>
 8008d8e:	f7fd fc03 	bl	8006598 <_free_r>
 8008d92:	4625      	mov	r5, r4
 8008d94:	4628      	mov	r0, r5
 8008d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d9a:	f000 f8c6 	bl	8008f2a <_malloc_usable_size_r>
 8008d9e:	4284      	cmp	r4, r0
 8008da0:	4607      	mov	r7, r0
 8008da2:	d802      	bhi.n	8008daa <_realloc_r+0x34>
 8008da4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008da8:	d812      	bhi.n	8008dd0 <_realloc_r+0x5a>
 8008daa:	4621      	mov	r1, r4
 8008dac:	4640      	mov	r0, r8
 8008dae:	f7fd fc63 	bl	8006678 <_malloc_r>
 8008db2:	4605      	mov	r5, r0
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d0ed      	beq.n	8008d94 <_realloc_r+0x1e>
 8008db8:	42bc      	cmp	r4, r7
 8008dba:	4622      	mov	r2, r4
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	bf28      	it	cs
 8008dc0:	463a      	movcs	r2, r7
 8008dc2:	f7fc fd66 	bl	8005892 <memcpy>
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	4640      	mov	r0, r8
 8008dca:	f7fd fbe5 	bl	8006598 <_free_r>
 8008dce:	e7e1      	b.n	8008d94 <_realloc_r+0x1e>
 8008dd0:	4635      	mov	r5, r6
 8008dd2:	e7df      	b.n	8008d94 <_realloc_r+0x1e>

08008dd4 <__ascii_wctomb>:
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	4608      	mov	r0, r1
 8008dd8:	b141      	cbz	r1, 8008dec <__ascii_wctomb+0x18>
 8008dda:	2aff      	cmp	r2, #255	; 0xff
 8008ddc:	d904      	bls.n	8008de8 <__ascii_wctomb+0x14>
 8008dde:	228a      	movs	r2, #138	; 0x8a
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	4770      	bx	lr
 8008de8:	2001      	movs	r0, #1
 8008dea:	700a      	strb	r2, [r1, #0]
 8008dec:	4770      	bx	lr
	...

08008df0 <fiprintf>:
 8008df0:	b40e      	push	{r1, r2, r3}
 8008df2:	b503      	push	{r0, r1, lr}
 8008df4:	4601      	mov	r1, r0
 8008df6:	ab03      	add	r3, sp, #12
 8008df8:	4805      	ldr	r0, [pc, #20]	; (8008e10 <fiprintf+0x20>)
 8008dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfe:	6800      	ldr	r0, [r0, #0]
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	f7ff f97f 	bl	8008104 <_vfiprintf_r>
 8008e06:	b002      	add	sp, #8
 8008e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e0c:	b003      	add	sp, #12
 8008e0e:	4770      	bx	lr
 8008e10:	20000080 	.word	0x20000080

08008e14 <__swhatbuf_r>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	460c      	mov	r4, r1
 8008e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1c:	4615      	mov	r5, r2
 8008e1e:	2900      	cmp	r1, #0
 8008e20:	461e      	mov	r6, r3
 8008e22:	b096      	sub	sp, #88	; 0x58
 8008e24:	da0c      	bge.n	8008e40 <__swhatbuf_r+0x2c>
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	2100      	movs	r1, #0
 8008e2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e2e:	bf0c      	ite	eq
 8008e30:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008e34:	2340      	movne	r3, #64	; 0x40
 8008e36:	2000      	movs	r0, #0
 8008e38:	6031      	str	r1, [r6, #0]
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	b016      	add	sp, #88	; 0x58
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}
 8008e40:	466a      	mov	r2, sp
 8008e42:	f000 f849 	bl	8008ed8 <_fstat_r>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	dbed      	blt.n	8008e26 <__swhatbuf_r+0x12>
 8008e4a:	9901      	ldr	r1, [sp, #4]
 8008e4c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008e50:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008e54:	4259      	negs	r1, r3
 8008e56:	4159      	adcs	r1, r3
 8008e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e5c:	e7eb      	b.n	8008e36 <__swhatbuf_r+0x22>

08008e5e <__smakebuf_r>:
 8008e5e:	898b      	ldrh	r3, [r1, #12]
 8008e60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e62:	079d      	lsls	r5, r3, #30
 8008e64:	4606      	mov	r6, r0
 8008e66:	460c      	mov	r4, r1
 8008e68:	d507      	bpl.n	8008e7a <__smakebuf_r+0x1c>
 8008e6a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	6123      	str	r3, [r4, #16]
 8008e72:	2301      	movs	r3, #1
 8008e74:	6163      	str	r3, [r4, #20]
 8008e76:	b002      	add	sp, #8
 8008e78:	bd70      	pop	{r4, r5, r6, pc}
 8008e7a:	466a      	mov	r2, sp
 8008e7c:	ab01      	add	r3, sp, #4
 8008e7e:	f7ff ffc9 	bl	8008e14 <__swhatbuf_r>
 8008e82:	9900      	ldr	r1, [sp, #0]
 8008e84:	4605      	mov	r5, r0
 8008e86:	4630      	mov	r0, r6
 8008e88:	f7fd fbf6 	bl	8006678 <_malloc_r>
 8008e8c:	b948      	cbnz	r0, 8008ea2 <__smakebuf_r+0x44>
 8008e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e92:	059a      	lsls	r2, r3, #22
 8008e94:	d4ef      	bmi.n	8008e76 <__smakebuf_r+0x18>
 8008e96:	f023 0303 	bic.w	r3, r3, #3
 8008e9a:	f043 0302 	orr.w	r3, r3, #2
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	e7e3      	b.n	8008e6a <__smakebuf_r+0xc>
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	6020      	str	r0, [r4, #0]
 8008ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eaa:	81a3      	strh	r3, [r4, #12]
 8008eac:	9b00      	ldr	r3, [sp, #0]
 8008eae:	6120      	str	r0, [r4, #16]
 8008eb0:	6163      	str	r3, [r4, #20]
 8008eb2:	9b01      	ldr	r3, [sp, #4]
 8008eb4:	b15b      	cbz	r3, 8008ece <__smakebuf_r+0x70>
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ebc:	f000 f81e 	bl	8008efc <_isatty_r>
 8008ec0:	b128      	cbz	r0, 8008ece <__smakebuf_r+0x70>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f023 0303 	bic.w	r3, r3, #3
 8008ec8:	f043 0301 	orr.w	r3, r3, #1
 8008ecc:	81a3      	strh	r3, [r4, #12]
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	431d      	orrs	r5, r3
 8008ed2:	81a5      	strh	r5, [r4, #12]
 8008ed4:	e7cf      	b.n	8008e76 <__smakebuf_r+0x18>
	...

08008ed8 <_fstat_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	2300      	movs	r3, #0
 8008edc:	4d06      	ldr	r5, [pc, #24]	; (8008ef8 <_fstat_r+0x20>)
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	602b      	str	r3, [r5, #0]
 8008ee6:	f7fb f9c0 	bl	800426a <_fstat>
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	d102      	bne.n	8008ef4 <_fstat_r+0x1c>
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	b103      	cbz	r3, 8008ef4 <_fstat_r+0x1c>
 8008ef2:	6023      	str	r3, [r4, #0]
 8008ef4:	bd38      	pop	{r3, r4, r5, pc}
 8008ef6:	bf00      	nop
 8008ef8:	2000083c 	.word	0x2000083c

08008efc <_isatty_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	2300      	movs	r3, #0
 8008f00:	4d05      	ldr	r5, [pc, #20]	; (8008f18 <_isatty_r+0x1c>)
 8008f02:	4604      	mov	r4, r0
 8008f04:	4608      	mov	r0, r1
 8008f06:	602b      	str	r3, [r5, #0]
 8008f08:	f7fb f9be 	bl	8004288 <_isatty>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d102      	bne.n	8008f16 <_isatty_r+0x1a>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	b103      	cbz	r3, 8008f16 <_isatty_r+0x1a>
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	2000083c 	.word	0x2000083c

08008f1c <abort>:
 8008f1c:	2006      	movs	r0, #6
 8008f1e:	b508      	push	{r3, lr}
 8008f20:	f000 f834 	bl	8008f8c <raise>
 8008f24:	2001      	movs	r0, #1
 8008f26:	f7fb f96e 	bl	8004206 <_exit>

08008f2a <_malloc_usable_size_r>:
 8008f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f2e:	1f18      	subs	r0, r3, #4
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	bfbc      	itt	lt
 8008f34:	580b      	ldrlt	r3, [r1, r0]
 8008f36:	18c0      	addlt	r0, r0, r3
 8008f38:	4770      	bx	lr

08008f3a <_raise_r>:
 8008f3a:	291f      	cmp	r1, #31
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4604      	mov	r4, r0
 8008f40:	460d      	mov	r5, r1
 8008f42:	d904      	bls.n	8008f4e <_raise_r+0x14>
 8008f44:	2316      	movs	r3, #22
 8008f46:	6003      	str	r3, [r0, #0]
 8008f48:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4c:	bd38      	pop	{r3, r4, r5, pc}
 8008f4e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f50:	b112      	cbz	r2, 8008f58 <_raise_r+0x1e>
 8008f52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f56:	b94b      	cbnz	r3, 8008f6c <_raise_r+0x32>
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f000 f831 	bl	8008fc0 <_getpid_r>
 8008f5e:	462a      	mov	r2, r5
 8008f60:	4601      	mov	r1, r0
 8008f62:	4620      	mov	r0, r4
 8008f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f68:	f000 b818 	b.w	8008f9c <_kill_r>
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d00a      	beq.n	8008f86 <_raise_r+0x4c>
 8008f70:	1c59      	adds	r1, r3, #1
 8008f72:	d103      	bne.n	8008f7c <_raise_r+0x42>
 8008f74:	2316      	movs	r3, #22
 8008f76:	6003      	str	r3, [r0, #0]
 8008f78:	2001      	movs	r0, #1
 8008f7a:	e7e7      	b.n	8008f4c <_raise_r+0x12>
 8008f7c:	2400      	movs	r4, #0
 8008f7e:	4628      	mov	r0, r5
 8008f80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f84:	4798      	blx	r3
 8008f86:	2000      	movs	r0, #0
 8008f88:	e7e0      	b.n	8008f4c <_raise_r+0x12>
	...

08008f8c <raise>:
 8008f8c:	4b02      	ldr	r3, [pc, #8]	; (8008f98 <raise+0xc>)
 8008f8e:	4601      	mov	r1, r0
 8008f90:	6818      	ldr	r0, [r3, #0]
 8008f92:	f7ff bfd2 	b.w	8008f3a <_raise_r>
 8008f96:	bf00      	nop
 8008f98:	20000080 	.word	0x20000080

08008f9c <_kill_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	4d06      	ldr	r5, [pc, #24]	; (8008fbc <_kill_r+0x20>)
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	4608      	mov	r0, r1
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	602b      	str	r3, [r5, #0]
 8008faa:	f7fb f91c 	bl	80041e6 <_kill>
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	d102      	bne.n	8008fb8 <_kill_r+0x1c>
 8008fb2:	682b      	ldr	r3, [r5, #0]
 8008fb4:	b103      	cbz	r3, 8008fb8 <_kill_r+0x1c>
 8008fb6:	6023      	str	r3, [r4, #0]
 8008fb8:	bd38      	pop	{r3, r4, r5, pc}
 8008fba:	bf00      	nop
 8008fbc:	2000083c 	.word	0x2000083c

08008fc0 <_getpid_r>:
 8008fc0:	f7fb b90a 	b.w	80041d8 <_getpid>

08008fc4 <pow>:
 8008fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc8:	4614      	mov	r4, r2
 8008fca:	461d      	mov	r5, r3
 8008fcc:	4680      	mov	r8, r0
 8008fce:	4689      	mov	r9, r1
 8008fd0:	f000 f9e2 	bl	8009398 <__ieee754_pow>
 8008fd4:	4622      	mov	r2, r4
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	460f      	mov	r7, r1
 8008fda:	462b      	mov	r3, r5
 8008fdc:	4620      	mov	r0, r4
 8008fde:	4629      	mov	r1, r5
 8008fe0:	f7f7 fd24 	bl	8000a2c <__aeabi_dcmpun>
 8008fe4:	bbc8      	cbnz	r0, 800905a <pow+0x96>
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4640      	mov	r0, r8
 8008fec:	4649      	mov	r1, r9
 8008fee:	f7f7 fceb 	bl	80009c8 <__aeabi_dcmpeq>
 8008ff2:	b1b8      	cbz	r0, 8009024 <pow+0x60>
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f7f7 fce4 	bl	80009c8 <__aeabi_dcmpeq>
 8009000:	2800      	cmp	r0, #0
 8009002:	d141      	bne.n	8009088 <pow+0xc4>
 8009004:	4620      	mov	r0, r4
 8009006:	4629      	mov	r1, r5
 8009008:	f000 f868 	bl	80090dc <finite>
 800900c:	b328      	cbz	r0, 800905a <pow+0x96>
 800900e:	2200      	movs	r2, #0
 8009010:	2300      	movs	r3, #0
 8009012:	4620      	mov	r0, r4
 8009014:	4629      	mov	r1, r5
 8009016:	f7f7 fce1 	bl	80009dc <__aeabi_dcmplt>
 800901a:	b1f0      	cbz	r0, 800905a <pow+0x96>
 800901c:	f7fc fbfe 	bl	800581c <__errno>
 8009020:	2322      	movs	r3, #34	; 0x22
 8009022:	e019      	b.n	8009058 <pow+0x94>
 8009024:	4630      	mov	r0, r6
 8009026:	4639      	mov	r1, r7
 8009028:	f000 f858 	bl	80090dc <finite>
 800902c:	b9c8      	cbnz	r0, 8009062 <pow+0x9e>
 800902e:	4640      	mov	r0, r8
 8009030:	4649      	mov	r1, r9
 8009032:	f000 f853 	bl	80090dc <finite>
 8009036:	b1a0      	cbz	r0, 8009062 <pow+0x9e>
 8009038:	4620      	mov	r0, r4
 800903a:	4629      	mov	r1, r5
 800903c:	f000 f84e 	bl	80090dc <finite>
 8009040:	b178      	cbz	r0, 8009062 <pow+0x9e>
 8009042:	4632      	mov	r2, r6
 8009044:	463b      	mov	r3, r7
 8009046:	4630      	mov	r0, r6
 8009048:	4639      	mov	r1, r7
 800904a:	f7f7 fcef 	bl	8000a2c <__aeabi_dcmpun>
 800904e:	2800      	cmp	r0, #0
 8009050:	d0e4      	beq.n	800901c <pow+0x58>
 8009052:	f7fc fbe3 	bl	800581c <__errno>
 8009056:	2321      	movs	r3, #33	; 0x21
 8009058:	6003      	str	r3, [r0, #0]
 800905a:	4630      	mov	r0, r6
 800905c:	4639      	mov	r1, r7
 800905e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009062:	2200      	movs	r2, #0
 8009064:	2300      	movs	r3, #0
 8009066:	4630      	mov	r0, r6
 8009068:	4639      	mov	r1, r7
 800906a:	f7f7 fcad 	bl	80009c8 <__aeabi_dcmpeq>
 800906e:	2800      	cmp	r0, #0
 8009070:	d0f3      	beq.n	800905a <pow+0x96>
 8009072:	4640      	mov	r0, r8
 8009074:	4649      	mov	r1, r9
 8009076:	f000 f831 	bl	80090dc <finite>
 800907a:	2800      	cmp	r0, #0
 800907c:	d0ed      	beq.n	800905a <pow+0x96>
 800907e:	4620      	mov	r0, r4
 8009080:	4629      	mov	r1, r5
 8009082:	f000 f82b 	bl	80090dc <finite>
 8009086:	e7c8      	b.n	800901a <pow+0x56>
 8009088:	2600      	movs	r6, #0
 800908a:	4f01      	ldr	r7, [pc, #4]	; (8009090 <pow+0xcc>)
 800908c:	e7e5      	b.n	800905a <pow+0x96>
 800908e:	bf00      	nop
 8009090:	3ff00000 	.word	0x3ff00000

08009094 <sqrt>:
 8009094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009096:	4606      	mov	r6, r0
 8009098:	460f      	mov	r7, r1
 800909a:	f000 f825 	bl	80090e8 <__ieee754_sqrt>
 800909e:	4632      	mov	r2, r6
 80090a0:	4604      	mov	r4, r0
 80090a2:	460d      	mov	r5, r1
 80090a4:	463b      	mov	r3, r7
 80090a6:	4630      	mov	r0, r6
 80090a8:	4639      	mov	r1, r7
 80090aa:	f7f7 fcbf 	bl	8000a2c <__aeabi_dcmpun>
 80090ae:	b990      	cbnz	r0, 80090d6 <sqrt+0x42>
 80090b0:	2200      	movs	r2, #0
 80090b2:	2300      	movs	r3, #0
 80090b4:	4630      	mov	r0, r6
 80090b6:	4639      	mov	r1, r7
 80090b8:	f7f7 fc90 	bl	80009dc <__aeabi_dcmplt>
 80090bc:	b158      	cbz	r0, 80090d6 <sqrt+0x42>
 80090be:	f7fc fbad 	bl	800581c <__errno>
 80090c2:	2321      	movs	r3, #33	; 0x21
 80090c4:	2200      	movs	r2, #0
 80090c6:	6003      	str	r3, [r0, #0]
 80090c8:	2300      	movs	r3, #0
 80090ca:	4610      	mov	r0, r2
 80090cc:	4619      	mov	r1, r3
 80090ce:	f7f7 fb3d 	bl	800074c <__aeabi_ddiv>
 80090d2:	4604      	mov	r4, r0
 80090d4:	460d      	mov	r5, r1
 80090d6:	4620      	mov	r0, r4
 80090d8:	4629      	mov	r1, r5
 80090da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090dc <finite>:
 80090dc:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80090e0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80090e4:	0fc0      	lsrs	r0, r0, #31
 80090e6:	4770      	bx	lr

080090e8 <__ieee754_sqrt>:
 80090e8:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800928c <__ieee754_sqrt+0x1a4>
 80090ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f0:	ea3c 0c01 	bics.w	ip, ip, r1
 80090f4:	460b      	mov	r3, r1
 80090f6:	4606      	mov	r6, r0
 80090f8:	460d      	mov	r5, r1
 80090fa:	460a      	mov	r2, r1
 80090fc:	4604      	mov	r4, r0
 80090fe:	d10e      	bne.n	800911e <__ieee754_sqrt+0x36>
 8009100:	4602      	mov	r2, r0
 8009102:	f7f7 f9f9 	bl	80004f8 <__aeabi_dmul>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	4630      	mov	r0, r6
 800910c:	4629      	mov	r1, r5
 800910e:	f7f7 f83d 	bl	800018c <__adddf3>
 8009112:	4606      	mov	r6, r0
 8009114:	460d      	mov	r5, r1
 8009116:	4630      	mov	r0, r6
 8009118:	4629      	mov	r1, r5
 800911a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911e:	2900      	cmp	r1, #0
 8009120:	dc0d      	bgt.n	800913e <__ieee754_sqrt+0x56>
 8009122:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009126:	ea5c 0c00 	orrs.w	ip, ip, r0
 800912a:	d0f4      	beq.n	8009116 <__ieee754_sqrt+0x2e>
 800912c:	b139      	cbz	r1, 800913e <__ieee754_sqrt+0x56>
 800912e:	4602      	mov	r2, r0
 8009130:	f7f7 f82a 	bl	8000188 <__aeabi_dsub>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	f7f7 fb08 	bl	800074c <__aeabi_ddiv>
 800913c:	e7e9      	b.n	8009112 <__ieee754_sqrt+0x2a>
 800913e:	1512      	asrs	r2, r2, #20
 8009140:	f000 8089 	beq.w	8009256 <__ieee754_sqrt+0x16e>
 8009144:	2500      	movs	r5, #0
 8009146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800914a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800914e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009152:	07d2      	lsls	r2, r2, #31
 8009154:	bf5c      	itt	pl
 8009156:	005b      	lslpl	r3, r3, #1
 8009158:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800915c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009160:	bf58      	it	pl
 8009162:	0064      	lslpl	r4, r4, #1
 8009164:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009168:	0062      	lsls	r2, r4, #1
 800916a:	2016      	movs	r0, #22
 800916c:	4629      	mov	r1, r5
 800916e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8009172:	1076      	asrs	r6, r6, #1
 8009174:	190f      	adds	r7, r1, r4
 8009176:	429f      	cmp	r7, r3
 8009178:	bfde      	ittt	le
 800917a:	1bdb      	suble	r3, r3, r7
 800917c:	1939      	addle	r1, r7, r4
 800917e:	192d      	addle	r5, r5, r4
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	3801      	subs	r0, #1
 8009184:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009188:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800918c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009190:	d1f0      	bne.n	8009174 <__ieee754_sqrt+0x8c>
 8009192:	4604      	mov	r4, r0
 8009194:	2720      	movs	r7, #32
 8009196:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800919a:	428b      	cmp	r3, r1
 800919c:	eb0c 0e00 	add.w	lr, ip, r0
 80091a0:	dc02      	bgt.n	80091a8 <__ieee754_sqrt+0xc0>
 80091a2:	d113      	bne.n	80091cc <__ieee754_sqrt+0xe4>
 80091a4:	4596      	cmp	lr, r2
 80091a6:	d811      	bhi.n	80091cc <__ieee754_sqrt+0xe4>
 80091a8:	f1be 0f00 	cmp.w	lr, #0
 80091ac:	eb0e 000c 	add.w	r0, lr, ip
 80091b0:	da56      	bge.n	8009260 <__ieee754_sqrt+0x178>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	db54      	blt.n	8009260 <__ieee754_sqrt+0x178>
 80091b6:	f101 0801 	add.w	r8, r1, #1
 80091ba:	1a5b      	subs	r3, r3, r1
 80091bc:	4641      	mov	r1, r8
 80091be:	4596      	cmp	lr, r2
 80091c0:	bf88      	it	hi
 80091c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80091c6:	eba2 020e 	sub.w	r2, r2, lr
 80091ca:	4464      	add	r4, ip
 80091cc:	005b      	lsls	r3, r3, #1
 80091ce:	3f01      	subs	r7, #1
 80091d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80091d4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80091d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80091dc:	d1dd      	bne.n	800919a <__ieee754_sqrt+0xb2>
 80091de:	4313      	orrs	r3, r2
 80091e0:	d01b      	beq.n	800921a <__ieee754_sqrt+0x132>
 80091e2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009290 <__ieee754_sqrt+0x1a8>
 80091e6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009294 <__ieee754_sqrt+0x1ac>
 80091ea:	e9da 0100 	ldrd	r0, r1, [sl]
 80091ee:	e9db 2300 	ldrd	r2, r3, [fp]
 80091f2:	f7f6 ffc9 	bl	8000188 <__aeabi_dsub>
 80091f6:	e9da 8900 	ldrd	r8, r9, [sl]
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4640      	mov	r0, r8
 8009200:	4649      	mov	r1, r9
 8009202:	f7f7 fbf5 	bl	80009f0 <__aeabi_dcmple>
 8009206:	b140      	cbz	r0, 800921a <__ieee754_sqrt+0x132>
 8009208:	e9da 0100 	ldrd	r0, r1, [sl]
 800920c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009210:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009214:	d126      	bne.n	8009264 <__ieee754_sqrt+0x17c>
 8009216:	463c      	mov	r4, r7
 8009218:	3501      	adds	r5, #1
 800921a:	106b      	asrs	r3, r5, #1
 800921c:	0864      	lsrs	r4, r4, #1
 800921e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009222:	07ea      	lsls	r2, r5, #31
 8009224:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009228:	bf48      	it	mi
 800922a:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800922e:	4620      	mov	r0, r4
 8009230:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009234:	e76d      	b.n	8009112 <__ieee754_sqrt+0x2a>
 8009236:	0ae3      	lsrs	r3, r4, #11
 8009238:	3915      	subs	r1, #21
 800923a:	0564      	lsls	r4, r4, #21
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0fa      	beq.n	8009236 <__ieee754_sqrt+0x14e>
 8009240:	02d8      	lsls	r0, r3, #11
 8009242:	d50a      	bpl.n	800925a <__ieee754_sqrt+0x172>
 8009244:	f1c2 0020 	rsb	r0, r2, #32
 8009248:	fa24 f000 	lsr.w	r0, r4, r0
 800924c:	1e55      	subs	r5, r2, #1
 800924e:	4094      	lsls	r4, r2
 8009250:	4303      	orrs	r3, r0
 8009252:	1b4a      	subs	r2, r1, r5
 8009254:	e776      	b.n	8009144 <__ieee754_sqrt+0x5c>
 8009256:	4611      	mov	r1, r2
 8009258:	e7f0      	b.n	800923c <__ieee754_sqrt+0x154>
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	3201      	adds	r2, #1
 800925e:	e7ef      	b.n	8009240 <__ieee754_sqrt+0x158>
 8009260:	4688      	mov	r8, r1
 8009262:	e7aa      	b.n	80091ba <__ieee754_sqrt+0xd2>
 8009264:	f7f6 ff92 	bl	800018c <__adddf3>
 8009268:	e9da 8900 	ldrd	r8, r9, [sl]
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4640      	mov	r0, r8
 8009272:	4649      	mov	r1, r9
 8009274:	f7f7 fbb2 	bl	80009dc <__aeabi_dcmplt>
 8009278:	b120      	cbz	r0, 8009284 <__ieee754_sqrt+0x19c>
 800927a:	1ca1      	adds	r1, r4, #2
 800927c:	bf08      	it	eq
 800927e:	3501      	addeq	r5, #1
 8009280:	3402      	adds	r4, #2
 8009282:	e7ca      	b.n	800921a <__ieee754_sqrt+0x132>
 8009284:	3401      	adds	r4, #1
 8009286:	f024 0401 	bic.w	r4, r4, #1
 800928a:	e7c6      	b.n	800921a <__ieee754_sqrt+0x132>
 800928c:	7ff00000 	.word	0x7ff00000
 8009290:	200001f0 	.word	0x200001f0
 8009294:	200001f8 	.word	0x200001f8

08009298 <floor>:
 8009298:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800929c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80092a4:	2e13      	cmp	r6, #19
 80092a6:	460b      	mov	r3, r1
 80092a8:	4607      	mov	r7, r0
 80092aa:	460c      	mov	r4, r1
 80092ac:	4605      	mov	r5, r0
 80092ae:	dc32      	bgt.n	8009316 <floor+0x7e>
 80092b0:	2e00      	cmp	r6, #0
 80092b2:	da14      	bge.n	80092de <floor+0x46>
 80092b4:	a334      	add	r3, pc, #208	; (adr r3, 8009388 <floor+0xf0>)
 80092b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ba:	f7f6 ff67 	bl	800018c <__adddf3>
 80092be:	2200      	movs	r2, #0
 80092c0:	2300      	movs	r3, #0
 80092c2:	f7f7 fba9 	bl	8000a18 <__aeabi_dcmpgt>
 80092c6:	b138      	cbz	r0, 80092d8 <floor+0x40>
 80092c8:	2c00      	cmp	r4, #0
 80092ca:	da56      	bge.n	800937a <floor+0xe2>
 80092cc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80092d0:	4325      	orrs	r5, r4
 80092d2:	d055      	beq.n	8009380 <floor+0xe8>
 80092d4:	2500      	movs	r5, #0
 80092d6:	4c2e      	ldr	r4, [pc, #184]	; (8009390 <floor+0xf8>)
 80092d8:	4623      	mov	r3, r4
 80092da:	462f      	mov	r7, r5
 80092dc:	e025      	b.n	800932a <floor+0x92>
 80092de:	4a2d      	ldr	r2, [pc, #180]	; (8009394 <floor+0xfc>)
 80092e0:	fa42 f806 	asr.w	r8, r2, r6
 80092e4:	ea01 0208 	and.w	r2, r1, r8
 80092e8:	4302      	orrs	r2, r0
 80092ea:	d01e      	beq.n	800932a <floor+0x92>
 80092ec:	a326      	add	r3, pc, #152	; (adr r3, 8009388 <floor+0xf0>)
 80092ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f2:	f7f6 ff4b 	bl	800018c <__adddf3>
 80092f6:	2200      	movs	r2, #0
 80092f8:	2300      	movs	r3, #0
 80092fa:	f7f7 fb8d 	bl	8000a18 <__aeabi_dcmpgt>
 80092fe:	2800      	cmp	r0, #0
 8009300:	d0ea      	beq.n	80092d8 <floor+0x40>
 8009302:	2c00      	cmp	r4, #0
 8009304:	bfbe      	ittt	lt
 8009306:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800930a:	4133      	asrlt	r3, r6
 800930c:	18e4      	addlt	r4, r4, r3
 800930e:	2500      	movs	r5, #0
 8009310:	ea24 0408 	bic.w	r4, r4, r8
 8009314:	e7e0      	b.n	80092d8 <floor+0x40>
 8009316:	2e33      	cmp	r6, #51	; 0x33
 8009318:	dd0b      	ble.n	8009332 <floor+0x9a>
 800931a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800931e:	d104      	bne.n	800932a <floor+0x92>
 8009320:	4602      	mov	r2, r0
 8009322:	f7f6 ff33 	bl	800018c <__adddf3>
 8009326:	4607      	mov	r7, r0
 8009328:	460b      	mov	r3, r1
 800932a:	4638      	mov	r0, r7
 800932c:	4619      	mov	r1, r3
 800932e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009332:	f04f 38ff 	mov.w	r8, #4294967295
 8009336:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800933a:	fa28 f802 	lsr.w	r8, r8, r2
 800933e:	ea10 0f08 	tst.w	r0, r8
 8009342:	d0f2      	beq.n	800932a <floor+0x92>
 8009344:	a310      	add	r3, pc, #64	; (adr r3, 8009388 <floor+0xf0>)
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f7f6 ff1f 	bl	800018c <__adddf3>
 800934e:	2200      	movs	r2, #0
 8009350:	2300      	movs	r3, #0
 8009352:	f7f7 fb61 	bl	8000a18 <__aeabi_dcmpgt>
 8009356:	2800      	cmp	r0, #0
 8009358:	d0be      	beq.n	80092d8 <floor+0x40>
 800935a:	2c00      	cmp	r4, #0
 800935c:	da0a      	bge.n	8009374 <floor+0xdc>
 800935e:	2e14      	cmp	r6, #20
 8009360:	d101      	bne.n	8009366 <floor+0xce>
 8009362:	3401      	adds	r4, #1
 8009364:	e006      	b.n	8009374 <floor+0xdc>
 8009366:	2301      	movs	r3, #1
 8009368:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800936c:	40b3      	lsls	r3, r6
 800936e:	441d      	add	r5, r3
 8009370:	42af      	cmp	r7, r5
 8009372:	d8f6      	bhi.n	8009362 <floor+0xca>
 8009374:	ea25 0508 	bic.w	r5, r5, r8
 8009378:	e7ae      	b.n	80092d8 <floor+0x40>
 800937a:	2500      	movs	r5, #0
 800937c:	462c      	mov	r4, r5
 800937e:	e7ab      	b.n	80092d8 <floor+0x40>
 8009380:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009384:	e7a8      	b.n	80092d8 <floor+0x40>
 8009386:	bf00      	nop
 8009388:	8800759c 	.word	0x8800759c
 800938c:	7e37e43c 	.word	0x7e37e43c
 8009390:	bff00000 	.word	0xbff00000
 8009394:	000fffff 	.word	0x000fffff

08009398 <__ieee754_pow>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	b093      	sub	sp, #76	; 0x4c
 800939e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093a2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80093a6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80093aa:	4689      	mov	r9, r1
 80093ac:	ea56 0102 	orrs.w	r1, r6, r2
 80093b0:	4680      	mov	r8, r0
 80093b2:	d111      	bne.n	80093d8 <__ieee754_pow+0x40>
 80093b4:	1803      	adds	r3, r0, r0
 80093b6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80093ba:	4152      	adcs	r2, r2
 80093bc:	4299      	cmp	r1, r3
 80093be:	4b82      	ldr	r3, [pc, #520]	; (80095c8 <__ieee754_pow+0x230>)
 80093c0:	4193      	sbcs	r3, r2
 80093c2:	f080 84ba 	bcs.w	8009d3a <__ieee754_pow+0x9a2>
 80093c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093ca:	4640      	mov	r0, r8
 80093cc:	4649      	mov	r1, r9
 80093ce:	f7f6 fedd 	bl	800018c <__adddf3>
 80093d2:	4683      	mov	fp, r0
 80093d4:	468c      	mov	ip, r1
 80093d6:	e06f      	b.n	80094b8 <__ieee754_pow+0x120>
 80093d8:	4b7c      	ldr	r3, [pc, #496]	; (80095cc <__ieee754_pow+0x234>)
 80093da:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80093de:	429c      	cmp	r4, r3
 80093e0:	464d      	mov	r5, r9
 80093e2:	4682      	mov	sl, r0
 80093e4:	dc06      	bgt.n	80093f4 <__ieee754_pow+0x5c>
 80093e6:	d101      	bne.n	80093ec <__ieee754_pow+0x54>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d1ec      	bne.n	80093c6 <__ieee754_pow+0x2e>
 80093ec:	429e      	cmp	r6, r3
 80093ee:	dc01      	bgt.n	80093f4 <__ieee754_pow+0x5c>
 80093f0:	d10f      	bne.n	8009412 <__ieee754_pow+0x7a>
 80093f2:	b172      	cbz	r2, 8009412 <__ieee754_pow+0x7a>
 80093f4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80093f8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80093fc:	ea55 050a 	orrs.w	r5, r5, sl
 8009400:	d1e1      	bne.n	80093c6 <__ieee754_pow+0x2e>
 8009402:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009406:	18db      	adds	r3, r3, r3
 8009408:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800940c:	4152      	adcs	r2, r2
 800940e:	429d      	cmp	r5, r3
 8009410:	e7d5      	b.n	80093be <__ieee754_pow+0x26>
 8009412:	2d00      	cmp	r5, #0
 8009414:	da39      	bge.n	800948a <__ieee754_pow+0xf2>
 8009416:	4b6e      	ldr	r3, [pc, #440]	; (80095d0 <__ieee754_pow+0x238>)
 8009418:	429e      	cmp	r6, r3
 800941a:	dc52      	bgt.n	80094c2 <__ieee754_pow+0x12a>
 800941c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009420:	429e      	cmp	r6, r3
 8009422:	f340 849d 	ble.w	8009d60 <__ieee754_pow+0x9c8>
 8009426:	1533      	asrs	r3, r6, #20
 8009428:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800942c:	2b14      	cmp	r3, #20
 800942e:	dd0f      	ble.n	8009450 <__ieee754_pow+0xb8>
 8009430:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009434:	fa22 f103 	lsr.w	r1, r2, r3
 8009438:	fa01 f303 	lsl.w	r3, r1, r3
 800943c:	4293      	cmp	r3, r2
 800943e:	f040 848f 	bne.w	8009d60 <__ieee754_pow+0x9c8>
 8009442:	f001 0101 	and.w	r1, r1, #1
 8009446:	f1c1 0302 	rsb	r3, r1, #2
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	b182      	cbz	r2, 8009470 <__ieee754_pow+0xd8>
 800944e:	e05d      	b.n	800950c <__ieee754_pow+0x174>
 8009450:	2a00      	cmp	r2, #0
 8009452:	d159      	bne.n	8009508 <__ieee754_pow+0x170>
 8009454:	f1c3 0314 	rsb	r3, r3, #20
 8009458:	fa46 f103 	asr.w	r1, r6, r3
 800945c:	fa01 f303 	lsl.w	r3, r1, r3
 8009460:	42b3      	cmp	r3, r6
 8009462:	f040 847a 	bne.w	8009d5a <__ieee754_pow+0x9c2>
 8009466:	f001 0101 	and.w	r1, r1, #1
 800946a:	f1c1 0302 	rsb	r3, r1, #2
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	4b58      	ldr	r3, [pc, #352]	; (80095d4 <__ieee754_pow+0x23c>)
 8009472:	429e      	cmp	r6, r3
 8009474:	d132      	bne.n	80094dc <__ieee754_pow+0x144>
 8009476:	2f00      	cmp	r7, #0
 8009478:	f280 846b 	bge.w	8009d52 <__ieee754_pow+0x9ba>
 800947c:	4642      	mov	r2, r8
 800947e:	464b      	mov	r3, r9
 8009480:	2000      	movs	r0, #0
 8009482:	4954      	ldr	r1, [pc, #336]	; (80095d4 <__ieee754_pow+0x23c>)
 8009484:	f7f7 f962 	bl	800074c <__aeabi_ddiv>
 8009488:	e7a3      	b.n	80093d2 <__ieee754_pow+0x3a>
 800948a:	2300      	movs	r3, #0
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	2a00      	cmp	r2, #0
 8009490:	d13c      	bne.n	800950c <__ieee754_pow+0x174>
 8009492:	4b4e      	ldr	r3, [pc, #312]	; (80095cc <__ieee754_pow+0x234>)
 8009494:	429e      	cmp	r6, r3
 8009496:	d1eb      	bne.n	8009470 <__ieee754_pow+0xd8>
 8009498:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800949c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80094a0:	ea53 030a 	orrs.w	r3, r3, sl
 80094a4:	f000 8449 	beq.w	8009d3a <__ieee754_pow+0x9a2>
 80094a8:	4b4b      	ldr	r3, [pc, #300]	; (80095d8 <__ieee754_pow+0x240>)
 80094aa:	429c      	cmp	r4, r3
 80094ac:	dd0b      	ble.n	80094c6 <__ieee754_pow+0x12e>
 80094ae:	2f00      	cmp	r7, #0
 80094b0:	f2c0 8449 	blt.w	8009d46 <__ieee754_pow+0x9ae>
 80094b4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80094b8:	4658      	mov	r0, fp
 80094ba:	4661      	mov	r1, ip
 80094bc:	b013      	add	sp, #76	; 0x4c
 80094be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c2:	2302      	movs	r3, #2
 80094c4:	e7e2      	b.n	800948c <__ieee754_pow+0xf4>
 80094c6:	2f00      	cmp	r7, #0
 80094c8:	f04f 0b00 	mov.w	fp, #0
 80094cc:	f04f 0c00 	mov.w	ip, #0
 80094d0:	daf2      	bge.n	80094b8 <__ieee754_pow+0x120>
 80094d2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80094d6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80094da:	e7ed      	b.n	80094b8 <__ieee754_pow+0x120>
 80094dc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80094e0:	d106      	bne.n	80094f0 <__ieee754_pow+0x158>
 80094e2:	4642      	mov	r2, r8
 80094e4:	464b      	mov	r3, r9
 80094e6:	4640      	mov	r0, r8
 80094e8:	4649      	mov	r1, r9
 80094ea:	f7f7 f805 	bl	80004f8 <__aeabi_dmul>
 80094ee:	e770      	b.n	80093d2 <__ieee754_pow+0x3a>
 80094f0:	4b3a      	ldr	r3, [pc, #232]	; (80095dc <__ieee754_pow+0x244>)
 80094f2:	429f      	cmp	r7, r3
 80094f4:	d10a      	bne.n	800950c <__ieee754_pow+0x174>
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	db08      	blt.n	800950c <__ieee754_pow+0x174>
 80094fa:	4640      	mov	r0, r8
 80094fc:	4649      	mov	r1, r9
 80094fe:	b013      	add	sp, #76	; 0x4c
 8009500:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009504:	f7ff bdf0 	b.w	80090e8 <__ieee754_sqrt>
 8009508:	2300      	movs	r3, #0
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	4640      	mov	r0, r8
 800950e:	4649      	mov	r1, r9
 8009510:	f000 fc58 	bl	8009dc4 <fabs>
 8009514:	4683      	mov	fp, r0
 8009516:	468c      	mov	ip, r1
 8009518:	f1ba 0f00 	cmp.w	sl, #0
 800951c:	d128      	bne.n	8009570 <__ieee754_pow+0x1d8>
 800951e:	b124      	cbz	r4, 800952a <__ieee754_pow+0x192>
 8009520:	4b2c      	ldr	r3, [pc, #176]	; (80095d4 <__ieee754_pow+0x23c>)
 8009522:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009526:	429a      	cmp	r2, r3
 8009528:	d122      	bne.n	8009570 <__ieee754_pow+0x1d8>
 800952a:	2f00      	cmp	r7, #0
 800952c:	da07      	bge.n	800953e <__ieee754_pow+0x1a6>
 800952e:	465a      	mov	r2, fp
 8009530:	4663      	mov	r3, ip
 8009532:	2000      	movs	r0, #0
 8009534:	4927      	ldr	r1, [pc, #156]	; (80095d4 <__ieee754_pow+0x23c>)
 8009536:	f7f7 f909 	bl	800074c <__aeabi_ddiv>
 800953a:	4683      	mov	fp, r0
 800953c:	468c      	mov	ip, r1
 800953e:	2d00      	cmp	r5, #0
 8009540:	daba      	bge.n	80094b8 <__ieee754_pow+0x120>
 8009542:	9b00      	ldr	r3, [sp, #0]
 8009544:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009548:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800954c:	431c      	orrs	r4, r3
 800954e:	d108      	bne.n	8009562 <__ieee754_pow+0x1ca>
 8009550:	465a      	mov	r2, fp
 8009552:	4663      	mov	r3, ip
 8009554:	4658      	mov	r0, fp
 8009556:	4661      	mov	r1, ip
 8009558:	f7f6 fe16 	bl	8000188 <__aeabi_dsub>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	e790      	b.n	8009484 <__ieee754_pow+0xec>
 8009562:	9b00      	ldr	r3, [sp, #0]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d1a7      	bne.n	80094b8 <__ieee754_pow+0x120>
 8009568:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800956c:	469c      	mov	ip, r3
 800956e:	e7a3      	b.n	80094b8 <__ieee754_pow+0x120>
 8009570:	0feb      	lsrs	r3, r5, #31
 8009572:	3b01      	subs	r3, #1
 8009574:	930c      	str	r3, [sp, #48]	; 0x30
 8009576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009578:	9b00      	ldr	r3, [sp, #0]
 800957a:	4313      	orrs	r3, r2
 800957c:	d104      	bne.n	8009588 <__ieee754_pow+0x1f0>
 800957e:	4642      	mov	r2, r8
 8009580:	464b      	mov	r3, r9
 8009582:	4640      	mov	r0, r8
 8009584:	4649      	mov	r1, r9
 8009586:	e7e7      	b.n	8009558 <__ieee754_pow+0x1c0>
 8009588:	4b15      	ldr	r3, [pc, #84]	; (80095e0 <__ieee754_pow+0x248>)
 800958a:	429e      	cmp	r6, r3
 800958c:	f340 80f6 	ble.w	800977c <__ieee754_pow+0x3e4>
 8009590:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009594:	429e      	cmp	r6, r3
 8009596:	4b10      	ldr	r3, [pc, #64]	; (80095d8 <__ieee754_pow+0x240>)
 8009598:	dd09      	ble.n	80095ae <__ieee754_pow+0x216>
 800959a:	429c      	cmp	r4, r3
 800959c:	dc0c      	bgt.n	80095b8 <__ieee754_pow+0x220>
 800959e:	2f00      	cmp	r7, #0
 80095a0:	da0c      	bge.n	80095bc <__ieee754_pow+0x224>
 80095a2:	2000      	movs	r0, #0
 80095a4:	b013      	add	sp, #76	; 0x4c
 80095a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095aa:	f000 bcb2 	b.w	8009f12 <__math_oflow>
 80095ae:	429c      	cmp	r4, r3
 80095b0:	dbf5      	blt.n	800959e <__ieee754_pow+0x206>
 80095b2:	4b08      	ldr	r3, [pc, #32]	; (80095d4 <__ieee754_pow+0x23c>)
 80095b4:	429c      	cmp	r4, r3
 80095b6:	dd15      	ble.n	80095e4 <__ieee754_pow+0x24c>
 80095b8:	2f00      	cmp	r7, #0
 80095ba:	dcf2      	bgt.n	80095a2 <__ieee754_pow+0x20a>
 80095bc:	2000      	movs	r0, #0
 80095be:	b013      	add	sp, #76	; 0x4c
 80095c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	f000 bca0 	b.w	8009f08 <__math_uflow>
 80095c8:	fff00000 	.word	0xfff00000
 80095cc:	7ff00000 	.word	0x7ff00000
 80095d0:	433fffff 	.word	0x433fffff
 80095d4:	3ff00000 	.word	0x3ff00000
 80095d8:	3fefffff 	.word	0x3fefffff
 80095dc:	3fe00000 	.word	0x3fe00000
 80095e0:	41e00000 	.word	0x41e00000
 80095e4:	4661      	mov	r1, ip
 80095e6:	2200      	movs	r2, #0
 80095e8:	4658      	mov	r0, fp
 80095ea:	4b5f      	ldr	r3, [pc, #380]	; (8009768 <__ieee754_pow+0x3d0>)
 80095ec:	f7f6 fdcc 	bl	8000188 <__aeabi_dsub>
 80095f0:	a355      	add	r3, pc, #340	; (adr r3, 8009748 <__ieee754_pow+0x3b0>)
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	4604      	mov	r4, r0
 80095f8:	460d      	mov	r5, r1
 80095fa:	f7f6 ff7d 	bl	80004f8 <__aeabi_dmul>
 80095fe:	a354      	add	r3, pc, #336	; (adr r3, 8009750 <__ieee754_pow+0x3b8>)
 8009600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009604:	4606      	mov	r6, r0
 8009606:	460f      	mov	r7, r1
 8009608:	4620      	mov	r0, r4
 800960a:	4629      	mov	r1, r5
 800960c:	f7f6 ff74 	bl	80004f8 <__aeabi_dmul>
 8009610:	2200      	movs	r2, #0
 8009612:	4682      	mov	sl, r0
 8009614:	468b      	mov	fp, r1
 8009616:	4620      	mov	r0, r4
 8009618:	4629      	mov	r1, r5
 800961a:	4b54      	ldr	r3, [pc, #336]	; (800976c <__ieee754_pow+0x3d4>)
 800961c:	f7f6 ff6c 	bl	80004f8 <__aeabi_dmul>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	a14c      	add	r1, pc, #304	; (adr r1, 8009758 <__ieee754_pow+0x3c0>)
 8009626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800962a:	f7f6 fdad 	bl	8000188 <__aeabi_dsub>
 800962e:	4622      	mov	r2, r4
 8009630:	462b      	mov	r3, r5
 8009632:	f7f6 ff61 	bl	80004f8 <__aeabi_dmul>
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	2000      	movs	r0, #0
 800963c:	494c      	ldr	r1, [pc, #304]	; (8009770 <__ieee754_pow+0x3d8>)
 800963e:	f7f6 fda3 	bl	8000188 <__aeabi_dsub>
 8009642:	4622      	mov	r2, r4
 8009644:	462b      	mov	r3, r5
 8009646:	4680      	mov	r8, r0
 8009648:	4689      	mov	r9, r1
 800964a:	4620      	mov	r0, r4
 800964c:	4629      	mov	r1, r5
 800964e:	f7f6 ff53 	bl	80004f8 <__aeabi_dmul>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	4640      	mov	r0, r8
 8009658:	4649      	mov	r1, r9
 800965a:	f7f6 ff4d 	bl	80004f8 <__aeabi_dmul>
 800965e:	a340      	add	r3, pc, #256	; (adr r3, 8009760 <__ieee754_pow+0x3c8>)
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	f7f6 ff48 	bl	80004f8 <__aeabi_dmul>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	4650      	mov	r0, sl
 800966e:	4659      	mov	r1, fp
 8009670:	f7f6 fd8a 	bl	8000188 <__aeabi_dsub>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4604      	mov	r4, r0
 800967a:	460d      	mov	r5, r1
 800967c:	4630      	mov	r0, r6
 800967e:	4639      	mov	r1, r7
 8009680:	f7f6 fd84 	bl	800018c <__adddf3>
 8009684:	2000      	movs	r0, #0
 8009686:	4632      	mov	r2, r6
 8009688:	463b      	mov	r3, r7
 800968a:	4682      	mov	sl, r0
 800968c:	468b      	mov	fp, r1
 800968e:	f7f6 fd7b 	bl	8000188 <__aeabi_dsub>
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	4620      	mov	r0, r4
 8009698:	4629      	mov	r1, r5
 800969a:	f7f6 fd75 	bl	8000188 <__aeabi_dsub>
 800969e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80096a2:	9b00      	ldr	r3, [sp, #0]
 80096a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096a6:	3b01      	subs	r3, #1
 80096a8:	4313      	orrs	r3, r2
 80096aa:	f04f 0600 	mov.w	r6, #0
 80096ae:	f04f 0200 	mov.w	r2, #0
 80096b2:	bf0c      	ite	eq
 80096b4:	4b2f      	ldreq	r3, [pc, #188]	; (8009774 <__ieee754_pow+0x3dc>)
 80096b6:	4b2c      	ldrne	r3, [pc, #176]	; (8009768 <__ieee754_pow+0x3d0>)
 80096b8:	4604      	mov	r4, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096c0:	e9cd 2300 	strd	r2, r3, [sp]
 80096c4:	4632      	mov	r2, r6
 80096c6:	463b      	mov	r3, r7
 80096c8:	f7f6 fd5e 	bl	8000188 <__aeabi_dsub>
 80096cc:	4652      	mov	r2, sl
 80096ce:	465b      	mov	r3, fp
 80096d0:	f7f6 ff12 	bl	80004f8 <__aeabi_dmul>
 80096d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096d8:	4680      	mov	r8, r0
 80096da:	4689      	mov	r9, r1
 80096dc:	4620      	mov	r0, r4
 80096de:	4629      	mov	r1, r5
 80096e0:	f7f6 ff0a 	bl	80004f8 <__aeabi_dmul>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4640      	mov	r0, r8
 80096ea:	4649      	mov	r1, r9
 80096ec:	f7f6 fd4e 	bl	800018c <__adddf3>
 80096f0:	4632      	mov	r2, r6
 80096f2:	463b      	mov	r3, r7
 80096f4:	4680      	mov	r8, r0
 80096f6:	4689      	mov	r9, r1
 80096f8:	4650      	mov	r0, sl
 80096fa:	4659      	mov	r1, fp
 80096fc:	f7f6 fefc 	bl	80004f8 <__aeabi_dmul>
 8009700:	4604      	mov	r4, r0
 8009702:	460d      	mov	r5, r1
 8009704:	460b      	mov	r3, r1
 8009706:	4602      	mov	r2, r0
 8009708:	4649      	mov	r1, r9
 800970a:	4640      	mov	r0, r8
 800970c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009710:	f7f6 fd3c 	bl	800018c <__adddf3>
 8009714:	4b18      	ldr	r3, [pc, #96]	; (8009778 <__ieee754_pow+0x3e0>)
 8009716:	4682      	mov	sl, r0
 8009718:	4299      	cmp	r1, r3
 800971a:	460f      	mov	r7, r1
 800971c:	460e      	mov	r6, r1
 800971e:	f340 82e7 	ble.w	8009cf0 <__ieee754_pow+0x958>
 8009722:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009726:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800972a:	4303      	orrs	r3, r0
 800972c:	f000 81e2 	beq.w	8009af4 <__ieee754_pow+0x75c>
 8009730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009734:	2200      	movs	r2, #0
 8009736:	2300      	movs	r3, #0
 8009738:	f7f7 f950 	bl	80009dc <__aeabi_dcmplt>
 800973c:	3800      	subs	r0, #0
 800973e:	bf18      	it	ne
 8009740:	2001      	movne	r0, #1
 8009742:	e72f      	b.n	80095a4 <__ieee754_pow+0x20c>
 8009744:	f3af 8000 	nop.w
 8009748:	60000000 	.word	0x60000000
 800974c:	3ff71547 	.word	0x3ff71547
 8009750:	f85ddf44 	.word	0xf85ddf44
 8009754:	3e54ae0b 	.word	0x3e54ae0b
 8009758:	55555555 	.word	0x55555555
 800975c:	3fd55555 	.word	0x3fd55555
 8009760:	652b82fe 	.word	0x652b82fe
 8009764:	3ff71547 	.word	0x3ff71547
 8009768:	3ff00000 	.word	0x3ff00000
 800976c:	3fd00000 	.word	0x3fd00000
 8009770:	3fe00000 	.word	0x3fe00000
 8009774:	bff00000 	.word	0xbff00000
 8009778:	408fffff 	.word	0x408fffff
 800977c:	4bd4      	ldr	r3, [pc, #848]	; (8009ad0 <__ieee754_pow+0x738>)
 800977e:	2200      	movs	r2, #0
 8009780:	402b      	ands	r3, r5
 8009782:	b943      	cbnz	r3, 8009796 <__ieee754_pow+0x3fe>
 8009784:	4658      	mov	r0, fp
 8009786:	4661      	mov	r1, ip
 8009788:	4bd2      	ldr	r3, [pc, #840]	; (8009ad4 <__ieee754_pow+0x73c>)
 800978a:	f7f6 feb5 	bl	80004f8 <__aeabi_dmul>
 800978e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009792:	4683      	mov	fp, r0
 8009794:	460c      	mov	r4, r1
 8009796:	1523      	asrs	r3, r4, #20
 8009798:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800979c:	4413      	add	r3, r2
 800979e:	930b      	str	r3, [sp, #44]	; 0x2c
 80097a0:	4bcd      	ldr	r3, [pc, #820]	; (8009ad8 <__ieee754_pow+0x740>)
 80097a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80097a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80097aa:	429c      	cmp	r4, r3
 80097ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80097b0:	dd08      	ble.n	80097c4 <__ieee754_pow+0x42c>
 80097b2:	4bca      	ldr	r3, [pc, #808]	; (8009adc <__ieee754_pow+0x744>)
 80097b4:	429c      	cmp	r4, r3
 80097b6:	f340 8164 	ble.w	8009a82 <__ieee754_pow+0x6ea>
 80097ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097bc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80097c0:	3301      	adds	r3, #1
 80097c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80097c4:	2600      	movs	r6, #0
 80097c6:	00f3      	lsls	r3, r6, #3
 80097c8:	930d      	str	r3, [sp, #52]	; 0x34
 80097ca:	4bc5      	ldr	r3, [pc, #788]	; (8009ae0 <__ieee754_pow+0x748>)
 80097cc:	4658      	mov	r0, fp
 80097ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80097d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097d6:	4629      	mov	r1, r5
 80097d8:	461a      	mov	r2, r3
 80097da:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80097de:	4623      	mov	r3, r4
 80097e0:	f7f6 fcd2 	bl	8000188 <__aeabi_dsub>
 80097e4:	46da      	mov	sl, fp
 80097e6:	462b      	mov	r3, r5
 80097e8:	4652      	mov	r2, sl
 80097ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80097ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097f2:	f7f6 fccb 	bl	800018c <__adddf3>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	2000      	movs	r0, #0
 80097fc:	49b9      	ldr	r1, [pc, #740]	; (8009ae4 <__ieee754_pow+0x74c>)
 80097fe:	f7f6 ffa5 	bl	800074c <__aeabi_ddiv>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800980a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800980e:	f7f6 fe73 	bl	80004f8 <__aeabi_dmul>
 8009812:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009816:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800981a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800981e:	2300      	movs	r3, #0
 8009820:	2200      	movs	r2, #0
 8009822:	46ab      	mov	fp, r5
 8009824:	106d      	asrs	r5, r5, #1
 8009826:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800982a:	9304      	str	r3, [sp, #16]
 800982c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009830:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009834:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009838:	4640      	mov	r0, r8
 800983a:	4649      	mov	r1, r9
 800983c:	4614      	mov	r4, r2
 800983e:	461d      	mov	r5, r3
 8009840:	f7f6 fe5a 	bl	80004f8 <__aeabi_dmul>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800984c:	f7f6 fc9c 	bl	8000188 <__aeabi_dsub>
 8009850:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009854:	4606      	mov	r6, r0
 8009856:	460f      	mov	r7, r1
 8009858:	4620      	mov	r0, r4
 800985a:	4629      	mov	r1, r5
 800985c:	f7f6 fc94 	bl	8000188 <__aeabi_dsub>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4650      	mov	r0, sl
 8009866:	4659      	mov	r1, fp
 8009868:	f7f6 fc8e 	bl	8000188 <__aeabi_dsub>
 800986c:	4642      	mov	r2, r8
 800986e:	464b      	mov	r3, r9
 8009870:	f7f6 fe42 	bl	80004f8 <__aeabi_dmul>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4630      	mov	r0, r6
 800987a:	4639      	mov	r1, r7
 800987c:	f7f6 fc84 	bl	8000188 <__aeabi_dsub>
 8009880:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009884:	f7f6 fe38 	bl	80004f8 <__aeabi_dmul>
 8009888:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800988c:	4682      	mov	sl, r0
 800988e:	468b      	mov	fp, r1
 8009890:	4610      	mov	r0, r2
 8009892:	4619      	mov	r1, r3
 8009894:	f7f6 fe30 	bl	80004f8 <__aeabi_dmul>
 8009898:	a37b      	add	r3, pc, #492	; (adr r3, 8009a88 <__ieee754_pow+0x6f0>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	4604      	mov	r4, r0
 80098a0:	460d      	mov	r5, r1
 80098a2:	f7f6 fe29 	bl	80004f8 <__aeabi_dmul>
 80098a6:	a37a      	add	r3, pc, #488	; (adr r3, 8009a90 <__ieee754_pow+0x6f8>)
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f7f6 fc6e 	bl	800018c <__adddf3>
 80098b0:	4622      	mov	r2, r4
 80098b2:	462b      	mov	r3, r5
 80098b4:	f7f6 fe20 	bl	80004f8 <__aeabi_dmul>
 80098b8:	a377      	add	r3, pc, #476	; (adr r3, 8009a98 <__ieee754_pow+0x700>)
 80098ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098be:	f7f6 fc65 	bl	800018c <__adddf3>
 80098c2:	4622      	mov	r2, r4
 80098c4:	462b      	mov	r3, r5
 80098c6:	f7f6 fe17 	bl	80004f8 <__aeabi_dmul>
 80098ca:	a375      	add	r3, pc, #468	; (adr r3, 8009aa0 <__ieee754_pow+0x708>)
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	f7f6 fc5c 	bl	800018c <__adddf3>
 80098d4:	4622      	mov	r2, r4
 80098d6:	462b      	mov	r3, r5
 80098d8:	f7f6 fe0e 	bl	80004f8 <__aeabi_dmul>
 80098dc:	a372      	add	r3, pc, #456	; (adr r3, 8009aa8 <__ieee754_pow+0x710>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f7f6 fc53 	bl	800018c <__adddf3>
 80098e6:	4622      	mov	r2, r4
 80098e8:	462b      	mov	r3, r5
 80098ea:	f7f6 fe05 	bl	80004f8 <__aeabi_dmul>
 80098ee:	a370      	add	r3, pc, #448	; (adr r3, 8009ab0 <__ieee754_pow+0x718>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f7f6 fc4a 	bl	800018c <__adddf3>
 80098f8:	4622      	mov	r2, r4
 80098fa:	4606      	mov	r6, r0
 80098fc:	460f      	mov	r7, r1
 80098fe:	462b      	mov	r3, r5
 8009900:	4620      	mov	r0, r4
 8009902:	4629      	mov	r1, r5
 8009904:	f7f6 fdf8 	bl	80004f8 <__aeabi_dmul>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4630      	mov	r0, r6
 800990e:	4639      	mov	r1, r7
 8009910:	f7f6 fdf2 	bl	80004f8 <__aeabi_dmul>
 8009914:	4604      	mov	r4, r0
 8009916:	460d      	mov	r5, r1
 8009918:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800991c:	4642      	mov	r2, r8
 800991e:	464b      	mov	r3, r9
 8009920:	f7f6 fc34 	bl	800018c <__adddf3>
 8009924:	4652      	mov	r2, sl
 8009926:	465b      	mov	r3, fp
 8009928:	f7f6 fde6 	bl	80004f8 <__aeabi_dmul>
 800992c:	4622      	mov	r2, r4
 800992e:	462b      	mov	r3, r5
 8009930:	f7f6 fc2c 	bl	800018c <__adddf3>
 8009934:	4642      	mov	r2, r8
 8009936:	4606      	mov	r6, r0
 8009938:	460f      	mov	r7, r1
 800993a:	464b      	mov	r3, r9
 800993c:	4640      	mov	r0, r8
 800993e:	4649      	mov	r1, r9
 8009940:	f7f6 fdda 	bl	80004f8 <__aeabi_dmul>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800994c:	2200      	movs	r2, #0
 800994e:	4b66      	ldr	r3, [pc, #408]	; (8009ae8 <__ieee754_pow+0x750>)
 8009950:	f7f6 fc1c 	bl	800018c <__adddf3>
 8009954:	4632      	mov	r2, r6
 8009956:	463b      	mov	r3, r7
 8009958:	f7f6 fc18 	bl	800018c <__adddf3>
 800995c:	2400      	movs	r4, #0
 800995e:	460d      	mov	r5, r1
 8009960:	4622      	mov	r2, r4
 8009962:	460b      	mov	r3, r1
 8009964:	4640      	mov	r0, r8
 8009966:	4649      	mov	r1, r9
 8009968:	f7f6 fdc6 	bl	80004f8 <__aeabi_dmul>
 800996c:	2200      	movs	r2, #0
 800996e:	4680      	mov	r8, r0
 8009970:	4689      	mov	r9, r1
 8009972:	4620      	mov	r0, r4
 8009974:	4629      	mov	r1, r5
 8009976:	4b5c      	ldr	r3, [pc, #368]	; (8009ae8 <__ieee754_pow+0x750>)
 8009978:	f7f6 fc06 	bl	8000188 <__aeabi_dsub>
 800997c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009980:	f7f6 fc02 	bl	8000188 <__aeabi_dsub>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f6 fbfc 	bl	8000188 <__aeabi_dsub>
 8009990:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009994:	f7f6 fdb0 	bl	80004f8 <__aeabi_dmul>
 8009998:	4622      	mov	r2, r4
 800999a:	4606      	mov	r6, r0
 800999c:	460f      	mov	r7, r1
 800999e:	462b      	mov	r3, r5
 80099a0:	4650      	mov	r0, sl
 80099a2:	4659      	mov	r1, fp
 80099a4:	f7f6 fda8 	bl	80004f8 <__aeabi_dmul>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4630      	mov	r0, r6
 80099ae:	4639      	mov	r1, r7
 80099b0:	f7f6 fbec 	bl	800018c <__adddf3>
 80099b4:	2400      	movs	r4, #0
 80099b6:	4606      	mov	r6, r0
 80099b8:	460f      	mov	r7, r1
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4640      	mov	r0, r8
 80099c0:	4649      	mov	r1, r9
 80099c2:	f7f6 fbe3 	bl	800018c <__adddf3>
 80099c6:	a33c      	add	r3, pc, #240	; (adr r3, 8009ab8 <__ieee754_pow+0x720>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	4620      	mov	r0, r4
 80099ce:	460d      	mov	r5, r1
 80099d0:	f7f6 fd92 	bl	80004f8 <__aeabi_dmul>
 80099d4:	4642      	mov	r2, r8
 80099d6:	464b      	mov	r3, r9
 80099d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099dc:	4620      	mov	r0, r4
 80099de:	4629      	mov	r1, r5
 80099e0:	f7f6 fbd2 	bl	8000188 <__aeabi_dsub>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4630      	mov	r0, r6
 80099ea:	4639      	mov	r1, r7
 80099ec:	f7f6 fbcc 	bl	8000188 <__aeabi_dsub>
 80099f0:	a333      	add	r3, pc, #204	; (adr r3, 8009ac0 <__ieee754_pow+0x728>)
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	f7f6 fd7f 	bl	80004f8 <__aeabi_dmul>
 80099fa:	a333      	add	r3, pc, #204	; (adr r3, 8009ac8 <__ieee754_pow+0x730>)
 80099fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a00:	4606      	mov	r6, r0
 8009a02:	460f      	mov	r7, r1
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7f6 fd76 	bl	80004f8 <__aeabi_dmul>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4630      	mov	r0, r6
 8009a12:	4639      	mov	r1, r7
 8009a14:	f7f6 fbba 	bl	800018c <__adddf3>
 8009a18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a1a:	4b34      	ldr	r3, [pc, #208]	; (8009aec <__ieee754_pow+0x754>)
 8009a1c:	4413      	add	r3, r2
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f7f6 fbb3 	bl	800018c <__adddf3>
 8009a26:	4680      	mov	r8, r0
 8009a28:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009a2a:	4689      	mov	r9, r1
 8009a2c:	f7f6 fcfa 	bl	8000424 <__aeabi_i2d>
 8009a30:	4604      	mov	r4, r0
 8009a32:	460d      	mov	r5, r1
 8009a34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a3a:	4b2d      	ldr	r3, [pc, #180]	; (8009af0 <__ieee754_pow+0x758>)
 8009a3c:	4413      	add	r3, r2
 8009a3e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009a42:	4642      	mov	r2, r8
 8009a44:	464b      	mov	r3, r9
 8009a46:	f7f6 fba1 	bl	800018c <__adddf3>
 8009a4a:	4632      	mov	r2, r6
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	f7f6 fb9d 	bl	800018c <__adddf3>
 8009a52:	4622      	mov	r2, r4
 8009a54:	462b      	mov	r3, r5
 8009a56:	f7f6 fb99 	bl	800018c <__adddf3>
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	462b      	mov	r3, r5
 8009a60:	4682      	mov	sl, r0
 8009a62:	468b      	mov	fp, r1
 8009a64:	f7f6 fb90 	bl	8000188 <__aeabi_dsub>
 8009a68:	4632      	mov	r2, r6
 8009a6a:	463b      	mov	r3, r7
 8009a6c:	f7f6 fb8c 	bl	8000188 <__aeabi_dsub>
 8009a70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a74:	f7f6 fb88 	bl	8000188 <__aeabi_dsub>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	4649      	mov	r1, r9
 8009a80:	e60b      	b.n	800969a <__ieee754_pow+0x302>
 8009a82:	2601      	movs	r6, #1
 8009a84:	e69f      	b.n	80097c6 <__ieee754_pow+0x42e>
 8009a86:	bf00      	nop
 8009a88:	4a454eef 	.word	0x4a454eef
 8009a8c:	3fca7e28 	.word	0x3fca7e28
 8009a90:	93c9db65 	.word	0x93c9db65
 8009a94:	3fcd864a 	.word	0x3fcd864a
 8009a98:	a91d4101 	.word	0xa91d4101
 8009a9c:	3fd17460 	.word	0x3fd17460
 8009aa0:	518f264d 	.word	0x518f264d
 8009aa4:	3fd55555 	.word	0x3fd55555
 8009aa8:	db6fabff 	.word	0xdb6fabff
 8009aac:	3fdb6db6 	.word	0x3fdb6db6
 8009ab0:	33333303 	.word	0x33333303
 8009ab4:	3fe33333 	.word	0x3fe33333
 8009ab8:	e0000000 	.word	0xe0000000
 8009abc:	3feec709 	.word	0x3feec709
 8009ac0:	dc3a03fd 	.word	0xdc3a03fd
 8009ac4:	3feec709 	.word	0x3feec709
 8009ac8:	145b01f5 	.word	0x145b01f5
 8009acc:	be3e2fe0 	.word	0xbe3e2fe0
 8009ad0:	7ff00000 	.word	0x7ff00000
 8009ad4:	43400000 	.word	0x43400000
 8009ad8:	0003988e 	.word	0x0003988e
 8009adc:	000bb679 	.word	0x000bb679
 8009ae0:	0800c158 	.word	0x0800c158
 8009ae4:	3ff00000 	.word	0x3ff00000
 8009ae8:	40080000 	.word	0x40080000
 8009aec:	0800c178 	.word	0x0800c178
 8009af0:	0800c168 	.word	0x0800c168
 8009af4:	a39c      	add	r3, pc, #624	; (adr r3, 8009d68 <__ieee754_pow+0x9d0>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	4640      	mov	r0, r8
 8009afc:	4649      	mov	r1, r9
 8009afe:	f7f6 fb45 	bl	800018c <__adddf3>
 8009b02:	4622      	mov	r2, r4
 8009b04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b08:	462b      	mov	r3, r5
 8009b0a:	4650      	mov	r0, sl
 8009b0c:	4639      	mov	r1, r7
 8009b0e:	f7f6 fb3b 	bl	8000188 <__aeabi_dsub>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b1a:	f7f6 ff7d 	bl	8000a18 <__aeabi_dcmpgt>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	f47f ae06 	bne.w	8009730 <__ieee754_pow+0x398>
 8009b24:	4aa2      	ldr	r2, [pc, #648]	; (8009db0 <__ieee754_pow+0xa18>)
 8009b26:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	f340 8100 	ble.w	8009d30 <__ieee754_pow+0x998>
 8009b30:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009b34:	151b      	asrs	r3, r3, #20
 8009b36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009b3a:	fa4a fa03 	asr.w	sl, sl, r3
 8009b3e:	44b2      	add	sl, r6
 8009b40:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009b44:	489b      	ldr	r0, [pc, #620]	; (8009db4 <__ieee754_pow+0xa1c>)
 8009b46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009b4a:	4108      	asrs	r0, r1
 8009b4c:	ea00 030a 	and.w	r3, r0, sl
 8009b50:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009b54:	f1c1 0114 	rsb	r1, r1, #20
 8009b58:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009b5c:	fa4a fa01 	asr.w	sl, sl, r1
 8009b60:	2e00      	cmp	r6, #0
 8009b62:	f04f 0200 	mov.w	r2, #0
 8009b66:	4620      	mov	r0, r4
 8009b68:	4629      	mov	r1, r5
 8009b6a:	bfb8      	it	lt
 8009b6c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009b70:	f7f6 fb0a 	bl	8000188 <__aeabi_dsub>
 8009b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b7c:	2400      	movs	r4, #0
 8009b7e:	4642      	mov	r2, r8
 8009b80:	464b      	mov	r3, r9
 8009b82:	f7f6 fb03 	bl	800018c <__adddf3>
 8009b86:	a37a      	add	r3, pc, #488	; (adr r3, 8009d70 <__ieee754_pow+0x9d8>)
 8009b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	460d      	mov	r5, r1
 8009b90:	f7f6 fcb2 	bl	80004f8 <__aeabi_dmul>
 8009b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b98:	4606      	mov	r6, r0
 8009b9a:	460f      	mov	r7, r1
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	f7f6 faf2 	bl	8000188 <__aeabi_dsub>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	4640      	mov	r0, r8
 8009baa:	4649      	mov	r1, r9
 8009bac:	f7f6 faec 	bl	8000188 <__aeabi_dsub>
 8009bb0:	a371      	add	r3, pc, #452	; (adr r3, 8009d78 <__ieee754_pow+0x9e0>)
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	f7f6 fc9f 	bl	80004f8 <__aeabi_dmul>
 8009bba:	a371      	add	r3, pc, #452	; (adr r3, 8009d80 <__ieee754_pow+0x9e8>)
 8009bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc0:	4680      	mov	r8, r0
 8009bc2:	4689      	mov	r9, r1
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	f7f6 fc96 	bl	80004f8 <__aeabi_dmul>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	460b      	mov	r3, r1
 8009bd0:	4640      	mov	r0, r8
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	f7f6 fada 	bl	800018c <__adddf3>
 8009bd8:	4604      	mov	r4, r0
 8009bda:	460d      	mov	r5, r1
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4630      	mov	r0, r6
 8009be2:	4639      	mov	r1, r7
 8009be4:	f7f6 fad2 	bl	800018c <__adddf3>
 8009be8:	4632      	mov	r2, r6
 8009bea:	463b      	mov	r3, r7
 8009bec:	4680      	mov	r8, r0
 8009bee:	4689      	mov	r9, r1
 8009bf0:	f7f6 faca 	bl	8000188 <__aeabi_dsub>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	f7f6 fac4 	bl	8000188 <__aeabi_dsub>
 8009c00:	4642      	mov	r2, r8
 8009c02:	4606      	mov	r6, r0
 8009c04:	460f      	mov	r7, r1
 8009c06:	464b      	mov	r3, r9
 8009c08:	4640      	mov	r0, r8
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	f7f6 fc74 	bl	80004f8 <__aeabi_dmul>
 8009c10:	a35d      	add	r3, pc, #372	; (adr r3, 8009d88 <__ieee754_pow+0x9f0>)
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	4604      	mov	r4, r0
 8009c18:	460d      	mov	r5, r1
 8009c1a:	f7f6 fc6d 	bl	80004f8 <__aeabi_dmul>
 8009c1e:	a35c      	add	r3, pc, #368	; (adr r3, 8009d90 <__ieee754_pow+0x9f8>)
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	f7f6 fab0 	bl	8000188 <__aeabi_dsub>
 8009c28:	4622      	mov	r2, r4
 8009c2a:	462b      	mov	r3, r5
 8009c2c:	f7f6 fc64 	bl	80004f8 <__aeabi_dmul>
 8009c30:	a359      	add	r3, pc, #356	; (adr r3, 8009d98 <__ieee754_pow+0xa00>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	f7f6 faa9 	bl	800018c <__adddf3>
 8009c3a:	4622      	mov	r2, r4
 8009c3c:	462b      	mov	r3, r5
 8009c3e:	f7f6 fc5b 	bl	80004f8 <__aeabi_dmul>
 8009c42:	a357      	add	r3, pc, #348	; (adr r3, 8009da0 <__ieee754_pow+0xa08>)
 8009c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c48:	f7f6 fa9e 	bl	8000188 <__aeabi_dsub>
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	462b      	mov	r3, r5
 8009c50:	f7f6 fc52 	bl	80004f8 <__aeabi_dmul>
 8009c54:	a354      	add	r3, pc, #336	; (adr r3, 8009da8 <__ieee754_pow+0xa10>)
 8009c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5a:	f7f6 fa97 	bl	800018c <__adddf3>
 8009c5e:	4622      	mov	r2, r4
 8009c60:	462b      	mov	r3, r5
 8009c62:	f7f6 fc49 	bl	80004f8 <__aeabi_dmul>
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	4649      	mov	r1, r9
 8009c6e:	f7f6 fa8b 	bl	8000188 <__aeabi_dsub>
 8009c72:	4604      	mov	r4, r0
 8009c74:	460d      	mov	r5, r1
 8009c76:	4602      	mov	r2, r0
 8009c78:	460b      	mov	r3, r1
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	f7f6 fc3b 	bl	80004f8 <__aeabi_dmul>
 8009c82:	2200      	movs	r2, #0
 8009c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	4629      	mov	r1, r5
 8009c90:	f7f6 fa7a 	bl	8000188 <__aeabi_dsub>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c9c:	f7f6 fd56 	bl	800074c <__aeabi_ddiv>
 8009ca0:	4632      	mov	r2, r6
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	460d      	mov	r5, r1
 8009ca6:	463b      	mov	r3, r7
 8009ca8:	4640      	mov	r0, r8
 8009caa:	4649      	mov	r1, r9
 8009cac:	f7f6 fc24 	bl	80004f8 <__aeabi_dmul>
 8009cb0:	4632      	mov	r2, r6
 8009cb2:	463b      	mov	r3, r7
 8009cb4:	f7f6 fa6a 	bl	800018c <__adddf3>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	f7f6 fa62 	bl	8000188 <__aeabi_dsub>
 8009cc4:	4642      	mov	r2, r8
 8009cc6:	464b      	mov	r3, r9
 8009cc8:	f7f6 fa5e 	bl	8000188 <__aeabi_dsub>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	4939      	ldr	r1, [pc, #228]	; (8009db8 <__ieee754_pow+0xa20>)
 8009cd4:	f7f6 fa58 	bl	8000188 <__aeabi_dsub>
 8009cd8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009cdc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009ce0:	da29      	bge.n	8009d36 <__ieee754_pow+0x99e>
 8009ce2:	4652      	mov	r2, sl
 8009ce4:	f000 f874 	bl	8009dd0 <scalbn>
 8009ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cec:	f7ff bbfd 	b.w	80094ea <__ieee754_pow+0x152>
 8009cf0:	4b32      	ldr	r3, [pc, #200]	; (8009dbc <__ieee754_pow+0xa24>)
 8009cf2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009cf6:	429f      	cmp	r7, r3
 8009cf8:	f77f af14 	ble.w	8009b24 <__ieee754_pow+0x78c>
 8009cfc:	4b30      	ldr	r3, [pc, #192]	; (8009dc0 <__ieee754_pow+0xa28>)
 8009cfe:	440b      	add	r3, r1
 8009d00:	4303      	orrs	r3, r0
 8009d02:	d009      	beq.n	8009d18 <__ieee754_pow+0x980>
 8009d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f7f6 fe66 	bl	80009dc <__aeabi_dcmplt>
 8009d10:	3800      	subs	r0, #0
 8009d12:	bf18      	it	ne
 8009d14:	2001      	movne	r0, #1
 8009d16:	e452      	b.n	80095be <__ieee754_pow+0x226>
 8009d18:	4622      	mov	r2, r4
 8009d1a:	462b      	mov	r3, r5
 8009d1c:	f7f6 fa34 	bl	8000188 <__aeabi_dsub>
 8009d20:	4642      	mov	r2, r8
 8009d22:	464b      	mov	r3, r9
 8009d24:	f7f6 fe6e 	bl	8000a04 <__aeabi_dcmpge>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	f43f aefb 	beq.w	8009b24 <__ieee754_pow+0x78c>
 8009d2e:	e7e9      	b.n	8009d04 <__ieee754_pow+0x96c>
 8009d30:	f04f 0a00 	mov.w	sl, #0
 8009d34:	e720      	b.n	8009b78 <__ieee754_pow+0x7e0>
 8009d36:	4621      	mov	r1, r4
 8009d38:	e7d6      	b.n	8009ce8 <__ieee754_pow+0x950>
 8009d3a:	f04f 0b00 	mov.w	fp, #0
 8009d3e:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009db8 <__ieee754_pow+0xa20>
 8009d42:	f7ff bbb9 	b.w	80094b8 <__ieee754_pow+0x120>
 8009d46:	f04f 0b00 	mov.w	fp, #0
 8009d4a:	f04f 0c00 	mov.w	ip, #0
 8009d4e:	f7ff bbb3 	b.w	80094b8 <__ieee754_pow+0x120>
 8009d52:	4640      	mov	r0, r8
 8009d54:	4649      	mov	r1, r9
 8009d56:	f7ff bb3c 	b.w	80093d2 <__ieee754_pow+0x3a>
 8009d5a:	9200      	str	r2, [sp, #0]
 8009d5c:	f7ff bb88 	b.w	8009470 <__ieee754_pow+0xd8>
 8009d60:	2300      	movs	r3, #0
 8009d62:	f7ff bb72 	b.w	800944a <__ieee754_pow+0xb2>
 8009d66:	bf00      	nop
 8009d68:	652b82fe 	.word	0x652b82fe
 8009d6c:	3c971547 	.word	0x3c971547
 8009d70:	00000000 	.word	0x00000000
 8009d74:	3fe62e43 	.word	0x3fe62e43
 8009d78:	fefa39ef 	.word	0xfefa39ef
 8009d7c:	3fe62e42 	.word	0x3fe62e42
 8009d80:	0ca86c39 	.word	0x0ca86c39
 8009d84:	be205c61 	.word	0xbe205c61
 8009d88:	72bea4d0 	.word	0x72bea4d0
 8009d8c:	3e663769 	.word	0x3e663769
 8009d90:	c5d26bf1 	.word	0xc5d26bf1
 8009d94:	3ebbbd41 	.word	0x3ebbbd41
 8009d98:	af25de2c 	.word	0xaf25de2c
 8009d9c:	3f11566a 	.word	0x3f11566a
 8009da0:	16bebd93 	.word	0x16bebd93
 8009da4:	3f66c16c 	.word	0x3f66c16c
 8009da8:	5555553e 	.word	0x5555553e
 8009dac:	3fc55555 	.word	0x3fc55555
 8009db0:	3fe00000 	.word	0x3fe00000
 8009db4:	fff00000 	.word	0xfff00000
 8009db8:	3ff00000 	.word	0x3ff00000
 8009dbc:	4090cbff 	.word	0x4090cbff
 8009dc0:	3f6f3400 	.word	0x3f6f3400

08009dc4 <fabs>:
 8009dc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009dc8:	4619      	mov	r1, r3
 8009dca:	4770      	bx	lr
 8009dcc:	0000      	movs	r0, r0
	...

08009dd0 <scalbn>:
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd2:	4616      	mov	r6, r2
 8009dd4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009dd8:	4604      	mov	r4, r0
 8009dda:	460d      	mov	r5, r1
 8009ddc:	460b      	mov	r3, r1
 8009dde:	b992      	cbnz	r2, 8009e06 <scalbn+0x36>
 8009de0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009de4:	4303      	orrs	r3, r0
 8009de6:	d03c      	beq.n	8009e62 <scalbn+0x92>
 8009de8:	4b31      	ldr	r3, [pc, #196]	; (8009eb0 <scalbn+0xe0>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	f7f6 fb84 	bl	80004f8 <__aeabi_dmul>
 8009df0:	4b30      	ldr	r3, [pc, #192]	; (8009eb4 <scalbn+0xe4>)
 8009df2:	4604      	mov	r4, r0
 8009df4:	429e      	cmp	r6, r3
 8009df6:	460d      	mov	r5, r1
 8009df8:	da0f      	bge.n	8009e1a <scalbn+0x4a>
 8009dfa:	a329      	add	r3, pc, #164	; (adr r3, 8009ea0 <scalbn+0xd0>)
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	f7f6 fb7a 	bl	80004f8 <__aeabi_dmul>
 8009e04:	e006      	b.n	8009e14 <scalbn+0x44>
 8009e06:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8009e0a:	42ba      	cmp	r2, r7
 8009e0c:	d109      	bne.n	8009e22 <scalbn+0x52>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	f7f6 f9bc 	bl	800018c <__adddf3>
 8009e14:	4604      	mov	r4, r0
 8009e16:	460d      	mov	r5, r1
 8009e18:	e023      	b.n	8009e62 <scalbn+0x92>
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009e20:	3a36      	subs	r2, #54	; 0x36
 8009e22:	f24c 3150 	movw	r1, #50000	; 0xc350
 8009e26:	428e      	cmp	r6, r1
 8009e28:	dd0e      	ble.n	8009e48 <scalbn+0x78>
 8009e2a:	a31f      	add	r3, pc, #124	; (adr r3, 8009ea8 <scalbn+0xd8>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009e34:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009e38:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009e3c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009e40:	481d      	ldr	r0, [pc, #116]	; (8009eb8 <scalbn+0xe8>)
 8009e42:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009e46:	e7db      	b.n	8009e00 <scalbn+0x30>
 8009e48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009e4c:	4432      	add	r2, r6
 8009e4e:	428a      	cmp	r2, r1
 8009e50:	dceb      	bgt.n	8009e2a <scalbn+0x5a>
 8009e52:	2a00      	cmp	r2, #0
 8009e54:	dd08      	ble.n	8009e68 <scalbn+0x98>
 8009e56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e5e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009e62:	4620      	mov	r0, r4
 8009e64:	4629      	mov	r1, r5
 8009e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e68:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009e6c:	da0c      	bge.n	8009e88 <scalbn+0xb8>
 8009e6e:	a30c      	add	r3, pc, #48	; (adr r3, 8009ea0 <scalbn+0xd0>)
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009e78:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009e7c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009e80:	480e      	ldr	r0, [pc, #56]	; (8009ebc <scalbn+0xec>)
 8009e82:	f041 011f 	orr.w	r1, r1, #31
 8009e86:	e7bb      	b.n	8009e00 <scalbn+0x30>
 8009e88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e8c:	3236      	adds	r2, #54	; 0x36
 8009e8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009e96:	4620      	mov	r0, r4
 8009e98:	4629      	mov	r1, r5
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	4b08      	ldr	r3, [pc, #32]	; (8009ec0 <scalbn+0xf0>)
 8009e9e:	e7af      	b.n	8009e00 <scalbn+0x30>
 8009ea0:	c2f8f359 	.word	0xc2f8f359
 8009ea4:	01a56e1f 	.word	0x01a56e1f
 8009ea8:	8800759c 	.word	0x8800759c
 8009eac:	7e37e43c 	.word	0x7e37e43c
 8009eb0:	43500000 	.word	0x43500000
 8009eb4:	ffff3cb0 	.word	0xffff3cb0
 8009eb8:	8800759c 	.word	0x8800759c
 8009ebc:	c2f8f359 	.word	0xc2f8f359
 8009ec0:	3c900000 	.word	0x3c900000

08009ec4 <with_errno>:
 8009ec4:	b570      	push	{r4, r5, r6, lr}
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	460d      	mov	r5, r1
 8009eca:	4616      	mov	r6, r2
 8009ecc:	f7fb fca6 	bl	800581c <__errno>
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	6006      	str	r6, [r0, #0]
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}

08009ed8 <xflow>:
 8009ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009eda:	4615      	mov	r5, r2
 8009edc:	461c      	mov	r4, r3
 8009ede:	b180      	cbz	r0, 8009f02 <xflow+0x2a>
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009ee6:	e9cd 0100 	strd	r0, r1, [sp]
 8009eea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eee:	4628      	mov	r0, r5
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	f7f6 fb01 	bl	80004f8 <__aeabi_dmul>
 8009ef6:	2222      	movs	r2, #34	; 0x22
 8009ef8:	b003      	add	sp, #12
 8009efa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009efe:	f7ff bfe1 	b.w	8009ec4 <with_errno>
 8009f02:	4610      	mov	r0, r2
 8009f04:	4619      	mov	r1, r3
 8009f06:	e7ee      	b.n	8009ee6 <xflow+0xe>

08009f08 <__math_uflow>:
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f0e:	f7ff bfe3 	b.w	8009ed8 <xflow>

08009f12 <__math_oflow>:
 8009f12:	2200      	movs	r2, #0
 8009f14:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009f18:	f7ff bfde 	b.w	8009ed8 <xflow>

08009f1c <_init>:
 8009f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1e:	bf00      	nop
 8009f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f22:	bc08      	pop	{r3}
 8009f24:	469e      	mov	lr, r3
 8009f26:	4770      	bx	lr

08009f28 <_fini>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	bf00      	nop
 8009f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2e:	bc08      	pop	{r3}
 8009f30:	469e      	mov	lr, r3
 8009f32:	4770      	bx	lr
