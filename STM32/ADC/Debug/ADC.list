
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001204  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001334  08001334  00011334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001374  08001374  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001374  08001374  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001374  08001374  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001374  08001374  00011374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001378  08001378  00011378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800137c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080013d8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080013d8  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d4e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000536  00000000  00000000  00020e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  00021350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f6  00000000  00000000  000214c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ebc  00000000  00000000  000215b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002028  00000000  00000000  00024472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009b82  00000000  00000000  0002649a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000bf0  00000000  00000000  0003001c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00030c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	0800131c 	.word	0x0800131c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	0800131c 	.word	0x0800131c

08000170 <USER_ADC_Init>:

#include "main.h"
#include "ADC.h"

void USER_ADC_Init( void )
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

  ADC1->CR1	&=	~(ADC_CR1_DUALMOD);	// Step 1 - Select independent mode
 8000174:	4b16      	ldr	r3, [pc, #88]	; (80001d0 <USER_ADC_Init+0x60>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	4a15      	ldr	r2, [pc, #84]	; (80001d0 <USER_ADC_Init+0x60>)
 800017a:	f423 13a8 	bic.w	r3, r3, #1376256	; 0x150000
 800017e:	6053      	str	r3, [r2, #4]
  ADC1->CR2	|=	ADC_CR2_CONT;		// Step 2 - Select conversion mode
 8000180:	4b13      	ldr	r3, [pc, #76]	; (80001d0 <USER_ADC_Init+0x60>)
 8000182:	689b      	ldr	r3, [r3, #8]
 8000184:	4a12      	ldr	r2, [pc, #72]	; (80001d0 <USER_ADC_Init+0x60>)
 8000186:	f043 0302 	orr.w	r3, r3, #2
 800018a:	6093      	str	r3, [r2, #8]
  ADC1->CR2	&= 	~(ADC_CR2_ALIGN);	//	and format for ADC result
 800018c:	4b10      	ldr	r3, [pc, #64]	; (80001d0 <USER_ADC_Init+0x60>)
 800018e:	689b      	ldr	r3, [r3, #8]
 8000190:	4a0f      	ldr	r2, [pc, #60]	; (80001d0 <USER_ADC_Init+0x60>)
 8000192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000196:	6093      	str	r3, [r2, #8]
  ADC1->SMPR2	&= 	~(ADC_SMPR2_SMP0);	// Step 3 - Select the sample time for the
 8000198:	4b0d      	ldr	r3, [pc, #52]	; (80001d0 <USER_ADC_Init+0x60>)
 800019a:	691b      	ldr	r3, [r3, #16]
 800019c:	4a0c      	ldr	r2, [pc, #48]	; (80001d0 <USER_ADC_Init+0x60>)
 800019e:	f023 0307 	bic.w	r3, r3, #7
 80001a2:	6113      	str	r3, [r2, #16]
						//	ADC channel
  ADC1->SQR1	&= 	~(ADC_SQR1_L);		// Step 4 - Select the sequence and number of
 80001a4:	4b0a      	ldr	r3, [pc, #40]	; (80001d0 <USER_ADC_Init+0x60>)
 80001a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001a8:	4a09      	ldr	r2, [pc, #36]	; (80001d0 <USER_ADC_Init+0x60>)
 80001aa:	f023 73a8 	bic.w	r3, r3, #22020096	; 0x1500000
 80001ae:	62d3      	str	r3, [r2, #44]	; 0x2c
						//	conversions for the ADC regular channels
  ADC1->SQR3	&= 	~(ADC_SQR3_SQ1);	// Step 5 - Select the channel for the first ADC
 80001b0:	4b07      	ldr	r3, [pc, #28]	; (80001d0 <USER_ADC_Init+0x60>)
 80001b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001b4:	4a06      	ldr	r2, [pc, #24]	; (80001d0 <USER_ADC_Init+0x60>)
 80001b6:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 80001ba:	6353      	str	r3, [r2, #52]	; 0x34
						//	conversion
  //ADC1->CR2	|=	ADC_CR2_CAL;		// Step 6 - Perform a calibration after
						// 	each power-up
 // while ( ADC1->CR2 & ADC_CR2_CAL );		// Step 7 - Wait until the bit is reset by
						//	hardware after calibration is complete
  ADC1->CR2	|=	ADC_CR2_ADON;		// Step 8 - Enable the ADC module
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <USER_ADC_Init+0x60>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4a03      	ldr	r2, [pc, #12]	; (80001d0 <USER_ADC_Init+0x60>)
 80001c2:	f043 0301 	orr.w	r3, r3, #1
 80001c6:	6093      	str	r3, [r2, #8]
}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40012400 	.word	0x40012400

080001d4 <USER_ADC1_Convert>:

uint32_t USER_ADC1_Convert( void )
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  if( ADC1->SR & ADC_SR_EOC )			// Wait for end of conversion
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <USER_ADC1_Convert+0x2c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f003 0302 	and.w	r3, r3, #2
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d008      	beq.n	80001f6 <USER_ADC1_Convert+0x22>
  {
      ADC1->SR	&=	~(ADC_SR_EOC);
 80001e4:	4b06      	ldr	r3, [pc, #24]	; (8000200 <USER_ADC1_Convert+0x2c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a05      	ldr	r2, [pc, #20]	; (8000200 <USER_ADC1_Convert+0x2c>)
 80001ea:	f023 0302 	bic.w	r3, r3, #2
 80001ee:	6013      	str	r3, [r2, #0]
      return ADC1->DR;
 80001f0:	4b03      	ldr	r3, [pc, #12]	; (8000200 <USER_ADC1_Convert+0x2c>)
 80001f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f4:	e000      	b.n	80001f8 <USER_ADC1_Convert+0x24>
  }

  return 1;
 80001f6:	2301      	movs	r3, #1
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr
 8000200:	40012400 	.word	0x40012400

08000204 <main>:

void USER_RCC_ClockEnable( void );
void USER_GPIO_Init( void );

int main( void )
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* Loop forever */

  USER_RCC_ClockEnable( );
 8000208:	f000 f816 	bl	8000238 <USER_RCC_ClockEnable>
  USER_GPIO_Init( );
 800020c:	f000 f834 	bl	8000278 <USER_GPIO_Init>
  USER_USART1_Init( );
 8000210:	f000 f8d0 	bl	80003b4 <USER_USART1_Init>
  USER_ADC_Init();
 8000214:	f7ff ffac 	bl	8000170 <USER_ADC_Init>

  for(;;)
  {
      ConversionData = USER_ADC1_Convert();
 8000218:	f7ff ffdc 	bl	80001d4 <USER_ADC1_Convert>
 800021c:	4603      	mov	r3, r0
 800021e:	4a04      	ldr	r2, [pc, #16]	; (8000230 <main+0x2c>)
 8000220:	6013      	str	r3, [r2, #0]
      printf("Data: %d\n\r", (int)ConversionData);
 8000222:	4b03      	ldr	r3, [pc, #12]	; (8000230 <main+0x2c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4619      	mov	r1, r3
 8000228:	4802      	ldr	r0, [pc, #8]	; (8000234 <main+0x30>)
 800022a:	f000 f9f9 	bl	8000620 <iprintf>
      ConversionData = USER_ADC1_Convert();
 800022e:	e7f3      	b.n	8000218 <main+0x14>
 8000230:	20000078 	.word	0x20000078
 8000234:	08001334 	.word	0x08001334

08000238 <USER_RCC_ClockEnable>:
  }
}

void USER_RCC_ClockEnable( void )
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0

  // RCC_APB2ENR modified to IO port A clock enable

  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;		// To set IOPAEN bit
 800023c:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <USER_RCC_ClockEnable+0x3c>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	4a0c      	ldr	r2, [pc, #48]	; (8000274 <USER_RCC_ClockEnable+0x3c>)
 8000242:	f043 0304 	orr.w	r3, r3, #4
 8000246:	6193      	str	r3, [r2, #24]

  // RCC_APB2ENR modified to enable the clock for USART1

  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;		// To set USART1EN bit
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <USER_RCC_ClockEnable+0x3c>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a09      	ldr	r2, [pc, #36]	; (8000274 <USER_RCC_ClockEnable+0x3c>)
 800024e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000252:	6193      	str	r3, [r2, #24]

  // RCC_APB2ENR and RCC_CFGR modified to enable and adjust the clock for ADC1

  RCC->APB2ENR	|=	RCC_APB2ENR_ADC1EN;	// Enable clock for ADC1
 8000254:	4b07      	ldr	r3, [pc, #28]	; (8000274 <USER_RCC_ClockEnable+0x3c>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a06      	ldr	r2, [pc, #24]	; (8000274 <USER_RCC_ClockEnable+0x3c>)
 800025a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800025e:	6193      	str	r3, [r2, #24]
  RCC->CFGR	|=	RCC_CFGR_ADCPRE;	// Adjust ADC input clock
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <USER_RCC_ClockEnable+0x3c>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <USER_RCC_ClockEnable+0x3c>)
 8000266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800026a:	6053      	str	r3, [r2, #4]

}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	40021000 	.word	0x40021000

08000278 <USER_GPIO_Init>:

void USER_GPIO_Init( void )
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  // Pin PA1 as analog input

  GPIOA->CRL	&=	~( GPIO_CRL_MODE1 )
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <USER_GPIO_Init+0x30>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a09      	ldr	r2, [pc, #36]	; (80002a8 <USER_GPIO_Init+0x30>)
 8000282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000286:	6013      	str	r3, [r2, #0]
		&	~( GPIO_CRL_CNF1 );

  // Pin PA9 (USART1_TX) as alternate function output push-pull, max speed 10MHz

  GPIOA->CRH	&=	~( 0x1UL <<  6U )
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <USER_GPIO_Init+0x30>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <USER_GPIO_Init+0x30>)
 800028e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000292:	6053      	str	r3, [r2, #4]
		&	~( 0x2UL <<  4U );

  GPIOA->CRH	|=	 ( 0x2UL <<  6U )
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <USER_GPIO_Init+0x30>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	4a03      	ldr	r2, [pc, #12]	; (80002a8 <USER_GPIO_Init+0x30>)
 800029a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800029e:	6053      	str	r3, [r2, #4]
		|	 ( 0x1UL <<  4U );
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	40010800 	.word	0x40010800

080002ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]
 80002bc:	e00a      	b.n	80002d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002be:	f3af 8000 	nop.w
 80002c2:	4601      	mov	r1, r0
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	1c5a      	adds	r2, r3, #1
 80002c8:	60ba      	str	r2, [r7, #8]
 80002ca:	b2ca      	uxtb	r2, r1
 80002cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	3301      	adds	r3, #1
 80002d2:	617b      	str	r3, [r7, #20]
 80002d4:	697a      	ldr	r2, [r7, #20]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	429a      	cmp	r2, r3
 80002da:	dbf0      	blt.n	80002be <_read+0x12>
  }

  return len;
 80002dc:	687b      	ldr	r3, [r7, #4]
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3718      	adds	r7, #24
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80002e6:	b480      	push	{r7}
 80002e8:	b083      	sub	sp, #12
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80002ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800030c:	605a      	str	r2, [r3, #4]
  return 0;
 800030e:	2300      	movs	r3, #0
}
 8000310:	4618      	mov	r0, r3
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr

0800031a <_isatty>:

int _isatty(int file)
{
 800031a:	b480      	push	{r7}
 800031c:	b083      	sub	sp, #12
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000322:	2301      	movs	r3, #1
}
 8000324:	4618      	mov	r0, r3
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr

0800032e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800032e:	b480      	push	{r7}
 8000330:	b085      	sub	sp, #20
 8000332:	af00      	add	r7, sp, #0
 8000334:	60f8      	str	r0, [r7, #12]
 8000336:	60b9      	str	r1, [r7, #8]
 8000338:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800033a:	2300      	movs	r3, #0
}
 800033c:	4618      	mov	r0, r3
 800033e:	3714      	adds	r7, #20
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
	...

08000348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000350:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <_sbrk+0x5c>)
 8000352:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <_sbrk+0x60>)
 8000354:	1ad3      	subs	r3, r2, r3
 8000356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800035c:	4b13      	ldr	r3, [pc, #76]	; (80003ac <_sbrk+0x64>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d102      	bne.n	800036a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <_sbrk+0x64>)
 8000366:	4a12      	ldr	r2, [pc, #72]	; (80003b0 <_sbrk+0x68>)
 8000368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <_sbrk+0x64>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	693a      	ldr	r2, [r7, #16]
 8000374:	429a      	cmp	r2, r3
 8000376:	d207      	bcs.n	8000388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000378:	f000 f9f6 	bl	8000768 <__errno>
 800037c:	4603      	mov	r3, r0
 800037e:	220c      	movs	r2, #12
 8000380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000382:	f04f 33ff 	mov.w	r3, #4294967295
 8000386:	e009      	b.n	800039c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <_sbrk+0x64>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <_sbrk+0x64>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4413      	add	r3, r2
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <_sbrk+0x64>)
 8000398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800039a:	68fb      	ldr	r3, [r7, #12]
}
 800039c:	4618      	mov	r0, r3
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20005000 	.word	0x20005000
 80003a8:	00000400 	.word	0x00000400
 80003ac:	2000007c 	.word	0x2000007c
 80003b0:	200001d0 	.word	0x200001d0

080003b4 <USER_USART1_Init>:
 */

#include "main.h"
#include "uart.h"

void USER_USART1_Init( void ) {
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
	USART1->CR1	|=	 USART_CR1_UE;		//	Step 1 - USART enabled
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <USER_USART1_Init+0x44>)
 80003ba:	68db      	ldr	r3, [r3, #12]
 80003bc:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <USER_USART1_Init+0x44>)
 80003be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003c2:	60d3      	str	r3, [r2, #12]
	USART1->CR1	&=	~USART_CR1_M;		//	Step 2 - 8 Data bits
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <USER_USART1_Init+0x44>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <USER_USART1_Init+0x44>)
 80003ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003ce:	60d3      	str	r3, [r2, #12]
	USART1->CR2	&=	~USART_CR2_STOP;	//	Step 3 - 1 Stop bit
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <USER_USART1_Init+0x44>)
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <USER_USART1_Init+0x44>)
 80003d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003da:	6113      	str	r3, [r2, #16]
	USART1->BRR	 =	 USARTDIV;		//	Step 5 - Desired baud rate
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <USER_USART1_Init+0x44>)
 80003de:	2245      	movs	r2, #69	; 0x45
 80003e0:	609a      	str	r2, [r3, #8]
	USART1->CR1	|= 	 USART_CR1_TE;		//	Step 6 - Transmitter enabled
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <USER_USART1_Init+0x44>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <USER_USART1_Init+0x44>)
 80003e8:	f043 0308 	orr.w	r3, r3, #8
 80003ec:	60d3      	str	r3, [r2, #12]
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40013800 	.word	0x40013800

080003fc <_write>:
 * writes to the standard output.
 *
 * It redirects standard output stream in C to USART peripheral
 * device */

int _write(int file, char *ptr, int len) {
 80003fc:	b480      	push	{r7}
 80003fe:	b087      	sub	sp, #28
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]

	int DataIdx;

	for( DataIdx = 0 ; DataIdx < len; DataIdx++ ) {
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	e00f      	b.n	800042e <_write+0x32>
		while(!( USART1->SR & USART_SR_TXE ));	// Wait until USART_DR is empty
 800040e:	bf00      	nop
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <_write+0x48>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000418:	2b00      	cmp	r3, #0
 800041a:	d0f9      	beq.n	8000410 <_write+0x14>
		USART1->DR = *ptr++;			// Transmit data
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	1c5a      	adds	r2, r3, #1
 8000420:	60ba      	str	r2, [r7, #8]
 8000422:	781a      	ldrb	r2, [r3, #0]
 8000424:	4b07      	ldr	r3, [pc, #28]	; (8000444 <_write+0x48>)
 8000426:	605a      	str	r2, [r3, #4]
	for( DataIdx = 0 ; DataIdx < len; DataIdx++ ) {
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	3301      	adds	r3, #1
 800042c:	617b      	str	r3, [r7, #20]
 800042e:	697a      	ldr	r2, [r7, #20]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	429a      	cmp	r2, r3
 8000434:	dbeb      	blt.n	800040e <_write+0x12>
	}

	return len;
 8000436:	687b      	ldr	r3, [r7, #4]
}
 8000438:	4618      	mov	r0, r3
 800043a:	371c      	adds	r7, #28
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40013800 	.word	0x40013800

08000448 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000448:	480d      	ldr	r0, [pc, #52]	; (8000480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800044c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000450:	480c      	ldr	r0, [pc, #48]	; (8000484 <LoopForever+0x6>)
  ldr r1, =_edata
 8000452:	490d      	ldr	r1, [pc, #52]	; (8000488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000454:	4a0d      	ldr	r2, [pc, #52]	; (800048c <LoopForever+0xe>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000468:	4c0a      	ldr	r4, [pc, #40]	; (8000494 <LoopForever+0x16>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000476:	f000 f97d 	bl	8000774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047a:	f7ff fec3 	bl	8000204 <main>

0800047e <LoopForever>:

LoopForever:
  b LoopForever
 800047e:	e7fe      	b.n	800047e <LoopForever>
  ldr   r0, =_estack
 8000480:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800048c:	0800137c 	.word	0x0800137c
  ldr r2, =_sbss
 8000490:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000494:	200001cc 	.word	0x200001cc

08000498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC1_2_IRQHandler>
	...

0800049c <std>:
 800049c:	2300      	movs	r3, #0
 800049e:	b510      	push	{r4, lr}
 80004a0:	4604      	mov	r4, r0
 80004a2:	e9c0 3300 	strd	r3, r3, [r0]
 80004a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80004aa:	6083      	str	r3, [r0, #8]
 80004ac:	8181      	strh	r1, [r0, #12]
 80004ae:	6643      	str	r3, [r0, #100]	; 0x64
 80004b0:	81c2      	strh	r2, [r0, #14]
 80004b2:	6183      	str	r3, [r0, #24]
 80004b4:	4619      	mov	r1, r3
 80004b6:	2208      	movs	r2, #8
 80004b8:	305c      	adds	r0, #92	; 0x5c
 80004ba:	f000 f906 	bl	80006ca <memset>
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <std+0x58>)
 80004c0:	6224      	str	r4, [r4, #32]
 80004c2:	6263      	str	r3, [r4, #36]	; 0x24
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <std+0x5c>)
 80004c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <std+0x60>)
 80004ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <std+0x64>)
 80004ce:	6323      	str	r3, [r4, #48]	; 0x30
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <std+0x68>)
 80004d2:	429c      	cmp	r4, r3
 80004d4:	d006      	beq.n	80004e4 <std+0x48>
 80004d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80004da:	4294      	cmp	r4, r2
 80004dc:	d002      	beq.n	80004e4 <std+0x48>
 80004de:	33d0      	adds	r3, #208	; 0xd0
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d105      	bne.n	80004f0 <std+0x54>
 80004e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80004e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004ec:	f000 b966 	b.w	80007bc <__retarget_lock_init_recursive>
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	bf00      	nop
 80004f4:	08000645 	.word	0x08000645
 80004f8:	08000667 	.word	0x08000667
 80004fc:	0800069f 	.word	0x0800069f
 8000500:	080006c3 	.word	0x080006c3
 8000504:	20000080 	.word	0x20000080

08000508 <stdio_exit_handler>:
 8000508:	4a02      	ldr	r2, [pc, #8]	; (8000514 <stdio_exit_handler+0xc>)
 800050a:	4903      	ldr	r1, [pc, #12]	; (8000518 <stdio_exit_handler+0x10>)
 800050c:	4803      	ldr	r0, [pc, #12]	; (800051c <stdio_exit_handler+0x14>)
 800050e:	f000 b869 	b.w	80005e4 <_fwalk_sglue>
 8000512:	bf00      	nop
 8000514:	20000000 	.word	0x20000000
 8000518:	0800105d 	.word	0x0800105d
 800051c:	2000000c 	.word	0x2000000c

08000520 <cleanup_stdio>:
 8000520:	6841      	ldr	r1, [r0, #4]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <cleanup_stdio+0x34>)
 8000524:	b510      	push	{r4, lr}
 8000526:	4299      	cmp	r1, r3
 8000528:	4604      	mov	r4, r0
 800052a:	d001      	beq.n	8000530 <cleanup_stdio+0x10>
 800052c:	f000 fd96 	bl	800105c <_fflush_r>
 8000530:	68a1      	ldr	r1, [r4, #8]
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <cleanup_stdio+0x38>)
 8000534:	4299      	cmp	r1, r3
 8000536:	d002      	beq.n	800053e <cleanup_stdio+0x1e>
 8000538:	4620      	mov	r0, r4
 800053a:	f000 fd8f 	bl	800105c <_fflush_r>
 800053e:	68e1      	ldr	r1, [r4, #12]
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <cleanup_stdio+0x3c>)
 8000542:	4299      	cmp	r1, r3
 8000544:	d004      	beq.n	8000550 <cleanup_stdio+0x30>
 8000546:	4620      	mov	r0, r4
 8000548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800054c:	f000 bd86 	b.w	800105c <_fflush_r>
 8000550:	bd10      	pop	{r4, pc}
 8000552:	bf00      	nop
 8000554:	20000080 	.word	0x20000080
 8000558:	200000e8 	.word	0x200000e8
 800055c:	20000150 	.word	0x20000150

08000560 <global_stdio_init.part.0>:
 8000560:	b510      	push	{r4, lr}
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <global_stdio_init.part.0+0x30>)
 8000564:	4c0b      	ldr	r4, [pc, #44]	; (8000594 <global_stdio_init.part.0+0x34>)
 8000566:	4a0c      	ldr	r2, [pc, #48]	; (8000598 <global_stdio_init.part.0+0x38>)
 8000568:	4620      	mov	r0, r4
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	2104      	movs	r1, #4
 800056e:	2200      	movs	r2, #0
 8000570:	f7ff ff94 	bl	800049c <std>
 8000574:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000578:	2201      	movs	r2, #1
 800057a:	2109      	movs	r1, #9
 800057c:	f7ff ff8e 	bl	800049c <std>
 8000580:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000584:	2202      	movs	r2, #2
 8000586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800058a:	2112      	movs	r1, #18
 800058c:	f7ff bf86 	b.w	800049c <std>
 8000590:	200001b8 	.word	0x200001b8
 8000594:	20000080 	.word	0x20000080
 8000598:	08000509 	.word	0x08000509

0800059c <__sfp_lock_acquire>:
 800059c:	4801      	ldr	r0, [pc, #4]	; (80005a4 <__sfp_lock_acquire+0x8>)
 800059e:	f000 b90e 	b.w	80007be <__retarget_lock_acquire_recursive>
 80005a2:	bf00      	nop
 80005a4:	200001c1 	.word	0x200001c1

080005a8 <__sfp_lock_release>:
 80005a8:	4801      	ldr	r0, [pc, #4]	; (80005b0 <__sfp_lock_release+0x8>)
 80005aa:	f000 b909 	b.w	80007c0 <__retarget_lock_release_recursive>
 80005ae:	bf00      	nop
 80005b0:	200001c1 	.word	0x200001c1

080005b4 <__sinit>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	4604      	mov	r4, r0
 80005b8:	f7ff fff0 	bl	800059c <__sfp_lock_acquire>
 80005bc:	6a23      	ldr	r3, [r4, #32]
 80005be:	b11b      	cbz	r3, 80005c8 <__sinit+0x14>
 80005c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005c4:	f7ff bff0 	b.w	80005a8 <__sfp_lock_release>
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <__sinit+0x28>)
 80005ca:	6223      	str	r3, [r4, #32]
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <__sinit+0x2c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f5      	bne.n	80005c0 <__sinit+0xc>
 80005d4:	f7ff ffc4 	bl	8000560 <global_stdio_init.part.0>
 80005d8:	e7f2      	b.n	80005c0 <__sinit+0xc>
 80005da:	bf00      	nop
 80005dc:	08000521 	.word	0x08000521
 80005e0:	200001b8 	.word	0x200001b8

080005e4 <_fwalk_sglue>:
 80005e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005e8:	4607      	mov	r7, r0
 80005ea:	4688      	mov	r8, r1
 80005ec:	4614      	mov	r4, r2
 80005ee:	2600      	movs	r6, #0
 80005f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80005f4:	f1b9 0901 	subs.w	r9, r9, #1
 80005f8:	d505      	bpl.n	8000606 <_fwalk_sglue+0x22>
 80005fa:	6824      	ldr	r4, [r4, #0]
 80005fc:	2c00      	cmp	r4, #0
 80005fe:	d1f7      	bne.n	80005f0 <_fwalk_sglue+0xc>
 8000600:	4630      	mov	r0, r6
 8000602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000606:	89ab      	ldrh	r3, [r5, #12]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d907      	bls.n	800061c <_fwalk_sglue+0x38>
 800060c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000610:	3301      	adds	r3, #1
 8000612:	d003      	beq.n	800061c <_fwalk_sglue+0x38>
 8000614:	4629      	mov	r1, r5
 8000616:	4638      	mov	r0, r7
 8000618:	47c0      	blx	r8
 800061a:	4306      	orrs	r6, r0
 800061c:	3568      	adds	r5, #104	; 0x68
 800061e:	e7e9      	b.n	80005f4 <_fwalk_sglue+0x10>

08000620 <iprintf>:
 8000620:	b40f      	push	{r0, r1, r2, r3}
 8000622:	b507      	push	{r0, r1, r2, lr}
 8000624:	4906      	ldr	r1, [pc, #24]	; (8000640 <iprintf+0x20>)
 8000626:	ab04      	add	r3, sp, #16
 8000628:	6808      	ldr	r0, [r1, #0]
 800062a:	f853 2b04 	ldr.w	r2, [r3], #4
 800062e:	6881      	ldr	r1, [r0, #8]
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	f000 f9e3 	bl	80009fc <_vfiprintf_r>
 8000636:	b003      	add	sp, #12
 8000638:	f85d eb04 	ldr.w	lr, [sp], #4
 800063c:	b004      	add	sp, #16
 800063e:	4770      	bx	lr
 8000640:	20000058 	.word	0x20000058

08000644 <__sread>:
 8000644:	b510      	push	{r4, lr}
 8000646:	460c      	mov	r4, r1
 8000648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800064c:	f000 f868 	bl	8000720 <_read_r>
 8000650:	2800      	cmp	r0, #0
 8000652:	bfab      	itete	ge
 8000654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000656:	89a3      	ldrhlt	r3, [r4, #12]
 8000658:	181b      	addge	r3, r3, r0
 800065a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800065e:	bfac      	ite	ge
 8000660:	6563      	strge	r3, [r4, #84]	; 0x54
 8000662:	81a3      	strhlt	r3, [r4, #12]
 8000664:	bd10      	pop	{r4, pc}

08000666 <__swrite>:
 8000666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800066a:	461f      	mov	r7, r3
 800066c:	898b      	ldrh	r3, [r1, #12]
 800066e:	4605      	mov	r5, r0
 8000670:	05db      	lsls	r3, r3, #23
 8000672:	460c      	mov	r4, r1
 8000674:	4616      	mov	r6, r2
 8000676:	d505      	bpl.n	8000684 <__swrite+0x1e>
 8000678:	2302      	movs	r3, #2
 800067a:	2200      	movs	r2, #0
 800067c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000680:	f000 f83c 	bl	80006fc <_lseek_r>
 8000684:	89a3      	ldrh	r3, [r4, #12]
 8000686:	4632      	mov	r2, r6
 8000688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800068c:	81a3      	strh	r3, [r4, #12]
 800068e:	4628      	mov	r0, r5
 8000690:	463b      	mov	r3, r7
 8000692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800069a:	f000 b853 	b.w	8000744 <_write_r>

0800069e <__sseek>:
 800069e:	b510      	push	{r4, lr}
 80006a0:	460c      	mov	r4, r1
 80006a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006a6:	f000 f829 	bl	80006fc <_lseek_r>
 80006aa:	1c43      	adds	r3, r0, #1
 80006ac:	89a3      	ldrh	r3, [r4, #12]
 80006ae:	bf15      	itete	ne
 80006b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80006b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80006b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80006ba:	81a3      	strheq	r3, [r4, #12]
 80006bc:	bf18      	it	ne
 80006be:	81a3      	strhne	r3, [r4, #12]
 80006c0:	bd10      	pop	{r4, pc}

080006c2 <__sclose>:
 80006c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006c6:	f000 b809 	b.w	80006dc <_close_r>

080006ca <memset>:
 80006ca:	4603      	mov	r3, r0
 80006cc:	4402      	add	r2, r0
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d100      	bne.n	80006d4 <memset+0xa>
 80006d2:	4770      	bx	lr
 80006d4:	f803 1b01 	strb.w	r1, [r3], #1
 80006d8:	e7f9      	b.n	80006ce <memset+0x4>
	...

080006dc <_close_r>:
 80006dc:	b538      	push	{r3, r4, r5, lr}
 80006de:	2300      	movs	r3, #0
 80006e0:	4d05      	ldr	r5, [pc, #20]	; (80006f8 <_close_r+0x1c>)
 80006e2:	4604      	mov	r4, r0
 80006e4:	4608      	mov	r0, r1
 80006e6:	602b      	str	r3, [r5, #0]
 80006e8:	f7ff fdfd 	bl	80002e6 <_close>
 80006ec:	1c43      	adds	r3, r0, #1
 80006ee:	d102      	bne.n	80006f6 <_close_r+0x1a>
 80006f0:	682b      	ldr	r3, [r5, #0]
 80006f2:	b103      	cbz	r3, 80006f6 <_close_r+0x1a>
 80006f4:	6023      	str	r3, [r4, #0]
 80006f6:	bd38      	pop	{r3, r4, r5, pc}
 80006f8:	200001bc 	.word	0x200001bc

080006fc <_lseek_r>:
 80006fc:	b538      	push	{r3, r4, r5, lr}
 80006fe:	4604      	mov	r4, r0
 8000700:	4608      	mov	r0, r1
 8000702:	4611      	mov	r1, r2
 8000704:	2200      	movs	r2, #0
 8000706:	4d05      	ldr	r5, [pc, #20]	; (800071c <_lseek_r+0x20>)
 8000708:	602a      	str	r2, [r5, #0]
 800070a:	461a      	mov	r2, r3
 800070c:	f7ff fe0f 	bl	800032e <_lseek>
 8000710:	1c43      	adds	r3, r0, #1
 8000712:	d102      	bne.n	800071a <_lseek_r+0x1e>
 8000714:	682b      	ldr	r3, [r5, #0]
 8000716:	b103      	cbz	r3, 800071a <_lseek_r+0x1e>
 8000718:	6023      	str	r3, [r4, #0]
 800071a:	bd38      	pop	{r3, r4, r5, pc}
 800071c:	200001bc 	.word	0x200001bc

08000720 <_read_r>:
 8000720:	b538      	push	{r3, r4, r5, lr}
 8000722:	4604      	mov	r4, r0
 8000724:	4608      	mov	r0, r1
 8000726:	4611      	mov	r1, r2
 8000728:	2200      	movs	r2, #0
 800072a:	4d05      	ldr	r5, [pc, #20]	; (8000740 <_read_r+0x20>)
 800072c:	602a      	str	r2, [r5, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	f7ff fdbc 	bl	80002ac <_read>
 8000734:	1c43      	adds	r3, r0, #1
 8000736:	d102      	bne.n	800073e <_read_r+0x1e>
 8000738:	682b      	ldr	r3, [r5, #0]
 800073a:	b103      	cbz	r3, 800073e <_read_r+0x1e>
 800073c:	6023      	str	r3, [r4, #0]
 800073e:	bd38      	pop	{r3, r4, r5, pc}
 8000740:	200001bc 	.word	0x200001bc

08000744 <_write_r>:
 8000744:	b538      	push	{r3, r4, r5, lr}
 8000746:	4604      	mov	r4, r0
 8000748:	4608      	mov	r0, r1
 800074a:	4611      	mov	r1, r2
 800074c:	2200      	movs	r2, #0
 800074e:	4d05      	ldr	r5, [pc, #20]	; (8000764 <_write_r+0x20>)
 8000750:	602a      	str	r2, [r5, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	f7ff fe52 	bl	80003fc <_write>
 8000758:	1c43      	adds	r3, r0, #1
 800075a:	d102      	bne.n	8000762 <_write_r+0x1e>
 800075c:	682b      	ldr	r3, [r5, #0]
 800075e:	b103      	cbz	r3, 8000762 <_write_r+0x1e>
 8000760:	6023      	str	r3, [r4, #0]
 8000762:	bd38      	pop	{r3, r4, r5, pc}
 8000764:	200001bc 	.word	0x200001bc

08000768 <__errno>:
 8000768:	4b01      	ldr	r3, [pc, #4]	; (8000770 <__errno+0x8>)
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000058 	.word	0x20000058

08000774 <__libc_init_array>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	2600      	movs	r6, #0
 8000778:	4d0c      	ldr	r5, [pc, #48]	; (80007ac <__libc_init_array+0x38>)
 800077a:	4c0d      	ldr	r4, [pc, #52]	; (80007b0 <__libc_init_array+0x3c>)
 800077c:	1b64      	subs	r4, r4, r5
 800077e:	10a4      	asrs	r4, r4, #2
 8000780:	42a6      	cmp	r6, r4
 8000782:	d109      	bne.n	8000798 <__libc_init_array+0x24>
 8000784:	f000 fdca 	bl	800131c <_init>
 8000788:	2600      	movs	r6, #0
 800078a:	4d0a      	ldr	r5, [pc, #40]	; (80007b4 <__libc_init_array+0x40>)
 800078c:	4c0a      	ldr	r4, [pc, #40]	; (80007b8 <__libc_init_array+0x44>)
 800078e:	1b64      	subs	r4, r4, r5
 8000790:	10a4      	asrs	r4, r4, #2
 8000792:	42a6      	cmp	r6, r4
 8000794:	d105      	bne.n	80007a2 <__libc_init_array+0x2e>
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	f855 3b04 	ldr.w	r3, [r5], #4
 800079c:	4798      	blx	r3
 800079e:	3601      	adds	r6, #1
 80007a0:	e7ee      	b.n	8000780 <__libc_init_array+0xc>
 80007a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a6:	4798      	blx	r3
 80007a8:	3601      	adds	r6, #1
 80007aa:	e7f2      	b.n	8000792 <__libc_init_array+0x1e>
 80007ac:	08001374 	.word	0x08001374
 80007b0:	08001374 	.word	0x08001374
 80007b4:	08001374 	.word	0x08001374
 80007b8:	08001378 	.word	0x08001378

080007bc <__retarget_lock_init_recursive>:
 80007bc:	4770      	bx	lr

080007be <__retarget_lock_acquire_recursive>:
 80007be:	4770      	bx	lr

080007c0 <__retarget_lock_release_recursive>:
 80007c0:	4770      	bx	lr
	...

080007c4 <_free_r>:
 80007c4:	b538      	push	{r3, r4, r5, lr}
 80007c6:	4605      	mov	r5, r0
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d040      	beq.n	800084e <_free_r+0x8a>
 80007cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007d0:	1f0c      	subs	r4, r1, #4
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bfb8      	it	lt
 80007d6:	18e4      	addlt	r4, r4, r3
 80007d8:	f000 f8dc 	bl	8000994 <__malloc_lock>
 80007dc:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <_free_r+0x8c>)
 80007de:	6813      	ldr	r3, [r2, #0]
 80007e0:	b933      	cbnz	r3, 80007f0 <_free_r+0x2c>
 80007e2:	6063      	str	r3, [r4, #4]
 80007e4:	6014      	str	r4, [r2, #0]
 80007e6:	4628      	mov	r0, r5
 80007e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80007ec:	f000 b8d8 	b.w	80009a0 <__malloc_unlock>
 80007f0:	42a3      	cmp	r3, r4
 80007f2:	d908      	bls.n	8000806 <_free_r+0x42>
 80007f4:	6820      	ldr	r0, [r4, #0]
 80007f6:	1821      	adds	r1, r4, r0
 80007f8:	428b      	cmp	r3, r1
 80007fa:	bf01      	itttt	eq
 80007fc:	6819      	ldreq	r1, [r3, #0]
 80007fe:	685b      	ldreq	r3, [r3, #4]
 8000800:	1809      	addeq	r1, r1, r0
 8000802:	6021      	streq	r1, [r4, #0]
 8000804:	e7ed      	b.n	80007e2 <_free_r+0x1e>
 8000806:	461a      	mov	r2, r3
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	b10b      	cbz	r3, 8000810 <_free_r+0x4c>
 800080c:	42a3      	cmp	r3, r4
 800080e:	d9fa      	bls.n	8000806 <_free_r+0x42>
 8000810:	6811      	ldr	r1, [r2, #0]
 8000812:	1850      	adds	r0, r2, r1
 8000814:	42a0      	cmp	r0, r4
 8000816:	d10b      	bne.n	8000830 <_free_r+0x6c>
 8000818:	6820      	ldr	r0, [r4, #0]
 800081a:	4401      	add	r1, r0
 800081c:	1850      	adds	r0, r2, r1
 800081e:	4283      	cmp	r3, r0
 8000820:	6011      	str	r1, [r2, #0]
 8000822:	d1e0      	bne.n	80007e6 <_free_r+0x22>
 8000824:	6818      	ldr	r0, [r3, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	4408      	add	r0, r1
 800082a:	6010      	str	r0, [r2, #0]
 800082c:	6053      	str	r3, [r2, #4]
 800082e:	e7da      	b.n	80007e6 <_free_r+0x22>
 8000830:	d902      	bls.n	8000838 <_free_r+0x74>
 8000832:	230c      	movs	r3, #12
 8000834:	602b      	str	r3, [r5, #0]
 8000836:	e7d6      	b.n	80007e6 <_free_r+0x22>
 8000838:	6820      	ldr	r0, [r4, #0]
 800083a:	1821      	adds	r1, r4, r0
 800083c:	428b      	cmp	r3, r1
 800083e:	bf01      	itttt	eq
 8000840:	6819      	ldreq	r1, [r3, #0]
 8000842:	685b      	ldreq	r3, [r3, #4]
 8000844:	1809      	addeq	r1, r1, r0
 8000846:	6021      	streq	r1, [r4, #0]
 8000848:	6063      	str	r3, [r4, #4]
 800084a:	6054      	str	r4, [r2, #4]
 800084c:	e7cb      	b.n	80007e6 <_free_r+0x22>
 800084e:	bd38      	pop	{r3, r4, r5, pc}
 8000850:	200001c4 	.word	0x200001c4

08000854 <sbrk_aligned>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	4e0e      	ldr	r6, [pc, #56]	; (8000890 <sbrk_aligned+0x3c>)
 8000858:	460c      	mov	r4, r1
 800085a:	6831      	ldr	r1, [r6, #0]
 800085c:	4605      	mov	r5, r0
 800085e:	b911      	cbnz	r1, 8000866 <sbrk_aligned+0x12>
 8000860:	f000 fcba 	bl	80011d8 <_sbrk_r>
 8000864:	6030      	str	r0, [r6, #0]
 8000866:	4621      	mov	r1, r4
 8000868:	4628      	mov	r0, r5
 800086a:	f000 fcb5 	bl	80011d8 <_sbrk_r>
 800086e:	1c43      	adds	r3, r0, #1
 8000870:	d00a      	beq.n	8000888 <sbrk_aligned+0x34>
 8000872:	1cc4      	adds	r4, r0, #3
 8000874:	f024 0403 	bic.w	r4, r4, #3
 8000878:	42a0      	cmp	r0, r4
 800087a:	d007      	beq.n	800088c <sbrk_aligned+0x38>
 800087c:	1a21      	subs	r1, r4, r0
 800087e:	4628      	mov	r0, r5
 8000880:	f000 fcaa 	bl	80011d8 <_sbrk_r>
 8000884:	3001      	adds	r0, #1
 8000886:	d101      	bne.n	800088c <sbrk_aligned+0x38>
 8000888:	f04f 34ff 	mov.w	r4, #4294967295
 800088c:	4620      	mov	r0, r4
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	200001c8 	.word	0x200001c8

08000894 <_malloc_r>:
 8000894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000898:	1ccd      	adds	r5, r1, #3
 800089a:	f025 0503 	bic.w	r5, r5, #3
 800089e:	3508      	adds	r5, #8
 80008a0:	2d0c      	cmp	r5, #12
 80008a2:	bf38      	it	cc
 80008a4:	250c      	movcc	r5, #12
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	4607      	mov	r7, r0
 80008aa:	db01      	blt.n	80008b0 <_malloc_r+0x1c>
 80008ac:	42a9      	cmp	r1, r5
 80008ae:	d905      	bls.n	80008bc <_malloc_r+0x28>
 80008b0:	230c      	movs	r3, #12
 80008b2:	2600      	movs	r6, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4630      	mov	r0, r6
 80008b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000990 <_malloc_r+0xfc>
 80008c0:	f000 f868 	bl	8000994 <__malloc_lock>
 80008c4:	f8d8 3000 	ldr.w	r3, [r8]
 80008c8:	461c      	mov	r4, r3
 80008ca:	bb5c      	cbnz	r4, 8000924 <_malloc_r+0x90>
 80008cc:	4629      	mov	r1, r5
 80008ce:	4638      	mov	r0, r7
 80008d0:	f7ff ffc0 	bl	8000854 <sbrk_aligned>
 80008d4:	1c43      	adds	r3, r0, #1
 80008d6:	4604      	mov	r4, r0
 80008d8:	d155      	bne.n	8000986 <_malloc_r+0xf2>
 80008da:	f8d8 4000 	ldr.w	r4, [r8]
 80008de:	4626      	mov	r6, r4
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d145      	bne.n	8000970 <_malloc_r+0xdc>
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d048      	beq.n	800097a <_malloc_r+0xe6>
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	4631      	mov	r1, r6
 80008ec:	4638      	mov	r0, r7
 80008ee:	eb04 0903 	add.w	r9, r4, r3
 80008f2:	f000 fc71 	bl	80011d8 <_sbrk_r>
 80008f6:	4581      	cmp	r9, r0
 80008f8:	d13f      	bne.n	800097a <_malloc_r+0xe6>
 80008fa:	6821      	ldr	r1, [r4, #0]
 80008fc:	4638      	mov	r0, r7
 80008fe:	1a6d      	subs	r5, r5, r1
 8000900:	4629      	mov	r1, r5
 8000902:	f7ff ffa7 	bl	8000854 <sbrk_aligned>
 8000906:	3001      	adds	r0, #1
 8000908:	d037      	beq.n	800097a <_malloc_r+0xe6>
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	442b      	add	r3, r5
 800090e:	6023      	str	r3, [r4, #0]
 8000910:	f8d8 3000 	ldr.w	r3, [r8]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d038      	beq.n	800098a <_malloc_r+0xf6>
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	42a2      	cmp	r2, r4
 800091c:	d12b      	bne.n	8000976 <_malloc_r+0xe2>
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	e00f      	b.n	8000944 <_malloc_r+0xb0>
 8000924:	6822      	ldr	r2, [r4, #0]
 8000926:	1b52      	subs	r2, r2, r5
 8000928:	d41f      	bmi.n	800096a <_malloc_r+0xd6>
 800092a:	2a0b      	cmp	r2, #11
 800092c:	d917      	bls.n	800095e <_malloc_r+0xca>
 800092e:	1961      	adds	r1, r4, r5
 8000930:	42a3      	cmp	r3, r4
 8000932:	6025      	str	r5, [r4, #0]
 8000934:	bf18      	it	ne
 8000936:	6059      	strne	r1, [r3, #4]
 8000938:	6863      	ldr	r3, [r4, #4]
 800093a:	bf08      	it	eq
 800093c:	f8c8 1000 	streq.w	r1, [r8]
 8000940:	5162      	str	r2, [r4, r5]
 8000942:	604b      	str	r3, [r1, #4]
 8000944:	4638      	mov	r0, r7
 8000946:	f104 060b 	add.w	r6, r4, #11
 800094a:	f000 f829 	bl	80009a0 <__malloc_unlock>
 800094e:	f026 0607 	bic.w	r6, r6, #7
 8000952:	1d23      	adds	r3, r4, #4
 8000954:	1af2      	subs	r2, r6, r3
 8000956:	d0ae      	beq.n	80008b6 <_malloc_r+0x22>
 8000958:	1b9b      	subs	r3, r3, r6
 800095a:	50a3      	str	r3, [r4, r2]
 800095c:	e7ab      	b.n	80008b6 <_malloc_r+0x22>
 800095e:	42a3      	cmp	r3, r4
 8000960:	6862      	ldr	r2, [r4, #4]
 8000962:	d1dd      	bne.n	8000920 <_malloc_r+0x8c>
 8000964:	f8c8 2000 	str.w	r2, [r8]
 8000968:	e7ec      	b.n	8000944 <_malloc_r+0xb0>
 800096a:	4623      	mov	r3, r4
 800096c:	6864      	ldr	r4, [r4, #4]
 800096e:	e7ac      	b.n	80008ca <_malloc_r+0x36>
 8000970:	4634      	mov	r4, r6
 8000972:	6876      	ldr	r6, [r6, #4]
 8000974:	e7b4      	b.n	80008e0 <_malloc_r+0x4c>
 8000976:	4613      	mov	r3, r2
 8000978:	e7cc      	b.n	8000914 <_malloc_r+0x80>
 800097a:	230c      	movs	r3, #12
 800097c:	4638      	mov	r0, r7
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	f000 f80e 	bl	80009a0 <__malloc_unlock>
 8000984:	e797      	b.n	80008b6 <_malloc_r+0x22>
 8000986:	6025      	str	r5, [r4, #0]
 8000988:	e7dc      	b.n	8000944 <_malloc_r+0xb0>
 800098a:	605b      	str	r3, [r3, #4]
 800098c:	deff      	udf	#255	; 0xff
 800098e:	bf00      	nop
 8000990:	200001c4 	.word	0x200001c4

08000994 <__malloc_lock>:
 8000994:	4801      	ldr	r0, [pc, #4]	; (800099c <__malloc_lock+0x8>)
 8000996:	f7ff bf12 	b.w	80007be <__retarget_lock_acquire_recursive>
 800099a:	bf00      	nop
 800099c:	200001c0 	.word	0x200001c0

080009a0 <__malloc_unlock>:
 80009a0:	4801      	ldr	r0, [pc, #4]	; (80009a8 <__malloc_unlock+0x8>)
 80009a2:	f7ff bf0d 	b.w	80007c0 <__retarget_lock_release_recursive>
 80009a6:	bf00      	nop
 80009a8:	200001c0 	.word	0x200001c0

080009ac <__sfputc_r>:
 80009ac:	6893      	ldr	r3, [r2, #8]
 80009ae:	b410      	push	{r4}
 80009b0:	3b01      	subs	r3, #1
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	6093      	str	r3, [r2, #8]
 80009b6:	da07      	bge.n	80009c8 <__sfputc_r+0x1c>
 80009b8:	6994      	ldr	r4, [r2, #24]
 80009ba:	42a3      	cmp	r3, r4
 80009bc:	db01      	blt.n	80009c2 <__sfputc_r+0x16>
 80009be:	290a      	cmp	r1, #10
 80009c0:	d102      	bne.n	80009c8 <__sfputc_r+0x1c>
 80009c2:	bc10      	pop	{r4}
 80009c4:	f000 bb72 	b.w	80010ac <__swbuf_r>
 80009c8:	6813      	ldr	r3, [r2, #0]
 80009ca:	1c58      	adds	r0, r3, #1
 80009cc:	6010      	str	r0, [r2, #0]
 80009ce:	7019      	strb	r1, [r3, #0]
 80009d0:	4608      	mov	r0, r1
 80009d2:	bc10      	pop	{r4}
 80009d4:	4770      	bx	lr

080009d6 <__sfputs_r>:
 80009d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d8:	4606      	mov	r6, r0
 80009da:	460f      	mov	r7, r1
 80009dc:	4614      	mov	r4, r2
 80009de:	18d5      	adds	r5, r2, r3
 80009e0:	42ac      	cmp	r4, r5
 80009e2:	d101      	bne.n	80009e8 <__sfputs_r+0x12>
 80009e4:	2000      	movs	r0, #0
 80009e6:	e007      	b.n	80009f8 <__sfputs_r+0x22>
 80009e8:	463a      	mov	r2, r7
 80009ea:	4630      	mov	r0, r6
 80009ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009f0:	f7ff ffdc 	bl	80009ac <__sfputc_r>
 80009f4:	1c43      	adds	r3, r0, #1
 80009f6:	d1f3      	bne.n	80009e0 <__sfputs_r+0xa>
 80009f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080009fc <_vfiprintf_r>:
 80009fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a00:	460d      	mov	r5, r1
 8000a02:	4614      	mov	r4, r2
 8000a04:	4698      	mov	r8, r3
 8000a06:	4606      	mov	r6, r0
 8000a08:	b09d      	sub	sp, #116	; 0x74
 8000a0a:	b118      	cbz	r0, 8000a14 <_vfiprintf_r+0x18>
 8000a0c:	6a03      	ldr	r3, [r0, #32]
 8000a0e:	b90b      	cbnz	r3, 8000a14 <_vfiprintf_r+0x18>
 8000a10:	f7ff fdd0 	bl	80005b4 <__sinit>
 8000a14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a16:	07d9      	lsls	r1, r3, #31
 8000a18:	d405      	bmi.n	8000a26 <_vfiprintf_r+0x2a>
 8000a1a:	89ab      	ldrh	r3, [r5, #12]
 8000a1c:	059a      	lsls	r2, r3, #22
 8000a1e:	d402      	bmi.n	8000a26 <_vfiprintf_r+0x2a>
 8000a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a22:	f7ff fecc 	bl	80007be <__retarget_lock_acquire_recursive>
 8000a26:	89ab      	ldrh	r3, [r5, #12]
 8000a28:	071b      	lsls	r3, r3, #28
 8000a2a:	d501      	bpl.n	8000a30 <_vfiprintf_r+0x34>
 8000a2c:	692b      	ldr	r3, [r5, #16]
 8000a2e:	b99b      	cbnz	r3, 8000a58 <_vfiprintf_r+0x5c>
 8000a30:	4629      	mov	r1, r5
 8000a32:	4630      	mov	r0, r6
 8000a34:	f000 fb78 	bl	8001128 <__swsetup_r>
 8000a38:	b170      	cbz	r0, 8000a58 <_vfiprintf_r+0x5c>
 8000a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a3c:	07dc      	lsls	r4, r3, #31
 8000a3e:	d504      	bpl.n	8000a4a <_vfiprintf_r+0x4e>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	b01d      	add	sp, #116	; 0x74
 8000a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a4a:	89ab      	ldrh	r3, [r5, #12]
 8000a4c:	0598      	lsls	r0, r3, #22
 8000a4e:	d4f7      	bmi.n	8000a40 <_vfiprintf_r+0x44>
 8000a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a52:	f7ff feb5 	bl	80007c0 <__retarget_lock_release_recursive>
 8000a56:	e7f3      	b.n	8000a40 <_vfiprintf_r+0x44>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a62:	2330      	movs	r3, #48	; 0x30
 8000a64:	f04f 0901 	mov.w	r9, #1
 8000a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000c1c <_vfiprintf_r+0x220>
 8000a70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a74:	4623      	mov	r3, r4
 8000a76:	469a      	mov	sl, r3
 8000a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a7c:	b10a      	cbz	r2, 8000a82 <_vfiprintf_r+0x86>
 8000a7e:	2a25      	cmp	r2, #37	; 0x25
 8000a80:	d1f9      	bne.n	8000a76 <_vfiprintf_r+0x7a>
 8000a82:	ebba 0b04 	subs.w	fp, sl, r4
 8000a86:	d00b      	beq.n	8000aa0 <_vfiprintf_r+0xa4>
 8000a88:	465b      	mov	r3, fp
 8000a8a:	4622      	mov	r2, r4
 8000a8c:	4629      	mov	r1, r5
 8000a8e:	4630      	mov	r0, r6
 8000a90:	f7ff ffa1 	bl	80009d6 <__sfputs_r>
 8000a94:	3001      	adds	r0, #1
 8000a96:	f000 80a9 	beq.w	8000bec <_vfiprintf_r+0x1f0>
 8000a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a9c:	445a      	add	r2, fp
 8000a9e:	9209      	str	r2, [sp, #36]	; 0x24
 8000aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f000 80a1 	beq.w	8000bec <_vfiprintf_r+0x1f0>
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ab4:	f10a 0a01 	add.w	sl, sl, #1
 8000ab8:	9304      	str	r3, [sp, #16]
 8000aba:	9307      	str	r3, [sp, #28]
 8000abc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ac0:	931a      	str	r3, [sp, #104]	; 0x68
 8000ac2:	4654      	mov	r4, sl
 8000ac4:	2205      	movs	r2, #5
 8000ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000aca:	4854      	ldr	r0, [pc, #336]	; (8000c1c <_vfiprintf_r+0x220>)
 8000acc:	f000 fb94 	bl	80011f8 <memchr>
 8000ad0:	9a04      	ldr	r2, [sp, #16]
 8000ad2:	b9d8      	cbnz	r0, 8000b0c <_vfiprintf_r+0x110>
 8000ad4:	06d1      	lsls	r1, r2, #27
 8000ad6:	bf44      	itt	mi
 8000ad8:	2320      	movmi	r3, #32
 8000ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ade:	0713      	lsls	r3, r2, #28
 8000ae0:	bf44      	itt	mi
 8000ae2:	232b      	movmi	r3, #43	; 0x2b
 8000ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8000aec:	2b2a      	cmp	r3, #42	; 0x2a
 8000aee:	d015      	beq.n	8000b1c <_vfiprintf_r+0x120>
 8000af0:	4654      	mov	r4, sl
 8000af2:	2000      	movs	r0, #0
 8000af4:	f04f 0c0a 	mov.w	ip, #10
 8000af8:	9a07      	ldr	r2, [sp, #28]
 8000afa:	4621      	mov	r1, r4
 8000afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b00:	3b30      	subs	r3, #48	; 0x30
 8000b02:	2b09      	cmp	r3, #9
 8000b04:	d94d      	bls.n	8000ba2 <_vfiprintf_r+0x1a6>
 8000b06:	b1b0      	cbz	r0, 8000b36 <_vfiprintf_r+0x13a>
 8000b08:	9207      	str	r2, [sp, #28]
 8000b0a:	e014      	b.n	8000b36 <_vfiprintf_r+0x13a>
 8000b0c:	eba0 0308 	sub.w	r3, r0, r8
 8000b10:	fa09 f303 	lsl.w	r3, r9, r3
 8000b14:	4313      	orrs	r3, r2
 8000b16:	46a2      	mov	sl, r4
 8000b18:	9304      	str	r3, [sp, #16]
 8000b1a:	e7d2      	b.n	8000ac2 <_vfiprintf_r+0xc6>
 8000b1c:	9b03      	ldr	r3, [sp, #12]
 8000b1e:	1d19      	adds	r1, r3, #4
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	9103      	str	r1, [sp, #12]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bfbb      	ittet	lt
 8000b28:	425b      	neglt	r3, r3
 8000b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8000b2e:	9307      	strge	r3, [sp, #28]
 8000b30:	9307      	strlt	r3, [sp, #28]
 8000b32:	bfb8      	it	lt
 8000b34:	9204      	strlt	r2, [sp, #16]
 8000b36:	7823      	ldrb	r3, [r4, #0]
 8000b38:	2b2e      	cmp	r3, #46	; 0x2e
 8000b3a:	d10c      	bne.n	8000b56 <_vfiprintf_r+0x15a>
 8000b3c:	7863      	ldrb	r3, [r4, #1]
 8000b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8000b40:	d134      	bne.n	8000bac <_vfiprintf_r+0x1b0>
 8000b42:	9b03      	ldr	r3, [sp, #12]
 8000b44:	3402      	adds	r4, #2
 8000b46:	1d1a      	adds	r2, r3, #4
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	9203      	str	r2, [sp, #12]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	bfb8      	it	lt
 8000b50:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b54:	9305      	str	r3, [sp, #20]
 8000b56:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000c20 <_vfiprintf_r+0x224>
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	4650      	mov	r0, sl
 8000b5e:	7821      	ldrb	r1, [r4, #0]
 8000b60:	f000 fb4a 	bl	80011f8 <memchr>
 8000b64:	b138      	cbz	r0, 8000b76 <_vfiprintf_r+0x17a>
 8000b66:	2240      	movs	r2, #64	; 0x40
 8000b68:	9b04      	ldr	r3, [sp, #16]
 8000b6a:	eba0 000a 	sub.w	r0, r0, sl
 8000b6e:	4082      	lsls	r2, r0
 8000b70:	4313      	orrs	r3, r2
 8000b72:	3401      	adds	r4, #1
 8000b74:	9304      	str	r3, [sp, #16]
 8000b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b7a:	2206      	movs	r2, #6
 8000b7c:	4829      	ldr	r0, [pc, #164]	; (8000c24 <_vfiprintf_r+0x228>)
 8000b7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b82:	f000 fb39 	bl	80011f8 <memchr>
 8000b86:	2800      	cmp	r0, #0
 8000b88:	d03f      	beq.n	8000c0a <_vfiprintf_r+0x20e>
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <_vfiprintf_r+0x22c>)
 8000b8c:	bb1b      	cbnz	r3, 8000bd6 <_vfiprintf_r+0x1da>
 8000b8e:	9b03      	ldr	r3, [sp, #12]
 8000b90:	3307      	adds	r3, #7
 8000b92:	f023 0307 	bic.w	r3, r3, #7
 8000b96:	3308      	adds	r3, #8
 8000b98:	9303      	str	r3, [sp, #12]
 8000b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b9c:	443b      	add	r3, r7
 8000b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8000ba0:	e768      	b.n	8000a74 <_vfiprintf_r+0x78>
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000baa:	e7a6      	b.n	8000afa <_vfiprintf_r+0xfe>
 8000bac:	2300      	movs	r3, #0
 8000bae:	f04f 0c0a 	mov.w	ip, #10
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	3401      	adds	r4, #1
 8000bb6:	9305      	str	r3, [sp, #20]
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bbe:	3a30      	subs	r2, #48	; 0x30
 8000bc0:	2a09      	cmp	r2, #9
 8000bc2:	d903      	bls.n	8000bcc <_vfiprintf_r+0x1d0>
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0c6      	beq.n	8000b56 <_vfiprintf_r+0x15a>
 8000bc8:	9105      	str	r1, [sp, #20]
 8000bca:	e7c4      	b.n	8000b56 <_vfiprintf_r+0x15a>
 8000bcc:	4604      	mov	r4, r0
 8000bce:	2301      	movs	r3, #1
 8000bd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bd4:	e7f0      	b.n	8000bb8 <_vfiprintf_r+0x1bc>
 8000bd6:	ab03      	add	r3, sp, #12
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	462a      	mov	r2, r5
 8000bdc:	4630      	mov	r0, r6
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <_vfiprintf_r+0x230>)
 8000be0:	a904      	add	r1, sp, #16
 8000be2:	f3af 8000 	nop.w
 8000be6:	4607      	mov	r7, r0
 8000be8:	1c78      	adds	r0, r7, #1
 8000bea:	d1d6      	bne.n	8000b9a <_vfiprintf_r+0x19e>
 8000bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bee:	07d9      	lsls	r1, r3, #31
 8000bf0:	d405      	bmi.n	8000bfe <_vfiprintf_r+0x202>
 8000bf2:	89ab      	ldrh	r3, [r5, #12]
 8000bf4:	059a      	lsls	r2, r3, #22
 8000bf6:	d402      	bmi.n	8000bfe <_vfiprintf_r+0x202>
 8000bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bfa:	f7ff fde1 	bl	80007c0 <__retarget_lock_release_recursive>
 8000bfe:	89ab      	ldrh	r3, [r5, #12]
 8000c00:	065b      	lsls	r3, r3, #25
 8000c02:	f53f af1d 	bmi.w	8000a40 <_vfiprintf_r+0x44>
 8000c06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c08:	e71c      	b.n	8000a44 <_vfiprintf_r+0x48>
 8000c0a:	ab03      	add	r3, sp, #12
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	462a      	mov	r2, r5
 8000c10:	4630      	mov	r0, r6
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <_vfiprintf_r+0x230>)
 8000c14:	a904      	add	r1, sp, #16
 8000c16:	f000 f87d 	bl	8000d14 <_printf_i>
 8000c1a:	e7e4      	b.n	8000be6 <_vfiprintf_r+0x1ea>
 8000c1c:	0800133f 	.word	0x0800133f
 8000c20:	08001345 	.word	0x08001345
 8000c24:	08001349 	.word	0x08001349
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	080009d7 	.word	0x080009d7

08000c30 <_printf_common>:
 8000c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c34:	4616      	mov	r6, r2
 8000c36:	4699      	mov	r9, r3
 8000c38:	688a      	ldr	r2, [r1, #8]
 8000c3a:	690b      	ldr	r3, [r1, #16]
 8000c3c:	4607      	mov	r7, r0
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	bfb8      	it	lt
 8000c42:	4613      	movlt	r3, r2
 8000c44:	6033      	str	r3, [r6, #0]
 8000c46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c4a:	460c      	mov	r4, r1
 8000c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c50:	b10a      	cbz	r2, 8000c56 <_printf_common+0x26>
 8000c52:	3301      	adds	r3, #1
 8000c54:	6033      	str	r3, [r6, #0]
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	0699      	lsls	r1, r3, #26
 8000c5a:	bf42      	ittt	mi
 8000c5c:	6833      	ldrmi	r3, [r6, #0]
 8000c5e:	3302      	addmi	r3, #2
 8000c60:	6033      	strmi	r3, [r6, #0]
 8000c62:	6825      	ldr	r5, [r4, #0]
 8000c64:	f015 0506 	ands.w	r5, r5, #6
 8000c68:	d106      	bne.n	8000c78 <_printf_common+0x48>
 8000c6a:	f104 0a19 	add.w	sl, r4, #25
 8000c6e:	68e3      	ldr	r3, [r4, #12]
 8000c70:	6832      	ldr	r2, [r6, #0]
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	42ab      	cmp	r3, r5
 8000c76:	dc2b      	bgt.n	8000cd0 <_printf_common+0xa0>
 8000c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c7c:	1e13      	subs	r3, r2, #0
 8000c7e:	6822      	ldr	r2, [r4, #0]
 8000c80:	bf18      	it	ne
 8000c82:	2301      	movne	r3, #1
 8000c84:	0692      	lsls	r2, r2, #26
 8000c86:	d430      	bmi.n	8000cea <_printf_common+0xba>
 8000c88:	4649      	mov	r1, r9
 8000c8a:	4638      	mov	r0, r7
 8000c8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c90:	47c0      	blx	r8
 8000c92:	3001      	adds	r0, #1
 8000c94:	d023      	beq.n	8000cde <_printf_common+0xae>
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	6922      	ldr	r2, [r4, #16]
 8000c9a:	f003 0306 	and.w	r3, r3, #6
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf14      	ite	ne
 8000ca2:	2500      	movne	r5, #0
 8000ca4:	6833      	ldreq	r3, [r6, #0]
 8000ca6:	f04f 0600 	mov.w	r6, #0
 8000caa:	bf08      	it	eq
 8000cac:	68e5      	ldreq	r5, [r4, #12]
 8000cae:	f104 041a 	add.w	r4, r4, #26
 8000cb2:	bf08      	it	eq
 8000cb4:	1aed      	subeq	r5, r5, r3
 8000cb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000cba:	bf08      	it	eq
 8000cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	bfc4      	itt	gt
 8000cc4:	1a9b      	subgt	r3, r3, r2
 8000cc6:	18ed      	addgt	r5, r5, r3
 8000cc8:	42b5      	cmp	r5, r6
 8000cca:	d11a      	bne.n	8000d02 <_printf_common+0xd2>
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e008      	b.n	8000ce2 <_printf_common+0xb2>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	4652      	mov	r2, sl
 8000cd4:	4649      	mov	r1, r9
 8000cd6:	4638      	mov	r0, r7
 8000cd8:	47c0      	blx	r8
 8000cda:	3001      	adds	r0, #1
 8000cdc:	d103      	bne.n	8000ce6 <_printf_common+0xb6>
 8000cde:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	3501      	adds	r5, #1
 8000ce8:	e7c1      	b.n	8000c6e <_printf_common+0x3e>
 8000cea:	2030      	movs	r0, #48	; 0x30
 8000cec:	18e1      	adds	r1, r4, r3
 8000cee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000cf8:	4422      	add	r2, r4
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d00:	e7c2      	b.n	8000c88 <_printf_common+0x58>
 8000d02:	2301      	movs	r3, #1
 8000d04:	4622      	mov	r2, r4
 8000d06:	4649      	mov	r1, r9
 8000d08:	4638      	mov	r0, r7
 8000d0a:	47c0      	blx	r8
 8000d0c:	3001      	adds	r0, #1
 8000d0e:	d0e6      	beq.n	8000cde <_printf_common+0xae>
 8000d10:	3601      	adds	r6, #1
 8000d12:	e7d9      	b.n	8000cc8 <_printf_common+0x98>

08000d14 <_printf_i>:
 8000d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	7e0f      	ldrb	r7, [r1, #24]
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	2f78      	cmp	r7, #120	; 0x78
 8000d1e:	4680      	mov	r8, r0
 8000d20:	460c      	mov	r4, r1
 8000d22:	469a      	mov	sl, r3
 8000d24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d2a:	d807      	bhi.n	8000d3c <_printf_i+0x28>
 8000d2c:	2f62      	cmp	r7, #98	; 0x62
 8000d2e:	d80a      	bhi.n	8000d46 <_printf_i+0x32>
 8000d30:	2f00      	cmp	r7, #0
 8000d32:	f000 80d5 	beq.w	8000ee0 <_printf_i+0x1cc>
 8000d36:	2f58      	cmp	r7, #88	; 0x58
 8000d38:	f000 80c1 	beq.w	8000ebe <_printf_i+0x1aa>
 8000d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d44:	e03a      	b.n	8000dbc <_printf_i+0xa8>
 8000d46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d4a:	2b15      	cmp	r3, #21
 8000d4c:	d8f6      	bhi.n	8000d3c <_printf_i+0x28>
 8000d4e:	a101      	add	r1, pc, #4	; (adr r1, 8000d54 <_printf_i+0x40>)
 8000d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d54:	08000dad 	.word	0x08000dad
 8000d58:	08000dc1 	.word	0x08000dc1
 8000d5c:	08000d3d 	.word	0x08000d3d
 8000d60:	08000d3d 	.word	0x08000d3d
 8000d64:	08000d3d 	.word	0x08000d3d
 8000d68:	08000d3d 	.word	0x08000d3d
 8000d6c:	08000dc1 	.word	0x08000dc1
 8000d70:	08000d3d 	.word	0x08000d3d
 8000d74:	08000d3d 	.word	0x08000d3d
 8000d78:	08000d3d 	.word	0x08000d3d
 8000d7c:	08000d3d 	.word	0x08000d3d
 8000d80:	08000ec7 	.word	0x08000ec7
 8000d84:	08000ded 	.word	0x08000ded
 8000d88:	08000e81 	.word	0x08000e81
 8000d8c:	08000d3d 	.word	0x08000d3d
 8000d90:	08000d3d 	.word	0x08000d3d
 8000d94:	08000ee9 	.word	0x08000ee9
 8000d98:	08000d3d 	.word	0x08000d3d
 8000d9c:	08000ded 	.word	0x08000ded
 8000da0:	08000d3d 	.word	0x08000d3d
 8000da4:	08000d3d 	.word	0x08000d3d
 8000da8:	08000e89 	.word	0x08000e89
 8000dac:	682b      	ldr	r3, [r5, #0]
 8000dae:	1d1a      	adds	r2, r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	602a      	str	r2, [r5, #0]
 8000db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e0a0      	b.n	8000f02 <_printf_i+0x1ee>
 8000dc0:	6820      	ldr	r0, [r4, #0]
 8000dc2:	682b      	ldr	r3, [r5, #0]
 8000dc4:	0607      	lsls	r7, r0, #24
 8000dc6:	f103 0104 	add.w	r1, r3, #4
 8000dca:	6029      	str	r1, [r5, #0]
 8000dcc:	d501      	bpl.n	8000dd2 <_printf_i+0xbe>
 8000dce:	681e      	ldr	r6, [r3, #0]
 8000dd0:	e003      	b.n	8000dda <_printf_i+0xc6>
 8000dd2:	0646      	lsls	r6, r0, #25
 8000dd4:	d5fb      	bpl.n	8000dce <_printf_i+0xba>
 8000dd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	da03      	bge.n	8000de6 <_printf_i+0xd2>
 8000dde:	232d      	movs	r3, #45	; 0x2d
 8000de0:	4276      	negs	r6, r6
 8000de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000de6:	230a      	movs	r3, #10
 8000de8:	4859      	ldr	r0, [pc, #356]	; (8000f50 <_printf_i+0x23c>)
 8000dea:	e012      	b.n	8000e12 <_printf_i+0xfe>
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	6820      	ldr	r0, [r4, #0]
 8000df0:	1d19      	adds	r1, r3, #4
 8000df2:	6029      	str	r1, [r5, #0]
 8000df4:	0605      	lsls	r5, r0, #24
 8000df6:	d501      	bpl.n	8000dfc <_printf_i+0xe8>
 8000df8:	681e      	ldr	r6, [r3, #0]
 8000dfa:	e002      	b.n	8000e02 <_printf_i+0xee>
 8000dfc:	0641      	lsls	r1, r0, #25
 8000dfe:	d5fb      	bpl.n	8000df8 <_printf_i+0xe4>
 8000e00:	881e      	ldrh	r6, [r3, #0]
 8000e02:	2f6f      	cmp	r7, #111	; 0x6f
 8000e04:	bf0c      	ite	eq
 8000e06:	2308      	moveq	r3, #8
 8000e08:	230a      	movne	r3, #10
 8000e0a:	4851      	ldr	r0, [pc, #324]	; (8000f50 <_printf_i+0x23c>)
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e12:	6865      	ldr	r5, [r4, #4]
 8000e14:	2d00      	cmp	r5, #0
 8000e16:	bfa8      	it	ge
 8000e18:	6821      	ldrge	r1, [r4, #0]
 8000e1a:	60a5      	str	r5, [r4, #8]
 8000e1c:	bfa4      	itt	ge
 8000e1e:	f021 0104 	bicge.w	r1, r1, #4
 8000e22:	6021      	strge	r1, [r4, #0]
 8000e24:	b90e      	cbnz	r6, 8000e2a <_printf_i+0x116>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d04b      	beq.n	8000ec2 <_printf_i+0x1ae>
 8000e2a:	4615      	mov	r5, r2
 8000e2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e30:	fb03 6711 	mls	r7, r3, r1, r6
 8000e34:	5dc7      	ldrb	r7, [r0, r7]
 8000e36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e3a:	4637      	mov	r7, r6
 8000e3c:	42bb      	cmp	r3, r7
 8000e3e:	460e      	mov	r6, r1
 8000e40:	d9f4      	bls.n	8000e2c <_printf_i+0x118>
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d10b      	bne.n	8000e5e <_printf_i+0x14a>
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	07de      	lsls	r6, r3, #31
 8000e4a:	d508      	bpl.n	8000e5e <_printf_i+0x14a>
 8000e4c:	6923      	ldr	r3, [r4, #16]
 8000e4e:	6861      	ldr	r1, [r4, #4]
 8000e50:	4299      	cmp	r1, r3
 8000e52:	bfde      	ittt	le
 8000e54:	2330      	movle	r3, #48	; 0x30
 8000e56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000e5e:	1b52      	subs	r2, r2, r5
 8000e60:	6122      	str	r2, [r4, #16]
 8000e62:	464b      	mov	r3, r9
 8000e64:	4621      	mov	r1, r4
 8000e66:	4640      	mov	r0, r8
 8000e68:	f8cd a000 	str.w	sl, [sp]
 8000e6c:	aa03      	add	r2, sp, #12
 8000e6e:	f7ff fedf 	bl	8000c30 <_printf_common>
 8000e72:	3001      	adds	r0, #1
 8000e74:	d14a      	bne.n	8000f0c <_printf_i+0x1f8>
 8000e76:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7a:	b004      	add	sp, #16
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	f043 0320 	orr.w	r3, r3, #32
 8000e86:	6023      	str	r3, [r4, #0]
 8000e88:	2778      	movs	r7, #120	; 0x78
 8000e8a:	4832      	ldr	r0, [pc, #200]	; (8000f54 <_printf_i+0x240>)
 8000e8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	6829      	ldr	r1, [r5, #0]
 8000e94:	061f      	lsls	r7, r3, #24
 8000e96:	f851 6b04 	ldr.w	r6, [r1], #4
 8000e9a:	d402      	bmi.n	8000ea2 <_printf_i+0x18e>
 8000e9c:	065f      	lsls	r7, r3, #25
 8000e9e:	bf48      	it	mi
 8000ea0:	b2b6      	uxthmi	r6, r6
 8000ea2:	07df      	lsls	r7, r3, #31
 8000ea4:	bf48      	it	mi
 8000ea6:	f043 0320 	orrmi.w	r3, r3, #32
 8000eaa:	6029      	str	r1, [r5, #0]
 8000eac:	bf48      	it	mi
 8000eae:	6023      	strmi	r3, [r4, #0]
 8000eb0:	b91e      	cbnz	r6, 8000eba <_printf_i+0x1a6>
 8000eb2:	6823      	ldr	r3, [r4, #0]
 8000eb4:	f023 0320 	bic.w	r3, r3, #32
 8000eb8:	6023      	str	r3, [r4, #0]
 8000eba:	2310      	movs	r3, #16
 8000ebc:	e7a6      	b.n	8000e0c <_printf_i+0xf8>
 8000ebe:	4824      	ldr	r0, [pc, #144]	; (8000f50 <_printf_i+0x23c>)
 8000ec0:	e7e4      	b.n	8000e8c <_printf_i+0x178>
 8000ec2:	4615      	mov	r5, r2
 8000ec4:	e7bd      	b.n	8000e42 <_printf_i+0x12e>
 8000ec6:	682b      	ldr	r3, [r5, #0]
 8000ec8:	6826      	ldr	r6, [r4, #0]
 8000eca:	1d18      	adds	r0, r3, #4
 8000ecc:	6961      	ldr	r1, [r4, #20]
 8000ece:	6028      	str	r0, [r5, #0]
 8000ed0:	0635      	lsls	r5, r6, #24
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	d501      	bpl.n	8000eda <_printf_i+0x1c6>
 8000ed6:	6019      	str	r1, [r3, #0]
 8000ed8:	e002      	b.n	8000ee0 <_printf_i+0x1cc>
 8000eda:	0670      	lsls	r0, r6, #25
 8000edc:	d5fb      	bpl.n	8000ed6 <_printf_i+0x1c2>
 8000ede:	8019      	strh	r1, [r3, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	4615      	mov	r5, r2
 8000ee4:	6123      	str	r3, [r4, #16]
 8000ee6:	e7bc      	b.n	8000e62 <_printf_i+0x14e>
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	2100      	movs	r1, #0
 8000eec:	1d1a      	adds	r2, r3, #4
 8000eee:	602a      	str	r2, [r5, #0]
 8000ef0:	681d      	ldr	r5, [r3, #0]
 8000ef2:	6862      	ldr	r2, [r4, #4]
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	f000 f97f 	bl	80011f8 <memchr>
 8000efa:	b108      	cbz	r0, 8000f00 <_printf_i+0x1ec>
 8000efc:	1b40      	subs	r0, r0, r5
 8000efe:	6060      	str	r0, [r4, #4]
 8000f00:	6863      	ldr	r3, [r4, #4]
 8000f02:	6123      	str	r3, [r4, #16]
 8000f04:	2300      	movs	r3, #0
 8000f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f0a:	e7aa      	b.n	8000e62 <_printf_i+0x14e>
 8000f0c:	462a      	mov	r2, r5
 8000f0e:	4649      	mov	r1, r9
 8000f10:	4640      	mov	r0, r8
 8000f12:	6923      	ldr	r3, [r4, #16]
 8000f14:	47d0      	blx	sl
 8000f16:	3001      	adds	r0, #1
 8000f18:	d0ad      	beq.n	8000e76 <_printf_i+0x162>
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	079b      	lsls	r3, r3, #30
 8000f1e:	d413      	bmi.n	8000f48 <_printf_i+0x234>
 8000f20:	68e0      	ldr	r0, [r4, #12]
 8000f22:	9b03      	ldr	r3, [sp, #12]
 8000f24:	4298      	cmp	r0, r3
 8000f26:	bfb8      	it	lt
 8000f28:	4618      	movlt	r0, r3
 8000f2a:	e7a6      	b.n	8000e7a <_printf_i+0x166>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	4632      	mov	r2, r6
 8000f30:	4649      	mov	r1, r9
 8000f32:	4640      	mov	r0, r8
 8000f34:	47d0      	blx	sl
 8000f36:	3001      	adds	r0, #1
 8000f38:	d09d      	beq.n	8000e76 <_printf_i+0x162>
 8000f3a:	3501      	adds	r5, #1
 8000f3c:	68e3      	ldr	r3, [r4, #12]
 8000f3e:	9903      	ldr	r1, [sp, #12]
 8000f40:	1a5b      	subs	r3, r3, r1
 8000f42:	42ab      	cmp	r3, r5
 8000f44:	dcf2      	bgt.n	8000f2c <_printf_i+0x218>
 8000f46:	e7eb      	b.n	8000f20 <_printf_i+0x20c>
 8000f48:	2500      	movs	r5, #0
 8000f4a:	f104 0619 	add.w	r6, r4, #25
 8000f4e:	e7f5      	b.n	8000f3c <_printf_i+0x228>
 8000f50:	08001350 	.word	0x08001350
 8000f54:	08001361 	.word	0x08001361

08000f58 <__sflush_r>:
 8000f58:	898a      	ldrh	r2, [r1, #12]
 8000f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5c:	4605      	mov	r5, r0
 8000f5e:	0710      	lsls	r0, r2, #28
 8000f60:	460c      	mov	r4, r1
 8000f62:	d457      	bmi.n	8001014 <__sflush_r+0xbc>
 8000f64:	684b      	ldr	r3, [r1, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	dc04      	bgt.n	8000f74 <__sflush_r+0x1c>
 8000f6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	dc01      	bgt.n	8000f74 <__sflush_r+0x1c>
 8000f70:	2000      	movs	r0, #0
 8000f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d0fa      	beq.n	8000f70 <__sflush_r+0x18>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000f80:	682f      	ldr	r7, [r5, #0]
 8000f82:	6a21      	ldr	r1, [r4, #32]
 8000f84:	602b      	str	r3, [r5, #0]
 8000f86:	d032      	beq.n	8000fee <__sflush_r+0x96>
 8000f88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f8a:	89a3      	ldrh	r3, [r4, #12]
 8000f8c:	075a      	lsls	r2, r3, #29
 8000f8e:	d505      	bpl.n	8000f9c <__sflush_r+0x44>
 8000f90:	6863      	ldr	r3, [r4, #4]
 8000f92:	1ac0      	subs	r0, r0, r3
 8000f94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f96:	b10b      	cbz	r3, 8000f9c <__sflush_r+0x44>
 8000f98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f9a:	1ac0      	subs	r0, r0, r3
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000fa2:	4628      	mov	r0, r5
 8000fa4:	6a21      	ldr	r1, [r4, #32]
 8000fa6:	47b0      	blx	r6
 8000fa8:	1c43      	adds	r3, r0, #1
 8000faa:	89a3      	ldrh	r3, [r4, #12]
 8000fac:	d106      	bne.n	8000fbc <__sflush_r+0x64>
 8000fae:	6829      	ldr	r1, [r5, #0]
 8000fb0:	291d      	cmp	r1, #29
 8000fb2:	d82b      	bhi.n	800100c <__sflush_r+0xb4>
 8000fb4:	4a28      	ldr	r2, [pc, #160]	; (8001058 <__sflush_r+0x100>)
 8000fb6:	410a      	asrs	r2, r1
 8000fb8:	07d6      	lsls	r6, r2, #31
 8000fba:	d427      	bmi.n	800100c <__sflush_r+0xb4>
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6062      	str	r2, [r4, #4]
 8000fc0:	6922      	ldr	r2, [r4, #16]
 8000fc2:	04d9      	lsls	r1, r3, #19
 8000fc4:	6022      	str	r2, [r4, #0]
 8000fc6:	d504      	bpl.n	8000fd2 <__sflush_r+0x7a>
 8000fc8:	1c42      	adds	r2, r0, #1
 8000fca:	d101      	bne.n	8000fd0 <__sflush_r+0x78>
 8000fcc:	682b      	ldr	r3, [r5, #0]
 8000fce:	b903      	cbnz	r3, 8000fd2 <__sflush_r+0x7a>
 8000fd0:	6560      	str	r0, [r4, #84]	; 0x54
 8000fd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000fd4:	602f      	str	r7, [r5, #0]
 8000fd6:	2900      	cmp	r1, #0
 8000fd8:	d0ca      	beq.n	8000f70 <__sflush_r+0x18>
 8000fda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000fde:	4299      	cmp	r1, r3
 8000fe0:	d002      	beq.n	8000fe8 <__sflush_r+0x90>
 8000fe2:	4628      	mov	r0, r5
 8000fe4:	f7ff fbee 	bl	80007c4 <_free_r>
 8000fe8:	2000      	movs	r0, #0
 8000fea:	6360      	str	r0, [r4, #52]	; 0x34
 8000fec:	e7c1      	b.n	8000f72 <__sflush_r+0x1a>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4628      	mov	r0, r5
 8000ff2:	47b0      	blx	r6
 8000ff4:	1c41      	adds	r1, r0, #1
 8000ff6:	d1c8      	bne.n	8000f8a <__sflush_r+0x32>
 8000ff8:	682b      	ldr	r3, [r5, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0c5      	beq.n	8000f8a <__sflush_r+0x32>
 8000ffe:	2b1d      	cmp	r3, #29
 8001000:	d001      	beq.n	8001006 <__sflush_r+0xae>
 8001002:	2b16      	cmp	r3, #22
 8001004:	d101      	bne.n	800100a <__sflush_r+0xb2>
 8001006:	602f      	str	r7, [r5, #0]
 8001008:	e7b2      	b.n	8000f70 <__sflush_r+0x18>
 800100a:	89a3      	ldrh	r3, [r4, #12]
 800100c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001010:	81a3      	strh	r3, [r4, #12]
 8001012:	e7ae      	b.n	8000f72 <__sflush_r+0x1a>
 8001014:	690f      	ldr	r7, [r1, #16]
 8001016:	2f00      	cmp	r7, #0
 8001018:	d0aa      	beq.n	8000f70 <__sflush_r+0x18>
 800101a:	0793      	lsls	r3, r2, #30
 800101c:	bf18      	it	ne
 800101e:	2300      	movne	r3, #0
 8001020:	680e      	ldr	r6, [r1, #0]
 8001022:	bf08      	it	eq
 8001024:	694b      	ldreq	r3, [r1, #20]
 8001026:	1bf6      	subs	r6, r6, r7
 8001028:	600f      	str	r7, [r1, #0]
 800102a:	608b      	str	r3, [r1, #8]
 800102c:	2e00      	cmp	r6, #0
 800102e:	dd9f      	ble.n	8000f70 <__sflush_r+0x18>
 8001030:	4633      	mov	r3, r6
 8001032:	463a      	mov	r2, r7
 8001034:	4628      	mov	r0, r5
 8001036:	6a21      	ldr	r1, [r4, #32]
 8001038:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800103c:	47e0      	blx	ip
 800103e:	2800      	cmp	r0, #0
 8001040:	dc06      	bgt.n	8001050 <__sflush_r+0xf8>
 8001042:	89a3      	ldrh	r3, [r4, #12]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	81a3      	strh	r3, [r4, #12]
 800104e:	e790      	b.n	8000f72 <__sflush_r+0x1a>
 8001050:	4407      	add	r7, r0
 8001052:	1a36      	subs	r6, r6, r0
 8001054:	e7ea      	b.n	800102c <__sflush_r+0xd4>
 8001056:	bf00      	nop
 8001058:	dfbffffe 	.word	0xdfbffffe

0800105c <_fflush_r>:
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	690b      	ldr	r3, [r1, #16]
 8001060:	4605      	mov	r5, r0
 8001062:	460c      	mov	r4, r1
 8001064:	b913      	cbnz	r3, 800106c <_fflush_r+0x10>
 8001066:	2500      	movs	r5, #0
 8001068:	4628      	mov	r0, r5
 800106a:	bd38      	pop	{r3, r4, r5, pc}
 800106c:	b118      	cbz	r0, 8001076 <_fflush_r+0x1a>
 800106e:	6a03      	ldr	r3, [r0, #32]
 8001070:	b90b      	cbnz	r3, 8001076 <_fflush_r+0x1a>
 8001072:	f7ff fa9f 	bl	80005b4 <__sinit>
 8001076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f3      	beq.n	8001066 <_fflush_r+0xa>
 800107e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001080:	07d0      	lsls	r0, r2, #31
 8001082:	d404      	bmi.n	800108e <_fflush_r+0x32>
 8001084:	0599      	lsls	r1, r3, #22
 8001086:	d402      	bmi.n	800108e <_fflush_r+0x32>
 8001088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800108a:	f7ff fb98 	bl	80007be <__retarget_lock_acquire_recursive>
 800108e:	4628      	mov	r0, r5
 8001090:	4621      	mov	r1, r4
 8001092:	f7ff ff61 	bl	8000f58 <__sflush_r>
 8001096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001098:	4605      	mov	r5, r0
 800109a:	07da      	lsls	r2, r3, #31
 800109c:	d4e4      	bmi.n	8001068 <_fflush_r+0xc>
 800109e:	89a3      	ldrh	r3, [r4, #12]
 80010a0:	059b      	lsls	r3, r3, #22
 80010a2:	d4e1      	bmi.n	8001068 <_fflush_r+0xc>
 80010a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010a6:	f7ff fb8b 	bl	80007c0 <__retarget_lock_release_recursive>
 80010aa:	e7dd      	b.n	8001068 <_fflush_r+0xc>

080010ac <__swbuf_r>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	460e      	mov	r6, r1
 80010b0:	4614      	mov	r4, r2
 80010b2:	4605      	mov	r5, r0
 80010b4:	b118      	cbz	r0, 80010be <__swbuf_r+0x12>
 80010b6:	6a03      	ldr	r3, [r0, #32]
 80010b8:	b90b      	cbnz	r3, 80010be <__swbuf_r+0x12>
 80010ba:	f7ff fa7b 	bl	80005b4 <__sinit>
 80010be:	69a3      	ldr	r3, [r4, #24]
 80010c0:	60a3      	str	r3, [r4, #8]
 80010c2:	89a3      	ldrh	r3, [r4, #12]
 80010c4:	071a      	lsls	r2, r3, #28
 80010c6:	d525      	bpl.n	8001114 <__swbuf_r+0x68>
 80010c8:	6923      	ldr	r3, [r4, #16]
 80010ca:	b31b      	cbz	r3, 8001114 <__swbuf_r+0x68>
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	6922      	ldr	r2, [r4, #16]
 80010d0:	b2f6      	uxtb	r6, r6
 80010d2:	1a98      	subs	r0, r3, r2
 80010d4:	6963      	ldr	r3, [r4, #20]
 80010d6:	4637      	mov	r7, r6
 80010d8:	4283      	cmp	r3, r0
 80010da:	dc04      	bgt.n	80010e6 <__swbuf_r+0x3a>
 80010dc:	4621      	mov	r1, r4
 80010de:	4628      	mov	r0, r5
 80010e0:	f7ff ffbc 	bl	800105c <_fflush_r>
 80010e4:	b9e0      	cbnz	r0, 8001120 <__swbuf_r+0x74>
 80010e6:	68a3      	ldr	r3, [r4, #8]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	60a3      	str	r3, [r4, #8]
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	6022      	str	r2, [r4, #0]
 80010f2:	701e      	strb	r6, [r3, #0]
 80010f4:	6962      	ldr	r2, [r4, #20]
 80010f6:	1c43      	adds	r3, r0, #1
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d004      	beq.n	8001106 <__swbuf_r+0x5a>
 80010fc:	89a3      	ldrh	r3, [r4, #12]
 80010fe:	07db      	lsls	r3, r3, #31
 8001100:	d506      	bpl.n	8001110 <__swbuf_r+0x64>
 8001102:	2e0a      	cmp	r6, #10
 8001104:	d104      	bne.n	8001110 <__swbuf_r+0x64>
 8001106:	4621      	mov	r1, r4
 8001108:	4628      	mov	r0, r5
 800110a:	f7ff ffa7 	bl	800105c <_fflush_r>
 800110e:	b938      	cbnz	r0, 8001120 <__swbuf_r+0x74>
 8001110:	4638      	mov	r0, r7
 8001112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001114:	4621      	mov	r1, r4
 8001116:	4628      	mov	r0, r5
 8001118:	f000 f806 	bl	8001128 <__swsetup_r>
 800111c:	2800      	cmp	r0, #0
 800111e:	d0d5      	beq.n	80010cc <__swbuf_r+0x20>
 8001120:	f04f 37ff 	mov.w	r7, #4294967295
 8001124:	e7f4      	b.n	8001110 <__swbuf_r+0x64>
	...

08001128 <__swsetup_r>:
 8001128:	b538      	push	{r3, r4, r5, lr}
 800112a:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <__swsetup_r+0xac>)
 800112c:	4605      	mov	r5, r0
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	460c      	mov	r4, r1
 8001132:	b118      	cbz	r0, 800113c <__swsetup_r+0x14>
 8001134:	6a03      	ldr	r3, [r0, #32]
 8001136:	b90b      	cbnz	r3, 800113c <__swsetup_r+0x14>
 8001138:	f7ff fa3c 	bl	80005b4 <__sinit>
 800113c:	89a3      	ldrh	r3, [r4, #12]
 800113e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001142:	0718      	lsls	r0, r3, #28
 8001144:	d422      	bmi.n	800118c <__swsetup_r+0x64>
 8001146:	06d9      	lsls	r1, r3, #27
 8001148:	d407      	bmi.n	800115a <__swsetup_r+0x32>
 800114a:	2309      	movs	r3, #9
 800114c:	602b      	str	r3, [r5, #0]
 800114e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001152:	f04f 30ff 	mov.w	r0, #4294967295
 8001156:	81a3      	strh	r3, [r4, #12]
 8001158:	e034      	b.n	80011c4 <__swsetup_r+0x9c>
 800115a:	0758      	lsls	r0, r3, #29
 800115c:	d512      	bpl.n	8001184 <__swsetup_r+0x5c>
 800115e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001160:	b141      	cbz	r1, 8001174 <__swsetup_r+0x4c>
 8001162:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001166:	4299      	cmp	r1, r3
 8001168:	d002      	beq.n	8001170 <__swsetup_r+0x48>
 800116a:	4628      	mov	r0, r5
 800116c:	f7ff fb2a 	bl	80007c4 <_free_r>
 8001170:	2300      	movs	r3, #0
 8001172:	6363      	str	r3, [r4, #52]	; 0x34
 8001174:	89a3      	ldrh	r3, [r4, #12]
 8001176:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800117a:	81a3      	strh	r3, [r4, #12]
 800117c:	2300      	movs	r3, #0
 800117e:	6063      	str	r3, [r4, #4]
 8001180:	6923      	ldr	r3, [r4, #16]
 8001182:	6023      	str	r3, [r4, #0]
 8001184:	89a3      	ldrh	r3, [r4, #12]
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	81a3      	strh	r3, [r4, #12]
 800118c:	6923      	ldr	r3, [r4, #16]
 800118e:	b94b      	cbnz	r3, 80011a4 <__swsetup_r+0x7c>
 8001190:	89a3      	ldrh	r3, [r4, #12]
 8001192:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800119a:	d003      	beq.n	80011a4 <__swsetup_r+0x7c>
 800119c:	4621      	mov	r1, r4
 800119e:	4628      	mov	r0, r5
 80011a0:	f000 f85d 	bl	800125e <__smakebuf_r>
 80011a4:	89a0      	ldrh	r0, [r4, #12]
 80011a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011aa:	f010 0301 	ands.w	r3, r0, #1
 80011ae:	d00a      	beq.n	80011c6 <__swsetup_r+0x9e>
 80011b0:	2300      	movs	r3, #0
 80011b2:	60a3      	str	r3, [r4, #8]
 80011b4:	6963      	ldr	r3, [r4, #20]
 80011b6:	425b      	negs	r3, r3
 80011b8:	61a3      	str	r3, [r4, #24]
 80011ba:	6923      	ldr	r3, [r4, #16]
 80011bc:	b943      	cbnz	r3, 80011d0 <__swsetup_r+0xa8>
 80011be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80011c2:	d1c4      	bne.n	800114e <__swsetup_r+0x26>
 80011c4:	bd38      	pop	{r3, r4, r5, pc}
 80011c6:	0781      	lsls	r1, r0, #30
 80011c8:	bf58      	it	pl
 80011ca:	6963      	ldrpl	r3, [r4, #20]
 80011cc:	60a3      	str	r3, [r4, #8]
 80011ce:	e7f4      	b.n	80011ba <__swsetup_r+0x92>
 80011d0:	2000      	movs	r0, #0
 80011d2:	e7f7      	b.n	80011c4 <__swsetup_r+0x9c>
 80011d4:	20000058 	.word	0x20000058

080011d8 <_sbrk_r>:
 80011d8:	b538      	push	{r3, r4, r5, lr}
 80011da:	2300      	movs	r3, #0
 80011dc:	4d05      	ldr	r5, [pc, #20]	; (80011f4 <_sbrk_r+0x1c>)
 80011de:	4604      	mov	r4, r0
 80011e0:	4608      	mov	r0, r1
 80011e2:	602b      	str	r3, [r5, #0]
 80011e4:	f7ff f8b0 	bl	8000348 <_sbrk>
 80011e8:	1c43      	adds	r3, r0, #1
 80011ea:	d102      	bne.n	80011f2 <_sbrk_r+0x1a>
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	b103      	cbz	r3, 80011f2 <_sbrk_r+0x1a>
 80011f0:	6023      	str	r3, [r4, #0]
 80011f2:	bd38      	pop	{r3, r4, r5, pc}
 80011f4:	200001bc 	.word	0x200001bc

080011f8 <memchr>:
 80011f8:	4603      	mov	r3, r0
 80011fa:	b510      	push	{r4, lr}
 80011fc:	b2c9      	uxtb	r1, r1
 80011fe:	4402      	add	r2, r0
 8001200:	4293      	cmp	r3, r2
 8001202:	4618      	mov	r0, r3
 8001204:	d101      	bne.n	800120a <memchr+0x12>
 8001206:	2000      	movs	r0, #0
 8001208:	e003      	b.n	8001212 <memchr+0x1a>
 800120a:	7804      	ldrb	r4, [r0, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	428c      	cmp	r4, r1
 8001210:	d1f6      	bne.n	8001200 <memchr+0x8>
 8001212:	bd10      	pop	{r4, pc}

08001214 <__swhatbuf_r>:
 8001214:	b570      	push	{r4, r5, r6, lr}
 8001216:	460c      	mov	r4, r1
 8001218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800121c:	4615      	mov	r5, r2
 800121e:	2900      	cmp	r1, #0
 8001220:	461e      	mov	r6, r3
 8001222:	b096      	sub	sp, #88	; 0x58
 8001224:	da0c      	bge.n	8001240 <__swhatbuf_r+0x2c>
 8001226:	89a3      	ldrh	r3, [r4, #12]
 8001228:	2100      	movs	r1, #0
 800122a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800122e:	bf0c      	ite	eq
 8001230:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001234:	2340      	movne	r3, #64	; 0x40
 8001236:	2000      	movs	r0, #0
 8001238:	6031      	str	r1, [r6, #0]
 800123a:	602b      	str	r3, [r5, #0]
 800123c:	b016      	add	sp, #88	; 0x58
 800123e:	bd70      	pop	{r4, r5, r6, pc}
 8001240:	466a      	mov	r2, sp
 8001242:	f000 f849 	bl	80012d8 <_fstat_r>
 8001246:	2800      	cmp	r0, #0
 8001248:	dbed      	blt.n	8001226 <__swhatbuf_r+0x12>
 800124a:	9901      	ldr	r1, [sp, #4]
 800124c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001250:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001254:	4259      	negs	r1, r3
 8001256:	4159      	adcs	r1, r3
 8001258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125c:	e7eb      	b.n	8001236 <__swhatbuf_r+0x22>

0800125e <__smakebuf_r>:
 800125e:	898b      	ldrh	r3, [r1, #12]
 8001260:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001262:	079d      	lsls	r5, r3, #30
 8001264:	4606      	mov	r6, r0
 8001266:	460c      	mov	r4, r1
 8001268:	d507      	bpl.n	800127a <__smakebuf_r+0x1c>
 800126a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800126e:	6023      	str	r3, [r4, #0]
 8001270:	6123      	str	r3, [r4, #16]
 8001272:	2301      	movs	r3, #1
 8001274:	6163      	str	r3, [r4, #20]
 8001276:	b002      	add	sp, #8
 8001278:	bd70      	pop	{r4, r5, r6, pc}
 800127a:	466a      	mov	r2, sp
 800127c:	ab01      	add	r3, sp, #4
 800127e:	f7ff ffc9 	bl	8001214 <__swhatbuf_r>
 8001282:	9900      	ldr	r1, [sp, #0]
 8001284:	4605      	mov	r5, r0
 8001286:	4630      	mov	r0, r6
 8001288:	f7ff fb04 	bl	8000894 <_malloc_r>
 800128c:	b948      	cbnz	r0, 80012a2 <__smakebuf_r+0x44>
 800128e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001292:	059a      	lsls	r2, r3, #22
 8001294:	d4ef      	bmi.n	8001276 <__smakebuf_r+0x18>
 8001296:	f023 0303 	bic.w	r3, r3, #3
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	81a3      	strh	r3, [r4, #12]
 80012a0:	e7e3      	b.n	800126a <__smakebuf_r+0xc>
 80012a2:	89a3      	ldrh	r3, [r4, #12]
 80012a4:	6020      	str	r0, [r4, #0]
 80012a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012aa:	81a3      	strh	r3, [r4, #12]
 80012ac:	9b00      	ldr	r3, [sp, #0]
 80012ae:	6120      	str	r0, [r4, #16]
 80012b0:	6163      	str	r3, [r4, #20]
 80012b2:	9b01      	ldr	r3, [sp, #4]
 80012b4:	b15b      	cbz	r3, 80012ce <__smakebuf_r+0x70>
 80012b6:	4630      	mov	r0, r6
 80012b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012bc:	f000 f81e 	bl	80012fc <_isatty_r>
 80012c0:	b128      	cbz	r0, 80012ce <__smakebuf_r+0x70>
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	f023 0303 	bic.w	r3, r3, #3
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	81a3      	strh	r3, [r4, #12]
 80012ce:	89a3      	ldrh	r3, [r4, #12]
 80012d0:	431d      	orrs	r5, r3
 80012d2:	81a5      	strh	r5, [r4, #12]
 80012d4:	e7cf      	b.n	8001276 <__smakebuf_r+0x18>
	...

080012d8 <_fstat_r>:
 80012d8:	b538      	push	{r3, r4, r5, lr}
 80012da:	2300      	movs	r3, #0
 80012dc:	4d06      	ldr	r5, [pc, #24]	; (80012f8 <_fstat_r+0x20>)
 80012de:	4604      	mov	r4, r0
 80012e0:	4608      	mov	r0, r1
 80012e2:	4611      	mov	r1, r2
 80012e4:	602b      	str	r3, [r5, #0]
 80012e6:	f7ff f809 	bl	80002fc <_fstat>
 80012ea:	1c43      	adds	r3, r0, #1
 80012ec:	d102      	bne.n	80012f4 <_fstat_r+0x1c>
 80012ee:	682b      	ldr	r3, [r5, #0]
 80012f0:	b103      	cbz	r3, 80012f4 <_fstat_r+0x1c>
 80012f2:	6023      	str	r3, [r4, #0]
 80012f4:	bd38      	pop	{r3, r4, r5, pc}
 80012f6:	bf00      	nop
 80012f8:	200001bc 	.word	0x200001bc

080012fc <_isatty_r>:
 80012fc:	b538      	push	{r3, r4, r5, lr}
 80012fe:	2300      	movs	r3, #0
 8001300:	4d05      	ldr	r5, [pc, #20]	; (8001318 <_isatty_r+0x1c>)
 8001302:	4604      	mov	r4, r0
 8001304:	4608      	mov	r0, r1
 8001306:	602b      	str	r3, [r5, #0]
 8001308:	f7ff f807 	bl	800031a <_isatty>
 800130c:	1c43      	adds	r3, r0, #1
 800130e:	d102      	bne.n	8001316 <_isatty_r+0x1a>
 8001310:	682b      	ldr	r3, [r5, #0]
 8001312:	b103      	cbz	r3, 8001316 <_isatty_r+0x1a>
 8001314:	6023      	str	r3, [r4, #0]
 8001316:	bd38      	pop	{r3, r4, r5, pc}
 8001318:	200001bc 	.word	0x200001bc

0800131c <_init>:
 800131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800131e:	bf00      	nop
 8001320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001322:	bc08      	pop	{r3}
 8001324:	469e      	mov	lr, r3
 8001326:	4770      	bx	lr

08001328 <_fini>:
 8001328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132a:	bf00      	nop
 800132c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800132e:	bc08      	pop	{r3}
 8001330:	469e      	mov	lr, r3
 8001332:	4770      	bx	lr
