
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000119c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080012cc  080012cc  000022cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001304  08001304  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001304  08001304  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001304  08001304  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001304  08001304  00002304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001308  08001308  00002308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800130c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001368  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001368  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d55  00000000  00000000  00003085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000547  00000000  00000000  00003dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00004328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000f7  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002eeb  00000000  00000000  0000458f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c81  00000000  00000000  0000747a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009b7b  00000000  00000000  000090fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00012c76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bf0  00000000  00000000  00012cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000138ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	080012b4 	.word	0x080012b4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	080012b4 	.word	0x080012b4

08000170 <USER_ADC_Init>:

#include "main.h"
#include "ADC.h"

void USER_ADC_Init( void )
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

  ADC1->CR1	&=	~(ADC_CR1_DUALMOD);	// Step 1 - Select independent mode
 8000174:	4b1d      	ldr	r3, [pc, #116]	@ (80001ec <USER_ADC_Init+0x7c>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	4a1c      	ldr	r2, [pc, #112]	@ (80001ec <USER_ADC_Init+0x7c>)
 800017a:	f423 13a8 	bic.w	r3, r3, #1376256	@ 0x150000
 800017e:	6053      	str	r3, [r2, #4]
  ADC1->CR2	|=	ADC_CR2_CONT;		// Step 2 - Select conversion mode
 8000180:	4b1a      	ldr	r3, [pc, #104]	@ (80001ec <USER_ADC_Init+0x7c>)
 8000182:	689b      	ldr	r3, [r3, #8]
 8000184:	4a19      	ldr	r2, [pc, #100]	@ (80001ec <USER_ADC_Init+0x7c>)
 8000186:	f043 0302 	orr.w	r3, r3, #2
 800018a:	6093      	str	r3, [r2, #8]
  ADC1->CR2	&= 	~(ADC_CR2_ALIGN);	//	and format for ADC result
 800018c:	4b17      	ldr	r3, [pc, #92]	@ (80001ec <USER_ADC_Init+0x7c>)
 800018e:	689b      	ldr	r3, [r3, #8]
 8000190:	4a16      	ldr	r2, [pc, #88]	@ (80001ec <USER_ADC_Init+0x7c>)
 8000192:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000196:	6093      	str	r3, [r2, #8]
  ADC1->SMPR2	&= 	~(ADC_SMPR2_SMP0);	// Step 3 - Select the sample time for the
 8000198:	4b14      	ldr	r3, [pc, #80]	@ (80001ec <USER_ADC_Init+0x7c>)
 800019a:	691b      	ldr	r3, [r3, #16]
 800019c:	4a13      	ldr	r2, [pc, #76]	@ (80001ec <USER_ADC_Init+0x7c>)
 800019e:	f023 0307 	bic.w	r3, r3, #7
 80001a2:	6113      	str	r3, [r2, #16]
						//	ADC channel
  ADC1->SQR1	&= 	~(ADC_SQR1_L);		// Step 4 - Select the sequence and number of
 80001a4:	4b11      	ldr	r3, [pc, #68]	@ (80001ec <USER_ADC_Init+0x7c>)
 80001a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80001a8:	4a10      	ldr	r2, [pc, #64]	@ (80001ec <USER_ADC_Init+0x7c>)
 80001aa:	f023 73a8 	bic.w	r3, r3, #22020096	@ 0x1500000
 80001ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
						//	conversions for the ADC regular channels
  ADC1->SQR3	&= 	~(ADC_SQR3_SQ1);	// Step 5 - Select the channel for the first ADC
 80001b0:	4b0e      	ldr	r3, [pc, #56]	@ (80001ec <USER_ADC_Init+0x7c>)
 80001b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80001b4:	4a0d      	ldr	r2, [pc, #52]	@ (80001ec <USER_ADC_Init+0x7c>)
 80001b6:	f023 0331 	bic.w	r3, r3, #49	@ 0x31
 80001ba:	6353      	str	r3, [r2, #52]	@ 0x34
						//	conversion
  ADC1->CR2	|=	ADC_CR2_CAL;		// Step 6 - Perform a calibration after
 80001bc:	4b0b      	ldr	r3, [pc, #44]	@ (80001ec <USER_ADC_Init+0x7c>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4a0a      	ldr	r2, [pc, #40]	@ (80001ec <USER_ADC_Init+0x7c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6093      	str	r3, [r2, #8]
						// 	each power-up
  while ( ADC1->CR2 & ADC_CR2_CAL );		// Step 7 - Wait until the bit is reset by
 80001c8:	bf00      	nop
 80001ca:	4b08      	ldr	r3, [pc, #32]	@ (80001ec <USER_ADC_Init+0x7c>)
 80001cc:	689b      	ldr	r3, [r3, #8]
 80001ce:	f003 0304 	and.w	r3, r3, #4
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d1f9      	bne.n	80001ca <USER_ADC_Init+0x5a>
						//	hardware after calibration is complete
  ADC1->CR2	|=	ADC_CR2_ADON;		// Step 8 - Enable the ADC module
 80001d6:	4b05      	ldr	r3, [pc, #20]	@ (80001ec <USER_ADC_Init+0x7c>)
 80001d8:	689b      	ldr	r3, [r3, #8]
 80001da:	4a04      	ldr	r2, [pc, #16]	@ (80001ec <USER_ADC_Init+0x7c>)
 80001dc:	f043 0301 	orr.w	r3, r3, #1
 80001e0:	6093      	str	r3, [r2, #8]
}
 80001e2:	bf00      	nop
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	40012400 	.word	0x40012400

080001f0 <USER_ADC1_Convert>:

uint32_t USER_ADC1_Convert( void )
{
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0

  if( ADC1->SR & ADC_SR_EOC ) // Wait for end of conversion
 80001f4:	4b06      	ldr	r3, [pc, #24]	@ (8000210 <USER_ADC1_Convert+0x20>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f003 0302 	and.w	r3, r3, #2
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d002      	beq.n	8000206 <USER_ADC1_Convert+0x16>
  {
      return ADC1->DR;
 8000200:	4b03      	ldr	r3, [pc, #12]	@ (8000210 <USER_ADC1_Convert+0x20>)
 8000202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000204:	e000      	b.n	8000208 <USER_ADC1_Convert+0x18>
  }

  return 0;
 8000206:	2300      	movs	r3, #0
}
 8000208:	4618      	mov	r0, r3
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	40012400 	.word	0x40012400

08000214 <main>:

void USER_RCC_ClockEnable( void );
void USER_GPIO_Init( void );

int main( void )
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* Loop forever */

  USER_RCC_ClockEnable( );
 8000218:	f000 f816 	bl	8000248 <USER_RCC_ClockEnable>
  USER_GPIO_Init( );
 800021c:	f000 f82e 	bl	800027c <USER_GPIO_Init>
  USER_ADC_Init();
 8000220:	f7ff ffa6 	bl	8000170 <USER_ADC_Init>

  for(;;)
  {
      ConversionData = USER_ADC1_Convert();
 8000224:	f7ff ffe4 	bl	80001f0 <USER_ADC1_Convert>
 8000228:	4603      	mov	r3, r0
 800022a:	4a05      	ldr	r2, [pc, #20]	@ (8000240 <main+0x2c>)
 800022c:	6013      	str	r3, [r2, #0]
      printf("%lu\n", (unsigned long)ConversionData);
 800022e:	4b04      	ldr	r3, [pc, #16]	@ (8000240 <main+0x2c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4619      	mov	r1, r3
 8000234:	4803      	ldr	r0, [pc, #12]	@ (8000244 <main+0x30>)
 8000236:	f000 f9c5 	bl	80005c4 <iprintf>
      ConversionData = USER_ADC1_Convert();
 800023a:	bf00      	nop
 800023c:	e7f2      	b.n	8000224 <main+0x10>
 800023e:	bf00      	nop
 8000240:	20000078 	.word	0x20000078
 8000244:	080012cc 	.word	0x080012cc

08000248 <USER_RCC_ClockEnable>:
  }
}

void USER_RCC_ClockEnable( void )
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0

  RCC->APB2ENR	|=	RCC_APB2ENR_IOPAEN;	// I/O port A clock enable
 800024c:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <USER_RCC_ClockEnable+0x30>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a09      	ldr	r2, [pc, #36]	@ (8000278 <USER_RCC_ClockEnable+0x30>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR	|=	RCC_APB2ENR_ADC1EN;	// Enable clock for ADC1
 8000258:	4b07      	ldr	r3, [pc, #28]	@ (8000278 <USER_RCC_ClockEnable+0x30>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a06      	ldr	r2, [pc, #24]	@ (8000278 <USER_RCC_ClockEnable+0x30>)
 800025e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000262:	6193      	str	r3, [r2, #24]
  RCC->CFGR	|=	RCC_CFGR_ADCPRE;	// Adjust ADC input clock
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <USER_RCC_ClockEnable+0x30>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	4a03      	ldr	r2, [pc, #12]	@ (8000278 <USER_RCC_ClockEnable+0x30>)
 800026a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800026e:	6053      	str	r3, [r2, #4]

}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40021000 	.word	0x40021000

0800027c <USER_GPIO_Init>:

void USER_GPIO_Init( void )
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  // Pin PA1 as analog input

  GPIOA->CRL	&=	~( GPIO_CRL_MODE1 )
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <USER_GPIO_Init+0x18>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a03      	ldr	r2, [pc, #12]	@ (8000294 <USER_GPIO_Init+0x18>)
 8000286:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800028a:	6013      	str	r3, [r2, #0]
		&	~( GPIO_CRL_CNF1 );
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40010800 	.word	0x40010800

08000298 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	e00a      	b.n	80002c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002aa:	f3af 8000 	nop.w
 80002ae:	4601      	mov	r1, r0
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	60ba      	str	r2, [r7, #8]
 80002b6:	b2ca      	uxtb	r2, r1
 80002b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	3301      	adds	r3, #1
 80002be:	617b      	str	r3, [r7, #20]
 80002c0:	697a      	ldr	r2, [r7, #20]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	dbf0      	blt.n	80002aa <_read+0x12>
  }

  return len;
 80002c8:	687b      	ldr	r3, [r7, #4]
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3718      	adds	r7, #24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80002d2:	b480      	push	{r7}
 80002d4:	b083      	sub	sp, #12
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80002da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80002de:	4618      	mov	r0, r3
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80002f8:	605a      	str	r2, [r3, #4]
  return 0;
 80002fa:	2300      	movs	r3, #0
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr

08000306 <_isatty>:

int _isatty(int file)
{
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800030e:	2301      	movs	r3, #1
}
 8000310:	4618      	mov	r0, r3
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr

0800031a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800031a:	b480      	push	{r7}
 800031c:	b085      	sub	sp, #20
 800031e:	af00      	add	r7, sp, #0
 8000320:	60f8      	str	r0, [r7, #12]
 8000322:	60b9      	str	r1, [r7, #8]
 8000324:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000326:	2300      	movs	r3, #0
}
 8000328:	4618      	mov	r0, r3
 800032a:	3714      	adds	r7, #20
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
	...

08000334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800033c:	4a14      	ldr	r2, [pc, #80]	@ (8000390 <_sbrk+0x5c>)
 800033e:	4b15      	ldr	r3, [pc, #84]	@ (8000394 <_sbrk+0x60>)
 8000340:	1ad3      	subs	r3, r2, r3
 8000342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000348:	4b13      	ldr	r3, [pc, #76]	@ (8000398 <_sbrk+0x64>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d102      	bne.n	8000356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000350:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <_sbrk+0x64>)
 8000352:	4a12      	ldr	r2, [pc, #72]	@ (800039c <_sbrk+0x68>)
 8000354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000356:	4b10      	ldr	r3, [pc, #64]	@ (8000398 <_sbrk+0x64>)
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4413      	add	r3, r2
 800035e:	693a      	ldr	r2, [r7, #16]
 8000360:	429a      	cmp	r2, r3
 8000362:	d207      	bcs.n	8000374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000364:	f000 f9d2 	bl	800070c <__errno>
 8000368:	4603      	mov	r3, r0
 800036a:	220c      	movs	r2, #12
 800036c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800036e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000372:	e009      	b.n	8000388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000374:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <_sbrk+0x64>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800037a:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <_sbrk+0x64>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4413      	add	r3, r2
 8000382:	4a05      	ldr	r2, [pc, #20]	@ (8000398 <_sbrk+0x64>)
 8000384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000386:	68fb      	ldr	r3, [r7, #12]
}
 8000388:	4618      	mov	r0, r3
 800038a:	3718      	adds	r7, #24
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20005000 	.word	0x20005000
 8000394:	00000400 	.word	0x00000400
 8000398:	2000007c 	.word	0x2000007c
 800039c:	200001d0 	.word	0x200001d0

080003a0 <_write>:
 * writes to the standard output.
 *
 * It redirects standard output stream in C to USART peripheral
 * device */

int _write(int file, char *ptr, int len) {
 80003a0:	b480      	push	{r7}
 80003a2:	b087      	sub	sp, #28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]

	int DataIdx;

	for( DataIdx = 0 ; DataIdx < len; DataIdx++ ) {
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]
 80003b0:	e00f      	b.n	80003d2 <_write+0x32>
		while(!( USART1->SR & USART_SR_TXE ));	// Wait until USART_DR is empty
 80003b2:	bf00      	nop
 80003b4:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <_write+0x48>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d0f9      	beq.n	80003b4 <_write+0x14>
		USART1->DR = *ptr++;			// Transmit data
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	1c5a      	adds	r2, r3, #1
 80003c4:	60ba      	str	r2, [r7, #8]
 80003c6:	781a      	ldrb	r2, [r3, #0]
 80003c8:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <_write+0x48>)
 80003ca:	605a      	str	r2, [r3, #4]
	for( DataIdx = 0 ; DataIdx < len; DataIdx++ ) {
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	3301      	adds	r3, #1
 80003d0:	617b      	str	r3, [r7, #20]
 80003d2:	697a      	ldr	r2, [r7, #20]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	429a      	cmp	r2, r3
 80003d8:	dbeb      	blt.n	80003b2 <_write+0x12>
	}

	return len;
 80003da:	687b      	ldr	r3, [r7, #4]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	371c      	adds	r7, #28
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40013800 	.word	0x40013800

080003ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ec:	480d      	ldr	r0, [pc, #52]	@ (8000424 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f4:	480c      	ldr	r0, [pc, #48]	@ (8000428 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f6:	490d      	ldr	r1, [pc, #52]	@ (800042c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000430 <LoopForever+0xe>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003fc:	e002      	b.n	8000404 <LoopCopyDataInit>

080003fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000402:	3304      	adds	r3, #4

08000404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000408:	d3f9      	bcc.n	80003fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040a:	4a0a      	ldr	r2, [pc, #40]	@ (8000434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800040c:	4c0a      	ldr	r4, [pc, #40]	@ (8000438 <LoopForever+0x16>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000410:	e001      	b.n	8000416 <LoopFillZerobss>

08000412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000414:	3204      	adds	r2, #4

08000416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000418:	d3fb      	bcc.n	8000412 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800041a:	f000 f97d 	bl	8000718 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041e:	f7ff fef9 	bl	8000214 <main>

08000422 <LoopForever>:

LoopForever:
  b LoopForever
 8000422:	e7fe      	b.n	8000422 <LoopForever>
  ldr   r0, =_estack
 8000424:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800042c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000430:	0800130c 	.word	0x0800130c
  ldr r2, =_sbss
 8000434:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000438:	200001cc 	.word	0x200001cc

0800043c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800043c:	e7fe      	b.n	800043c <ADC1_2_IRQHandler>
	...

08000440 <std>:
 8000440:	2300      	movs	r3, #0
 8000442:	b510      	push	{r4, lr}
 8000444:	4604      	mov	r4, r0
 8000446:	e9c0 3300 	strd	r3, r3, [r0]
 800044a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800044e:	6083      	str	r3, [r0, #8]
 8000450:	8181      	strh	r1, [r0, #12]
 8000452:	6643      	str	r3, [r0, #100]	@ 0x64
 8000454:	81c2      	strh	r2, [r0, #14]
 8000456:	6183      	str	r3, [r0, #24]
 8000458:	4619      	mov	r1, r3
 800045a:	2208      	movs	r2, #8
 800045c:	305c      	adds	r0, #92	@ 0x5c
 800045e:	f000 f906 	bl	800066e <memset>
 8000462:	4b0d      	ldr	r3, [pc, #52]	@ (8000498 <std+0x58>)
 8000464:	6224      	str	r4, [r4, #32]
 8000466:	6263      	str	r3, [r4, #36]	@ 0x24
 8000468:	4b0c      	ldr	r3, [pc, #48]	@ (800049c <std+0x5c>)
 800046a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800046c:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <std+0x60>)
 800046e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <std+0x64>)
 8000472:	6323      	str	r3, [r4, #48]	@ 0x30
 8000474:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <std+0x68>)
 8000476:	429c      	cmp	r4, r3
 8000478:	d006      	beq.n	8000488 <std+0x48>
 800047a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800047e:	4294      	cmp	r4, r2
 8000480:	d002      	beq.n	8000488 <std+0x48>
 8000482:	33d0      	adds	r3, #208	@ 0xd0
 8000484:	429c      	cmp	r4, r3
 8000486:	d105      	bne.n	8000494 <std+0x54>
 8000488:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800048c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000490:	f000 b966 	b.w	8000760 <__retarget_lock_init_recursive>
 8000494:	bd10      	pop	{r4, pc}
 8000496:	bf00      	nop
 8000498:	080005e9 	.word	0x080005e9
 800049c:	0800060b 	.word	0x0800060b
 80004a0:	08000643 	.word	0x08000643
 80004a4:	08000667 	.word	0x08000667
 80004a8:	20000080 	.word	0x20000080

080004ac <stdio_exit_handler>:
 80004ac:	4a02      	ldr	r2, [pc, #8]	@ (80004b8 <stdio_exit_handler+0xc>)
 80004ae:	4903      	ldr	r1, [pc, #12]	@ (80004bc <stdio_exit_handler+0x10>)
 80004b0:	4803      	ldr	r0, [pc, #12]	@ (80004c0 <stdio_exit_handler+0x14>)
 80004b2:	f000 b869 	b.w	8000588 <_fwalk_sglue>
 80004b6:	bf00      	nop
 80004b8:	20000000 	.word	0x20000000
 80004bc:	08000ff9 	.word	0x08000ff9
 80004c0:	20000010 	.word	0x20000010

080004c4 <cleanup_stdio>:
 80004c4:	6841      	ldr	r1, [r0, #4]
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <cleanup_stdio+0x34>)
 80004c8:	b510      	push	{r4, lr}
 80004ca:	4299      	cmp	r1, r3
 80004cc:	4604      	mov	r4, r0
 80004ce:	d001      	beq.n	80004d4 <cleanup_stdio+0x10>
 80004d0:	f000 fd92 	bl	8000ff8 <_fflush_r>
 80004d4:	68a1      	ldr	r1, [r4, #8]
 80004d6:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <cleanup_stdio+0x38>)
 80004d8:	4299      	cmp	r1, r3
 80004da:	d002      	beq.n	80004e2 <cleanup_stdio+0x1e>
 80004dc:	4620      	mov	r0, r4
 80004de:	f000 fd8b 	bl	8000ff8 <_fflush_r>
 80004e2:	68e1      	ldr	r1, [r4, #12]
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <cleanup_stdio+0x3c>)
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d004      	beq.n	80004f4 <cleanup_stdio+0x30>
 80004ea:	4620      	mov	r0, r4
 80004ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004f0:	f000 bd82 	b.w	8000ff8 <_fflush_r>
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	bf00      	nop
 80004f8:	20000080 	.word	0x20000080
 80004fc:	200000e8 	.word	0x200000e8
 8000500:	20000150 	.word	0x20000150

08000504 <global_stdio_init.part.0>:
 8000504:	b510      	push	{r4, lr}
 8000506:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <global_stdio_init.part.0+0x30>)
 8000508:	4c0b      	ldr	r4, [pc, #44]	@ (8000538 <global_stdio_init.part.0+0x34>)
 800050a:	4a0c      	ldr	r2, [pc, #48]	@ (800053c <global_stdio_init.part.0+0x38>)
 800050c:	4620      	mov	r0, r4
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	2104      	movs	r1, #4
 8000512:	2200      	movs	r2, #0
 8000514:	f7ff ff94 	bl	8000440 <std>
 8000518:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800051c:	2201      	movs	r2, #1
 800051e:	2109      	movs	r1, #9
 8000520:	f7ff ff8e 	bl	8000440 <std>
 8000524:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000528:	2202      	movs	r2, #2
 800052a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800052e:	2112      	movs	r1, #18
 8000530:	f7ff bf86 	b.w	8000440 <std>
 8000534:	200001b8 	.word	0x200001b8
 8000538:	20000080 	.word	0x20000080
 800053c:	080004ad 	.word	0x080004ad

08000540 <__sfp_lock_acquire>:
 8000540:	4801      	ldr	r0, [pc, #4]	@ (8000548 <__sfp_lock_acquire+0x8>)
 8000542:	f000 b90e 	b.w	8000762 <__retarget_lock_acquire_recursive>
 8000546:	bf00      	nop
 8000548:	200001c1 	.word	0x200001c1

0800054c <__sfp_lock_release>:
 800054c:	4801      	ldr	r0, [pc, #4]	@ (8000554 <__sfp_lock_release+0x8>)
 800054e:	f000 b909 	b.w	8000764 <__retarget_lock_release_recursive>
 8000552:	bf00      	nop
 8000554:	200001c1 	.word	0x200001c1

08000558 <__sinit>:
 8000558:	b510      	push	{r4, lr}
 800055a:	4604      	mov	r4, r0
 800055c:	f7ff fff0 	bl	8000540 <__sfp_lock_acquire>
 8000560:	6a23      	ldr	r3, [r4, #32]
 8000562:	b11b      	cbz	r3, 800056c <__sinit+0x14>
 8000564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000568:	f7ff bff0 	b.w	800054c <__sfp_lock_release>
 800056c:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <__sinit+0x28>)
 800056e:	6223      	str	r3, [r4, #32]
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <__sinit+0x2c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1f5      	bne.n	8000564 <__sinit+0xc>
 8000578:	f7ff ffc4 	bl	8000504 <global_stdio_init.part.0>
 800057c:	e7f2      	b.n	8000564 <__sinit+0xc>
 800057e:	bf00      	nop
 8000580:	080004c5 	.word	0x080004c5
 8000584:	200001b8 	.word	0x200001b8

08000588 <_fwalk_sglue>:
 8000588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800058c:	4607      	mov	r7, r0
 800058e:	4688      	mov	r8, r1
 8000590:	4614      	mov	r4, r2
 8000592:	2600      	movs	r6, #0
 8000594:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000598:	f1b9 0901 	subs.w	r9, r9, #1
 800059c:	d505      	bpl.n	80005aa <_fwalk_sglue+0x22>
 800059e:	6824      	ldr	r4, [r4, #0]
 80005a0:	2c00      	cmp	r4, #0
 80005a2:	d1f7      	bne.n	8000594 <_fwalk_sglue+0xc>
 80005a4:	4630      	mov	r0, r6
 80005a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80005aa:	89ab      	ldrh	r3, [r5, #12]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d907      	bls.n	80005c0 <_fwalk_sglue+0x38>
 80005b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80005b4:	3301      	adds	r3, #1
 80005b6:	d003      	beq.n	80005c0 <_fwalk_sglue+0x38>
 80005b8:	4629      	mov	r1, r5
 80005ba:	4638      	mov	r0, r7
 80005bc:	47c0      	blx	r8
 80005be:	4306      	orrs	r6, r0
 80005c0:	3568      	adds	r5, #104	@ 0x68
 80005c2:	e7e9      	b.n	8000598 <_fwalk_sglue+0x10>

080005c4 <iprintf>:
 80005c4:	b40f      	push	{r0, r1, r2, r3}
 80005c6:	b507      	push	{r0, r1, r2, lr}
 80005c8:	4906      	ldr	r1, [pc, #24]	@ (80005e4 <iprintf+0x20>)
 80005ca:	ab04      	add	r3, sp, #16
 80005cc:	6808      	ldr	r0, [r1, #0]
 80005ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80005d2:	6881      	ldr	r1, [r0, #8]
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	f000 f9e5 	bl	80009a4 <_vfiprintf_r>
 80005da:	b003      	add	sp, #12
 80005dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80005e0:	b004      	add	sp, #16
 80005e2:	4770      	bx	lr
 80005e4:	2000000c 	.word	0x2000000c

080005e8 <__sread>:
 80005e8:	b510      	push	{r4, lr}
 80005ea:	460c      	mov	r4, r1
 80005ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80005f0:	f000 f868 	bl	80006c4 <_read_r>
 80005f4:	2800      	cmp	r0, #0
 80005f6:	bfab      	itete	ge
 80005f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80005fa:	89a3      	ldrhlt	r3, [r4, #12]
 80005fc:	181b      	addge	r3, r3, r0
 80005fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000602:	bfac      	ite	ge
 8000604:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000606:	81a3      	strhlt	r3, [r4, #12]
 8000608:	bd10      	pop	{r4, pc}

0800060a <__swrite>:
 800060a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800060e:	461f      	mov	r7, r3
 8000610:	898b      	ldrh	r3, [r1, #12]
 8000612:	4605      	mov	r5, r0
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	460c      	mov	r4, r1
 8000618:	4616      	mov	r6, r2
 800061a:	d505      	bpl.n	8000628 <__swrite+0x1e>
 800061c:	2302      	movs	r3, #2
 800061e:	2200      	movs	r2, #0
 8000620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000624:	f000 f83c 	bl	80006a0 <_lseek_r>
 8000628:	89a3      	ldrh	r3, [r4, #12]
 800062a:	4632      	mov	r2, r6
 800062c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000630:	81a3      	strh	r3, [r4, #12]
 8000632:	4628      	mov	r0, r5
 8000634:	463b      	mov	r3, r7
 8000636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800063a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800063e:	f000 b853 	b.w	80006e8 <_write_r>

08000642 <__sseek>:
 8000642:	b510      	push	{r4, lr}
 8000644:	460c      	mov	r4, r1
 8000646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800064a:	f000 f829 	bl	80006a0 <_lseek_r>
 800064e:	1c43      	adds	r3, r0, #1
 8000650:	89a3      	ldrh	r3, [r4, #12]
 8000652:	bf15      	itete	ne
 8000654:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000656:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800065a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800065e:	81a3      	strheq	r3, [r4, #12]
 8000660:	bf18      	it	ne
 8000662:	81a3      	strhne	r3, [r4, #12]
 8000664:	bd10      	pop	{r4, pc}

08000666 <__sclose>:
 8000666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800066a:	f000 b809 	b.w	8000680 <_close_r>

0800066e <memset>:
 800066e:	4603      	mov	r3, r0
 8000670:	4402      	add	r2, r0
 8000672:	4293      	cmp	r3, r2
 8000674:	d100      	bne.n	8000678 <memset+0xa>
 8000676:	4770      	bx	lr
 8000678:	f803 1b01 	strb.w	r1, [r3], #1
 800067c:	e7f9      	b.n	8000672 <memset+0x4>
	...

08000680 <_close_r>:
 8000680:	b538      	push	{r3, r4, r5, lr}
 8000682:	2300      	movs	r3, #0
 8000684:	4d05      	ldr	r5, [pc, #20]	@ (800069c <_close_r+0x1c>)
 8000686:	4604      	mov	r4, r0
 8000688:	4608      	mov	r0, r1
 800068a:	602b      	str	r3, [r5, #0]
 800068c:	f7ff fe21 	bl	80002d2 <_close>
 8000690:	1c43      	adds	r3, r0, #1
 8000692:	d102      	bne.n	800069a <_close_r+0x1a>
 8000694:	682b      	ldr	r3, [r5, #0]
 8000696:	b103      	cbz	r3, 800069a <_close_r+0x1a>
 8000698:	6023      	str	r3, [r4, #0]
 800069a:	bd38      	pop	{r3, r4, r5, pc}
 800069c:	200001bc 	.word	0x200001bc

080006a0 <_lseek_r>:
 80006a0:	b538      	push	{r3, r4, r5, lr}
 80006a2:	4604      	mov	r4, r0
 80006a4:	4608      	mov	r0, r1
 80006a6:	4611      	mov	r1, r2
 80006a8:	2200      	movs	r2, #0
 80006aa:	4d05      	ldr	r5, [pc, #20]	@ (80006c0 <_lseek_r+0x20>)
 80006ac:	602a      	str	r2, [r5, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	f7ff fe33 	bl	800031a <_lseek>
 80006b4:	1c43      	adds	r3, r0, #1
 80006b6:	d102      	bne.n	80006be <_lseek_r+0x1e>
 80006b8:	682b      	ldr	r3, [r5, #0]
 80006ba:	b103      	cbz	r3, 80006be <_lseek_r+0x1e>
 80006bc:	6023      	str	r3, [r4, #0]
 80006be:	bd38      	pop	{r3, r4, r5, pc}
 80006c0:	200001bc 	.word	0x200001bc

080006c4 <_read_r>:
 80006c4:	b538      	push	{r3, r4, r5, lr}
 80006c6:	4604      	mov	r4, r0
 80006c8:	4608      	mov	r0, r1
 80006ca:	4611      	mov	r1, r2
 80006cc:	2200      	movs	r2, #0
 80006ce:	4d05      	ldr	r5, [pc, #20]	@ (80006e4 <_read_r+0x20>)
 80006d0:	602a      	str	r2, [r5, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	f7ff fde0 	bl	8000298 <_read>
 80006d8:	1c43      	adds	r3, r0, #1
 80006da:	d102      	bne.n	80006e2 <_read_r+0x1e>
 80006dc:	682b      	ldr	r3, [r5, #0]
 80006de:	b103      	cbz	r3, 80006e2 <_read_r+0x1e>
 80006e0:	6023      	str	r3, [r4, #0]
 80006e2:	bd38      	pop	{r3, r4, r5, pc}
 80006e4:	200001bc 	.word	0x200001bc

080006e8 <_write_r>:
 80006e8:	b538      	push	{r3, r4, r5, lr}
 80006ea:	4604      	mov	r4, r0
 80006ec:	4608      	mov	r0, r1
 80006ee:	4611      	mov	r1, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	4d05      	ldr	r5, [pc, #20]	@ (8000708 <_write_r+0x20>)
 80006f4:	602a      	str	r2, [r5, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	f7ff fe52 	bl	80003a0 <_write>
 80006fc:	1c43      	adds	r3, r0, #1
 80006fe:	d102      	bne.n	8000706 <_write_r+0x1e>
 8000700:	682b      	ldr	r3, [r5, #0]
 8000702:	b103      	cbz	r3, 8000706 <_write_r+0x1e>
 8000704:	6023      	str	r3, [r4, #0]
 8000706:	bd38      	pop	{r3, r4, r5, pc}
 8000708:	200001bc 	.word	0x200001bc

0800070c <__errno>:
 800070c:	4b01      	ldr	r3, [pc, #4]	@ (8000714 <__errno+0x8>)
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	2000000c 	.word	0x2000000c

08000718 <__libc_init_array>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	2600      	movs	r6, #0
 800071c:	4d0c      	ldr	r5, [pc, #48]	@ (8000750 <__libc_init_array+0x38>)
 800071e:	4c0d      	ldr	r4, [pc, #52]	@ (8000754 <__libc_init_array+0x3c>)
 8000720:	1b64      	subs	r4, r4, r5
 8000722:	10a4      	asrs	r4, r4, #2
 8000724:	42a6      	cmp	r6, r4
 8000726:	d109      	bne.n	800073c <__libc_init_array+0x24>
 8000728:	f000 fdc4 	bl	80012b4 <_init>
 800072c:	2600      	movs	r6, #0
 800072e:	4d0a      	ldr	r5, [pc, #40]	@ (8000758 <__libc_init_array+0x40>)
 8000730:	4c0a      	ldr	r4, [pc, #40]	@ (800075c <__libc_init_array+0x44>)
 8000732:	1b64      	subs	r4, r4, r5
 8000734:	10a4      	asrs	r4, r4, #2
 8000736:	42a6      	cmp	r6, r4
 8000738:	d105      	bne.n	8000746 <__libc_init_array+0x2e>
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000740:	4798      	blx	r3
 8000742:	3601      	adds	r6, #1
 8000744:	e7ee      	b.n	8000724 <__libc_init_array+0xc>
 8000746:	f855 3b04 	ldr.w	r3, [r5], #4
 800074a:	4798      	blx	r3
 800074c:	3601      	adds	r6, #1
 800074e:	e7f2      	b.n	8000736 <__libc_init_array+0x1e>
 8000750:	08001304 	.word	0x08001304
 8000754:	08001304 	.word	0x08001304
 8000758:	08001304 	.word	0x08001304
 800075c:	08001308 	.word	0x08001308

08000760 <__retarget_lock_init_recursive>:
 8000760:	4770      	bx	lr

08000762 <__retarget_lock_acquire_recursive>:
 8000762:	4770      	bx	lr

08000764 <__retarget_lock_release_recursive>:
 8000764:	4770      	bx	lr
	...

08000768 <_free_r>:
 8000768:	b538      	push	{r3, r4, r5, lr}
 800076a:	4605      	mov	r5, r0
 800076c:	2900      	cmp	r1, #0
 800076e:	d040      	beq.n	80007f2 <_free_r+0x8a>
 8000770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000774:	1f0c      	subs	r4, r1, #4
 8000776:	2b00      	cmp	r3, #0
 8000778:	bfb8      	it	lt
 800077a:	18e4      	addlt	r4, r4, r3
 800077c:	f000 f8de 	bl	800093c <__malloc_lock>
 8000780:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <_free_r+0x8c>)
 8000782:	6813      	ldr	r3, [r2, #0]
 8000784:	b933      	cbnz	r3, 8000794 <_free_r+0x2c>
 8000786:	6063      	str	r3, [r4, #4]
 8000788:	6014      	str	r4, [r2, #0]
 800078a:	4628      	mov	r0, r5
 800078c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000790:	f000 b8da 	b.w	8000948 <__malloc_unlock>
 8000794:	42a3      	cmp	r3, r4
 8000796:	d908      	bls.n	80007aa <_free_r+0x42>
 8000798:	6820      	ldr	r0, [r4, #0]
 800079a:	1821      	adds	r1, r4, r0
 800079c:	428b      	cmp	r3, r1
 800079e:	bf01      	itttt	eq
 80007a0:	6819      	ldreq	r1, [r3, #0]
 80007a2:	685b      	ldreq	r3, [r3, #4]
 80007a4:	1809      	addeq	r1, r1, r0
 80007a6:	6021      	streq	r1, [r4, #0]
 80007a8:	e7ed      	b.n	8000786 <_free_r+0x1e>
 80007aa:	461a      	mov	r2, r3
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	b10b      	cbz	r3, 80007b4 <_free_r+0x4c>
 80007b0:	42a3      	cmp	r3, r4
 80007b2:	d9fa      	bls.n	80007aa <_free_r+0x42>
 80007b4:	6811      	ldr	r1, [r2, #0]
 80007b6:	1850      	adds	r0, r2, r1
 80007b8:	42a0      	cmp	r0, r4
 80007ba:	d10b      	bne.n	80007d4 <_free_r+0x6c>
 80007bc:	6820      	ldr	r0, [r4, #0]
 80007be:	4401      	add	r1, r0
 80007c0:	1850      	adds	r0, r2, r1
 80007c2:	4283      	cmp	r3, r0
 80007c4:	6011      	str	r1, [r2, #0]
 80007c6:	d1e0      	bne.n	800078a <_free_r+0x22>
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4408      	add	r0, r1
 80007ce:	6010      	str	r0, [r2, #0]
 80007d0:	6053      	str	r3, [r2, #4]
 80007d2:	e7da      	b.n	800078a <_free_r+0x22>
 80007d4:	d902      	bls.n	80007dc <_free_r+0x74>
 80007d6:	230c      	movs	r3, #12
 80007d8:	602b      	str	r3, [r5, #0]
 80007da:	e7d6      	b.n	800078a <_free_r+0x22>
 80007dc:	6820      	ldr	r0, [r4, #0]
 80007de:	1821      	adds	r1, r4, r0
 80007e0:	428b      	cmp	r3, r1
 80007e2:	bf01      	itttt	eq
 80007e4:	6819      	ldreq	r1, [r3, #0]
 80007e6:	685b      	ldreq	r3, [r3, #4]
 80007e8:	1809      	addeq	r1, r1, r0
 80007ea:	6021      	streq	r1, [r4, #0]
 80007ec:	6063      	str	r3, [r4, #4]
 80007ee:	6054      	str	r4, [r2, #4]
 80007f0:	e7cb      	b.n	800078a <_free_r+0x22>
 80007f2:	bd38      	pop	{r3, r4, r5, pc}
 80007f4:	200001c8 	.word	0x200001c8

080007f8 <sbrk_aligned>:
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	4e0f      	ldr	r6, [pc, #60]	@ (8000838 <sbrk_aligned+0x40>)
 80007fc:	460c      	mov	r4, r1
 80007fe:	6831      	ldr	r1, [r6, #0]
 8000800:	4605      	mov	r5, r0
 8000802:	b911      	cbnz	r1, 800080a <sbrk_aligned+0x12>
 8000804:	f000 fcb4 	bl	8001170 <_sbrk_r>
 8000808:	6030      	str	r0, [r6, #0]
 800080a:	4621      	mov	r1, r4
 800080c:	4628      	mov	r0, r5
 800080e:	f000 fcaf 	bl	8001170 <_sbrk_r>
 8000812:	1c43      	adds	r3, r0, #1
 8000814:	d103      	bne.n	800081e <sbrk_aligned+0x26>
 8000816:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800081a:	4620      	mov	r0, r4
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	1cc4      	adds	r4, r0, #3
 8000820:	f024 0403 	bic.w	r4, r4, #3
 8000824:	42a0      	cmp	r0, r4
 8000826:	d0f8      	beq.n	800081a <sbrk_aligned+0x22>
 8000828:	1a21      	subs	r1, r4, r0
 800082a:	4628      	mov	r0, r5
 800082c:	f000 fca0 	bl	8001170 <_sbrk_r>
 8000830:	3001      	adds	r0, #1
 8000832:	d1f2      	bne.n	800081a <sbrk_aligned+0x22>
 8000834:	e7ef      	b.n	8000816 <sbrk_aligned+0x1e>
 8000836:	bf00      	nop
 8000838:	200001c4 	.word	0x200001c4

0800083c <_malloc_r>:
 800083c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000840:	1ccd      	adds	r5, r1, #3
 8000842:	f025 0503 	bic.w	r5, r5, #3
 8000846:	3508      	adds	r5, #8
 8000848:	2d0c      	cmp	r5, #12
 800084a:	bf38      	it	cc
 800084c:	250c      	movcc	r5, #12
 800084e:	2d00      	cmp	r5, #0
 8000850:	4606      	mov	r6, r0
 8000852:	db01      	blt.n	8000858 <_malloc_r+0x1c>
 8000854:	42a9      	cmp	r1, r5
 8000856:	d904      	bls.n	8000862 <_malloc_r+0x26>
 8000858:	230c      	movs	r3, #12
 800085a:	6033      	str	r3, [r6, #0]
 800085c:	2000      	movs	r0, #0
 800085e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000862:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000938 <_malloc_r+0xfc>
 8000866:	f000 f869 	bl	800093c <__malloc_lock>
 800086a:	f8d8 3000 	ldr.w	r3, [r8]
 800086e:	461c      	mov	r4, r3
 8000870:	bb44      	cbnz	r4, 80008c4 <_malloc_r+0x88>
 8000872:	4629      	mov	r1, r5
 8000874:	4630      	mov	r0, r6
 8000876:	f7ff ffbf 	bl	80007f8 <sbrk_aligned>
 800087a:	1c43      	adds	r3, r0, #1
 800087c:	4604      	mov	r4, r0
 800087e:	d158      	bne.n	8000932 <_malloc_r+0xf6>
 8000880:	f8d8 4000 	ldr.w	r4, [r8]
 8000884:	4627      	mov	r7, r4
 8000886:	2f00      	cmp	r7, #0
 8000888:	d143      	bne.n	8000912 <_malloc_r+0xd6>
 800088a:	2c00      	cmp	r4, #0
 800088c:	d04b      	beq.n	8000926 <_malloc_r+0xea>
 800088e:	6823      	ldr	r3, [r4, #0]
 8000890:	4639      	mov	r1, r7
 8000892:	4630      	mov	r0, r6
 8000894:	eb04 0903 	add.w	r9, r4, r3
 8000898:	f000 fc6a 	bl	8001170 <_sbrk_r>
 800089c:	4581      	cmp	r9, r0
 800089e:	d142      	bne.n	8000926 <_malloc_r+0xea>
 80008a0:	6821      	ldr	r1, [r4, #0]
 80008a2:	4630      	mov	r0, r6
 80008a4:	1a6d      	subs	r5, r5, r1
 80008a6:	4629      	mov	r1, r5
 80008a8:	f7ff ffa6 	bl	80007f8 <sbrk_aligned>
 80008ac:	3001      	adds	r0, #1
 80008ae:	d03a      	beq.n	8000926 <_malloc_r+0xea>
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	442b      	add	r3, r5
 80008b4:	6023      	str	r3, [r4, #0]
 80008b6:	f8d8 3000 	ldr.w	r3, [r8]
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	bb62      	cbnz	r2, 8000918 <_malloc_r+0xdc>
 80008be:	f8c8 7000 	str.w	r7, [r8]
 80008c2:	e00f      	b.n	80008e4 <_malloc_r+0xa8>
 80008c4:	6822      	ldr	r2, [r4, #0]
 80008c6:	1b52      	subs	r2, r2, r5
 80008c8:	d420      	bmi.n	800090c <_malloc_r+0xd0>
 80008ca:	2a0b      	cmp	r2, #11
 80008cc:	d917      	bls.n	80008fe <_malloc_r+0xc2>
 80008ce:	1961      	adds	r1, r4, r5
 80008d0:	42a3      	cmp	r3, r4
 80008d2:	6025      	str	r5, [r4, #0]
 80008d4:	bf18      	it	ne
 80008d6:	6059      	strne	r1, [r3, #4]
 80008d8:	6863      	ldr	r3, [r4, #4]
 80008da:	bf08      	it	eq
 80008dc:	f8c8 1000 	streq.w	r1, [r8]
 80008e0:	5162      	str	r2, [r4, r5]
 80008e2:	604b      	str	r3, [r1, #4]
 80008e4:	4630      	mov	r0, r6
 80008e6:	f000 f82f 	bl	8000948 <__malloc_unlock>
 80008ea:	f104 000b 	add.w	r0, r4, #11
 80008ee:	1d23      	adds	r3, r4, #4
 80008f0:	f020 0007 	bic.w	r0, r0, #7
 80008f4:	1ac2      	subs	r2, r0, r3
 80008f6:	bf1c      	itt	ne
 80008f8:	1a1b      	subne	r3, r3, r0
 80008fa:	50a3      	strne	r3, [r4, r2]
 80008fc:	e7af      	b.n	800085e <_malloc_r+0x22>
 80008fe:	6862      	ldr	r2, [r4, #4]
 8000900:	42a3      	cmp	r3, r4
 8000902:	bf0c      	ite	eq
 8000904:	f8c8 2000 	streq.w	r2, [r8]
 8000908:	605a      	strne	r2, [r3, #4]
 800090a:	e7eb      	b.n	80008e4 <_malloc_r+0xa8>
 800090c:	4623      	mov	r3, r4
 800090e:	6864      	ldr	r4, [r4, #4]
 8000910:	e7ae      	b.n	8000870 <_malloc_r+0x34>
 8000912:	463c      	mov	r4, r7
 8000914:	687f      	ldr	r7, [r7, #4]
 8000916:	e7b6      	b.n	8000886 <_malloc_r+0x4a>
 8000918:	461a      	mov	r2, r3
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	42a3      	cmp	r3, r4
 800091e:	d1fb      	bne.n	8000918 <_malloc_r+0xdc>
 8000920:	2300      	movs	r3, #0
 8000922:	6053      	str	r3, [r2, #4]
 8000924:	e7de      	b.n	80008e4 <_malloc_r+0xa8>
 8000926:	230c      	movs	r3, #12
 8000928:	4630      	mov	r0, r6
 800092a:	6033      	str	r3, [r6, #0]
 800092c:	f000 f80c 	bl	8000948 <__malloc_unlock>
 8000930:	e794      	b.n	800085c <_malloc_r+0x20>
 8000932:	6005      	str	r5, [r0, #0]
 8000934:	e7d6      	b.n	80008e4 <_malloc_r+0xa8>
 8000936:	bf00      	nop
 8000938:	200001c8 	.word	0x200001c8

0800093c <__malloc_lock>:
 800093c:	4801      	ldr	r0, [pc, #4]	@ (8000944 <__malloc_lock+0x8>)
 800093e:	f7ff bf10 	b.w	8000762 <__retarget_lock_acquire_recursive>
 8000942:	bf00      	nop
 8000944:	200001c0 	.word	0x200001c0

08000948 <__malloc_unlock>:
 8000948:	4801      	ldr	r0, [pc, #4]	@ (8000950 <__malloc_unlock+0x8>)
 800094a:	f7ff bf0b 	b.w	8000764 <__retarget_lock_release_recursive>
 800094e:	bf00      	nop
 8000950:	200001c0 	.word	0x200001c0

08000954 <__sfputc_r>:
 8000954:	6893      	ldr	r3, [r2, #8]
 8000956:	b410      	push	{r4}
 8000958:	3b01      	subs	r3, #1
 800095a:	2b00      	cmp	r3, #0
 800095c:	6093      	str	r3, [r2, #8]
 800095e:	da07      	bge.n	8000970 <__sfputc_r+0x1c>
 8000960:	6994      	ldr	r4, [r2, #24]
 8000962:	42a3      	cmp	r3, r4
 8000964:	db01      	blt.n	800096a <__sfputc_r+0x16>
 8000966:	290a      	cmp	r1, #10
 8000968:	d102      	bne.n	8000970 <__sfputc_r+0x1c>
 800096a:	bc10      	pop	{r4}
 800096c:	f000 bb6c 	b.w	8001048 <__swbuf_r>
 8000970:	6813      	ldr	r3, [r2, #0]
 8000972:	1c58      	adds	r0, r3, #1
 8000974:	6010      	str	r0, [r2, #0]
 8000976:	7019      	strb	r1, [r3, #0]
 8000978:	4608      	mov	r0, r1
 800097a:	bc10      	pop	{r4}
 800097c:	4770      	bx	lr

0800097e <__sfputs_r>:
 800097e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000980:	4606      	mov	r6, r0
 8000982:	460f      	mov	r7, r1
 8000984:	4614      	mov	r4, r2
 8000986:	18d5      	adds	r5, r2, r3
 8000988:	42ac      	cmp	r4, r5
 800098a:	d101      	bne.n	8000990 <__sfputs_r+0x12>
 800098c:	2000      	movs	r0, #0
 800098e:	e007      	b.n	80009a0 <__sfputs_r+0x22>
 8000990:	463a      	mov	r2, r7
 8000992:	4630      	mov	r0, r6
 8000994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000998:	f7ff ffdc 	bl	8000954 <__sfputc_r>
 800099c:	1c43      	adds	r3, r0, #1
 800099e:	d1f3      	bne.n	8000988 <__sfputs_r+0xa>
 80009a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080009a4 <_vfiprintf_r>:
 80009a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a8:	460d      	mov	r5, r1
 80009aa:	4614      	mov	r4, r2
 80009ac:	4698      	mov	r8, r3
 80009ae:	4606      	mov	r6, r0
 80009b0:	b09d      	sub	sp, #116	@ 0x74
 80009b2:	b118      	cbz	r0, 80009bc <_vfiprintf_r+0x18>
 80009b4:	6a03      	ldr	r3, [r0, #32]
 80009b6:	b90b      	cbnz	r3, 80009bc <_vfiprintf_r+0x18>
 80009b8:	f7ff fdce 	bl	8000558 <__sinit>
 80009bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80009be:	07d9      	lsls	r1, r3, #31
 80009c0:	d405      	bmi.n	80009ce <_vfiprintf_r+0x2a>
 80009c2:	89ab      	ldrh	r3, [r5, #12]
 80009c4:	059a      	lsls	r2, r3, #22
 80009c6:	d402      	bmi.n	80009ce <_vfiprintf_r+0x2a>
 80009c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80009ca:	f7ff feca 	bl	8000762 <__retarget_lock_acquire_recursive>
 80009ce:	89ab      	ldrh	r3, [r5, #12]
 80009d0:	071b      	lsls	r3, r3, #28
 80009d2:	d501      	bpl.n	80009d8 <_vfiprintf_r+0x34>
 80009d4:	692b      	ldr	r3, [r5, #16]
 80009d6:	b99b      	cbnz	r3, 8000a00 <_vfiprintf_r+0x5c>
 80009d8:	4629      	mov	r1, r5
 80009da:	4630      	mov	r0, r6
 80009dc:	f000 fb72 	bl	80010c4 <__swsetup_r>
 80009e0:	b170      	cbz	r0, 8000a00 <_vfiprintf_r+0x5c>
 80009e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80009e4:	07dc      	lsls	r4, r3, #31
 80009e6:	d504      	bpl.n	80009f2 <_vfiprintf_r+0x4e>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009ec:	b01d      	add	sp, #116	@ 0x74
 80009ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009f2:	89ab      	ldrh	r3, [r5, #12]
 80009f4:	0598      	lsls	r0, r3, #22
 80009f6:	d4f7      	bmi.n	80009e8 <_vfiprintf_r+0x44>
 80009f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80009fa:	f7ff feb3 	bl	8000764 <__retarget_lock_release_recursive>
 80009fe:	e7f3      	b.n	80009e8 <_vfiprintf_r+0x44>
 8000a00:	2300      	movs	r3, #0
 8000a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a04:	2320      	movs	r3, #32
 8000a06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a0a:	2330      	movs	r3, #48	@ 0x30
 8000a0c:	f04f 0901 	mov.w	r9, #1
 8000a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a14:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8000bc0 <_vfiprintf_r+0x21c>
 8000a18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a1c:	4623      	mov	r3, r4
 8000a1e:	469a      	mov	sl, r3
 8000a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a24:	b10a      	cbz	r2, 8000a2a <_vfiprintf_r+0x86>
 8000a26:	2a25      	cmp	r2, #37	@ 0x25
 8000a28:	d1f9      	bne.n	8000a1e <_vfiprintf_r+0x7a>
 8000a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8000a2e:	d00b      	beq.n	8000a48 <_vfiprintf_r+0xa4>
 8000a30:	465b      	mov	r3, fp
 8000a32:	4622      	mov	r2, r4
 8000a34:	4629      	mov	r1, r5
 8000a36:	4630      	mov	r0, r6
 8000a38:	f7ff ffa1 	bl	800097e <__sfputs_r>
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	f000 80a7 	beq.w	8000b90 <_vfiprintf_r+0x1ec>
 8000a42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000a44:	445a      	add	r2, fp
 8000a46:	9209      	str	r2, [sp, #36]	@ 0x24
 8000a48:	f89a 3000 	ldrb.w	r3, [sl]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 809f 	beq.w	8000b90 <_vfiprintf_r+0x1ec>
 8000a52:	2300      	movs	r3, #0
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a5c:	f10a 0a01 	add.w	sl, sl, #1
 8000a60:	9304      	str	r3, [sp, #16]
 8000a62:	9307      	str	r3, [sp, #28]
 8000a64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a68:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a6a:	4654      	mov	r4, sl
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a72:	4853      	ldr	r0, [pc, #332]	@ (8000bc0 <_vfiprintf_r+0x21c>)
 8000a74:	f000 fb8c 	bl	8001190 <memchr>
 8000a78:	9a04      	ldr	r2, [sp, #16]
 8000a7a:	b9d8      	cbnz	r0, 8000ab4 <_vfiprintf_r+0x110>
 8000a7c:	06d1      	lsls	r1, r2, #27
 8000a7e:	bf44      	itt	mi
 8000a80:	2320      	movmi	r3, #32
 8000a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a86:	0713      	lsls	r3, r2, #28
 8000a88:	bf44      	itt	mi
 8000a8a:	232b      	movmi	r3, #43	@ 0x2b
 8000a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a90:	f89a 3000 	ldrb.w	r3, [sl]
 8000a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a96:	d015      	beq.n	8000ac4 <_vfiprintf_r+0x120>
 8000a98:	4654      	mov	r4, sl
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f04f 0c0a 	mov.w	ip, #10
 8000aa0:	9a07      	ldr	r2, [sp, #28]
 8000aa2:	4621      	mov	r1, r4
 8000aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000aa8:	3b30      	subs	r3, #48	@ 0x30
 8000aaa:	2b09      	cmp	r3, #9
 8000aac:	d94b      	bls.n	8000b46 <_vfiprintf_r+0x1a2>
 8000aae:	b1b0      	cbz	r0, 8000ade <_vfiprintf_r+0x13a>
 8000ab0:	9207      	str	r2, [sp, #28]
 8000ab2:	e014      	b.n	8000ade <_vfiprintf_r+0x13a>
 8000ab4:	eba0 0308 	sub.w	r3, r0, r8
 8000ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	46a2      	mov	sl, r4
 8000ac0:	9304      	str	r3, [sp, #16]
 8000ac2:	e7d2      	b.n	8000a6a <_vfiprintf_r+0xc6>
 8000ac4:	9b03      	ldr	r3, [sp, #12]
 8000ac6:	1d19      	adds	r1, r3, #4
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	9103      	str	r1, [sp, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	bfbb      	ittet	lt
 8000ad0:	425b      	neglt	r3, r3
 8000ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8000ad6:	9307      	strge	r3, [sp, #28]
 8000ad8:	9307      	strlt	r3, [sp, #28]
 8000ada:	bfb8      	it	lt
 8000adc:	9204      	strlt	r2, [sp, #16]
 8000ade:	7823      	ldrb	r3, [r4, #0]
 8000ae0:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ae2:	d10a      	bne.n	8000afa <_vfiprintf_r+0x156>
 8000ae4:	7863      	ldrb	r3, [r4, #1]
 8000ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ae8:	d132      	bne.n	8000b50 <_vfiprintf_r+0x1ac>
 8000aea:	9b03      	ldr	r3, [sp, #12]
 8000aec:	3402      	adds	r4, #2
 8000aee:	1d1a      	adds	r2, r3, #4
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	9203      	str	r2, [sp, #12]
 8000af4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000af8:	9305      	str	r3, [sp, #20]
 8000afa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000bc4 <_vfiprintf_r+0x220>
 8000afe:	2203      	movs	r2, #3
 8000b00:	4650      	mov	r0, sl
 8000b02:	7821      	ldrb	r1, [r4, #0]
 8000b04:	f000 fb44 	bl	8001190 <memchr>
 8000b08:	b138      	cbz	r0, 8000b1a <_vfiprintf_r+0x176>
 8000b0a:	2240      	movs	r2, #64	@ 0x40
 8000b0c:	9b04      	ldr	r3, [sp, #16]
 8000b0e:	eba0 000a 	sub.w	r0, r0, sl
 8000b12:	4082      	lsls	r2, r0
 8000b14:	4313      	orrs	r3, r2
 8000b16:	3401      	adds	r4, #1
 8000b18:	9304      	str	r3, [sp, #16]
 8000b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b1e:	2206      	movs	r2, #6
 8000b20:	4829      	ldr	r0, [pc, #164]	@ (8000bc8 <_vfiprintf_r+0x224>)
 8000b22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000b26:	f000 fb33 	bl	8001190 <memchr>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d03f      	beq.n	8000bae <_vfiprintf_r+0x20a>
 8000b2e:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <_vfiprintf_r+0x228>)
 8000b30:	bb1b      	cbnz	r3, 8000b7a <_vfiprintf_r+0x1d6>
 8000b32:	9b03      	ldr	r3, [sp, #12]
 8000b34:	3307      	adds	r3, #7
 8000b36:	f023 0307 	bic.w	r3, r3, #7
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	9303      	str	r3, [sp, #12]
 8000b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b40:	443b      	add	r3, r7
 8000b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b44:	e76a      	b.n	8000a1c <_vfiprintf_r+0x78>
 8000b46:	460c      	mov	r4, r1
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b4e:	e7a8      	b.n	8000aa2 <_vfiprintf_r+0xfe>
 8000b50:	2300      	movs	r3, #0
 8000b52:	f04f 0c0a 	mov.w	ip, #10
 8000b56:	4619      	mov	r1, r3
 8000b58:	3401      	adds	r4, #1
 8000b5a:	9305      	str	r3, [sp, #20]
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b62:	3a30      	subs	r2, #48	@ 0x30
 8000b64:	2a09      	cmp	r2, #9
 8000b66:	d903      	bls.n	8000b70 <_vfiprintf_r+0x1cc>
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0c6      	beq.n	8000afa <_vfiprintf_r+0x156>
 8000b6c:	9105      	str	r1, [sp, #20]
 8000b6e:	e7c4      	b.n	8000afa <_vfiprintf_r+0x156>
 8000b70:	4604      	mov	r4, r0
 8000b72:	2301      	movs	r3, #1
 8000b74:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b78:	e7f0      	b.n	8000b5c <_vfiprintf_r+0x1b8>
 8000b7a:	ab03      	add	r3, sp, #12
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	462a      	mov	r2, r5
 8000b80:	4630      	mov	r0, r6
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <_vfiprintf_r+0x22c>)
 8000b84:	a904      	add	r1, sp, #16
 8000b86:	f3af 8000 	nop.w
 8000b8a:	4607      	mov	r7, r0
 8000b8c:	1c78      	adds	r0, r7, #1
 8000b8e:	d1d6      	bne.n	8000b3e <_vfiprintf_r+0x19a>
 8000b90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b92:	07d9      	lsls	r1, r3, #31
 8000b94:	d405      	bmi.n	8000ba2 <_vfiprintf_r+0x1fe>
 8000b96:	89ab      	ldrh	r3, [r5, #12]
 8000b98:	059a      	lsls	r2, r3, #22
 8000b9a:	d402      	bmi.n	8000ba2 <_vfiprintf_r+0x1fe>
 8000b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b9e:	f7ff fde1 	bl	8000764 <__retarget_lock_release_recursive>
 8000ba2:	89ab      	ldrh	r3, [r5, #12]
 8000ba4:	065b      	lsls	r3, r3, #25
 8000ba6:	f53f af1f 	bmi.w	80009e8 <_vfiprintf_r+0x44>
 8000baa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000bac:	e71e      	b.n	80009ec <_vfiprintf_r+0x48>
 8000bae:	ab03      	add	r3, sp, #12
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	462a      	mov	r2, r5
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <_vfiprintf_r+0x22c>)
 8000bb8:	a904      	add	r1, sp, #16
 8000bba:	f000 f87d 	bl	8000cb8 <_printf_i>
 8000bbe:	e7e4      	b.n	8000b8a <_vfiprintf_r+0x1e6>
 8000bc0:	080012d1 	.word	0x080012d1
 8000bc4:	080012d7 	.word	0x080012d7
 8000bc8:	080012db 	.word	0x080012db
 8000bcc:	00000000 	.word	0x00000000
 8000bd0:	0800097f 	.word	0x0800097f

08000bd4 <_printf_common>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	4616      	mov	r6, r2
 8000bda:	4698      	mov	r8, r3
 8000bdc:	688a      	ldr	r2, [r1, #8]
 8000bde:	690b      	ldr	r3, [r1, #16]
 8000be0:	4607      	mov	r7, r0
 8000be2:	4293      	cmp	r3, r2
 8000be4:	bfb8      	it	lt
 8000be6:	4613      	movlt	r3, r2
 8000be8:	6033      	str	r3, [r6, #0]
 8000bea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000bee:	460c      	mov	r4, r1
 8000bf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000bf4:	b10a      	cbz	r2, 8000bfa <_printf_common+0x26>
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	6033      	str	r3, [r6, #0]
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	0699      	lsls	r1, r3, #26
 8000bfe:	bf42      	ittt	mi
 8000c00:	6833      	ldrmi	r3, [r6, #0]
 8000c02:	3302      	addmi	r3, #2
 8000c04:	6033      	strmi	r3, [r6, #0]
 8000c06:	6825      	ldr	r5, [r4, #0]
 8000c08:	f015 0506 	ands.w	r5, r5, #6
 8000c0c:	d106      	bne.n	8000c1c <_printf_common+0x48>
 8000c0e:	f104 0a19 	add.w	sl, r4, #25
 8000c12:	68e3      	ldr	r3, [r4, #12]
 8000c14:	6832      	ldr	r2, [r6, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	42ab      	cmp	r3, r5
 8000c1a:	dc2b      	bgt.n	8000c74 <_printf_common+0xa0>
 8000c1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c20:	6822      	ldr	r2, [r4, #0]
 8000c22:	3b00      	subs	r3, #0
 8000c24:	bf18      	it	ne
 8000c26:	2301      	movne	r3, #1
 8000c28:	0692      	lsls	r2, r2, #26
 8000c2a:	d430      	bmi.n	8000c8e <_printf_common+0xba>
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	4638      	mov	r0, r7
 8000c30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c34:	47c8      	blx	r9
 8000c36:	3001      	adds	r0, #1
 8000c38:	d023      	beq.n	8000c82 <_printf_common+0xae>
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	6922      	ldr	r2, [r4, #16]
 8000c3e:	f003 0306 	and.w	r3, r3, #6
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf14      	ite	ne
 8000c46:	2500      	movne	r5, #0
 8000c48:	6833      	ldreq	r3, [r6, #0]
 8000c4a:	f04f 0600 	mov.w	r6, #0
 8000c4e:	bf08      	it	eq
 8000c50:	68e5      	ldreq	r5, [r4, #12]
 8000c52:	f104 041a 	add.w	r4, r4, #26
 8000c56:	bf08      	it	eq
 8000c58:	1aed      	subeq	r5, r5, r3
 8000c5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000c5e:	bf08      	it	eq
 8000c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c64:	4293      	cmp	r3, r2
 8000c66:	bfc4      	itt	gt
 8000c68:	1a9b      	subgt	r3, r3, r2
 8000c6a:	18ed      	addgt	r5, r5, r3
 8000c6c:	42b5      	cmp	r5, r6
 8000c6e:	d11a      	bne.n	8000ca6 <_printf_common+0xd2>
 8000c70:	2000      	movs	r0, #0
 8000c72:	e008      	b.n	8000c86 <_printf_common+0xb2>
 8000c74:	2301      	movs	r3, #1
 8000c76:	4652      	mov	r2, sl
 8000c78:	4641      	mov	r1, r8
 8000c7a:	4638      	mov	r0, r7
 8000c7c:	47c8      	blx	r9
 8000c7e:	3001      	adds	r0, #1
 8000c80:	d103      	bne.n	8000c8a <_printf_common+0xb6>
 8000c82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	3501      	adds	r5, #1
 8000c8c:	e7c1      	b.n	8000c12 <_printf_common+0x3e>
 8000c8e:	2030      	movs	r0, #48	@ 0x30
 8000c90:	18e1      	adds	r1, r4, r3
 8000c92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000c9c:	4422      	add	r2, r4
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000ca4:	e7c2      	b.n	8000c2c <_printf_common+0x58>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	4622      	mov	r2, r4
 8000caa:	4641      	mov	r1, r8
 8000cac:	4638      	mov	r0, r7
 8000cae:	47c8      	blx	r9
 8000cb0:	3001      	adds	r0, #1
 8000cb2:	d0e6      	beq.n	8000c82 <_printf_common+0xae>
 8000cb4:	3601      	adds	r6, #1
 8000cb6:	e7d9      	b.n	8000c6c <_printf_common+0x98>

08000cb8 <_printf_i>:
 8000cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	7e0f      	ldrb	r7, [r1, #24]
 8000cbe:	4691      	mov	r9, r2
 8000cc0:	2f78      	cmp	r7, #120	@ 0x78
 8000cc2:	4680      	mov	r8, r0
 8000cc4:	460c      	mov	r4, r1
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000cca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000cce:	d807      	bhi.n	8000ce0 <_printf_i+0x28>
 8000cd0:	2f62      	cmp	r7, #98	@ 0x62
 8000cd2:	d80a      	bhi.n	8000cea <_printf_i+0x32>
 8000cd4:	2f00      	cmp	r7, #0
 8000cd6:	f000 80d3 	beq.w	8000e80 <_printf_i+0x1c8>
 8000cda:	2f58      	cmp	r7, #88	@ 0x58
 8000cdc:	f000 80ba 	beq.w	8000e54 <_printf_i+0x19c>
 8000ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ce4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ce8:	e03a      	b.n	8000d60 <_printf_i+0xa8>
 8000cea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000cee:	2b15      	cmp	r3, #21
 8000cf0:	d8f6      	bhi.n	8000ce0 <_printf_i+0x28>
 8000cf2:	a101      	add	r1, pc, #4	@ (adr r1, 8000cf8 <_printf_i+0x40>)
 8000cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000cf8:	08000d51 	.word	0x08000d51
 8000cfc:	08000d65 	.word	0x08000d65
 8000d00:	08000ce1 	.word	0x08000ce1
 8000d04:	08000ce1 	.word	0x08000ce1
 8000d08:	08000ce1 	.word	0x08000ce1
 8000d0c:	08000ce1 	.word	0x08000ce1
 8000d10:	08000d65 	.word	0x08000d65
 8000d14:	08000ce1 	.word	0x08000ce1
 8000d18:	08000ce1 	.word	0x08000ce1
 8000d1c:	08000ce1 	.word	0x08000ce1
 8000d20:	08000ce1 	.word	0x08000ce1
 8000d24:	08000e67 	.word	0x08000e67
 8000d28:	08000d8f 	.word	0x08000d8f
 8000d2c:	08000e21 	.word	0x08000e21
 8000d30:	08000ce1 	.word	0x08000ce1
 8000d34:	08000ce1 	.word	0x08000ce1
 8000d38:	08000e89 	.word	0x08000e89
 8000d3c:	08000ce1 	.word	0x08000ce1
 8000d40:	08000d8f 	.word	0x08000d8f
 8000d44:	08000ce1 	.word	0x08000ce1
 8000d48:	08000ce1 	.word	0x08000ce1
 8000d4c:	08000e29 	.word	0x08000e29
 8000d50:	6833      	ldr	r3, [r6, #0]
 8000d52:	1d1a      	adds	r2, r3, #4
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6032      	str	r2, [r6, #0]
 8000d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000d60:	2301      	movs	r3, #1
 8000d62:	e09e      	b.n	8000ea2 <_printf_i+0x1ea>
 8000d64:	6833      	ldr	r3, [r6, #0]
 8000d66:	6820      	ldr	r0, [r4, #0]
 8000d68:	1d19      	adds	r1, r3, #4
 8000d6a:	6031      	str	r1, [r6, #0]
 8000d6c:	0606      	lsls	r6, r0, #24
 8000d6e:	d501      	bpl.n	8000d74 <_printf_i+0xbc>
 8000d70:	681d      	ldr	r5, [r3, #0]
 8000d72:	e003      	b.n	8000d7c <_printf_i+0xc4>
 8000d74:	0645      	lsls	r5, r0, #25
 8000d76:	d5fb      	bpl.n	8000d70 <_printf_i+0xb8>
 8000d78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	da03      	bge.n	8000d88 <_printf_i+0xd0>
 8000d80:	232d      	movs	r3, #45	@ 0x2d
 8000d82:	426d      	negs	r5, r5
 8000d84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d88:	230a      	movs	r3, #10
 8000d8a:	4859      	ldr	r0, [pc, #356]	@ (8000ef0 <_printf_i+0x238>)
 8000d8c:	e011      	b.n	8000db2 <_printf_i+0xfa>
 8000d8e:	6821      	ldr	r1, [r4, #0]
 8000d90:	6833      	ldr	r3, [r6, #0]
 8000d92:	0608      	lsls	r0, r1, #24
 8000d94:	f853 5b04 	ldr.w	r5, [r3], #4
 8000d98:	d402      	bmi.n	8000da0 <_printf_i+0xe8>
 8000d9a:	0649      	lsls	r1, r1, #25
 8000d9c:	bf48      	it	mi
 8000d9e:	b2ad      	uxthmi	r5, r5
 8000da0:	2f6f      	cmp	r7, #111	@ 0x6f
 8000da2:	6033      	str	r3, [r6, #0]
 8000da4:	bf14      	ite	ne
 8000da6:	230a      	movne	r3, #10
 8000da8:	2308      	moveq	r3, #8
 8000daa:	4851      	ldr	r0, [pc, #324]	@ (8000ef0 <_printf_i+0x238>)
 8000dac:	2100      	movs	r1, #0
 8000dae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000db2:	6866      	ldr	r6, [r4, #4]
 8000db4:	2e00      	cmp	r6, #0
 8000db6:	bfa8      	it	ge
 8000db8:	6821      	ldrge	r1, [r4, #0]
 8000dba:	60a6      	str	r6, [r4, #8]
 8000dbc:	bfa4      	itt	ge
 8000dbe:	f021 0104 	bicge.w	r1, r1, #4
 8000dc2:	6021      	strge	r1, [r4, #0]
 8000dc4:	b90d      	cbnz	r5, 8000dca <_printf_i+0x112>
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d04b      	beq.n	8000e62 <_printf_i+0x1aa>
 8000dca:	4616      	mov	r6, r2
 8000dcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8000dd0:	fb03 5711 	mls	r7, r3, r1, r5
 8000dd4:	5dc7      	ldrb	r7, [r0, r7]
 8000dd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000dda:	462f      	mov	r7, r5
 8000ddc:	42bb      	cmp	r3, r7
 8000dde:	460d      	mov	r5, r1
 8000de0:	d9f4      	bls.n	8000dcc <_printf_i+0x114>
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d10b      	bne.n	8000dfe <_printf_i+0x146>
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	07df      	lsls	r7, r3, #31
 8000dea:	d508      	bpl.n	8000dfe <_printf_i+0x146>
 8000dec:	6923      	ldr	r3, [r4, #16]
 8000dee:	6861      	ldr	r1, [r4, #4]
 8000df0:	4299      	cmp	r1, r3
 8000df2:	bfde      	ittt	le
 8000df4:	2330      	movle	r3, #48	@ 0x30
 8000df6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000dfa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000dfe:	1b92      	subs	r2, r2, r6
 8000e00:	6122      	str	r2, [r4, #16]
 8000e02:	464b      	mov	r3, r9
 8000e04:	4621      	mov	r1, r4
 8000e06:	4640      	mov	r0, r8
 8000e08:	f8cd a000 	str.w	sl, [sp]
 8000e0c:	aa03      	add	r2, sp, #12
 8000e0e:	f7ff fee1 	bl	8000bd4 <_printf_common>
 8000e12:	3001      	adds	r0, #1
 8000e14:	d14a      	bne.n	8000eac <_printf_i+0x1f4>
 8000e16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e1a:	b004      	add	sp, #16
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	f043 0320 	orr.w	r3, r3, #32
 8000e26:	6023      	str	r3, [r4, #0]
 8000e28:	2778      	movs	r7, #120	@ 0x78
 8000e2a:	4832      	ldr	r0, [pc, #200]	@ (8000ef4 <_printf_i+0x23c>)
 8000e2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	6831      	ldr	r1, [r6, #0]
 8000e34:	061f      	lsls	r7, r3, #24
 8000e36:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e3a:	d402      	bmi.n	8000e42 <_printf_i+0x18a>
 8000e3c:	065f      	lsls	r7, r3, #25
 8000e3e:	bf48      	it	mi
 8000e40:	b2ad      	uxthmi	r5, r5
 8000e42:	6031      	str	r1, [r6, #0]
 8000e44:	07d9      	lsls	r1, r3, #31
 8000e46:	bf44      	itt	mi
 8000e48:	f043 0320 	orrmi.w	r3, r3, #32
 8000e4c:	6023      	strmi	r3, [r4, #0]
 8000e4e:	b11d      	cbz	r5, 8000e58 <_printf_i+0x1a0>
 8000e50:	2310      	movs	r3, #16
 8000e52:	e7ab      	b.n	8000dac <_printf_i+0xf4>
 8000e54:	4826      	ldr	r0, [pc, #152]	@ (8000ef0 <_printf_i+0x238>)
 8000e56:	e7e9      	b.n	8000e2c <_printf_i+0x174>
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	f023 0320 	bic.w	r3, r3, #32
 8000e5e:	6023      	str	r3, [r4, #0]
 8000e60:	e7f6      	b.n	8000e50 <_printf_i+0x198>
 8000e62:	4616      	mov	r6, r2
 8000e64:	e7bd      	b.n	8000de2 <_printf_i+0x12a>
 8000e66:	6833      	ldr	r3, [r6, #0]
 8000e68:	6825      	ldr	r5, [r4, #0]
 8000e6a:	1d18      	adds	r0, r3, #4
 8000e6c:	6961      	ldr	r1, [r4, #20]
 8000e6e:	6030      	str	r0, [r6, #0]
 8000e70:	062e      	lsls	r6, r5, #24
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	d501      	bpl.n	8000e7a <_printf_i+0x1c2>
 8000e76:	6019      	str	r1, [r3, #0]
 8000e78:	e002      	b.n	8000e80 <_printf_i+0x1c8>
 8000e7a:	0668      	lsls	r0, r5, #25
 8000e7c:	d5fb      	bpl.n	8000e76 <_printf_i+0x1be>
 8000e7e:	8019      	strh	r1, [r3, #0]
 8000e80:	2300      	movs	r3, #0
 8000e82:	4616      	mov	r6, r2
 8000e84:	6123      	str	r3, [r4, #16]
 8000e86:	e7bc      	b.n	8000e02 <_printf_i+0x14a>
 8000e88:	6833      	ldr	r3, [r6, #0]
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	1d1a      	adds	r2, r3, #4
 8000e8e:	6032      	str	r2, [r6, #0]
 8000e90:	681e      	ldr	r6, [r3, #0]
 8000e92:	6862      	ldr	r2, [r4, #4]
 8000e94:	4630      	mov	r0, r6
 8000e96:	f000 f97b 	bl	8001190 <memchr>
 8000e9a:	b108      	cbz	r0, 8000ea0 <_printf_i+0x1e8>
 8000e9c:	1b80      	subs	r0, r0, r6
 8000e9e:	6060      	str	r0, [r4, #4]
 8000ea0:	6863      	ldr	r3, [r4, #4]
 8000ea2:	6123      	str	r3, [r4, #16]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000eaa:	e7aa      	b.n	8000e02 <_printf_i+0x14a>
 8000eac:	4632      	mov	r2, r6
 8000eae:	4649      	mov	r1, r9
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	6923      	ldr	r3, [r4, #16]
 8000eb4:	47d0      	blx	sl
 8000eb6:	3001      	adds	r0, #1
 8000eb8:	d0ad      	beq.n	8000e16 <_printf_i+0x15e>
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	079b      	lsls	r3, r3, #30
 8000ebe:	d413      	bmi.n	8000ee8 <_printf_i+0x230>
 8000ec0:	68e0      	ldr	r0, [r4, #12]
 8000ec2:	9b03      	ldr	r3, [sp, #12]
 8000ec4:	4298      	cmp	r0, r3
 8000ec6:	bfb8      	it	lt
 8000ec8:	4618      	movlt	r0, r3
 8000eca:	e7a6      	b.n	8000e1a <_printf_i+0x162>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	4632      	mov	r2, r6
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	4640      	mov	r0, r8
 8000ed4:	47d0      	blx	sl
 8000ed6:	3001      	adds	r0, #1
 8000ed8:	d09d      	beq.n	8000e16 <_printf_i+0x15e>
 8000eda:	3501      	adds	r5, #1
 8000edc:	68e3      	ldr	r3, [r4, #12]
 8000ede:	9903      	ldr	r1, [sp, #12]
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	42ab      	cmp	r3, r5
 8000ee4:	dcf2      	bgt.n	8000ecc <_printf_i+0x214>
 8000ee6:	e7eb      	b.n	8000ec0 <_printf_i+0x208>
 8000ee8:	2500      	movs	r5, #0
 8000eea:	f104 0619 	add.w	r6, r4, #25
 8000eee:	e7f5      	b.n	8000edc <_printf_i+0x224>
 8000ef0:	080012e2 	.word	0x080012e2
 8000ef4:	080012f3 	.word	0x080012f3

08000ef8 <__sflush_r>:
 8000ef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efe:	0716      	lsls	r6, r2, #28
 8000f00:	4605      	mov	r5, r0
 8000f02:	460c      	mov	r4, r1
 8000f04:	d454      	bmi.n	8000fb0 <__sflush_r+0xb8>
 8000f06:	684b      	ldr	r3, [r1, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dc02      	bgt.n	8000f12 <__sflush_r+0x1a>
 8000f0c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	dd48      	ble.n	8000fa4 <__sflush_r+0xac>
 8000f12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f14:	2e00      	cmp	r6, #0
 8000f16:	d045      	beq.n	8000fa4 <__sflush_r+0xac>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000f1e:	682f      	ldr	r7, [r5, #0]
 8000f20:	6a21      	ldr	r1, [r4, #32]
 8000f22:	602b      	str	r3, [r5, #0]
 8000f24:	d030      	beq.n	8000f88 <__sflush_r+0x90>
 8000f26:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000f28:	89a3      	ldrh	r3, [r4, #12]
 8000f2a:	0759      	lsls	r1, r3, #29
 8000f2c:	d505      	bpl.n	8000f3a <__sflush_r+0x42>
 8000f2e:	6863      	ldr	r3, [r4, #4]
 8000f30:	1ad2      	subs	r2, r2, r3
 8000f32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000f34:	b10b      	cbz	r3, 8000f3a <__sflush_r+0x42>
 8000f36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f38:	1ad2      	subs	r2, r2, r3
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f40:	6a21      	ldr	r1, [r4, #32]
 8000f42:	47b0      	blx	r6
 8000f44:	1c43      	adds	r3, r0, #1
 8000f46:	89a3      	ldrh	r3, [r4, #12]
 8000f48:	d106      	bne.n	8000f58 <__sflush_r+0x60>
 8000f4a:	6829      	ldr	r1, [r5, #0]
 8000f4c:	291d      	cmp	r1, #29
 8000f4e:	d82b      	bhi.n	8000fa8 <__sflush_r+0xb0>
 8000f50:	4a28      	ldr	r2, [pc, #160]	@ (8000ff4 <__sflush_r+0xfc>)
 8000f52:	410a      	asrs	r2, r1
 8000f54:	07d6      	lsls	r6, r2, #31
 8000f56:	d427      	bmi.n	8000fa8 <__sflush_r+0xb0>
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6062      	str	r2, [r4, #4]
 8000f5c:	6922      	ldr	r2, [r4, #16]
 8000f5e:	04d9      	lsls	r1, r3, #19
 8000f60:	6022      	str	r2, [r4, #0]
 8000f62:	d504      	bpl.n	8000f6e <__sflush_r+0x76>
 8000f64:	1c42      	adds	r2, r0, #1
 8000f66:	d101      	bne.n	8000f6c <__sflush_r+0x74>
 8000f68:	682b      	ldr	r3, [r5, #0]
 8000f6a:	b903      	cbnz	r3, 8000f6e <__sflush_r+0x76>
 8000f6c:	6560      	str	r0, [r4, #84]	@ 0x54
 8000f6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000f70:	602f      	str	r7, [r5, #0]
 8000f72:	b1b9      	cbz	r1, 8000fa4 <__sflush_r+0xac>
 8000f74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d002      	beq.n	8000f82 <__sflush_r+0x8a>
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	f7ff fbf3 	bl	8000768 <_free_r>
 8000f82:	2300      	movs	r3, #0
 8000f84:	6363      	str	r3, [r4, #52]	@ 0x34
 8000f86:	e00d      	b.n	8000fa4 <__sflush_r+0xac>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	47b0      	blx	r6
 8000f8e:	4602      	mov	r2, r0
 8000f90:	1c50      	adds	r0, r2, #1
 8000f92:	d1c9      	bne.n	8000f28 <__sflush_r+0x30>
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0c6      	beq.n	8000f28 <__sflush_r+0x30>
 8000f9a:	2b1d      	cmp	r3, #29
 8000f9c:	d001      	beq.n	8000fa2 <__sflush_r+0xaa>
 8000f9e:	2b16      	cmp	r3, #22
 8000fa0:	d11d      	bne.n	8000fde <__sflush_r+0xe6>
 8000fa2:	602f      	str	r7, [r5, #0]
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	e021      	b.n	8000fec <__sflush_r+0xf4>
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	e01a      	b.n	8000fe6 <__sflush_r+0xee>
 8000fb0:	690f      	ldr	r7, [r1, #16]
 8000fb2:	2f00      	cmp	r7, #0
 8000fb4:	d0f6      	beq.n	8000fa4 <__sflush_r+0xac>
 8000fb6:	0793      	lsls	r3, r2, #30
 8000fb8:	bf18      	it	ne
 8000fba:	2300      	movne	r3, #0
 8000fbc:	680e      	ldr	r6, [r1, #0]
 8000fbe:	bf08      	it	eq
 8000fc0:	694b      	ldreq	r3, [r1, #20]
 8000fc2:	1bf6      	subs	r6, r6, r7
 8000fc4:	600f      	str	r7, [r1, #0]
 8000fc6:	608b      	str	r3, [r1, #8]
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	ddeb      	ble.n	8000fa4 <__sflush_r+0xac>
 8000fcc:	4633      	mov	r3, r6
 8000fce:	463a      	mov	r2, r7
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	6a21      	ldr	r1, [r4, #32]
 8000fd4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000fd8:	47e0      	blx	ip
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	dc07      	bgt.n	8000fee <__sflush_r+0xf6>
 8000fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fea:	81a3      	strh	r3, [r4, #12]
 8000fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fee:	4407      	add	r7, r0
 8000ff0:	1a36      	subs	r6, r6, r0
 8000ff2:	e7e9      	b.n	8000fc8 <__sflush_r+0xd0>
 8000ff4:	dfbffffe 	.word	0xdfbffffe

08000ff8 <_fflush_r>:
 8000ff8:	b538      	push	{r3, r4, r5, lr}
 8000ffa:	690b      	ldr	r3, [r1, #16]
 8000ffc:	4605      	mov	r5, r0
 8000ffe:	460c      	mov	r4, r1
 8001000:	b913      	cbnz	r3, 8001008 <_fflush_r+0x10>
 8001002:	2500      	movs	r5, #0
 8001004:	4628      	mov	r0, r5
 8001006:	bd38      	pop	{r3, r4, r5, pc}
 8001008:	b118      	cbz	r0, 8001012 <_fflush_r+0x1a>
 800100a:	6a03      	ldr	r3, [r0, #32]
 800100c:	b90b      	cbnz	r3, 8001012 <_fflush_r+0x1a>
 800100e:	f7ff faa3 	bl	8000558 <__sinit>
 8001012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f3      	beq.n	8001002 <_fflush_r+0xa>
 800101a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800101c:	07d0      	lsls	r0, r2, #31
 800101e:	d404      	bmi.n	800102a <_fflush_r+0x32>
 8001020:	0599      	lsls	r1, r3, #22
 8001022:	d402      	bmi.n	800102a <_fflush_r+0x32>
 8001024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001026:	f7ff fb9c 	bl	8000762 <__retarget_lock_acquire_recursive>
 800102a:	4628      	mov	r0, r5
 800102c:	4621      	mov	r1, r4
 800102e:	f7ff ff63 	bl	8000ef8 <__sflush_r>
 8001032:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001034:	4605      	mov	r5, r0
 8001036:	07da      	lsls	r2, r3, #31
 8001038:	d4e4      	bmi.n	8001004 <_fflush_r+0xc>
 800103a:	89a3      	ldrh	r3, [r4, #12]
 800103c:	059b      	lsls	r3, r3, #22
 800103e:	d4e1      	bmi.n	8001004 <_fflush_r+0xc>
 8001040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001042:	f7ff fb8f 	bl	8000764 <__retarget_lock_release_recursive>
 8001046:	e7dd      	b.n	8001004 <_fflush_r+0xc>

08001048 <__swbuf_r>:
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	460e      	mov	r6, r1
 800104c:	4614      	mov	r4, r2
 800104e:	4605      	mov	r5, r0
 8001050:	b118      	cbz	r0, 800105a <__swbuf_r+0x12>
 8001052:	6a03      	ldr	r3, [r0, #32]
 8001054:	b90b      	cbnz	r3, 800105a <__swbuf_r+0x12>
 8001056:	f7ff fa7f 	bl	8000558 <__sinit>
 800105a:	69a3      	ldr	r3, [r4, #24]
 800105c:	60a3      	str	r3, [r4, #8]
 800105e:	89a3      	ldrh	r3, [r4, #12]
 8001060:	071a      	lsls	r2, r3, #28
 8001062:	d501      	bpl.n	8001068 <__swbuf_r+0x20>
 8001064:	6923      	ldr	r3, [r4, #16]
 8001066:	b943      	cbnz	r3, 800107a <__swbuf_r+0x32>
 8001068:	4621      	mov	r1, r4
 800106a:	4628      	mov	r0, r5
 800106c:	f000 f82a 	bl	80010c4 <__swsetup_r>
 8001070:	b118      	cbz	r0, 800107a <__swbuf_r+0x32>
 8001072:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001076:	4638      	mov	r0, r7
 8001078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	6922      	ldr	r2, [r4, #16]
 800107e:	b2f6      	uxtb	r6, r6
 8001080:	1a98      	subs	r0, r3, r2
 8001082:	6963      	ldr	r3, [r4, #20]
 8001084:	4637      	mov	r7, r6
 8001086:	4283      	cmp	r3, r0
 8001088:	dc05      	bgt.n	8001096 <__swbuf_r+0x4e>
 800108a:	4621      	mov	r1, r4
 800108c:	4628      	mov	r0, r5
 800108e:	f7ff ffb3 	bl	8000ff8 <_fflush_r>
 8001092:	2800      	cmp	r0, #0
 8001094:	d1ed      	bne.n	8001072 <__swbuf_r+0x2a>
 8001096:	68a3      	ldr	r3, [r4, #8]
 8001098:	3b01      	subs	r3, #1
 800109a:	60a3      	str	r3, [r4, #8]
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	6022      	str	r2, [r4, #0]
 80010a2:	701e      	strb	r6, [r3, #0]
 80010a4:	6962      	ldr	r2, [r4, #20]
 80010a6:	1c43      	adds	r3, r0, #1
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d004      	beq.n	80010b6 <__swbuf_r+0x6e>
 80010ac:	89a3      	ldrh	r3, [r4, #12]
 80010ae:	07db      	lsls	r3, r3, #31
 80010b0:	d5e1      	bpl.n	8001076 <__swbuf_r+0x2e>
 80010b2:	2e0a      	cmp	r6, #10
 80010b4:	d1df      	bne.n	8001076 <__swbuf_r+0x2e>
 80010b6:	4621      	mov	r1, r4
 80010b8:	4628      	mov	r0, r5
 80010ba:	f7ff ff9d 	bl	8000ff8 <_fflush_r>
 80010be:	2800      	cmp	r0, #0
 80010c0:	d0d9      	beq.n	8001076 <__swbuf_r+0x2e>
 80010c2:	e7d6      	b.n	8001072 <__swbuf_r+0x2a>

080010c4 <__swsetup_r>:
 80010c4:	b538      	push	{r3, r4, r5, lr}
 80010c6:	4b29      	ldr	r3, [pc, #164]	@ (800116c <__swsetup_r+0xa8>)
 80010c8:	4605      	mov	r5, r0
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	460c      	mov	r4, r1
 80010ce:	b118      	cbz	r0, 80010d8 <__swsetup_r+0x14>
 80010d0:	6a03      	ldr	r3, [r0, #32]
 80010d2:	b90b      	cbnz	r3, 80010d8 <__swsetup_r+0x14>
 80010d4:	f7ff fa40 	bl	8000558 <__sinit>
 80010d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010dc:	0719      	lsls	r1, r3, #28
 80010de:	d422      	bmi.n	8001126 <__swsetup_r+0x62>
 80010e0:	06da      	lsls	r2, r3, #27
 80010e2:	d407      	bmi.n	80010f4 <__swsetup_r+0x30>
 80010e4:	2209      	movs	r2, #9
 80010e6:	602a      	str	r2, [r5, #0]
 80010e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010f0:	81a3      	strh	r3, [r4, #12]
 80010f2:	e033      	b.n	800115c <__swsetup_r+0x98>
 80010f4:	0758      	lsls	r0, r3, #29
 80010f6:	d512      	bpl.n	800111e <__swsetup_r+0x5a>
 80010f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010fa:	b141      	cbz	r1, 800110e <__swsetup_r+0x4a>
 80010fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001100:	4299      	cmp	r1, r3
 8001102:	d002      	beq.n	800110a <__swsetup_r+0x46>
 8001104:	4628      	mov	r0, r5
 8001106:	f7ff fb2f 	bl	8000768 <_free_r>
 800110a:	2300      	movs	r3, #0
 800110c:	6363      	str	r3, [r4, #52]	@ 0x34
 800110e:	89a3      	ldrh	r3, [r4, #12]
 8001110:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001114:	81a3      	strh	r3, [r4, #12]
 8001116:	2300      	movs	r3, #0
 8001118:	6063      	str	r3, [r4, #4]
 800111a:	6923      	ldr	r3, [r4, #16]
 800111c:	6023      	str	r3, [r4, #0]
 800111e:	89a3      	ldrh	r3, [r4, #12]
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	81a3      	strh	r3, [r4, #12]
 8001126:	6923      	ldr	r3, [r4, #16]
 8001128:	b94b      	cbnz	r3, 800113e <__swsetup_r+0x7a>
 800112a:	89a3      	ldrh	r3, [r4, #12]
 800112c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001134:	d003      	beq.n	800113e <__swsetup_r+0x7a>
 8001136:	4621      	mov	r1, r4
 8001138:	4628      	mov	r0, r5
 800113a:	f000 f85c 	bl	80011f6 <__smakebuf_r>
 800113e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001142:	f013 0201 	ands.w	r2, r3, #1
 8001146:	d00a      	beq.n	800115e <__swsetup_r+0x9a>
 8001148:	2200      	movs	r2, #0
 800114a:	60a2      	str	r2, [r4, #8]
 800114c:	6962      	ldr	r2, [r4, #20]
 800114e:	4252      	negs	r2, r2
 8001150:	61a2      	str	r2, [r4, #24]
 8001152:	6922      	ldr	r2, [r4, #16]
 8001154:	b942      	cbnz	r2, 8001168 <__swsetup_r+0xa4>
 8001156:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800115a:	d1c5      	bne.n	80010e8 <__swsetup_r+0x24>
 800115c:	bd38      	pop	{r3, r4, r5, pc}
 800115e:	0799      	lsls	r1, r3, #30
 8001160:	bf58      	it	pl
 8001162:	6962      	ldrpl	r2, [r4, #20]
 8001164:	60a2      	str	r2, [r4, #8]
 8001166:	e7f4      	b.n	8001152 <__swsetup_r+0x8e>
 8001168:	2000      	movs	r0, #0
 800116a:	e7f7      	b.n	800115c <__swsetup_r+0x98>
 800116c:	2000000c 	.word	0x2000000c

08001170 <_sbrk_r>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	2300      	movs	r3, #0
 8001174:	4d05      	ldr	r5, [pc, #20]	@ (800118c <_sbrk_r+0x1c>)
 8001176:	4604      	mov	r4, r0
 8001178:	4608      	mov	r0, r1
 800117a:	602b      	str	r3, [r5, #0]
 800117c:	f7ff f8da 	bl	8000334 <_sbrk>
 8001180:	1c43      	adds	r3, r0, #1
 8001182:	d102      	bne.n	800118a <_sbrk_r+0x1a>
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	b103      	cbz	r3, 800118a <_sbrk_r+0x1a>
 8001188:	6023      	str	r3, [r4, #0]
 800118a:	bd38      	pop	{r3, r4, r5, pc}
 800118c:	200001bc 	.word	0x200001bc

08001190 <memchr>:
 8001190:	4603      	mov	r3, r0
 8001192:	b510      	push	{r4, lr}
 8001194:	b2c9      	uxtb	r1, r1
 8001196:	4402      	add	r2, r0
 8001198:	4293      	cmp	r3, r2
 800119a:	4618      	mov	r0, r3
 800119c:	d101      	bne.n	80011a2 <memchr+0x12>
 800119e:	2000      	movs	r0, #0
 80011a0:	e003      	b.n	80011aa <memchr+0x1a>
 80011a2:	7804      	ldrb	r4, [r0, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	428c      	cmp	r4, r1
 80011a8:	d1f6      	bne.n	8001198 <memchr+0x8>
 80011aa:	bd10      	pop	{r4, pc}

080011ac <__swhatbuf_r>:
 80011ac:	b570      	push	{r4, r5, r6, lr}
 80011ae:	460c      	mov	r4, r1
 80011b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011b4:	4615      	mov	r5, r2
 80011b6:	2900      	cmp	r1, #0
 80011b8:	461e      	mov	r6, r3
 80011ba:	b096      	sub	sp, #88	@ 0x58
 80011bc:	da0c      	bge.n	80011d8 <__swhatbuf_r+0x2c>
 80011be:	89a3      	ldrh	r3, [r4, #12]
 80011c0:	2100      	movs	r1, #0
 80011c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80011c6:	bf14      	ite	ne
 80011c8:	2340      	movne	r3, #64	@ 0x40
 80011ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80011ce:	2000      	movs	r0, #0
 80011d0:	6031      	str	r1, [r6, #0]
 80011d2:	602b      	str	r3, [r5, #0]
 80011d4:	b016      	add	sp, #88	@ 0x58
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
 80011d8:	466a      	mov	r2, sp
 80011da:	f000 f849 	bl	8001270 <_fstat_r>
 80011de:	2800      	cmp	r0, #0
 80011e0:	dbed      	blt.n	80011be <__swhatbuf_r+0x12>
 80011e2:	9901      	ldr	r1, [sp, #4]
 80011e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80011e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80011ec:	4259      	negs	r1, r3
 80011ee:	4159      	adcs	r1, r3
 80011f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f4:	e7eb      	b.n	80011ce <__swhatbuf_r+0x22>

080011f6 <__smakebuf_r>:
 80011f6:	898b      	ldrh	r3, [r1, #12]
 80011f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011fa:	079d      	lsls	r5, r3, #30
 80011fc:	4606      	mov	r6, r0
 80011fe:	460c      	mov	r4, r1
 8001200:	d507      	bpl.n	8001212 <__smakebuf_r+0x1c>
 8001202:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001206:	6023      	str	r3, [r4, #0]
 8001208:	6123      	str	r3, [r4, #16]
 800120a:	2301      	movs	r3, #1
 800120c:	6163      	str	r3, [r4, #20]
 800120e:	b003      	add	sp, #12
 8001210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001212:	466a      	mov	r2, sp
 8001214:	ab01      	add	r3, sp, #4
 8001216:	f7ff ffc9 	bl	80011ac <__swhatbuf_r>
 800121a:	9f00      	ldr	r7, [sp, #0]
 800121c:	4605      	mov	r5, r0
 800121e:	4639      	mov	r1, r7
 8001220:	4630      	mov	r0, r6
 8001222:	f7ff fb0b 	bl	800083c <_malloc_r>
 8001226:	b948      	cbnz	r0, 800123c <__smakebuf_r+0x46>
 8001228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800122c:	059a      	lsls	r2, r3, #22
 800122e:	d4ee      	bmi.n	800120e <__smakebuf_r+0x18>
 8001230:	f023 0303 	bic.w	r3, r3, #3
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	81a3      	strh	r3, [r4, #12]
 800123a:	e7e2      	b.n	8001202 <__smakebuf_r+0xc>
 800123c:	89a3      	ldrh	r3, [r4, #12]
 800123e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001246:	81a3      	strh	r3, [r4, #12]
 8001248:	9b01      	ldr	r3, [sp, #4]
 800124a:	6020      	str	r0, [r4, #0]
 800124c:	b15b      	cbz	r3, 8001266 <__smakebuf_r+0x70>
 800124e:	4630      	mov	r0, r6
 8001250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001254:	f000 f81e 	bl	8001294 <_isatty_r>
 8001258:	b128      	cbz	r0, 8001266 <__smakebuf_r+0x70>
 800125a:	89a3      	ldrh	r3, [r4, #12]
 800125c:	f023 0303 	bic.w	r3, r3, #3
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	81a3      	strh	r3, [r4, #12]
 8001266:	89a3      	ldrh	r3, [r4, #12]
 8001268:	431d      	orrs	r5, r3
 800126a:	81a5      	strh	r5, [r4, #12]
 800126c:	e7cf      	b.n	800120e <__smakebuf_r+0x18>
	...

08001270 <_fstat_r>:
 8001270:	b538      	push	{r3, r4, r5, lr}
 8001272:	2300      	movs	r3, #0
 8001274:	4d06      	ldr	r5, [pc, #24]	@ (8001290 <_fstat_r+0x20>)
 8001276:	4604      	mov	r4, r0
 8001278:	4608      	mov	r0, r1
 800127a:	4611      	mov	r1, r2
 800127c:	602b      	str	r3, [r5, #0]
 800127e:	f7ff f833 	bl	80002e8 <_fstat>
 8001282:	1c43      	adds	r3, r0, #1
 8001284:	d102      	bne.n	800128c <_fstat_r+0x1c>
 8001286:	682b      	ldr	r3, [r5, #0]
 8001288:	b103      	cbz	r3, 800128c <_fstat_r+0x1c>
 800128a:	6023      	str	r3, [r4, #0]
 800128c:	bd38      	pop	{r3, r4, r5, pc}
 800128e:	bf00      	nop
 8001290:	200001bc 	.word	0x200001bc

08001294 <_isatty_r>:
 8001294:	b538      	push	{r3, r4, r5, lr}
 8001296:	2300      	movs	r3, #0
 8001298:	4d05      	ldr	r5, [pc, #20]	@ (80012b0 <_isatty_r+0x1c>)
 800129a:	4604      	mov	r4, r0
 800129c:	4608      	mov	r0, r1
 800129e:	602b      	str	r3, [r5, #0]
 80012a0:	f7ff f831 	bl	8000306 <_isatty>
 80012a4:	1c43      	adds	r3, r0, #1
 80012a6:	d102      	bne.n	80012ae <_isatty_r+0x1a>
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	b103      	cbz	r3, 80012ae <_isatty_r+0x1a>
 80012ac:	6023      	str	r3, [r4, #0]
 80012ae:	bd38      	pop	{r3, r4, r5, pc}
 80012b0:	200001bc 	.word	0x200001bc

080012b4 <_init>:
 80012b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b6:	bf00      	nop
 80012b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ba:	bc08      	pop	{r3}
 80012bc:	469e      	mov	lr, r3
 80012be:	4770      	bx	lr

080012c0 <_fini>:
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c2:	bf00      	nop
 80012c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012c6:	bc08      	pop	{r3}
 80012c8:	469e      	mov	lr, r3
 80012ca:	4770      	bx	lr
