
EngineAutomaticTransmissionController_BareMetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fac  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c70  0800a0e0  0800a0e0  0001a0e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd50  0800bd50  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd50  0800bd50  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd50  0800bd50  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd50  0800bd50  0001bd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd54  0800bd54  0001bd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800bd58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  20000200  0800bf58  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bd4  0800bf58  00020bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY
 13 .debug_info   000048c8  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001751  00000000  00000000  00024b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004d8  00000000  00000000  00026288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000351  00000000  00000000  00026760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004659  00000000  00000000  00026ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007bf8  00000000  00000000  0002b10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c7a6  00000000  00000000  00032d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002854  00000000  00000000  0003f4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00041cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000200 	.word	0x20000200
 800014c:	00000000 	.word	0x00000000
 8000150:	0800a0c4 	.word	0x0800a0c4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000204 	.word	0x20000204
 800016c:	0800a0c4 	.word	0x0800a0c4

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_frsub>:
 8000b88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	e002      	b.n	8000b94 <__addsf3>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fsub>:
 8000b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b94 <__addsf3>:
 8000b94:	0042      	lsls	r2, r0, #1
 8000b96:	bf1f      	itttt	ne
 8000b98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b9c:	ea92 0f03 	teqne	r2, r3
 8000ba0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba8:	d06a      	beq.n	8000c80 <__addsf3+0xec>
 8000baa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bb2:	bfc1      	itttt	gt
 8000bb4:	18d2      	addgt	r2, r2, r3
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	4048      	eorgt	r0, r1
 8000bba:	4041      	eorgt	r1, r0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	2b19      	cmp	r3, #25
 8000bc2:	bf88      	it	hi
 8000bc4:	4770      	bxhi	lr
 8000bc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4249      	negne	r1, r1
 8000be6:	ea92 0f03 	teq	r2, r3
 8000bea:	d03f      	beq.n	8000c6c <__addsf3+0xd8>
 8000bec:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf4:	eb10 000c 	adds.w	r0, r0, ip
 8000bf8:	f1c3 0320 	rsb	r3, r3, #32
 8000bfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000c00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	d502      	bpl.n	8000c0c <__addsf3+0x78>
 8000c06:	4249      	negs	r1, r1
 8000c08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c10:	d313      	bcc.n	8000c3a <__addsf3+0xa6>
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c16:	d306      	bcc.n	8000c26 <__addsf3+0x92>
 8000c18:	0840      	lsrs	r0, r0, #1
 8000c1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1e:	f102 0201 	add.w	r2, r2, #1
 8000c22:	2afe      	cmp	r2, #254	; 0xfe
 8000c24:	d251      	bcs.n	8000cca <__addsf3+0x136>
 8000c26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	ea40 0003 	orr.w	r0, r0, r3
 8000c38:	4770      	bx	lr
 8000c3a:	0049      	lsls	r1, r1, #1
 8000c3c:	eb40 0000 	adc.w	r0, r0, r0
 8000c40:	3a01      	subs	r2, #1
 8000c42:	bf28      	it	cs
 8000c44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c48:	d2ed      	bcs.n	8000c26 <__addsf3+0x92>
 8000c4a:	fab0 fc80 	clz	ip, r0
 8000c4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c52:	ebb2 020c 	subs.w	r2, r2, ip
 8000c56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c5a:	bfaa      	itet	ge
 8000c5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c60:	4252      	neglt	r2, r2
 8000c62:	4318      	orrge	r0, r3
 8000c64:	bfbc      	itt	lt
 8000c66:	40d0      	lsrlt	r0, r2
 8000c68:	4318      	orrlt	r0, r3
 8000c6a:	4770      	bx	lr
 8000c6c:	f092 0f00 	teq	r2, #0
 8000c70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c74:	bf06      	itte	eq
 8000c76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c7a:	3201      	addeq	r2, #1
 8000c7c:	3b01      	subne	r3, #1
 8000c7e:	e7b5      	b.n	8000bec <__addsf3+0x58>
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d021      	beq.n	8000cd4 <__addsf3+0x140>
 8000c90:	ea92 0f03 	teq	r2, r3
 8000c94:	d004      	beq.n	8000ca0 <__addsf3+0x10c>
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	4608      	moveq	r0, r1
 8000c9e:	4770      	bx	lr
 8000ca0:	ea90 0f01 	teq	r0, r1
 8000ca4:	bf1c      	itt	ne
 8000ca6:	2000      	movne	r0, #0
 8000ca8:	4770      	bxne	lr
 8000caa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cae:	d104      	bne.n	8000cba <__addsf3+0x126>
 8000cb0:	0040      	lsls	r0, r0, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb8:	4770      	bx	lr
 8000cba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cbe:	bf3c      	itt	cc
 8000cc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bxcc	lr
 8000cc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd2:	4770      	bx	lr
 8000cd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd8:	bf16      	itet	ne
 8000cda:	4608      	movne	r0, r1
 8000cdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce0:	4601      	movne	r1, r0
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	bf06      	itte	eq
 8000ce6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cea:	ea90 0f01 	teqeq	r0, r1
 8000cee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_ui2f>:
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e004      	b.n	8000d04 <__aeabi_i2f+0x8>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_i2f>:
 8000cfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d00:	bf48      	it	mi
 8000d02:	4240      	negmi	r0, r0
 8000d04:	ea5f 0c00 	movs.w	ip, r0
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d10:	4601      	mov	r1, r0
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	e01c      	b.n	8000d52 <__aeabi_l2f+0x2a>

08000d18 <__aeabi_ul2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e00a      	b.n	8000d3c <__aeabi_l2f+0x14>
 8000d26:	bf00      	nop

08000d28 <__aeabi_l2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__aeabi_l2f+0x14>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	ea5f 0c01 	movs.w	ip, r1
 8000d40:	bf02      	ittt	eq
 8000d42:	4684      	moveq	ip, r0
 8000d44:	4601      	moveq	r1, r0
 8000d46:	2000      	moveq	r0, #0
 8000d48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d4c:	bf08      	it	eq
 8000d4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d56:	fabc f28c 	clz	r2, ip
 8000d5a:	3a08      	subs	r2, #8
 8000d5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d60:	db10      	blt.n	8000d84 <__aeabi_l2f+0x5c>
 8000d62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d66:	4463      	add	r3, ip
 8000d68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	f020 0001 	biceq.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	f102 0220 	add.w	r2, r2, #32
 8000d88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d94:	fa21 f202 	lsr.w	r2, r1, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_fmul>:
 8000da4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dac:	bf1e      	ittt	ne
 8000dae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000db2:	ea92 0f0c 	teqne	r2, ip
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d06f      	beq.n	8000e9c <__aeabi_fmul+0xf8>
 8000dbc:	441a      	add	r2, r3
 8000dbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc2:	0240      	lsls	r0, r0, #9
 8000dc4:	bf18      	it	ne
 8000dc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dca:	d01e      	beq.n	8000e0a <__aeabi_fmul+0x66>
 8000dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ddc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000de4:	bf3e      	ittt	cc
 8000de6:	0049      	lslcc	r1, r1, #1
 8000de8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	ea40 0001 	orr.w	r0, r0, r1
 8000df2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000df6:	2afd      	cmp	r2, #253	; 0xfd
 8000df8:	d81d      	bhi.n	8000e36 <__aeabi_fmul+0x92>
 8000dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e02:	bf08      	it	eq
 8000e04:	f020 0001 	biceq.w	r0, r0, #1
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e12:	bf08      	it	eq
 8000e14:	0249      	lsleq	r1, r1, #9
 8000e16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e1e:	3a7f      	subs	r2, #127	; 0x7f
 8000e20:	bfc2      	ittt	gt
 8000e22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2a:	4770      	bxgt	lr
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	3a01      	subs	r2, #1
 8000e36:	dc5d      	bgt.n	8000ef4 <__aeabi_fmul+0x150>
 8000e38:	f112 0f19 	cmn.w	r2, #25
 8000e3c:	bfdc      	itt	le
 8000e3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e42:	4770      	bxle	lr
 8000e44:	f1c2 0200 	rsb	r2, r2, #0
 8000e48:	0041      	lsls	r1, r0, #1
 8000e4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e4e:	f1c2 0220 	rsb	r2, r2, #32
 8000e52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e5a:	f140 0000 	adc.w	r0, r0, #0
 8000e5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e62:	bf08      	it	eq
 8000e64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e68:	4770      	bx	lr
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fmul+0xce>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xe6>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e78f      	b.n	8000dbc <__aeabi_fmul+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	bf18      	it	ne
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d00a      	beq.n	8000ec2 <__aeabi_fmul+0x11e>
 8000eac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb0:	bf18      	it	ne
 8000eb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eb6:	d1d8      	bne.n	8000e6a <__aeabi_fmul+0xc6>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	bf17      	itett	ne
 8000ec8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ecc:	4608      	moveq	r0, r1
 8000ece:	f091 0f00 	teqne	r1, #0
 8000ed2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ed6:	d014      	beq.n	8000f02 <__aeabi_fmul+0x15e>
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d101      	bne.n	8000ee2 <__aeabi_fmul+0x13e>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	d10f      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ee2:	ea93 0f0c 	teq	r3, ip
 8000ee6:	d103      	bne.n	8000ef0 <__aeabi_fmul+0x14c>
 8000ee8:	024b      	lsls	r3, r1, #9
 8000eea:	bf18      	it	ne
 8000eec:	4608      	movne	r0, r1
 8000eee:	d108      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ef0:	ea80 0001 	eor.w	r0, r0, r1
 8000ef4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f00:	4770      	bx	lr
 8000f02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_fdiv>:
 8000f0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f14:	bf1e      	ittt	ne
 8000f16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f1a:	ea92 0f0c 	teqne	r2, ip
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d069      	beq.n	8000ff8 <__aeabi_fdiv+0xec>
 8000f24:	eba2 0203 	sub.w	r2, r2, r3
 8000f28:	ea80 0c01 	eor.w	ip, r0, r1
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f32:	d037      	beq.n	8000fa4 <__aeabi_fdiv+0x98>
 8000f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f44:	428b      	cmp	r3, r1
 8000f46:	bf38      	it	cc
 8000f48:	005b      	lslcc	r3, r3, #1
 8000f4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f52:	428b      	cmp	r3, r1
 8000f54:	bf24      	itt	cs
 8000f56:	1a5b      	subcs	r3, r3, r1
 8000f58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f6e:	bf24      	itt	cs
 8000f70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f7c:	bf24      	itt	cs
 8000f7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	bf18      	it	ne
 8000f8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f8e:	d1e0      	bne.n	8000f52 <__aeabi_fdiv+0x46>
 8000f90:	2afd      	cmp	r2, #253	; 0xfd
 8000f92:	f63f af50 	bhi.w	8000e36 <__aeabi_fmul+0x92>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fa8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fac:	327f      	adds	r2, #127	; 0x7f
 8000fae:	bfc2      	ittt	gt
 8000fb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb8:	4770      	bxgt	lr
 8000fba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	e737      	b.n	8000e36 <__aeabi_fmul+0x92>
 8000fc6:	f092 0f00 	teq	r2, #0
 8000fca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fce:	bf02      	ittt	eq
 8000fd0:	0040      	lsleq	r0, r0, #1
 8000fd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fd6:	3a01      	subeq	r2, #1
 8000fd8:	d0f9      	beq.n	8000fce <__aeabi_fdiv+0xc2>
 8000fda:	ea40 000c 	orr.w	r0, r0, ip
 8000fde:	f093 0f00 	teq	r3, #0
 8000fe2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0049      	lsleq	r1, r1, #1
 8000fea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fee:	3b01      	subeq	r3, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xda>
 8000ff2:	ea41 010c 	orr.w	r1, r1, ip
 8000ff6:	e795      	b.n	8000f24 <__aeabi_fdiv+0x18>
 8000ff8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ffc:	ea92 0f0c 	teq	r2, ip
 8001000:	d108      	bne.n	8001014 <__aeabi_fdiv+0x108>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	f47f af7d 	bne.w	8000f02 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	f47f af70 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001010:	4608      	mov	r0, r1
 8001012:	e776      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001014:	ea93 0f0c 	teq	r3, ip
 8001018:	d104      	bne.n	8001024 <__aeabi_fdiv+0x118>
 800101a:	024b      	lsls	r3, r1, #9
 800101c:	f43f af4c 	beq.w	8000eb8 <__aeabi_fmul+0x114>
 8001020:	4608      	mov	r0, r1
 8001022:	e76e      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001024:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001028:	bf18      	it	ne
 800102a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800102e:	d1ca      	bne.n	8000fc6 <__aeabi_fdiv+0xba>
 8001030:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001034:	f47f af5c 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001038:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800103c:	f47f af3c 	bne.w	8000eb8 <__aeabi_fmul+0x114>
 8001040:	e75f      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001042:	bf00      	nop

08001044 <__aeabi_f2iz>:
 8001044:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800104c:	d30f      	bcc.n	800106e <__aeabi_f2iz+0x2a>
 800104e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d90d      	bls.n	8001074 <__aeabi_f2iz+0x30>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001060:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001064:	fa23 f002 	lsr.w	r0, r3, r2
 8001068:	bf18      	it	ne
 800106a:	4240      	negne	r0, r0
 800106c:	4770      	bx	lr
 800106e:	f04f 0000 	mov.w	r0, #0
 8001072:	4770      	bx	lr
 8001074:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001078:	d101      	bne.n	800107e <__aeabi_f2iz+0x3a>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	d105      	bne.n	800108a <__aeabi_f2iz+0x46>
 800107e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001082:	bf08      	it	eq
 8001084:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr

08001090 <__aeabi_d2lz>:
 8001090:	b538      	push	{r3, r4, r5, lr}
 8001092:	4605      	mov	r5, r0
 8001094:	460c      	mov	r4, r1
 8001096:	2200      	movs	r2, #0
 8001098:	2300      	movs	r3, #0
 800109a:	4628      	mov	r0, r5
 800109c:	4621      	mov	r1, r4
 800109e:	f7ff fc9d 	bl	80009dc <__aeabi_dcmplt>
 80010a2:	b928      	cbnz	r0, 80010b0 <__aeabi_d2lz+0x20>
 80010a4:	4628      	mov	r0, r5
 80010a6:	4621      	mov	r1, r4
 80010a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010ac:	f000 b80a 	b.w	80010c4 <__aeabi_d2ulz>
 80010b0:	4628      	mov	r0, r5
 80010b2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010b6:	f000 f805 	bl	80010c4 <__aeabi_d2ulz>
 80010ba:	4240      	negs	r0, r0
 80010bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010c0:	bd38      	pop	{r3, r4, r5, pc}
 80010c2:	bf00      	nop

080010c4 <__aeabi_d2ulz>:
 80010c4:	b5d0      	push	{r4, r6, r7, lr}
 80010c6:	2200      	movs	r2, #0
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <__aeabi_d2ulz+0x34>)
 80010ca:	4606      	mov	r6, r0
 80010cc:	460f      	mov	r7, r1
 80010ce:	f7ff fa13 	bl	80004f8 <__aeabi_dmul>
 80010d2:	f7ff fce9 	bl	8000aa8 <__aeabi_d2uiz>
 80010d6:	4604      	mov	r4, r0
 80010d8:	f7ff f994 	bl	8000404 <__aeabi_ui2d>
 80010dc:	2200      	movs	r2, #0
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <__aeabi_d2ulz+0x38>)
 80010e0:	f7ff fa0a 	bl	80004f8 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4630      	mov	r0, r6
 80010ea:	4639      	mov	r1, r7
 80010ec:	f7ff f84c 	bl	8000188 <__aeabi_dsub>
 80010f0:	f7ff fcda 	bl	8000aa8 <__aeabi_d2uiz>
 80010f4:	4621      	mov	r1, r4
 80010f6:	bdd0      	pop	{r4, r6, r7, pc}
 80010f8:	3df00000 	.word	0x3df00000
 80010fc:	41f00000 	.word	0x41f00000

08001100 <USER_ADC_Init>:
#include "GPIO.h"

// Initialize ADC

void USER_ADC_Init( uint8_t ADC )
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  RCC->CFGR	|=	RCC_CFGR_ADCPRE;       		// Adjust ADC input clock
 800110a:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <USER_ADC_Init+0xb8>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a2a      	ldr	r2, [pc, #168]	; (80011b8 <USER_ADC_Init+0xb8>)
 8001110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001114:	6053      	str	r3, [r2, #4]
  USER_GPIO_Define(PORTA, 0, INP, INP_AN);		// Pin PA0 as analog input
 8001116:	2300      	movs	r3, #0
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	2000      	movs	r0, #0
 800111e:	f000 fff1 	bl	8002104 <USER_GPIO_Define>

  if( ADC == 0 )
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d142      	bne.n	80011ae <USER_ADC_Init+0xae>
  {
    RCC->APB2ENR	|=	RCC_APB2ENR_ADC1EN;	// ADC1 clock enable
 8001128:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <USER_ADC_Init+0xb8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a22      	ldr	r2, [pc, #136]	; (80011b8 <USER_ADC_Init+0xb8>)
 800112e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001132:	6193      	str	r3, [r2, #24]

    ADC1->CR1		&=	~(ADC_CR1_DUALMOD);	// Step 1 - Select independent mode
 8001134:	4b21      	ldr	r3, [pc, #132]	; (80011bc <USER_ADC_Init+0xbc>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	4a20      	ldr	r2, [pc, #128]	; (80011bc <USER_ADC_Init+0xbc>)
 800113a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800113e:	6053      	str	r3, [r2, #4]
    ADC1->CR2		|=	ADC_CR2_CONT;		// Step 2 - Select conversion mode
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <USER_ADC_Init+0xbc>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <USER_ADC_Init+0xbc>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	6093      	str	r3, [r2, #8]
    ADC1->CR2		&= 	~(ADC_CR2_ALIGN);	//	and format for ADC result
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <USER_ADC_Init+0xbc>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	4a1a      	ldr	r2, [pc, #104]	; (80011bc <USER_ADC_Init+0xbc>)
 8001152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001156:	6093      	str	r3, [r2, #8]
    ADC1->SMPR2		&= 	~(ADC_SMPR2_SMP0);	// Step 3 - Select the sample time for the
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <USER_ADC_Init+0xbc>)
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <USER_ADC_Init+0xbc>)
 800115e:	f023 0307 	bic.w	r3, r3, #7
 8001162:	6113      	str	r3, [r2, #16]
							//	ADC channel
    ADC1->SQR1		&= 	~(ADC_SQR1_L);		// Step 4 - Select the sequence and number of
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <USER_ADC_Init+0xbc>)
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <USER_ADC_Init+0xbc>)
 800116a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800116e:	62d3      	str	r3, [r2, #44]	; 0x2c
							//	conversions for the ADC regular channels
    ADC1->SQR3		&= 	~(ADC_SQR3_SQ1);	// Step 5 - Select the channel for the first ADC
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <USER_ADC_Init+0xbc>)
 8001172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001174:	4a11      	ldr	r2, [pc, #68]	; (80011bc <USER_ADC_Init+0xbc>)
 8001176:	f023 031f 	bic.w	r3, r3, #31
 800117a:	6353      	str	r3, [r2, #52]	; 0x34
							//	conversion
    ADC1->CR2		|=	ADC_CR2_ADON;		// Step 6 - Enable the ADC module
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <USER_ADC_Init+0xbc>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <USER_ADC_Init+0xbc>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6093      	str	r3, [r2, #8]
    ADC1->CR2		|=	ADC_CR2_CAL;		// Step 7 - Perform a calibration after
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <USER_ADC_Init+0xbc>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <USER_ADC_Init+0xbc>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6093      	str	r3, [r2, #8]
							// 	each power-up
    while ( ADC1->CR2 & ADC_CR2_CAL );			// Step 8 - Wait until the bit is reset by
 8001194:	bf00      	nop
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <USER_ADC_Init+0xbc>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f9      	bne.n	8001196 <USER_ADC_Init+0x96>
							//	hardware after calibration is complete
    ADC1->CR2		|=	ADC_CR2_ADON;		// Step 9 - Start conversion
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <USER_ADC_Init+0xbc>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <USER_ADC_Init+0xbc>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6093      	str	r3, [r2, #8]
  }
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40012400 	.word	0x40012400

080011c0 <USER_ADC_Convert>:

// Convert Analog value to Digital using ADC

uint16_t USER_ADC_Convert( uint8_t ADC )
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if( ADC == 0 )
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d10a      	bne.n	80011e6 <USER_ADC_Convert+0x26>
  {
    while( !( ADC1->SR & ADC_SR_EOC ) );		// Wait for end of conversion
 80011d0:	bf00      	nop
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <USER_ADC_Convert+0x34>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f9      	beq.n	80011d2 <USER_ADC_Convert+0x12>
    return ADC1->DR;
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <USER_ADC_Convert+0x34>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	e000      	b.n	80011e8 <USER_ADC_Convert+0x28>
  }

  return 0;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40012400 	.word	0x40012400

080011f8 <scaleVoltageValue>:

// Scale ADC read voltage value to a range of 0 to 100

float scaleVoltageValue( float voltageValue, float min, float max )
{ 
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  float normalizedVoltageValue = (voltageValue - min) / (max - min) * 100;
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff fcc2 	bl	8000b90 <__aeabi_fsub>
 800120c:	4603      	mov	r3, r0
 800120e:	461c      	mov	r4, r3
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fcbc 	bl	8000b90 <__aeabi_fsub>
 8001218:	4603      	mov	r3, r0
 800121a:	4619      	mov	r1, r3
 800121c:	4620      	mov	r0, r4
 800121e:	f7ff fe75 	bl	8000f0c <__aeabi_fdiv>
 8001222:	4603      	mov	r3, r0
 8001224:	4905      	ldr	r1, [pc, #20]	; (800123c <scaleVoltageValue+0x44>)
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fdbc 	bl	8000da4 <__aeabi_fmul>
 800122c:	4603      	mov	r3, r0
 800122e:	617b      	str	r3, [r7, #20]
  return normalizedVoltageValue;
 8001230:	697b      	ldr	r3, [r7, #20]
}
 8001232:	4618      	mov	r0, r3
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd90      	pop	{r4, r7, pc}
 800123a:	bf00      	nop
 800123c:	42c80000 	.word	0x42c80000

08001240 <look2_binlxpw>:
/* Forward declaration for local functions */
static void EngTrModel_gear_state(const int32_T *sfEvent);
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b092      	sub	sp, #72	; 0x48
 8001244:	af00      	add	r7, sp, #0
 8001246:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800124a:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 800124e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001258:	f7ff fbca 	bl	80009f0 <__aeabi_dcmple>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d020      	beq.n	80012a4 <look2_binlxpw+0x64>
    iLeft = 0U;
 8001262:	2300      	movs	r3, #0
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8001266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001270:	f7fe ff8a 	bl	8000188 <__aeabi_dsub>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4614      	mov	r4, r2
 800127a:	461d      	mov	r5, r3
 800127c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800127e:	3308      	adds	r3, #8
 8001280:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7fe ff7d 	bl	8000188 <__aeabi_dsub>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4620      	mov	r0, r4
 8001294:	4629      	mov	r1, r5
 8001296:	f7ff fa59 	bl	800074c <__aeabi_ddiv>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80012a2:	e08e      	b.n	80013c2 <look2_binlxpw+0x182>
  } else if (u0 < bp0[maxIndex[0U]]) {
 80012a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012ac:	4413      	add	r3, r2
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012b6:	f7ff fb91 	bl	80009dc <__aeabi_dcmplt>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d04d      	beq.n	800135c <look2_binlxpw+0x11c>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 80012c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	085b      	lsrs	r3, r3, #1
 80012c6:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[0U];
 80012cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 80012d2:	e016      	b.n	8001302 <look2_binlxpw+0xc2>
      if (u0 < bp0[bpIdx]) {
 80012d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012da:	4413      	add	r3, r2
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012e4:	f7ff fb7a 	bl	80009dc <__aeabi_dcmplt>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <look2_binlxpw+0xb4>
        iRght = bpIdx;
 80012ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012f2:	e001      	b.n	80012f8 <look2_binlxpw+0xb8>
      } else {
        iLeft = bpIdx;
 80012f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80012f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fc:	4413      	add	r3, r2
 80012fe:	085b      	lsrs	r3, r3, #1
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 8001302:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b01      	cmp	r3, #1
 800130a:	d8e3      	bhi.n	80012d4 <look2_binlxpw+0x94>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 800130c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001312:	4413      	add	r3, r2
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800131c:	f7fe ff34 	bl	8000188 <__aeabi_dsub>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4614      	mov	r4, r2
 8001326:	461d      	mov	r5, r3
 8001328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132a:	3301      	adds	r3, #1
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001330:	4413      	add	r3, r2
 8001332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800133c:	4413      	add	r3, r2
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7fe ff21 	bl	8000188 <__aeabi_dsub>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4620      	mov	r0, r4
 800134c:	4629      	mov	r1, r5
 800134e:	f7ff f9fd 	bl	800074c <__aeabi_ddiv>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800135a:	e032      	b.n	80013c2 <look2_binlxpw+0x182>
  } else {
    iLeft = maxIndex[0U] - 1U;
 800135c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 8001364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800136c:	3b01      	subs	r3, #1
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001372:	4413      	add	r3, r2
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800137c:	f7fe ff04 	bl	8000188 <__aeabi_dsub>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4614      	mov	r4, r2
 8001386:	461d      	mov	r5, r3
 8001388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001390:	4413      	add	r3, r2
 8001392:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800139e:	3b01      	subs	r3, #1
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013a4:	4413      	add	r3, r2
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7fe feed 	bl	8000188 <__aeabi_dsub>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4620      	mov	r0, r4
 80013b4:	4629      	mov	r1, r5
 80013b6:	f7ff f9c9 	bl	800074c <__aeabi_ddiv>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 80013c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 80013ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013cc:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 80013ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013d8:	f7ff fb0a 	bl	80009f0 <__aeabi_dcmple>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d020      	beq.n	8001424 <look2_binlxpw+0x1e4>
    iLeft = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 80013e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013f0:	f7fe feca 	bl	8000188 <__aeabi_dsub>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4614      	mov	r4, r2
 80013fa:	461d      	mov	r5, r3
 80013fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fe:	3308      	adds	r3, #8
 8001400:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7fe febd 	bl	8000188 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4620      	mov	r0, r4
 8001414:	4629      	mov	r1, r5
 8001416:	f7ff f999 	bl	800074c <__aeabi_ddiv>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001422:	e095      	b.n	8001550 <look2_binlxpw+0x310>
  } else if (u1 < bp1[maxIndex[1U]]) {
 8001424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001426:	3304      	adds	r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800142e:	4413      	add	r3, r2
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001438:	f7ff fad0 	bl	80009dc <__aeabi_dcmplt>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d04f      	beq.n	80014e2 <look2_binlxpw+0x2a2>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 8001442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001444:	3304      	adds	r3, #4
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[1U];
 8001450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001452:	3304      	adds	r3, #4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 8001458:	e016      	b.n	8001488 <look2_binlxpw+0x248>
      if (u1 < bp1[bpIdx]) {
 800145a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001460:	4413      	add	r3, r2
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	e9d7 0100 	ldrd	r0, r1, [r7]
 800146a:	f7ff fab7 	bl	80009dc <__aeabi_dcmplt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <look2_binlxpw+0x23a>
        iRght = bpIdx;
 8001474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001478:	e001      	b.n	800147e <look2_binlxpw+0x23e>
      } else {
        iLeft = bpIdx;
 800147a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 800147e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001482:	4413      	add	r3, r2
 8001484:	085b      	lsrs	r3, r3, #1
 8001486:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 8001488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800148a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b01      	cmp	r3, #1
 8001490:	d8e3      	bhi.n	800145a <look2_binlxpw+0x21a>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 8001492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001498:	4413      	add	r3, r2
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014a2:	f7fe fe71 	bl	8000188 <__aeabi_dsub>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4614      	mov	r4, r2
 80014ac:	461d      	mov	r5, r3
 80014ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b0:	3301      	adds	r3, #1
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014b6:	4413      	add	r3, r2
 80014b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014c2:	4413      	add	r3, r2
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7fe fe5e 	bl	8000188 <__aeabi_dsub>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7ff f93a 	bl	800074c <__aeabi_ddiv>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80014e0:	e036      	b.n	8001550 <look2_binlxpw+0x310>
  } else {
    iLeft = maxIndex[1U] - 1U;
 80014e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014e4:	3304      	adds	r3, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 80014ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ee:	3304      	adds	r3, #4
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80014f6:	3b01      	subs	r3, #1
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014fc:	4413      	add	r3, r2
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001506:	f7fe fe3f 	bl	8000188 <__aeabi_dsub>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4614      	mov	r4, r2
 8001510:	461d      	mov	r5, r3
 8001512:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001514:	3304      	adds	r3, #4
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800151c:	4413      	add	r3, r2
 800151e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001524:	3304      	adds	r3, #4
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800152c:	3b01      	subs	r3, #1
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001532:	4413      	add	r3, r2
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7fe fe26 	bl	8000188 <__aeabi_dsub>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7ff f902 	bl	800074c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 8001550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001552:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001554:	fb03 f202 	mul.w	r2, r3, r2
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	4413      	add	r3, r2
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 800155e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001560:	3301      	adds	r3, #1
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001566:	4413      	add	r3, r2
 8001568:	e9d3 0100 	ldrd	r0, r1, [r3]
 800156c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001572:	4413      	add	r3, r2
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7fe fe06 	bl	8000188 <__aeabi_dsub>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001588:	f7fe ffb6 	bl	80004f8 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800159a:	4413      	add	r3, r2
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7fe fdf4 	bl	800018c <__adddf3>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  bpIdx += stride;
 80015ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015b0:	4413      	add	r3, r2
 80015b2:	63bb      	str	r3, [r7, #56]	; 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 80015b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b6:	3301      	adds	r3, #1
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015bc:	4413      	add	r3, r2
 80015be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015c8:	4413      	add	r3, r2
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7fe fddb 	bl	8000188 <__aeabi_dsub>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015de:	f7fe ff8b 	bl	80004f8 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015f0:	4413      	add	r3, r2
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7fe fdc9 	bl	800018c <__adddf3>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001606:	f7fe fdbf 	bl	8000188 <__aeabi_dsub>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
          yL_1d) * frac + yL_1d;
 8001612:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001616:	f7fe ff6f 	bl	80004f8 <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001626:	f7fe fdb1 	bl	800018c <__adddf3>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
}
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	3748      	adds	r7, #72	; 0x48
 8001634:	46bd      	mov	sp, r7
 8001636:	bdb0      	pop	{r4, r5, r7, pc}

08001638 <look1_binlxpw>:

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001650:	f7ff f9ce 	bl	80009f0 <__aeabi_dcmple>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d020      	beq.n	800169c <look1_binlxpw+0x64>
    iLeft = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001668:	f7fe fd8e 	bl	8000188 <__aeabi_dsub>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4614      	mov	r4, r2
 8001672:	461d      	mov	r5, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3308      	adds	r3, #8
 8001678:	e9d3 0100 	ldrd	r0, r1, [r3]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe fd81 	bl	8000188 <__aeabi_dsub>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4620      	mov	r0, r4
 800168c:	4629      	mov	r1, r5
 800168e:	f7ff f85d 	bl	800074c <__aeabi_ddiv>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800169a:	e087      	b.n	80017ac <look1_binlxpw+0x174>
  } else if (u0 < bp0[maxIndex]) {
 800169c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4413      	add	r3, r2
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ac:	f7ff f996 	bl	80009dc <__aeabi_dcmplt>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d04b      	beq.n	800174e <look1_binlxpw+0x116>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 80016b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 80016c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016c2:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 80016c4:	e016      	b.n	80016f4 <look1_binlxpw+0xbc>
      if (u0 < bp0[bpIdx]) {
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016d6:	f7ff f981 	bl	80009dc <__aeabi_dcmplt>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <look1_binlxpw+0xae>
        iRght = bpIdx;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	e001      	b.n	80016ea <look1_binlxpw+0xb2>
      } else {
        iLeft = bpIdx;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	4413      	add	r3, r2
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
    while (iRght - iLeft > 1U) {
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d8e3      	bhi.n	80016c6 <look1_binlxpw+0x8e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800170e:	f7fe fd3b 	bl	8000188 <__aeabi_dsub>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4614      	mov	r4, r2
 8001718:	461d      	mov	r5, r3
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	3301      	adds	r3, #1
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7fe fd28 	bl	8000188 <__aeabi_dsub>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4620      	mov	r0, r4
 800173e:	4629      	mov	r1, r5
 8001740:	f7ff f804 	bl	800074c <__aeabi_ddiv>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800174c:	e02e      	b.n	80017ac <look1_binlxpw+0x174>
  } else {
    iLeft = maxIndex - 1U;
 800174e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001750:	3b01      	subs	r3, #1
 8001752:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8001754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001756:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800175a:	3b01      	subs	r3, #1
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800176a:	f7fe fd0d 	bl	8000188 <__aeabi_dsub>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4614      	mov	r4, r2
 8001774:	461d      	mov	r5, r3
 8001776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001784:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001788:	3b01      	subs	r3, #1
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe fcf8 	bl	8000188 <__aeabi_dsub>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe ffd4 	bl	800074c <__aeabi_ddiv>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	3301      	adds	r3, #1
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7fe fcdf 	bl	8000188 <__aeabi_dsub>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017d6:	f7fe fe8f 	bl	80004f8 <__aeabi_dmul>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe fccd 	bl	800018c <__adddf3>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
}
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	3728      	adds	r7, #40	; 0x28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bdb0      	pop	{r4, r5, r7, pc}

08001800 <EngTrModel_gear_state>:

/* Function for Chart: '<Root>/ShiftLogic' */
static void EngTrModel_gear_state(const int32_T *sfEvent)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  switch (EngTrModel_DW.is_gear_state) {
 8001808:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <EngTrModel_gear_state+0xf8>)
 800180a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800180e:	3b01      	subs	r3, #1
 8001810:	2b03      	cmp	r3, #3
 8001812:	d86c      	bhi.n	80018ee <EngTrModel_gear_state+0xee>
 8001814:	a201      	add	r2, pc, #4	; (adr r2, 800181c <EngTrModel_gear_state+0x1c>)
 8001816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181a:	bf00      	nop
 800181c:	0800182d 	.word	0x0800182d
 8001820:	0800184d 	.word	0x0800184d
 8001824:	0800186b 	.word	0x0800186b
 8001828:	080018a5 	.word	0x080018a5
   case EngTrModel_IN_first:
    if (*sfEvent == EngTrModel_event_UP) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d155      	bne.n	80018e0 <EngTrModel_gear_state+0xe0>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 8001834:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <EngTrModel_gear_state+0xf8>)
 8001836:	2203      	movs	r2, #3
 8001838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 800183c:	492f      	ldr	r1, [pc, #188]	; (80018fc <EngTrModel_gear_state+0xfc>)
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001846:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 800184a:	e049      	b.n	80018e0 <EngTrModel_gear_state+0xe0>

   case EngTrModel_IN_fourth:
    if (*sfEvent == EngTrModel_event_DOWN) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d147      	bne.n	80018e4 <EngTrModel_gear_state+0xe4>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 8001854:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <EngTrModel_gear_state+0xf8>)
 8001856:	2204      	movs	r2, #4
 8001858:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 800185c:	4927      	ldr	r1, [pc, #156]	; (80018fc <EngTrModel_gear_state+0xfc>)
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <EngTrModel_gear_state+0x100>)
 8001864:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 8001868:	e03c      	b.n	80018e4 <EngTrModel_gear_state+0xe4>

   case EngTrModel_IN_second:
    switch (*sfEvent) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00c      	beq.n	800188c <EngTrModel_gear_state+0x8c>
 8001872:	2b01      	cmp	r3, #1
 8001874:	d138      	bne.n	80018e8 <EngTrModel_gear_state+0xe8>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <EngTrModel_gear_state+0xf8>)
 8001878:	2204      	movs	r2, #4
 800187a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 800187e:	491f      	ldr	r1, [pc, #124]	; (80018fc <EngTrModel_gear_state+0xfc>)
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <EngTrModel_gear_state+0x100>)
 8001886:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 800188a:	e00a      	b.n	80018a2 <EngTrModel_gear_state+0xa2>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <EngTrModel_gear_state+0xf8>)
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 1.0;
 8001894:	4919      	ldr	r1, [pc, #100]	; (80018fc <EngTrModel_gear_state+0xfc>)
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <EngTrModel_gear_state+0x104>)
 800189c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80018a0:	bf00      	nop
    }
    break;
 80018a2:	e021      	b.n	80018e8 <EngTrModel_gear_state+0xe8>

   case EngTrModel_IN_third:
    switch (*sfEvent) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00c      	beq.n	80018c6 <EngTrModel_gear_state+0xc6>
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d11d      	bne.n	80018ec <EngTrModel_gear_state+0xec>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_fourth;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <EngTrModel_gear_state+0xf8>)
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 4.0;
 80018b8:	4910      	ldr	r1, [pc, #64]	; (80018fc <EngTrModel_gear_state+0xfc>)
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <EngTrModel_gear_state+0x108>)
 80018c0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80018c4:	e00b      	b.n	80018de <EngTrModel_gear_state+0xde>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <EngTrModel_gear_state+0xf8>)
 80018c8:	2203      	movs	r2, #3
 80018ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 80018ce:	490b      	ldr	r1, [pc, #44]	; (80018fc <EngTrModel_gear_state+0xfc>)
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80018dc:	bf00      	nop
    }
    break;
 80018de:	e005      	b.n	80018ec <EngTrModel_gear_state+0xec>
    break;
 80018e0:	bf00      	nop
 80018e2:	e004      	b.n	80018ee <EngTrModel_gear_state+0xee>
    break;
 80018e4:	bf00      	nop
 80018e6:	e002      	b.n	80018ee <EngTrModel_gear_state+0xee>
    break;
 80018e8:	bf00      	nop
 80018ea:	e000      	b.n	80018ee <EngTrModel_gear_state+0xee>
    break;
 80018ec:	bf00      	nop
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	20000250 	.word	0x20000250
 80018fc:	20000220 	.word	0x20000220
 8001900:	40080000 	.word	0x40080000
 8001904:	3ff00000 	.word	0x3ff00000
 8001908:	40100000 	.word	0x40100000

0800190c <rt_powd_snf>:

real_T rt_powd_snf(real_T u0, real_T u1)
{
 800190c:	b5b0      	push	{r4, r5, r7, lr}
 800190e:	b08c      	sub	sp, #48	; 0x30
 8001910:	af00      	add	r7, sp, #0
 8001912:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001916:	e9c7 2302 	strd	r2, r3, [r7, #8]
  real_T y;
  real_T tmp;
  real_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 800191a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800191e:	f002 fedf 	bl	80046e0 <rtIsNaN>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d106      	bne.n	8001936 <rt_powd_snf+0x2a>
 8001928:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800192c:	f002 fed8 	bl	80046e0 <rtIsNaN>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d005      	beq.n	8001942 <rt_powd_snf+0x36>
    y = (rtNaN);
 8001936:	4b7e      	ldr	r3, [pc, #504]	; (8001b30 <rt_powd_snf+0x224>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001940:	e0ef      	b.n	8001b22 <rt_powd_snf+0x216>
  } else {
    tmp = fabs(u0);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001952:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp_0 = fabs(u1);
 8001956:	68bc      	ldr	r4, [r7, #8]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800195e:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 8001962:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001966:	f002 fe97 	bl	8004698 <rtIsInf>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d049      	beq.n	8001a04 <rt_powd_snf+0xf8>
      if (tmp == 1.0) {
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	4b6f      	ldr	r3, [pc, #444]	; (8001b34 <rt_powd_snf+0x228>)
 8001976:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800197a:	f7ff f825 	bl	80009c8 <__aeabi_dcmpeq>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <rt_powd_snf+0x84>
        y = 1.0;
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	4b6a      	ldr	r3, [pc, #424]	; (8001b34 <rt_powd_snf+0x228>)
 800198a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800198e:	e0c8      	b.n	8001b22 <rt_powd_snf+0x216>
      } else if (tmp > 1.0) {
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <rt_powd_snf+0x228>)
 8001996:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800199a:	f7ff f83d 	bl	8000a18 <__aeabi_dcmpgt>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d017      	beq.n	80019d4 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019b0:	f7ff f832 	bl	8000a18 <__aeabi_dcmpgt>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <rt_powd_snf+0xba>
          y = (rtInf);
 80019ba:	4b5f      	ldr	r3, [pc, #380]	; (8001b38 <rt_powd_snf+0x22c>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019c4:	e0ad      	b.n	8001b22 <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019d2:	e0a6      	b.n	8001b22 <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019e0:	f7ff f81a 	bl	8000a18 <__aeabi_dcmpgt>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d006      	beq.n	80019f8 <rt_powd_snf+0xec>
        y = 0.0;
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019f6:	e094      	b.n	8001b22 <rt_powd_snf+0x216>
      } else {
        y = (rtInf);
 80019f8:	4b4f      	ldr	r3, [pc, #316]	; (8001b38 <rt_powd_snf+0x22c>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a02:	e08e      	b.n	8001b22 <rt_powd_snf+0x216>
      }
    } else if (tmp_0 == 0.0) {
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a10:	f7fe ffda 	bl	80009c8 <__aeabi_dcmpeq>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <rt_powd_snf+0x11a>
      y = 1.0;
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b45      	ldr	r3, [pc, #276]	; (8001b34 <rt_powd_snf+0x228>)
 8001a20:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a24:	e07d      	b.n	8001b22 <rt_powd_snf+0x216>
    } else if (tmp_0 == 1.0) {
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4b42      	ldr	r3, [pc, #264]	; (8001b34 <rt_powd_snf+0x228>)
 8001a2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a30:	f7fe ffca 	bl	80009c8 <__aeabi_dcmpeq>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01b      	beq.n	8001a72 <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a46:	f7fe ffe7 	bl	8000a18 <__aeabi_dcmpgt>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d004      	beq.n	8001a5a <rt_powd_snf+0x14e>
        y = u0;
 8001a50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a54:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a58:	e063      	b.n	8001b22 <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8001a5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a5e:	f04f 0000 	mov.w	r0, #0
 8001a62:	4934      	ldr	r1, [pc, #208]	; (8001b34 <rt_powd_snf+0x228>)
 8001a64:	f7fe fe72 	bl	800074c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a70:	e057      	b.n	8001b22 <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a7e:	f7fe ffa3 	bl	80009c8 <__aeabi_dcmpeq>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00a      	beq.n	8001a9e <rt_powd_snf+0x192>
      y = u0 * u0;
 8001a88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a90:	f7fe fd32 	bl	80004f8 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a9c:	e041      	b.n	8001b22 <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <rt_powd_snf+0x230>)
 8001aa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aa8:	f7fe ff8e 	bl	80009c8 <__aeabi_dcmpeq>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d011      	beq.n	8001ad6 <rt_powd_snf+0x1ca>
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001abe:	f7fe ffa1 	bl	8000a04 <__aeabi_dcmpge>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001ac8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001acc:	f007 fbb6 	bl	800923c <sqrt>
 8001ad0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001ad4:	e025      	b.n	8001b22 <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ae2:	f7fe ff7b 	bl	80009dc <__aeabi_dcmplt>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d012      	beq.n	8001b12 <rt_powd_snf+0x206>
 8001aec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001af0:	f007 fca6 	bl	8009440 <floor>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001afc:	f7fe ff8c 	bl	8000a18 <__aeabi_dcmpgt>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <rt_powd_snf+0x206>
      y = (rtNaN);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <rt_powd_snf+0x224>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001b10:	e007      	b.n	8001b22 <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8001b12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b1a:	f007 fb27 	bl	800916c <pow>
 8001b1e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    }
  }

  return y;
 8001b22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	3730      	adds	r7, #48	; 0x30
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b30:	20000a70 	.word	0x20000a70
 8001b34:	3ff00000 	.word	0x3ff00000
 8001b38:	20000a60 	.word	0x20000a60
 8001b3c:	3fe00000 	.word	0x3fe00000

08001b40 <EngTrModel_step>:

/* Model step function */
void EngTrModel_step(void)
{
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b08c      	sub	sp, #48	; 0x30
 8001b44:	af06      	add	r7, sp, #24
  int32_T sfEvent;
  real_T InterpDown;
  real_T InterpUp;

  /* DiscreteIntegrator: '<S1>/Discrete-Time Integrator' */
  EngTrModel_B.EngineRPM = EngTrModel_DW.DiscreteTimeIntegrator_DSTATE;
 8001b46:	4b8c      	ldr	r3, [pc, #560]	; (8001d78 <EngTrModel_step+0x238>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	498b      	ldr	r1, [pc, #556]	; (8001d7c <EngTrModel_step+0x23c>)
 8001b4e:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/EngineSpeed' */
  EngTrModel_Y.EngineSpeed = EngTrModel_B.EngineRPM;
 8001b52:	4b8a      	ldr	r3, [pc, #552]	; (8001d7c <EngTrModel_step+0x23c>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	4989      	ldr	r1, [pc, #548]	; (8001d80 <EngTrModel_step+0x240>)
 8001b5a:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S8>/ToLinearSpeed'
   */
  /* Unit Conversion - from: ft/min to: mph
     Expression: output = (0.0113636*input) + (0) */
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001b5e:	4b86      	ldr	r3, [pc, #536]	; (8001d78 <EngTrModel_step+0x238>)
 8001b60:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 8001b64:	a380      	add	r3, pc, #512	; (adr r3, 8001d68 <EngTrModel_step+0x228>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fcc5 	bl	80004f8 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001b76:	a37e      	add	r3, pc, #504	; (adr r3, 8001d70 <EngTrModel_step+0x230>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	f7fe fcbc 	bl	80004f8 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 8001b84:	497d      	ldr	r1, [pc, #500]	; (8001d7c <EngTrModel_step+0x23c>)
 8001b86:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Chart: '<Root>/ShiftLogic' */
  sfEvent = EngTrModel_CALL_EVENT;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	607b      	str	r3, [r7, #4]
  if (EngTrModel_DW.temporalCounter_i1 < MAX_uint32_T) {
 8001b90:	4b79      	ldr	r3, [pc, #484]	; (8001d78 <EngTrModel_step+0x238>)
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b98:	d004      	beq.n	8001ba4 <EngTrModel_step+0x64>
    EngTrModel_DW.temporalCounter_i1++;
 8001b9a:	4b77      	ldr	r3, [pc, #476]	; (8001d78 <EngTrModel_step+0x238>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	4a75      	ldr	r2, [pc, #468]	; (8001d78 <EngTrModel_step+0x238>)
 8001ba2:	61d3      	str	r3, [r2, #28]
  }

  if (EngTrModel_DW.is_active_c1_EngTrModel == 0U) {
 8001ba4:	4b74      	ldr	r3, [pc, #464]	; (8001d78 <EngTrModel_step+0x238>)
 8001ba6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d11a      	bne.n	8001be4 <EngTrModel_step+0xa4>
    EngTrModel_DW.is_active_c1_EngTrModel = 1U;
 8001bae:	4b72      	ldr	r3, [pc, #456]	; (8001d78 <EngTrModel_step+0x238>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2020 	strb.w	r2, [r3, #32]
    EngTrModel_DW.is_active_gear_state = 1U;
 8001bb6:	4b70      	ldr	r3, [pc, #448]	; (8001d78 <EngTrModel_step+0x238>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 8001bbe:	4b6e      	ldr	r3, [pc, #440]	; (8001d78 <EngTrModel_step+0x238>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    EngTrModel_B.Gear = 1.0;
 8001bc6:	496d      	ldr	r1, [pc, #436]	; (8001d7c <EngTrModel_step+0x23c>)
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b6d      	ldr	r3, [pc, #436]	; (8001d84 <EngTrModel_step+0x244>)
 8001bce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    EngTrModel_DW.is_active_selection_state = 1U;
 8001bd2:	4b69      	ldr	r3, [pc, #420]	; (8001d78 <EngTrModel_step+0x238>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <EngTrModel_step+0x238>)
 8001bdc:	2202      	movs	r2, #2
 8001bde:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001be2:	e0e4      	b.n	8001dae <EngTrModel_step+0x26e>
  } else {
    if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001be4:	4b64      	ldr	r3, [pc, #400]	; (8001d78 <EngTrModel_step+0x238>)
 8001be6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <EngTrModel_step+0xb6>
      EngTrModel_gear_state(&sfEvent);
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fe05 	bl	8001800 <EngTrModel_gear_state>
    }

    if (EngTrModel_DW.is_active_selection_state != 0U) {
 8001bf6:	4b60      	ldr	r3, [pc, #384]	; (8001d78 <EngTrModel_step+0x238>)
 8001bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80d6 	beq.w	8001dae <EngTrModel_step+0x26e>
      /* Outputs for Function Call SubSystem: '<S2>/ComputeThreshold' */
      /* Lookup_n-D: '<S5>/InterpDown' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpDown = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001c02:	4b61      	ldr	r3, [pc, #388]	; (8001d88 <EngTrModel_step+0x248>)
 8001c04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c08:	4b5c      	ldr	r3, [pc, #368]	; (8001d7c <EngTrModel_step+0x23c>)
 8001c0a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c0e:	2406      	movs	r4, #6
 8001c10:	9404      	str	r4, [sp, #16]
 8001c12:	4c5e      	ldr	r4, [pc, #376]	; (8001d8c <EngTrModel_step+0x24c>)
 8001c14:	9403      	str	r4, [sp, #12]
 8001c16:	4c5e      	ldr	r4, [pc, #376]	; (8001d90 <EngTrModel_step+0x250>)
 8001c18:	9402      	str	r4, [sp, #8]
 8001c1a:	4c5e      	ldr	r4, [pc, #376]	; (8001d94 <EngTrModel_step+0x254>)
 8001c1c:	9401      	str	r4, [sp, #4]
 8001c1e:	4c5e      	ldr	r4, [pc, #376]	; (8001d98 <EngTrModel_step+0x258>)
 8001c20:	9400      	str	r4, [sp, #0]
 8001c22:	f7ff fb0d 	bl	8001240 <look2_binlxpw>
 8001c26:	e9c7 0104 	strd	r0, r1, [r7, #16]
        EngTrModel_ConstP.InterpDown_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* Lookup_n-D: '<S5>/InterpUp' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpUp = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001c2a:	4b57      	ldr	r3, [pc, #348]	; (8001d88 <EngTrModel_step+0x248>)
 8001c2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c30:	4b52      	ldr	r3, [pc, #328]	; (8001d7c <EngTrModel_step+0x23c>)
 8001c32:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c36:	2406      	movs	r4, #6
 8001c38:	9404      	str	r4, [sp, #16]
 8001c3a:	4c54      	ldr	r4, [pc, #336]	; (8001d8c <EngTrModel_step+0x24c>)
 8001c3c:	9403      	str	r4, [sp, #12]
 8001c3e:	4c57      	ldr	r4, [pc, #348]	; (8001d9c <EngTrModel_step+0x25c>)
 8001c40:	9402      	str	r4, [sp, #8]
 8001c42:	4c54      	ldr	r4, [pc, #336]	; (8001d94 <EngTrModel_step+0x254>)
 8001c44:	9401      	str	r4, [sp, #4]
 8001c46:	4c56      	ldr	r4, [pc, #344]	; (8001da0 <EngTrModel_step+0x260>)
 8001c48:	9400      	str	r4, [sp, #0]
 8001c4a:	f7ff faf9 	bl	8001240 <look2_binlxpw>
 8001c4e:	e9c7 0102 	strd	r0, r1, [r7, #8]
        EngTrModel_ConstP.InterpUp_bp01Data, EngTrModel_ConstP.pooled2,
        EngTrModel_ConstP.InterpUp_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* End of Outputs for SubSystem: '<S2>/ComputeThreshold' */
      switch (EngTrModel_DW.is_selection_state) {
 8001c52:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <EngTrModel_step+0x238>)
 8001c54:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d05a      	beq.n	8001d12 <EngTrModel_step+0x1d2>
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	f300 80a6 	bgt.w	8001dae <EngTrModel_step+0x26e>
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d002      	beq.n	8001c6c <EngTrModel_step+0x12c>
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d02e      	beq.n	8001cc8 <EngTrModel_step+0x188>
 8001c6a:	e0a0      	b.n	8001dae <EngTrModel_step+0x26e>
       case EngTrModel_IN_downshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001c6c:	4b42      	ldr	r3, [pc, #264]	; (8001d78 <EngTrModel_step+0x238>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d919      	bls.n	8001ca8 <EngTrModel_step+0x168>
            (EngTrModel_B.VehicleSpeed <= InterpDown)) {
 8001c74:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <EngTrModel_step+0x23c>)
 8001c76:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001c7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c7e:	f7fe fec1 	bl	8000a04 <__aeabi_dcmpge>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00f      	beq.n	8001ca8 <EngTrModel_step+0x168>
          sfEvent = EngTrModel_event_DOWN;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001c8c:	4b3a      	ldr	r3, [pc, #232]	; (8001d78 <EngTrModel_step+0x238>)
 8001c8e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <EngTrModel_step+0x15e>
            EngTrModel_gear_state(&sfEvent);
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fdb1 	bl	8001800 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001c9e:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <EngTrModel_step+0x238>)
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001ca6:	e082      	b.n	8001dae <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <EngTrModel_step+0x23c>)
 8001caa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cb2:	f7fe fe93 	bl	80009dc <__aeabi_dcmplt>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d100      	bne.n	8001cbe <EngTrModel_step+0x17e>
        break;
 8001cbc:	e077      	b.n	8001dae <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <EngTrModel_step+0x238>)
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001cc6:	e072      	b.n	8001dae <EngTrModel_step+0x26e>

       case EngTrModel_IN_steady_state:
        if (EngTrModel_B.VehicleSpeed > InterpUp) {
 8001cc8:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <EngTrModel_step+0x23c>)
 8001cca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cd2:	f7fe fe83 	bl	80009dc <__aeabi_dcmplt>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <EngTrModel_step+0x1ac>
          EngTrModel_DW.is_selection_state = EngTrModel_IN_upshifting;
 8001cdc:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <EngTrModel_step+0x238>)
 8001cde:	2203      	movs	r2, #3
 8001ce0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          EngTrModel_DW.temporalCounter_i1 = 0U;
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <EngTrModel_step+0x238>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
            EngTrModel_DW.temporalCounter_i1 = 0U;
          }
        }
        break;
 8001cea:	e060      	b.n	8001dae <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
 8001cec:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <EngTrModel_step+0x23c>)
 8001cee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cf2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cf6:	f7fe fe8f 	bl	8000a18 <__aeabi_dcmpgt>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d100      	bne.n	8001d02 <EngTrModel_step+0x1c2>
        break;
 8001d00:	e055      	b.n	8001dae <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <EngTrModel_step+0x238>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            EngTrModel_DW.temporalCounter_i1 = 0U;
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <EngTrModel_step+0x238>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	61da      	str	r2, [r3, #28]
        break;
 8001d10:	e04d      	b.n	8001dae <EngTrModel_step+0x26e>

       case EngTrModel_IN_upshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <EngTrModel_step+0x238>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d919      	bls.n	8001d4e <EngTrModel_step+0x20e>
            (EngTrModel_B.VehicleSpeed >= InterpUp)) {
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <EngTrModel_step+0x23c>)
 8001d1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001d20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d24:	f7fe fe64 	bl	80009f0 <__aeabi_dcmple>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00f      	beq.n	8001d4e <EngTrModel_step+0x20e>
          sfEvent = EngTrModel_event_UP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <EngTrModel_step+0x238>)
 8001d34:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <EngTrModel_step+0x204>
            EngTrModel_gear_state(&sfEvent);
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fd5e 	bl	8001800 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <EngTrModel_step+0x238>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001d4c:	e02e      	b.n	8001dac <EngTrModel_step+0x26c>
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <EngTrModel_step+0x23c>)
 8001d50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d58:	f7fe fe5e 	bl	8000a18 <__aeabi_dcmpgt>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d120      	bne.n	8001da4 <EngTrModel_step+0x264>
        break;
 8001d62:	e023      	b.n	8001dac <EngTrModel_step+0x26c>
 8001d64:	f3af 8000 	nop.w
 8001d68:	54442d18 	.word	0x54442d18
 8001d6c:	401921fb 	.word	0x401921fb
 8001d70:	745d1746 	.word	0x745d1746
 8001d74:	3f8745d1 	.word	0x3f8745d1
 8001d78:	20000250 	.word	0x20000250
 8001d7c:	20000220 	.word	0x20000220
 8001d80:	20000288 	.word	0x20000288
 8001d84:	3ff00000 	.word	0x3ff00000
 8001d88:	20000278 	.word	0x20000278
 8001d8c:	0800aa18 	.word	0x0800aa18
 8001d90:	0800a1e8 	.word	0x0800a1e8
 8001d94:	0800a2d8 	.word	0x0800a2d8
 8001d98:	0800a2a8 	.word	0x0800a2a8
 8001d9c:	0800a2f8 	.word	0x0800a2f8
 8001da0:	0800a3b8 	.word	0x0800a3b8
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001da4:	4b84      	ldr	r3, [pc, #528]	; (8001fb8 <EngTrModel_step+0x478>)
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001dac:	bf00      	nop
  }

  /* End of Chart: '<Root>/ShiftLogic' */

  /* Lookup_n-D: '<S7>/Table' */
  InterpDown = look1_binlxpw(EngTrModel_B.Gear, EngTrModel_ConstP.pooled2,
 8001dae:	4b83      	ldr	r3, [pc, #524]	; (8001fbc <EngTrModel_step+0x47c>)
 8001db0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001db4:	2303      	movs	r3, #3
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	4b81      	ldr	r3, [pc, #516]	; (8001fc0 <EngTrModel_step+0x480>)
 8001dba:	4a82      	ldr	r2, [pc, #520]	; (8001fc4 <EngTrModel_step+0x484>)
 8001dbc:	f7ff fc3c 	bl	8001638 <look1_binlxpw>
 8001dc0:	e9c7 0104 	strd	r0, r1, [r7, #16]
    EngTrModel_ConstP.Table_tableData, 3U);

  /* Gain: '<S4>/FinalDriveRatio2' incorporates:
   *  DiscreteIntegrator: '<S4>/WheelSpeed'
   */
  EngTrModel_B.TransmissionRPM = 3.23 * EngTrModel_DW.WheelSpeed_DSTATE;
 8001dc4:	4b7c      	ldr	r3, [pc, #496]	; (8001fb8 <EngTrModel_step+0x478>)
 8001dc6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001dca:	a375      	add	r3, pc, #468	; (adr r3, 8001fa0 <EngTrModel_step+0x460>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe fb92 	bl	80004f8 <__aeabi_dmul>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4978      	ldr	r1, [pc, #480]	; (8001fbc <EngTrModel_step+0x47c>)
 8001dda:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Product: '<S6>/SpeedRatio' incorporates:
   *  Product: '<S7>/Product1'
   */
  if( EngTrModel_B.EngineRPM != 0)
 8001dde:	4b77      	ldr	r3, [pc, #476]	; (8001fbc <EngTrModel_step+0x47c>)
 8001de0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	f7fe fdec 	bl	80009c8 <__aeabi_dcmpeq>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d114      	bne.n	8001e20 <EngTrModel_step+0x2e0>
    InterpUp = InterpDown * EngTrModel_B.TransmissionRPM / EngTrModel_B.EngineRPM;
 8001df6:	4b71      	ldr	r3, [pc, #452]	; (8001fbc <EngTrModel_step+0x47c>)
 8001df8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001dfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e00:	f7fe fb7a 	bl	80004f8 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4b6b      	ldr	r3, [pc, #428]	; (8001fbc <EngTrModel_step+0x47c>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe fc9b 	bl	800074c <__aeabi_ddiv>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001e1e:	e005      	b.n	8001e2c <EngTrModel_step+0x2ec>
  else
    InterpUp = 0.0;
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Fcn: '<S6>/Impeller' incorporates:
   *  Lookup_n-D: '<S6>/FactorK'
   *  Product: '<S6>/Quotient'
   */
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001e2c:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <EngTrModel_step+0x47c>)
 8001e2e:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001e32:	2314      	movs	r3, #20
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	4b64      	ldr	r3, [pc, #400]	; (8001fc8 <EngTrModel_step+0x488>)
 8001e38:	4a64      	ldr	r2, [pc, #400]	; (8001fcc <EngTrModel_step+0x48c>)
 8001e3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e3e:	f7ff fbfb 	bl	8001638 <look1_binlxpw>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001e46:	4620      	mov	r0, r4
 8001e48:	4629      	mov	r1, r5
 8001e4a:	f7fe fc7f 	bl	800074c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e5e:	f7ff fd55 	bl	800190c <rt_powd_snf>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4955      	ldr	r1, [pc, #340]	; (8001fbc <EngTrModel_step+0x47c>)
 8001e68:	e9c1 2306 	strd	r2, r3, [r1, #24]
                  EngTrModel_ConstP.FactorK_tableData, 20U), 2.0);

  /* Lookup_n-D: '<S6>/TorqueRatio' */
  InterpUp = look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001e6c:	2314      	movs	r3, #20
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4b57      	ldr	r3, [pc, #348]	; (8001fd0 <EngTrModel_step+0x490>)
 8001e72:	4a56      	ldr	r2, [pc, #344]	; (8001fcc <EngTrModel_step+0x48c>)
 8001e74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e78:	f7ff fbde 	bl	8001638 <look1_binlxpw>
 8001e7c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    EngTrModel_ConstP.TorqueRatio_tableData, 20U);

  /* Product: '<S7>/Product' incorporates:
   *  Product: '<S6>/Turbine'
   */
  EngTrModel_B.OutputTorque = EngTrModel_B.ImpellerTorque * InterpUp *
 8001e80:	4b4e      	ldr	r3, [pc, #312]	; (8001fbc <EngTrModel_step+0x47c>)
 8001e82:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001e86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e8a:	f7fe fb35 	bl	80004f8 <__aeabi_dmul>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e9a:	f7fe fb2d 	bl	80004f8 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4946      	ldr	r1, [pc, #280]	; (8001fbc <EngTrModel_step+0x47c>)
 8001ea4:	e9c1 2308 	strd	r2, r3, [r1, #32]
    InterpDown;

  /* Outport: '<Root>/Gear' */
  EngTrModel_Y.Gear = EngTrModel_B.Gear;
 8001ea8:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <EngTrModel_step+0x47c>)
 8001eaa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001eae:	4949      	ldr	r1, [pc, #292]	; (8001fd4 <EngTrModel_step+0x494>)
 8001eb0:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Outport: '<Root>/VehicleSpeed' */
  EngTrModel_Y.VehicleSpeed = EngTrModel_B.VehicleSpeed;
 8001eb4:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <EngTrModel_step+0x47c>)
 8001eb6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001eba:	4946      	ldr	r1, [pc, #280]	; (8001fd4 <EngTrModel_step+0x494>)
 8001ebc:	e9c1 2302 	strd	r2, r3, [r1, #8]
   *  Gain: '<S1>/EnginePlusImpellerInertia'
   *  Inport: '<Root>/Throttle'
   *  Lookup_n-D: '<S1>/EngineTorque'
   *  Sum: '<S1>/Sum'
   */
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001ec0:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <EngTrModel_step+0x498>)
 8001ec2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <EngTrModel_step+0x47c>)
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	240a      	movs	r4, #10
 8001ece:	9404      	str	r4, [sp, #16]
 8001ed0:	4c42      	ldr	r4, [pc, #264]	; (8001fdc <EngTrModel_step+0x49c>)
 8001ed2:	9403      	str	r4, [sp, #12]
 8001ed4:	4c42      	ldr	r4, [pc, #264]	; (8001fe0 <EngTrModel_step+0x4a0>)
 8001ed6:	9402      	str	r4, [sp, #8]
 8001ed8:	4c42      	ldr	r4, [pc, #264]	; (8001fe4 <EngTrModel_step+0x4a4>)
 8001eda:	9401      	str	r4, [sp, #4]
 8001edc:	4c42      	ldr	r4, [pc, #264]	; (8001fe8 <EngTrModel_step+0x4a8>)
 8001ede:	9400      	str	r4, [sp, #0]
 8001ee0:	f7ff f9ae 	bl	8001240 <look2_binlxpw>
    (EngTrModel_U.Throttle, EngTrModel_B.EngineRPM,
     EngTrModel_ConstP.EngineTorque_bp01Data,
     EngTrModel_ConstP.EngineTorque_bp02Data,
     EngTrModel_ConstP.EngineTorque_tableData,
     EngTrModel_ConstP.EngineTorque_maxIndex, 10U) - EngTrModel_B.ImpellerTorque)
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <EngTrModel_step+0x47c>)
 8001ee6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001eea:	f7fe f94d 	bl	8000188 <__aeabi_dsub>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
    * 45.472138452209627 * 0.04;
 8001ef6:	a32c      	add	r3, pc, #176	; (adr r3, 8001fa8 <EngTrModel_step+0x468>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe fafc 	bl	80004f8 <__aeabi_dmul>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	a329      	add	r3, pc, #164	; (adr r3, 8001fb0 <EngTrModel_step+0x470>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe faf3 	bl	80004f8 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <EngTrModel_step+0x478>)
 8001f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f20:	f7fe f934 	bl	800018c <__adddf3>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4923      	ldr	r1, [pc, #140]	; (8001fb8 <EngTrModel_step+0x478>)
 8001f2a:	e9c1 2300 	strd	r2, r3, [r1]

  /* Signum: '<S4>/Sign' */
  if (EngTrModel_B.VehicleSpeed < 0.0) {
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <EngTrModel_step+0x47c>)
 8001f30:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	f7fe fd4e 	bl	80009dc <__aeabi_dcmplt>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <EngTrModel_step+0x412>
    InterpDown = -1.0;
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	4b28      	ldr	r3, [pc, #160]	; (8001fec <EngTrModel_step+0x4ac>)
 8001f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f50:	e055      	b.n	8001ffe <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed > 0.0) {
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <EngTrModel_step+0x47c>)
 8001f54:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	f7fe fd5a 	bl	8000a18 <__aeabi_dcmpgt>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <EngTrModel_step+0x436>
    InterpDown = 1.0;
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <EngTrModel_step+0x4b0>)
 8001f70:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f74:	e043      	b.n	8001ffe <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed == 0.0) {
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <EngTrModel_step+0x47c>)
 8001f78:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	f7fe fd20 	bl	80009c8 <__aeabi_dcmpeq>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d032      	beq.n	8001ff4 <EngTrModel_step+0x4b4>
    InterpDown = 0.0;
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f9a:	e030      	b.n	8001ffe <EngTrModel_step+0x4be>
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	3d70a3d7 	.word	0x3d70a3d7
 8001fa4:	4009d70a 	.word	0x4009d70a
 8001fa8:	0865b653 	.word	0x0865b653
 8001fac:	4046bc6f 	.word	0x4046bc6f
 8001fb0:	47ae147b 	.word	0x47ae147b
 8001fb4:	3fa47ae1 	.word	0x3fa47ae1
 8001fb8:	20000250 	.word	0x20000250
 8001fbc:	20000220 	.word	0x20000220
 8001fc0:	0800a800 	.word	0x0800a800
 8001fc4:	0800a2d8 	.word	0x0800a2d8
 8001fc8:	0800a820 	.word	0x0800a820
 8001fcc:	0800a8c8 	.word	0x0800a8c8
 8001fd0:	0800a970 	.word	0x0800a970
 8001fd4:	20000288 	.word	0x20000288
 8001fd8:	20000278 	.word	0x20000278
 8001fdc:	0800aa20 	.word	0x0800aa20
 8001fe0:	0800a3e8 	.word	0x0800a3e8
 8001fe4:	0800a7a8 	.word	0x0800a7a8
 8001fe8:	0800a758 	.word	0x0800a758
 8001fec:	bff00000 	.word	0xbff00000
 8001ff0:	3ff00000 	.word	0x3ff00000
  } else {
    InterpDown = (rtNaN);
 8001ff4:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <EngTrModel_step+0x5a0>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	e9c7 2304 	strd	r2, r3, [r7, #16]
   *  Inport: '<Root>/Brake'
   *  Product: '<S4>/SignedLoad'
   *  Sum: '<S4>/Sum'
   *  Sum: '<S4>/Sum1'
   */
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <EngTrModel_step+0x5a4>)
 8002000:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002004:	a32e      	add	r3, pc, #184	; (adr r3, 80020c0 <EngTrModel_step+0x580>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe fa75 	bl	80004f8 <__aeabi_dmul>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4614      	mov	r4, r2
 8002014:	461d      	mov	r5, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <EngTrModel_step+0x5a4>)
 8002018:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002024:	f7ff fc72 	bl	800190c <rt_powd_snf>
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8002028:	a327      	add	r3, pc, #156	; (adr r3, 80020c8 <EngTrModel_step+0x588>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe fa63 	bl	80004f8 <__aeabi_dmul>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <EngTrModel_step+0x5a8>)
 8002040:	f7fe f8a4 	bl	800018c <__adddf3>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 800204c:	4b27      	ldr	r3, [pc, #156]	; (80020ec <EngTrModel_step+0x5ac>)
 800204e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8002052:	f7fe f89b 	bl	800018c <__adddf3>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 800205e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002062:	f7fe fa49 	bl	80004f8 <__aeabi_dmul>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 800206a:	4620      	mov	r0, r4
 800206c:	4629      	mov	r1, r5
 800206e:	f7fe f88b 	bl	8000188 <__aeabi_dsub>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 800207a:	a315      	add	r3, pc, #84	; (adr r3, 80020d0 <EngTrModel_step+0x590>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	f7fe fa3a 	bl	80004f8 <__aeabi_dmul>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	a312      	add	r3, pc, #72	; (adr r3, 80020d8 <EngTrModel_step+0x598>)
 800208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002092:	f7fe fa31 	bl	80004f8 <__aeabi_dmul>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <EngTrModel_step+0x5b0>)
 80020a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020a4:	f7fe f872 	bl	800018c <__adddf3>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4910      	ldr	r1, [pc, #64]	; (80020f0 <EngTrModel_step+0x5b0>)
 80020ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bdb0      	pop	{r4, r5, r7, pc}
 80020ba:	bf00      	nop
 80020bc:	f3af 8000 	nop.w
 80020c0:	3d70a3d7 	.word	0x3d70a3d7
 80020c4:	4009d70a 	.word	0x4009d70a
 80020c8:	47ae147b 	.word	0x47ae147b
 80020cc:	3f947ae1 	.word	0x3f947ae1
 80020d0:	b3bfa695 	.word	0xb3bfa695
 80020d4:	3fb52ad1 	.word	0x3fb52ad1
 80020d8:	47ae147b 	.word	0x47ae147b
 80020dc:	3fa47ae1 	.word	0x3fa47ae1
 80020e0:	20000a70 	.word	0x20000a70
 80020e4:	20000220 	.word	0x20000220
 80020e8:	40440000 	.word	0x40440000
 80020ec:	20000278 	.word	0x20000278
 80020f0:	20000250 	.word	0x20000250

080020f4 <EngTrModel_initialize>:

/* Model initialize function */
void EngTrModel_initialize(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 80020f8:	2008      	movs	r0, #8
 80020fa:	f002 fa95 	bl	8004628 <rt_InitInfAndNaN>
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <USER_GPIO_Define>:
#include "main.h"

// Define a pin

void USER_GPIO_Define( uint8_t port, uint8_t pin, uint8_t direction, uint8_t option )
{
 8002104:	b490      	push	{r4, r7}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	4604      	mov	r4, r0
 800210c:	4608      	mov	r0, r1
 800210e:	4611      	mov	r1, r2
 8002110:	461a      	mov	r2, r3
 8002112:	4623      	mov	r3, r4
 8002114:	71fb      	strb	r3, [r7, #7]
 8002116:	4603      	mov	r3, r0
 8002118:	71bb      	strb	r3, [r7, #6]
 800211a:	460b      	mov	r3, r1
 800211c:	717b      	strb	r3, [r7, #5]
 800211e:	4613      	mov	r3, r2
 8002120:	713b      	strb	r3, [r7, #4]
  volatile uint32_t * CR;
  uint8_t actual_pin = pin;
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	72fb      	strb	r3, [r7, #11]
  uint8_t offset = 0x00;
 8002126:	2300      	movs	r3, #0
 8002128:	72bb      	strb	r3, [r7, #10]

  if( pin > 7 ) {
 800212a:	79bb      	ldrb	r3, [r7, #6]
 800212c:	2b07      	cmp	r3, #7
 800212e:	d904      	bls.n	800213a <USER_GPIO_Define+0x36>
      actual_pin -= 8;
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	3b08      	subs	r3, #8
 8002134:	72fb      	strb	r3, [r7, #11]
      offset = 0x01;
 8002136:	2301      	movs	r3, #1
 8002138:	72bb      	strb	r3, [r7, #10]
  }

  if( port == 0 )
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10d      	bne.n	800215c <USER_GPIO_Define+0x58>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPAEN;			// IO port A clock enable
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <USER_GPIO_Define+0x18c>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	4a52      	ldr	r2, [pc, #328]	; (8002290 <USER_GPIO_Define+0x18c>)
 8002146:	f043 0304 	orr.w	r3, r3, #4
 800214a:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOA->CRL + offset);
 800214c:	7abb      	ldrb	r3, [r7, #10]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002154:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	e064      	b.n	8002226 <USER_GPIO_Define+0x122>
  }
  else if( port == 1 )
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d10d      	bne.n	800217e <USER_GPIO_Define+0x7a>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPBEN;			// IO port B clock enable
 8002162:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <USER_GPIO_Define+0x18c>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	4a4a      	ldr	r2, [pc, #296]	; (8002290 <USER_GPIO_Define+0x18c>)
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOB->CRL + offset);
 800216e:	7abb      	ldrb	r3, [r7, #10]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002176:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e053      	b.n	8002226 <USER_GPIO_Define+0x122>
  }
  else if ( port == 2 )
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d10d      	bne.n	80021a0 <USER_GPIO_Define+0x9c>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPCEN;			// IO port C clock enable
 8002184:	4b42      	ldr	r3, [pc, #264]	; (8002290 <USER_GPIO_Define+0x18c>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a41      	ldr	r2, [pc, #260]	; (8002290 <USER_GPIO_Define+0x18c>)
 800218a:	f043 0310 	orr.w	r3, r3, #16
 800218e:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOC->CRL + offset);
 8002190:	7abb      	ldrb	r3, [r7, #10]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002198:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	e042      	b.n	8002226 <USER_GPIO_Define+0x122>
  }
  else if ( port == 3 )
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d10d      	bne.n	80021c2 <USER_GPIO_Define+0xbe>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPDEN;			// IO port D clock enable
 80021a6:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <USER_GPIO_Define+0x18c>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	4a39      	ldr	r2, [pc, #228]	; (8002290 <USER_GPIO_Define+0x18c>)
 80021ac:	f043 0320 	orr.w	r3, r3, #32
 80021b0:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOD->CRL + offset);
 80021b2:	7abb      	ldrb	r3, [r7, #10]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021ba:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	e031      	b.n	8002226 <USER_GPIO_Define+0x122>
  }
  else if( port == 4 )
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d10d      	bne.n	80021e4 <USER_GPIO_Define+0xe0>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPEEN;			// IO port E clock enable
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <USER_GPIO_Define+0x18c>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4a30      	ldr	r2, [pc, #192]	; (8002290 <USER_GPIO_Define+0x18c>)
 80021ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d2:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOE->CRL + offset);
 80021d4:	7abb      	ldrb	r3, [r7, #10]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021dc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	e020      	b.n	8002226 <USER_GPIO_Define+0x122>
  }
  else if( port == 5 )
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	2b05      	cmp	r3, #5
 80021e8:	d10d      	bne.n	8002206 <USER_GPIO_Define+0x102>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPFEN;			// IO port F clock enable
 80021ea:	4b29      	ldr	r3, [pc, #164]	; (8002290 <USER_GPIO_Define+0x18c>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	4a28      	ldr	r2, [pc, #160]	; (8002290 <USER_GPIO_Define+0x18c>)
 80021f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f4:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOF->CRL + offset);
 80021f6:	7abb      	ldrb	r3, [r7, #10]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021fe:	f503 338e 	add.w	r3, r3, #72704	; 0x11c00
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e00f      	b.n	8002226 <USER_GPIO_Define+0x122>
  }
  else if( port == 6 )
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	2b06      	cmp	r3, #6
 800220a:	d10c      	bne.n	8002226 <USER_GPIO_Define+0x122>
  {
      RCC->APB2ENR |= 	RCC_APB2ENR_IOPGEN;			// IO port G clock enable
 800220c:	4b20      	ldr	r3, [pc, #128]	; (8002290 <USER_GPIO_Define+0x18c>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <USER_GPIO_Define+0x18c>)
 8002212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002216:	6193      	str	r3, [r2, #24]
      CR = (volatile uint32_t *) (&GPIOG->CRL + offset);
 8002218:	7abb      	ldrb	r3, [r7, #10]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002220:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8002224:	60fb      	str	r3, [r7, #12]
  }

  if( ( direction == 1 || direction == 2 || direction == 3 ) && ( option == 2 || option == 3 ) )
 8002226:	797b      	ldrb	r3, [r7, #5]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d005      	beq.n	8002238 <USER_GPIO_Define+0x134>
 800222c:	797b      	ldrb	r3, [r7, #5]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d002      	beq.n	8002238 <USER_GPIO_Define+0x134>
 8002232:	797b      	ldrb	r3, [r7, #5]
 8002234:	2b03      	cmp	r3, #3
 8002236:	d10b      	bne.n	8002250 <USER_GPIO_Define+0x14c>
 8002238:	793b      	ldrb	r3, [r7, #4]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d002      	beq.n	8002244 <USER_GPIO_Define+0x140>
 800223e:	793b      	ldrb	r3, [r7, #4]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d105      	bne.n	8002250 <USER_GPIO_Define+0x14c>
  {
      RCC->APB2ENR	|=	RCC_APB2ENR_AFIOEN;		// Alternate function I/O clock enable
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <USER_GPIO_Define+0x18c>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4a11      	ldr	r2, [pc, #68]	; (8002290 <USER_GPIO_Define+0x18c>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6193      	str	r3, [r2, #24]
  }

  *CR	&=	~( 0xF << (actual_pin * 4) );			// Reset the target pin
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	7afa      	ldrb	r2, [r7, #11]
 8002256:	0092      	lsls	r2, r2, #2
 8002258:	210f      	movs	r1, #15
 800225a:	fa01 f202 	lsl.w	r2, r1, r2
 800225e:	43d2      	mvns	r2, r2
 8002260:	401a      	ands	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	601a      	str	r2, [r3, #0]
  *CR	|=	( direction << (actual_pin * 4) )		// Set up the direction and the option for the pin
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	7979      	ldrb	r1, [r7, #5]
 800226c:	7afa      	ldrb	r2, [r7, #11]
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	4091      	lsls	r1, r2
	|	( option << (actual_pin * 4 + 2) );
 8002272:	7938      	ldrb	r0, [r7, #4]
 8002274:	7afa      	ldrb	r2, [r7, #11]
 8002276:	0092      	lsls	r2, r2, #2
 8002278:	3202      	adds	r2, #2
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	430a      	orrs	r2, r1
  *CR	|=	( direction << (actual_pin * 4) )		// Set up the direction and the option for the pin
 8002280:	431a      	orrs	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	601a      	str	r2, [r3, #0]
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bc90      	pop	{r4, r7}
 800228e:	4770      	bx	lr
 8002290:	40021000 	.word	0x40021000

08002294 <USER_GPIO_Read>:

// Read a pin

uint8_t USER_GPIO_Read( uint8_t port, uint8_t pin )
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	460a      	mov	r2, r1
 800229e:	71fb      	strb	r3, [r7, #7]
 80022a0:	4613      	mov	r3, r2
 80022a2:	71bb      	strb	r3, [r7, #6]
  volatile uint32_t * IDR;
  int state;

  if( port == 0 )
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <USER_GPIO_Read+0x1c>
  {
      IDR = (volatile uint32_t *) (&GPIOA->IDR);
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <USER_GPIO_Read+0x88>)
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e022      	b.n	80022f6 <USER_GPIO_Read+0x62>
  }
  else if( port == 1 )
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d102      	bne.n	80022bc <USER_GPIO_Read+0x28>
  {
      IDR = (volatile uint32_t *) (&GPIOB->IDR);
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <USER_GPIO_Read+0x8c>)
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e01c      	b.n	80022f6 <USER_GPIO_Read+0x62>
  }
  else if( port == 2 )
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d102      	bne.n	80022c8 <USER_GPIO_Read+0x34>
  {
      IDR = (volatile uint32_t *) (&GPIOC->IDR);
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <USER_GPIO_Read+0x90>)
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	e016      	b.n	80022f6 <USER_GPIO_Read+0x62>
  }
  else if( port == 3 )
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d102      	bne.n	80022d4 <USER_GPIO_Read+0x40>
  {
      IDR = (volatile uint32_t *) (&GPIOD->IDR);
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <USER_GPIO_Read+0x94>)
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	e010      	b.n	80022f6 <USER_GPIO_Read+0x62>
  }
  else if( port == 4 )
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d102      	bne.n	80022e0 <USER_GPIO_Read+0x4c>
  {
      IDR = (volatile uint32_t *) (&GPIOE->IDR);
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <USER_GPIO_Read+0x98>)
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	e00a      	b.n	80022f6 <USER_GPIO_Read+0x62>
  }
  else if( port == 5 )
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d102      	bne.n	80022ec <USER_GPIO_Read+0x58>
  {
      IDR = (volatile uint32_t *) (&GPIOF->IDR);
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <USER_GPIO_Read+0x9c>)
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	e004      	b.n	80022f6 <USER_GPIO_Read+0x62>
  }
  else if( port == 6 )
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d101      	bne.n	80022f6 <USER_GPIO_Read+0x62>
  {
      IDR = (volatile uint32_t *) (&GPIOG->IDR);
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <USER_GPIO_Read+0xa0>)
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  state = ( ( *IDR & ( 1 << pin ) ) >> pin );
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	79ba      	ldrb	r2, [r7, #6]
 80022fc:	2101      	movs	r1, #1
 80022fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002302:	401a      	ands	r2, r3
 8002304:	79bb      	ldrb	r3, [r7, #6]
 8002306:	fa22 f303 	lsr.w	r3, r2, r3
 800230a:	60bb      	str	r3, [r7, #8]
  return state;
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	b2db      	uxtb	r3, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40010808 	.word	0x40010808
 8002320:	40010c08 	.word	0x40010c08
 8002324:	40011008 	.word	0x40011008
 8002328:	40011408 	.word	0x40011408
 800232c:	40011808 	.word	0x40011808
 8002330:	40011c08 	.word	0x40011c08
 8002334:	40012008 	.word	0x40012008

08002338 <USER_GPIO_Write>:

// Write a pin

void USER_GPIO_Write(uint8_t port, uint8_t pin, uint8_t state)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
 8002342:	460b      	mov	r3, r1
 8002344:	71bb      	strb	r3, [r7, #6]
 8002346:	4613      	mov	r3, r2
 8002348:	717b      	strb	r3, [r7, #5]
  volatile uint32_t * ODR;

  if( port == 0 ) {
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <USER_GPIO_Write+0x1e>
      ODR = (volatile uint32_t *) (&GPIOA->ODR);
 8002350:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <USER_GPIO_Write+0x9c>)
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e022      	b.n	800239c <USER_GPIO_Write+0x64>
  }
  else if( port == 1 )
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d102      	bne.n	8002362 <USER_GPIO_Write+0x2a>
  {
      ODR = (volatile uint32_t *) (&GPIOB->ODR);
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <USER_GPIO_Write+0xa0>)
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e01c      	b.n	800239c <USER_GPIO_Write+0x64>
  }
  else if( port == 2 )
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d102      	bne.n	800236e <USER_GPIO_Write+0x36>
  {
      ODR = (volatile uint32_t *) (&GPIOC->ODR);
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <USER_GPIO_Write+0xa4>)
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e016      	b.n	800239c <USER_GPIO_Write+0x64>
  }
  else if( port == 3 )
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d102      	bne.n	800237a <USER_GPIO_Write+0x42>
  {
      ODR = (volatile uint32_t *) (&GPIOD->ODR);
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <USER_GPIO_Write+0xa8>)
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e010      	b.n	800239c <USER_GPIO_Write+0x64>
  }
  else if( port == 4 )
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d102      	bne.n	8002386 <USER_GPIO_Write+0x4e>
  {
      ODR = (volatile uint32_t *) (&GPIOE->ODR);
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <USER_GPIO_Write+0xac>)
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e00a      	b.n	800239c <USER_GPIO_Write+0x64>
  }
  else if( port == 5 )
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d102      	bne.n	8002392 <USER_GPIO_Write+0x5a>
  {
      ODR = (volatile uint32_t *) (&GPIOF->ODR);
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <USER_GPIO_Write+0xb0>)
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	e004      	b.n	800239c <USER_GPIO_Write+0x64>
  }
  else if( port == 6 )
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	2b06      	cmp	r3, #6
 8002396:	d101      	bne.n	800239c <USER_GPIO_Write+0x64>
  {
      ODR = (volatile uint32_t *) (&GPIOG->ODR);
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <USER_GPIO_Write+0xb4>)
 800239a:	60fb      	str	r3, [r7, #12]
  }

  state ? ( *ODR |= ( state << pin ) ) : ( *ODR &= ~( 1 << pin ) );
 800239c:	797b      	ldrb	r3, [r7, #5]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <USER_GPIO_Write+0x7e>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	7979      	ldrb	r1, [r7, #5]
 80023a8:	79ba      	ldrb	r2, [r7, #6]
 80023aa:	fa01 f202 	lsl.w	r2, r1, r2
 80023ae:	431a      	orrs	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	601a      	str	r2, [r3, #0]
}
 80023b4:	e009      	b.n	80023ca <USER_GPIO_Write+0x92>
  state ? ( *ODR |= ( state << pin ) ) : ( *ODR &= ~( 1 << pin ) );
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	79ba      	ldrb	r2, [r7, #6]
 80023bc:	2101      	movs	r1, #1
 80023be:	fa01 f202 	lsl.w	r2, r1, r2
 80023c2:	43d2      	mvns	r2, r2
 80023c4:	401a      	ands	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	601a      	str	r2, [r3, #0]
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	4001080c 	.word	0x4001080c
 80023d8:	40010c0c 	.word	0x40010c0c
 80023dc:	4001100c 	.word	0x4001100c
 80023e0:	4001140c 	.word	0x4001140c
 80023e4:	4001180c 	.word	0x4001180c
 80023e8:	40011c0c 	.word	0x40011c0c
 80023ec:	4001200c 	.word	0x4001200c

080023f0 <USER_GPIO_Toggle>:

// Toggle a pin

void USER_GPIO_Toggle(uint8_t port, uint8_t pin)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	460a      	mov	r2, r1
 80023fa:	71fb      	strb	r3, [r7, #7]
 80023fc:	4613      	mov	r3, r2
 80023fe:	71bb      	strb	r3, [r7, #6]
  if( USER_GPIO_Read(port, pin) ) {
 8002400:	79ba      	ldrb	r2, [r7, #6]
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff44 	bl	8002294 <USER_GPIO_Read>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <USER_GPIO_Toggle+0x30>
      USER_GPIO_Write(port, pin, 0);
 8002412:	79b9      	ldrb	r1, [r7, #6]
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	2200      	movs	r2, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff8d 	bl	8002338 <USER_GPIO_Write>
  }
  else {
      USER_GPIO_Write(port, pin, 1);
  }
}
 800241e:	e005      	b.n	800242c <USER_GPIO_Toggle+0x3c>
      USER_GPIO_Write(port, pin, 1);
 8002420:	79b9      	ldrb	r1, [r7, #6]
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	2201      	movs	r2, #1
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff86 	bl	8002338 <USER_GPIO_Write>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <USER_I2C_Init>:
#include "GPIO.h"

// Initialize I2C

void USER_I2C_Init( uint8_t I2C, uint8_t speed_mode )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	460a      	mov	r2, r1
 800243e:	71fb      	strb	r3, [r7, #7]
 8002440:	4613      	mov	r3, r2
 8002442:	71bb      	strb	r3, [r7, #6]
  if( I2C == 0 )
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d12d      	bne.n	80024a6 <USER_I2C_Init+0x72>
  {
      RCC->APB1ENR 	|=	RCC_APB1ENR_I2C1EN;	// I2C1 clock enable
 800244a:	4b31      	ldr	r3, [pc, #196]	; (8002510 <USER_I2C_Init+0xdc>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	4a30      	ldr	r2, [pc, #192]	; (8002510 <USER_I2C_Init+0xdc>)
 8002450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002454:	61d3      	str	r3, [r2, #28]

      USER_GPIO_Define( PORTB, 6, OUT_50, OUT_AF_OD );	// PB6 I2C1_SCL
 8002456:	2303      	movs	r3, #3
 8002458:	2203      	movs	r2, #3
 800245a:	2106      	movs	r1, #6
 800245c:	2001      	movs	r0, #1
 800245e:	f7ff fe51 	bl	8002104 <USER_GPIO_Define>
      USER_GPIO_Define( PORTB, 7, OUT_50, OUT_AF_OD );	// PB7 I2C1_SDA
 8002462:	2303      	movs	r3, #3
 8002464:	2203      	movs	r2, #3
 8002466:	2107      	movs	r1, #7
 8002468:	2001      	movs	r0, #1
 800246a:	f7ff fe4b 	bl	8002104 <USER_GPIO_Define>

      I2C1->CR1		|=	I2C_CR1_SWRST;		// Software reset
 800246e:	4b29      	ldr	r3, [pc, #164]	; (8002514 <USER_I2C_Init+0xe0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a28      	ldr	r2, [pc, #160]	; (8002514 <USER_I2C_Init+0xe0>)
 8002474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002478:	6013      	str	r3, [r2, #0]
      I2C1->CR1		&=	~I2C_CR1_SWRST;
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <USER_I2C_Init+0xe0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a25      	ldr	r2, [pc, #148]	; (8002514 <USER_I2C_Init+0xe0>)
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	041b      	lsls	r3, r3, #16
 8002484:	6013      	str	r3, [r2, #0]

      I2C1->CR2		=	I2C_CR2_FREQ;		// Peripheral clock frequency of 8 MHz
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <USER_I2C_Init+0xe0>)
 8002488:	2208      	movs	r2, #8
 800248a:	605a      	str	r2, [r3, #4]

      I2C1->CCR		=	speed_mode;		// Clock control register in Fm/Sm mode
 800248c:	4a21      	ldr	r2, [pc, #132]	; (8002514 <USER_I2C_Init+0xe0>)
 800248e:	79bb      	ldrb	r3, [r7, #6]
 8002490:	61d3      	str	r3, [r2, #28]
      I2C1->TRISE	=	I2C_TRISE_TRISE;	// Maximum rise time in Fm/Sm mode (Master mode)
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <USER_I2C_Init+0xe0>)
 8002494:	2209      	movs	r2, #9
 8002496:	621a      	str	r2, [r3, #32]

      I2C1->CR1		|=	I2C_CR1_PE;		// Peripheral enable
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <USER_I2C_Init+0xe0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <USER_I2C_Init+0xe0>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6013      	str	r3, [r2, #0]
      I2C2->TRISE	=	I2C_TRISE_TRISE;

      I2C2->CR1		|=	I2C_CR1_PE;
  }

}
 80024a4:	e02f      	b.n	8002506 <USER_I2C_Init+0xd2>
  else if( I2C == 1 )
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d12c      	bne.n	8002506 <USER_I2C_Init+0xd2>
      RCC->APB1ENR 	|=	RCC_APB1ENR_I2C2EN;	// I2C2 clock enable
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <USER_I2C_Init+0xdc>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	4a17      	ldr	r2, [pc, #92]	; (8002510 <USER_I2C_Init+0xdc>)
 80024b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024b6:	61d3      	str	r3, [r2, #28]
      USER_GPIO_Define( PORTB, 10, OUT_50, OUT_AF_OD );	// PB10 I2C2_SCL
 80024b8:	2303      	movs	r3, #3
 80024ba:	2203      	movs	r2, #3
 80024bc:	210a      	movs	r1, #10
 80024be:	2001      	movs	r0, #1
 80024c0:	f7ff fe20 	bl	8002104 <USER_GPIO_Define>
      USER_GPIO_Define( PORTB, 11, OUT_50, OUT_AF_OD );	// PB11 I2C2_SDA
 80024c4:	2303      	movs	r3, #3
 80024c6:	2203      	movs	r2, #3
 80024c8:	210b      	movs	r1, #11
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7ff fe1a 	bl	8002104 <USER_GPIO_Define>
      I2C2->CR1		|=	I2C_CR1_SWRST;
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <USER_I2C_Init+0xe4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a10      	ldr	r2, [pc, #64]	; (8002518 <USER_I2C_Init+0xe4>)
 80024d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024da:	6013      	str	r3, [r2, #0]
      I2C2->CR1		&=	~I2C_CR1_SWRST;
 80024dc:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <USER_I2C_Init+0xe4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a0d      	ldr	r2, [pc, #52]	; (8002518 <USER_I2C_Init+0xe4>)
 80024e2:	0c1b      	lsrs	r3, r3, #16
 80024e4:	041b      	lsls	r3, r3, #16
 80024e6:	6013      	str	r3, [r2, #0]
      I2C2->CR2		=	I2C_CR2_FREQ;
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <USER_I2C_Init+0xe4>)
 80024ea:	2208      	movs	r2, #8
 80024ec:	605a      	str	r2, [r3, #4]
      I2C2->CCR		=	speed_mode;
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <USER_I2C_Init+0xe4>)
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	61d3      	str	r3, [r2, #28]
      I2C2->TRISE	=	I2C_TRISE_TRISE;
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <USER_I2C_Init+0xe4>)
 80024f6:	2209      	movs	r2, #9
 80024f8:	621a      	str	r2, [r3, #32]
      I2C2->CR1		|=	I2C_CR1_PE;
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <USER_I2C_Init+0xe4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a06      	ldr	r2, [pc, #24]	; (8002518 <USER_I2C_Init+0xe4>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6013      	str	r3, [r2, #0]
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	40005400 	.word	0x40005400
 8002518:	40005800 	.word	0x40005800

0800251c <USER_I2C_Start>:

// Start I2C

void USER_I2C_Start( uint8_t I2C )
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]

  if( I2C == 0 )
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10d      	bne.n	8002548 <USER_I2C_Start+0x2c>
  {
      I2C1->CR1		|=	I2C_CR1_START;		// Start generation
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <USER_I2C_Start+0x58>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a10      	ldr	r2, [pc, #64]	; (8002574 <USER_I2C_Start+0x58>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002536:	6013      	str	r3, [r2, #0]
      while (! ( I2C1->SR1 & I2C_SR1_SB) );		// Set when a Start condition generated
 8002538:	bf00      	nop
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <USER_I2C_Start+0x58>)
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f9      	beq.n	800253a <USER_I2C_Start+0x1e>
  {
      I2C2->CR1		|=	I2C_CR1_START;
      while (! ( I2C2->SR1 & I2C_SR1_SB ) );
  }

}
 8002546:	e00f      	b.n	8002568 <USER_I2C_Start+0x4c>
  else if ( I2C == 1 )
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d10c      	bne.n	8002568 <USER_I2C_Start+0x4c>
      I2C2->CR1		|=	I2C_CR1_START;
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <USER_I2C_Start+0x5c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a09      	ldr	r2, [pc, #36]	; (8002578 <USER_I2C_Start+0x5c>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002558:	6013      	str	r3, [r2, #0]
      while (! ( I2C2->SR1 & I2C_SR1_SB ) );
 800255a:	bf00      	nop
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <USER_I2C_Start+0x5c>)
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f9      	beq.n	800255c <USER_I2C_Start+0x40>
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40005400 	.word	0x40005400
 8002578:	40005800 	.word	0x40005800

0800257c <USER_I2C_Address>:

// Send the address + R or W via I2C

void USER_I2C_Address( uint8_t I2C, uint8_t address, uint8_t RW )
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
 8002586:	460b      	mov	r3, r1
 8002588:	71bb      	strb	r3, [r7, #6]
 800258a:	4613      	mov	r3, r2
 800258c:	717b      	strb	r3, [r7, #5]
  volatile uint16_t tmp;

  if( I2C == 0 )
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d122      	bne.n	80025da <USER_I2C_Address+0x5e>
  {
      I2C1->DR = ( address | RW );
 8002594:	79ba      	ldrb	r2, [r7, #6]
 8002596:	797b      	ldrb	r3, [r7, #5]
 8002598:	4313      	orrs	r3, r2
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b26      	ldr	r3, [pc, #152]	; (8002638 <USER_I2C_Address+0xbc>)
 800259e:	611a      	str	r2, [r3, #16]

      while( !( I2C1->SR1 & I2C_SR1_ADDR ) );		// ADDR flag is zero while address is mismatched or not received
 80025a0:	bf00      	nop
 80025a2:	4b25      	ldr	r3, [pc, #148]	; (8002638 <USER_I2C_Address+0xbc>)
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f9      	beq.n	80025a2 <USER_I2C_Address+0x26>
      while ( I2C1->SR1 & I2C_SR1_ADDR )		// ADDR flag is set when received address matched
 80025ae:	e00d      	b.n	80025cc <USER_I2C_Address+0x50>
      {
	  tmp = I2C1->SR1;				// Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <USER_I2C_Address+0xbc>)
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	81fb      	strh	r3, [r7, #14]
	  tmp = I2C1->SR2;
 80025b8:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <USER_I2C_Address+0xbc>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	81fb      	strh	r3, [r7, #14]

	  if( !( I2C1->SR1 & I2C_SR1_ADDR ) )
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <USER_I2C_Address+0xbc>)
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d02c      	beq.n	8002626 <USER_I2C_Address+0xaa>
      while ( I2C1->SR1 & I2C_SR1_ADDR )		// ADDR flag is set when received address matched
 80025cc:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <USER_I2C_Address+0xbc>)
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1eb      	bne.n	80025b0 <USER_I2C_Address+0x34>
	      break;
	  }
      }
  }

}
 80025d8:	e028      	b.n	800262c <USER_I2C_Address+0xb0>
  else if ( I2C == 1 )
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d125      	bne.n	800262c <USER_I2C_Address+0xb0>
      I2C2->DR = ( address | RW );
 80025e0:	79ba      	ldrb	r2, [r7, #6]
 80025e2:	797b      	ldrb	r3, [r7, #5]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <USER_I2C_Address+0xc0>)
 80025ea:	611a      	str	r2, [r3, #16]
      while( !( I2C2->SR1 & I2C_SR1_ADDR ) );
 80025ec:	bf00      	nop
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <USER_I2C_Address+0xc0>)
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f9      	beq.n	80025ee <USER_I2C_Address+0x72>
      while ( I2C2->SR1 & I2C_SR1_ADDR )
 80025fa:	e00d      	b.n	8002618 <USER_I2C_Address+0x9c>
	  tmp = I2C2->SR1;
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <USER_I2C_Address+0xc0>)
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	b29b      	uxth	r3, r3
 8002602:	81fb      	strh	r3, [r7, #14]
	  tmp = I2C2->SR2;
 8002604:	4b0d      	ldr	r3, [pc, #52]	; (800263c <USER_I2C_Address+0xc0>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	b29b      	uxth	r3, r3
 800260a:	81fb      	strh	r3, [r7, #14]
	  if( !( I2C2->SR1 & I2C_SR1_ADDR ) )
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <USER_I2C_Address+0xc0>)
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <USER_I2C_Address+0xae>
      while ( I2C2->SR1 & I2C_SR1_ADDR )
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <USER_I2C_Address+0xc0>)
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1eb      	bne.n	80025fc <USER_I2C_Address+0x80>
}
 8002624:	e002      	b.n	800262c <USER_I2C_Address+0xb0>
	      break;
 8002626:	bf00      	nop
 8002628:	e000      	b.n	800262c <USER_I2C_Address+0xb0>
	      break;
 800262a:	bf00      	nop
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40005400 	.word	0x40005400
 800263c:	40005800 	.word	0x40005800

08002640 <USER_I2C_Data>:

// Send data via I2C

void USER_I2C_Data( uint8_t I2C, uint8_t data )
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	460a      	mov	r2, r1
 800264a:	71fb      	strb	r3, [r7, #7]
 800264c:	4613      	mov	r3, r2
 800264e:	71bb      	strb	r3, [r7, #6]

  if( I2C == 0 )
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d111      	bne.n	800267a <USER_I2C_Data+0x3a>
  {
      while( !( I2C1->SR1 & I2C_SR1_TXE ) );		// While data register not empty
 8002656:	bf00      	nop
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <USER_I2C_Data+0x6c>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f9      	beq.n	8002658 <USER_I2C_Data+0x18>
      I2C1->DR = data;
 8002664:	4a11      	ldr	r2, [pc, #68]	; (80026ac <USER_I2C_Data+0x6c>)
 8002666:	79bb      	ldrb	r3, [r7, #6]
 8002668:	6113      	str	r3, [r2, #16]
      while( !( I2C1->SR1 & I2C_SR1_TXE ) );
 800266a:	bf00      	nop
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <USER_I2C_Data+0x6c>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f9      	beq.n	800266c <USER_I2C_Data+0x2c>
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );		// While data register not empty
      I2C2->DR = data;
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );
  }

}
 8002678:	e013      	b.n	80026a2 <USER_I2C_Data+0x62>
  else if ( I2C == 1 )
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d110      	bne.n	80026a2 <USER_I2C_Data+0x62>
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );		// While data register not empty
 8002680:	bf00      	nop
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <USER_I2C_Data+0x70>)
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f9      	beq.n	8002682 <USER_I2C_Data+0x42>
      I2C2->DR = data;
 800268e:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <USER_I2C_Data+0x70>)
 8002690:	79bb      	ldrb	r3, [r7, #6]
 8002692:	6113      	str	r3, [r2, #16]
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );
 8002694:	bf00      	nop
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <USER_I2C_Data+0x70>)
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f9      	beq.n	8002696 <USER_I2C_Data+0x56>
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40005400 	.word	0x40005400
 80026b0:	40005800 	.word	0x40005800

080026b4 <USER_I2C_Stop>:

// Stop I2C

void USER_I2C_Stop( uint8_t I2C )
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t tmp;

  if( I2C == 0 )
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10e      	bne.n	80026e2 <USER_I2C_Stop+0x2e>
  {
      tmp = I2C1->SR1;
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <USER_I2C_Stop+0x5c>)
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	81fb      	strh	r3, [r7, #14]
      tmp = I2C1->SR2;
 80026cc:	4b10      	ldr	r3, [pc, #64]	; (8002710 <USER_I2C_Stop+0x5c>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	81fb      	strh	r3, [r7, #14]
      I2C1->CR1		|=	I2C_CR1_STOP;		// Stop generation
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <USER_I2C_Stop+0x5c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <USER_I2C_Stop+0x5c>)
 80026da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026de:	6013      	str	r3, [r2, #0]
      tmp = I2C2->SR1;
      tmp = I2C2->SR2;
      I2C2->CR1		|=	I2C_CR1_STOP;		// Stop generation
  }

}
 80026e0:	e010      	b.n	8002704 <USER_I2C_Stop+0x50>
  else if ( I2C == 1 )
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d10d      	bne.n	8002704 <USER_I2C_Stop+0x50>
      tmp = I2C2->SR1;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <USER_I2C_Stop+0x60>)
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	81fb      	strh	r3, [r7, #14]
      tmp = I2C2->SR2;
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <USER_I2C_Stop+0x60>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	81fb      	strh	r3, [r7, #14]
      I2C2->CR1		|=	I2C_CR1_STOP;		// Stop generation
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <USER_I2C_Stop+0x60>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a05      	ldr	r2, [pc, #20]	; (8002714 <USER_I2C_Stop+0x60>)
 80026fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40005400 	.word	0x40005400
 8002714:	40005800 	.word	0x40005800

08002718 <USER_LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

// Function that initializes the LCD to 4 bits

void USER_LCD_Init(void){
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0

	// RCC_APB2ENR modified to IO port C clock enable

	RCC->APB2ENR	|=	RCC_APB2ENR_IOPCEN;	// To set IOPCEN bit
 800271e:	4b66      	ldr	r3, [pc, #408]	; (80028b8 <USER_LCD_Init+0x1a0>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	4a65      	ldr	r2, [pc, #404]	; (80028b8 <USER_LCD_Init+0x1a0>)
 8002724:	f043 0310 	orr.w	r3, r3, #16
 8002728:	6193      	str	r3, [r2, #24]

	int8_t const *p;

	// Configuration of all pins to the LCD as general-purpose output push-pull, 10 MHz speed

	GPIOC->CRL	&=	~( 0x3UL << 30U ) & ~( 0x2UL << 28U )
 800272a:	4b64      	ldr	r3, [pc, #400]	; (80028bc <USER_LCD_Init+0x1a4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a63      	ldr	r2, [pc, #396]	; (80028bc <USER_LCD_Init+0x1a4>)
 8002730:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002734:	6013      	str	r3, [r2, #0]
			& 	~( 0x3UL << 26U ) & ~( 0x2UL << 24U );
	GPIOC->CRL 	|= 	 ( 0x1UL << 28U )
 8002736:	4b61      	ldr	r3, [pc, #388]	; (80028bc <USER_LCD_Init+0x1a4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a60      	ldr	r2, [pc, #384]	; (80028bc <USER_LCD_Init+0x1a4>)
 800273c:	f043 5388 	orr.w	r3, r3, #285212672	; 0x11000000
 8002740:	6013      	str	r3, [r2, #0]
			|  	 ( 0x1UL << 24U );
	GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U )
 8002742:	4b5e      	ldr	r3, [pc, #376]	; (80028bc <USER_LCD_Init+0x1a4>)
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	495d      	ldr	r1, [pc, #372]	; (80028bc <USER_LCD_Init+0x1a4>)
 8002748:	4b5d      	ldr	r3, [pc, #372]	; (80028c0 <USER_LCD_Init+0x1a8>)
 800274a:	4013      	ands	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
			& 	~( 0x3UL << 14U ) & ~( 0x2UL << 12U )
			&	~( 0x3UL << 10U ) & ~( 0x2UL <<  8U )
			& 	~( 0x3UL <<  6U ) & ~( 0x2UL <<  4U )
			& 	~( 0x3UL <<  2U ) & ~( 0x2UL <<  0U );
	GPIOC->CRH	|= 	 ( 0x1UL << 16U )
 800274e:	4b5b      	ldr	r3, [pc, #364]	; (80028bc <USER_LCD_Init+0x1a4>)
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	495a      	ldr	r1, [pc, #360]	; (80028bc <USER_LCD_Init+0x1a4>)
 8002754:	4b5b      	ldr	r3, [pc, #364]	; (80028c4 <USER_LCD_Init+0x1ac>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
			|  	 ( 0x1UL << 12U )
			| 	 ( 0x1UL <<  8U )
			|  	 ( 0x1UL <<  4U )
			|  	 ( 0x1UL <<  0U );

	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 800275a:	4b58      	ldr	r3, [pc, #352]	; (80028bc <USER_LCD_Init+0x1a4>)
 800275c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002760:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_LOW;
 8002762:	4b56      	ldr	r3, [pc, #344]	; (80028bc <USER_LCD_Init+0x1a4>)
 8002764:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002768:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_LOW;
 800276a:	4b54      	ldr	r3, [pc, #336]	; (80028bc <USER_LCD_Init+0x1a4>)
 800276c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002770:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 8002772:	4b52      	ldr	r3, [pc, #328]	; (80028bc <USER_LCD_Init+0x1a4>)
 8002774:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002778:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_LOW;
 800277a:	4b50      	ldr	r3, [pc, #320]	; (80028bc <USER_LCD_Init+0x1a4>)
 800277c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002780:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002782:	4b4e      	ldr	r3, [pc, #312]	; (80028bc <USER_LCD_Init+0x1a4>)
 8002784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002788:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 800278a:	4b4c      	ldr	r3, [pc, #304]	; (80028bc <USER_LCD_Init+0x1a4>)
 800278c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002790:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_50MS, TIM_CNT_50MS );		//	50 ms
 8002792:	22e6      	movs	r2, #230	; 0xe6
 8002794:	2130      	movs	r1, #48	; 0x30
 8002796:	2000      	movs	r0, #0
 8002798:	f001 fa3a 	bl	8003c10 <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 800279c:	4b47      	ldr	r3, [pc, #284]	; (80028bc <USER_LCD_Init+0x1a4>)
 800279e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a2:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 80027a4:	4b45      	ldr	r3, [pc, #276]	; (80028bc <USER_LCD_Init+0x1a4>)
 80027a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027aa:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80027ac:	4b43      	ldr	r3, [pc, #268]	; (80028bc <USER_LCD_Init+0x1a4>)
 80027ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027b2:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80027b4:	4b41      	ldr	r3, [pc, #260]	; (80028bc <USER_LCD_Init+0x1a4>)
 80027b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ba:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 80027bc:	f000 f9a6 	bl	8002b0c <LCD_Pulse_EN>

	USER_TIM_Delay( TIM_2, TIM_PSC_5MS, TIM_CNT_5MS );		//	5 ms
 80027c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80027c4:	2104      	movs	r1, #4
 80027c6:	2000      	movs	r0, #0
 80027c8:	f001 fa22 	bl	8003c10 <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 80027cc:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <USER_LCD_Init+0x1a4>)
 80027ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d2:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 80027d4:	4b39      	ldr	r3, [pc, #228]	; (80028bc <USER_LCD_Init+0x1a4>)
 80027d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027da:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80027dc:	4b37      	ldr	r3, [pc, #220]	; (80028bc <USER_LCD_Init+0x1a4>)
 80027de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027e2:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80027e4:	4b35      	ldr	r3, [pc, #212]	; (80028bc <USER_LCD_Init+0x1a4>)
 80027e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ea:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 80027ec:	f000 f98e 	bl	8002b0c <LCD_Pulse_EN>

	USER_TIM_Delay( TIM_2, TIM_PSC_100US, TIM_CNT_100US );		//	100 us
 80027f0:	f44f 4267 	mov.w	r2, #59136	; 0xe700
 80027f4:	2100      	movs	r1, #0
 80027f6:	2000      	movs	r0, #0
 80027f8:	f001 fa0a 	bl	8003c10 <USER_TIM_Delay>

	/* Special case of 'Function Set'	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 80027fc:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <USER_LCD_Init+0x1a4>)
 80027fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002802:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8002804:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <USER_LCD_Init+0x1a4>)
 8002806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800280a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <USER_LCD_Init+0x1a4>)
 800280e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002812:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8002814:	4b29      	ldr	r3, [pc, #164]	; (80028bc <USER_LCD_Init+0x1a4>)
 8002816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800281a:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 800281c:	f000 f976 	bl	8002b0c <LCD_Pulse_EN>
	while( LCD_Busy( ) );					//	Checking the busy flag
 8002820:	bf00      	nop
 8002822:	f000 f91f 	bl	8002a64 <LCD_Busy>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1fa      	bne.n	8002822 <USER_LCD_Init+0x10a>

	/* Initial 'Function Set' to change 4-bit mode	*/

	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <USER_LCD_Init+0x1a4>)
 800282e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002832:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8002834:	4b21      	ldr	r3, [pc, #132]	; (80028bc <USER_LCD_Init+0x1a4>)
 8002836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800283a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 800283c:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <USER_LCD_Init+0x1a4>)
 800283e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002842:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <USER_LCD_Init+0x1a4>)
 8002846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800284a:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 800284c:	f000 f95e 	bl	8002b0c <LCD_Pulse_EN>
	while( LCD_Busy( ) );					//	Checking the busy flag
 8002850:	bf00      	nop
 8002852:	f000 f907 	bl	8002a64 <LCD_Busy>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1fa      	bne.n	8002852 <USER_LCD_Init+0x13a>

	/* 'Function Set' (I=1, N and F as required)	*/

	LCD_Write_Cmd( 0x28U );					//	2-line display, 5x7 dot
 800285c:	2028      	movs	r0, #40	; 0x28
 800285e:	f000 f89b 	bl	8002998 <LCD_Write_Cmd>

	/* 'Display ON/OFF Control' (D=0, C=0, B=0)	*/

	LCD_Write_Cmd( 0x08U );					//	Display, cursor and blinking off
 8002862:	2008      	movs	r0, #8
 8002864:	f000 f898 	bl	8002998 <LCD_Write_Cmd>

	/* 'Clear Display' */

	LCD_Write_Cmd( 0x01U );//
 8002868:	2001      	movs	r0, #1
 800286a:	f000 f895 	bl	8002998 <LCD_Write_Cmd>

	/* 'Entry Mode Set' (I/D and S as required)	*/

	LCD_Write_Cmd( 0x06U );					//	Cursor increment by 1, shift off
 800286e:	2006      	movs	r0, #6
 8002870:	f000 f892 	bl	8002998 <LCD_Write_Cmd>

	/* Initialization Ends	*/

	LCD_Write_Cmd( 0x0FU );					//	Display, cursor and blinking on
 8002874:	200f      	movs	r0, #15
 8002876:	f000 f88f 	bl	8002998 <LCD_Write_Cmd>

	//	Load the character defined by the user into the CGRAM

	LCD_Write_Cmd( 0x40 );					//	Set the CGRAM address to 0
 800287a:	2040      	movs	r0, #64	; 0x40
 800287c:	f000 f88c 	bl	8002998 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <USER_LCD_Init+0x1b0>)
 8002882:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8002884:	2300      	movs	r3, #0
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	e00c      	b.n	80028a4 <USER_LCD_Init+0x18c>
		LCD_Put_Char( *p );
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f993 3000 	ldrsb.w	r3, [r3]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f894 	bl	80029c0 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3301      	adds	r3, #1
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b3f      	cmp	r3, #63	; 0x3f
 80028a8:	d9ef      	bls.n	800288a <USER_LCD_Init+0x172>

	/*	Set DDRAM address in address	*/

	LCD_Write_Cmd( 0x80 );//
 80028aa:	2080      	movs	r0, #128	; 0x80
 80028ac:	f000 f874 	bl	8002998 <LCD_Write_Cmd>
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40011000 	.word	0x40011000
 80028c0:	fff11111 	.word	0xfff11111
 80028c4:	00011111 	.word	0x00011111
 80028c8:	0800aa28 	.word	0x0800aa28

080028cc <LCD_Out_Data4>:

// Function that generates a strobe on the LCD

void LCD_Out_Data4(uint8_t val)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )				//	Bit[0]
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d004      	beq.n	80028ea <LCD_Out_Data4+0x1e>
		GPIOC->BSRR	=	LCD_D4_PIN_HIGH;
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <LCD_Out_Data4+0x84>)
 80028e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e6:	611a      	str	r2, [r3, #16]
 80028e8:	e003      	b.n	80028f2 <LCD_Out_Data4+0x26>
	else
		GPIOC->BSRR	=	LCD_D4_PIN_LOW;
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <LCD_Out_Data4+0x84>)
 80028ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028f0:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )				//	Bit[1]
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d004      	beq.n	8002906 <LCD_Out_Data4+0x3a>
		GPIOC->BSRR	=	LCD_D5_PIN_HIGH;
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <LCD_Out_Data4+0x84>)
 80028fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002902:	611a      	str	r2, [r3, #16]
 8002904:	e003      	b.n	800290e <LCD_Out_Data4+0x42>
	else
		GPIOC->BSRR	=	LCD_D5_PIN_LOW;
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <LCD_Out_Data4+0x84>)
 8002908:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800290c:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )				//	Bit[2]
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <LCD_Out_Data4+0x56>
		GPIOC->BSRR	=	LCD_D6_PIN_HIGH;
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <LCD_Out_Data4+0x84>)
 800291a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800291e:	611a      	str	r2, [r3, #16]
 8002920:	e003      	b.n	800292a <LCD_Out_Data4+0x5e>
	else
		GPIOC->BSRR	=	LCD_D6_PIN_LOW;
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <LCD_Out_Data4+0x84>)
 8002924:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002928:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )				//	Bit[3]
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <LCD_Out_Data4+0x72>
		GPIOC->BSRR	=	LCD_D7_PIN_HIGH;
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <LCD_Out_Data4+0x84>)
 8002936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800293a:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
}
 800293c:	e003      	b.n	8002946 <LCD_Out_Data4+0x7a>
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <LCD_Out_Data4+0x84>)
 8002940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002944:	611a      	str	r2, [r3, #16]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	40011000 	.word	0x40011000

08002954 <LCD_Write_Byte>:

// Function that writes 1 byte of data to the LCD

void LCD_Write_Byte(uint8_t val)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ffb1 	bl	80028cc <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800296a:	f000 f8cf 	bl	8002b0c <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	b2db      	uxtb	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ffa8 	bl	80028cc <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800297c:	f000 f8c6 	bl	8002b0c <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 8002980:	bf00      	nop
 8002982:	f000 f86f 	bl	8002a64 <LCD_Busy>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1fa      	bne.n	8002982 <LCD_Write_Byte+0x2e>
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <LCD_Write_Cmd>:

// Function that writes a command to the LCD

void LCD_Write_Cmd( uint8_t val )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_LOW;			//	RS=0 (character selection)
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <LCD_Write_Cmd+0x24>)
 80029a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80029a8:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ffd1 	bl	8002954 <LCD_Write_Byte>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40011000 	.word	0x40011000

080029c0 <LCD_Put_Char>:

// Write an ASCII character to the LCD

void LCD_Put_Char( uint8_t c )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_HIGH;		//	RS=1 (character selection)
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <LCD_Put_Char+0x20>)
 80029cc:	2240      	movs	r2, #64	; 0x40
 80029ce:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ffbe 	bl	8002954 <LCD_Write_Byte>
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40011000 	.word	0x40011000

080029e4 <LCD_Set_Cursor>:

// Function that sets the cursor to a position on the LCD screen
// Minimum values for line and column must be 1

void LCD_Set_Cursor( uint8_t line, uint8_t column )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	460a      	mov	r2, r1
 80029ee:	71fb      	strb	r3, [r7, #7]
 80029f0:	4613      	mov	r3, r2
 80029f2:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	column--;
 80029f4:	79bb      	ldrb	r3, [r7, #6]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	71bb      	strb	r3, [r7, #6]
	line--;
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	71fb      	strb	r3, [r7, #7]
	address = ( line * 0x40U ) + column;
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	019b      	lsls	r3, r3, #6
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	79bb      	ldrb	r3, [r7, #6]
 8002a08:	4413      	add	r3, r2
 8002a0a:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	3b80      	subs	r3, #128	; 0x80
 8002a16:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ffbc 	bl	8002998 <LCD_Write_Cmd>
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <LCD_Put_Str>:

// Function that sends a string of ASCII characters to the LCD

void LCD_Put_Str( char * str )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	for( int16_t i = 0; i < 16; i++ )
 8002a30:	2300      	movs	r3, #0
 8002a32:	81fb      	strh	r3, [r7, #14]
 8002a34:	e00d      	b.n	8002a52 <LCD_Put_Str+0x2a>
		LCD_Put_Char( str[ i ] );			//	Send 1 byte to the LCD
 8002a36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ffbd 	bl	80029c0 <LCD_Put_Char>
	for( int16_t i = 0; i < 16; i++ )
 8002a46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	81fb      	strh	r3, [r7, #14]
 8002a52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a56:	2b0f      	cmp	r3, #15
 8002a58:	dded      	ble.n	8002a36 <LCD_Put_Str+0xe>
}
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <LCD_Busy>:
}

// Function that causes delays on the LCD

char LCD_Busy( void )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
	// Configuration of D7 as input floating

	GPIOC->CRH	&=	~( 0x2UL << 18U ) & ~( 0x3UL << 16U );
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <LCD_Busy+0xa4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a26      	ldr	r2, [pc, #152]	; (8002b08 <LCD_Busy+0xa4>)
 8002a6e:	f423 2330 	bic.w	r3, r3, #720896	; 0xb0000
 8002a72:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=   	 ( 0x1UL << 18U );
 8002a74:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <LCD_Busy+0xa4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <LCD_Busy+0xa4>)
 8002a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7e:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 8002a80:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <LCD_Busy+0xa4>)
 8002a82:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a86:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_HIGH;
 8002a88:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <LCD_Busy+0xa4>)
 8002a8a:	2280      	movs	r2, #128	; 0x80
 8002a8c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_HIGH;
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <LCD_Busy+0xa4>)
 8002a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a94:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_100US, TIM_CNT_100US );	//	100 us
 8002a96:	f44f 4267 	mov.w	r2, #59136	; 0xe700
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f001 f8b7 	bl	8003c10 <USER_TIM_Delay>

	if(( GPIOC->IDR	& LCD_D7_PIN_HIGH )) 			//	If D7 is set, then
 8002aa2:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <LCD_Busy+0xa4>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d015      	beq.n	8002ada <LCD_Busy+0x76>
	{
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <LCD_Busy+0xa4>)
 8002ab0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ab4:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <LCD_Busy+0xa4>)
 8002ab8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002abc:	611a      	str	r2, [r3, #16]

	// Configuration of D7 as output push-pull, 10 MHz speed

		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 8002abe:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <LCD_Busy+0xa4>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <LCD_Busy+0xa4>)
 8002ac4:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8002ac8:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <LCD_Busy+0xa4>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <LCD_Busy+0xa4>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6053      	str	r3, [r2, #4]

		return 1;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e014      	b.n	8002b04 <LCD_Busy+0xa0>
	}
	else
	{
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <LCD_Busy+0xa4>)
 8002adc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ae0:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <LCD_Busy+0xa4>)
 8002ae4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ae8:	611a      	str	r2, [r3, #16]

	// Configuration of D7 as output push-pull, 10 MHz speed

		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <LCD_Busy+0xa4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a06      	ldr	r2, [pc, #24]	; (8002b08 <LCD_Busy+0xa4>)
 8002af0:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8002af4:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 8002af6:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <LCD_Busy+0xa4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4a03      	ldr	r2, [pc, #12]	; (8002b08 <LCD_Busy+0xa4>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b00:	6053      	str	r3, [r2, #4]

		return 0;
 8002b02:	2300      	movs	r3, #0
	}
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40011000 	.word	0x40011000

08002b0c <LCD_Pulse_EN>:

// Function that generates a pulse on the EN pin of the LCD

void LCD_Pulse_EN( void )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	LCD_EN_PIN_LOW;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <LCD_Pulse_EN+0x44>)
 8002b12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b16:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_10US, TIM_CNT_10US );	//	10 us
 8002b18:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f001 f876 	bl	8003c10 <USER_TIM_Delay>

	GPIOC->BSRR	=	LCD_EN_PIN_HIGH;		//	Enable pin EN ON
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <LCD_Pulse_EN+0x44>)
 8002b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b2a:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_10US, TIM_CNT_10US );	//	10 us
 8002b2c:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8002b30:	2100      	movs	r1, #0
 8002b32:	2000      	movs	r0, #0
 8002b34:	f001 f86c 	bl	8003c10 <USER_TIM_Delay>

	GPIOC->BSRR	=	LCD_EN_PIN_LOW;			//	Enable pin EN OFF
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <LCD_Pulse_EN+0x44>)
 8002b3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b3e:	611a      	str	r2, [r3, #16]

	USER_TIM_Delay( TIM_2, TIM_PSC_1MS, TIM_CNT_1MS );	//	1 ms
 8002b40:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002b44:	2100      	movs	r1, #0
 8002b46:	2000      	movs	r0, #0
 8002b48:	f001 f862 	bl	8003c10 <USER_TIM_Delay>
}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40011000 	.word	0x40011000

08002b54 <USER_LEDS_Init>:
#include "main.h"
#include "GPIO.h"
#include "TIMER.h"

void USER_LEDS_Init( void )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  // Pin PC2 as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTC, 2, OUT_50, OUT_GP_PP );
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	2002      	movs	r0, #2
 8002b60:	f7ff fad0 	bl	8002104 <USER_GPIO_Define>
  USER_GPIO_Write( PORTC, 2, 0 );
 8002b64:	2200      	movs	r2, #0
 8002b66:	2102      	movs	r1, #2
 8002b68:	2002      	movs	r0, #2
 8002b6a:	f7ff fbe5 	bl	8002338 <USER_GPIO_Write>

  // Pin PC3 as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTC, 3, OUT_50, OUT_GP_PP );
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2203      	movs	r2, #3
 8002b72:	2103      	movs	r1, #3
 8002b74:	2002      	movs	r0, #2
 8002b76:	f7ff fac5 	bl	8002104 <USER_GPIO_Define>
  USER_GPIO_Write( PORTC, 3, 0 );
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2103      	movs	r1, #3
 8002b7e:	2002      	movs	r0, #2
 8002b80:	f7ff fbda 	bl	8002338 <USER_GPIO_Write>

  USER_TIM_Init( TIM_3 );
 8002b84:	2001      	movs	r0, #1
 8002b86:	f000 ff85 	bl	8003a94 <USER_TIM_Init>
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <USER_MATRIX_KEYPAD_Init>:
};

// Initialize matrix keypad

void USER_MATRIX_KEYPAD_Init( void )
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	af00      	add	r7, sp, #0
  // Pin PC5 (Row 1) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTC, 5, OUT_50, OUT_GP_PP );
 8002b92:	2300      	movs	r3, #0
 8002b94:	2203      	movs	r2, #3
 8002b96:	2105      	movs	r1, #5
 8002b98:	2002      	movs	r0, #2
 8002b9a:	f7ff fab3 	bl	8002104 <USER_GPIO_Define>
  USER_GPIO_Write( PORTC, 5, 1 );
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	2105      	movs	r1, #5
 8002ba2:	2002      	movs	r0, #2
 8002ba4:	f7ff fbc8 	bl	8002338 <USER_GPIO_Write>

  // Pin PA12 (Row 2) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTA, 12, OUT_50, OUT_GP_PP );
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2203      	movs	r2, #3
 8002bac:	210c      	movs	r1, #12
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7ff faa8 	bl	8002104 <USER_GPIO_Define>
  USER_GPIO_Write( PORTA, 12, 1 );
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	210c      	movs	r1, #12
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7ff fbbd 	bl	8002338 <USER_GPIO_Write>

  // Pin PA11 (Row 3) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTA, 11, OUT_50, OUT_GP_PP );
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	210b      	movs	r1, #11
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7ff fa9d 	bl	8002104 <USER_GPIO_Define>
  USER_GPIO_Write( PORTA, 11, 1 );
 8002bca:	2201      	movs	r2, #1
 8002bcc:	210b      	movs	r1, #11
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7ff fbb2 	bl	8002338 <USER_GPIO_Write>

  // Pin PB12 (Row 4) as general purpose output push-pull, max speed 50 MHz

  USER_GPIO_Define( PORTB, 12, OUT_50, OUT_GP_PP );
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	210c      	movs	r1, #12
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f7ff fa92 	bl	8002104 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 12, 1 );
 8002be0:	2201      	movs	r2, #1
 8002be2:	210c      	movs	r1, #12
 8002be4:	2001      	movs	r0, #1
 8002be6:	f7ff fba7 	bl	8002338 <USER_GPIO_Write>

  // Pin PB1 (Col 1) as input pull up

  USER_GPIO_Define( PORTB, 1, INP, INP_PP );
 8002bea:	2302      	movs	r3, #2
 8002bec:	2200      	movs	r2, #0
 8002bee:	2101      	movs	r1, #1
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f7ff fa87 	bl	8002104 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 1, 1 );
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	f7ff fb9c 	bl	8002338 <USER_GPIO_Write>

  // Pin PB15 (Col 2) as input pull up

  USER_GPIO_Define( PORTB, 15, INP, INP_PP );
 8002c00:	2302      	movs	r3, #2
 8002c02:	2200      	movs	r2, #0
 8002c04:	210f      	movs	r1, #15
 8002c06:	2001      	movs	r0, #1
 8002c08:	f7ff fa7c 	bl	8002104 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 15, 1 );
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	210f      	movs	r1, #15
 8002c10:	2001      	movs	r0, #1
 8002c12:	f7ff fb91 	bl	8002338 <USER_GPIO_Write>

  // Pin PB14 (Col 3) as input pull up

  USER_GPIO_Define( PORTB, 14, INP, INP_PP );
 8002c16:	2302      	movs	r3, #2
 8002c18:	2200      	movs	r2, #0
 8002c1a:	210e      	movs	r1, #14
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	f7ff fa71 	bl	8002104 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 14, 1 );
 8002c22:	2201      	movs	r2, #1
 8002c24:	210e      	movs	r1, #14
 8002c26:	2001      	movs	r0, #1
 8002c28:	f7ff fb86 	bl	8002338 <USER_GPIO_Write>

  // Pin PB13 (Col 4) as input pull up

  USER_GPIO_Define( PORTB, 13, INP, INP_PP );
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	2200      	movs	r2, #0
 8002c30:	210d      	movs	r1, #13
 8002c32:	2001      	movs	r0, #1
 8002c34:	f7ff fa66 	bl	8002104 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 13, 1 );
 8002c38:	2201      	movs	r2, #1
 8002c3a:	210d      	movs	r1, #13
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f7ff fb7b 	bl	8002338 <USER_GPIO_Write>
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <USER_MATRIX_KEYPAD_Read>:

// Read matrix keypad

char USER_MATRIX_KEYPAD_Read( void )
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
  char selectedKey = 'N';				// Default character
 8002c4e:	234e      	movs	r3, #78	; 0x4e
 8002c50:	71fb      	strb	r3, [r7, #7]

  for (uint8_t i = 0; i < NUMBER_OF_ELEMENTS; i++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	71bb      	strb	r3, [r7, #6]
 8002c56:	e061      	b.n	8002d1c <USER_MATRIX_KEYPAD_Read+0xd4>
  {
    if( i == 0 )
 8002c58:	79bb      	ldrb	r3, [r7, #6]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d108      	bne.n	8002c70 <USER_MATRIX_KEYPAD_Read+0x28>
    {
       GPIOC->BSRR = (1 << (R_POSITIONS[i] + 16));
 8002c5e:	79bb      	ldrb	r3, [r7, #6]
 8002c60:	4a33      	ldr	r2, [pc, #204]	; (8002d30 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002c62:	5cd3      	ldrb	r3, [r2, r3]
 8002c64:	3310      	adds	r3, #16
 8002c66:	2201      	movs	r2, #1
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <USER_MATRIX_KEYPAD_Read+0xec>)
 8002c6c:	611a      	str	r2, [r3, #16]
 8002c6e:	e013      	b.n	8002c98 <USER_MATRIX_KEYPAD_Read+0x50>
    }
    else if( i == 3 )
 8002c70:	79bb      	ldrb	r3, [r7, #6]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d108      	bne.n	8002c88 <USER_MATRIX_KEYPAD_Read+0x40>
    {
       GPIOB->BSRR = (1 << (R_POSITIONS[i] + 16));
 8002c76:	79bb      	ldrb	r3, [r7, #6]
 8002c78:	4a2d      	ldr	r2, [pc, #180]	; (8002d30 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	3310      	adds	r3, #16
 8002c7e:	2201      	movs	r2, #1
 8002c80:	409a      	lsls	r2, r3
 8002c82:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <USER_MATRIX_KEYPAD_Read+0xf0>)
 8002c84:	611a      	str	r2, [r3, #16]
 8002c86:	e007      	b.n	8002c98 <USER_MATRIX_KEYPAD_Read+0x50>
    }
    else
    {
       GPIOA->BSRR = (1 << (R_POSITIONS[i] + 16));
 8002c88:	79bb      	ldrb	r3, [r7, #6]
 8002c8a:	4a29      	ldr	r2, [pc, #164]	; (8002d30 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002c8c:	5cd3      	ldrb	r3, [r2, r3]
 8002c8e:	3310      	adds	r3, #16
 8002c90:	2201      	movs	r2, #1
 8002c92:	409a      	lsls	r2, r3
 8002c94:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <USER_MATRIX_KEYPAD_Read+0xf4>)
 8002c96:	611a      	str	r2, [r3, #16]
    }

    for (uint8_t j = 0; j < NUMBER_OF_ELEMENTS; j++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	717b      	strb	r3, [r7, #5]
 8002c9c:	e015      	b.n	8002cca <USER_MATRIX_KEYPAD_Read+0x82>
    {
      if ( !( GPIOB->IDR & (1 << C_POSITIONS[j]) ) )
 8002c9e:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <USER_MATRIX_KEYPAD_Read+0xf0>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	797a      	ldrb	r2, [r7, #5]
 8002ca4:	4926      	ldr	r1, [pc, #152]	; (8002d40 <USER_MATRIX_KEYPAD_Read+0xf8>)
 8002ca6:	5c8a      	ldrb	r2, [r1, r2]
 8002ca8:	4611      	mov	r1, r2
 8002caa:	2201      	movs	r2, #1
 8002cac:	408a      	lsls	r2, r1
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d107      	bne.n	8002cc4 <USER_MATRIX_KEYPAD_Read+0x7c>
      {
	  selectedKey = keys[i][j];
 8002cb4:	79ba      	ldrb	r2, [r7, #6]
 8002cb6:	797b      	ldrb	r3, [r7, #5]
 8002cb8:	4922      	ldr	r1, [pc, #136]	; (8002d44 <USER_MATRIX_KEYPAD_Read+0xfc>)
 8002cba:	0092      	lsls	r2, r2, #2
 8002cbc:	440a      	add	r2, r1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < NUMBER_OF_ELEMENTS; j++)
 8002cc4:	797b      	ldrb	r3, [r7, #5]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	717b      	strb	r3, [r7, #5]
 8002cca:	797b      	ldrb	r3, [r7, #5]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d9e6      	bls.n	8002c9e <USER_MATRIX_KEYPAD_Read+0x56>
      }
    }

    if( i == 0 )
 8002cd0:	79bb      	ldrb	r3, [r7, #6]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <USER_MATRIX_KEYPAD_Read+0xa2>
    {
      GPIOC->BSRR = (1 << R_POSITIONS[i]);
 8002cd6:	79bb      	ldrb	r3, [r7, #6]
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2301      	movs	r3, #1
 8002ce0:	fa03 f202 	lsl.w	r2, r3, r2
 8002ce4:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <USER_MATRIX_KEYPAD_Read+0xec>)
 8002ce6:	611a      	str	r2, [r3, #16]
 8002ce8:	e015      	b.n	8002d16 <USER_MATRIX_KEYPAD_Read+0xce>
    }
    else if( i == 3 )
 8002cea:	79bb      	ldrb	r3, [r7, #6]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d109      	bne.n	8002d04 <USER_MATRIX_KEYPAD_Read+0xbc>
    {
      GPIOB->BSRR = (1 << R_POSITIONS[i]);
 8002cf0:	79bb      	ldrb	r3, [r7, #6]
 8002cf2:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002cf4:	5cd3      	ldrb	r3, [r2, r3]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	fa03 f202 	lsl.w	r2, r3, r2
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <USER_MATRIX_KEYPAD_Read+0xf0>)
 8002d00:	611a      	str	r2, [r3, #16]
 8002d02:	e008      	b.n	8002d16 <USER_MATRIX_KEYPAD_Read+0xce>
    }
    else
    {
      GPIOA->BSRR = (1 << R_POSITIONS[i]);
 8002d04:	79bb      	ldrb	r3, [r7, #6]
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <USER_MATRIX_KEYPAD_Read+0xe8>)
 8002d08:	5cd3      	ldrb	r3, [r2, r3]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	fa03 f202 	lsl.w	r2, r3, r2
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <USER_MATRIX_KEYPAD_Read+0xf4>)
 8002d14:	611a      	str	r2, [r3, #16]
  for (uint8_t i = 0; i < NUMBER_OF_ELEMENTS; i++)
 8002d16:	79bb      	ldrb	r3, [r7, #6]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	71bb      	strb	r3, [r7, #6]
 8002d1c:	79bb      	ldrb	r3, [r7, #6]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d99a      	bls.n	8002c58 <USER_MATRIX_KEYPAD_Read+0x10>
    }
  }

  return selectedKey;
 8002d22:	79fb      	ldrb	r3, [r7, #7]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000000 	.word	0x20000000
 8002d34:	40011000 	.word	0x40011000
 8002d38:	40010c00 	.word	0x40010c00
 8002d3c:	40010800 	.word	0x40010800
 8002d40:	20000004 	.word	0x20000004
 8002d44:	20000008 	.word	0x20000008

08002d48 <USER_OLED_Command_1_Byte>:
#include "SYSTICK.h"

// Send a 1 byte command to the OLED

void USER_OLED_Command_1_Byte( uint8_t I2C, uint8_t data )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460a      	mov	r2, r1
 8002d52:	71fb      	strb	r3, [r7, #7]
 8002d54:	4613      	mov	r3, r2
 8002d56:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Start( I2C );
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fbde 	bl	800251c <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	2200      	movs	r2, #0
 8002d64:	2178      	movs	r1, #120	; 0x78
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fc08 	bl	800257c <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x00 );				// Control function for a command
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fc65 	bl	8002640 <USER_I2C_Data>
  USER_I2C_Data( I2C, data );
 8002d76:	79ba      	ldrb	r2, [r7, #6]
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fc5f 	bl	8002640 <USER_I2C_Data>

  USER_I2C_Stop( I2C );
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fc95 	bl	80026b4 <USER_I2C_Stop>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <USER_OLED_Command_2_Byte>:

// Send a 2 byte command to the OLED

void USER_OLED_Command_2_Byte( uint8_t I2C, uint8_t data[] )
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	6039      	str	r1, [r7, #0]
 8002d9c:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]

  USER_I2C_Start( I2C );
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fbb9 	bl	800251c <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2178      	movs	r1, #120	; 0x78
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fbe3 	bl	800257c <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x00 );	// Control function for a command
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fc40 	bl	8002640 <USER_I2C_Data>

  for(i = 0; i < 2; i++)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	e00b      	b.n	8002dde <USER_OLED_Command_2_Byte+0x4c>
  {
      USER_I2C_Data( I2C, data[i] );
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fc34 	bl	8002640 <USER_I2C_Data>
  for(i = 0; i < 2; i++)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d9f0      	bls.n	8002dc6 <USER_OLED_Command_2_Byte+0x34>
  }

  USER_I2C_Stop( I2C );
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fc64 	bl	80026b4 <USER_I2C_Stop>
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <USER_OLED_Init>:

// Initialize OLED

void USER_OLED_Init( uint8_t I2C, uint8_t screen_size )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	71fb      	strb	r3, [r7, #7]
 8002e00:	4613      	mov	r3, r2
 8002e02:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Init( I2C, I2C_FM );
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	212d      	movs	r1, #45	; 0x2d
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fb13 	bl	8002434 <USER_I2C_Init>

  uint8_t cmd_1[] = {0xA8, 0x3F};
 8002e0e:	f643 73a8 	movw	r3, #16296	; 0x3fa8
 8002e12:	84bb      	strh	r3, [r7, #36]	; 0x24
  USER_OLED_Command_2_Byte( I2C, cmd_1 );
 8002e14:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ffb8 	bl	8002d92 <USER_OLED_Command_2_Byte>

  uint8_t cmd_2[] = {0xD3, 0x00};
 8002e22:	23d3      	movs	r3, #211	; 0xd3
 8002e24:	843b      	strh	r3, [r7, #32]
  USER_OLED_Command_2_Byte( I2C, cmd_2 );
 8002e26:	f107 0220 	add.w	r2, r7, #32
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ffaf 	bl	8002d92 <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0x40 );
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	2140      	movs	r1, #64	; 0x40
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff85 	bl	8002d48 <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xA1 );
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	21a1      	movs	r1, #161	; 0xa1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff80 	bl	8002d48 <USER_OLED_Command_1_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xC8 );
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	21c8      	movs	r1, #200	; 0xc8
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff7b 	bl	8002d48 <USER_OLED_Command_1_Byte>

  uint8_t cmd_3[] = {0xDA, screen_size};
 8002e52:	23da      	movs	r3, #218	; 0xda
 8002e54:	773b      	strb	r3, [r7, #28]
 8002e56:	79bb      	ldrb	r3, [r7, #6]
 8002e58:	777b      	strb	r3, [r7, #29]
  USER_OLED_Command_2_Byte( I2C, cmd_3 );
 8002e5a:	f107 021c 	add.w	r2, r7, #28
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff ff95 	bl	8002d92 <USER_OLED_Command_2_Byte>

  uint8_t cmd_4[] = {0x81, 0x7F};
 8002e68:	f647 7381 	movw	r3, #32641	; 0x7f81
 8002e6c:	833b      	strh	r3, [r7, #24]
  USER_OLED_Command_2_Byte( I2C, cmd_4 );
 8002e6e:	f107 0218 	add.w	r2, r7, #24
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff8b 	bl	8002d92 <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xA4 );
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	21a4      	movs	r1, #164	; 0xa4
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff61 	bl	8002d48 <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xA6 );
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	21a6      	movs	r1, #166	; 0xa6
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ff5c 	bl	8002d48 <USER_OLED_Command_1_Byte>

  uint8_t cmd_5[] = {0xD5, 0x80};
 8002e90:	f248 03d5 	movw	r3, #32981	; 0x80d5
 8002e94:	82bb      	strh	r3, [r7, #20]
  USER_OLED_Command_2_Byte( I2C, cmd_5 );
 8002e96:	f107 0214 	add.w	r2, r7, #20
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ff77 	bl	8002d92 <USER_OLED_Command_2_Byte>

  uint8_t cmd_6[] = {0x8D, 0x14};
 8002ea4:	f241 438d 	movw	r3, #5261	; 0x148d
 8002ea8:	823b      	strh	r3, [r7, #16]
  USER_OLED_Command_2_Byte( I2C, cmd_6 );
 8002eaa:	f107 0210 	add.w	r2, r7, #16
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ff6d 	bl	8002d92 <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xAF );
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	21af      	movs	r1, #175	; 0xaf
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff43 	bl	8002d48 <USER_OLED_Command_1_Byte>

  uint8_t cmd_7[] = {0x20, 0x10};
 8002ec2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002ec6:	81bb      	strh	r3, [r7, #12]
  USER_OLED_Command_2_Byte( I2C, cmd_7 );
 8002ec8:	f107 020c 	add.w	r2, r7, #12
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff5e 	bl	8002d92 <USER_OLED_Command_2_Byte>
}
 8002ed6:	bf00      	nop
 8002ed8:	3728      	adds	r7, #40	; 0x28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <USER_OLED_Init_64>:
}

// Initialize 128x64 OLED

void USER_OLED_Init_64( uint8_t I2C )
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	71fb      	strb	r3, [r7, #7]
  USER_OLED_Init(I2C, 0x12);
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	2112      	movs	r1, #18
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff81 	bl	8002df4 <USER_OLED_Init>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <USER_OLED_Data>:

// Send data to OLED

void USER_OLED_Data( uint8_t I2C, uint8_t data )
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	460a      	mov	r2, r1
 8002f04:	71fb      	strb	r3, [r7, #7]
 8002f06:	4613      	mov	r3, r2
 8002f08:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Start( I2C );
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fb05 	bl	800251c <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2178      	movs	r1, #120	; 0x78
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fb2f 	bl	800257c <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x40 );				// Control function for data
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	2140      	movs	r1, #64	; 0x40
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fb8c 	bl	8002640 <USER_I2C_Data>
  USER_I2C_Data( I2C, data );
 8002f28:	79ba      	ldrb	r2, [r7, #6]
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fb86 	bl	8002640 <USER_I2C_Data>

  USER_I2C_Stop( I2C );
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fbbc 	bl	80026b4 <USER_I2C_Stop>
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <USER_OLED_Position>:

// Send screen position to OLED

void USER_OLED_Position( uint8_t I2C, uint8_t x_pos, uint8_t y_pos )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	71bb      	strb	r3, [r7, #6]
 8002f52:	4613      	mov	r3, r2
 8002f54:	717b      	strb	r3, [r7, #5]
  USER_OLED_Command_1_Byte( I2C, 0x00 + ( 0x0F & x_pos ) );
 8002f56:	79bb      	ldrb	r3, [r7, #6]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fef0 	bl	8002d48 <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0x10 + (0x0F & ( x_pos >> 4 ) ) );
 8002f68:	79bb      	ldrb	r3, [r7, #6]
 8002f6a:	091b      	lsrs	r3, r3, #4
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	3310      	adds	r3, #16
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fee6 	bl	8002d48 <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xB0 + y_pos );
 8002f7c:	797b      	ldrb	r3, [r7, #5]
 8002f7e:	3b50      	subs	r3, #80	; 0x50
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fede 	bl	8002d48 <USER_OLED_Command_1_Byte>
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <USER_OLED_Blank>:

// Clear OLED screen

void USER_OLED_Blank( uint8_t I2C )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j;

  USER_OLED_Position( I2C, 0, 0 );
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ffcd 	bl	8002f44 <USER_OLED_Position>

  for(i = 0; i < OLED_SCREEN_ROWS; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	e011      	b.n	8002fd4 <USER_OLED_Blank+0x40>
  {
    for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73bb      	strb	r3, [r7, #14]
 8002fb4:	e007      	b.n	8002fc6 <USER_OLED_Blank+0x32>
    {
	USER_OLED_Data( I2C, 0x0 );
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff ff9d 	bl	8002efa <USER_OLED_Data>
    for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 8002fc0:	7bbb      	ldrb	r3, [r7, #14]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	73bb      	strb	r3, [r7, #14]
 8002fc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	daf3      	bge.n	8002fb6 <USER_OLED_Blank+0x22>
  for(i = 0; i < OLED_SCREEN_ROWS; i++)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b07      	cmp	r3, #7
 8002fd8:	d9ea      	bls.n	8002fb0 <USER_OLED_Blank+0x1c>
    }
  }
}
 8002fda:	bf00      	nop
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <USER_OLED_Print>:

// Print a string on the OLED screen

void USER_OLED_Print( uint8_t I2C, char str[] )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	6039      	str	r1, [r7, #0]
 8002fee:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0, j;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]

  while( str[i] )
 8002ff4:	e01e      	b.n	8003034 <USER_OLED_Print+0x50>
  {
      for(j = 0; j < 5; j++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	73bb      	strb	r3, [r7, #14]
 8002ffa:	e015      	b.n	8003028 <USER_OLED_Print+0x44>
      {
	   USER_OLED_Data(I2C, ASCII[str[i] - 32][j]);
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	4413      	add	r3, r2
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	f1a3 0220 	sub.w	r2, r3, #32
 8003008:	7bb9      	ldrb	r1, [r7, #14]
 800300a:	4810      	ldr	r0, [pc, #64]	; (800304c <USER_OLED_Print+0x68>)
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	4403      	add	r3, r0
 8003014:	440b      	add	r3, r1
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff6c 	bl	8002efa <USER_OLED_Data>
      for(j = 0; j < 5; j++)
 8003022:	7bbb      	ldrb	r3, [r7, #14]
 8003024:	3301      	adds	r3, #1
 8003026:	73bb      	strb	r3, [r7, #14]
 8003028:	7bbb      	ldrb	r3, [r7, #14]
 800302a:	2b04      	cmp	r3, #4
 800302c:	d9e6      	bls.n	8002ffc <USER_OLED_Print+0x18>
      }

      i++;
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	3301      	adds	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
  while( str[i] )
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	4413      	add	r3, r2
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1da      	bne.n	8002ff6 <USER_OLED_Print+0x12>
  }
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	0800aa68 	.word	0x0800aa68

08003050 <USER_OLED_Message>:

// Print a message (a string with a defined position) on the OLED screen

void USER_OLED_Message( uint8_t I2C, char str[], uint8_t x_pos, uint8_t y_pos )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6039      	str	r1, [r7, #0]
 8003058:	4611      	mov	r1, r2
 800305a:	461a      	mov	r2, r3
 800305c:	4603      	mov	r3, r0
 800305e:	71fb      	strb	r3, [r7, #7]
 8003060:	460b      	mov	r3, r1
 8003062:	71bb      	strb	r3, [r7, #6]
 8003064:	4613      	mov	r3, r2
 8003066:	717b      	strb	r3, [r7, #5]
  USER_OLED_Position(I2C, x_pos, y_pos);
 8003068:	797a      	ldrb	r2, [r7, #5]
 800306a:	79b9      	ldrb	r1, [r7, #6]
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ff68 	bl	8002f44 <USER_OLED_Position>
  USER_OLED_Print(I2C, str);
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	6839      	ldr	r1, [r7, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ffb3 	bl	8002fe4 <USER_OLED_Print>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <USER_OLED_Clear_Buffer>:

// Clear OLED buffer

void USER_OLED_Clear_Buffer( char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  uint8_t i, j;

  for(i = 0; i < OLED_SCREEN_ROWS; i++)
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
 8003092:	e013      	b.n	80030bc <USER_OLED_Clear_Buffer+0x36>
  {
      for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 8003094:	2300      	movs	r3, #0
 8003096:	73bb      	strb	r3, [r7, #14]
 8003098:	e009      	b.n	80030ae <USER_OLED_Clear_Buffer+0x28>
      {
	  screen_buffer[i][j] = 0;
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	01db      	lsls	r3, r3, #7
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	441a      	add	r2, r3
 80030a2:	7bbb      	ldrb	r3, [r7, #14]
 80030a4:	2100      	movs	r1, #0
 80030a6:	54d1      	strb	r1, [r2, r3]
      for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 80030a8:	7bbb      	ldrb	r3, [r7, #14]
 80030aa:	3301      	adds	r3, #1
 80030ac:	73bb      	strb	r3, [r7, #14]
 80030ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	daf1      	bge.n	800309a <USER_OLED_Clear_Buffer+0x14>
  for(i = 0; i < OLED_SCREEN_ROWS; i++)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	3301      	adds	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	2b07      	cmp	r3, #7
 80030c0:	d9e8      	bls.n	8003094 <USER_OLED_Clear_Buffer+0xe>
      }
  }
}
 80030c2:	bf00      	nop
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <USER_OLED_Update_Buffer>:

// Update OLED buffer

void USER_OLED_Update_Buffer( ImgType img, uint8_t img_num, char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 80030ce:	b084      	sub	sp, #16
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	f107 0c18 	add.w	ip, r7, #24
 80030da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint16_t x_dir, y_dir, end_x, end_y, cnt = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	80fb      	strh	r3, [r7, #6]

  if( ( img.width + img.x_pos ) > OLED_SCREEN_COLUMNS )
 80030e2:	7e7b      	ldrb	r3, [r7, #25]
 80030e4:	461a      	mov	r2, r3
 80030e6:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 80030ea:	4413      	add	r3, r2
 80030ec:	2b80      	cmp	r3, #128	; 0x80
 80030ee:	dd02      	ble.n	80030f6 <USER_OLED_Update_Buffer+0x28>
  {
      end_x = OLED_SCREEN_COLUMNS - 1;
 80030f0:	237f      	movs	r3, #127	; 0x7f
 80030f2:	817b      	strh	r3, [r7, #10]
 80030f4:	e009      	b.n	800310a <USER_OLED_Update_Buffer+0x3c>
  }
  else
  {
      end_x = img.width + img.x_pos - 1;
 80030f6:	7e7b      	ldrb	r3, [r7, #25]
 80030f8:	b21a      	sxth	r2, r3
 80030fa:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 80030fe:	b21b      	sxth	r3, r3
 8003100:	4413      	add	r3, r2
 8003102:	b21b      	sxth	r3, r3
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	817b      	strh	r3, [r7, #10]
  }

  if( ( img.height + img.y_pos ) > OLED_SCREEN_ROWS )
 800310a:	7e3b      	ldrb	r3, [r7, #24]
 800310c:	461a      	mov	r2, r3
 800310e:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 8003112:	4413      	add	r3, r2
 8003114:	2b08      	cmp	r3, #8
 8003116:	dd02      	ble.n	800311e <USER_OLED_Update_Buffer+0x50>
  {
      end_y = OLED_SCREEN_ROWS - 1;
 8003118:	2307      	movs	r3, #7
 800311a:	813b      	strh	r3, [r7, #8]
 800311c:	e009      	b.n	8003132 <USER_OLED_Update_Buffer+0x64>
  }
  else
  {
      end_y = img.height + img.y_pos - 1;
 800311e:	7e3b      	ldrb	r3, [r7, #24]
 8003120:	b21a      	sxth	r2, r3
 8003122:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 8003126:	b21b      	sxth	r3, r3
 8003128:	4413      	add	r3, r2
 800312a:	b21b      	sxth	r3, r3
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	813b      	strh	r3, [r7, #8]
  }

  for(y_dir = img.y_pos; y_dir <= end_y; y_dir++)
 8003132:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 8003136:	81bb      	strh	r3, [r7, #12]
 8003138:	e02f      	b.n	800319a <USER_OLED_Update_Buffer+0xcc>
  {
    for (x_dir= img.x_pos; x_dir <= end_x; x_dir++)
 800313a:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 800313e:	81fb      	strh	r3, [r7, #14]
 8003140:	e024      	b.n	800318c <USER_OLED_Update_Buffer+0xbe>
    {
      cnt =( y_dir - img.y_pos ) * img.width + x_dir - img.x_pos;
 8003142:	89bb      	ldrh	r3, [r7, #12]
 8003144:	f997 2095 	ldrsb.w	r2, [r7, #149]	; 0x95
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	b29b      	uxth	r3, r3
 800314c:	7e7a      	ldrb	r2, [r7, #25]
 800314e:	b292      	uxth	r2, r2
 8003150:	fb02 f303 	mul.w	r3, r2, r3
 8003154:	b29a      	uxth	r2, r3
 8003156:	89fb      	ldrh	r3, [r7, #14]
 8003158:	4413      	add	r3, r2
 800315a:	b29a      	uxth	r2, r3
 800315c:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 8003160:	b29b      	uxth	r3, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	80fb      	strh	r3, [r7, #6]
      screen_buffer[y_dir][x_dir] = img.image[img_num][cnt];
 8003166:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	3318      	adds	r3, #24
 800316e:	443b      	add	r3, r7
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	18d1      	adds	r1, r2, r3
 8003176:	89bb      	ldrh	r3, [r7, #12]
 8003178:	01db      	lsls	r3, r3, #7
 800317a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800317e:	441a      	add	r2, r3
 8003180:	89fb      	ldrh	r3, [r7, #14]
 8003182:	7809      	ldrb	r1, [r1, #0]
 8003184:	54d1      	strb	r1, [r2, r3]
    for (x_dir= img.x_pos; x_dir <= end_x; x_dir++)
 8003186:	89fb      	ldrh	r3, [r7, #14]
 8003188:	3301      	adds	r3, #1
 800318a:	81fb      	strh	r3, [r7, #14]
 800318c:	89fa      	ldrh	r2, [r7, #14]
 800318e:	897b      	ldrh	r3, [r7, #10]
 8003190:	429a      	cmp	r2, r3
 8003192:	d9d6      	bls.n	8003142 <USER_OLED_Update_Buffer+0x74>
  for(y_dir = img.y_pos; y_dir <= end_y; y_dir++)
 8003194:	89bb      	ldrh	r3, [r7, #12]
 8003196:	3301      	adds	r3, #1
 8003198:	81bb      	strh	r3, [r7, #12]
 800319a:	89ba      	ldrh	r2, [r7, #12]
 800319c:	893b      	ldrh	r3, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d9cb      	bls.n	800313a <USER_OLED_Update_Buffer+0x6c>
    }
  }
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	b004      	add	sp, #16
 80031ae:	4770      	bx	lr

080031b0 <USER_OLED_Print_Buffer>:
}

// Print OLED buffer

void USER_OLED_Print_Buffer( uint8_t I2C, char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	6039      	str	r1, [r7, #0]
 80031ba:	71fb      	strb	r3, [r7, #7]
  USER_OLED_Position( I2C, 0, 0 );
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff febe 	bl	8002f44 <USER_OLED_Position>

  uint8_t i, j;

  for (i = 0; i < OLED_SCREEN_ROWS; i++)
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]
 80031cc:	e017      	b.n	80031fe <USER_OLED_Print_Buffer+0x4e>
  {
    for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	73bb      	strb	r3, [r7, #14]
 80031d2:	e00d      	b.n	80031f0 <USER_OLED_Print_Buffer+0x40>
    {
	USER_OLED_Data( I2C, screen_buffer[i][j] );
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	01db      	lsls	r3, r3, #7
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	441a      	add	r2, r3
 80031dc:	7bbb      	ldrb	r3, [r7, #14]
 80031de:	5cd2      	ldrb	r2, [r2, r3]
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fe88 	bl	8002efa <USER_OLED_Data>
    for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 80031ea:	7bbb      	ldrb	r3, [r7, #14]
 80031ec:	3301      	adds	r3, #1
 80031ee:	73bb      	strb	r3, [r7, #14]
 80031f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	daed      	bge.n	80031d4 <USER_OLED_Print_Buffer+0x24>
  for (i = 0; i < OLED_SCREEN_ROWS; i++)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	3301      	adds	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	2b07      	cmp	r3, #7
 8003202:	d9e4      	bls.n	80031ce <USER_OLED_Print_Buffer+0x1e>
    }
  }
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <USER_OLED_Update_Buffer_Bit>:

// Update OLED buffer bit

void USER_OLED_Update_Buffer_Bit( ImgType img, uint8_t img_num, char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 800320e:	b084      	sub	sp, #16
 8003210:	b480      	push	{r7}
 8003212:	b091      	sub	sp, #68	; 0x44
 8003214:	af00      	add	r7, sp, #0
 8003216:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 800321a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int start_x, end_x, start_img_x, y_offset, bit_y_pos_byte, start_y, end_y, x_dir, y_dir,
  buffer_height = OLED_SCREEN_ROWS, buffer_width = OLED_SCREEN_COLUMNS, start_img_byte, start_img_x_tmp,
 800321e:	2308      	movs	r3, #8
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	60fb      	str	r3, [r7, #12]

  // Working on the X axe

  // Find end_x

  if(img.x_pos > buffer_width)
 8003226:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4293      	cmp	r3, r2
 8003230:	da02      	bge.n	8003238 <USER_OLED_Update_Buffer_Bit+0x2a>
  {
    end_x = buffer_width;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	63bb      	str	r3, [r7, #56]	; 0x38
 8003236:	e009      	b.n	800324c <USER_OLED_Update_Buffer_Bit+0x3e>
  }
  else if(img.x_pos < 1)
 8003238:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 800323c:	2b00      	cmp	r3, #0
 800323e:	dc02      	bgt.n	8003246 <USER_OLED_Update_Buffer_Bit+0x38>
  {
    end_x = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	63bb      	str	r3, [r7, #56]	; 0x38
 8003244:	e002      	b.n	800324c <USER_OLED_Update_Buffer_Bit+0x3e>
  }
  else
  {
    end_x = img.x_pos;
 8003246:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 800324a:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  // Find start_x

  start_x = img.x_pos - img.width;
 800324c:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 8003250:	461a      	mov	r2, r3
 8003252:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	63fb      	str	r3, [r7, #60]	; 0x3c

  if(start_x > buffer_width)
 800325a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	429a      	cmp	r2, r3
 8003260:	dd02      	ble.n	8003268 <USER_OLED_Update_Buffer_Bit+0x5a>
  {
    start_x = buffer_width;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003266:	e004      	b.n	8003272 <USER_OLED_Update_Buffer_Bit+0x64>
  }
  else if(start_x < 0)
 8003268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326a:	2b00      	cmp	r3, #0
 800326c:	da01      	bge.n	8003272 <USER_OLED_Update_Buffer_Bit+0x64>
  {
    start_x = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  // Starting the picture x_location to start from

  start_img_x = img.width - img.x_pos;
 8003272:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003276:	461a      	mov	r2, r3
 8003278:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	637b      	str	r3, [r7, #52]	; 0x34

  if(start_img_x < 0)
 8003280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003282:	2b00      	cmp	r3, #0
 8003284:	da01      	bge.n	800328a <USER_OLED_Update_Buffer_Bit+0x7c>
  {
      start_img_x = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Working on the Y axe

  y_offset = img.bit_y_pos % 8;
 800328a:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 800328e:	425a      	negs	r2, r3
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	f002 0207 	and.w	r2, r2, #7
 8003298:	bf58      	it	pl
 800329a:	4253      	negpl	r3, r2
 800329c:	b21b      	sxth	r3, r3
 800329e:	60bb      	str	r3, [r7, #8]
  bit_y_pos_byte = img.bit_y_pos / 8;
 80032a0:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	da00      	bge.n	80032aa <USER_OLED_Update_Buffer_Bit+0x9c>
 80032a8:	3307      	adds	r3, #7
 80032aa:	10db      	asrs	r3, r3, #3
 80032ac:	b21b      	sxth	r3, r3
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30

  if(bit_y_pos_byte > buffer_height)
 80032b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	dd01      	ble.n	80032bc <USER_OLED_Update_Buffer_Bit+0xae>
  {
      bit_y_pos_byte = buffer_height;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
  }

  // Find end_y

  end_y = buffer_height - bit_y_pos_byte + 1;
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	3301      	adds	r3, #1
 80032c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(end_y < 0)
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	da02      	bge.n	80032d2 <USER_OLED_Update_Buffer_Bit+0xc4>
  {
    end_y = buffer_height;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d0:	e002      	b.n	80032d8 <USER_OLED_Update_Buffer_Bit+0xca>
  }
  else
  {
    end_y = bit_y_pos_byte + 1;
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	3301      	adds	r3, #1
 80032d6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  // Find start_y

  start_y = img.bit_y_pos / 8 - img.height;
 80032d8:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 80032dc:	2b00      	cmp	r3, #0
 80032de:	da00      	bge.n	80032e2 <USER_OLED_Update_Buffer_Bit+0xd4>
 80032e0:	3307      	adds	r3, #7
 80032e2:	10db      	asrs	r3, r3, #3
 80032e4:	b21b      	sxth	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if(start_y > buffer_height)
 80032f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	dd02      	ble.n	80032fe <USER_OLED_Update_Buffer_Bit+0xf0>
  {
    start_y = buffer_height;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032fc:	e004      	b.n	8003308 <USER_OLED_Update_Buffer_Bit+0xfa>
  }
  else if(start_y < 0)
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	da01      	bge.n	8003308 <USER_OLED_Update_Buffer_Bit+0xfa>
  {
    start_y = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  // Starting the picture y_location to start form

  start_img_byte = img.height - bit_y_pos_byte - 1;
 8003308:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800330c:	461a      	mov	r2, r3
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	61fb      	str	r3, [r7, #28]

  if(start_img_byte < 0)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	2b00      	cmp	r3, #0
 800331a:	da02      	bge.n	8003322 <USER_OLED_Update_Buffer_Bit+0x114>
  {
    start_img_byte = -1;
 800331c:	f04f 33ff 	mov.w	r3, #4294967295
 8003320:	61fb      	str	r3, [r7, #28]
  }

  // Running the display

  for(y_dir = start_y; y_dir < end_y; y_dir++)
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	623b      	str	r3, [r7, #32]
 8003326:	e094      	b.n	8003452 <USER_OLED_Update_Buffer_Bit+0x244>
  {
    start_img_x_tmp = start_img_x;
 8003328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332a:	61bb      	str	r3, [r7, #24]

    for(x_dir = start_x; x_dir < end_x; x_dir++)
 800332c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
 8003330:	e084      	b.n	800343c <USER_OLED_Update_Buffer_Bit+0x22e>
    {
      if(start_img_byte == -1)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d102      	bne.n	8003340 <USER_OLED_Update_Buffer_Bit+0x132>
      {
	cnt_1 = start_img_x;
 800333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	e008      	b.n	8003352 <USER_OLED_Update_Buffer_Bit+0x144>
      }
      else
      {
	cnt_1 = (start_img_byte) * img.width + start_img_x_tmp;
 8003340:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003344:	461a      	mov	r2, r3
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4413      	add	r3, r2
 8003350:	617b      	str	r3, [r7, #20]
      }

      cnt_2 = (start_img_byte + 1) * img.width + start_img_x_tmp;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3301      	adds	r3, #1
 8003356:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800335a:	fb02 f303 	mul.w	r3, r2, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4413      	add	r3, r2
 8003362:	607b      	str	r3, [r7, #4]
      start_img_x_tmp++;
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	3301      	adds	r3, #1
 8003368:	61bb      	str	r3, [r7, #24]

      // Start drawing

      if(start_img_byte == -1)
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d117      	bne.n	80033a2 <USER_OLED_Update_Buffer_Bit+0x194>
      {
	// Beginning of the picture

	screen_buffer[y_dir][x_dir] = ( img.image[img_num][cnt_2] << ( y_offset ) );
 8003372:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	3348      	adds	r3, #72	; 0x48
 800337a:	443b      	add	r3, r7
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	fa02 f103 	lsl.w	r1, r2, r3
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	01db      	lsls	r3, r3, #7
 8003390:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003394:	441a      	add	r2, r3
 8003396:	b2c9      	uxtb	r1, r1
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	4413      	add	r3, r2
 800339c:	460a      	mov	r2, r1
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e049      	b.n	8003436 <USER_OLED_Update_Buffer_Bit+0x228>
      }
      else if(start_img_byte < img.height - 1)
 80033a2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80033a6:	3b01      	subs	r3, #1
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	da2a      	bge.n	8003404 <USER_OLED_Update_Buffer_Bit+0x1f6>
      {
	  // Inside of the picture

	  screen_buffer[y_dir][x_dir] = ( img.image[img_num][cnt_2] << ( y_offset ) ) | ( img.image[img_num][cnt_1] >> ( 8-y_offset ) );
 80033ae:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	3348      	adds	r3, #72	; 0x48
 80033b6:	443b      	add	r3, r7
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	b25a      	sxtb	r2, r3
 80033ca:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	3348      	adds	r3, #72	; 0x48
 80033d2:	443b      	add	r3, r7
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	440b      	add	r3, r1
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	4619      	mov	r1, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f1c3 0308 	rsb	r3, r3, #8
 80033e4:	fa41 f303 	asr.w	r3, r1, r3
 80033e8:	b25b      	sxtb	r3, r3
 80033ea:	4313      	orrs	r3, r2
 80033ec:	b259      	sxtb	r1, r3
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	01db      	lsls	r3, r3, #7
 80033f2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80033f6:	441a      	add	r2, r3
 80033f8:	b2c9      	uxtb	r1, r1
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	4413      	add	r3, r2
 80033fe:	460a      	mov	r2, r1
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e018      	b.n	8003436 <USER_OLED_Update_Buffer_Bit+0x228>
      }
      else
      {
	  screen_buffer[y_dir][x_dir] = ( img.image[img_num][cnt_1] >> ( 8 - y_offset ) );
 8003404:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	3348      	adds	r3, #72	; 0x48
 800340c:	443b      	add	r3, r7
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	4413      	add	r3, r2
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f1c3 0308 	rsb	r3, r3, #8
 800341e:	fa42 f103 	asr.w	r1, r2, r3
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	01db      	lsls	r3, r3, #7
 8003426:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800342a:	441a      	add	r2, r3
 800342c:	b2c9      	uxtb	r1, r1
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	4413      	add	r3, r2
 8003432:	460a      	mov	r2, r1
 8003434:	701a      	strb	r2, [r3, #0]
    for(x_dir = start_x; x_dir < end_x; x_dir++)
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	3301      	adds	r3, #1
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
 800343c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003440:	429a      	cmp	r2, r3
 8003442:	f6ff af76 	blt.w	8003332 <USER_OLED_Update_Buffer_Bit+0x124>
      }
    }

    start_img_byte++;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3301      	adds	r3, #1
 800344a:	61fb      	str	r3, [r7, #28]
  for(y_dir = start_y; y_dir < end_y; y_dir++)
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	3301      	adds	r3, #1
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	6a3a      	ldr	r2, [r7, #32]
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	429a      	cmp	r2, r3
 8003458:	f6ff af66 	blt.w	8003328 <USER_OLED_Update_Buffer_Bit+0x11a>
  }
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	3744      	adds	r7, #68	; 0x44
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	b004      	add	sp, #16
 8003468:	4770      	bx	lr
	...

0800346c <USER_OLED_Animation>:

void USER_OLED_Animation( uint8_t I2C, char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 8003472:	af1e      	add	r7, sp, #120	; 0x78
 8003474:	4602      	mov	r2, r0
 8003476:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800347a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800347e:	6019      	str	r1, [r3, #0]
 8003480:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003484:	f2a3 3309 	subw	r3, r3, #777	; 0x309
 8003488:	701a      	strb	r2, [r3, #0]
  USER_SYSTICK_Init();
 800348a:	f000 fabb 	bl	8003a04 <USER_SYSTICK_Init>

  uint16_t i = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	f8a7 330e 	strh.w	r3, [r7, #782]	; 0x30e

  ImgType JOHN_DEERE_LOGO_PIC = { .height = JOHN_DEERE_LOGO_ROWS, .width = JOHN_DEERE_LOGO_COLS, .x_pos = 0, .y_pos = 0, .bit_y_pos = 0 };
 8003494:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f002 fa40 	bl	8005922 <memset>
 80034a2:	4bdc      	ldr	r3, [pc, #880]	; (8003814 <USER_OLED_Animation+0x3a8>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	f887 328c 	strb.w	r3, [r7, #652]	; 0x28c
 80034aa:	4bdb      	ldr	r3, [pc, #876]	; (8003818 <USER_OLED_Animation+0x3ac>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	f887 328d 	strb.w	r3, [r7, #653]	; 0x28d
  JOHN_DEERE_LOGO_PIC.image[0] = JOHN_DEERE_LOGO;
 80034b2:	4bda      	ldr	r3, [pc, #872]	; (800381c <USER_OLED_Animation+0x3b0>)
 80034b4:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

  ImgType JOHN_DEERE_LOGO_PIC_NO_TEXT = { .height = JOHN_DEERE_LOGO_NO_TEXT_ROWS, .width = JOHN_DEERE_LOGO_NO_TEXT_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 80034b8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80034bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034c0:	4618      	mov	r0, r3
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	461a      	mov	r2, r3
 80034c6:	2100      	movs	r1, #0
 80034c8:	f002 fa2b 	bl	8005922 <memset>
 80034cc:	4bd4      	ldr	r3, [pc, #848]	; (8003820 <USER_OLED_Animation+0x3b4>)
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80034d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	4bd2      	ldr	r3, [pc, #840]	; (8003824 <USER_OLED_Animation+0x3b8>)
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80034e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034e6:	705a      	strb	r2, [r3, #1]
 80034e8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80034ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  JOHN_DEERE_LOGO_PIC_NO_TEXT.image[0] = JOHN_DEERE_LOGO_NO_TEXT;
 80034f6:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80034fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034fe:	4aca      	ldr	r2, [pc, #808]	; (8003828 <USER_OLED_Animation+0x3bc>)
 8003500:	605a      	str	r2, [r3, #4]

  ImgType ITESM_LOGO_PIC = { .height = ITESM_LOGO_ROWS, .width = ITESM_LOGO_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 8003502:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003506:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800350a:	4618      	mov	r0, r3
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	461a      	mov	r2, r3
 8003510:	2100      	movs	r1, #0
 8003512:	f002 fa06 	bl	8005922 <memset>
 8003516:	4bc5      	ldr	r3, [pc, #788]	; (800382c <USER_OLED_Animation+0x3c0>)
 8003518:	781a      	ldrb	r2, [r3, #0]
 800351a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800351e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003522:	701a      	strb	r2, [r3, #0]
 8003524:	4bc2      	ldr	r3, [pc, #776]	; (8003830 <USER_OLED_Animation+0x3c4>)
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800352c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003530:	705a      	strb	r2, [r3, #1]
 8003532:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003536:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800353a:	2220      	movs	r2, #32
 800353c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  ITESM_LOGO_PIC.image[0] = ITESM_LOGO;
 8003540:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003544:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003548:	4aba      	ldr	r2, [pc, #744]	; (8003834 <USER_OLED_Animation+0x3c8>)
 800354a:	605a      	str	r2, [r3, #4]

  ImgType RASPBERRY_PI_LOGO_PIC = { .height = RASPBERRY_PI_LOGO_ROWS, .width = RASPBERRY_PI_LOGO_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 800354c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003550:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003554:	4618      	mov	r0, r3
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	461a      	mov	r2, r3
 800355a:	2100      	movs	r1, #0
 800355c:	f002 f9e1 	bl	8005922 <memset>
 8003560:	4bb5      	ldr	r3, [pc, #724]	; (8003838 <USER_OLED_Animation+0x3cc>)
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003568:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	4bb3      	ldr	r3, [pc, #716]	; (800383c <USER_OLED_Animation+0x3d0>)
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003576:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800357a:	705a      	strb	r2, [r3, #1]
 800357c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003580:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003584:	2220      	movs	r2, #32
 8003586:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  RASPBERRY_PI_LOGO_PIC.image[0] = RASPBERRY_PI_LOGO;
 800358a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800358e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003592:	4aab      	ldr	r2, [pc, #684]	; (8003840 <USER_OLED_Animation+0x3d4>)
 8003594:	605a      	str	r2, [r3, #4]

  ImgType LINUX_LOGO_PIC = { .height = LINUX_LOGO_ROWS, .width = LINUX_LOGO_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 8003596:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800359a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800359e:	4618      	mov	r0, r3
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	461a      	mov	r2, r3
 80035a4:	2100      	movs	r1, #0
 80035a6:	f002 f9bc 	bl	8005922 <memset>
 80035aa:	4ba6      	ldr	r3, [pc, #664]	; (8003844 <USER_OLED_Animation+0x3d8>)
 80035ac:	781a      	ldrb	r2, [r3, #0]
 80035ae:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80035b2:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	4ba3      	ldr	r3, [pc, #652]	; (8003848 <USER_OLED_Animation+0x3dc>)
 80035ba:	781a      	ldrb	r2, [r3, #0]
 80035bc:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80035c0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80035c4:	705a      	strb	r2, [r3, #1]
 80035c6:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80035ca:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  LINUX_LOGO_PIC.image[0] = LINUX_LOGO;
 80035d4:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80035d8:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80035dc:	4a9b      	ldr	r2, [pc, #620]	; (800384c <USER_OLED_Animation+0x3e0>)
 80035de:	605a      	str	r2, [r3, #4]

  ImgType STM32_LOGO_PIC = { .height = STM32_LOGO_ROWS, .width = STM32_LOGO_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 80035e0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80035e4:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80035e8:	4618      	mov	r0, r3
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	461a      	mov	r2, r3
 80035ee:	2100      	movs	r1, #0
 80035f0:	f002 f997 	bl	8005922 <memset>
 80035f4:	4b96      	ldr	r3, [pc, #600]	; (8003850 <USER_OLED_Animation+0x3e4>)
 80035f6:	781a      	ldrb	r2, [r3, #0]
 80035f8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80035fc:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	4b94      	ldr	r3, [pc, #592]	; (8003854 <USER_OLED_Animation+0x3e8>)
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800360a:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800360e:	705a      	strb	r2, [r3, #1]
 8003610:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003614:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8003618:	2220      	movs	r2, #32
 800361a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  STM32_LOGO_PIC.image[0] = STM32_LOGO;
 800361e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003622:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8003626:	4a8c      	ldr	r2, [pc, #560]	; (8003858 <USER_OLED_Animation+0x3ec>)
 8003628:	605a      	str	r2, [r3, #4]

  USER_OLED_Clear_Buffer( screen_buffer );
 800362a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800362e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	f7ff fd27 	bl	8003086 <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer( JOHN_DEERE_LOGO_PIC, 0, screen_buffer );
 8003638:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800363c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	931d      	str	r3, [sp, #116]	; 0x74
 8003644:	2300      	movs	r3, #0
 8003646:	931c      	str	r3, [sp, #112]	; 0x70
 8003648:	4668      	mov	r0, sp
 800364a:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800364e:	2270      	movs	r2, #112	; 0x70
 8003650:	4619      	mov	r1, r3
 8003652:	f002 f9f4 	bl	8005a3e <memcpy>
 8003656:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800365a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800365c:	f7ff fd37 	bl	80030ce <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer( I2C, screen_buffer );
 8003660:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003664:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003668:	f507 7244 	add.w	r2, r7, #784	; 0x310
 800366c:	f2a2 3209 	subw	r2, r2, #777	; 0x309
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	6819      	ldr	r1, [r3, #0]
 8003674:	4610      	mov	r0, r2
 8003676:	f7ff fd9b 	bl	80031b0 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 1000 );
 800367a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800367e:	f000 f9f7 	bl	8003a70 <USER_SYSTICK_Delay_ms>

  USER_OLED_Clear_Buffer( screen_buffer );
 8003682:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003686:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	f7ff fcfb 	bl	8003086 <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer( ITESM_LOGO_PIC, 0, screen_buffer );
 8003690:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003694:	f5a3 74c2 	sub.w	r4, r3, #388	; 0x184
 8003698:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800369c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	931d      	str	r3, [sp, #116]	; 0x74
 80036a4:	2300      	movs	r3, #0
 80036a6:	931c      	str	r3, [sp, #112]	; 0x70
 80036a8:	4668      	mov	r0, sp
 80036aa:	f104 0310 	add.w	r3, r4, #16
 80036ae:	2270      	movs	r2, #112	; 0x70
 80036b0:	4619      	mov	r1, r3
 80036b2:	f002 f9c4 	bl	8005a3e <memcpy>
 80036b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80036ba:	f7ff fd08 	bl	80030ce <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer( I2C, screen_buffer );
 80036be:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80036c2:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80036c6:	f507 7244 	add.w	r2, r7, #784	; 0x310
 80036ca:	f2a2 3209 	subw	r2, r2, #777	; 0x309
 80036ce:	7812      	ldrb	r2, [r2, #0]
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	4610      	mov	r0, r2
 80036d4:	f7ff fd6c 	bl	80031b0 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 1000 );
 80036d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036dc:	f000 f9c8 	bl	8003a70 <USER_SYSTICK_Delay_ms>

  USER_OLED_Clear_Buffer( screen_buffer );
 80036e0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80036e4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	f7ff fccc 	bl	8003086 <USER_OLED_Clear_Buffer>
  USER_OLED_Clear_Buffer( screen_buffer );
 80036ee:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80036f2:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	f7ff fcc5 	bl	8003086 <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer( STM32_LOGO_PIC, 0, screen_buffer );
 80036fc:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003700:	f5a3 7441 	sub.w	r4, r3, #772	; 0x304
 8003704:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003708:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	931d      	str	r3, [sp, #116]	; 0x74
 8003710:	2300      	movs	r3, #0
 8003712:	931c      	str	r3, [sp, #112]	; 0x70
 8003714:	4668      	mov	r0, sp
 8003716:	f104 0310 	add.w	r3, r4, #16
 800371a:	2270      	movs	r2, #112	; 0x70
 800371c:	4619      	mov	r1, r3
 800371e:	f002 f98e 	bl	8005a3e <memcpy>
 8003722:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003726:	f7ff fcd2 	bl	80030ce <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer( I2C, screen_buffer );
 800372a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800372e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003732:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8003736:	f2a2 3209 	subw	r2, r2, #777	; 0x309
 800373a:	7812      	ldrb	r2, [r2, #0]
 800373c:	6819      	ldr	r1, [r3, #0]
 800373e:	4610      	mov	r0, r2
 8003740:	f7ff fd36 	bl	80031b0 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 1000 );
 8003744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003748:	f000 f992 	bl	8003a70 <USER_SYSTICK_Delay_ms>

  USER_OLED_Clear_Buffer( screen_buffer );
 800374c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003750:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	f7ff fc96 	bl	8003086 <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer( RASPBERRY_PI_LOGO_PIC, 0, screen_buffer );
 800375a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800375e:	f5a3 7401 	sub.w	r4, r3, #516	; 0x204
 8003762:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003766:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	931d      	str	r3, [sp, #116]	; 0x74
 800376e:	2300      	movs	r3, #0
 8003770:	931c      	str	r3, [sp, #112]	; 0x70
 8003772:	4668      	mov	r0, sp
 8003774:	f104 0310 	add.w	r3, r4, #16
 8003778:	2270      	movs	r2, #112	; 0x70
 800377a:	4619      	mov	r1, r3
 800377c:	f002 f95f 	bl	8005a3e <memcpy>
 8003780:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003784:	f7ff fca3 	bl	80030ce <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer( I2C, screen_buffer );
 8003788:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800378c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003790:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8003794:	f2a2 3209 	subw	r2, r2, #777	; 0x309
 8003798:	7812      	ldrb	r2, [r2, #0]
 800379a:	6819      	ldr	r1, [r3, #0]
 800379c:	4610      	mov	r0, r2
 800379e:	f7ff fd07 	bl	80031b0 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 1000 );
 80037a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037a6:	f000 f963 	bl	8003a70 <USER_SYSTICK_Delay_ms>

  USER_OLED_Clear_Buffer( screen_buffer );
 80037aa:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80037ae:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	f7ff fc67 	bl	8003086 <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer( LINUX_LOGO_PIC, 0, screen_buffer );
 80037b8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80037bc:	f5a3 7421 	sub.w	r4, r3, #644	; 0x284
 80037c0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80037c4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	931d      	str	r3, [sp, #116]	; 0x74
 80037cc:	2300      	movs	r3, #0
 80037ce:	931c      	str	r3, [sp, #112]	; 0x70
 80037d0:	4668      	mov	r0, sp
 80037d2:	f104 0310 	add.w	r3, r4, #16
 80037d6:	2270      	movs	r2, #112	; 0x70
 80037d8:	4619      	mov	r1, r3
 80037da:	f002 f930 	bl	8005a3e <memcpy>
 80037de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80037e2:	f7ff fc74 	bl	80030ce <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer( I2C, screen_buffer );
 80037e6:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80037ea:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80037ee:	f507 7244 	add.w	r2, r7, #784	; 0x310
 80037f2:	f2a2 3209 	subw	r2, r2, #777	; 0x309
 80037f6:	7812      	ldrb	r2, [r2, #0]
 80037f8:	6819      	ldr	r1, [r3, #0]
 80037fa:	4610      	mov	r0, r2
 80037fc:	f7ff fcd8 	bl	80031b0 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 1000 );
 8003800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003804:	f000 f934 	bl	8003a70 <USER_SYSTICK_Delay_ms>

  USER_OLED_Blank( I2C );
 8003808:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800380c:	f2a3 3309 	subw	r3, r3, #777	; 0x309
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	e023      	b.n	800385c <USER_OLED_Animation+0x3f0>
 8003814:	20000018 	.word	0x20000018
 8003818:	20000019 	.word	0x20000019
 800381c:	0800ac48 	.word	0x0800ac48
 8003820:	2000001a 	.word	0x2000001a
 8003824:	2000001b 	.word	0x2000001b
 8003828:	0800b048 	.word	0x0800b048
 800382c:	2000001c 	.word	0x2000001c
 8003830:	2000001d 	.word	0x2000001d
 8003834:	0800b174 	.word	0x0800b174
 8003838:	20000022 	.word	0x20000022
 800383c:	20000023 	.word	0x20000023
 8003840:	0800b714 	.word	0x0800b714
 8003844:	2000001e 	.word	0x2000001e
 8003848:	2000001f 	.word	0x2000001f
 800384c:	0800b354 	.word	0x0800b354
 8003850:	20000020 	.word	0x20000020
 8003854:	20000021 	.word	0x20000021
 8003858:	0800b534 	.word	0x0800b534
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fb99 	bl	8002f94 <USER_OLED_Blank>
  USER_OLED_Message( I2C, "TRACTOR DRIVING", OLED_SCREEN_COLUMNS / 5, OLED_SCREEN_ROWS / 3 + TEXT_ROWS_OFFSET );
 8003862:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003866:	f2a3 3309 	subw	r3, r3, #777	; 0x309
 800386a:	7818      	ldrb	r0, [r3, #0]
 800386c:	2303      	movs	r3, #3
 800386e:	2219      	movs	r2, #25
 8003870:	493c      	ldr	r1, [pc, #240]	; (8003964 <USER_OLED_Animation+0x4f8>)
 8003872:	f7ff fbed 	bl	8003050 <USER_OLED_Message>
  USER_OLED_Message( I2C, "SIMULATOR", OLED_SCREEN_COLUMNS / 4 + TEXT_COLUMNS_OFFSET, OLED_SCREEN_ROWS / 2 );
 8003876:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800387a:	f2a3 3309 	subw	r3, r3, #777	; 0x309
 800387e:	7818      	ldrb	r0, [r3, #0]
 8003880:	2304      	movs	r3, #4
 8003882:	2228      	movs	r2, #40	; 0x28
 8003884:	4938      	ldr	r1, [pc, #224]	; (8003968 <USER_OLED_Animation+0x4fc>)
 8003886:	f7ff fbe3 	bl	8003050 <USER_OLED_Message>
  USER_SYSTICK_Delay_ms( 2000 );
 800388a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800388e:	f000 f8ef 	bl	8003a70 <USER_SYSTICK_Delay_ms>

  for(i = 0; i < LOGO_DISPLACEMENT; i++)
 8003892:	2300      	movs	r3, #0
 8003894:	f8a7 330e 	strh.w	r3, [r7, #782]	; 0x30e
 8003898:	e048      	b.n	800392c <USER_OLED_Animation+0x4c0>
  {
    JOHN_DEERE_LOGO_PIC_NO_TEXT.x_pos = 3 * i;
 800389a:	f8b7 330e 	ldrh.w	r3, [r7, #782]	; 0x30e
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	0052      	lsls	r2, r2, #1
 80038a4:	4413      	add	r3, r2
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	b25a      	sxtb	r2, r3
 80038aa:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80038ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    JOHN_DEERE_LOGO_PIC_NO_TEXT.bit_y_pos = 2 * i;
 80038b6:	f8b7 330e 	ldrh.w	r3, [r7, #782]	; 0x30e
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	b29b      	uxth	r3, r3
 80038be:	b21a      	sxth	r2, r3
 80038c0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80038c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038c8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    USER_OLED_Clear_Buffer( screen_buffer );
 80038cc:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80038d0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	f7ff fbd6 	bl	8003086 <USER_OLED_Clear_Buffer>
    USER_OLED_Update_Buffer_Bit( JOHN_DEERE_LOGO_PIC_NO_TEXT, 0, screen_buffer );
 80038da:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80038de:	f5a3 7482 	sub.w	r4, r3, #260	; 0x104
 80038e2:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80038e6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	931d      	str	r3, [sp, #116]	; 0x74
 80038ee:	2300      	movs	r3, #0
 80038f0:	931c      	str	r3, [sp, #112]	; 0x70
 80038f2:	4668      	mov	r0, sp
 80038f4:	f104 0310 	add.w	r3, r4, #16
 80038f8:	2270      	movs	r2, #112	; 0x70
 80038fa:	4619      	mov	r1, r3
 80038fc:	f002 f89f 	bl	8005a3e <memcpy>
 8003900:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003904:	f7ff fc83 	bl	800320e <USER_OLED_Update_Buffer_Bit>
    USER_OLED_Print_Buffer( I2C, screen_buffer );
 8003908:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800390c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003910:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8003914:	f2a2 3209 	subw	r2, r2, #777	; 0x309
 8003918:	7812      	ldrb	r2, [r2, #0]
 800391a:	6819      	ldr	r1, [r3, #0]
 800391c:	4610      	mov	r0, r2
 800391e:	f7ff fc47 	bl	80031b0 <USER_OLED_Print_Buffer>
  for(i = 0; i < LOGO_DISPLACEMENT; i++)
 8003922:	f8b7 330e 	ldrh.w	r3, [r7, #782]	; 0x30e
 8003926:	3301      	adds	r3, #1
 8003928:	f8a7 330e 	strh.w	r3, [r7, #782]	; 0x30e
 800392c:	f8b7 330e 	ldrh.w	r3, [r7, #782]	; 0x30e
 8003930:	2b1c      	cmp	r3, #28
 8003932:	d9b2      	bls.n	800389a <USER_OLED_Animation+0x42e>
  }

  USER_SYSTICK_Delay_ms( 1000 );
 8003934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003938:	f000 f89a 	bl	8003a70 <USER_SYSTICK_Delay_ms>
  USER_OLED_Clear_Buffer( screen_buffer );
 800393c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003940:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	f7ff fb9e 	bl	8003086 <USER_OLED_Clear_Buffer>
  USER_OLED_Blank( I2C );
 800394a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800394e:	f2a3 3309 	subw	r3, r3, #777	; 0x309
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fb1d 	bl	8002f94 <USER_OLED_Blank>
}
 800395a:	bf00      	nop
 800395c:	f507 7745 	add.w	r7, r7, #788	; 0x314
 8003960:	46bd      	mov	sp, r7
 8003962:	bd90      	pop	{r4, r7, pc}
 8003964:	0800a0e0 	.word	0x0800a0e0
 8003968:	0800a0f0 	.word	0x0800a0f0

0800396c <USER_PWM_Init>:
#include "main.h"
#include "GPIO.h"
#include "TIMER.h"

void USER_PWM_Init( void )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  USER_GPIO_Define( PORTB, 6, OUT_10, OUT_AF_PP );	 // Pin PB6 as alternate function push-pull, max speed 10 MHz
 8003970:	2302      	movs	r3, #2
 8003972:	2201      	movs	r2, #1
 8003974:	2106      	movs	r1, #6
 8003976:	2001      	movs	r0, #1
 8003978:	f7fe fbc4 	bl	8002104 <USER_GPIO_Define>
  USER_GPIO_Write( PORTB, 6, 0 );
 800397c:	2200      	movs	r2, #0
 800397e:	2106      	movs	r1, #6
 8003980:	2001      	movs	r0, #1
 8003982:	f7fe fcd9 	bl	8002338 <USER_GPIO_Write>

  USER_TIM_Init( TIM_4 );
 8003986:	2002      	movs	r0, #2
 8003988:	f000 f884 	bl	8003a94 <USER_TIM_Init>
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}

08003990 <USER_PWM_Generate>:

void USER_PWM_Generate( uint16_t PSC, uint16_t ARR, uint16_t CCR1 )
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	80fb      	strh	r3, [r7, #6]
 800399a:	460b      	mov	r3, r1
 800399c:	80bb      	strh	r3, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	807b      	strh	r3, [r7, #2]
  TIM4->PSC	=	PSC;				// Configure the prescaler, the period and the duty cycle
 80039a2:	4a17      	ldr	r2, [pc, #92]	; (8003a00 <USER_PWM_Generate+0x70>)
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	6293      	str	r3, [r2, #40]	; 0x28
  TIM4->ARR	=	ARR;				//	register values
 80039a8:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <USER_PWM_Generate+0x70>)
 80039aa:	88bb      	ldrh	r3, [r7, #4]
 80039ac:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIM4->CCR1	=	CCR1;
 80039ae:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <USER_PWM_Generate+0x70>)
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	6353      	str	r3, [r2, #52]	; 0x34

  TIM4->EGR	|=	TIM_EGR_UG;			// Generate the UEV-event to load the period, the prescaler and
 80039b4:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <USER_PWM_Generate+0x70>)
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	4a11      	ldr	r2, [pc, #68]	; (8003a00 <USER_PWM_Generate+0x70>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	6153      	str	r3, [r2, #20]
  							//	reset the counter

  TIM4->SR	&=	~(TIM_SR_UIF);			// Clear the Timer overflow UEV-event flag
 80039c0:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <USER_PWM_Generate+0x70>)
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	4a0e      	ldr	r2, [pc, #56]	; (8003a00 <USER_PWM_Generate+0x70>)
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	6113      	str	r3, [r2, #16]

  TIM4->CCER	|=	TIM_CCER_CC1E;			// Enable the PWM signal output and set the polarity
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <USER_PWM_Generate+0x70>)
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <USER_PWM_Generate+0x70>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	6213      	str	r3, [r2, #32]
  TIM4->CCER	&=	~(TIM_CCER_CC1P);
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <USER_PWM_Generate+0x70>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4a08      	ldr	r2, [pc, #32]	; (8003a00 <USER_PWM_Generate+0x70>)
 80039de:	f023 0302 	bic.w	r3, r3, #2
 80039e2:	6213      	str	r3, [r2, #32]

  while( !( TIM4->SR & TIM_SR_UIF ) );			// Wait for UIF
 80039e4:	bf00      	nop
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <USER_PWM_Generate+0x70>)
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f9      	beq.n	80039e6 <USER_PWM_Generate+0x56>
}
 80039f2:	bf00      	nop
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40000800 	.word	0x40000800

08003a04 <USER_SYSTICK_Init>:
#include "main.h"

// Initialize SysTick

void USER_SYSTICK_Init( void )
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
    SYSTICK->CTRL	= 0;				// Clear register
 8003a08:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <USER_SYSTICK_Init+0x38>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
    SYSTICK->LOAD	= 0x00FFFFFF;			// Max start value
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <USER_SYSTICK_Init+0x38>)
 8003a10:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8003a14:	605a      	str	r2, [r3, #4]
    SYSTICK->VAL	= 0;				// Clear register
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <USER_SYSTICK_Init+0x38>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	609a      	str	r2, [r3, #8]

    SYSTICK->CTRL	|=	SYSTICK_CTRL_CLKSOURCE;	// Clock source is processor clock (AHB)
 8003a1c:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <USER_SYSTICK_Init+0x38>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a06      	ldr	r2, [pc, #24]	; (8003a3c <USER_SYSTICK_Init+0x38>)
 8003a22:	f043 0304 	orr.w	r3, r3, #4
 8003a26:	6013      	str	r3, [r2, #0]
    SYSTICK->CTRL	|=	SYSTICK_CTRL_ENABLE;	// Counter enabled
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <USER_SYSTICK_Init+0x38>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a03      	ldr	r2, [pc, #12]	; (8003a3c <USER_SYSTICK_Init+0x38>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6013      	str	r3, [r2, #0]
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	e000e010 	.word	0xe000e010

08003a40 <USER_SYSTICK_Delay_Millis>:

// Generate 1 millisecond delay via SysTick

void USER_SYSTICK_Delay_Millis( void )
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  SYSTICK->LOAD		=	SYSTICK_LOAD;
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <USER_SYSTICK_Delay_Millis+0x28>)
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <USER_SYSTICK_Delay_Millis+0x2c>)
 8003a48:	605a      	str	r2, [r3, #4]
  SYSTICK->VAL		=	0;
 8003a4a:	4b07      	ldr	r3, [pc, #28]	; (8003a68 <USER_SYSTICK_Delay_Millis+0x28>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	609a      	str	r2, [r3, #8]
  while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG));	// Returns 1 if timer counted to 0 since last time this was read
 8003a50:	bf00      	nop
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <USER_SYSTICK_Delay_Millis+0x28>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f9      	beq.n	8003a52 <USER_SYSTICK_Delay_Millis+0x12>
}
 8003a5e:	bf00      	nop
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	e000e010 	.word	0xe000e010
 8003a6c:	00011940 	.word	0x00011940

08003a70 <USER_SYSTICK_Delay_ms>:

// Generate milliseconds delay via SysTick

void USER_SYSTICK_Delay_ms( uint32_t t )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  for(; t > 0; t--)
 8003a78:	e004      	b.n	8003a84 <USER_SYSTICK_Delay_ms+0x14>
  {
      USER_SYSTICK_Delay_Millis();
 8003a7a:	f7ff ffe1 	bl	8003a40 <USER_SYSTICK_Delay_Millis>
  for(; t > 0; t--)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f7      	bne.n	8003a7a <USER_SYSTICK_Delay_ms+0xa>
  }
}
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <USER_TIM_Init>:
#include "GPIO.h"

// Initialize TIM timer

void USER_TIM_Init( uint8_t TIM )
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	71fb      	strb	r3, [r7, #7]
  if( TIM == 0 )
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d12e      	bne.n	8003b02 <USER_TIM_Init+0x6e>
  {
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM2EN;	// Clock enable for TIM2
 8003aa4:	4b56      	ldr	r3, [pc, #344]	; (8003c00 <USER_TIM_Init+0x16c>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	4a55      	ldr	r2, [pc, #340]	; (8003c00 <USER_TIM_Init+0x16c>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	61d3      	str	r3, [r2, #28]

    TIM2->SMCR		&=	~(TIM_SMCR_SMS);	// Step 1 - Enable internal clock source
 8003ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aba:	f023 0307 	bic.w	r3, r3, #7
 8003abe:	6093      	str	r3, [r2, #8]
    TIM2->CR1		&=	~(TIM_CR1_UDIS);	// Step 2 - UEV enabled
 8003ac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aca:	f023 0302 	bic.w	r3, r3, #2
 8003ace:	6013      	str	r3, [r2, #0]
    TIM2->CR1		&=	~(TIM_CR1_DIR);		// 	Counter as upcounter
 8003ad0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ada:	f023 0310 	bic.w	r3, r3, #16
 8003ade:	6013      	str	r3, [r2, #0]
    TIM2->CR1		&=	~(TIM_CR1_CMS);		//	Edge-aligned mode
 8003ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aea:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003aee:	6013      	str	r3, [r2, #0]
    TIM2->SR		&=	~(TIM_SR_UIF);		// Step 3 - Clear Update Interrupt Flag
 8003af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	6113      	str	r3, [r2, #16]
    TIM4->CCMR1		&=	~(TIM_CCMR1_OC1M_0);	//	PWM mode 1
    TIM4->CCMR1		|=	TIM_CCMR1_OC1M_2_1;

    TIM4->CR1		|=	TIM_CR1_CEN;			// Enable the Timer to start counting
  }
}
 8003b00:	e078      	b.n	8003bf4 <USER_TIM_Init+0x160>
  else if( TIM == 1 )
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d130      	bne.n	8003b6a <USER_TIM_Init+0xd6>
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM3EN;	// Clock enable for TIM3
 8003b08:	4b3d      	ldr	r3, [pc, #244]	; (8003c00 <USER_TIM_Init+0x16c>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	4a3c      	ldr	r2, [pc, #240]	; (8003c00 <USER_TIM_Init+0x16c>)
 8003b0e:	f043 0302 	orr.w	r3, r3, #2
 8003b12:	61d3      	str	r3, [r2, #28]
    TIM3->SMCR		&=	~(TIM_SMCR_SMS);
 8003b14:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <USER_TIM_Init+0x170>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <USER_TIM_Init+0x170>)
 8003b1a:	f023 0307 	bic.w	r3, r3, #7
 8003b1e:	6093      	str	r3, [r2, #8]
    TIM3->CR1		&=	~(TIM_CR1_UDIS);
 8003b20:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <USER_TIM_Init+0x170>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a37      	ldr	r2, [pc, #220]	; (8003c04 <USER_TIM_Init+0x170>)
 8003b26:	f023 0302 	bic.w	r3, r3, #2
 8003b2a:	6013      	str	r3, [r2, #0]
    TIM3->CR1		&=	~(TIM_CR1_DIR);
 8003b2c:	4b35      	ldr	r3, [pc, #212]	; (8003c04 <USER_TIM_Init+0x170>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a34      	ldr	r2, [pc, #208]	; (8003c04 <USER_TIM_Init+0x170>)
 8003b32:	f023 0310 	bic.w	r3, r3, #16
 8003b36:	6013      	str	r3, [r2, #0]
    TIM3->CR1		&=	~(TIM_CR1_CMS);
 8003b38:	4b32      	ldr	r3, [pc, #200]	; (8003c04 <USER_TIM_Init+0x170>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a31      	ldr	r2, [pc, #196]	; (8003c04 <USER_TIM_Init+0x170>)
 8003b3e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003b42:	6013      	str	r3, [r2, #0]
    TIM3->SR		&=	~(TIM_SR_UIF);
 8003b44:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <USER_TIM_Init+0x170>)
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	4a2e      	ldr	r2, [pc, #184]	; (8003c04 <USER_TIM_Init+0x170>)
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	6113      	str	r3, [r2, #16]
    TIM3->DIER 		|=	TIM_DIER_UIE;		// Step 4 - Enable Update Interrupt
 8003b50:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <USER_TIM_Init+0x170>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a2b      	ldr	r2, [pc, #172]	; (8003c04 <USER_TIM_Init+0x170>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	60d3      	str	r3, [r2, #12]
    NVIC->ISER[0]	|=	NVIC_ISER_29;		// Step 5 - Enable interrupt
 8003b5c:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <USER_TIM_Init+0x174>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a29      	ldr	r2, [pc, #164]	; (8003c08 <USER_TIM_Init+0x174>)
 8003b62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	e044      	b.n	8003bf4 <USER_TIM_Init+0x160>
  else if( TIM == 2 )
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d141      	bne.n	8003bf4 <USER_TIM_Init+0x160>
    RCC->APB1ENR 	|= 	RCC_APB1ENR_TIM4EN;	// Clock enable for TIM4
 8003b70:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <USER_TIM_Init+0x16c>)
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	4a22      	ldr	r2, [pc, #136]	; (8003c00 <USER_TIM_Init+0x16c>)
 8003b76:	f043 0304 	orr.w	r3, r3, #4
 8003b7a:	61d3      	str	r3, [r2, #28]
    TIM4->CR1		&=	~(TIM_CR1_UDIS);	// Step 1 - UEV enabled
 8003b7c:	4b23      	ldr	r3, [pc, #140]	; (8003c0c <USER_TIM_Init+0x178>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <USER_TIM_Init+0x178>)
 8003b82:	f023 0302 	bic.w	r3, r3, #2
 8003b86:	6013      	str	r3, [r2, #0]
    TIM4->CR1		&=	~(TIM_CR1_URS);		// 	UEV also by software
 8003b88:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <USER_TIM_Init+0x178>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	; (8003c0c <USER_TIM_Init+0x178>)
 8003b8e:	f023 0304 	bic.w	r3, r3, #4
 8003b92:	6013      	str	r3, [r2, #0]
    TIM4->CR1		&=	~(TIM_CR1_DIR);		// 	Counter as upcounter
 8003b94:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <USER_TIM_Init+0x178>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1c      	ldr	r2, [pc, #112]	; (8003c0c <USER_TIM_Init+0x178>)
 8003b9a:	f023 0310 	bic.w	r3, r3, #16
 8003b9e:	6013      	str	r3, [r2, #0]
    TIM4->CR1		&=	~(TIM_CR1_CMS);		// 	Edge-aligned mode
 8003ba0:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <USER_TIM_Init+0x178>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <USER_TIM_Init+0x178>)
 8003ba6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003baa:	6013      	str	r3, [r2, #0]
    TIM4->CR1		|=	TIM_CR1_ARPE;		//	Load ARR only on UEV
 8003bac:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <USER_TIM_Init+0x178>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a16      	ldr	r2, [pc, #88]	; (8003c0c <USER_TIM_Init+0x178>)
 8003bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb6:	6013      	str	r3, [r2, #0]
    TIM4->CCMR1		&=	~(TIM_CCMR1_CC1S);	// Step 2 - CC1 channel as output
 8003bb8:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <USER_TIM_Init+0x178>)
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	4a13      	ldr	r2, [pc, #76]	; (8003c0c <USER_TIM_Init+0x178>)
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1		|=	TIM_CCMR1_OC1PE;	//	CCRx load in UEV event
 8003bc4:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <USER_TIM_Init+0x178>)
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	4a10      	ldr	r2, [pc, #64]	; (8003c0c <USER_TIM_Init+0x178>)
 8003bca:	f043 0308 	orr.w	r3, r3, #8
 8003bce:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1		&=	~(TIM_CCMR1_OC1M_0);	//	PWM mode 1
 8003bd0:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <USER_TIM_Init+0x178>)
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	4a0d      	ldr	r2, [pc, #52]	; (8003c0c <USER_TIM_Init+0x178>)
 8003bd6:	f023 0310 	bic.w	r3, r3, #16
 8003bda:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1		|=	TIM_CCMR1_OC1M_2_1;
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <USER_TIM_Init+0x178>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <USER_TIM_Init+0x178>)
 8003be2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003be6:	6193      	str	r3, [r2, #24]
    TIM4->CR1		|=	TIM_CR1_CEN;			// Enable the Timer to start counting
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <USER_TIM_Init+0x178>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <USER_TIM_Init+0x178>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6013      	str	r3, [r2, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40000400 	.word	0x40000400
 8003c08:	e000e100 	.word	0xe000e100
 8003c0c:	40000800 	.word	0x40000800

08003c10 <USER_TIM_Delay>:

// Generate delay via TIM timer

void USER_TIM_Delay( uint8_t TIM, uint16_t TIM_PSC, uint16_t TIM_CNT )
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	80bb      	strh	r3, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	807b      	strh	r3, [r7, #2]
  if( TIM == 0 )
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d128      	bne.n	8003c7a <USER_TIM_Delay+0x6a>
  {
    TIM2->PSC	=	TIM_PSC;			// Configure initial prescaler and count values
 8003c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c2c:	88bb      	ldrh	r3, [r7, #4]
 8003c2e:	6293      	str	r3, [r2, #40]	; 0x28
    TIM2->CNT	=	TIM_CNT;
 8003c30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c34:	887b      	ldrh	r3, [r7, #2]
 8003c36:	6253      	str	r3, [r2, #36]	; 0x24

    TIM2->CR1	|=	TIM_CR1_CEN;			// Enable TIM2 timer to start counting
 8003c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6013      	str	r3, [r2, #0]

    while( !( TIM2->SR & TIM_SR_UIF ) );		// Wait for UIF
 8003c48:	bf00      	nop
 8003c4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f8      	beq.n	8003c4a <USER_TIM_Delay+0x3a>

    TIM2->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM2 timer
 8003c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	6013      	str	r3, [r2, #0]
    TIM2->SR	&=	~(TIM_SR_UIF);			// Clear UIF
 8003c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	6113      	str	r3, [r2, #16]
      TIM3->CNT	=	TIM_CNT;

      TIM3->CR1	|=	TIM_CR1_CEN;			// Enable TIM3 timer to start counting
    }
  }
}
 8003c78:	e01a      	b.n	8003cb0 <USER_TIM_Delay+0xa0>
  else if( TIM == 1 )
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d117      	bne.n	8003cb0 <USER_TIM_Delay+0xa0>
    if( !( TIM3->CR1 & TIM_CR1_CEN ) && !( TIM3->SR & TIM_SR_UIF ) )
 8003c80:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <USER_TIM_Delay+0xac>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d111      	bne.n	8003cb0 <USER_TIM_Delay+0xa0>
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <USER_TIM_Delay+0xac>)
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <USER_TIM_Delay+0xa0>
      TIM3->PSC	=	TIM_PSC;
 8003c98:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <USER_TIM_Delay+0xac>)
 8003c9a:	88bb      	ldrh	r3, [r7, #4]
 8003c9c:	6293      	str	r3, [r2, #40]	; 0x28
      TIM3->CNT	=	TIM_CNT;
 8003c9e:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <USER_TIM_Delay+0xac>)
 8003ca0:	887b      	ldrh	r3, [r7, #2]
 8003ca2:	6253      	str	r3, [r2, #36]	; 0x24
      TIM3->CR1	|=	TIM_CR1_CEN;			// Enable TIM3 timer to start counting
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <USER_TIM_Delay+0xac>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <USER_TIM_Delay+0xac>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40000400 	.word	0x40000400

08003cc0 <TIM3_IRQHandler>:

void TIM3_IRQHandler( void )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  if( TIM3->SR & TIM_SR_UIF )      			// Wait for UIF
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <TIM3_IRQHandler+0x3c>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d013      	beq.n	8003cf8 <TIM3_IRQHandler+0x38>
  {
    TIM3->CR1	&=	~(TIM_CR1_CEN);			// Stop TIM3 timer
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <TIM3_IRQHandler+0x3c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <TIM3_IRQHandler+0x3c>)
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	6013      	str	r3, [r2, #0]
    TIM3->SR	&=	~(TIM_SR_UIF);			// Clear UIF
 8003cdc:	4b07      	ldr	r3, [pc, #28]	; (8003cfc <TIM3_IRQHandler+0x3c>)
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	4a06      	ldr	r2, [pc, #24]	; (8003cfc <TIM3_IRQHandler+0x3c>)
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	6113      	str	r3, [r2, #16]

    USER_GPIO_Toggle( PORTC, 2 );
 8003ce8:	2102      	movs	r1, #2
 8003cea:	2002      	movs	r0, #2
 8003cec:	f7fe fb80 	bl	80023f0 <USER_GPIO_Toggle>
    USER_GPIO_Toggle( PORTC, 3 );
 8003cf0:	2103      	movs	r1, #3
 8003cf2:	2002      	movs	r0, #2
 8003cf4:	f7fe fb7c 	bl	80023f0 <USER_GPIO_Toggle>
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40000400 	.word	0x40000400

08003d00 <USER_USART_Init>:
#include "GPIO.h"

// Initialize USART

void USER_USART_Init( uint8_t USART )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	71fb      	strb	r3, [r7, #7]
  /* Only USART1 is clocked with PCLK2 (72 MHz max). Other USARTs are clocked with
  PCLK1 (36 MHz max) */

  if( USART == 0 )
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d13c      	bne.n	8003d8a <USER_USART_Init+0x8a>
  {
    RCC->APB2ENR	|= 	RCC_APB2ENR_USART1EN; 		// Clock enable for USART1
 8003d10:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <USER_USART_Init+0x94>)
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <USER_USART_Init+0x94>)
 8003d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d1a:	6193      	str	r3, [r2, #24]

    USER_GPIO_Define(PORTA, 9, OUT_10, OUT_AF_PP);		// Pin PA9 (USART1_TX) as alternate function output push-pull, max speed 10 MHz
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	2201      	movs	r2, #1
 8003d20:	2109      	movs	r1, #9
 8003d22:	2000      	movs	r0, #0
 8003d24:	f7fe f9ee 	bl	8002104 <USER_GPIO_Define>

    USER_GPIO_Define(PORTA, 10, INP, INP_PP);			// Pin PA10 (USART1_RX) as input pull-up
 8003d28:	2302      	movs	r3, #2
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	210a      	movs	r1, #10
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f7fe f9e8 	bl	8002104 <USER_GPIO_Define>
    USER_GPIO_Write(PORTA, 10, 1);
 8003d34:	2201      	movs	r2, #1
 8003d36:	210a      	movs	r1, #10
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f7fe fafd 	bl	8002338 <USER_GPIO_Write>

    USART1->CR1		|=	 USART_CR1_UE;			// Step 1 - USART enabled
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <USER_USART_Init+0x98>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4a15      	ldr	r2, [pc, #84]	; (8003d98 <USER_USART_Init+0x98>)
 8003d44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d48:	60d3      	str	r3, [r2, #12]
    USART1->CR1		&=	~USART_CR1_M;			// Step 2 - 8 Data bits
 8003d4a:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <USER_USART_Init+0x98>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	4a12      	ldr	r2, [pc, #72]	; (8003d98 <USER_USART_Init+0x98>)
 8003d50:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003d54:	f023 031f 	bic.w	r3, r3, #31
 8003d58:	60d3      	str	r3, [r2, #12]
    USART1->CR2		&=	~USART_CR2_STOP;		// Step 3 - 1 Stop bit
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <USER_USART_Init+0x98>)
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	4a0e      	ldr	r2, [pc, #56]	; (8003d98 <USER_USART_Init+0x98>)
 8003d60:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d68:	6113      	str	r3, [r2, #16]
    USART1->BRR		=	 USARTDIV_64MHZ;		// Step 5 - Desired baud rate
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <USER_USART_Init+0x98>)
 8003d6c:	f240 222b 	movw	r2, #555	; 0x22b
 8003d70:	609a      	str	r2, [r3, #8]
    USART1->CR1		|= 	 USART_CR1_TE;			// Step 6 - Transmitter enabled
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <USER_USART_Init+0x98>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <USER_USART_Init+0x98>)
 8003d78:	f043 0308 	orr.w	r3, r3, #8
 8003d7c:	60d3      	str	r3, [r2, #12]
    USART1->CR1		|=	 USART_CR1_RE;			// Step 7 - Receiver enabled
 8003d7e:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <USER_USART_Init+0x98>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4a05      	ldr	r2, [pc, #20]	; (8003d98 <USER_USART_Init+0x98>)
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	60d3      	str	r3, [r2, #12]
  }
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40013800 	.word	0x40013800

08003d9c <_write>:
 *
 * It redirects standard output stream in C to USART peripheral
 * device */

int _write( int file, char *ptr, int len )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for( DataIdx = 0 ; DataIdx < len; DataIdx++ )
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	e00f      	b.n	8003dce <_write+0x32>
  {
    while(!( USART1->SR & USART_SR_TXE ));		// Wait until USART_DR is empty
 8003dae:	bf00      	nop
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <_write+0x48>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f9      	beq.n	8003db0 <_write+0x14>
    USART1->DR = *ptr++;				// Transmit data
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	60ba      	str	r2, [r7, #8]
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <_write+0x48>)
 8003dc6:	605a      	str	r2, [r3, #4]
  for( DataIdx = 0 ; DataIdx < len; DataIdx++ )
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	dbeb      	blt.n	8003dae <_write+0x12>
  }

  return len;
 8003dd6:	687b      	ldr	r3, [r7, #4]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40013800 	.word	0x40013800

08003de8 <main>:
uint8_t operationMode = 0;

/* Main function */

int main( void )
{
 8003de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dec:	b092      	sub	sp, #72	; 0x48
 8003dee:	af08      	add	r7, sp, #32
  USER_SYSCLK_Configuration();
 8003df0:	f000 fabe 	bl	8004370 <USER_SYSCLK_Configuration>

  USER_TIM_Init( TIM_2 );
 8003df4:	2000      	movs	r0, #0
 8003df6:	f7ff fe4d 	bl	8003a94 <USER_TIM_Init>
  USER_ADC_Init( ADC_1 );
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f7fd f980 	bl	8001100 <USER_ADC_Init>
  USER_USART_Init( USART_1 );
 8003e00:	2000      	movs	r0, #0
 8003e02:	f7ff ff7d 	bl	8003d00 <USER_USART_Init>
  USER_MATRIX_KEYPAD_Init();
 8003e06:	f7fe fec2 	bl	8002b8e <USER_MATRIX_KEYPAD_Init>
  USER_LCD_Init();
 8003e0a:	f7fe fc85 	bl	8002718 <USER_LCD_Init>
  USER_LEDS_Init();
 8003e0e:	f7fe fea1 	bl	8002b54 <USER_LEDS_Init>
  USER_OLED_Init_64( I2C_2 );
 8003e12:	2001      	movs	r0, #1
 8003e14:	f7ff f863 	bl	8002ede <USER_OLED_Init_64>
  USER_PWM_Init();
 8003e18:	f7ff fda8 	bl	800396c <USER_PWM_Init>

  EngTrModel_initialize();
 8003e1c:	f7fe f96a 	bl	80020f4 <EngTrModel_initialize>

  USER_OLED_Animation( I2C_2, oled_buffer );
 8003e20:	4953      	ldr	r1, [pc, #332]	; (8003f70 <main+0x188>)
 8003e22:	2001      	movs	r0, #1
 8003e24:	f7ff fb22 	bl	800346c <USER_OLED_Animation>
    /* Read the ADC conversion, convert it to a voltage value,
     * and normalize it to within the range accepted by the model,
     * this for manual mode.
     */

    conversionData = USER_ADC_Convert( ADC_1 );
 8003e28:	2000      	movs	r0, #0
 8003e2a:	f7fd f9c9 	bl	80011c0 <USER_ADC_Convert>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	461a      	mov	r2, r3
 8003e32:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <main+0x18c>)
 8003e34:	801a      	strh	r2, [r3, #0]
    voltageValue = 0.00080586 * conversionData;
 8003e36:	4b4f      	ldr	r3, [pc, #316]	; (8003f74 <main+0x18c>)
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc faf2 	bl	8000424 <__aeabi_i2d>
 8003e40:	a349      	add	r3, pc, #292	; (adr r3, 8003f68 <main+0x180>)
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	f7fc fb57 	bl	80004f8 <__aeabi_dmul>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4610      	mov	r0, r2
 8003e50:	4619      	mov	r1, r3
 8003e52:	f7fc fe49 	bl	8000ae8 <__aeabi_d2f>
 8003e56:	4603      	mov	r3, r0
 8003e58:	4a47      	ldr	r2, [pc, #284]	; (8003f78 <main+0x190>)
 8003e5a:	6013      	str	r3, [r2, #0]
    potentiometerThrottle = scaleVoltageValue( voltageValue, 0, 3.3 );
 8003e5c:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <main+0x190>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a46      	ldr	r2, [pc, #280]	; (8003f7c <main+0x194>)
 8003e62:	f04f 0100 	mov.w	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd f9c6 	bl	80011f8 <scaleVoltageValue>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	4a44      	ldr	r2, [pc, #272]	; (8003f80 <main+0x198>)
 8003e70:	6013      	str	r3, [r2, #0]
     * adapt the brake value, LEDs states,
     * micro servo direction and operation mode
     * based on the selected key.
     */

    selectedKey = USER_MATRIX_KEYPAD_Read();
 8003e72:	f7fe fee9 	bl	8002c48 <USER_MATRIX_KEYPAD_Read>
 8003e76:	4603      	mov	r3, r0
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <main+0x19c>)
 8003e7c:	701a      	strb	r2, [r3, #0]

    if(selectedKey == '5')							// Brake action
 8003e7e:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <main+0x19c>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b35      	cmp	r3, #53	; 0x35
 8003e84:	d108      	bne.n	8003e98 <main+0xb0>
    {
      keyBrakeTorque = 100.0;							// Full brake torque
 8003e86:	4b40      	ldr	r3, [pc, #256]	; (8003f88 <main+0x1a0>)
 8003e88:	4a40      	ldr	r2, [pc, #256]	; (8003f8c <main+0x1a4>)
 8003e8a:	601a      	str	r2, [r3, #0]

      USER_TIM_Delay( TIM_3, TIM_PSC_200MS, TIM_CNT_200MS );			// LEDs blinking
 8003e8c:	22e6      	movs	r2, #230	; 0xe6
 8003e8e:	21c3      	movs	r1, #195	; 0xc3
 8003e90:	2001      	movs	r0, #1
 8003e92:	f7ff febd 	bl	8003c10 <USER_TIM_Delay>
 8003e96:	e04d      	b.n	8003f34 <main+0x14c>
    }
    else if(selectedKey == '4' || selectedKey == '6')				// Left or right action
 8003e98:	4b3a      	ldr	r3, [pc, #232]	; (8003f84 <main+0x19c>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b34      	cmp	r3, #52	; 0x34
 8003e9e:	d003      	beq.n	8003ea8 <main+0xc0>
 8003ea0:	4b38      	ldr	r3, [pc, #224]	; (8003f84 <main+0x19c>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b36      	cmp	r3, #54	; 0x36
 8003ea6:	d120      	bne.n	8003eea <main+0x102>
    {
      keyBrakeTorque = 50.0;							// Half brake torque
 8003ea8:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <main+0x1a0>)
 8003eaa:	4a39      	ldr	r2, [pc, #228]	; (8003f90 <main+0x1a8>)
 8003eac:	601a      	str	r2, [r3, #0]

      if(selectedKey == '4')							// Left action
 8003eae:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <main+0x19c>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b34      	cmp	r3, #52	; 0x34
 8003eb4:	d10c      	bne.n	8003ed0 <main+0xe8>
      {
	  USER_GPIO_Write( PORTC, 2, 1 );					// Left LED turned on
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	2102      	movs	r1, #2
 8003eba:	2002      	movs	r0, #2
 8003ebc:	f7fe fa3c 	bl	8002338 <USER_GPIO_Write>
	  USER_PWM_Generate( PWM_PSC_20MS, PWM_ARR_20MS, PWM_CCRX_12_5 );	// The micro servo rotates to a 180° position
 8003ec0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003ec4:	f64f 11ff 	movw	r1, #63999	; 0xf9ff
 8003ec8:	2013      	movs	r0, #19
 8003eca:	f7ff fd61 	bl	8003990 <USER_PWM_Generate>
      if(selectedKey == '4')							// Left action
 8003ece:	e031      	b.n	8003f34 <main+0x14c>
      }
      else									// Right action
      {
	  USER_GPIO_Write( PORTC, 3, 1 );					// Right LED turned on
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	2103      	movs	r1, #3
 8003ed4:	2002      	movs	r0, #2
 8003ed6:	f7fe fa2f 	bl	8002338 <USER_GPIO_Write>
	  USER_PWM_Generate( PWM_PSC_20MS, PWM_ARR_20MS, PWM_CCRX_2_5 );	// The micro servo rotates to a 0° position
 8003eda:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003ede:	f64f 11ff 	movw	r1, #63999	; 0xf9ff
 8003ee2:	2013      	movs	r0, #19
 8003ee4:	f7ff fd54 	bl	8003990 <USER_PWM_Generate>
      if(selectedKey == '4')							// Left action
 8003ee8:	e024      	b.n	8003f34 <main+0x14c>
      }
    }
    else if(selectedKey == 'A')							// Select manual mode action
 8003eea:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <main+0x19c>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b41      	cmp	r3, #65	; 0x41
 8003ef0:	d103      	bne.n	8003efa <main+0x112>
    {
	operationMode = 0;							// Manual mode
 8003ef2:	4b28      	ldr	r3, [pc, #160]	; (8003f94 <main+0x1ac>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
 8003ef8:	e01c      	b.n	8003f34 <main+0x14c>
    }
    else if(selectedKey == 'B')							// Select simulation mode action
 8003efa:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <main+0x19c>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b42      	cmp	r3, #66	; 0x42
 8003f00:	d103      	bne.n	8003f0a <main+0x122>
    {
	operationMode = 1;							// Simulation mode
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <main+0x1ac>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	701a      	strb	r2, [r3, #0]
 8003f08:	e014      	b.n	8003f34 <main+0x14c>
    }
    else									// No action
    {
      keyBrakeTorque = 0.0;							// No brake torque
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <main+0x1a0>)
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]

      USER_GPIO_Write( PORTC, 2, 0 );						// LEDs turned off
 8003f12:	2200      	movs	r2, #0
 8003f14:	2102      	movs	r1, #2
 8003f16:	2002      	movs	r0, #2
 8003f18:	f7fe fa0e 	bl	8002338 <USER_GPIO_Write>
      USER_GPIO_Write( PORTC, 3, 0 );
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2103      	movs	r1, #3
 8003f20:	2002      	movs	r0, #2
 8003f22:	f7fe fa09 	bl	8002338 <USER_GPIO_Write>

      USER_PWM_Generate( PWM_PSC_20MS, PWM_ARR_20MS, PWM_CCRX_7_5 );		// The micro servo rotates to a 90° position
 8003f26:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8003f2a:	f64f 11ff 	movw	r1, #63999	; 0xf9ff
 8003f2e:	2013      	movs	r0, #19
 8003f30:	f7ff fd2e 	bl	8003990 <USER_PWM_Generate>

    /* Read the throttle value sent via UART by the Raspeberry Pi
     * for simulation mode.
     */

    if( USART1->SR & USART_SR_RXNE )						// If USART_DR is not empty
 8003f34:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <main+0x1b0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d004      	beq.n	8003f4a <main+0x162>
    {
	receivedThrottle = USART1->DR;						// Receive data
 8003f40:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <main+0x1b0>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <main+0x1b4>)
 8003f48:	701a      	strb	r2, [r3, #0]
    /* Feed the model with the throttle value
     * and the brake value, take a step and
     * sanitize the output values.
     */

    if(operationMode == 0)							// Manual mode
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <main+0x1ac>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d128      	bne.n	8003fa4 <main+0x1bc>
    {
	EngTrModel_U.Throttle = potentiometerThrottle;				// Model feed with potentiometer throttle value
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <main+0x198>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fc fa76 	bl	8000448 <__aeabi_f2d>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	490f      	ldr	r1, [pc, #60]	; (8003fa0 <main+0x1b8>)
 8003f62:	e9c1 2300 	strd	r2, r3, [r1]
 8003f66:	e02b      	b.n	8003fc0 <main+0x1d8>
 8003f68:	2c2e064e 	.word	0x2c2e064e
 8003f6c:	3f4a680b 	.word	0x3f4a680b
 8003f70:	200002dc 	.word	0x200002dc
 8003f74:	200002a0 	.word	0x200002a0
 8003f78:	200002a4 	.word	0x200002a4
 8003f7c:	40533333 	.word	0x40533333
 8003f80:	200002a8 	.word	0x200002a8
 8003f84:	20000024 	.word	0x20000024
 8003f88:	200002b0 	.word	0x200002b0
 8003f8c:	42c80000 	.word	0x42c80000
 8003f90:	42480000 	.word	0x42480000
 8003f94:	20000a5c 	.word	0x20000a5c
 8003f98:	40013800 	.word	0x40013800
 8003f9c:	200002ac 	.word	0x200002ac
 8003fa0:	20000278 	.word	0x20000278
    }
    else									// Simulation mode
    {
      EngTrModel_U.Throttle = (float) receivedThrottle;				// Model feed with received throttle value
 8003fa4:	4bad      	ldr	r3, [pc, #692]	; (800425c <main+0x474>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fc fea3 	bl	8000cf4 <__aeabi_ui2f>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fc fa49 	bl	8000448 <__aeabi_f2d>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	49a9      	ldr	r1, [pc, #676]	; (8004260 <main+0x478>)
 8003fbc:	e9c1 2300 	strd	r2, r3, [r1]
    }

    EngTrModel_U.BrakeTorque = keyBrakeTorque;					// Model feed with brake value
 8003fc0:	4ba8      	ldr	r3, [pc, #672]	; (8004264 <main+0x47c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc fa3f 	bl	8000448 <__aeabi_f2d>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	49a4      	ldr	r1, [pc, #656]	; (8004260 <main+0x478>)
 8003fd0:	e9c1 2302 	strd	r2, r3, [r1, #8]

    EngTrModel_step();								// Take a step
 8003fd4:	f7fd fdb4 	bl	8001b40 <EngTrModel_step>

    // Sanitize the output values

    if(isnan(EngTrModel_Y.VehicleSpeed) || EngTrModel_Y.VehicleSpeed < 0 || EngTrModel_Y.VehicleSpeed > 200)
 8003fd8:	4ba3      	ldr	r3, [pc, #652]	; (8004268 <main+0x480>)
 8003fda:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	f7fc fd23 	bl	8000a2c <__aeabi_dcmpun>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d116      	bne.n	800401a <main+0x232>
 8003fec:	4b9e      	ldr	r3, [pc, #632]	; (8004268 <main+0x480>)
 8003fee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	f7fc fcef 	bl	80009dc <__aeabi_dcmplt>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10a      	bne.n	800401a <main+0x232>
 8004004:	4b98      	ldr	r3, [pc, #608]	; (8004268 <main+0x480>)
 8004006:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	4b97      	ldr	r3, [pc, #604]	; (800426c <main+0x484>)
 8004010:	f7fc fd02 	bl	8000a18 <__aeabi_dcmpgt>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <main+0x240>
    {
      EngTrModel_Y.VehicleSpeed = 0.0;
 800401a:	4993      	ldr	r1, [pc, #588]	; (8004268 <main+0x480>)
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9c1 2302 	strd	r2, r3, [r1, #8]
    }

    if(isnan(EngTrModel_Y.EngineSpeed) || EngTrModel_Y.EngineSpeed < 0)
 8004028:	4b8f      	ldr	r3, [pc, #572]	; (8004268 <main+0x480>)
 800402a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	f7fc fcfb 	bl	8000a2c <__aeabi_dcmpun>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <main+0x26c>
 800403c:	4b8a      	ldr	r3, [pc, #552]	; (8004268 <main+0x480>)
 800403e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	f7fc fcc7 	bl	80009dc <__aeabi_dcmplt>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d006      	beq.n	8004062 <main+0x27a>
    {
      EngTrModel_Y.EngineSpeed = 0.0;
 8004054:	4984      	ldr	r1, [pc, #528]	; (8004268 <main+0x480>)
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if(isnan(EngTrModel_Y.Gear) || EngTrModel_Y.Gear < 0)
 8004062:	4b81      	ldr	r3, [pc, #516]	; (8004268 <main+0x480>)
 8004064:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	f7fc fcde 	bl	8000a2c <__aeabi_dcmpun>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10b      	bne.n	800408e <main+0x2a6>
 8004076:	4b7c      	ldr	r3, [pc, #496]	; (8004268 <main+0x480>)
 8004078:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	f7fc fcaa 	bl	80009dc <__aeabi_dcmplt>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d006      	beq.n	800409c <main+0x2b4>
    {
      EngTrModel_Y.Gear = 0.0;
 800408e:	4976      	ldr	r1, [pc, #472]	; (8004268 <main+0x480>)
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9c1 2304 	strd	r2, r3, [r1, #16]

    /* Send via UART the output values of the model,
     * subsequently received by the Raspberry Pi.
     */

    printf("%f,%f,%f,%f,%f\n\r", potentiometerThrottle, keyBrakeTorque, EngTrModel_Y.VehicleSpeed, EngTrModel_Y.EngineSpeed, EngTrModel_Y.Gear);
 800409c:	4b74      	ldr	r3, [pc, #464]	; (8004270 <main+0x488>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fc f9d1 	bl	8000448 <__aeabi_f2d>
 80040a6:	4682      	mov	sl, r0
 80040a8:	468b      	mov	fp, r1
 80040aa:	4b6e      	ldr	r3, [pc, #440]	; (8004264 <main+0x47c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc f9ca 	bl	8000448 <__aeabi_f2d>
 80040b4:	4680      	mov	r8, r0
 80040b6:	4689      	mov	r9, r1
 80040b8:	4b6b      	ldr	r3, [pc, #428]	; (8004268 <main+0x480>)
 80040ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80040be:	496a      	ldr	r1, [pc, #424]	; (8004268 <main+0x480>)
 80040c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040c4:	4c68      	ldr	r4, [pc, #416]	; (8004268 <main+0x480>)
 80040c6:	f104 0510 	add.w	r5, r4, #16
 80040ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80040ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80040d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040da:	e9cd 8900 	strd	r8, r9, [sp]
 80040de:	4652      	mov	r2, sl
 80040e0:	465b      	mov	r3, fp
 80040e2:	4864      	ldr	r0, [pc, #400]	; (8004274 <main+0x48c>)
 80040e4:	f001 fb74 	bl	80057d0 <iprintf>
    /* Extract the whole and decimal parts for Throttle,
     * Engine Speed and Vehicle Speed, and cast them
     * alongside Brake and Gear to integers.
     */

    int ThrottleWhole = (int) ( potentiometerThrottle );
 80040e8:	4b61      	ldr	r3, [pc, #388]	; (8004270 <main+0x488>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fc ffa9 	bl	8001044 <__aeabi_f2iz>
 80040f2:	4603      	mov	r3, r0
 80040f4:	623b      	str	r3, [r7, #32]
    int ThrottleDecimal = (int) ( ( potentiometerThrottle - ThrottleWhole ) * 100 );
 80040f6:	4b5e      	ldr	r3, [pc, #376]	; (8004270 <main+0x488>)
 80040f8:	681c      	ldr	r4, [r3, #0]
 80040fa:	6a38      	ldr	r0, [r7, #32]
 80040fc:	f7fc fdfe 	bl	8000cfc <__aeabi_i2f>
 8004100:	4603      	mov	r3, r0
 8004102:	4619      	mov	r1, r3
 8004104:	4620      	mov	r0, r4
 8004106:	f7fc fd43 	bl	8000b90 <__aeabi_fsub>
 800410a:	4603      	mov	r3, r0
 800410c:	495a      	ldr	r1, [pc, #360]	; (8004278 <main+0x490>)
 800410e:	4618      	mov	r0, r3
 8004110:	f7fc fe48 	bl	8000da4 <__aeabi_fmul>
 8004114:	4603      	mov	r3, r0
 8004116:	4618      	mov	r0, r3
 8004118:	f7fc ff94 	bl	8001044 <__aeabi_f2iz>
 800411c:	4603      	mov	r3, r0
 800411e:	61fb      	str	r3, [r7, #28]

    int VehicleSpeedWhole = (int)( EngTrModel_Y.VehicleSpeed );
 8004120:	4b51      	ldr	r3, [pc, #324]	; (8004268 <main+0x480>)
 8004122:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004126:	4610      	mov	r0, r2
 8004128:	4619      	mov	r1, r3
 800412a:	f7fc fc95 	bl	8000a58 <__aeabi_d2iz>
 800412e:	4603      	mov	r3, r0
 8004130:	61bb      	str	r3, [r7, #24]
    int VehicleSpeedDecimal = (int)( ( EngTrModel_Y.VehicleSpeed - VehicleSpeedWhole ) * 100 );
 8004132:	4b4d      	ldr	r3, [pc, #308]	; (8004268 <main+0x480>)
 8004134:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004138:	69b8      	ldr	r0, [r7, #24]
 800413a:	f7fc f973 	bl	8000424 <__aeabi_i2d>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4620      	mov	r0, r4
 8004144:	4629      	mov	r1, r5
 8004146:	f7fc f81f 	bl	8000188 <__aeabi_dsub>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4610      	mov	r0, r2
 8004150:	4619      	mov	r1, r3
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	4b49      	ldr	r3, [pc, #292]	; (800427c <main+0x494>)
 8004158:	f7fc f9ce 	bl	80004f8 <__aeabi_dmul>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	f7fc fc78 	bl	8000a58 <__aeabi_d2iz>
 8004168:	4603      	mov	r3, r0
 800416a:	617b      	str	r3, [r7, #20]

    int EngineSpeedWhole = (int)( EngTrModel_Y.EngineSpeed );
 800416c:	4b3e      	ldr	r3, [pc, #248]	; (8004268 <main+0x480>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	f7fc fc6f 	bl	8000a58 <__aeabi_d2iz>
 800417a:	4603      	mov	r3, r0
 800417c:	613b      	str	r3, [r7, #16]
    int EngineSpeedDecimal = (int)( ( EngTrModel_Y.EngineSpeed - EngineSpeedWhole ) * 100 );
 800417e:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <main+0x480>)
 8004180:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004184:	6938      	ldr	r0, [r7, #16]
 8004186:	f7fc f94d 	bl	8000424 <__aeabi_i2d>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4620      	mov	r0, r4
 8004190:	4629      	mov	r1, r5
 8004192:	f7fb fff9 	bl	8000188 <__aeabi_dsub>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4610      	mov	r0, r2
 800419c:	4619      	mov	r1, r3
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	4b36      	ldr	r3, [pc, #216]	; (800427c <main+0x494>)
 80041a4:	f7fc f9a8 	bl	80004f8 <__aeabi_dmul>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4610      	mov	r0, r2
 80041ae:	4619      	mov	r1, r3
 80041b0:	f7fc fc52 	bl	8000a58 <__aeabi_d2iz>
 80041b4:	4603      	mov	r3, r0
 80041b6:	60fb      	str	r3, [r7, #12]

    int BrakeWhole = (int) ( keyBrakeTorque );
 80041b8:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <main+0x47c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fc ff41 	bl	8001044 <__aeabi_f2iz>
 80041c2:	4603      	mov	r3, r0
 80041c4:	60bb      	str	r3, [r7, #8]
    int GearWhole = (int) ( EngTrModel_Y.Gear );
 80041c6:	4b28      	ldr	r3, [pc, #160]	; (8004268 <main+0x480>)
 80041c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	f7fc fc42 	bl	8000a58 <__aeabi_d2iz>
 80041d4:	4603      	mov	r3, r0
 80041d6:	607b      	str	r3, [r7, #4]

    // Write the messages to send to the LCD

    snprintf( FirstLine_LCD_MSG, sizeof(FirstLine_LCD_MSG), "%03d.%01d  %03d.%01d m/s", ThrottleWhole, ThrottleDecimal / 10, VehicleSpeedWhole, VehicleSpeedDecimal / 10 );
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	4a29      	ldr	r2, [pc, #164]	; (8004280 <main+0x498>)
 80041dc:	fb82 1203 	smull	r1, r2, r2, r3
 80041e0:	1092      	asrs	r2, r2, #2
 80041e2:	17db      	asrs	r3, r3, #31
 80041e4:	1ad2      	subs	r2, r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	4925      	ldr	r1, [pc, #148]	; (8004280 <main+0x498>)
 80041ea:	fb81 0103 	smull	r0, r1, r1, r3
 80041ee:	1089      	asrs	r1, r1, #2
 80041f0:	17db      	asrs	r3, r3, #31
 80041f2:	1acb      	subs	r3, r1, r3
 80041f4:	9302      	str	r3, [sp, #8]
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	9200      	str	r2, [sp, #0]
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	4a21      	ldr	r2, [pc, #132]	; (8004284 <main+0x49c>)
 8004200:	2111      	movs	r1, #17
 8004202:	4821      	ldr	r0, [pc, #132]	; (8004288 <main+0x4a0>)
 8004204:	f001 faf6 	bl	80057f4 <sniprintf>
    snprintf( SecondLine_LCD_MSG, sizeof(SecondLine_LCD_MSG), "%03d %01d %04d.%01d RPM", BrakeWhole, GearWhole, EngineSpeedWhole, EngineSpeedDecimal / 10 );
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4a1d      	ldr	r2, [pc, #116]	; (8004280 <main+0x498>)
 800420c:	fb82 1203 	smull	r1, r2, r2, r3
 8004210:	1092      	asrs	r2, r2, #2
 8004212:	17db      	asrs	r3, r3, #31
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	9302      	str	r3, [sp, #8]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4a1a      	ldr	r2, [pc, #104]	; (800428c <main+0x4a4>)
 8004224:	2111      	movs	r1, #17
 8004226:	481a      	ldr	r0, [pc, #104]	; (8004290 <main+0x4a8>)
 8004228:	f001 fae4 	bl	80057f4 <sniprintf>

    // Display values on the LCD

    LCD_Set_Cursor( 1, 1 );
 800422c:	2101      	movs	r1, #1
 800422e:	2001      	movs	r0, #1
 8004230:	f7fe fbd8 	bl	80029e4 <LCD_Set_Cursor>
    LCD_Put_Str( FirstLine_LCD_MSG );
 8004234:	4814      	ldr	r0, [pc, #80]	; (8004288 <main+0x4a0>)
 8004236:	f7fe fbf7 	bl	8002a28 <LCD_Put_Str>
    LCD_Set_Cursor( 2, 1 );
 800423a:	2101      	movs	r1, #1
 800423c:	2002      	movs	r0, #2
 800423e:	f7fe fbd1 	bl	80029e4 <LCD_Set_Cursor>
    LCD_Put_Str( SecondLine_LCD_MSG );
 8004242:	4813      	ldr	r0, [pc, #76]	; (8004290 <main+0x4a8>)
 8004244:	f7fe fbf0 	bl	8002a28 <LCD_Put_Str>
     *  on the OLED screen.
     */

    // Write the messages to send to the OLED screen

    if(operationMode == 0)							// Manuel mode
 8004248:	4b12      	ldr	r3, [pc, #72]	; (8004294 <main+0x4ac>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d127      	bne.n	80042a0 <main+0x4b8>
    {
	snprintf(OLED_MSGS[0], sizeof(OLED_MSGS[0]), "MODE: Man");
 8004250:	4a11      	ldr	r2, [pc, #68]	; (8004298 <main+0x4b0>)
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	4811      	ldr	r0, [pc, #68]	; (800429c <main+0x4b4>)
 8004256:	f001 facd 	bl	80057f4 <sniprintf>
 800425a:	e026      	b.n	80042aa <main+0x4c2>
 800425c:	200002ac 	.word	0x200002ac
 8004260:	20000278 	.word	0x20000278
 8004264:	200002b0 	.word	0x200002b0
 8004268:	20000288 	.word	0x20000288
 800426c:	40690000 	.word	0x40690000
 8004270:	200002a8 	.word	0x200002a8
 8004274:	0800a0fc 	.word	0x0800a0fc
 8004278:	42c80000 	.word	0x42c80000
 800427c:	40590000 	.word	0x40590000
 8004280:	66666667 	.word	0x66666667
 8004284:	0800a110 	.word	0x0800a110
 8004288:	200002b4 	.word	0x200002b4
 800428c:	0800a12c 	.word	0x0800a12c
 8004290:	200002c8 	.word	0x200002c8
 8004294:	20000a5c 	.word	0x20000a5c
 8004298:	0800a144 	.word	0x0800a144
 800429c:	200006dc 	.word	0x200006dc
    }
    else									// Simulation mode
    {
	snprintf(OLED_MSGS[0], sizeof(OLED_MSGS[0]), "MODE: Sim");
 80042a0:	4a24      	ldr	r2, [pc, #144]	; (8004334 <main+0x54c>)
 80042a2:	2180      	movs	r1, #128	; 0x80
 80042a4:	4824      	ldr	r0, [pc, #144]	; (8004338 <main+0x550>)
 80042a6:	f001 faa5 	bl	80057f4 <sniprintf>
    }

    snprintf(OLED_MSGS[1], sizeof(OLED_MSGS[1]), "MANUAL THROTTLE: %03d.%02d", ThrottleWhole, ThrottleDecimal);
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	4a22      	ldr	r2, [pc, #136]	; (800433c <main+0x554>)
 80042b2:	2180      	movs	r1, #128	; 0x80
 80042b4:	4822      	ldr	r0, [pc, #136]	; (8004340 <main+0x558>)
 80042b6:	f001 fa9d 	bl	80057f4 <sniprintf>
    snprintf(OLED_MSGS[2], sizeof(OLED_MSGS[2]), "SIMULATION THROTTLE: %03d", receivedThrottle);
 80042ba:	4b22      	ldr	r3, [pc, #136]	; (8004344 <main+0x55c>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	4a22      	ldr	r2, [pc, #136]	; (8004348 <main+0x560>)
 80042c0:	2180      	movs	r1, #128	; 0x80
 80042c2:	4822      	ldr	r0, [pc, #136]	; (800434c <main+0x564>)
 80042c4:	f001 fa96 	bl	80057f4 <sniprintf>
    snprintf(OLED_MSGS[3], sizeof(OLED_MSGS[3]), "BRAKE: %03d", BrakeWhole);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4a21      	ldr	r2, [pc, #132]	; (8004350 <main+0x568>)
 80042cc:	2180      	movs	r1, #128	; 0x80
 80042ce:	4821      	ldr	r0, [pc, #132]	; (8004354 <main+0x56c>)
 80042d0:	f001 fa90 	bl	80057f4 <sniprintf>
    snprintf(OLED_MSGS[4], sizeof(OLED_MSGS[4]), "VEHICLE SPEED: %03d.%02d m/s", VehicleSpeedWhole, VehicleSpeedDecimal);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	4a1f      	ldr	r2, [pc, #124]	; (8004358 <main+0x570>)
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	481f      	ldr	r0, [pc, #124]	; (800435c <main+0x574>)
 80042e0:	f001 fa88 	bl	80057f4 <sniprintf>
    snprintf(OLED_MSGS[5], sizeof(OLED_MSGS[5]), "ENGINE SPEED: %04d.%02d RPM", EngineSpeedWhole, EngineSpeedDecimal);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <main+0x578>)
 80042ec:	2180      	movs	r1, #128	; 0x80
 80042ee:	481d      	ldr	r0, [pc, #116]	; (8004364 <main+0x57c>)
 80042f0:	f001 fa80 	bl	80057f4 <sniprintf>
    snprintf(OLED_MSGS[6], sizeof(OLED_MSGS[6]), "GEAR: %01d", GearWhole);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <main+0x580>)
 80042f8:	2180      	movs	r1, #128	; 0x80
 80042fa:	481c      	ldr	r0, [pc, #112]	; (800436c <main+0x584>)
 80042fc:	f001 fa7a 	bl	80057f4 <sniprintf>

    // Display values on the OLED screen

    for (int i = 0; i < OLED_MSGS_NUMBER; ++i)
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
 8004304:	e00c      	b.n	8004320 <main+0x538>
    {
	USER_OLED_Message( I2C_2, OLED_MSGS[i], 0, i );
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	01db      	lsls	r3, r3, #7
 800430a:	4a0b      	ldr	r2, [pc, #44]	; (8004338 <main+0x550>)
 800430c:	1899      	adds	r1, r3, r2
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2200      	movs	r2, #0
 8004314:	2001      	movs	r0, #1
 8004316:	f7fe fe9b 	bl	8003050 <USER_OLED_Message>
    for (int i = 0; i < OLED_MSGS_NUMBER; ++i)
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	3301      	adds	r3, #1
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	2b06      	cmp	r3, #6
 8004324:	ddef      	ble.n	8004306 <main+0x51e>
    }

    USER_TIM_Delay( TIM_2, TIM_PSC_200MS, TIM_CNT_200MS );
 8004326:	22e6      	movs	r2, #230	; 0xe6
 8004328:	21c3      	movs	r1, #195	; 0xc3
 800432a:	2000      	movs	r0, #0
 800432c:	f7ff fc70 	bl	8003c10 <USER_TIM_Delay>
  {
 8004330:	e57a      	b.n	8003e28 <main+0x40>
 8004332:	bf00      	nop
 8004334:	0800a150 	.word	0x0800a150
 8004338:	200006dc 	.word	0x200006dc
 800433c:	0800a15c 	.word	0x0800a15c
 8004340:	2000075c 	.word	0x2000075c
 8004344:	200002ac 	.word	0x200002ac
 8004348:	0800a178 	.word	0x0800a178
 800434c:	200007dc 	.word	0x200007dc
 8004350:	0800a194 	.word	0x0800a194
 8004354:	2000085c 	.word	0x2000085c
 8004358:	0800a1a0 	.word	0x0800a1a0
 800435c:	200008dc 	.word	0x200008dc
 8004360:	0800a1c0 	.word	0x0800a1c0
 8004364:	2000095c 	.word	0x2000095c
 8004368:	0800a1dc 	.word	0x0800a1dc
 800436c:	200009dc 	.word	0x200009dc

08004370 <USER_SYSCLK_Configuration>:
  }
}

void USER_SYSCLK_Configuration( void )
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  /* System Clock (SYSCLK) configuration for 64 MHz */

  // Two wait states latency, if SYSCLK > 48 MHz

  FLASH->ACR	&=	~( 0x5UL << 0U );	
 8004374:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <USER_SYSCLK_Configuration+0x88>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <USER_SYSCLK_Configuration+0x88>)
 800437a:	f023 0305 	bic.w	r3, r3, #5
 800437e:	6013      	str	r3, [r2, #0]
  FLASH->ACR	|=	( 0x2UL << 0U );	
 8004380:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <USER_SYSCLK_Configuration+0x88>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <USER_SYSCLK_Configuration+0x88>)
 8004386:	f043 0302 	orr.w	r3, r3, #2
 800438a:	6013      	str	r3, [r2, #0]
  
  // PLL HSI clock /2 selected as PLL input clock
  
  RCC->CFGR	&=	~( 0x1UL << 16U )
 800438c:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <USER_SYSCLK_Configuration+0x8c>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4a1a      	ldr	r2, [pc, #104]	; (80043fc <USER_SYSCLK_Configuration+0x8c>)
 8004392:	f423 339d 	bic.w	r3, r3, #80384	; 0x13a00
 8004396:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800439a:	6053      	str	r3, [r2, #4]
		&	~( 0x3UL << 8U )        	// APB1 pre-scaler /2 (APB1 must not exceed 36 MHz)
		&	~( 0xFUL << 4U );		// AHB pre-scaler /1

  // PLL input clock x 16 (PLLMUL bits)

  RCC->CFGR	|=	( 0xFUL << 18U )	
 800439c:	4b17      	ldr	r3, [pc, #92]	; (80043fc <USER_SYSCLK_Configuration+0x8c>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4a16      	ldr	r2, [pc, #88]	; (80043fc <USER_SYSCLK_Configuration+0x8c>)
 80043a2:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 80043a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043aa:	6053      	str	r3, [r2, #4]
		|	( 0X4UL << 8U );		// APB1 pre-scaler /2
  RCC->CR	|=	( 0x1UL << 24U );		// PLL2 ON
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <USER_SYSCLK_Configuration+0x8c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a12      	ldr	r2, [pc, #72]	; (80043fc <USER_SYSCLK_Configuration+0x8c>)
 80043b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b6:	6013      	str	r3, [r2, #0]

  // Wait until PLL is locked

  while( !(RCC->CR & ~( 0x1UL << 25U )));
 80043b8:	bf00      	nop
 80043ba:	4b10      	ldr	r3, [pc, #64]	; (80043fc <USER_SYSCLK_Configuration+0x8c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f9      	beq.n	80043ba <USER_SYSCLK_Configuration+0x4a>

  // PLL used as system clock (SW bits)

  RCC->CFGR	&=	~( 0x1UL << 0U );
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <USER_SYSCLK_Configuration+0x8c>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4a0c      	ldr	r2, [pc, #48]	; (80043fc <USER_SYSCLK_Configuration+0x8c>)
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	6053      	str	r3, [r2, #4]
  RCC->CFGR	|=	( 0x2UL << 0U );
 80043d2:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <USER_SYSCLK_Configuration+0x8c>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4a09      	ldr	r2, [pc, #36]	; (80043fc <USER_SYSCLK_Configuration+0x8c>)
 80043d8:	f043 0302 	orr.w	r3, r3, #2
 80043dc:	6053      	str	r3, [r2, #4]

  // Wait until PLL is switched

  while( 0x8UL != ( RCC->CFGR & 0xCUL ));
 80043de:	bf00      	nop
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <USER_SYSCLK_Configuration+0x8c>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d1f9      	bne.n	80043e0 <USER_SYSCLK_Configuration+0x70>
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40022000 	.word	0x40022000
 80043fc:	40021000 	.word	0x40021000

08004400 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8004406:	2340      	movs	r3, #64	; 0x40
 8004408:	617b      	str	r3, [r7, #20]
  real_T inf = 0.0;
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b20      	cmp	r3, #32
 800441a:	d10a      	bne.n	8004432 <rtGetInf+0x32>
    inf = rtGetInfF();
 800441c:	f000 f836 	bl	800448c <rtGetInfF>
 8004420:	4603      	mov	r3, r0
 8004422:	4618      	mov	r0, r3
 8004424:	f7fc f810 	bl	8000448 <__aeabi_f2d>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8004430:	e022      	b.n	8004478 <rtGetInf+0x78>
  } else {
    uint16_T one = 1U;
 8004432:	2301      	movs	r3, #1
 8004434:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8004436:	f107 0310 	add.w	r3, r7, #16
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	bf14      	ite	ne
 8004440:	2301      	movne	r3, #1
 8004442:	2300      	moveq	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8004448:	7cfb      	ldrb	r3, [r7, #19]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <rtGetInf+0x54>
 800444e:	2b01      	cmp	r3, #1
 8004450:	d009      	beq.n	8004466 <rtGetInf+0x66>
 8004452:	e011      	b.n	8004478 <rtGetInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <rtGetInf+0x88>)
 8004456:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8004458:	2300      	movs	r3, #0
 800445a:	60bb      	str	r3, [r7, #8]
        inf = tmpVal.fltVal;
 800445c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004460:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8004464:	e008      	b.n	8004478 <rtGetInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <rtGetInf+0x88>)
 8004468:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
        inf = tmpVal.fltVal;
 800446e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004472:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8004476:	bf00      	nop
      }
    }
  }

  return inf;
 8004478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	7ff00000 	.word	0x7ff00000

0800448c <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8004492:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8004496:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8004498:	687b      	ldr	r3, [r7, #4]
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80044aa:	2340      	movs	r3, #64	; 0x40
 80044ac:	617b      	str	r3, [r7, #20]
  real_T minf = 0.0;
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d10a      	bne.n	80044d6 <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 80044c0:	f000 f836 	bl	8004530 <rtGetMinusInfF>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fb ffbe 	bl	8000448 <__aeabi_f2d>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80044d4:	e022      	b.n	800451c <rtGetMinusInf+0x78>
  } else {
    uint16_T one = 1U;
 80044d6:	2301      	movs	r3, #1
 80044d8:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80044da:	f107 0310 	add.w	r3, r7, #16
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <rtGetMinusInf+0x54>
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d009      	beq.n	800450a <rtGetMinusInf+0x66>
 80044f6:	e011      	b.n	800451c <rtGetMinusInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <rtGetMinusInf+0x88>)
 80044fa:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60bb      	str	r3, [r7, #8]
        minf = tmpVal.fltVal;
 8004500:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004504:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8004508:	e008      	b.n	800451c <rtGetMinusInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <rtGetMinusInf+0x88>)
 800450c:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
        minf = tmpVal.fltVal;
 8004512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004516:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 800451a:	bf00      	nop
      }
    }
  }

  return minf;
 800451c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	fff00000 	.word	0xfff00000

08004530 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8004536:	4b04      	ldr	r3, [pc, #16]	; (8004548 <rtGetMinusInfF+0x18>)
 8004538:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800453a:	687b      	ldr	r3, [r7, #4]
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	ff800000 	.word	0xff800000

0800454c <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8004552:	2340      	movs	r3, #64	; 0x40
 8004554:	617b      	str	r3, [r7, #20]
  real_T nan = 0.0;
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b20      	cmp	r3, #32
 8004566:	d10a      	bne.n	800457e <rtGetNaN+0x32>
    nan = rtGetNaNF();
 8004568:	f000 f838 	bl	80045dc <rtGetNaNF>
 800456c:	4603      	mov	r3, r0
 800456e:	4618      	mov	r0, r3
 8004570:	f7fb ff6a 	bl	8000448 <__aeabi_f2d>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800457c:	e024      	b.n	80045c8 <rtGetNaN+0x7c>
  } else {
    uint16_T one = 1U;
 800457e:	2301      	movs	r3, #1
 8004580:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8004582:	f107 0310 	add.w	r3, r7, #16
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <rtGetNaN+0x54>
 800459a:	2b01      	cmp	r3, #1
 800459c:	d009      	beq.n	80045b2 <rtGetNaN+0x66>
 800459e:	e013      	b.n	80045c8 <rtGetNaN+0x7c>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF80000U;
 80045a0:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <rtGetNaN+0x8c>)
 80045a2:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60bb      	str	r3, [r7, #8]
        nan = tmpVal.fltVal;
 80045a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 80045b0:	e00a      	b.n	80045c8 <rtGetNaN+0x7c>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;
 80045b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80045b6:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;
 80045b8:	f04f 33ff 	mov.w	r3, #4294967295
 80045bc:	607b      	str	r3, [r7, #4]
        nan = tmpVal.fltVal;
 80045be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 80045c6:	bf00      	nop
      }
    }
  }

  return nan;
 80045c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80045cc:	4610      	mov	r0, r2
 80045ce:	4619      	mov	r1, r3
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	fff80000 	.word	0xfff80000

080045dc <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]

  uint16_T one = 1U;
 80045e8:	2301      	movs	r3, #1
 80045ea:	80fb      	strh	r3, [r7, #6]
  enum {
    LittleEndian,
    BigEndian
  } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80045ec:	1dbb      	adds	r3, r7, #6
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	73fb      	strb	r3, [r7, #15]
  switch (machByteOrder) {
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <rtGetNaNF+0x2c>
 8004602:	2b01      	cmp	r3, #1
 8004604:	d003      	beq.n	800460e <rtGetNaNF+0x32>
 8004606:	e006      	b.n	8004616 <rtGetNaNF+0x3a>
   case LittleEndian:
    {
      nanF.wordL.wordLuint = 0xFFC00000U;
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <rtGetNaNF+0x48>)
 800460a:	60bb      	str	r3, [r7, #8]
      break;
 800460c:	e003      	b.n	8004616 <rtGetNaNF+0x3a>
    }

   case BigEndian:
    {
      nanF.wordL.wordLuint = 0x7FFFFFFFU;
 800460e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004612:	60bb      	str	r3, [r7, #8]
      break;
 8004614:	bf00      	nop
    }
  }

  return nanF.wordL.wordLreal;
 8004616:	68bb      	ldr	r3, [r7, #8]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	ffc00000 	.word	0xffc00000

08004628 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8004630:	f7ff ff8c 	bl	800454c <rtGetNaN>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4911      	ldr	r1, [pc, #68]	; (8004680 <rt_InitInfAndNaN+0x58>)
 800463a:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 800463e:	f7ff ffcd 	bl	80045dc <rtGetNaNF>
 8004642:	4603      	mov	r3, r0
 8004644:	4a0f      	ldr	r2, [pc, #60]	; (8004684 <rt_InitInfAndNaN+0x5c>)
 8004646:	6013      	str	r3, [r2, #0]
  rtInf = rtGetInf();
 8004648:	f7ff feda 	bl	8004400 <rtGetInf>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	490d      	ldr	r1, [pc, #52]	; (8004688 <rt_InitInfAndNaN+0x60>)
 8004652:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 8004656:	f7ff ff19 	bl	800448c <rtGetInfF>
 800465a:	4603      	mov	r3, r0
 800465c:	4a0b      	ldr	r2, [pc, #44]	; (800468c <rt_InitInfAndNaN+0x64>)
 800465e:	6013      	str	r3, [r2, #0]
  rtMinusInf = rtGetMinusInf();
 8004660:	f7ff ff20 	bl	80044a4 <rtGetMinusInf>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4909      	ldr	r1, [pc, #36]	; (8004690 <rt_InitInfAndNaN+0x68>)
 800466a:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 800466e:	f7ff ff5f 	bl	8004530 <rtGetMinusInfF>
 8004672:	4603      	mov	r3, r0
 8004674:	4a07      	ldr	r2, [pc, #28]	; (8004694 <rt_InitInfAndNaN+0x6c>)
 8004676:	6013      	str	r3, [r2, #0]
}
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20000a70 	.word	0x20000a70
 8004684:	20000a80 	.word	0x20000a80
 8004688:	20000a60 	.word	0x20000a60
 800468c:	20000a78 	.word	0x20000a78
 8004690:	20000a68 	.word	0x20000a68
 8004694:	20000a7c 	.word	0x20000a7c

08004698 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 80046a2:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <rtIsInf+0x40>)
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046ac:	f7fc f98c 	bl	80009c8 <__aeabi_dcmpeq>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <rtIsInf+0x32>
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <rtIsInf+0x44>)
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046c0:	f7fc f982 	bl	80009c8 <__aeabi_dcmpeq>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <rtIsInf+0x36>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <rtIsInf+0x38>
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000a60 	.word	0x20000a60
 80046dc:	20000a68 	.word	0x20000a68

080046e0 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	e9c7 0100 	strd	r0, r1, [r7]
  boolean_T result = (boolean_T) 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80046f0:	2340      	movs	r3, #64	; 0x40
 80046f2:	623b      	str	r3, [r7, #32]
  if (bitsPerReal == 32U) {
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d10b      	bne.n	8004712 <rtIsNaN+0x32>
    result = rtIsNaNF((real32_T)value);
 80046fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046fe:	f7fc f9f3 	bl	8000ae8 <__aeabi_d2f>
 8004702:	4603      	mov	r3, r0
 8004704:	4618      	mov	r0, r3
 8004706:	f000 f84d 	bl	80047a4 <rtIsNaNF>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004710:	e040      	b.n	8004794 <rtIsNaN+0xb4>
  } else {
    uint16_T one = 1U;
 8004712:	2301      	movs	r3, #1
 8004714:	83bb      	strh	r3, [r7, #28]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8004716:	f107 031c 	add.w	r3, r7, #28
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b01      	cmp	r3, #1
 800471e:	bf14      	ite	ne
 8004720:	2301      	movne	r3, #1
 8004722:	2300      	moveq	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	77fb      	strb	r3, [r7, #31]
    switch (machByteOrder) {
 8004728:	7ffb      	ldrb	r3, [r7, #31]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <rtIsNaN+0x54>
 800472e:	2b01      	cmp	r3, #1
 8004730:	d018      	beq.n	8004764 <rtIsNaN+0x84>
 8004732:	e02f      	b.n	8004794 <rtIsNaN+0xb4>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8004734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004738:	e9c7 2304 	strd	r2, r3, [r7, #16]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4b18      	ldr	r3, [pc, #96]	; (80047a0 <rtIsNaN+0xc0>)
 8004740:	4013      	ands	r3, r2
                             0x7FF00000 &&
 8004742:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <rtIsNaN+0xc0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d109      	bne.n	800475c <rtIsNaN+0x7c>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 800474e:	2b00      	cmp	r3, #0
 8004750:	d102      	bne.n	8004758 <rtIsNaN+0x78>
                              (tmpVal.bitVal.words.wordL != 0) ));
 8004752:	693b      	ldr	r3, [r7, #16]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <rtIsNaN+0x7c>
                             0x7FF00000 &&
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <rtIsNaN+0x7e>
 800475c:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800475e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 8004762:	e017      	b.n	8004794 <rtIsNaN+0xb4>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8004764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004768:	e9c7 2302 	strd	r2, r3, [r7, #8]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <rtIsNaN+0xc0>)
 8004770:	4013      	ands	r3, r2
                             0x7FF00000 &&
 8004772:	4a0b      	ldr	r2, [pc, #44]	; (80047a0 <rtIsNaN+0xc0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d109      	bne.n	800478c <rtIsNaN+0xac>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <rtIsNaN+0xa8>
                              (tmpVal.bitVal.words.wordL != 0) ));
 8004782:	68fb      	ldr	r3, [r7, #12]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <rtIsNaN+0xac>
                             0x7FF00000 &&
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <rtIsNaN+0xae>
 800478c:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800478e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 8004792:	bf00      	nop
      }
    }
  }

  return result;
 8004794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004798:	4618      	mov	r0, r3
 800479a:	3728      	adds	r7, #40	; 0x28
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	7ff00000 	.word	0x7ff00000

080047a4 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 80047b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80047ba:	d106      	bne.n	80047ca <rtIsNaNF+0x26>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <rtIsNaNF+0x26>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <rtIsNaNF+0x28>
 80047ca:	2300      	movs	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr

080047d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return 1;
 80047dc:	2301      	movs	r3, #1
}
 80047de:	4618      	mov	r0, r3
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr

080047e6 <_kill>:

int _kill(int pid, int sig)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80047f0:	f001 f8ea 	bl	80059c8 <__errno>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2216      	movs	r2, #22
 80047f8:	601a      	str	r2, [r3, #0]
  return -1;
 80047fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <_exit>:

void _exit (int status)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800480e:	f04f 31ff 	mov.w	r1, #4294967295
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff ffe7 	bl	80047e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004818:	e7fe      	b.n	8004818 <_exit+0x12>

0800481a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b086      	sub	sp, #24
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e00a      	b.n	8004842 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800482c:	f3af 8000 	nop.w
 8004830:	4601      	mov	r1, r0
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	60ba      	str	r2, [r7, #8]
 8004838:	b2ca      	uxtb	r2, r1
 800483a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	3301      	adds	r3, #1
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	429a      	cmp	r2, r3
 8004848:	dbf0      	blt.n	800482c <_read+0x12>
  }

  return len;
 800484a:	687b      	ldr	r3, [r7, #4]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800485c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr

0800486a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800487a:	605a      	str	r2, [r3, #4]
  return 0;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr

08004888 <_isatty>:

int _isatty(int file)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004890:	2301      	movs	r3, #1
}
 8004892:	4618      	mov	r0, r3
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <_sbrk+0x5c>)
 80048be:	4b15      	ldr	r3, [pc, #84]	; (8004914 <_sbrk+0x60>)
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048c8:	4b13      	ldr	r3, [pc, #76]	; (8004918 <_sbrk+0x64>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048d0:	4b11      	ldr	r3, [pc, #68]	; (8004918 <_sbrk+0x64>)
 80048d2:	4a12      	ldr	r2, [pc, #72]	; (800491c <_sbrk+0x68>)
 80048d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <_sbrk+0x64>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d207      	bcs.n	80048f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048e4:	f001 f870 	bl	80059c8 <__errno>
 80048e8:	4603      	mov	r3, r0
 80048ea:	220c      	movs	r2, #12
 80048ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048ee:	f04f 33ff 	mov.w	r3, #4294967295
 80048f2:	e009      	b.n	8004908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048f4:	4b08      	ldr	r3, [pc, #32]	; (8004918 <_sbrk+0x64>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048fa:	4b07      	ldr	r3, [pc, #28]	; (8004918 <_sbrk+0x64>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4413      	add	r3, r2
 8004902:	4a05      	ldr	r2, [pc, #20]	; (8004918 <_sbrk+0x64>)
 8004904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004906:	68fb      	ldr	r3, [r7, #12]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20005000 	.word	0x20005000
 8004914:	00000400 	.word	0x00000400
 8004918:	20000a84 	.word	0x20000a84
 800491c:	20000bd8 	.word	0x20000bd8

08004920 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004920:	480d      	ldr	r0, [pc, #52]	; (8004958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004922:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004924:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004928:	480c      	ldr	r0, [pc, #48]	; (800495c <LoopForever+0x6>)
  ldr r1, =_edata
 800492a:	490d      	ldr	r1, [pc, #52]	; (8004960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800492c:	4a0d      	ldr	r2, [pc, #52]	; (8004964 <LoopForever+0xe>)
  movs r3, #0
 800492e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004930:	e002      	b.n	8004938 <LoopCopyDataInit>

08004932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004936:	3304      	adds	r3, #4

08004938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800493a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800493c:	d3f9      	bcc.n	8004932 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800493e:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004940:	4c0a      	ldr	r4, [pc, #40]	; (800496c <LoopForever+0x16>)
  movs r3, #0
 8004942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004944:	e001      	b.n	800494a <LoopFillZerobss>

08004946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004948:	3204      	adds	r2, #4

0800494a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800494a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800494c:	d3fb      	bcc.n	8004946 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800494e:	f001 f841 	bl	80059d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004952:	f7ff fa49 	bl	8003de8 <main>

08004956 <LoopForever>:

LoopForever:
  b LoopForever
 8004956:	e7fe      	b.n	8004956 <LoopForever>
  ldr   r0, =_estack
 8004958:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800495c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004960:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8004964:	0800bd58 	.word	0x0800bd58
  ldr r2, =_sbss
 8004968:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800496c:	20000bd4 	.word	0x20000bd4

08004970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004970:	e7fe      	b.n	8004970 <ADC1_2_IRQHandler>

08004972 <__cvt>:
 8004972:	2b00      	cmp	r3, #0
 8004974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	461f      	mov	r7, r3
 800497a:	bfbb      	ittet	lt
 800497c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004980:	461f      	movlt	r7, r3
 8004982:	2300      	movge	r3, #0
 8004984:	232d      	movlt	r3, #45	; 0x2d
 8004986:	b088      	sub	sp, #32
 8004988:	4614      	mov	r4, r2
 800498a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800498c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800498e:	7013      	strb	r3, [r2, #0]
 8004990:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004992:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004996:	f023 0820 	bic.w	r8, r3, #32
 800499a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800499e:	d005      	beq.n	80049ac <__cvt+0x3a>
 80049a0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049a4:	d100      	bne.n	80049a8 <__cvt+0x36>
 80049a6:	3501      	adds	r5, #1
 80049a8:	2302      	movs	r3, #2
 80049aa:	e000      	b.n	80049ae <__cvt+0x3c>
 80049ac:	2303      	movs	r3, #3
 80049ae:	aa07      	add	r2, sp, #28
 80049b0:	9204      	str	r2, [sp, #16]
 80049b2:	aa06      	add	r2, sp, #24
 80049b4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80049b8:	e9cd 3500 	strd	r3, r5, [sp]
 80049bc:	4622      	mov	r2, r4
 80049be:	463b      	mov	r3, r7
 80049c0:	f001 f8da 	bl	8005b78 <_dtoa_r>
 80049c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049c8:	4606      	mov	r6, r0
 80049ca:	d102      	bne.n	80049d2 <__cvt+0x60>
 80049cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049ce:	07db      	lsls	r3, r3, #31
 80049d0:	d522      	bpl.n	8004a18 <__cvt+0xa6>
 80049d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049d6:	eb06 0905 	add.w	r9, r6, r5
 80049da:	d110      	bne.n	80049fe <__cvt+0x8c>
 80049dc:	7833      	ldrb	r3, [r6, #0]
 80049de:	2b30      	cmp	r3, #48	; 0x30
 80049e0:	d10a      	bne.n	80049f8 <__cvt+0x86>
 80049e2:	2200      	movs	r2, #0
 80049e4:	2300      	movs	r3, #0
 80049e6:	4620      	mov	r0, r4
 80049e8:	4639      	mov	r1, r7
 80049ea:	f7fb ffed 	bl	80009c8 <__aeabi_dcmpeq>
 80049ee:	b918      	cbnz	r0, 80049f8 <__cvt+0x86>
 80049f0:	f1c5 0501 	rsb	r5, r5, #1
 80049f4:	f8ca 5000 	str.w	r5, [sl]
 80049f8:	f8da 3000 	ldr.w	r3, [sl]
 80049fc:	4499      	add	r9, r3
 80049fe:	2200      	movs	r2, #0
 8004a00:	2300      	movs	r3, #0
 8004a02:	4620      	mov	r0, r4
 8004a04:	4639      	mov	r1, r7
 8004a06:	f7fb ffdf 	bl	80009c8 <__aeabi_dcmpeq>
 8004a0a:	b108      	cbz	r0, 8004a10 <__cvt+0x9e>
 8004a0c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a10:	2230      	movs	r2, #48	; 0x30
 8004a12:	9b07      	ldr	r3, [sp, #28]
 8004a14:	454b      	cmp	r3, r9
 8004a16:	d307      	bcc.n	8004a28 <__cvt+0xb6>
 8004a18:	4630      	mov	r0, r6
 8004a1a:	9b07      	ldr	r3, [sp, #28]
 8004a1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a1e:	1b9b      	subs	r3, r3, r6
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	b008      	add	sp, #32
 8004a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a28:	1c59      	adds	r1, r3, #1
 8004a2a:	9107      	str	r1, [sp, #28]
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	e7f0      	b.n	8004a12 <__cvt+0xa0>

08004a30 <__exponent>:
 8004a30:	4603      	mov	r3, r0
 8004a32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a34:	2900      	cmp	r1, #0
 8004a36:	f803 2b02 	strb.w	r2, [r3], #2
 8004a3a:	bfb6      	itet	lt
 8004a3c:	222d      	movlt	r2, #45	; 0x2d
 8004a3e:	222b      	movge	r2, #43	; 0x2b
 8004a40:	4249      	neglt	r1, r1
 8004a42:	2909      	cmp	r1, #9
 8004a44:	7042      	strb	r2, [r0, #1]
 8004a46:	dd2a      	ble.n	8004a9e <__exponent+0x6e>
 8004a48:	f10d 0207 	add.w	r2, sp, #7
 8004a4c:	4617      	mov	r7, r2
 8004a4e:	260a      	movs	r6, #10
 8004a50:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a54:	4694      	mov	ip, r2
 8004a56:	fb06 1415 	mls	r4, r6, r5, r1
 8004a5a:	3430      	adds	r4, #48	; 0x30
 8004a5c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004a60:	460c      	mov	r4, r1
 8004a62:	2c63      	cmp	r4, #99	; 0x63
 8004a64:	4629      	mov	r1, r5
 8004a66:	f102 32ff 	add.w	r2, r2, #4294967295
 8004a6a:	dcf1      	bgt.n	8004a50 <__exponent+0x20>
 8004a6c:	3130      	adds	r1, #48	; 0x30
 8004a6e:	f1ac 0402 	sub.w	r4, ip, #2
 8004a72:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a76:	4622      	mov	r2, r4
 8004a78:	1c41      	adds	r1, r0, #1
 8004a7a:	42ba      	cmp	r2, r7
 8004a7c:	d30a      	bcc.n	8004a94 <__exponent+0x64>
 8004a7e:	f10d 0209 	add.w	r2, sp, #9
 8004a82:	eba2 020c 	sub.w	r2, r2, ip
 8004a86:	42bc      	cmp	r4, r7
 8004a88:	bf88      	it	hi
 8004a8a:	2200      	movhi	r2, #0
 8004a8c:	4413      	add	r3, r2
 8004a8e:	1a18      	subs	r0, r3, r0
 8004a90:	b003      	add	sp, #12
 8004a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a94:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a98:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a9c:	e7ed      	b.n	8004a7a <__exponent+0x4a>
 8004a9e:	2330      	movs	r3, #48	; 0x30
 8004aa0:	3130      	adds	r1, #48	; 0x30
 8004aa2:	7083      	strb	r3, [r0, #2]
 8004aa4:	70c1      	strb	r1, [r0, #3]
 8004aa6:	1d03      	adds	r3, r0, #4
 8004aa8:	e7f1      	b.n	8004a8e <__exponent+0x5e>
	...

08004aac <_printf_float>:
 8004aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	b091      	sub	sp, #68	; 0x44
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004ab8:	4616      	mov	r6, r2
 8004aba:	461f      	mov	r7, r3
 8004abc:	4605      	mov	r5, r0
 8004abe:	f000 ff39 	bl	8005934 <_localeconv_r>
 8004ac2:	6803      	ldr	r3, [r0, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac8:	f7fb fb52 	bl	8000170 <strlen>
 8004acc:	2300      	movs	r3, #0
 8004ace:	930e      	str	r3, [sp, #56]	; 0x38
 8004ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad4:	900a      	str	r0, [sp, #40]	; 0x28
 8004ad6:	3307      	adds	r3, #7
 8004ad8:	f023 0307 	bic.w	r3, r3, #7
 8004adc:	f103 0208 	add.w	r2, r3, #8
 8004ae0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ae4:	f8d4 b000 	ldr.w	fp, [r4]
 8004ae8:	f8c8 2000 	str.w	r2, [r8]
 8004aec:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004af0:	4652      	mov	r2, sl
 8004af2:	4643      	mov	r3, r8
 8004af4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004af8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004afc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004afe:	f04f 32ff 	mov.w	r2, #4294967295
 8004b02:	4650      	mov	r0, sl
 8004b04:	4b9c      	ldr	r3, [pc, #624]	; (8004d78 <_printf_float+0x2cc>)
 8004b06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b08:	f7fb ff90 	bl	8000a2c <__aeabi_dcmpun>
 8004b0c:	bb70      	cbnz	r0, 8004b6c <_printf_float+0xc0>
 8004b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b12:	4650      	mov	r0, sl
 8004b14:	4b98      	ldr	r3, [pc, #608]	; (8004d78 <_printf_float+0x2cc>)
 8004b16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b18:	f7fb ff6a 	bl	80009f0 <__aeabi_dcmple>
 8004b1c:	bb30      	cbnz	r0, 8004b6c <_printf_float+0xc0>
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2300      	movs	r3, #0
 8004b22:	4650      	mov	r0, sl
 8004b24:	4641      	mov	r1, r8
 8004b26:	f7fb ff59 	bl	80009dc <__aeabi_dcmplt>
 8004b2a:	b110      	cbz	r0, 8004b32 <_printf_float+0x86>
 8004b2c:	232d      	movs	r3, #45	; 0x2d
 8004b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b32:	4a92      	ldr	r2, [pc, #584]	; (8004d7c <_printf_float+0x2d0>)
 8004b34:	4b92      	ldr	r3, [pc, #584]	; (8004d80 <_printf_float+0x2d4>)
 8004b36:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004b3a:	bf94      	ite	ls
 8004b3c:	4690      	movls	r8, r2
 8004b3e:	4698      	movhi	r8, r3
 8004b40:	2303      	movs	r3, #3
 8004b42:	f04f 0a00 	mov.w	sl, #0
 8004b46:	6123      	str	r3, [r4, #16]
 8004b48:	f02b 0304 	bic.w	r3, fp, #4
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	4633      	mov	r3, r6
 8004b50:	4621      	mov	r1, r4
 8004b52:	4628      	mov	r0, r5
 8004b54:	9700      	str	r7, [sp, #0]
 8004b56:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b58:	f000 f9d6 	bl	8004f08 <_printf_common>
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	f040 8090 	bne.w	8004c82 <_printf_float+0x1d6>
 8004b62:	f04f 30ff 	mov.w	r0, #4294967295
 8004b66:	b011      	add	sp, #68	; 0x44
 8004b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6c:	4652      	mov	r2, sl
 8004b6e:	4643      	mov	r3, r8
 8004b70:	4650      	mov	r0, sl
 8004b72:	4641      	mov	r1, r8
 8004b74:	f7fb ff5a 	bl	8000a2c <__aeabi_dcmpun>
 8004b78:	b148      	cbz	r0, 8004b8e <_printf_float+0xe2>
 8004b7a:	f1b8 0f00 	cmp.w	r8, #0
 8004b7e:	bfb8      	it	lt
 8004b80:	232d      	movlt	r3, #45	; 0x2d
 8004b82:	4a80      	ldr	r2, [pc, #512]	; (8004d84 <_printf_float+0x2d8>)
 8004b84:	bfb8      	it	lt
 8004b86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b8a:	4b7f      	ldr	r3, [pc, #508]	; (8004d88 <_printf_float+0x2dc>)
 8004b8c:	e7d3      	b.n	8004b36 <_printf_float+0x8a>
 8004b8e:	6863      	ldr	r3, [r4, #4]
 8004b90:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	d142      	bne.n	8004c1e <_printf_float+0x172>
 8004b98:	2306      	movs	r3, #6
 8004b9a:	6063      	str	r3, [r4, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	9206      	str	r2, [sp, #24]
 8004ba0:	aa0e      	add	r2, sp, #56	; 0x38
 8004ba2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ba6:	aa0d      	add	r2, sp, #52	; 0x34
 8004ba8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004bac:	9203      	str	r2, [sp, #12]
 8004bae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004bb2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004bb6:	6023      	str	r3, [r4, #0]
 8004bb8:	6863      	ldr	r3, [r4, #4]
 8004bba:	4652      	mov	r2, sl
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	4643      	mov	r3, r8
 8004bc2:	910b      	str	r1, [sp, #44]	; 0x2c
 8004bc4:	f7ff fed5 	bl	8004972 <__cvt>
 8004bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bca:	4680      	mov	r8, r0
 8004bcc:	2947      	cmp	r1, #71	; 0x47
 8004bce:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004bd0:	d108      	bne.n	8004be4 <_printf_float+0x138>
 8004bd2:	1cc8      	adds	r0, r1, #3
 8004bd4:	db02      	blt.n	8004bdc <_printf_float+0x130>
 8004bd6:	6863      	ldr	r3, [r4, #4]
 8004bd8:	4299      	cmp	r1, r3
 8004bda:	dd40      	ble.n	8004c5e <_printf_float+0x1b2>
 8004bdc:	f1a9 0902 	sub.w	r9, r9, #2
 8004be0:	fa5f f989 	uxtb.w	r9, r9
 8004be4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004be8:	d81f      	bhi.n	8004c2a <_printf_float+0x17e>
 8004bea:	464a      	mov	r2, r9
 8004bec:	3901      	subs	r1, #1
 8004bee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bf2:	910d      	str	r1, [sp, #52]	; 0x34
 8004bf4:	f7ff ff1c 	bl	8004a30 <__exponent>
 8004bf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bfa:	4682      	mov	sl, r0
 8004bfc:	1813      	adds	r3, r2, r0
 8004bfe:	2a01      	cmp	r2, #1
 8004c00:	6123      	str	r3, [r4, #16]
 8004c02:	dc02      	bgt.n	8004c0a <_printf_float+0x15e>
 8004c04:	6822      	ldr	r2, [r4, #0]
 8004c06:	07d2      	lsls	r2, r2, #31
 8004c08:	d501      	bpl.n	8004c0e <_printf_float+0x162>
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	6123      	str	r3, [r4, #16]
 8004c0e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d09b      	beq.n	8004b4e <_printf_float+0xa2>
 8004c16:	232d      	movs	r3, #45	; 0x2d
 8004c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c1c:	e797      	b.n	8004b4e <_printf_float+0xa2>
 8004c1e:	2947      	cmp	r1, #71	; 0x47
 8004c20:	d1bc      	bne.n	8004b9c <_printf_float+0xf0>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1ba      	bne.n	8004b9c <_printf_float+0xf0>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e7b7      	b.n	8004b9a <_printf_float+0xee>
 8004c2a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004c2e:	d118      	bne.n	8004c62 <_printf_float+0x1b6>
 8004c30:	2900      	cmp	r1, #0
 8004c32:	6863      	ldr	r3, [r4, #4]
 8004c34:	dd0b      	ble.n	8004c4e <_printf_float+0x1a2>
 8004c36:	6121      	str	r1, [r4, #16]
 8004c38:	b913      	cbnz	r3, 8004c40 <_printf_float+0x194>
 8004c3a:	6822      	ldr	r2, [r4, #0]
 8004c3c:	07d0      	lsls	r0, r2, #31
 8004c3e:	d502      	bpl.n	8004c46 <_printf_float+0x19a>
 8004c40:	3301      	adds	r3, #1
 8004c42:	440b      	add	r3, r1
 8004c44:	6123      	str	r3, [r4, #16]
 8004c46:	f04f 0a00 	mov.w	sl, #0
 8004c4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c4c:	e7df      	b.n	8004c0e <_printf_float+0x162>
 8004c4e:	b913      	cbnz	r3, 8004c56 <_printf_float+0x1aa>
 8004c50:	6822      	ldr	r2, [r4, #0]
 8004c52:	07d2      	lsls	r2, r2, #31
 8004c54:	d501      	bpl.n	8004c5a <_printf_float+0x1ae>
 8004c56:	3302      	adds	r3, #2
 8004c58:	e7f4      	b.n	8004c44 <_printf_float+0x198>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e7f2      	b.n	8004c44 <_printf_float+0x198>
 8004c5e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c64:	4299      	cmp	r1, r3
 8004c66:	db05      	blt.n	8004c74 <_printf_float+0x1c8>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	6121      	str	r1, [r4, #16]
 8004c6c:	07d8      	lsls	r0, r3, #31
 8004c6e:	d5ea      	bpl.n	8004c46 <_printf_float+0x19a>
 8004c70:	1c4b      	adds	r3, r1, #1
 8004c72:	e7e7      	b.n	8004c44 <_printf_float+0x198>
 8004c74:	2900      	cmp	r1, #0
 8004c76:	bfcc      	ite	gt
 8004c78:	2201      	movgt	r2, #1
 8004c7a:	f1c1 0202 	rsble	r2, r1, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	e7e0      	b.n	8004c44 <_printf_float+0x198>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	055a      	lsls	r2, r3, #21
 8004c86:	d407      	bmi.n	8004c98 <_printf_float+0x1ec>
 8004c88:	6923      	ldr	r3, [r4, #16]
 8004c8a:	4642      	mov	r2, r8
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4628      	mov	r0, r5
 8004c90:	47b8      	blx	r7
 8004c92:	3001      	adds	r0, #1
 8004c94:	d12b      	bne.n	8004cee <_printf_float+0x242>
 8004c96:	e764      	b.n	8004b62 <_printf_float+0xb6>
 8004c98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c9c:	f240 80dd 	bls.w	8004e5a <_printf_float+0x3ae>
 8004ca0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f7fb fe8e 	bl	80009c8 <__aeabi_dcmpeq>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d033      	beq.n	8004d18 <_printf_float+0x26c>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	4a35      	ldr	r2, [pc, #212]	; (8004d8c <_printf_float+0x2e0>)
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f af51 	beq.w	8004b62 <_printf_float+0xb6>
 8004cc0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	db02      	blt.n	8004cce <_printf_float+0x222>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	07d8      	lsls	r0, r3, #31
 8004ccc:	d50f      	bpl.n	8004cee <_printf_float+0x242>
 8004cce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	f43f af42 	beq.w	8004b62 <_printf_float+0xb6>
 8004cde:	f04f 0800 	mov.w	r8, #0
 8004ce2:	f104 091a 	add.w	r9, r4, #26
 8004ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	4543      	cmp	r3, r8
 8004cec:	dc09      	bgt.n	8004d02 <_printf_float+0x256>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	079b      	lsls	r3, r3, #30
 8004cf2:	f100 8104 	bmi.w	8004efe <_printf_float+0x452>
 8004cf6:	68e0      	ldr	r0, [r4, #12]
 8004cf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cfa:	4298      	cmp	r0, r3
 8004cfc:	bfb8      	it	lt
 8004cfe:	4618      	movlt	r0, r3
 8004d00:	e731      	b.n	8004b66 <_printf_float+0xba>
 8004d02:	2301      	movs	r3, #1
 8004d04:	464a      	mov	r2, r9
 8004d06:	4631      	mov	r1, r6
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b8      	blx	r7
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	f43f af28 	beq.w	8004b62 <_printf_float+0xb6>
 8004d12:	f108 0801 	add.w	r8, r8, #1
 8004d16:	e7e6      	b.n	8004ce6 <_printf_float+0x23a>
 8004d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	dc38      	bgt.n	8004d90 <_printf_float+0x2e4>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4631      	mov	r1, r6
 8004d22:	4628      	mov	r0, r5
 8004d24:	4a19      	ldr	r2, [pc, #100]	; (8004d8c <_printf_float+0x2e0>)
 8004d26:	47b8      	blx	r7
 8004d28:	3001      	adds	r0, #1
 8004d2a:	f43f af1a 	beq.w	8004b62 <_printf_float+0xb6>
 8004d2e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d32:	4313      	orrs	r3, r2
 8004d34:	d102      	bne.n	8004d3c <_printf_float+0x290>
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	07d9      	lsls	r1, r3, #31
 8004d3a:	d5d8      	bpl.n	8004cee <_printf_float+0x242>
 8004d3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d40:	4631      	mov	r1, r6
 8004d42:	4628      	mov	r0, r5
 8004d44:	47b8      	blx	r7
 8004d46:	3001      	adds	r0, #1
 8004d48:	f43f af0b 	beq.w	8004b62 <_printf_float+0xb6>
 8004d4c:	f04f 0900 	mov.w	r9, #0
 8004d50:	f104 0a1a 	add.w	sl, r4, #26
 8004d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d56:	425b      	negs	r3, r3
 8004d58:	454b      	cmp	r3, r9
 8004d5a:	dc01      	bgt.n	8004d60 <_printf_float+0x2b4>
 8004d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d5e:	e794      	b.n	8004c8a <_printf_float+0x1de>
 8004d60:	2301      	movs	r3, #1
 8004d62:	4652      	mov	r2, sl
 8004d64:	4631      	mov	r1, r6
 8004d66:	4628      	mov	r0, r5
 8004d68:	47b8      	blx	r7
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	f43f aef9 	beq.w	8004b62 <_printf_float+0xb6>
 8004d70:	f109 0901 	add.w	r9, r9, #1
 8004d74:	e7ee      	b.n	8004d54 <_printf_float+0x2a8>
 8004d76:	bf00      	nop
 8004d78:	7fefffff 	.word	0x7fefffff
 8004d7c:	0800b8f4 	.word	0x0800b8f4
 8004d80:	0800b8f8 	.word	0x0800b8f8
 8004d84:	0800b8fc 	.word	0x0800b8fc
 8004d88:	0800b900 	.word	0x0800b900
 8004d8c:	0800b904 	.word	0x0800b904
 8004d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d94:	429a      	cmp	r2, r3
 8004d96:	bfa8      	it	ge
 8004d98:	461a      	movge	r2, r3
 8004d9a:	2a00      	cmp	r2, #0
 8004d9c:	4691      	mov	r9, r2
 8004d9e:	dc37      	bgt.n	8004e10 <_printf_float+0x364>
 8004da0:	f04f 0b00 	mov.w	fp, #0
 8004da4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004da8:	f104 021a 	add.w	r2, r4, #26
 8004dac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004db0:	ebaa 0309 	sub.w	r3, sl, r9
 8004db4:	455b      	cmp	r3, fp
 8004db6:	dc33      	bgt.n	8004e20 <_printf_float+0x374>
 8004db8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	db3b      	blt.n	8004e38 <_printf_float+0x38c>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	07da      	lsls	r2, r3, #31
 8004dc4:	d438      	bmi.n	8004e38 <_printf_float+0x38c>
 8004dc6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004dca:	eba2 0903 	sub.w	r9, r2, r3
 8004dce:	eba2 020a 	sub.w	r2, r2, sl
 8004dd2:	4591      	cmp	r9, r2
 8004dd4:	bfa8      	it	ge
 8004dd6:	4691      	movge	r9, r2
 8004dd8:	f1b9 0f00 	cmp.w	r9, #0
 8004ddc:	dc34      	bgt.n	8004e48 <_printf_float+0x39c>
 8004dde:	f04f 0800 	mov.w	r8, #0
 8004de2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004de6:	f104 0a1a 	add.w	sl, r4, #26
 8004dea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	eba3 0309 	sub.w	r3, r3, r9
 8004df4:	4543      	cmp	r3, r8
 8004df6:	f77f af7a 	ble.w	8004cee <_printf_float+0x242>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4652      	mov	r2, sl
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f aeac 	beq.w	8004b62 <_printf_float+0xb6>
 8004e0a:	f108 0801 	add.w	r8, r8, #1
 8004e0e:	e7ec      	b.n	8004dea <_printf_float+0x33e>
 8004e10:	4613      	mov	r3, r2
 8004e12:	4631      	mov	r1, r6
 8004e14:	4642      	mov	r2, r8
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d1c0      	bne.n	8004da0 <_printf_float+0x2f4>
 8004e1e:	e6a0      	b.n	8004b62 <_printf_float+0xb6>
 8004e20:	2301      	movs	r3, #1
 8004e22:	4631      	mov	r1, r6
 8004e24:	4628      	mov	r0, r5
 8004e26:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f43f ae99 	beq.w	8004b62 <_printf_float+0xb6>
 8004e30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e32:	f10b 0b01 	add.w	fp, fp, #1
 8004e36:	e7b9      	b.n	8004dac <_printf_float+0x300>
 8004e38:	4631      	mov	r1, r6
 8004e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e3e:	4628      	mov	r0, r5
 8004e40:	47b8      	blx	r7
 8004e42:	3001      	adds	r0, #1
 8004e44:	d1bf      	bne.n	8004dc6 <_printf_float+0x31a>
 8004e46:	e68c      	b.n	8004b62 <_printf_float+0xb6>
 8004e48:	464b      	mov	r3, r9
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	eb08 020a 	add.w	r2, r8, sl
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	d1c2      	bne.n	8004dde <_printf_float+0x332>
 8004e58:	e683      	b.n	8004b62 <_printf_float+0xb6>
 8004e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e5c:	2a01      	cmp	r2, #1
 8004e5e:	dc01      	bgt.n	8004e64 <_printf_float+0x3b8>
 8004e60:	07db      	lsls	r3, r3, #31
 8004e62:	d539      	bpl.n	8004ed8 <_printf_float+0x42c>
 8004e64:	2301      	movs	r3, #1
 8004e66:	4642      	mov	r2, r8
 8004e68:	4631      	mov	r1, r6
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	47b8      	blx	r7
 8004e6e:	3001      	adds	r0, #1
 8004e70:	f43f ae77 	beq.w	8004b62 <_printf_float+0xb6>
 8004e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e78:	4631      	mov	r1, r6
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	47b8      	blx	r7
 8004e7e:	3001      	adds	r0, #1
 8004e80:	f43f ae6f 	beq.w	8004b62 <_printf_float+0xb6>
 8004e84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004e90:	f7fb fd9a 	bl	80009c8 <__aeabi_dcmpeq>
 8004e94:	b9d8      	cbnz	r0, 8004ece <_printf_float+0x422>
 8004e96:	f109 33ff 	add.w	r3, r9, #4294967295
 8004e9a:	f108 0201 	add.w	r2, r8, #1
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	47b8      	blx	r7
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d10e      	bne.n	8004ec6 <_printf_float+0x41a>
 8004ea8:	e65b      	b.n	8004b62 <_printf_float+0xb6>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	464a      	mov	r2, r9
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	47b8      	blx	r7
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	f43f ae54 	beq.w	8004b62 <_printf_float+0xb6>
 8004eba:	f108 0801 	add.w	r8, r8, #1
 8004ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	4543      	cmp	r3, r8
 8004ec4:	dcf1      	bgt.n	8004eaa <_printf_float+0x3fe>
 8004ec6:	4653      	mov	r3, sl
 8004ec8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ecc:	e6de      	b.n	8004c8c <_printf_float+0x1e0>
 8004ece:	f04f 0800 	mov.w	r8, #0
 8004ed2:	f104 091a 	add.w	r9, r4, #26
 8004ed6:	e7f2      	b.n	8004ebe <_printf_float+0x412>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4642      	mov	r2, r8
 8004edc:	e7df      	b.n	8004e9e <_printf_float+0x3f2>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	464a      	mov	r2, r9
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	47b8      	blx	r7
 8004ee8:	3001      	adds	r0, #1
 8004eea:	f43f ae3a 	beq.w	8004b62 <_printf_float+0xb6>
 8004eee:	f108 0801 	add.w	r8, r8, #1
 8004ef2:	68e3      	ldr	r3, [r4, #12]
 8004ef4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ef6:	1a5b      	subs	r3, r3, r1
 8004ef8:	4543      	cmp	r3, r8
 8004efa:	dcf0      	bgt.n	8004ede <_printf_float+0x432>
 8004efc:	e6fb      	b.n	8004cf6 <_printf_float+0x24a>
 8004efe:	f04f 0800 	mov.w	r8, #0
 8004f02:	f104 0919 	add.w	r9, r4, #25
 8004f06:	e7f4      	b.n	8004ef2 <_printf_float+0x446>

08004f08 <_printf_common>:
 8004f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f0c:	4616      	mov	r6, r2
 8004f0e:	4699      	mov	r9, r3
 8004f10:	688a      	ldr	r2, [r1, #8]
 8004f12:	690b      	ldr	r3, [r1, #16]
 8004f14:	4607      	mov	r7, r0
 8004f16:	4293      	cmp	r3, r2
 8004f18:	bfb8      	it	lt
 8004f1a:	4613      	movlt	r3, r2
 8004f1c:	6033      	str	r3, [r6, #0]
 8004f1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f22:	460c      	mov	r4, r1
 8004f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f28:	b10a      	cbz	r2, 8004f2e <_printf_common+0x26>
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	6033      	str	r3, [r6, #0]
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	0699      	lsls	r1, r3, #26
 8004f32:	bf42      	ittt	mi
 8004f34:	6833      	ldrmi	r3, [r6, #0]
 8004f36:	3302      	addmi	r3, #2
 8004f38:	6033      	strmi	r3, [r6, #0]
 8004f3a:	6825      	ldr	r5, [r4, #0]
 8004f3c:	f015 0506 	ands.w	r5, r5, #6
 8004f40:	d106      	bne.n	8004f50 <_printf_common+0x48>
 8004f42:	f104 0a19 	add.w	sl, r4, #25
 8004f46:	68e3      	ldr	r3, [r4, #12]
 8004f48:	6832      	ldr	r2, [r6, #0]
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	42ab      	cmp	r3, r5
 8004f4e:	dc2b      	bgt.n	8004fa8 <_printf_common+0xa0>
 8004f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f54:	1e13      	subs	r3, r2, #0
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	bf18      	it	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	0692      	lsls	r2, r2, #26
 8004f5e:	d430      	bmi.n	8004fc2 <_printf_common+0xba>
 8004f60:	4649      	mov	r1, r9
 8004f62:	4638      	mov	r0, r7
 8004f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f68:	47c0      	blx	r8
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d023      	beq.n	8004fb6 <_printf_common+0xae>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	6922      	ldr	r2, [r4, #16]
 8004f72:	f003 0306 	and.w	r3, r3, #6
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	bf14      	ite	ne
 8004f7a:	2500      	movne	r5, #0
 8004f7c:	6833      	ldreq	r3, [r6, #0]
 8004f7e:	f04f 0600 	mov.w	r6, #0
 8004f82:	bf08      	it	eq
 8004f84:	68e5      	ldreq	r5, [r4, #12]
 8004f86:	f104 041a 	add.w	r4, r4, #26
 8004f8a:	bf08      	it	eq
 8004f8c:	1aed      	subeq	r5, r5, r3
 8004f8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f92:	bf08      	it	eq
 8004f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	bfc4      	itt	gt
 8004f9c:	1a9b      	subgt	r3, r3, r2
 8004f9e:	18ed      	addgt	r5, r5, r3
 8004fa0:	42b5      	cmp	r5, r6
 8004fa2:	d11a      	bne.n	8004fda <_printf_common+0xd2>
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	e008      	b.n	8004fba <_printf_common+0xb2>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4652      	mov	r2, sl
 8004fac:	4649      	mov	r1, r9
 8004fae:	4638      	mov	r0, r7
 8004fb0:	47c0      	blx	r8
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d103      	bne.n	8004fbe <_printf_common+0xb6>
 8004fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbe:	3501      	adds	r5, #1
 8004fc0:	e7c1      	b.n	8004f46 <_printf_common+0x3e>
 8004fc2:	2030      	movs	r0, #48	; 0x30
 8004fc4:	18e1      	adds	r1, r4, r3
 8004fc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fd0:	4422      	add	r2, r4
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fd8:	e7c2      	b.n	8004f60 <_printf_common+0x58>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4622      	mov	r2, r4
 8004fde:	4649      	mov	r1, r9
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	47c0      	blx	r8
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d0e6      	beq.n	8004fb6 <_printf_common+0xae>
 8004fe8:	3601      	adds	r6, #1
 8004fea:	e7d9      	b.n	8004fa0 <_printf_common+0x98>

08004fec <_printf_i>:
 8004fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff0:	7e0f      	ldrb	r7, [r1, #24]
 8004ff2:	4691      	mov	r9, r2
 8004ff4:	2f78      	cmp	r7, #120	; 0x78
 8004ff6:	4680      	mov	r8, r0
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	469a      	mov	sl, r3
 8004ffc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ffe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005002:	d807      	bhi.n	8005014 <_printf_i+0x28>
 8005004:	2f62      	cmp	r7, #98	; 0x62
 8005006:	d80a      	bhi.n	800501e <_printf_i+0x32>
 8005008:	2f00      	cmp	r7, #0
 800500a:	f000 80d5 	beq.w	80051b8 <_printf_i+0x1cc>
 800500e:	2f58      	cmp	r7, #88	; 0x58
 8005010:	f000 80c1 	beq.w	8005196 <_printf_i+0x1aa>
 8005014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800501c:	e03a      	b.n	8005094 <_printf_i+0xa8>
 800501e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005022:	2b15      	cmp	r3, #21
 8005024:	d8f6      	bhi.n	8005014 <_printf_i+0x28>
 8005026:	a101      	add	r1, pc, #4	; (adr r1, 800502c <_printf_i+0x40>)
 8005028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800502c:	08005085 	.word	0x08005085
 8005030:	08005099 	.word	0x08005099
 8005034:	08005015 	.word	0x08005015
 8005038:	08005015 	.word	0x08005015
 800503c:	08005015 	.word	0x08005015
 8005040:	08005015 	.word	0x08005015
 8005044:	08005099 	.word	0x08005099
 8005048:	08005015 	.word	0x08005015
 800504c:	08005015 	.word	0x08005015
 8005050:	08005015 	.word	0x08005015
 8005054:	08005015 	.word	0x08005015
 8005058:	0800519f 	.word	0x0800519f
 800505c:	080050c5 	.word	0x080050c5
 8005060:	08005159 	.word	0x08005159
 8005064:	08005015 	.word	0x08005015
 8005068:	08005015 	.word	0x08005015
 800506c:	080051c1 	.word	0x080051c1
 8005070:	08005015 	.word	0x08005015
 8005074:	080050c5 	.word	0x080050c5
 8005078:	08005015 	.word	0x08005015
 800507c:	08005015 	.word	0x08005015
 8005080:	08005161 	.word	0x08005161
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	1d1a      	adds	r2, r3, #4
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	602a      	str	r2, [r5, #0]
 800508c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005094:	2301      	movs	r3, #1
 8005096:	e0a0      	b.n	80051da <_printf_i+0x1ee>
 8005098:	6820      	ldr	r0, [r4, #0]
 800509a:	682b      	ldr	r3, [r5, #0]
 800509c:	0607      	lsls	r7, r0, #24
 800509e:	f103 0104 	add.w	r1, r3, #4
 80050a2:	6029      	str	r1, [r5, #0]
 80050a4:	d501      	bpl.n	80050aa <_printf_i+0xbe>
 80050a6:	681e      	ldr	r6, [r3, #0]
 80050a8:	e003      	b.n	80050b2 <_printf_i+0xc6>
 80050aa:	0646      	lsls	r6, r0, #25
 80050ac:	d5fb      	bpl.n	80050a6 <_printf_i+0xba>
 80050ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050b2:	2e00      	cmp	r6, #0
 80050b4:	da03      	bge.n	80050be <_printf_i+0xd2>
 80050b6:	232d      	movs	r3, #45	; 0x2d
 80050b8:	4276      	negs	r6, r6
 80050ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050be:	230a      	movs	r3, #10
 80050c0:	4859      	ldr	r0, [pc, #356]	; (8005228 <_printf_i+0x23c>)
 80050c2:	e012      	b.n	80050ea <_printf_i+0xfe>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	6820      	ldr	r0, [r4, #0]
 80050c8:	1d19      	adds	r1, r3, #4
 80050ca:	6029      	str	r1, [r5, #0]
 80050cc:	0605      	lsls	r5, r0, #24
 80050ce:	d501      	bpl.n	80050d4 <_printf_i+0xe8>
 80050d0:	681e      	ldr	r6, [r3, #0]
 80050d2:	e002      	b.n	80050da <_printf_i+0xee>
 80050d4:	0641      	lsls	r1, r0, #25
 80050d6:	d5fb      	bpl.n	80050d0 <_printf_i+0xe4>
 80050d8:	881e      	ldrh	r6, [r3, #0]
 80050da:	2f6f      	cmp	r7, #111	; 0x6f
 80050dc:	bf0c      	ite	eq
 80050de:	2308      	moveq	r3, #8
 80050e0:	230a      	movne	r3, #10
 80050e2:	4851      	ldr	r0, [pc, #324]	; (8005228 <_printf_i+0x23c>)
 80050e4:	2100      	movs	r1, #0
 80050e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ea:	6865      	ldr	r5, [r4, #4]
 80050ec:	2d00      	cmp	r5, #0
 80050ee:	bfa8      	it	ge
 80050f0:	6821      	ldrge	r1, [r4, #0]
 80050f2:	60a5      	str	r5, [r4, #8]
 80050f4:	bfa4      	itt	ge
 80050f6:	f021 0104 	bicge.w	r1, r1, #4
 80050fa:	6021      	strge	r1, [r4, #0]
 80050fc:	b90e      	cbnz	r6, 8005102 <_printf_i+0x116>
 80050fe:	2d00      	cmp	r5, #0
 8005100:	d04b      	beq.n	800519a <_printf_i+0x1ae>
 8005102:	4615      	mov	r5, r2
 8005104:	fbb6 f1f3 	udiv	r1, r6, r3
 8005108:	fb03 6711 	mls	r7, r3, r1, r6
 800510c:	5dc7      	ldrb	r7, [r0, r7]
 800510e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005112:	4637      	mov	r7, r6
 8005114:	42bb      	cmp	r3, r7
 8005116:	460e      	mov	r6, r1
 8005118:	d9f4      	bls.n	8005104 <_printf_i+0x118>
 800511a:	2b08      	cmp	r3, #8
 800511c:	d10b      	bne.n	8005136 <_printf_i+0x14a>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	07de      	lsls	r6, r3, #31
 8005122:	d508      	bpl.n	8005136 <_printf_i+0x14a>
 8005124:	6923      	ldr	r3, [r4, #16]
 8005126:	6861      	ldr	r1, [r4, #4]
 8005128:	4299      	cmp	r1, r3
 800512a:	bfde      	ittt	le
 800512c:	2330      	movle	r3, #48	; 0x30
 800512e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005132:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005136:	1b52      	subs	r2, r2, r5
 8005138:	6122      	str	r2, [r4, #16]
 800513a:	464b      	mov	r3, r9
 800513c:	4621      	mov	r1, r4
 800513e:	4640      	mov	r0, r8
 8005140:	f8cd a000 	str.w	sl, [sp]
 8005144:	aa03      	add	r2, sp, #12
 8005146:	f7ff fedf 	bl	8004f08 <_printf_common>
 800514a:	3001      	adds	r0, #1
 800514c:	d14a      	bne.n	80051e4 <_printf_i+0x1f8>
 800514e:	f04f 30ff 	mov.w	r0, #4294967295
 8005152:	b004      	add	sp, #16
 8005154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	f043 0320 	orr.w	r3, r3, #32
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	2778      	movs	r7, #120	; 0x78
 8005162:	4832      	ldr	r0, [pc, #200]	; (800522c <_printf_i+0x240>)
 8005164:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	6829      	ldr	r1, [r5, #0]
 800516c:	061f      	lsls	r7, r3, #24
 800516e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005172:	d402      	bmi.n	800517a <_printf_i+0x18e>
 8005174:	065f      	lsls	r7, r3, #25
 8005176:	bf48      	it	mi
 8005178:	b2b6      	uxthmi	r6, r6
 800517a:	07df      	lsls	r7, r3, #31
 800517c:	bf48      	it	mi
 800517e:	f043 0320 	orrmi.w	r3, r3, #32
 8005182:	6029      	str	r1, [r5, #0]
 8005184:	bf48      	it	mi
 8005186:	6023      	strmi	r3, [r4, #0]
 8005188:	b91e      	cbnz	r6, 8005192 <_printf_i+0x1a6>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	f023 0320 	bic.w	r3, r3, #32
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	2310      	movs	r3, #16
 8005194:	e7a6      	b.n	80050e4 <_printf_i+0xf8>
 8005196:	4824      	ldr	r0, [pc, #144]	; (8005228 <_printf_i+0x23c>)
 8005198:	e7e4      	b.n	8005164 <_printf_i+0x178>
 800519a:	4615      	mov	r5, r2
 800519c:	e7bd      	b.n	800511a <_printf_i+0x12e>
 800519e:	682b      	ldr	r3, [r5, #0]
 80051a0:	6826      	ldr	r6, [r4, #0]
 80051a2:	1d18      	adds	r0, r3, #4
 80051a4:	6961      	ldr	r1, [r4, #20]
 80051a6:	6028      	str	r0, [r5, #0]
 80051a8:	0635      	lsls	r5, r6, #24
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	d501      	bpl.n	80051b2 <_printf_i+0x1c6>
 80051ae:	6019      	str	r1, [r3, #0]
 80051b0:	e002      	b.n	80051b8 <_printf_i+0x1cc>
 80051b2:	0670      	lsls	r0, r6, #25
 80051b4:	d5fb      	bpl.n	80051ae <_printf_i+0x1c2>
 80051b6:	8019      	strh	r1, [r3, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	4615      	mov	r5, r2
 80051bc:	6123      	str	r3, [r4, #16]
 80051be:	e7bc      	b.n	800513a <_printf_i+0x14e>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	2100      	movs	r1, #0
 80051c4:	1d1a      	adds	r2, r3, #4
 80051c6:	602a      	str	r2, [r5, #0]
 80051c8:	681d      	ldr	r5, [r3, #0]
 80051ca:	6862      	ldr	r2, [r4, #4]
 80051cc:	4628      	mov	r0, r5
 80051ce:	f000 fc28 	bl	8005a22 <memchr>
 80051d2:	b108      	cbz	r0, 80051d8 <_printf_i+0x1ec>
 80051d4:	1b40      	subs	r0, r0, r5
 80051d6:	6060      	str	r0, [r4, #4]
 80051d8:	6863      	ldr	r3, [r4, #4]
 80051da:	6123      	str	r3, [r4, #16]
 80051dc:	2300      	movs	r3, #0
 80051de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051e2:	e7aa      	b.n	800513a <_printf_i+0x14e>
 80051e4:	462a      	mov	r2, r5
 80051e6:	4649      	mov	r1, r9
 80051e8:	4640      	mov	r0, r8
 80051ea:	6923      	ldr	r3, [r4, #16]
 80051ec:	47d0      	blx	sl
 80051ee:	3001      	adds	r0, #1
 80051f0:	d0ad      	beq.n	800514e <_printf_i+0x162>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	079b      	lsls	r3, r3, #30
 80051f6:	d413      	bmi.n	8005220 <_printf_i+0x234>
 80051f8:	68e0      	ldr	r0, [r4, #12]
 80051fa:	9b03      	ldr	r3, [sp, #12]
 80051fc:	4298      	cmp	r0, r3
 80051fe:	bfb8      	it	lt
 8005200:	4618      	movlt	r0, r3
 8005202:	e7a6      	b.n	8005152 <_printf_i+0x166>
 8005204:	2301      	movs	r3, #1
 8005206:	4632      	mov	r2, r6
 8005208:	4649      	mov	r1, r9
 800520a:	4640      	mov	r0, r8
 800520c:	47d0      	blx	sl
 800520e:	3001      	adds	r0, #1
 8005210:	d09d      	beq.n	800514e <_printf_i+0x162>
 8005212:	3501      	adds	r5, #1
 8005214:	68e3      	ldr	r3, [r4, #12]
 8005216:	9903      	ldr	r1, [sp, #12]
 8005218:	1a5b      	subs	r3, r3, r1
 800521a:	42ab      	cmp	r3, r5
 800521c:	dcf2      	bgt.n	8005204 <_printf_i+0x218>
 800521e:	e7eb      	b.n	80051f8 <_printf_i+0x20c>
 8005220:	2500      	movs	r5, #0
 8005222:	f104 0619 	add.w	r6, r4, #25
 8005226:	e7f5      	b.n	8005214 <_printf_i+0x228>
 8005228:	0800b906 	.word	0x0800b906
 800522c:	0800b917 	.word	0x0800b917

08005230 <_scanf_float>:
 8005230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005234:	b087      	sub	sp, #28
 8005236:	9303      	str	r3, [sp, #12]
 8005238:	688b      	ldr	r3, [r1, #8]
 800523a:	4617      	mov	r7, r2
 800523c:	1e5a      	subs	r2, r3, #1
 800523e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005242:	bf85      	ittet	hi
 8005244:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005248:	195b      	addhi	r3, r3, r5
 800524a:	2300      	movls	r3, #0
 800524c:	9302      	strhi	r3, [sp, #8]
 800524e:	bf88      	it	hi
 8005250:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005254:	468b      	mov	fp, r1
 8005256:	f04f 0500 	mov.w	r5, #0
 800525a:	bf8c      	ite	hi
 800525c:	608b      	strhi	r3, [r1, #8]
 800525e:	9302      	strls	r3, [sp, #8]
 8005260:	680b      	ldr	r3, [r1, #0]
 8005262:	4680      	mov	r8, r0
 8005264:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005268:	f84b 3b1c 	str.w	r3, [fp], #28
 800526c:	460c      	mov	r4, r1
 800526e:	465e      	mov	r6, fp
 8005270:	46aa      	mov	sl, r5
 8005272:	46a9      	mov	r9, r5
 8005274:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005278:	9501      	str	r5, [sp, #4]
 800527a:	68a2      	ldr	r2, [r4, #8]
 800527c:	b152      	cbz	r2, 8005294 <_scanf_float+0x64>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b4e      	cmp	r3, #78	; 0x4e
 8005284:	d864      	bhi.n	8005350 <_scanf_float+0x120>
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d83c      	bhi.n	8005304 <_scanf_float+0xd4>
 800528a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800528e:	b2c8      	uxtb	r0, r1
 8005290:	280e      	cmp	r0, #14
 8005292:	d93a      	bls.n	800530a <_scanf_float+0xda>
 8005294:	f1b9 0f00 	cmp.w	r9, #0
 8005298:	d003      	beq.n	80052a2 <_scanf_float+0x72>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052a6:	f1ba 0f01 	cmp.w	sl, #1
 80052aa:	f200 8113 	bhi.w	80054d4 <_scanf_float+0x2a4>
 80052ae:	455e      	cmp	r6, fp
 80052b0:	f200 8105 	bhi.w	80054be <_scanf_float+0x28e>
 80052b4:	2501      	movs	r5, #1
 80052b6:	4628      	mov	r0, r5
 80052b8:	b007      	add	sp, #28
 80052ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80052c2:	2a0d      	cmp	r2, #13
 80052c4:	d8e6      	bhi.n	8005294 <_scanf_float+0x64>
 80052c6:	a101      	add	r1, pc, #4	; (adr r1, 80052cc <_scanf_float+0x9c>)
 80052c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80052cc:	0800540b 	.word	0x0800540b
 80052d0:	08005295 	.word	0x08005295
 80052d4:	08005295 	.word	0x08005295
 80052d8:	08005295 	.word	0x08005295
 80052dc:	0800546b 	.word	0x0800546b
 80052e0:	08005443 	.word	0x08005443
 80052e4:	08005295 	.word	0x08005295
 80052e8:	08005295 	.word	0x08005295
 80052ec:	08005419 	.word	0x08005419
 80052f0:	08005295 	.word	0x08005295
 80052f4:	08005295 	.word	0x08005295
 80052f8:	08005295 	.word	0x08005295
 80052fc:	08005295 	.word	0x08005295
 8005300:	080053d1 	.word	0x080053d1
 8005304:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005308:	e7db      	b.n	80052c2 <_scanf_float+0x92>
 800530a:	290e      	cmp	r1, #14
 800530c:	d8c2      	bhi.n	8005294 <_scanf_float+0x64>
 800530e:	a001      	add	r0, pc, #4	; (adr r0, 8005314 <_scanf_float+0xe4>)
 8005310:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005314:	080053c3 	.word	0x080053c3
 8005318:	08005295 	.word	0x08005295
 800531c:	080053c3 	.word	0x080053c3
 8005320:	08005457 	.word	0x08005457
 8005324:	08005295 	.word	0x08005295
 8005328:	08005371 	.word	0x08005371
 800532c:	080053ad 	.word	0x080053ad
 8005330:	080053ad 	.word	0x080053ad
 8005334:	080053ad 	.word	0x080053ad
 8005338:	080053ad 	.word	0x080053ad
 800533c:	080053ad 	.word	0x080053ad
 8005340:	080053ad 	.word	0x080053ad
 8005344:	080053ad 	.word	0x080053ad
 8005348:	080053ad 	.word	0x080053ad
 800534c:	080053ad 	.word	0x080053ad
 8005350:	2b6e      	cmp	r3, #110	; 0x6e
 8005352:	d809      	bhi.n	8005368 <_scanf_float+0x138>
 8005354:	2b60      	cmp	r3, #96	; 0x60
 8005356:	d8b2      	bhi.n	80052be <_scanf_float+0x8e>
 8005358:	2b54      	cmp	r3, #84	; 0x54
 800535a:	d077      	beq.n	800544c <_scanf_float+0x21c>
 800535c:	2b59      	cmp	r3, #89	; 0x59
 800535e:	d199      	bne.n	8005294 <_scanf_float+0x64>
 8005360:	2d07      	cmp	r5, #7
 8005362:	d197      	bne.n	8005294 <_scanf_float+0x64>
 8005364:	2508      	movs	r5, #8
 8005366:	e029      	b.n	80053bc <_scanf_float+0x18c>
 8005368:	2b74      	cmp	r3, #116	; 0x74
 800536a:	d06f      	beq.n	800544c <_scanf_float+0x21c>
 800536c:	2b79      	cmp	r3, #121	; 0x79
 800536e:	e7f6      	b.n	800535e <_scanf_float+0x12e>
 8005370:	6821      	ldr	r1, [r4, #0]
 8005372:	05c8      	lsls	r0, r1, #23
 8005374:	d51a      	bpl.n	80053ac <_scanf_float+0x17c>
 8005376:	9b02      	ldr	r3, [sp, #8]
 8005378:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800537c:	6021      	str	r1, [r4, #0]
 800537e:	f109 0901 	add.w	r9, r9, #1
 8005382:	b11b      	cbz	r3, 800538c <_scanf_float+0x15c>
 8005384:	3b01      	subs	r3, #1
 8005386:	3201      	adds	r2, #1
 8005388:	9302      	str	r3, [sp, #8]
 800538a:	60a2      	str	r2, [r4, #8]
 800538c:	68a3      	ldr	r3, [r4, #8]
 800538e:	3b01      	subs	r3, #1
 8005390:	60a3      	str	r3, [r4, #8]
 8005392:	6923      	ldr	r3, [r4, #16]
 8005394:	3301      	adds	r3, #1
 8005396:	6123      	str	r3, [r4, #16]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3b01      	subs	r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	607b      	str	r3, [r7, #4]
 80053a0:	f340 8084 	ble.w	80054ac <_scanf_float+0x27c>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	3301      	adds	r3, #1
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	e766      	b.n	800527a <_scanf_float+0x4a>
 80053ac:	eb1a 0f05 	cmn.w	sl, r5
 80053b0:	f47f af70 	bne.w	8005294 <_scanf_float+0x64>
 80053b4:	6822      	ldr	r2, [r4, #0]
 80053b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80053ba:	6022      	str	r2, [r4, #0]
 80053bc:	f806 3b01 	strb.w	r3, [r6], #1
 80053c0:	e7e4      	b.n	800538c <_scanf_float+0x15c>
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	0610      	lsls	r0, r2, #24
 80053c6:	f57f af65 	bpl.w	8005294 <_scanf_float+0x64>
 80053ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ce:	e7f4      	b.n	80053ba <_scanf_float+0x18a>
 80053d0:	f1ba 0f00 	cmp.w	sl, #0
 80053d4:	d10e      	bne.n	80053f4 <_scanf_float+0x1c4>
 80053d6:	f1b9 0f00 	cmp.w	r9, #0
 80053da:	d10e      	bne.n	80053fa <_scanf_float+0x1ca>
 80053dc:	6822      	ldr	r2, [r4, #0]
 80053de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80053e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80053e6:	d108      	bne.n	80053fa <_scanf_float+0x1ca>
 80053e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053ec:	f04f 0a01 	mov.w	sl, #1
 80053f0:	6022      	str	r2, [r4, #0]
 80053f2:	e7e3      	b.n	80053bc <_scanf_float+0x18c>
 80053f4:	f1ba 0f02 	cmp.w	sl, #2
 80053f8:	d055      	beq.n	80054a6 <_scanf_float+0x276>
 80053fa:	2d01      	cmp	r5, #1
 80053fc:	d002      	beq.n	8005404 <_scanf_float+0x1d4>
 80053fe:	2d04      	cmp	r5, #4
 8005400:	f47f af48 	bne.w	8005294 <_scanf_float+0x64>
 8005404:	3501      	adds	r5, #1
 8005406:	b2ed      	uxtb	r5, r5
 8005408:	e7d8      	b.n	80053bc <_scanf_float+0x18c>
 800540a:	f1ba 0f01 	cmp.w	sl, #1
 800540e:	f47f af41 	bne.w	8005294 <_scanf_float+0x64>
 8005412:	f04f 0a02 	mov.w	sl, #2
 8005416:	e7d1      	b.n	80053bc <_scanf_float+0x18c>
 8005418:	b97d      	cbnz	r5, 800543a <_scanf_float+0x20a>
 800541a:	f1b9 0f00 	cmp.w	r9, #0
 800541e:	f47f af3c 	bne.w	800529a <_scanf_float+0x6a>
 8005422:	6822      	ldr	r2, [r4, #0]
 8005424:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005428:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800542c:	f47f af39 	bne.w	80052a2 <_scanf_float+0x72>
 8005430:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005434:	2501      	movs	r5, #1
 8005436:	6022      	str	r2, [r4, #0]
 8005438:	e7c0      	b.n	80053bc <_scanf_float+0x18c>
 800543a:	2d03      	cmp	r5, #3
 800543c:	d0e2      	beq.n	8005404 <_scanf_float+0x1d4>
 800543e:	2d05      	cmp	r5, #5
 8005440:	e7de      	b.n	8005400 <_scanf_float+0x1d0>
 8005442:	2d02      	cmp	r5, #2
 8005444:	f47f af26 	bne.w	8005294 <_scanf_float+0x64>
 8005448:	2503      	movs	r5, #3
 800544a:	e7b7      	b.n	80053bc <_scanf_float+0x18c>
 800544c:	2d06      	cmp	r5, #6
 800544e:	f47f af21 	bne.w	8005294 <_scanf_float+0x64>
 8005452:	2507      	movs	r5, #7
 8005454:	e7b2      	b.n	80053bc <_scanf_float+0x18c>
 8005456:	6822      	ldr	r2, [r4, #0]
 8005458:	0591      	lsls	r1, r2, #22
 800545a:	f57f af1b 	bpl.w	8005294 <_scanf_float+0x64>
 800545e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005462:	6022      	str	r2, [r4, #0]
 8005464:	f8cd 9004 	str.w	r9, [sp, #4]
 8005468:	e7a8      	b.n	80053bc <_scanf_float+0x18c>
 800546a:	6822      	ldr	r2, [r4, #0]
 800546c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005470:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005474:	d006      	beq.n	8005484 <_scanf_float+0x254>
 8005476:	0550      	lsls	r0, r2, #21
 8005478:	f57f af0c 	bpl.w	8005294 <_scanf_float+0x64>
 800547c:	f1b9 0f00 	cmp.w	r9, #0
 8005480:	f43f af0f 	beq.w	80052a2 <_scanf_float+0x72>
 8005484:	0591      	lsls	r1, r2, #22
 8005486:	bf58      	it	pl
 8005488:	9901      	ldrpl	r1, [sp, #4]
 800548a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800548e:	bf58      	it	pl
 8005490:	eba9 0101 	subpl.w	r1, r9, r1
 8005494:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005498:	f04f 0900 	mov.w	r9, #0
 800549c:	bf58      	it	pl
 800549e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80054a2:	6022      	str	r2, [r4, #0]
 80054a4:	e78a      	b.n	80053bc <_scanf_float+0x18c>
 80054a6:	f04f 0a03 	mov.w	sl, #3
 80054aa:	e787      	b.n	80053bc <_scanf_float+0x18c>
 80054ac:	4639      	mov	r1, r7
 80054ae:	4640      	mov	r0, r8
 80054b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80054b4:	4798      	blx	r3
 80054b6:	2800      	cmp	r0, #0
 80054b8:	f43f aedf 	beq.w	800527a <_scanf_float+0x4a>
 80054bc:	e6ea      	b.n	8005294 <_scanf_float+0x64>
 80054be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054c2:	463a      	mov	r2, r7
 80054c4:	4640      	mov	r0, r8
 80054c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054ca:	4798      	blx	r3
 80054cc:	6923      	ldr	r3, [r4, #16]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	6123      	str	r3, [r4, #16]
 80054d2:	e6ec      	b.n	80052ae <_scanf_float+0x7e>
 80054d4:	1e6b      	subs	r3, r5, #1
 80054d6:	2b06      	cmp	r3, #6
 80054d8:	d825      	bhi.n	8005526 <_scanf_float+0x2f6>
 80054da:	2d02      	cmp	r5, #2
 80054dc:	d836      	bhi.n	800554c <_scanf_float+0x31c>
 80054de:	455e      	cmp	r6, fp
 80054e0:	f67f aee8 	bls.w	80052b4 <_scanf_float+0x84>
 80054e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054e8:	463a      	mov	r2, r7
 80054ea:	4640      	mov	r0, r8
 80054ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054f0:	4798      	blx	r3
 80054f2:	6923      	ldr	r3, [r4, #16]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	6123      	str	r3, [r4, #16]
 80054f8:	e7f1      	b.n	80054de <_scanf_float+0x2ae>
 80054fa:	9802      	ldr	r0, [sp, #8]
 80054fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005500:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005504:	463a      	mov	r2, r7
 8005506:	9002      	str	r0, [sp, #8]
 8005508:	4640      	mov	r0, r8
 800550a:	4798      	blx	r3
 800550c:	6923      	ldr	r3, [r4, #16]
 800550e:	3b01      	subs	r3, #1
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005516:	fa5f fa8a 	uxtb.w	sl, sl
 800551a:	f1ba 0f02 	cmp.w	sl, #2
 800551e:	d1ec      	bne.n	80054fa <_scanf_float+0x2ca>
 8005520:	3d03      	subs	r5, #3
 8005522:	b2ed      	uxtb	r5, r5
 8005524:	1b76      	subs	r6, r6, r5
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	05da      	lsls	r2, r3, #23
 800552a:	d52f      	bpl.n	800558c <_scanf_float+0x35c>
 800552c:	055b      	lsls	r3, r3, #21
 800552e:	d510      	bpl.n	8005552 <_scanf_float+0x322>
 8005530:	455e      	cmp	r6, fp
 8005532:	f67f aebf 	bls.w	80052b4 <_scanf_float+0x84>
 8005536:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800553a:	463a      	mov	r2, r7
 800553c:	4640      	mov	r0, r8
 800553e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005542:	4798      	blx	r3
 8005544:	6923      	ldr	r3, [r4, #16]
 8005546:	3b01      	subs	r3, #1
 8005548:	6123      	str	r3, [r4, #16]
 800554a:	e7f1      	b.n	8005530 <_scanf_float+0x300>
 800554c:	46aa      	mov	sl, r5
 800554e:	9602      	str	r6, [sp, #8]
 8005550:	e7df      	b.n	8005512 <_scanf_float+0x2e2>
 8005552:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005556:	6923      	ldr	r3, [r4, #16]
 8005558:	2965      	cmp	r1, #101	; 0x65
 800555a:	f103 33ff 	add.w	r3, r3, #4294967295
 800555e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005562:	6123      	str	r3, [r4, #16]
 8005564:	d00c      	beq.n	8005580 <_scanf_float+0x350>
 8005566:	2945      	cmp	r1, #69	; 0x45
 8005568:	d00a      	beq.n	8005580 <_scanf_float+0x350>
 800556a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800556e:	463a      	mov	r2, r7
 8005570:	4640      	mov	r0, r8
 8005572:	4798      	blx	r3
 8005574:	6923      	ldr	r3, [r4, #16]
 8005576:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800557a:	3b01      	subs	r3, #1
 800557c:	1eb5      	subs	r5, r6, #2
 800557e:	6123      	str	r3, [r4, #16]
 8005580:	463a      	mov	r2, r7
 8005582:	4640      	mov	r0, r8
 8005584:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005588:	4798      	blx	r3
 800558a:	462e      	mov	r6, r5
 800558c:	6825      	ldr	r5, [r4, #0]
 800558e:	f015 0510 	ands.w	r5, r5, #16
 8005592:	d155      	bne.n	8005640 <_scanf_float+0x410>
 8005594:	7035      	strb	r5, [r6, #0]
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800559c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a0:	d11d      	bne.n	80055de <_scanf_float+0x3ae>
 80055a2:	9b01      	ldr	r3, [sp, #4]
 80055a4:	454b      	cmp	r3, r9
 80055a6:	eba3 0209 	sub.w	r2, r3, r9
 80055aa:	d125      	bne.n	80055f8 <_scanf_float+0x3c8>
 80055ac:	2200      	movs	r2, #0
 80055ae:	4659      	mov	r1, fp
 80055b0:	4640      	mov	r0, r8
 80055b2:	f002 fc75 	bl	8007ea0 <_strtod_r>
 80055b6:	9b03      	ldr	r3, [sp, #12]
 80055b8:	f8d4 c000 	ldr.w	ip, [r4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f01c 0f02 	tst.w	ip, #2
 80055c2:	4606      	mov	r6, r0
 80055c4:	460f      	mov	r7, r1
 80055c6:	f103 0204 	add.w	r2, r3, #4
 80055ca:	d020      	beq.n	800560e <_scanf_float+0x3de>
 80055cc:	9903      	ldr	r1, [sp, #12]
 80055ce:	600a      	str	r2, [r1, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	e9c3 6700 	strd	r6, r7, [r3]
 80055d6:	68e3      	ldr	r3, [r4, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60e3      	str	r3, [r4, #12]
 80055dc:	e66b      	b.n	80052b6 <_scanf_float+0x86>
 80055de:	9b04      	ldr	r3, [sp, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0e3      	beq.n	80055ac <_scanf_float+0x37c>
 80055e4:	9905      	ldr	r1, [sp, #20]
 80055e6:	230a      	movs	r3, #10
 80055e8:	462a      	mov	r2, r5
 80055ea:	4640      	mov	r0, r8
 80055ec:	3101      	adds	r1, #1
 80055ee:	f002 fcdb 	bl	8007fa8 <_strtol_r>
 80055f2:	9b04      	ldr	r3, [sp, #16]
 80055f4:	9e05      	ldr	r6, [sp, #20]
 80055f6:	1ac2      	subs	r2, r0, r3
 80055f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80055fc:	429e      	cmp	r6, r3
 80055fe:	bf28      	it	cs
 8005600:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005604:	4630      	mov	r0, r6
 8005606:	490f      	ldr	r1, [pc, #60]	; (8005644 <_scanf_float+0x414>)
 8005608:	f000 f928 	bl	800585c <siprintf>
 800560c:	e7ce      	b.n	80055ac <_scanf_float+0x37c>
 800560e:	f01c 0f04 	tst.w	ip, #4
 8005612:	d1db      	bne.n	80055cc <_scanf_float+0x39c>
 8005614:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005618:	f8cc 2000 	str.w	r2, [ip]
 800561c:	f8d3 8000 	ldr.w	r8, [r3]
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	f7fb fa02 	bl	8000a2c <__aeabi_dcmpun>
 8005628:	b128      	cbz	r0, 8005636 <_scanf_float+0x406>
 800562a:	4807      	ldr	r0, [pc, #28]	; (8005648 <_scanf_float+0x418>)
 800562c:	f000 fa16 	bl	8005a5c <nanf>
 8005630:	f8c8 0000 	str.w	r0, [r8]
 8005634:	e7cf      	b.n	80055d6 <_scanf_float+0x3a6>
 8005636:	4630      	mov	r0, r6
 8005638:	4639      	mov	r1, r7
 800563a:	f7fb fa55 	bl	8000ae8 <__aeabi_d2f>
 800563e:	e7f7      	b.n	8005630 <_scanf_float+0x400>
 8005640:	2500      	movs	r5, #0
 8005642:	e638      	b.n	80052b6 <_scanf_float+0x86>
 8005644:	0800b928 	.word	0x0800b928
 8005648:	0800bcbd 	.word	0x0800bcbd

0800564c <std>:
 800564c:	2300      	movs	r3, #0
 800564e:	b510      	push	{r4, lr}
 8005650:	4604      	mov	r4, r0
 8005652:	e9c0 3300 	strd	r3, r3, [r0]
 8005656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800565a:	6083      	str	r3, [r0, #8]
 800565c:	8181      	strh	r1, [r0, #12]
 800565e:	6643      	str	r3, [r0, #100]	; 0x64
 8005660:	81c2      	strh	r2, [r0, #14]
 8005662:	6183      	str	r3, [r0, #24]
 8005664:	4619      	mov	r1, r3
 8005666:	2208      	movs	r2, #8
 8005668:	305c      	adds	r0, #92	; 0x5c
 800566a:	f000 f95a 	bl	8005922 <memset>
 800566e:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <std+0x58>)
 8005670:	6224      	str	r4, [r4, #32]
 8005672:	6263      	str	r3, [r4, #36]	; 0x24
 8005674:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <std+0x5c>)
 8005676:	62a3      	str	r3, [r4, #40]	; 0x28
 8005678:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <std+0x60>)
 800567a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <std+0x64>)
 800567e:	6323      	str	r3, [r4, #48]	; 0x30
 8005680:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <std+0x68>)
 8005682:	429c      	cmp	r4, r3
 8005684:	d006      	beq.n	8005694 <std+0x48>
 8005686:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800568a:	4294      	cmp	r4, r2
 800568c:	d002      	beq.n	8005694 <std+0x48>
 800568e:	33d0      	adds	r3, #208	; 0xd0
 8005690:	429c      	cmp	r4, r3
 8005692:	d105      	bne.n	80056a0 <std+0x54>
 8005694:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800569c:	f000 b9be 	b.w	8005a1c <__retarget_lock_init_recursive>
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	bf00      	nop
 80056a4:	0800589d 	.word	0x0800589d
 80056a8:	080058bf 	.word	0x080058bf
 80056ac:	080058f7 	.word	0x080058f7
 80056b0:	0800591b 	.word	0x0800591b
 80056b4:	20000a88 	.word	0x20000a88

080056b8 <stdio_exit_handler>:
 80056b8:	4a02      	ldr	r2, [pc, #8]	; (80056c4 <stdio_exit_handler+0xc>)
 80056ba:	4903      	ldr	r1, [pc, #12]	; (80056c8 <stdio_exit_handler+0x10>)
 80056bc:	4803      	ldr	r0, [pc, #12]	; (80056cc <stdio_exit_handler+0x14>)
 80056be:	f000 b869 	b.w	8005794 <_fwalk_sglue>
 80056c2:	bf00      	nop
 80056c4:	20000028 	.word	0x20000028
 80056c8:	080085e5 	.word	0x080085e5
 80056cc:	20000034 	.word	0x20000034

080056d0 <cleanup_stdio>:
 80056d0:	6841      	ldr	r1, [r0, #4]
 80056d2:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <cleanup_stdio+0x34>)
 80056d4:	b510      	push	{r4, lr}
 80056d6:	4299      	cmp	r1, r3
 80056d8:	4604      	mov	r4, r0
 80056da:	d001      	beq.n	80056e0 <cleanup_stdio+0x10>
 80056dc:	f002 ff82 	bl	80085e4 <_fflush_r>
 80056e0:	68a1      	ldr	r1, [r4, #8]
 80056e2:	4b09      	ldr	r3, [pc, #36]	; (8005708 <cleanup_stdio+0x38>)
 80056e4:	4299      	cmp	r1, r3
 80056e6:	d002      	beq.n	80056ee <cleanup_stdio+0x1e>
 80056e8:	4620      	mov	r0, r4
 80056ea:	f002 ff7b 	bl	80085e4 <_fflush_r>
 80056ee:	68e1      	ldr	r1, [r4, #12]
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <cleanup_stdio+0x3c>)
 80056f2:	4299      	cmp	r1, r3
 80056f4:	d004      	beq.n	8005700 <cleanup_stdio+0x30>
 80056f6:	4620      	mov	r0, r4
 80056f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056fc:	f002 bf72 	b.w	80085e4 <_fflush_r>
 8005700:	bd10      	pop	{r4, pc}
 8005702:	bf00      	nop
 8005704:	20000a88 	.word	0x20000a88
 8005708:	20000af0 	.word	0x20000af0
 800570c:	20000b58 	.word	0x20000b58

08005710 <global_stdio_init.part.0>:
 8005710:	b510      	push	{r4, lr}
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <global_stdio_init.part.0+0x30>)
 8005714:	4c0b      	ldr	r4, [pc, #44]	; (8005744 <global_stdio_init.part.0+0x34>)
 8005716:	4a0c      	ldr	r2, [pc, #48]	; (8005748 <global_stdio_init.part.0+0x38>)
 8005718:	4620      	mov	r0, r4
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	2104      	movs	r1, #4
 800571e:	2200      	movs	r2, #0
 8005720:	f7ff ff94 	bl	800564c <std>
 8005724:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005728:	2201      	movs	r2, #1
 800572a:	2109      	movs	r1, #9
 800572c:	f7ff ff8e 	bl	800564c <std>
 8005730:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005734:	2202      	movs	r2, #2
 8005736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800573a:	2112      	movs	r1, #18
 800573c:	f7ff bf86 	b.w	800564c <std>
 8005740:	20000bc0 	.word	0x20000bc0
 8005744:	20000a88 	.word	0x20000a88
 8005748:	080056b9 	.word	0x080056b9

0800574c <__sfp_lock_acquire>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__sfp_lock_acquire+0x8>)
 800574e:	f000 b966 	b.w	8005a1e <__retarget_lock_acquire_recursive>
 8005752:	bf00      	nop
 8005754:	20000bc9 	.word	0x20000bc9

08005758 <__sfp_lock_release>:
 8005758:	4801      	ldr	r0, [pc, #4]	; (8005760 <__sfp_lock_release+0x8>)
 800575a:	f000 b961 	b.w	8005a20 <__retarget_lock_release_recursive>
 800575e:	bf00      	nop
 8005760:	20000bc9 	.word	0x20000bc9

08005764 <__sinit>:
 8005764:	b510      	push	{r4, lr}
 8005766:	4604      	mov	r4, r0
 8005768:	f7ff fff0 	bl	800574c <__sfp_lock_acquire>
 800576c:	6a23      	ldr	r3, [r4, #32]
 800576e:	b11b      	cbz	r3, 8005778 <__sinit+0x14>
 8005770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005774:	f7ff bff0 	b.w	8005758 <__sfp_lock_release>
 8005778:	4b04      	ldr	r3, [pc, #16]	; (800578c <__sinit+0x28>)
 800577a:	6223      	str	r3, [r4, #32]
 800577c:	4b04      	ldr	r3, [pc, #16]	; (8005790 <__sinit+0x2c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f5      	bne.n	8005770 <__sinit+0xc>
 8005784:	f7ff ffc4 	bl	8005710 <global_stdio_init.part.0>
 8005788:	e7f2      	b.n	8005770 <__sinit+0xc>
 800578a:	bf00      	nop
 800578c:	080056d1 	.word	0x080056d1
 8005790:	20000bc0 	.word	0x20000bc0

08005794 <_fwalk_sglue>:
 8005794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005798:	4607      	mov	r7, r0
 800579a:	4688      	mov	r8, r1
 800579c:	4614      	mov	r4, r2
 800579e:	2600      	movs	r6, #0
 80057a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057a4:	f1b9 0901 	subs.w	r9, r9, #1
 80057a8:	d505      	bpl.n	80057b6 <_fwalk_sglue+0x22>
 80057aa:	6824      	ldr	r4, [r4, #0]
 80057ac:	2c00      	cmp	r4, #0
 80057ae:	d1f7      	bne.n	80057a0 <_fwalk_sglue+0xc>
 80057b0:	4630      	mov	r0, r6
 80057b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d907      	bls.n	80057cc <_fwalk_sglue+0x38>
 80057bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057c0:	3301      	adds	r3, #1
 80057c2:	d003      	beq.n	80057cc <_fwalk_sglue+0x38>
 80057c4:	4629      	mov	r1, r5
 80057c6:	4638      	mov	r0, r7
 80057c8:	47c0      	blx	r8
 80057ca:	4306      	orrs	r6, r0
 80057cc:	3568      	adds	r5, #104	; 0x68
 80057ce:	e7e9      	b.n	80057a4 <_fwalk_sglue+0x10>

080057d0 <iprintf>:
 80057d0:	b40f      	push	{r0, r1, r2, r3}
 80057d2:	b507      	push	{r0, r1, r2, lr}
 80057d4:	4906      	ldr	r1, [pc, #24]	; (80057f0 <iprintf+0x20>)
 80057d6:	ab04      	add	r3, sp, #16
 80057d8:	6808      	ldr	r0, [r1, #0]
 80057da:	f853 2b04 	ldr.w	r2, [r3], #4
 80057de:	6881      	ldr	r1, [r0, #8]
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	f002 fd63 	bl	80082ac <_vfiprintf_r>
 80057e6:	b003      	add	sp, #12
 80057e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057ec:	b004      	add	sp, #16
 80057ee:	4770      	bx	lr
 80057f0:	20000080 	.word	0x20000080

080057f4 <sniprintf>:
 80057f4:	b40c      	push	{r2, r3}
 80057f6:	b530      	push	{r4, r5, lr}
 80057f8:	4b17      	ldr	r3, [pc, #92]	; (8005858 <sniprintf+0x64>)
 80057fa:	1e0c      	subs	r4, r1, #0
 80057fc:	681d      	ldr	r5, [r3, #0]
 80057fe:	b09d      	sub	sp, #116	; 0x74
 8005800:	da08      	bge.n	8005814 <sniprintf+0x20>
 8005802:	238b      	movs	r3, #139	; 0x8b
 8005804:	f04f 30ff 	mov.w	r0, #4294967295
 8005808:	602b      	str	r3, [r5, #0]
 800580a:	b01d      	add	sp, #116	; 0x74
 800580c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005810:	b002      	add	sp, #8
 8005812:	4770      	bx	lr
 8005814:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005818:	f8ad 3014 	strh.w	r3, [sp, #20]
 800581c:	bf0c      	ite	eq
 800581e:	4623      	moveq	r3, r4
 8005820:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005824:	9304      	str	r3, [sp, #16]
 8005826:	9307      	str	r3, [sp, #28]
 8005828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800582c:	9002      	str	r0, [sp, #8]
 800582e:	9006      	str	r0, [sp, #24]
 8005830:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005834:	4628      	mov	r0, r5
 8005836:	ab21      	add	r3, sp, #132	; 0x84
 8005838:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800583a:	a902      	add	r1, sp, #8
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	f002 fc0f 	bl	8008060 <_svfiprintf_r>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	bfbc      	itt	lt
 8005846:	238b      	movlt	r3, #139	; 0x8b
 8005848:	602b      	strlt	r3, [r5, #0]
 800584a:	2c00      	cmp	r4, #0
 800584c:	d0dd      	beq.n	800580a <sniprintf+0x16>
 800584e:	2200      	movs	r2, #0
 8005850:	9b02      	ldr	r3, [sp, #8]
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	e7d9      	b.n	800580a <sniprintf+0x16>
 8005856:	bf00      	nop
 8005858:	20000080 	.word	0x20000080

0800585c <siprintf>:
 800585c:	b40e      	push	{r1, r2, r3}
 800585e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005862:	b500      	push	{lr}
 8005864:	b09c      	sub	sp, #112	; 0x70
 8005866:	ab1d      	add	r3, sp, #116	; 0x74
 8005868:	9002      	str	r0, [sp, #8]
 800586a:	9006      	str	r0, [sp, #24]
 800586c:	9107      	str	r1, [sp, #28]
 800586e:	9104      	str	r1, [sp, #16]
 8005870:	4808      	ldr	r0, [pc, #32]	; (8005894 <siprintf+0x38>)
 8005872:	4909      	ldr	r1, [pc, #36]	; (8005898 <siprintf+0x3c>)
 8005874:	f853 2b04 	ldr.w	r2, [r3], #4
 8005878:	9105      	str	r1, [sp, #20]
 800587a:	6800      	ldr	r0, [r0, #0]
 800587c:	a902      	add	r1, sp, #8
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	f002 fbee 	bl	8008060 <_svfiprintf_r>
 8005884:	2200      	movs	r2, #0
 8005886:	9b02      	ldr	r3, [sp, #8]
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	b01c      	add	sp, #112	; 0x70
 800588c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005890:	b003      	add	sp, #12
 8005892:	4770      	bx	lr
 8005894:	20000080 	.word	0x20000080
 8005898:	ffff0208 	.word	0xffff0208

0800589c <__sread>:
 800589c:	b510      	push	{r4, lr}
 800589e:	460c      	mov	r4, r1
 80058a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a4:	f000 f86c 	bl	8005980 <_read_r>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	bfab      	itete	ge
 80058ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058ae:	89a3      	ldrhlt	r3, [r4, #12]
 80058b0:	181b      	addge	r3, r3, r0
 80058b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058b6:	bfac      	ite	ge
 80058b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80058ba:	81a3      	strhlt	r3, [r4, #12]
 80058bc:	bd10      	pop	{r4, pc}

080058be <__swrite>:
 80058be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c2:	461f      	mov	r7, r3
 80058c4:	898b      	ldrh	r3, [r1, #12]
 80058c6:	4605      	mov	r5, r0
 80058c8:	05db      	lsls	r3, r3, #23
 80058ca:	460c      	mov	r4, r1
 80058cc:	4616      	mov	r6, r2
 80058ce:	d505      	bpl.n	80058dc <__swrite+0x1e>
 80058d0:	2302      	movs	r3, #2
 80058d2:	2200      	movs	r2, #0
 80058d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d8:	f000 f840 	bl	800595c <_lseek_r>
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	4632      	mov	r2, r6
 80058e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058e4:	81a3      	strh	r3, [r4, #12]
 80058e6:	4628      	mov	r0, r5
 80058e8:	463b      	mov	r3, r7
 80058ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058f2:	f000 b857 	b.w	80059a4 <_write_r>

080058f6 <__sseek>:
 80058f6:	b510      	push	{r4, lr}
 80058f8:	460c      	mov	r4, r1
 80058fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fe:	f000 f82d 	bl	800595c <_lseek_r>
 8005902:	1c43      	adds	r3, r0, #1
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	bf15      	itete	ne
 8005908:	6560      	strne	r0, [r4, #84]	; 0x54
 800590a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800590e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005912:	81a3      	strheq	r3, [r4, #12]
 8005914:	bf18      	it	ne
 8005916:	81a3      	strhne	r3, [r4, #12]
 8005918:	bd10      	pop	{r4, pc}

0800591a <__sclose>:
 800591a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800591e:	f000 b80d 	b.w	800593c <_close_r>

08005922 <memset>:
 8005922:	4603      	mov	r3, r0
 8005924:	4402      	add	r2, r0
 8005926:	4293      	cmp	r3, r2
 8005928:	d100      	bne.n	800592c <memset+0xa>
 800592a:	4770      	bx	lr
 800592c:	f803 1b01 	strb.w	r1, [r3], #1
 8005930:	e7f9      	b.n	8005926 <memset+0x4>
	...

08005934 <_localeconv_r>:
 8005934:	4800      	ldr	r0, [pc, #0]	; (8005938 <_localeconv_r+0x4>)
 8005936:	4770      	bx	lr
 8005938:	20000174 	.word	0x20000174

0800593c <_close_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	2300      	movs	r3, #0
 8005940:	4d05      	ldr	r5, [pc, #20]	; (8005958 <_close_r+0x1c>)
 8005942:	4604      	mov	r4, r0
 8005944:	4608      	mov	r0, r1
 8005946:	602b      	str	r3, [r5, #0]
 8005948:	f7fe ff84 	bl	8004854 <_close>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_close_r+0x1a>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b103      	cbz	r3, 8005956 <_close_r+0x1a>
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	20000bc4 	.word	0x20000bc4

0800595c <_lseek_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4604      	mov	r4, r0
 8005960:	4608      	mov	r0, r1
 8005962:	4611      	mov	r1, r2
 8005964:	2200      	movs	r2, #0
 8005966:	4d05      	ldr	r5, [pc, #20]	; (800597c <_lseek_r+0x20>)
 8005968:	602a      	str	r2, [r5, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	f7fe ff96 	bl	800489c <_lseek>
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d102      	bne.n	800597a <_lseek_r+0x1e>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	b103      	cbz	r3, 800597a <_lseek_r+0x1e>
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	bd38      	pop	{r3, r4, r5, pc}
 800597c:	20000bc4 	.word	0x20000bc4

08005980 <_read_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4604      	mov	r4, r0
 8005984:	4608      	mov	r0, r1
 8005986:	4611      	mov	r1, r2
 8005988:	2200      	movs	r2, #0
 800598a:	4d05      	ldr	r5, [pc, #20]	; (80059a0 <_read_r+0x20>)
 800598c:	602a      	str	r2, [r5, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	f7fe ff43 	bl	800481a <_read>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_read_r+0x1e>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_read_r+0x1e>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	20000bc4 	.word	0x20000bc4

080059a4 <_write_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4604      	mov	r4, r0
 80059a8:	4608      	mov	r0, r1
 80059aa:	4611      	mov	r1, r2
 80059ac:	2200      	movs	r2, #0
 80059ae:	4d05      	ldr	r5, [pc, #20]	; (80059c4 <_write_r+0x20>)
 80059b0:	602a      	str	r2, [r5, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f7fe f9f2 	bl	8003d9c <_write>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_write_r+0x1e>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_write_r+0x1e>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	20000bc4 	.word	0x20000bc4

080059c8 <__errno>:
 80059c8:	4b01      	ldr	r3, [pc, #4]	; (80059d0 <__errno+0x8>)
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	20000080 	.word	0x20000080

080059d4 <__libc_init_array>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	2600      	movs	r6, #0
 80059d8:	4d0c      	ldr	r5, [pc, #48]	; (8005a0c <__libc_init_array+0x38>)
 80059da:	4c0d      	ldr	r4, [pc, #52]	; (8005a10 <__libc_init_array+0x3c>)
 80059dc:	1b64      	subs	r4, r4, r5
 80059de:	10a4      	asrs	r4, r4, #2
 80059e0:	42a6      	cmp	r6, r4
 80059e2:	d109      	bne.n	80059f8 <__libc_init_array+0x24>
 80059e4:	f004 fb6e 	bl	800a0c4 <_init>
 80059e8:	2600      	movs	r6, #0
 80059ea:	4d0a      	ldr	r5, [pc, #40]	; (8005a14 <__libc_init_array+0x40>)
 80059ec:	4c0a      	ldr	r4, [pc, #40]	; (8005a18 <__libc_init_array+0x44>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	42a6      	cmp	r6, r4
 80059f4:	d105      	bne.n	8005a02 <__libc_init_array+0x2e>
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fc:	4798      	blx	r3
 80059fe:	3601      	adds	r6, #1
 8005a00:	e7ee      	b.n	80059e0 <__libc_init_array+0xc>
 8005a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a06:	4798      	blx	r3
 8005a08:	3601      	adds	r6, #1
 8005a0a:	e7f2      	b.n	80059f2 <__libc_init_array+0x1e>
 8005a0c:	0800bd50 	.word	0x0800bd50
 8005a10:	0800bd50 	.word	0x0800bd50
 8005a14:	0800bd50 	.word	0x0800bd50
 8005a18:	0800bd54 	.word	0x0800bd54

08005a1c <__retarget_lock_init_recursive>:
 8005a1c:	4770      	bx	lr

08005a1e <__retarget_lock_acquire_recursive>:
 8005a1e:	4770      	bx	lr

08005a20 <__retarget_lock_release_recursive>:
 8005a20:	4770      	bx	lr

08005a22 <memchr>:
 8005a22:	4603      	mov	r3, r0
 8005a24:	b510      	push	{r4, lr}
 8005a26:	b2c9      	uxtb	r1, r1
 8005a28:	4402      	add	r2, r0
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	d101      	bne.n	8005a34 <memchr+0x12>
 8005a30:	2000      	movs	r0, #0
 8005a32:	e003      	b.n	8005a3c <memchr+0x1a>
 8005a34:	7804      	ldrb	r4, [r0, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	428c      	cmp	r4, r1
 8005a3a:	d1f6      	bne.n	8005a2a <memchr+0x8>
 8005a3c:	bd10      	pop	{r4, pc}

08005a3e <memcpy>:
 8005a3e:	440a      	add	r2, r1
 8005a40:	4291      	cmp	r1, r2
 8005a42:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a46:	d100      	bne.n	8005a4a <memcpy+0xc>
 8005a48:	4770      	bx	lr
 8005a4a:	b510      	push	{r4, lr}
 8005a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a50:	4291      	cmp	r1, r2
 8005a52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a56:	d1f9      	bne.n	8005a4c <memcpy+0xe>
 8005a58:	bd10      	pop	{r4, pc}
	...

08005a5c <nanf>:
 8005a5c:	4800      	ldr	r0, [pc, #0]	; (8005a60 <nanf+0x4>)
 8005a5e:	4770      	bx	lr
 8005a60:	7fc00000 	.word	0x7fc00000

08005a64 <quorem>:
 8005a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a68:	6903      	ldr	r3, [r0, #16]
 8005a6a:	690c      	ldr	r4, [r1, #16]
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	42a3      	cmp	r3, r4
 8005a70:	db7f      	blt.n	8005b72 <quorem+0x10e>
 8005a72:	3c01      	subs	r4, #1
 8005a74:	f100 0514 	add.w	r5, r0, #20
 8005a78:	f101 0814 	add.w	r8, r1, #20
 8005a7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a92:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a9a:	d331      	bcc.n	8005b00 <quorem+0x9c>
 8005a9c:	f04f 0e00 	mov.w	lr, #0
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	46ac      	mov	ip, r5
 8005aa4:	46f2      	mov	sl, lr
 8005aa6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005aaa:	b293      	uxth	r3, r2
 8005aac:	fb06 e303 	mla	r3, r6, r3, lr
 8005ab0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ab4:	0c1a      	lsrs	r2, r3, #16
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	fb06 220e 	mla	r2, r6, lr, r2
 8005abc:	ebaa 0303 	sub.w	r3, sl, r3
 8005ac0:	f8dc a000 	ldr.w	sl, [ip]
 8005ac4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ac8:	fa1f fa8a 	uxth.w	sl, sl
 8005acc:	4453      	add	r3, sl
 8005ace:	f8dc a000 	ldr.w	sl, [ip]
 8005ad2:	b292      	uxth	r2, r2
 8005ad4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ae2:	4581      	cmp	r9, r0
 8005ae4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ae8:	f84c 3b04 	str.w	r3, [ip], #4
 8005aec:	d2db      	bcs.n	8005aa6 <quorem+0x42>
 8005aee:	f855 300b 	ldr.w	r3, [r5, fp]
 8005af2:	b92b      	cbnz	r3, 8005b00 <quorem+0x9c>
 8005af4:	9b01      	ldr	r3, [sp, #4]
 8005af6:	3b04      	subs	r3, #4
 8005af8:	429d      	cmp	r5, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	d32d      	bcc.n	8005b5a <quorem+0xf6>
 8005afe:	613c      	str	r4, [r7, #16]
 8005b00:	4638      	mov	r0, r7
 8005b02:	f001 f9dd 	bl	8006ec0 <__mcmp>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	db23      	blt.n	8005b52 <quorem+0xee>
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	3601      	adds	r6, #1
 8005b10:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b14:	f8d1 c000 	ldr.w	ip, [r1]
 8005b18:	b293      	uxth	r3, r2
 8005b1a:	1ac3      	subs	r3, r0, r3
 8005b1c:	0c12      	lsrs	r2, r2, #16
 8005b1e:	fa1f f08c 	uxth.w	r0, ip
 8005b22:	4403      	add	r3, r0
 8005b24:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005b28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b32:	45c1      	cmp	r9, r8
 8005b34:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b38:	f841 3b04 	str.w	r3, [r1], #4
 8005b3c:	d2e8      	bcs.n	8005b10 <quorem+0xac>
 8005b3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b46:	b922      	cbnz	r2, 8005b52 <quorem+0xee>
 8005b48:	3b04      	subs	r3, #4
 8005b4a:	429d      	cmp	r5, r3
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	d30a      	bcc.n	8005b66 <quorem+0x102>
 8005b50:	613c      	str	r4, [r7, #16]
 8005b52:	4630      	mov	r0, r6
 8005b54:	b003      	add	sp, #12
 8005b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	3b04      	subs	r3, #4
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	d1cd      	bne.n	8005afe <quorem+0x9a>
 8005b62:	3c01      	subs	r4, #1
 8005b64:	e7c8      	b.n	8005af8 <quorem+0x94>
 8005b66:	6812      	ldr	r2, [r2, #0]
 8005b68:	3b04      	subs	r3, #4
 8005b6a:	2a00      	cmp	r2, #0
 8005b6c:	d1f0      	bne.n	8005b50 <quorem+0xec>
 8005b6e:	3c01      	subs	r4, #1
 8005b70:	e7eb      	b.n	8005b4a <quorem+0xe6>
 8005b72:	2000      	movs	r0, #0
 8005b74:	e7ee      	b.n	8005b54 <quorem+0xf0>
	...

08005b78 <_dtoa_r>:
 8005b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	4616      	mov	r6, r2
 8005b7e:	461f      	mov	r7, r3
 8005b80:	69c4      	ldr	r4, [r0, #28]
 8005b82:	b099      	sub	sp, #100	; 0x64
 8005b84:	4605      	mov	r5, r0
 8005b86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005b8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005b8e:	b974      	cbnz	r4, 8005bae <_dtoa_r+0x36>
 8005b90:	2010      	movs	r0, #16
 8005b92:	f000 fe1d 	bl	80067d0 <malloc>
 8005b96:	4602      	mov	r2, r0
 8005b98:	61e8      	str	r0, [r5, #28]
 8005b9a:	b920      	cbnz	r0, 8005ba6 <_dtoa_r+0x2e>
 8005b9c:	21ef      	movs	r1, #239	; 0xef
 8005b9e:	4bac      	ldr	r3, [pc, #688]	; (8005e50 <_dtoa_r+0x2d8>)
 8005ba0:	48ac      	ldr	r0, [pc, #688]	; (8005e54 <_dtoa_r+0x2dc>)
 8005ba2:	f002 fe1f 	bl	80087e4 <__assert_func>
 8005ba6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005baa:	6004      	str	r4, [r0, #0]
 8005bac:	60c4      	str	r4, [r0, #12]
 8005bae:	69eb      	ldr	r3, [r5, #28]
 8005bb0:	6819      	ldr	r1, [r3, #0]
 8005bb2:	b151      	cbz	r1, 8005bca <_dtoa_r+0x52>
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	4093      	lsls	r3, r2
 8005bba:	604a      	str	r2, [r1, #4]
 8005bbc:	608b      	str	r3, [r1, #8]
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f000 fefa 	bl	80069b8 <_Bfree>
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	69eb      	ldr	r3, [r5, #28]
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	1e3b      	subs	r3, r7, #0
 8005bcc:	bfaf      	iteee	ge
 8005bce:	2300      	movge	r3, #0
 8005bd0:	2201      	movlt	r2, #1
 8005bd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005bd6:	9305      	strlt	r3, [sp, #20]
 8005bd8:	bfa8      	it	ge
 8005bda:	f8c8 3000 	strge.w	r3, [r8]
 8005bde:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005be2:	4b9d      	ldr	r3, [pc, #628]	; (8005e58 <_dtoa_r+0x2e0>)
 8005be4:	bfb8      	it	lt
 8005be6:	f8c8 2000 	strlt.w	r2, [r8]
 8005bea:	ea33 0309 	bics.w	r3, r3, r9
 8005bee:	d119      	bne.n	8005c24 <_dtoa_r+0xac>
 8005bf0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005bf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bfc:	4333      	orrs	r3, r6
 8005bfe:	f000 8589 	beq.w	8006714 <_dtoa_r+0xb9c>
 8005c02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c04:	b953      	cbnz	r3, 8005c1c <_dtoa_r+0xa4>
 8005c06:	4b95      	ldr	r3, [pc, #596]	; (8005e5c <_dtoa_r+0x2e4>)
 8005c08:	e023      	b.n	8005c52 <_dtoa_r+0xda>
 8005c0a:	4b95      	ldr	r3, [pc, #596]	; (8005e60 <_dtoa_r+0x2e8>)
 8005c0c:	9303      	str	r3, [sp, #12]
 8005c0e:	3308      	adds	r3, #8
 8005c10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	9803      	ldr	r0, [sp, #12]
 8005c16:	b019      	add	sp, #100	; 0x64
 8005c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1c:	4b8f      	ldr	r3, [pc, #572]	; (8005e5c <_dtoa_r+0x2e4>)
 8005c1e:	9303      	str	r3, [sp, #12]
 8005c20:	3303      	adds	r3, #3
 8005c22:	e7f5      	b.n	8005c10 <_dtoa_r+0x98>
 8005c24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005c2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c30:	2200      	movs	r2, #0
 8005c32:	2300      	movs	r3, #0
 8005c34:	f7fa fec8 	bl	80009c8 <__aeabi_dcmpeq>
 8005c38:	4680      	mov	r8, r0
 8005c3a:	b160      	cbz	r0, 8005c56 <_dtoa_r+0xde>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 8562 	beq.w	800670e <_dtoa_r+0xb96>
 8005c4a:	4b86      	ldr	r3, [pc, #536]	; (8005e64 <_dtoa_r+0x2ec>)
 8005c4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	9303      	str	r3, [sp, #12]
 8005c54:	e7de      	b.n	8005c14 <_dtoa_r+0x9c>
 8005c56:	ab16      	add	r3, sp, #88	; 0x58
 8005c58:	9301      	str	r3, [sp, #4]
 8005c5a:	ab17      	add	r3, sp, #92	; 0x5c
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	4628      	mov	r0, r5
 8005c60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c64:	f001 fa3c 	bl	80070e0 <__d2b>
 8005c68:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005c6c:	4682      	mov	sl, r0
 8005c6e:	2c00      	cmp	r4, #0
 8005c70:	d07e      	beq.n	8005d70 <_dtoa_r+0x1f8>
 8005c72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c78:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c80:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005c84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005c88:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	2200      	movs	r2, #0
 8005c90:	4b75      	ldr	r3, [pc, #468]	; (8005e68 <_dtoa_r+0x2f0>)
 8005c92:	f7fa fa79 	bl	8000188 <__aeabi_dsub>
 8005c96:	a368      	add	r3, pc, #416	; (adr r3, 8005e38 <_dtoa_r+0x2c0>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f7fa fc2c 	bl	80004f8 <__aeabi_dmul>
 8005ca0:	a367      	add	r3, pc, #412	; (adr r3, 8005e40 <_dtoa_r+0x2c8>)
 8005ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca6:	f7fa fa71 	bl	800018c <__adddf3>
 8005caa:	4606      	mov	r6, r0
 8005cac:	4620      	mov	r0, r4
 8005cae:	460f      	mov	r7, r1
 8005cb0:	f7fa fbb8 	bl	8000424 <__aeabi_i2d>
 8005cb4:	a364      	add	r3, pc, #400	; (adr r3, 8005e48 <_dtoa_r+0x2d0>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f7fa fc1d 	bl	80004f8 <__aeabi_dmul>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	4639      	mov	r1, r7
 8005cc6:	f7fa fa61 	bl	800018c <__adddf3>
 8005cca:	4606      	mov	r6, r0
 8005ccc:	460f      	mov	r7, r1
 8005cce:	f7fa fec3 	bl	8000a58 <__aeabi_d2iz>
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4683      	mov	fp, r0
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	4630      	mov	r0, r6
 8005cda:	4639      	mov	r1, r7
 8005cdc:	f7fa fe7e 	bl	80009dc <__aeabi_dcmplt>
 8005ce0:	b148      	cbz	r0, 8005cf6 <_dtoa_r+0x17e>
 8005ce2:	4658      	mov	r0, fp
 8005ce4:	f7fa fb9e 	bl	8000424 <__aeabi_i2d>
 8005ce8:	4632      	mov	r2, r6
 8005cea:	463b      	mov	r3, r7
 8005cec:	f7fa fe6c 	bl	80009c8 <__aeabi_dcmpeq>
 8005cf0:	b908      	cbnz	r0, 8005cf6 <_dtoa_r+0x17e>
 8005cf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cf6:	f1bb 0f16 	cmp.w	fp, #22
 8005cfa:	d857      	bhi.n	8005dac <_dtoa_r+0x234>
 8005cfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d00:	4b5a      	ldr	r3, [pc, #360]	; (8005e6c <_dtoa_r+0x2f4>)
 8005d02:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	f7fa fe67 	bl	80009dc <__aeabi_dcmplt>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d04e      	beq.n	8005db0 <_dtoa_r+0x238>
 8005d12:	2300      	movs	r3, #0
 8005d14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d18:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d1c:	1b1b      	subs	r3, r3, r4
 8005d1e:	1e5a      	subs	r2, r3, #1
 8005d20:	bf46      	itte	mi
 8005d22:	f1c3 0901 	rsbmi	r9, r3, #1
 8005d26:	2300      	movmi	r3, #0
 8005d28:	f04f 0900 	movpl.w	r9, #0
 8005d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d2e:	bf48      	it	mi
 8005d30:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005d32:	f1bb 0f00 	cmp.w	fp, #0
 8005d36:	db3d      	blt.n	8005db4 <_dtoa_r+0x23c>
 8005d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005d3e:	445b      	add	r3, fp
 8005d40:	9309      	str	r3, [sp, #36]	; 0x24
 8005d42:	2300      	movs	r3, #0
 8005d44:	930a      	str	r3, [sp, #40]	; 0x28
 8005d46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d48:	2b09      	cmp	r3, #9
 8005d4a:	d867      	bhi.n	8005e1c <_dtoa_r+0x2a4>
 8005d4c:	2b05      	cmp	r3, #5
 8005d4e:	bfc4      	itt	gt
 8005d50:	3b04      	subgt	r3, #4
 8005d52:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005d54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d56:	bfc8      	it	gt
 8005d58:	2400      	movgt	r4, #0
 8005d5a:	f1a3 0302 	sub.w	r3, r3, #2
 8005d5e:	bfd8      	it	le
 8005d60:	2401      	movle	r4, #1
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	f200 8086 	bhi.w	8005e74 <_dtoa_r+0x2fc>
 8005d68:	e8df f003 	tbb	[pc, r3]
 8005d6c:	5637392c 	.word	0x5637392c
 8005d70:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005d74:	441c      	add	r4, r3
 8005d76:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	bfc1      	itttt	gt
 8005d7e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d82:	fa09 f903 	lslgt.w	r9, r9, r3
 8005d86:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005d8a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005d8e:	bfd6      	itet	le
 8005d90:	f1c3 0320 	rsble	r3, r3, #32
 8005d94:	ea49 0003 	orrgt.w	r0, r9, r3
 8005d98:	fa06 f003 	lslle.w	r0, r6, r3
 8005d9c:	f7fa fb32 	bl	8000404 <__aeabi_ui2d>
 8005da0:	2201      	movs	r2, #1
 8005da2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005da6:	3c01      	subs	r4, #1
 8005da8:	9213      	str	r2, [sp, #76]	; 0x4c
 8005daa:	e76f      	b.n	8005c8c <_dtoa_r+0x114>
 8005dac:	2301      	movs	r3, #1
 8005dae:	e7b3      	b.n	8005d18 <_dtoa_r+0x1a0>
 8005db0:	900f      	str	r0, [sp, #60]	; 0x3c
 8005db2:	e7b2      	b.n	8005d1a <_dtoa_r+0x1a2>
 8005db4:	f1cb 0300 	rsb	r3, fp, #0
 8005db8:	930a      	str	r3, [sp, #40]	; 0x28
 8005dba:	2300      	movs	r3, #0
 8005dbc:	eba9 090b 	sub.w	r9, r9, fp
 8005dc0:	930e      	str	r3, [sp, #56]	; 0x38
 8005dc2:	e7c0      	b.n	8005d46 <_dtoa_r+0x1ce>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	dc55      	bgt.n	8005e7a <_dtoa_r+0x302>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	9306      	str	r3, [sp, #24]
 8005dd4:	9308      	str	r3, [sp, #32]
 8005dd6:	9223      	str	r2, [sp, #140]	; 0x8c
 8005dd8:	e00b      	b.n	8005df2 <_dtoa_r+0x27a>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e7f3      	b.n	8005dc6 <_dtoa_r+0x24e>
 8005dde:	2300      	movs	r3, #0
 8005de0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005de2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005de4:	445b      	add	r3, fp
 8005de6:	9306      	str	r3, [sp, #24]
 8005de8:	3301      	adds	r3, #1
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	9308      	str	r3, [sp, #32]
 8005dee:	bfb8      	it	lt
 8005df0:	2301      	movlt	r3, #1
 8005df2:	2100      	movs	r1, #0
 8005df4:	2204      	movs	r2, #4
 8005df6:	69e8      	ldr	r0, [r5, #28]
 8005df8:	f102 0614 	add.w	r6, r2, #20
 8005dfc:	429e      	cmp	r6, r3
 8005dfe:	d940      	bls.n	8005e82 <_dtoa_r+0x30a>
 8005e00:	6041      	str	r1, [r0, #4]
 8005e02:	4628      	mov	r0, r5
 8005e04:	f000 fd98 	bl	8006938 <_Balloc>
 8005e08:	9003      	str	r0, [sp, #12]
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d13c      	bne.n	8005e88 <_dtoa_r+0x310>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	f240 11af 	movw	r1, #431	; 0x1af
 8005e14:	4b16      	ldr	r3, [pc, #88]	; (8005e70 <_dtoa_r+0x2f8>)
 8005e16:	e6c3      	b.n	8005ba0 <_dtoa_r+0x28>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e7e1      	b.n	8005de0 <_dtoa_r+0x268>
 8005e1c:	2401      	movs	r4, #1
 8005e1e:	2300      	movs	r3, #0
 8005e20:	940b      	str	r4, [sp, #44]	; 0x2c
 8005e22:	9322      	str	r3, [sp, #136]	; 0x88
 8005e24:	f04f 33ff 	mov.w	r3, #4294967295
 8005e28:	2200      	movs	r2, #0
 8005e2a:	9306      	str	r3, [sp, #24]
 8005e2c:	9308      	str	r3, [sp, #32]
 8005e2e:	2312      	movs	r3, #18
 8005e30:	e7d1      	b.n	8005dd6 <_dtoa_r+0x25e>
 8005e32:	bf00      	nop
 8005e34:	f3af 8000 	nop.w
 8005e38:	636f4361 	.word	0x636f4361
 8005e3c:	3fd287a7 	.word	0x3fd287a7
 8005e40:	8b60c8b3 	.word	0x8b60c8b3
 8005e44:	3fc68a28 	.word	0x3fc68a28
 8005e48:	509f79fb 	.word	0x509f79fb
 8005e4c:	3fd34413 	.word	0x3fd34413
 8005e50:	0800b93a 	.word	0x0800b93a
 8005e54:	0800b951 	.word	0x0800b951
 8005e58:	7ff00000 	.word	0x7ff00000
 8005e5c:	0800b936 	.word	0x0800b936
 8005e60:	0800b92d 	.word	0x0800b92d
 8005e64:	0800b905 	.word	0x0800b905
 8005e68:	3ff80000 	.word	0x3ff80000
 8005e6c:	0800ba40 	.word	0x0800ba40
 8005e70:	0800b9a9 	.word	0x0800b9a9
 8005e74:	2301      	movs	r3, #1
 8005e76:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e78:	e7d4      	b.n	8005e24 <_dtoa_r+0x2ac>
 8005e7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e7c:	9306      	str	r3, [sp, #24]
 8005e7e:	9308      	str	r3, [sp, #32]
 8005e80:	e7b7      	b.n	8005df2 <_dtoa_r+0x27a>
 8005e82:	3101      	adds	r1, #1
 8005e84:	0052      	lsls	r2, r2, #1
 8005e86:	e7b7      	b.n	8005df8 <_dtoa_r+0x280>
 8005e88:	69eb      	ldr	r3, [r5, #28]
 8005e8a:	9a03      	ldr	r2, [sp, #12]
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	9b08      	ldr	r3, [sp, #32]
 8005e90:	2b0e      	cmp	r3, #14
 8005e92:	f200 80a8 	bhi.w	8005fe6 <_dtoa_r+0x46e>
 8005e96:	2c00      	cmp	r4, #0
 8005e98:	f000 80a5 	beq.w	8005fe6 <_dtoa_r+0x46e>
 8005e9c:	f1bb 0f00 	cmp.w	fp, #0
 8005ea0:	dd34      	ble.n	8005f0c <_dtoa_r+0x394>
 8005ea2:	4b9a      	ldr	r3, [pc, #616]	; (800610c <_dtoa_r+0x594>)
 8005ea4:	f00b 020f 	and.w	r2, fp, #15
 8005ea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005eb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005eb4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005eb8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005ebc:	d016      	beq.n	8005eec <_dtoa_r+0x374>
 8005ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ec2:	4b93      	ldr	r3, [pc, #588]	; (8006110 <_dtoa_r+0x598>)
 8005ec4:	2703      	movs	r7, #3
 8005ec6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005eca:	f7fa fc3f 	bl	800074c <__aeabi_ddiv>
 8005ece:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ed2:	f004 040f 	and.w	r4, r4, #15
 8005ed6:	4e8e      	ldr	r6, [pc, #568]	; (8006110 <_dtoa_r+0x598>)
 8005ed8:	b954      	cbnz	r4, 8005ef0 <_dtoa_r+0x378>
 8005eda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ede:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ee2:	f7fa fc33 	bl	800074c <__aeabi_ddiv>
 8005ee6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005eea:	e029      	b.n	8005f40 <_dtoa_r+0x3c8>
 8005eec:	2702      	movs	r7, #2
 8005eee:	e7f2      	b.n	8005ed6 <_dtoa_r+0x35e>
 8005ef0:	07e1      	lsls	r1, r4, #31
 8005ef2:	d508      	bpl.n	8005f06 <_dtoa_r+0x38e>
 8005ef4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ef8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005efc:	f7fa fafc 	bl	80004f8 <__aeabi_dmul>
 8005f00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f04:	3701      	adds	r7, #1
 8005f06:	1064      	asrs	r4, r4, #1
 8005f08:	3608      	adds	r6, #8
 8005f0a:	e7e5      	b.n	8005ed8 <_dtoa_r+0x360>
 8005f0c:	f000 80a5 	beq.w	800605a <_dtoa_r+0x4e2>
 8005f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f14:	f1cb 0400 	rsb	r4, fp, #0
 8005f18:	4b7c      	ldr	r3, [pc, #496]	; (800610c <_dtoa_r+0x594>)
 8005f1a:	f004 020f 	and.w	r2, r4, #15
 8005f1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	f7fa fae7 	bl	80004f8 <__aeabi_dmul>
 8005f2a:	2702      	movs	r7, #2
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f32:	4e77      	ldr	r6, [pc, #476]	; (8006110 <_dtoa_r+0x598>)
 8005f34:	1124      	asrs	r4, r4, #4
 8005f36:	2c00      	cmp	r4, #0
 8005f38:	f040 8084 	bne.w	8006044 <_dtoa_r+0x4cc>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1d2      	bne.n	8005ee6 <_dtoa_r+0x36e>
 8005f40:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005f44:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005f48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 8087 	beq.w	800605e <_dtoa_r+0x4e6>
 8005f50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f54:	2200      	movs	r2, #0
 8005f56:	4b6f      	ldr	r3, [pc, #444]	; (8006114 <_dtoa_r+0x59c>)
 8005f58:	f7fa fd40 	bl	80009dc <__aeabi_dcmplt>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d07e      	beq.n	800605e <_dtoa_r+0x4e6>
 8005f60:	9b08      	ldr	r3, [sp, #32]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d07b      	beq.n	800605e <_dtoa_r+0x4e6>
 8005f66:	9b06      	ldr	r3, [sp, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	dd38      	ble.n	8005fde <_dtoa_r+0x466>
 8005f6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f70:	2200      	movs	r2, #0
 8005f72:	4b69      	ldr	r3, [pc, #420]	; (8006118 <_dtoa_r+0x5a0>)
 8005f74:	f7fa fac0 	bl	80004f8 <__aeabi_dmul>
 8005f78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f7c:	9c06      	ldr	r4, [sp, #24]
 8005f7e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005f82:	3701      	adds	r7, #1
 8005f84:	4638      	mov	r0, r7
 8005f86:	f7fa fa4d 	bl	8000424 <__aeabi_i2d>
 8005f8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f8e:	f7fa fab3 	bl	80004f8 <__aeabi_dmul>
 8005f92:	2200      	movs	r2, #0
 8005f94:	4b61      	ldr	r3, [pc, #388]	; (800611c <_dtoa_r+0x5a4>)
 8005f96:	f7fa f8f9 	bl	800018c <__adddf3>
 8005f9a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005f9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fa2:	9611      	str	r6, [sp, #68]	; 0x44
 8005fa4:	2c00      	cmp	r4, #0
 8005fa6:	d15d      	bne.n	8006064 <_dtoa_r+0x4ec>
 8005fa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fac:	2200      	movs	r2, #0
 8005fae:	4b5c      	ldr	r3, [pc, #368]	; (8006120 <_dtoa_r+0x5a8>)
 8005fb0:	f7fa f8ea 	bl	8000188 <__aeabi_dsub>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fbc:	4633      	mov	r3, r6
 8005fbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fc0:	f7fa fd2a 	bl	8000a18 <__aeabi_dcmpgt>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	f040 8295 	bne.w	80064f4 <_dtoa_r+0x97c>
 8005fca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fd0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005fd4:	f7fa fd02 	bl	80009dc <__aeabi_dcmplt>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	f040 8289 	bne.w	80064f0 <_dtoa_r+0x978>
 8005fde:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005fe2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005fe6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f2c0 8151 	blt.w	8006290 <_dtoa_r+0x718>
 8005fee:	f1bb 0f0e 	cmp.w	fp, #14
 8005ff2:	f300 814d 	bgt.w	8006290 <_dtoa_r+0x718>
 8005ff6:	4b45      	ldr	r3, [pc, #276]	; (800610c <_dtoa_r+0x594>)
 8005ff8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ffc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006000:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006004:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006006:	2b00      	cmp	r3, #0
 8006008:	f280 80da 	bge.w	80061c0 <_dtoa_r+0x648>
 800600c:	9b08      	ldr	r3, [sp, #32]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f300 80d6 	bgt.w	80061c0 <_dtoa_r+0x648>
 8006014:	f040 826b 	bne.w	80064ee <_dtoa_r+0x976>
 8006018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800601c:	2200      	movs	r2, #0
 800601e:	4b40      	ldr	r3, [pc, #256]	; (8006120 <_dtoa_r+0x5a8>)
 8006020:	f7fa fa6a 	bl	80004f8 <__aeabi_dmul>
 8006024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006028:	f7fa fcec 	bl	8000a04 <__aeabi_dcmpge>
 800602c:	9c08      	ldr	r4, [sp, #32]
 800602e:	4626      	mov	r6, r4
 8006030:	2800      	cmp	r0, #0
 8006032:	f040 8241 	bne.w	80064b8 <_dtoa_r+0x940>
 8006036:	2331      	movs	r3, #49	; 0x31
 8006038:	9f03      	ldr	r7, [sp, #12]
 800603a:	f10b 0b01 	add.w	fp, fp, #1
 800603e:	f807 3b01 	strb.w	r3, [r7], #1
 8006042:	e23d      	b.n	80064c0 <_dtoa_r+0x948>
 8006044:	07e2      	lsls	r2, r4, #31
 8006046:	d505      	bpl.n	8006054 <_dtoa_r+0x4dc>
 8006048:	e9d6 2300 	ldrd	r2, r3, [r6]
 800604c:	f7fa fa54 	bl	80004f8 <__aeabi_dmul>
 8006050:	2301      	movs	r3, #1
 8006052:	3701      	adds	r7, #1
 8006054:	1064      	asrs	r4, r4, #1
 8006056:	3608      	adds	r6, #8
 8006058:	e76d      	b.n	8005f36 <_dtoa_r+0x3be>
 800605a:	2702      	movs	r7, #2
 800605c:	e770      	b.n	8005f40 <_dtoa_r+0x3c8>
 800605e:	46d8      	mov	r8, fp
 8006060:	9c08      	ldr	r4, [sp, #32]
 8006062:	e78f      	b.n	8005f84 <_dtoa_r+0x40c>
 8006064:	9903      	ldr	r1, [sp, #12]
 8006066:	4b29      	ldr	r3, [pc, #164]	; (800610c <_dtoa_r+0x594>)
 8006068:	4421      	add	r1, r4
 800606a:	9112      	str	r1, [sp, #72]	; 0x48
 800606c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800606e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006072:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006076:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800607a:	2900      	cmp	r1, #0
 800607c:	d054      	beq.n	8006128 <_dtoa_r+0x5b0>
 800607e:	2000      	movs	r0, #0
 8006080:	4928      	ldr	r1, [pc, #160]	; (8006124 <_dtoa_r+0x5ac>)
 8006082:	f7fa fb63 	bl	800074c <__aeabi_ddiv>
 8006086:	463b      	mov	r3, r7
 8006088:	4632      	mov	r2, r6
 800608a:	f7fa f87d 	bl	8000188 <__aeabi_dsub>
 800608e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006092:	9f03      	ldr	r7, [sp, #12]
 8006094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006098:	f7fa fcde 	bl	8000a58 <__aeabi_d2iz>
 800609c:	4604      	mov	r4, r0
 800609e:	f7fa f9c1 	bl	8000424 <__aeabi_i2d>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060aa:	f7fa f86d 	bl	8000188 <__aeabi_dsub>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	3430      	adds	r4, #48	; 0x30
 80060b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060bc:	f807 4b01 	strb.w	r4, [r7], #1
 80060c0:	f7fa fc8c 	bl	80009dc <__aeabi_dcmplt>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d173      	bne.n	80061b0 <_dtoa_r+0x638>
 80060c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060cc:	2000      	movs	r0, #0
 80060ce:	4911      	ldr	r1, [pc, #68]	; (8006114 <_dtoa_r+0x59c>)
 80060d0:	f7fa f85a 	bl	8000188 <__aeabi_dsub>
 80060d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060d8:	f7fa fc80 	bl	80009dc <__aeabi_dcmplt>
 80060dc:	2800      	cmp	r0, #0
 80060de:	f040 80b6 	bne.w	800624e <_dtoa_r+0x6d6>
 80060e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060e4:	429f      	cmp	r7, r3
 80060e6:	f43f af7a 	beq.w	8005fde <_dtoa_r+0x466>
 80060ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060ee:	2200      	movs	r2, #0
 80060f0:	4b09      	ldr	r3, [pc, #36]	; (8006118 <_dtoa_r+0x5a0>)
 80060f2:	f7fa fa01 	bl	80004f8 <__aeabi_dmul>
 80060f6:	2200      	movs	r2, #0
 80060f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <_dtoa_r+0x5a0>)
 8006102:	f7fa f9f9 	bl	80004f8 <__aeabi_dmul>
 8006106:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800610a:	e7c3      	b.n	8006094 <_dtoa_r+0x51c>
 800610c:	0800ba40 	.word	0x0800ba40
 8006110:	0800ba18 	.word	0x0800ba18
 8006114:	3ff00000 	.word	0x3ff00000
 8006118:	40240000 	.word	0x40240000
 800611c:	401c0000 	.word	0x401c0000
 8006120:	40140000 	.word	0x40140000
 8006124:	3fe00000 	.word	0x3fe00000
 8006128:	4630      	mov	r0, r6
 800612a:	4639      	mov	r1, r7
 800612c:	f7fa f9e4 	bl	80004f8 <__aeabi_dmul>
 8006130:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006132:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006136:	9c03      	ldr	r4, [sp, #12]
 8006138:	9314      	str	r3, [sp, #80]	; 0x50
 800613a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800613e:	f7fa fc8b 	bl	8000a58 <__aeabi_d2iz>
 8006142:	9015      	str	r0, [sp, #84]	; 0x54
 8006144:	f7fa f96e 	bl	8000424 <__aeabi_i2d>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006150:	f7fa f81a 	bl	8000188 <__aeabi_dsub>
 8006154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006156:	4606      	mov	r6, r0
 8006158:	3330      	adds	r3, #48	; 0x30
 800615a:	f804 3b01 	strb.w	r3, [r4], #1
 800615e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006160:	460f      	mov	r7, r1
 8006162:	429c      	cmp	r4, r3
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	d124      	bne.n	80061b4 <_dtoa_r+0x63c>
 800616a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800616e:	4baf      	ldr	r3, [pc, #700]	; (800642c <_dtoa_r+0x8b4>)
 8006170:	f7fa f80c 	bl	800018c <__adddf3>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4630      	mov	r0, r6
 800617a:	4639      	mov	r1, r7
 800617c:	f7fa fc4c 	bl	8000a18 <__aeabi_dcmpgt>
 8006180:	2800      	cmp	r0, #0
 8006182:	d163      	bne.n	800624c <_dtoa_r+0x6d4>
 8006184:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006188:	2000      	movs	r0, #0
 800618a:	49a8      	ldr	r1, [pc, #672]	; (800642c <_dtoa_r+0x8b4>)
 800618c:	f7f9 fffc 	bl	8000188 <__aeabi_dsub>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4630      	mov	r0, r6
 8006196:	4639      	mov	r1, r7
 8006198:	f7fa fc20 	bl	80009dc <__aeabi_dcmplt>
 800619c:	2800      	cmp	r0, #0
 800619e:	f43f af1e 	beq.w	8005fde <_dtoa_r+0x466>
 80061a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80061a4:	1e7b      	subs	r3, r7, #1
 80061a6:	9314      	str	r3, [sp, #80]	; 0x50
 80061a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80061ac:	2b30      	cmp	r3, #48	; 0x30
 80061ae:	d0f8      	beq.n	80061a2 <_dtoa_r+0x62a>
 80061b0:	46c3      	mov	fp, r8
 80061b2:	e03b      	b.n	800622c <_dtoa_r+0x6b4>
 80061b4:	4b9e      	ldr	r3, [pc, #632]	; (8006430 <_dtoa_r+0x8b8>)
 80061b6:	f7fa f99f 	bl	80004f8 <__aeabi_dmul>
 80061ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061be:	e7bc      	b.n	800613a <_dtoa_r+0x5c2>
 80061c0:	9f03      	ldr	r7, [sp, #12]
 80061c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80061c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061ca:	4640      	mov	r0, r8
 80061cc:	4649      	mov	r1, r9
 80061ce:	f7fa fabd 	bl	800074c <__aeabi_ddiv>
 80061d2:	f7fa fc41 	bl	8000a58 <__aeabi_d2iz>
 80061d6:	4604      	mov	r4, r0
 80061d8:	f7fa f924 	bl	8000424 <__aeabi_i2d>
 80061dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061e0:	f7fa f98a 	bl	80004f8 <__aeabi_dmul>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4640      	mov	r0, r8
 80061ea:	4649      	mov	r1, r9
 80061ec:	f7f9 ffcc 	bl	8000188 <__aeabi_dsub>
 80061f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80061f4:	f807 6b01 	strb.w	r6, [r7], #1
 80061f8:	9e03      	ldr	r6, [sp, #12]
 80061fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80061fe:	1bbe      	subs	r6, r7, r6
 8006200:	45b4      	cmp	ip, r6
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	d136      	bne.n	8006276 <_dtoa_r+0x6fe>
 8006208:	f7f9 ffc0 	bl	800018c <__adddf3>
 800620c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006210:	4680      	mov	r8, r0
 8006212:	4689      	mov	r9, r1
 8006214:	f7fa fc00 	bl	8000a18 <__aeabi_dcmpgt>
 8006218:	bb58      	cbnz	r0, 8006272 <_dtoa_r+0x6fa>
 800621a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800621e:	4640      	mov	r0, r8
 8006220:	4649      	mov	r1, r9
 8006222:	f7fa fbd1 	bl	80009c8 <__aeabi_dcmpeq>
 8006226:	b108      	cbz	r0, 800622c <_dtoa_r+0x6b4>
 8006228:	07e3      	lsls	r3, r4, #31
 800622a:	d422      	bmi.n	8006272 <_dtoa_r+0x6fa>
 800622c:	4651      	mov	r1, sl
 800622e:	4628      	mov	r0, r5
 8006230:	f000 fbc2 	bl	80069b8 <_Bfree>
 8006234:	2300      	movs	r3, #0
 8006236:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006238:	703b      	strb	r3, [r7, #0]
 800623a:	f10b 0301 	add.w	r3, fp, #1
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006242:	2b00      	cmp	r3, #0
 8006244:	f43f ace6 	beq.w	8005c14 <_dtoa_r+0x9c>
 8006248:	601f      	str	r7, [r3, #0]
 800624a:	e4e3      	b.n	8005c14 <_dtoa_r+0x9c>
 800624c:	4627      	mov	r7, r4
 800624e:	463b      	mov	r3, r7
 8006250:	461f      	mov	r7, r3
 8006252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006256:	2a39      	cmp	r2, #57	; 0x39
 8006258:	d107      	bne.n	800626a <_dtoa_r+0x6f2>
 800625a:	9a03      	ldr	r2, [sp, #12]
 800625c:	429a      	cmp	r2, r3
 800625e:	d1f7      	bne.n	8006250 <_dtoa_r+0x6d8>
 8006260:	2230      	movs	r2, #48	; 0x30
 8006262:	9903      	ldr	r1, [sp, #12]
 8006264:	f108 0801 	add.w	r8, r8, #1
 8006268:	700a      	strb	r2, [r1, #0]
 800626a:	781a      	ldrb	r2, [r3, #0]
 800626c:	3201      	adds	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	e79e      	b.n	80061b0 <_dtoa_r+0x638>
 8006272:	46d8      	mov	r8, fp
 8006274:	e7eb      	b.n	800624e <_dtoa_r+0x6d6>
 8006276:	2200      	movs	r2, #0
 8006278:	4b6d      	ldr	r3, [pc, #436]	; (8006430 <_dtoa_r+0x8b8>)
 800627a:	f7fa f93d 	bl	80004f8 <__aeabi_dmul>
 800627e:	2200      	movs	r2, #0
 8006280:	2300      	movs	r3, #0
 8006282:	4680      	mov	r8, r0
 8006284:	4689      	mov	r9, r1
 8006286:	f7fa fb9f 	bl	80009c8 <__aeabi_dcmpeq>
 800628a:	2800      	cmp	r0, #0
 800628c:	d09b      	beq.n	80061c6 <_dtoa_r+0x64e>
 800628e:	e7cd      	b.n	800622c <_dtoa_r+0x6b4>
 8006290:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006292:	2a00      	cmp	r2, #0
 8006294:	f000 80c4 	beq.w	8006420 <_dtoa_r+0x8a8>
 8006298:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800629a:	2a01      	cmp	r2, #1
 800629c:	f300 80a8 	bgt.w	80063f0 <_dtoa_r+0x878>
 80062a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062a2:	2a00      	cmp	r2, #0
 80062a4:	f000 80a0 	beq.w	80063e8 <_dtoa_r+0x870>
 80062a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062ac:	464f      	mov	r7, r9
 80062ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062b2:	2101      	movs	r1, #1
 80062b4:	441a      	add	r2, r3
 80062b6:	4628      	mov	r0, r5
 80062b8:	4499      	add	r9, r3
 80062ba:	9209      	str	r2, [sp, #36]	; 0x24
 80062bc:	f000 fc7c 	bl	8006bb8 <__i2b>
 80062c0:	4606      	mov	r6, r0
 80062c2:	b15f      	cbz	r7, 80062dc <_dtoa_r+0x764>
 80062c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	dd08      	ble.n	80062dc <_dtoa_r+0x764>
 80062ca:	42bb      	cmp	r3, r7
 80062cc:	bfa8      	it	ge
 80062ce:	463b      	movge	r3, r7
 80062d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d2:	eba9 0903 	sub.w	r9, r9, r3
 80062d6:	1aff      	subs	r7, r7, r3
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	9309      	str	r3, [sp, #36]	; 0x24
 80062dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062de:	b1f3      	cbz	r3, 800631e <_dtoa_r+0x7a6>
 80062e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 80a0 	beq.w	8006428 <_dtoa_r+0x8b0>
 80062e8:	2c00      	cmp	r4, #0
 80062ea:	dd10      	ble.n	800630e <_dtoa_r+0x796>
 80062ec:	4631      	mov	r1, r6
 80062ee:	4622      	mov	r2, r4
 80062f0:	4628      	mov	r0, r5
 80062f2:	f000 fd1f 	bl	8006d34 <__pow5mult>
 80062f6:	4652      	mov	r2, sl
 80062f8:	4601      	mov	r1, r0
 80062fa:	4606      	mov	r6, r0
 80062fc:	4628      	mov	r0, r5
 80062fe:	f000 fc71 	bl	8006be4 <__multiply>
 8006302:	4680      	mov	r8, r0
 8006304:	4651      	mov	r1, sl
 8006306:	4628      	mov	r0, r5
 8006308:	f000 fb56 	bl	80069b8 <_Bfree>
 800630c:	46c2      	mov	sl, r8
 800630e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006310:	1b1a      	subs	r2, r3, r4
 8006312:	d004      	beq.n	800631e <_dtoa_r+0x7a6>
 8006314:	4651      	mov	r1, sl
 8006316:	4628      	mov	r0, r5
 8006318:	f000 fd0c 	bl	8006d34 <__pow5mult>
 800631c:	4682      	mov	sl, r0
 800631e:	2101      	movs	r1, #1
 8006320:	4628      	mov	r0, r5
 8006322:	f000 fc49 	bl	8006bb8 <__i2b>
 8006326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006328:	4604      	mov	r4, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	f340 8082 	ble.w	8006434 <_dtoa_r+0x8bc>
 8006330:	461a      	mov	r2, r3
 8006332:	4601      	mov	r1, r0
 8006334:	4628      	mov	r0, r5
 8006336:	f000 fcfd 	bl	8006d34 <__pow5mult>
 800633a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800633c:	4604      	mov	r4, r0
 800633e:	2b01      	cmp	r3, #1
 8006340:	dd7b      	ble.n	800643a <_dtoa_r+0x8c2>
 8006342:	f04f 0800 	mov.w	r8, #0
 8006346:	6923      	ldr	r3, [r4, #16]
 8006348:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800634c:	6918      	ldr	r0, [r3, #16]
 800634e:	f000 fbe5 	bl	8006b1c <__hi0bits>
 8006352:	f1c0 0020 	rsb	r0, r0, #32
 8006356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006358:	4418      	add	r0, r3
 800635a:	f010 001f 	ands.w	r0, r0, #31
 800635e:	f000 8092 	beq.w	8006486 <_dtoa_r+0x90e>
 8006362:	f1c0 0320 	rsb	r3, r0, #32
 8006366:	2b04      	cmp	r3, #4
 8006368:	f340 8085 	ble.w	8006476 <_dtoa_r+0x8fe>
 800636c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800636e:	f1c0 001c 	rsb	r0, r0, #28
 8006372:	4403      	add	r3, r0
 8006374:	4481      	add	r9, r0
 8006376:	4407      	add	r7, r0
 8006378:	9309      	str	r3, [sp, #36]	; 0x24
 800637a:	f1b9 0f00 	cmp.w	r9, #0
 800637e:	dd05      	ble.n	800638c <_dtoa_r+0x814>
 8006380:	4651      	mov	r1, sl
 8006382:	464a      	mov	r2, r9
 8006384:	4628      	mov	r0, r5
 8006386:	f000 fd2f 	bl	8006de8 <__lshift>
 800638a:	4682      	mov	sl, r0
 800638c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638e:	2b00      	cmp	r3, #0
 8006390:	dd05      	ble.n	800639e <_dtoa_r+0x826>
 8006392:	4621      	mov	r1, r4
 8006394:	461a      	mov	r2, r3
 8006396:	4628      	mov	r0, r5
 8006398:	f000 fd26 	bl	8006de8 <__lshift>
 800639c:	4604      	mov	r4, r0
 800639e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d072      	beq.n	800648a <_dtoa_r+0x912>
 80063a4:	4621      	mov	r1, r4
 80063a6:	4650      	mov	r0, sl
 80063a8:	f000 fd8a 	bl	8006ec0 <__mcmp>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	da6c      	bge.n	800648a <_dtoa_r+0x912>
 80063b0:	2300      	movs	r3, #0
 80063b2:	4651      	mov	r1, sl
 80063b4:	220a      	movs	r2, #10
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 fb20 	bl	80069fc <__multadd>
 80063bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063be:	4682      	mov	sl, r0
 80063c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 81ac 	beq.w	8006722 <_dtoa_r+0xbaa>
 80063ca:	2300      	movs	r3, #0
 80063cc:	4631      	mov	r1, r6
 80063ce:	220a      	movs	r2, #10
 80063d0:	4628      	mov	r0, r5
 80063d2:	f000 fb13 	bl	80069fc <__multadd>
 80063d6:	9b06      	ldr	r3, [sp, #24]
 80063d8:	4606      	mov	r6, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f300 8093 	bgt.w	8006506 <_dtoa_r+0x98e>
 80063e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	dc59      	bgt.n	800649a <_dtoa_r+0x922>
 80063e6:	e08e      	b.n	8006506 <_dtoa_r+0x98e>
 80063e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80063ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063ee:	e75d      	b.n	80062ac <_dtoa_r+0x734>
 80063f0:	9b08      	ldr	r3, [sp, #32]
 80063f2:	1e5c      	subs	r4, r3, #1
 80063f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f6:	42a3      	cmp	r3, r4
 80063f8:	bfbf      	itttt	lt
 80063fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80063fc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80063fe:	1ae3      	sublt	r3, r4, r3
 8006400:	18d2      	addlt	r2, r2, r3
 8006402:	bfa8      	it	ge
 8006404:	1b1c      	subge	r4, r3, r4
 8006406:	9b08      	ldr	r3, [sp, #32]
 8006408:	bfbe      	ittt	lt
 800640a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800640c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800640e:	2400      	movlt	r4, #0
 8006410:	2b00      	cmp	r3, #0
 8006412:	bfb5      	itete	lt
 8006414:	eba9 0703 	sublt.w	r7, r9, r3
 8006418:	464f      	movge	r7, r9
 800641a:	2300      	movlt	r3, #0
 800641c:	9b08      	ldrge	r3, [sp, #32]
 800641e:	e747      	b.n	80062b0 <_dtoa_r+0x738>
 8006420:	464f      	mov	r7, r9
 8006422:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006424:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006426:	e74c      	b.n	80062c2 <_dtoa_r+0x74a>
 8006428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800642a:	e773      	b.n	8006314 <_dtoa_r+0x79c>
 800642c:	3fe00000 	.word	0x3fe00000
 8006430:	40240000 	.word	0x40240000
 8006434:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006436:	2b01      	cmp	r3, #1
 8006438:	dc18      	bgt.n	800646c <_dtoa_r+0x8f4>
 800643a:	9b04      	ldr	r3, [sp, #16]
 800643c:	b9b3      	cbnz	r3, 800646c <_dtoa_r+0x8f4>
 800643e:	9b05      	ldr	r3, [sp, #20]
 8006440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006444:	b993      	cbnz	r3, 800646c <_dtoa_r+0x8f4>
 8006446:	9b05      	ldr	r3, [sp, #20]
 8006448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800644c:	0d1b      	lsrs	r3, r3, #20
 800644e:	051b      	lsls	r3, r3, #20
 8006450:	b17b      	cbz	r3, 8006472 <_dtoa_r+0x8fa>
 8006452:	f04f 0801 	mov.w	r8, #1
 8006456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006458:	f109 0901 	add.w	r9, r9, #1
 800645c:	3301      	adds	r3, #1
 800645e:	9309      	str	r3, [sp, #36]	; 0x24
 8006460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006462:	2b00      	cmp	r3, #0
 8006464:	f47f af6f 	bne.w	8006346 <_dtoa_r+0x7ce>
 8006468:	2001      	movs	r0, #1
 800646a:	e774      	b.n	8006356 <_dtoa_r+0x7de>
 800646c:	f04f 0800 	mov.w	r8, #0
 8006470:	e7f6      	b.n	8006460 <_dtoa_r+0x8e8>
 8006472:	4698      	mov	r8, r3
 8006474:	e7f4      	b.n	8006460 <_dtoa_r+0x8e8>
 8006476:	d080      	beq.n	800637a <_dtoa_r+0x802>
 8006478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800647a:	331c      	adds	r3, #28
 800647c:	441a      	add	r2, r3
 800647e:	4499      	add	r9, r3
 8006480:	441f      	add	r7, r3
 8006482:	9209      	str	r2, [sp, #36]	; 0x24
 8006484:	e779      	b.n	800637a <_dtoa_r+0x802>
 8006486:	4603      	mov	r3, r0
 8006488:	e7f6      	b.n	8006478 <_dtoa_r+0x900>
 800648a:	9b08      	ldr	r3, [sp, #32]
 800648c:	2b00      	cmp	r3, #0
 800648e:	dc34      	bgt.n	80064fa <_dtoa_r+0x982>
 8006490:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006492:	2b02      	cmp	r3, #2
 8006494:	dd31      	ble.n	80064fa <_dtoa_r+0x982>
 8006496:	9b08      	ldr	r3, [sp, #32]
 8006498:	9306      	str	r3, [sp, #24]
 800649a:	9b06      	ldr	r3, [sp, #24]
 800649c:	b963      	cbnz	r3, 80064b8 <_dtoa_r+0x940>
 800649e:	4621      	mov	r1, r4
 80064a0:	2205      	movs	r2, #5
 80064a2:	4628      	mov	r0, r5
 80064a4:	f000 faaa 	bl	80069fc <__multadd>
 80064a8:	4601      	mov	r1, r0
 80064aa:	4604      	mov	r4, r0
 80064ac:	4650      	mov	r0, sl
 80064ae:	f000 fd07 	bl	8006ec0 <__mcmp>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	f73f adbf 	bgt.w	8006036 <_dtoa_r+0x4be>
 80064b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064ba:	9f03      	ldr	r7, [sp, #12]
 80064bc:	ea6f 0b03 	mvn.w	fp, r3
 80064c0:	f04f 0800 	mov.w	r8, #0
 80064c4:	4621      	mov	r1, r4
 80064c6:	4628      	mov	r0, r5
 80064c8:	f000 fa76 	bl	80069b8 <_Bfree>
 80064cc:	2e00      	cmp	r6, #0
 80064ce:	f43f aead 	beq.w	800622c <_dtoa_r+0x6b4>
 80064d2:	f1b8 0f00 	cmp.w	r8, #0
 80064d6:	d005      	beq.n	80064e4 <_dtoa_r+0x96c>
 80064d8:	45b0      	cmp	r8, r6
 80064da:	d003      	beq.n	80064e4 <_dtoa_r+0x96c>
 80064dc:	4641      	mov	r1, r8
 80064de:	4628      	mov	r0, r5
 80064e0:	f000 fa6a 	bl	80069b8 <_Bfree>
 80064e4:	4631      	mov	r1, r6
 80064e6:	4628      	mov	r0, r5
 80064e8:	f000 fa66 	bl	80069b8 <_Bfree>
 80064ec:	e69e      	b.n	800622c <_dtoa_r+0x6b4>
 80064ee:	2400      	movs	r4, #0
 80064f0:	4626      	mov	r6, r4
 80064f2:	e7e1      	b.n	80064b8 <_dtoa_r+0x940>
 80064f4:	46c3      	mov	fp, r8
 80064f6:	4626      	mov	r6, r4
 80064f8:	e59d      	b.n	8006036 <_dtoa_r+0x4be>
 80064fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 80c8 	beq.w	8006692 <_dtoa_r+0xb1a>
 8006502:	9b08      	ldr	r3, [sp, #32]
 8006504:	9306      	str	r3, [sp, #24]
 8006506:	2f00      	cmp	r7, #0
 8006508:	dd05      	ble.n	8006516 <_dtoa_r+0x99e>
 800650a:	4631      	mov	r1, r6
 800650c:	463a      	mov	r2, r7
 800650e:	4628      	mov	r0, r5
 8006510:	f000 fc6a 	bl	8006de8 <__lshift>
 8006514:	4606      	mov	r6, r0
 8006516:	f1b8 0f00 	cmp.w	r8, #0
 800651a:	d05b      	beq.n	80065d4 <_dtoa_r+0xa5c>
 800651c:	4628      	mov	r0, r5
 800651e:	6871      	ldr	r1, [r6, #4]
 8006520:	f000 fa0a 	bl	8006938 <_Balloc>
 8006524:	4607      	mov	r7, r0
 8006526:	b928      	cbnz	r0, 8006534 <_dtoa_r+0x9bc>
 8006528:	4602      	mov	r2, r0
 800652a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800652e:	4b81      	ldr	r3, [pc, #516]	; (8006734 <_dtoa_r+0xbbc>)
 8006530:	f7ff bb36 	b.w	8005ba0 <_dtoa_r+0x28>
 8006534:	6932      	ldr	r2, [r6, #16]
 8006536:	f106 010c 	add.w	r1, r6, #12
 800653a:	3202      	adds	r2, #2
 800653c:	0092      	lsls	r2, r2, #2
 800653e:	300c      	adds	r0, #12
 8006540:	f7ff fa7d 	bl	8005a3e <memcpy>
 8006544:	2201      	movs	r2, #1
 8006546:	4639      	mov	r1, r7
 8006548:	4628      	mov	r0, r5
 800654a:	f000 fc4d 	bl	8006de8 <__lshift>
 800654e:	46b0      	mov	r8, r6
 8006550:	4606      	mov	r6, r0
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	9a03      	ldr	r2, [sp, #12]
 8006556:	3301      	adds	r3, #1
 8006558:	9308      	str	r3, [sp, #32]
 800655a:	9b06      	ldr	r3, [sp, #24]
 800655c:	4413      	add	r3, r2
 800655e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006560:	9b04      	ldr	r3, [sp, #16]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	930a      	str	r3, [sp, #40]	; 0x28
 8006568:	9b08      	ldr	r3, [sp, #32]
 800656a:	4621      	mov	r1, r4
 800656c:	3b01      	subs	r3, #1
 800656e:	4650      	mov	r0, sl
 8006570:	9304      	str	r3, [sp, #16]
 8006572:	f7ff fa77 	bl	8005a64 <quorem>
 8006576:	4641      	mov	r1, r8
 8006578:	9006      	str	r0, [sp, #24]
 800657a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800657e:	4650      	mov	r0, sl
 8006580:	f000 fc9e 	bl	8006ec0 <__mcmp>
 8006584:	4632      	mov	r2, r6
 8006586:	9009      	str	r0, [sp, #36]	; 0x24
 8006588:	4621      	mov	r1, r4
 800658a:	4628      	mov	r0, r5
 800658c:	f000 fcb4 	bl	8006ef8 <__mdiff>
 8006590:	68c2      	ldr	r2, [r0, #12]
 8006592:	4607      	mov	r7, r0
 8006594:	bb02      	cbnz	r2, 80065d8 <_dtoa_r+0xa60>
 8006596:	4601      	mov	r1, r0
 8006598:	4650      	mov	r0, sl
 800659a:	f000 fc91 	bl	8006ec0 <__mcmp>
 800659e:	4602      	mov	r2, r0
 80065a0:	4639      	mov	r1, r7
 80065a2:	4628      	mov	r0, r5
 80065a4:	920c      	str	r2, [sp, #48]	; 0x30
 80065a6:	f000 fa07 	bl	80069b8 <_Bfree>
 80065aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065ae:	9f08      	ldr	r7, [sp, #32]
 80065b0:	ea43 0102 	orr.w	r1, r3, r2
 80065b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b6:	4319      	orrs	r1, r3
 80065b8:	d110      	bne.n	80065dc <_dtoa_r+0xa64>
 80065ba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80065be:	d029      	beq.n	8006614 <_dtoa_r+0xa9c>
 80065c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	dd02      	ble.n	80065cc <_dtoa_r+0xa54>
 80065c6:	9b06      	ldr	r3, [sp, #24]
 80065c8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80065cc:	9b04      	ldr	r3, [sp, #16]
 80065ce:	f883 9000 	strb.w	r9, [r3]
 80065d2:	e777      	b.n	80064c4 <_dtoa_r+0x94c>
 80065d4:	4630      	mov	r0, r6
 80065d6:	e7ba      	b.n	800654e <_dtoa_r+0x9d6>
 80065d8:	2201      	movs	r2, #1
 80065da:	e7e1      	b.n	80065a0 <_dtoa_r+0xa28>
 80065dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065de:	2b00      	cmp	r3, #0
 80065e0:	db04      	blt.n	80065ec <_dtoa_r+0xa74>
 80065e2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80065e4:	430b      	orrs	r3, r1
 80065e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065e8:	430b      	orrs	r3, r1
 80065ea:	d120      	bne.n	800662e <_dtoa_r+0xab6>
 80065ec:	2a00      	cmp	r2, #0
 80065ee:	dded      	ble.n	80065cc <_dtoa_r+0xa54>
 80065f0:	4651      	mov	r1, sl
 80065f2:	2201      	movs	r2, #1
 80065f4:	4628      	mov	r0, r5
 80065f6:	f000 fbf7 	bl	8006de8 <__lshift>
 80065fa:	4621      	mov	r1, r4
 80065fc:	4682      	mov	sl, r0
 80065fe:	f000 fc5f 	bl	8006ec0 <__mcmp>
 8006602:	2800      	cmp	r0, #0
 8006604:	dc03      	bgt.n	800660e <_dtoa_r+0xa96>
 8006606:	d1e1      	bne.n	80065cc <_dtoa_r+0xa54>
 8006608:	f019 0f01 	tst.w	r9, #1
 800660c:	d0de      	beq.n	80065cc <_dtoa_r+0xa54>
 800660e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006612:	d1d8      	bne.n	80065c6 <_dtoa_r+0xa4e>
 8006614:	2339      	movs	r3, #57	; 0x39
 8006616:	9a04      	ldr	r2, [sp, #16]
 8006618:	7013      	strb	r3, [r2, #0]
 800661a:	463b      	mov	r3, r7
 800661c:	461f      	mov	r7, r3
 800661e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006622:	3b01      	subs	r3, #1
 8006624:	2a39      	cmp	r2, #57	; 0x39
 8006626:	d06b      	beq.n	8006700 <_dtoa_r+0xb88>
 8006628:	3201      	adds	r2, #1
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	e74a      	b.n	80064c4 <_dtoa_r+0x94c>
 800662e:	2a00      	cmp	r2, #0
 8006630:	dd07      	ble.n	8006642 <_dtoa_r+0xaca>
 8006632:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006636:	d0ed      	beq.n	8006614 <_dtoa_r+0xa9c>
 8006638:	9a04      	ldr	r2, [sp, #16]
 800663a:	f109 0301 	add.w	r3, r9, #1
 800663e:	7013      	strb	r3, [r2, #0]
 8006640:	e740      	b.n	80064c4 <_dtoa_r+0x94c>
 8006642:	9b08      	ldr	r3, [sp, #32]
 8006644:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006646:	f803 9c01 	strb.w	r9, [r3, #-1]
 800664a:	4293      	cmp	r3, r2
 800664c:	d042      	beq.n	80066d4 <_dtoa_r+0xb5c>
 800664e:	4651      	mov	r1, sl
 8006650:	2300      	movs	r3, #0
 8006652:	220a      	movs	r2, #10
 8006654:	4628      	mov	r0, r5
 8006656:	f000 f9d1 	bl	80069fc <__multadd>
 800665a:	45b0      	cmp	r8, r6
 800665c:	4682      	mov	sl, r0
 800665e:	f04f 0300 	mov.w	r3, #0
 8006662:	f04f 020a 	mov.w	r2, #10
 8006666:	4641      	mov	r1, r8
 8006668:	4628      	mov	r0, r5
 800666a:	d107      	bne.n	800667c <_dtoa_r+0xb04>
 800666c:	f000 f9c6 	bl	80069fc <__multadd>
 8006670:	4680      	mov	r8, r0
 8006672:	4606      	mov	r6, r0
 8006674:	9b08      	ldr	r3, [sp, #32]
 8006676:	3301      	adds	r3, #1
 8006678:	9308      	str	r3, [sp, #32]
 800667a:	e775      	b.n	8006568 <_dtoa_r+0x9f0>
 800667c:	f000 f9be 	bl	80069fc <__multadd>
 8006680:	4631      	mov	r1, r6
 8006682:	4680      	mov	r8, r0
 8006684:	2300      	movs	r3, #0
 8006686:	220a      	movs	r2, #10
 8006688:	4628      	mov	r0, r5
 800668a:	f000 f9b7 	bl	80069fc <__multadd>
 800668e:	4606      	mov	r6, r0
 8006690:	e7f0      	b.n	8006674 <_dtoa_r+0xafc>
 8006692:	9b08      	ldr	r3, [sp, #32]
 8006694:	9306      	str	r3, [sp, #24]
 8006696:	9f03      	ldr	r7, [sp, #12]
 8006698:	4621      	mov	r1, r4
 800669a:	4650      	mov	r0, sl
 800669c:	f7ff f9e2 	bl	8005a64 <quorem>
 80066a0:	9b03      	ldr	r3, [sp, #12]
 80066a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066a6:	f807 9b01 	strb.w	r9, [r7], #1
 80066aa:	1afa      	subs	r2, r7, r3
 80066ac:	9b06      	ldr	r3, [sp, #24]
 80066ae:	4293      	cmp	r3, r2
 80066b0:	dd07      	ble.n	80066c2 <_dtoa_r+0xb4a>
 80066b2:	4651      	mov	r1, sl
 80066b4:	2300      	movs	r3, #0
 80066b6:	220a      	movs	r2, #10
 80066b8:	4628      	mov	r0, r5
 80066ba:	f000 f99f 	bl	80069fc <__multadd>
 80066be:	4682      	mov	sl, r0
 80066c0:	e7ea      	b.n	8006698 <_dtoa_r+0xb20>
 80066c2:	9b06      	ldr	r3, [sp, #24]
 80066c4:	f04f 0800 	mov.w	r8, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	bfcc      	ite	gt
 80066cc:	461f      	movgt	r7, r3
 80066ce:	2701      	movle	r7, #1
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	441f      	add	r7, r3
 80066d4:	4651      	mov	r1, sl
 80066d6:	2201      	movs	r2, #1
 80066d8:	4628      	mov	r0, r5
 80066da:	f000 fb85 	bl	8006de8 <__lshift>
 80066de:	4621      	mov	r1, r4
 80066e0:	4682      	mov	sl, r0
 80066e2:	f000 fbed 	bl	8006ec0 <__mcmp>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	dc97      	bgt.n	800661a <_dtoa_r+0xaa2>
 80066ea:	d102      	bne.n	80066f2 <_dtoa_r+0xb7a>
 80066ec:	f019 0f01 	tst.w	r9, #1
 80066f0:	d193      	bne.n	800661a <_dtoa_r+0xaa2>
 80066f2:	463b      	mov	r3, r7
 80066f4:	461f      	mov	r7, r3
 80066f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066fa:	2a30      	cmp	r2, #48	; 0x30
 80066fc:	d0fa      	beq.n	80066f4 <_dtoa_r+0xb7c>
 80066fe:	e6e1      	b.n	80064c4 <_dtoa_r+0x94c>
 8006700:	9a03      	ldr	r2, [sp, #12]
 8006702:	429a      	cmp	r2, r3
 8006704:	d18a      	bne.n	800661c <_dtoa_r+0xaa4>
 8006706:	2331      	movs	r3, #49	; 0x31
 8006708:	f10b 0b01 	add.w	fp, fp, #1
 800670c:	e797      	b.n	800663e <_dtoa_r+0xac6>
 800670e:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <_dtoa_r+0xbc0>)
 8006710:	f7ff ba9f 	b.w	8005c52 <_dtoa_r+0xda>
 8006714:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006716:	2b00      	cmp	r3, #0
 8006718:	f47f aa77 	bne.w	8005c0a <_dtoa_r+0x92>
 800671c:	4b07      	ldr	r3, [pc, #28]	; (800673c <_dtoa_r+0xbc4>)
 800671e:	f7ff ba98 	b.w	8005c52 <_dtoa_r+0xda>
 8006722:	9b06      	ldr	r3, [sp, #24]
 8006724:	2b00      	cmp	r3, #0
 8006726:	dcb6      	bgt.n	8006696 <_dtoa_r+0xb1e>
 8006728:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800672a:	2b02      	cmp	r3, #2
 800672c:	f73f aeb5 	bgt.w	800649a <_dtoa_r+0x922>
 8006730:	e7b1      	b.n	8006696 <_dtoa_r+0xb1e>
 8006732:	bf00      	nop
 8006734:	0800b9a9 	.word	0x0800b9a9
 8006738:	0800b904 	.word	0x0800b904
 800673c:	0800b92d 	.word	0x0800b92d

08006740 <_free_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4605      	mov	r5, r0
 8006744:	2900      	cmp	r1, #0
 8006746:	d040      	beq.n	80067ca <_free_r+0x8a>
 8006748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800674c:	1f0c      	subs	r4, r1, #4
 800674e:	2b00      	cmp	r3, #0
 8006750:	bfb8      	it	lt
 8006752:	18e4      	addlt	r4, r4, r3
 8006754:	f000 f8e4 	bl	8006920 <__malloc_lock>
 8006758:	4a1c      	ldr	r2, [pc, #112]	; (80067cc <_free_r+0x8c>)
 800675a:	6813      	ldr	r3, [r2, #0]
 800675c:	b933      	cbnz	r3, 800676c <_free_r+0x2c>
 800675e:	6063      	str	r3, [r4, #4]
 8006760:	6014      	str	r4, [r2, #0]
 8006762:	4628      	mov	r0, r5
 8006764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006768:	f000 b8e0 	b.w	800692c <__malloc_unlock>
 800676c:	42a3      	cmp	r3, r4
 800676e:	d908      	bls.n	8006782 <_free_r+0x42>
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	1821      	adds	r1, r4, r0
 8006774:	428b      	cmp	r3, r1
 8006776:	bf01      	itttt	eq
 8006778:	6819      	ldreq	r1, [r3, #0]
 800677a:	685b      	ldreq	r3, [r3, #4]
 800677c:	1809      	addeq	r1, r1, r0
 800677e:	6021      	streq	r1, [r4, #0]
 8006780:	e7ed      	b.n	800675e <_free_r+0x1e>
 8006782:	461a      	mov	r2, r3
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	b10b      	cbz	r3, 800678c <_free_r+0x4c>
 8006788:	42a3      	cmp	r3, r4
 800678a:	d9fa      	bls.n	8006782 <_free_r+0x42>
 800678c:	6811      	ldr	r1, [r2, #0]
 800678e:	1850      	adds	r0, r2, r1
 8006790:	42a0      	cmp	r0, r4
 8006792:	d10b      	bne.n	80067ac <_free_r+0x6c>
 8006794:	6820      	ldr	r0, [r4, #0]
 8006796:	4401      	add	r1, r0
 8006798:	1850      	adds	r0, r2, r1
 800679a:	4283      	cmp	r3, r0
 800679c:	6011      	str	r1, [r2, #0]
 800679e:	d1e0      	bne.n	8006762 <_free_r+0x22>
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	4408      	add	r0, r1
 80067a6:	6010      	str	r0, [r2, #0]
 80067a8:	6053      	str	r3, [r2, #4]
 80067aa:	e7da      	b.n	8006762 <_free_r+0x22>
 80067ac:	d902      	bls.n	80067b4 <_free_r+0x74>
 80067ae:	230c      	movs	r3, #12
 80067b0:	602b      	str	r3, [r5, #0]
 80067b2:	e7d6      	b.n	8006762 <_free_r+0x22>
 80067b4:	6820      	ldr	r0, [r4, #0]
 80067b6:	1821      	adds	r1, r4, r0
 80067b8:	428b      	cmp	r3, r1
 80067ba:	bf01      	itttt	eq
 80067bc:	6819      	ldreq	r1, [r3, #0]
 80067be:	685b      	ldreq	r3, [r3, #4]
 80067c0:	1809      	addeq	r1, r1, r0
 80067c2:	6021      	streq	r1, [r4, #0]
 80067c4:	6063      	str	r3, [r4, #4]
 80067c6:	6054      	str	r4, [r2, #4]
 80067c8:	e7cb      	b.n	8006762 <_free_r+0x22>
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20000bcc 	.word	0x20000bcc

080067d0 <malloc>:
 80067d0:	4b02      	ldr	r3, [pc, #8]	; (80067dc <malloc+0xc>)
 80067d2:	4601      	mov	r1, r0
 80067d4:	6818      	ldr	r0, [r3, #0]
 80067d6:	f000 b823 	b.w	8006820 <_malloc_r>
 80067da:	bf00      	nop
 80067dc:	20000080 	.word	0x20000080

080067e0 <sbrk_aligned>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	4e0e      	ldr	r6, [pc, #56]	; (800681c <sbrk_aligned+0x3c>)
 80067e4:	460c      	mov	r4, r1
 80067e6:	6831      	ldr	r1, [r6, #0]
 80067e8:	4605      	mov	r5, r0
 80067ea:	b911      	cbnz	r1, 80067f2 <sbrk_aligned+0x12>
 80067ec:	f001 ffe4 	bl	80087b8 <_sbrk_r>
 80067f0:	6030      	str	r0, [r6, #0]
 80067f2:	4621      	mov	r1, r4
 80067f4:	4628      	mov	r0, r5
 80067f6:	f001 ffdf 	bl	80087b8 <_sbrk_r>
 80067fa:	1c43      	adds	r3, r0, #1
 80067fc:	d00a      	beq.n	8006814 <sbrk_aligned+0x34>
 80067fe:	1cc4      	adds	r4, r0, #3
 8006800:	f024 0403 	bic.w	r4, r4, #3
 8006804:	42a0      	cmp	r0, r4
 8006806:	d007      	beq.n	8006818 <sbrk_aligned+0x38>
 8006808:	1a21      	subs	r1, r4, r0
 800680a:	4628      	mov	r0, r5
 800680c:	f001 ffd4 	bl	80087b8 <_sbrk_r>
 8006810:	3001      	adds	r0, #1
 8006812:	d101      	bne.n	8006818 <sbrk_aligned+0x38>
 8006814:	f04f 34ff 	mov.w	r4, #4294967295
 8006818:	4620      	mov	r0, r4
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	20000bd0 	.word	0x20000bd0

08006820 <_malloc_r>:
 8006820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006824:	1ccd      	adds	r5, r1, #3
 8006826:	f025 0503 	bic.w	r5, r5, #3
 800682a:	3508      	adds	r5, #8
 800682c:	2d0c      	cmp	r5, #12
 800682e:	bf38      	it	cc
 8006830:	250c      	movcc	r5, #12
 8006832:	2d00      	cmp	r5, #0
 8006834:	4607      	mov	r7, r0
 8006836:	db01      	blt.n	800683c <_malloc_r+0x1c>
 8006838:	42a9      	cmp	r1, r5
 800683a:	d905      	bls.n	8006848 <_malloc_r+0x28>
 800683c:	230c      	movs	r3, #12
 800683e:	2600      	movs	r6, #0
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	4630      	mov	r0, r6
 8006844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006848:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800691c <_malloc_r+0xfc>
 800684c:	f000 f868 	bl	8006920 <__malloc_lock>
 8006850:	f8d8 3000 	ldr.w	r3, [r8]
 8006854:	461c      	mov	r4, r3
 8006856:	bb5c      	cbnz	r4, 80068b0 <_malloc_r+0x90>
 8006858:	4629      	mov	r1, r5
 800685a:	4638      	mov	r0, r7
 800685c:	f7ff ffc0 	bl	80067e0 <sbrk_aligned>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	4604      	mov	r4, r0
 8006864:	d155      	bne.n	8006912 <_malloc_r+0xf2>
 8006866:	f8d8 4000 	ldr.w	r4, [r8]
 800686a:	4626      	mov	r6, r4
 800686c:	2e00      	cmp	r6, #0
 800686e:	d145      	bne.n	80068fc <_malloc_r+0xdc>
 8006870:	2c00      	cmp	r4, #0
 8006872:	d048      	beq.n	8006906 <_malloc_r+0xe6>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	4631      	mov	r1, r6
 8006878:	4638      	mov	r0, r7
 800687a:	eb04 0903 	add.w	r9, r4, r3
 800687e:	f001 ff9b 	bl	80087b8 <_sbrk_r>
 8006882:	4581      	cmp	r9, r0
 8006884:	d13f      	bne.n	8006906 <_malloc_r+0xe6>
 8006886:	6821      	ldr	r1, [r4, #0]
 8006888:	4638      	mov	r0, r7
 800688a:	1a6d      	subs	r5, r5, r1
 800688c:	4629      	mov	r1, r5
 800688e:	f7ff ffa7 	bl	80067e0 <sbrk_aligned>
 8006892:	3001      	adds	r0, #1
 8006894:	d037      	beq.n	8006906 <_malloc_r+0xe6>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	442b      	add	r3, r5
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	f8d8 3000 	ldr.w	r3, [r8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d038      	beq.n	8006916 <_malloc_r+0xf6>
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	42a2      	cmp	r2, r4
 80068a8:	d12b      	bne.n	8006902 <_malloc_r+0xe2>
 80068aa:	2200      	movs	r2, #0
 80068ac:	605a      	str	r2, [r3, #4]
 80068ae:	e00f      	b.n	80068d0 <_malloc_r+0xb0>
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	1b52      	subs	r2, r2, r5
 80068b4:	d41f      	bmi.n	80068f6 <_malloc_r+0xd6>
 80068b6:	2a0b      	cmp	r2, #11
 80068b8:	d917      	bls.n	80068ea <_malloc_r+0xca>
 80068ba:	1961      	adds	r1, r4, r5
 80068bc:	42a3      	cmp	r3, r4
 80068be:	6025      	str	r5, [r4, #0]
 80068c0:	bf18      	it	ne
 80068c2:	6059      	strne	r1, [r3, #4]
 80068c4:	6863      	ldr	r3, [r4, #4]
 80068c6:	bf08      	it	eq
 80068c8:	f8c8 1000 	streq.w	r1, [r8]
 80068cc:	5162      	str	r2, [r4, r5]
 80068ce:	604b      	str	r3, [r1, #4]
 80068d0:	4638      	mov	r0, r7
 80068d2:	f104 060b 	add.w	r6, r4, #11
 80068d6:	f000 f829 	bl	800692c <__malloc_unlock>
 80068da:	f026 0607 	bic.w	r6, r6, #7
 80068de:	1d23      	adds	r3, r4, #4
 80068e0:	1af2      	subs	r2, r6, r3
 80068e2:	d0ae      	beq.n	8006842 <_malloc_r+0x22>
 80068e4:	1b9b      	subs	r3, r3, r6
 80068e6:	50a3      	str	r3, [r4, r2]
 80068e8:	e7ab      	b.n	8006842 <_malloc_r+0x22>
 80068ea:	42a3      	cmp	r3, r4
 80068ec:	6862      	ldr	r2, [r4, #4]
 80068ee:	d1dd      	bne.n	80068ac <_malloc_r+0x8c>
 80068f0:	f8c8 2000 	str.w	r2, [r8]
 80068f4:	e7ec      	b.n	80068d0 <_malloc_r+0xb0>
 80068f6:	4623      	mov	r3, r4
 80068f8:	6864      	ldr	r4, [r4, #4]
 80068fa:	e7ac      	b.n	8006856 <_malloc_r+0x36>
 80068fc:	4634      	mov	r4, r6
 80068fe:	6876      	ldr	r6, [r6, #4]
 8006900:	e7b4      	b.n	800686c <_malloc_r+0x4c>
 8006902:	4613      	mov	r3, r2
 8006904:	e7cc      	b.n	80068a0 <_malloc_r+0x80>
 8006906:	230c      	movs	r3, #12
 8006908:	4638      	mov	r0, r7
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	f000 f80e 	bl	800692c <__malloc_unlock>
 8006910:	e797      	b.n	8006842 <_malloc_r+0x22>
 8006912:	6025      	str	r5, [r4, #0]
 8006914:	e7dc      	b.n	80068d0 <_malloc_r+0xb0>
 8006916:	605b      	str	r3, [r3, #4]
 8006918:	deff      	udf	#255	; 0xff
 800691a:	bf00      	nop
 800691c:	20000bcc 	.word	0x20000bcc

08006920 <__malloc_lock>:
 8006920:	4801      	ldr	r0, [pc, #4]	; (8006928 <__malloc_lock+0x8>)
 8006922:	f7ff b87c 	b.w	8005a1e <__retarget_lock_acquire_recursive>
 8006926:	bf00      	nop
 8006928:	20000bc8 	.word	0x20000bc8

0800692c <__malloc_unlock>:
 800692c:	4801      	ldr	r0, [pc, #4]	; (8006934 <__malloc_unlock+0x8>)
 800692e:	f7ff b877 	b.w	8005a20 <__retarget_lock_release_recursive>
 8006932:	bf00      	nop
 8006934:	20000bc8 	.word	0x20000bc8

08006938 <_Balloc>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	69c6      	ldr	r6, [r0, #28]
 800693c:	4604      	mov	r4, r0
 800693e:	460d      	mov	r5, r1
 8006940:	b976      	cbnz	r6, 8006960 <_Balloc+0x28>
 8006942:	2010      	movs	r0, #16
 8006944:	f7ff ff44 	bl	80067d0 <malloc>
 8006948:	4602      	mov	r2, r0
 800694a:	61e0      	str	r0, [r4, #28]
 800694c:	b920      	cbnz	r0, 8006958 <_Balloc+0x20>
 800694e:	216b      	movs	r1, #107	; 0x6b
 8006950:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <_Balloc+0x78>)
 8006952:	4818      	ldr	r0, [pc, #96]	; (80069b4 <_Balloc+0x7c>)
 8006954:	f001 ff46 	bl	80087e4 <__assert_func>
 8006958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800695c:	6006      	str	r6, [r0, #0]
 800695e:	60c6      	str	r6, [r0, #12]
 8006960:	69e6      	ldr	r6, [r4, #28]
 8006962:	68f3      	ldr	r3, [r6, #12]
 8006964:	b183      	cbz	r3, 8006988 <_Balloc+0x50>
 8006966:	69e3      	ldr	r3, [r4, #28]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800696e:	b9b8      	cbnz	r0, 80069a0 <_Balloc+0x68>
 8006970:	2101      	movs	r1, #1
 8006972:	fa01 f605 	lsl.w	r6, r1, r5
 8006976:	1d72      	adds	r2, r6, #5
 8006978:	4620      	mov	r0, r4
 800697a:	0092      	lsls	r2, r2, #2
 800697c:	f001 ff50 	bl	8008820 <_calloc_r>
 8006980:	b160      	cbz	r0, 800699c <_Balloc+0x64>
 8006982:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006986:	e00e      	b.n	80069a6 <_Balloc+0x6e>
 8006988:	2221      	movs	r2, #33	; 0x21
 800698a:	2104      	movs	r1, #4
 800698c:	4620      	mov	r0, r4
 800698e:	f001 ff47 	bl	8008820 <_calloc_r>
 8006992:	69e3      	ldr	r3, [r4, #28]
 8006994:	60f0      	str	r0, [r6, #12]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e4      	bne.n	8006966 <_Balloc+0x2e>
 800699c:	2000      	movs	r0, #0
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	6802      	ldr	r2, [r0, #0]
 80069a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069a6:	2300      	movs	r3, #0
 80069a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069ac:	e7f7      	b.n	800699e <_Balloc+0x66>
 80069ae:	bf00      	nop
 80069b0:	0800b93a 	.word	0x0800b93a
 80069b4:	0800b9ba 	.word	0x0800b9ba

080069b8 <_Bfree>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	69c6      	ldr	r6, [r0, #28]
 80069bc:	4605      	mov	r5, r0
 80069be:	460c      	mov	r4, r1
 80069c0:	b976      	cbnz	r6, 80069e0 <_Bfree+0x28>
 80069c2:	2010      	movs	r0, #16
 80069c4:	f7ff ff04 	bl	80067d0 <malloc>
 80069c8:	4602      	mov	r2, r0
 80069ca:	61e8      	str	r0, [r5, #28]
 80069cc:	b920      	cbnz	r0, 80069d8 <_Bfree+0x20>
 80069ce:	218f      	movs	r1, #143	; 0x8f
 80069d0:	4b08      	ldr	r3, [pc, #32]	; (80069f4 <_Bfree+0x3c>)
 80069d2:	4809      	ldr	r0, [pc, #36]	; (80069f8 <_Bfree+0x40>)
 80069d4:	f001 ff06 	bl	80087e4 <__assert_func>
 80069d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069dc:	6006      	str	r6, [r0, #0]
 80069de:	60c6      	str	r6, [r0, #12]
 80069e0:	b13c      	cbz	r4, 80069f2 <_Bfree+0x3a>
 80069e2:	69eb      	ldr	r3, [r5, #28]
 80069e4:	6862      	ldr	r2, [r4, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069ec:	6021      	str	r1, [r4, #0]
 80069ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	0800b93a 	.word	0x0800b93a
 80069f8:	0800b9ba 	.word	0x0800b9ba

080069fc <__multadd>:
 80069fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a00:	4607      	mov	r7, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	461e      	mov	r6, r3
 8006a06:	2000      	movs	r0, #0
 8006a08:	690d      	ldr	r5, [r1, #16]
 8006a0a:	f101 0c14 	add.w	ip, r1, #20
 8006a0e:	f8dc 3000 	ldr.w	r3, [ip]
 8006a12:	3001      	adds	r0, #1
 8006a14:	b299      	uxth	r1, r3
 8006a16:	fb02 6101 	mla	r1, r2, r1, r6
 8006a1a:	0c1e      	lsrs	r6, r3, #16
 8006a1c:	0c0b      	lsrs	r3, r1, #16
 8006a1e:	fb02 3306 	mla	r3, r2, r6, r3
 8006a22:	b289      	uxth	r1, r1
 8006a24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a28:	4285      	cmp	r5, r0
 8006a2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a2e:	f84c 1b04 	str.w	r1, [ip], #4
 8006a32:	dcec      	bgt.n	8006a0e <__multadd+0x12>
 8006a34:	b30e      	cbz	r6, 8006a7a <__multadd+0x7e>
 8006a36:	68a3      	ldr	r3, [r4, #8]
 8006a38:	42ab      	cmp	r3, r5
 8006a3a:	dc19      	bgt.n	8006a70 <__multadd+0x74>
 8006a3c:	6861      	ldr	r1, [r4, #4]
 8006a3e:	4638      	mov	r0, r7
 8006a40:	3101      	adds	r1, #1
 8006a42:	f7ff ff79 	bl	8006938 <_Balloc>
 8006a46:	4680      	mov	r8, r0
 8006a48:	b928      	cbnz	r0, 8006a56 <__multadd+0x5a>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	21ba      	movs	r1, #186	; 0xba
 8006a4e:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <__multadd+0x84>)
 8006a50:	480c      	ldr	r0, [pc, #48]	; (8006a84 <__multadd+0x88>)
 8006a52:	f001 fec7 	bl	80087e4 <__assert_func>
 8006a56:	6922      	ldr	r2, [r4, #16]
 8006a58:	f104 010c 	add.w	r1, r4, #12
 8006a5c:	3202      	adds	r2, #2
 8006a5e:	0092      	lsls	r2, r2, #2
 8006a60:	300c      	adds	r0, #12
 8006a62:	f7fe ffec 	bl	8005a3e <memcpy>
 8006a66:	4621      	mov	r1, r4
 8006a68:	4638      	mov	r0, r7
 8006a6a:	f7ff ffa5 	bl	80069b8 <_Bfree>
 8006a6e:	4644      	mov	r4, r8
 8006a70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a74:	3501      	adds	r5, #1
 8006a76:	615e      	str	r6, [r3, #20]
 8006a78:	6125      	str	r5, [r4, #16]
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a80:	0800b9a9 	.word	0x0800b9a9
 8006a84:	0800b9ba 	.word	0x0800b9ba

08006a88 <__s2b>:
 8006a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a8c:	4615      	mov	r5, r2
 8006a8e:	2209      	movs	r2, #9
 8006a90:	461f      	mov	r7, r3
 8006a92:	3308      	adds	r3, #8
 8006a94:	460c      	mov	r4, r1
 8006a96:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	db09      	blt.n	8006ab8 <__s2b+0x30>
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	f7ff ff47 	bl	8006938 <_Balloc>
 8006aaa:	b940      	cbnz	r0, 8006abe <__s2b+0x36>
 8006aac:	4602      	mov	r2, r0
 8006aae:	21d3      	movs	r1, #211	; 0xd3
 8006ab0:	4b18      	ldr	r3, [pc, #96]	; (8006b14 <__s2b+0x8c>)
 8006ab2:	4819      	ldr	r0, [pc, #100]	; (8006b18 <__s2b+0x90>)
 8006ab4:	f001 fe96 	bl	80087e4 <__assert_func>
 8006ab8:	0052      	lsls	r2, r2, #1
 8006aba:	3101      	adds	r1, #1
 8006abc:	e7f0      	b.n	8006aa0 <__s2b+0x18>
 8006abe:	9b08      	ldr	r3, [sp, #32]
 8006ac0:	2d09      	cmp	r5, #9
 8006ac2:	6143      	str	r3, [r0, #20]
 8006ac4:	f04f 0301 	mov.w	r3, #1
 8006ac8:	6103      	str	r3, [r0, #16]
 8006aca:	dd16      	ble.n	8006afa <__s2b+0x72>
 8006acc:	f104 0909 	add.w	r9, r4, #9
 8006ad0:	46c8      	mov	r8, r9
 8006ad2:	442c      	add	r4, r5
 8006ad4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006ad8:	4601      	mov	r1, r0
 8006ada:	220a      	movs	r2, #10
 8006adc:	4630      	mov	r0, r6
 8006ade:	3b30      	subs	r3, #48	; 0x30
 8006ae0:	f7ff ff8c 	bl	80069fc <__multadd>
 8006ae4:	45a0      	cmp	r8, r4
 8006ae6:	d1f5      	bne.n	8006ad4 <__s2b+0x4c>
 8006ae8:	f1a5 0408 	sub.w	r4, r5, #8
 8006aec:	444c      	add	r4, r9
 8006aee:	1b2d      	subs	r5, r5, r4
 8006af0:	1963      	adds	r3, r4, r5
 8006af2:	42bb      	cmp	r3, r7
 8006af4:	db04      	blt.n	8006b00 <__s2b+0x78>
 8006af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006afa:	2509      	movs	r5, #9
 8006afc:	340a      	adds	r4, #10
 8006afe:	e7f6      	b.n	8006aee <__s2b+0x66>
 8006b00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b04:	4601      	mov	r1, r0
 8006b06:	220a      	movs	r2, #10
 8006b08:	4630      	mov	r0, r6
 8006b0a:	3b30      	subs	r3, #48	; 0x30
 8006b0c:	f7ff ff76 	bl	80069fc <__multadd>
 8006b10:	e7ee      	b.n	8006af0 <__s2b+0x68>
 8006b12:	bf00      	nop
 8006b14:	0800b9a9 	.word	0x0800b9a9
 8006b18:	0800b9ba 	.word	0x0800b9ba

08006b1c <__hi0bits>:
 8006b1c:	0c02      	lsrs	r2, r0, #16
 8006b1e:	0412      	lsls	r2, r2, #16
 8006b20:	4603      	mov	r3, r0
 8006b22:	b9ca      	cbnz	r2, 8006b58 <__hi0bits+0x3c>
 8006b24:	0403      	lsls	r3, r0, #16
 8006b26:	2010      	movs	r0, #16
 8006b28:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006b2c:	bf04      	itt	eq
 8006b2e:	021b      	lsleq	r3, r3, #8
 8006b30:	3008      	addeq	r0, #8
 8006b32:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b36:	bf04      	itt	eq
 8006b38:	011b      	lsleq	r3, r3, #4
 8006b3a:	3004      	addeq	r0, #4
 8006b3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b40:	bf04      	itt	eq
 8006b42:	009b      	lsleq	r3, r3, #2
 8006b44:	3002      	addeq	r0, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	db05      	blt.n	8006b56 <__hi0bits+0x3a>
 8006b4a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006b4e:	f100 0001 	add.w	r0, r0, #1
 8006b52:	bf08      	it	eq
 8006b54:	2020      	moveq	r0, #32
 8006b56:	4770      	bx	lr
 8006b58:	2000      	movs	r0, #0
 8006b5a:	e7e5      	b.n	8006b28 <__hi0bits+0xc>

08006b5c <__lo0bits>:
 8006b5c:	6803      	ldr	r3, [r0, #0]
 8006b5e:	4602      	mov	r2, r0
 8006b60:	f013 0007 	ands.w	r0, r3, #7
 8006b64:	d00b      	beq.n	8006b7e <__lo0bits+0x22>
 8006b66:	07d9      	lsls	r1, r3, #31
 8006b68:	d421      	bmi.n	8006bae <__lo0bits+0x52>
 8006b6a:	0798      	lsls	r0, r3, #30
 8006b6c:	bf49      	itett	mi
 8006b6e:	085b      	lsrmi	r3, r3, #1
 8006b70:	089b      	lsrpl	r3, r3, #2
 8006b72:	2001      	movmi	r0, #1
 8006b74:	6013      	strmi	r3, [r2, #0]
 8006b76:	bf5c      	itt	pl
 8006b78:	2002      	movpl	r0, #2
 8006b7a:	6013      	strpl	r3, [r2, #0]
 8006b7c:	4770      	bx	lr
 8006b7e:	b299      	uxth	r1, r3
 8006b80:	b909      	cbnz	r1, 8006b86 <__lo0bits+0x2a>
 8006b82:	2010      	movs	r0, #16
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	b2d9      	uxtb	r1, r3
 8006b88:	b909      	cbnz	r1, 8006b8e <__lo0bits+0x32>
 8006b8a:	3008      	adds	r0, #8
 8006b8c:	0a1b      	lsrs	r3, r3, #8
 8006b8e:	0719      	lsls	r1, r3, #28
 8006b90:	bf04      	itt	eq
 8006b92:	091b      	lsreq	r3, r3, #4
 8006b94:	3004      	addeq	r0, #4
 8006b96:	0799      	lsls	r1, r3, #30
 8006b98:	bf04      	itt	eq
 8006b9a:	089b      	lsreq	r3, r3, #2
 8006b9c:	3002      	addeq	r0, #2
 8006b9e:	07d9      	lsls	r1, r3, #31
 8006ba0:	d403      	bmi.n	8006baa <__lo0bits+0x4e>
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	f100 0001 	add.w	r0, r0, #1
 8006ba8:	d003      	beq.n	8006bb2 <__lo0bits+0x56>
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	4770      	bx	lr
 8006bae:	2000      	movs	r0, #0
 8006bb0:	4770      	bx	lr
 8006bb2:	2020      	movs	r0, #32
 8006bb4:	4770      	bx	lr
	...

08006bb8 <__i2b>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	460c      	mov	r4, r1
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	f7ff febb 	bl	8006938 <_Balloc>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	b928      	cbnz	r0, 8006bd2 <__i2b+0x1a>
 8006bc6:	f240 1145 	movw	r1, #325	; 0x145
 8006bca:	4b04      	ldr	r3, [pc, #16]	; (8006bdc <__i2b+0x24>)
 8006bcc:	4804      	ldr	r0, [pc, #16]	; (8006be0 <__i2b+0x28>)
 8006bce:	f001 fe09 	bl	80087e4 <__assert_func>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	6144      	str	r4, [r0, #20]
 8006bd6:	6103      	str	r3, [r0, #16]
 8006bd8:	bd10      	pop	{r4, pc}
 8006bda:	bf00      	nop
 8006bdc:	0800b9a9 	.word	0x0800b9a9
 8006be0:	0800b9ba 	.word	0x0800b9ba

08006be4 <__multiply>:
 8006be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	4691      	mov	r9, r2
 8006bea:	690a      	ldr	r2, [r1, #16]
 8006bec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	bfbe      	ittt	lt
 8006bf6:	460b      	movlt	r3, r1
 8006bf8:	464c      	movlt	r4, r9
 8006bfa:	4699      	movlt	r9, r3
 8006bfc:	6927      	ldr	r7, [r4, #16]
 8006bfe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c02:	68a3      	ldr	r3, [r4, #8]
 8006c04:	6861      	ldr	r1, [r4, #4]
 8006c06:	eb07 060a 	add.w	r6, r7, sl
 8006c0a:	42b3      	cmp	r3, r6
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	bfb8      	it	lt
 8006c10:	3101      	addlt	r1, #1
 8006c12:	f7ff fe91 	bl	8006938 <_Balloc>
 8006c16:	b930      	cbnz	r0, 8006c26 <__multiply+0x42>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006c1e:	4b43      	ldr	r3, [pc, #268]	; (8006d2c <__multiply+0x148>)
 8006c20:	4843      	ldr	r0, [pc, #268]	; (8006d30 <__multiply+0x14c>)
 8006c22:	f001 fddf 	bl	80087e4 <__assert_func>
 8006c26:	f100 0514 	add.w	r5, r0, #20
 8006c2a:	462b      	mov	r3, r5
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c32:	4543      	cmp	r3, r8
 8006c34:	d321      	bcc.n	8006c7a <__multiply+0x96>
 8006c36:	f104 0314 	add.w	r3, r4, #20
 8006c3a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c3e:	f109 0314 	add.w	r3, r9, #20
 8006c42:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c46:	9202      	str	r2, [sp, #8]
 8006c48:	1b3a      	subs	r2, r7, r4
 8006c4a:	3a15      	subs	r2, #21
 8006c4c:	f022 0203 	bic.w	r2, r2, #3
 8006c50:	3204      	adds	r2, #4
 8006c52:	f104 0115 	add.w	r1, r4, #21
 8006c56:	428f      	cmp	r7, r1
 8006c58:	bf38      	it	cc
 8006c5a:	2204      	movcc	r2, #4
 8006c5c:	9201      	str	r2, [sp, #4]
 8006c5e:	9a02      	ldr	r2, [sp, #8]
 8006c60:	9303      	str	r3, [sp, #12]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d80c      	bhi.n	8006c80 <__multiply+0x9c>
 8006c66:	2e00      	cmp	r6, #0
 8006c68:	dd03      	ble.n	8006c72 <__multiply+0x8e>
 8006c6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d05a      	beq.n	8006d28 <__multiply+0x144>
 8006c72:	6106      	str	r6, [r0, #16]
 8006c74:	b005      	add	sp, #20
 8006c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7a:	f843 2b04 	str.w	r2, [r3], #4
 8006c7e:	e7d8      	b.n	8006c32 <__multiply+0x4e>
 8006c80:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c84:	f1ba 0f00 	cmp.w	sl, #0
 8006c88:	d023      	beq.n	8006cd2 <__multiply+0xee>
 8006c8a:	46a9      	mov	r9, r5
 8006c8c:	f04f 0c00 	mov.w	ip, #0
 8006c90:	f104 0e14 	add.w	lr, r4, #20
 8006c94:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c98:	f8d9 1000 	ldr.w	r1, [r9]
 8006c9c:	fa1f fb82 	uxth.w	fp, r2
 8006ca0:	b289      	uxth	r1, r1
 8006ca2:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ca6:	4461      	add	r1, ip
 8006ca8:	f8d9 c000 	ldr.w	ip, [r9]
 8006cac:	0c12      	lsrs	r2, r2, #16
 8006cae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006cb2:	fb0a c202 	mla	r2, sl, r2, ip
 8006cb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006cba:	b289      	uxth	r1, r1
 8006cbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cc0:	4577      	cmp	r7, lr
 8006cc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cc6:	f849 1b04 	str.w	r1, [r9], #4
 8006cca:	d8e3      	bhi.n	8006c94 <__multiply+0xb0>
 8006ccc:	9a01      	ldr	r2, [sp, #4]
 8006cce:	f845 c002 	str.w	ip, [r5, r2]
 8006cd2:	9a03      	ldr	r2, [sp, #12]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cda:	f1b9 0f00 	cmp.w	r9, #0
 8006cde:	d021      	beq.n	8006d24 <__multiply+0x140>
 8006ce0:	46ae      	mov	lr, r5
 8006ce2:	f04f 0a00 	mov.w	sl, #0
 8006ce6:	6829      	ldr	r1, [r5, #0]
 8006ce8:	f104 0c14 	add.w	ip, r4, #20
 8006cec:	f8bc b000 	ldrh.w	fp, [ip]
 8006cf0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006cf4:	b289      	uxth	r1, r1
 8006cf6:	fb09 220b 	mla	r2, r9, fp, r2
 8006cfa:	4452      	add	r2, sl
 8006cfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d00:	f84e 1b04 	str.w	r1, [lr], #4
 8006d04:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d0c:	f8be 1000 	ldrh.w	r1, [lr]
 8006d10:	4567      	cmp	r7, ip
 8006d12:	fb09 110a 	mla	r1, r9, sl, r1
 8006d16:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006d1a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d1e:	d8e5      	bhi.n	8006cec <__multiply+0x108>
 8006d20:	9a01      	ldr	r2, [sp, #4]
 8006d22:	50a9      	str	r1, [r5, r2]
 8006d24:	3504      	adds	r5, #4
 8006d26:	e79a      	b.n	8006c5e <__multiply+0x7a>
 8006d28:	3e01      	subs	r6, #1
 8006d2a:	e79c      	b.n	8006c66 <__multiply+0x82>
 8006d2c:	0800b9a9 	.word	0x0800b9a9
 8006d30:	0800b9ba 	.word	0x0800b9ba

08006d34 <__pow5mult>:
 8006d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d38:	4615      	mov	r5, r2
 8006d3a:	f012 0203 	ands.w	r2, r2, #3
 8006d3e:	4606      	mov	r6, r0
 8006d40:	460f      	mov	r7, r1
 8006d42:	d007      	beq.n	8006d54 <__pow5mult+0x20>
 8006d44:	4c25      	ldr	r4, [pc, #148]	; (8006ddc <__pow5mult+0xa8>)
 8006d46:	3a01      	subs	r2, #1
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d4e:	f7ff fe55 	bl	80069fc <__multadd>
 8006d52:	4607      	mov	r7, r0
 8006d54:	10ad      	asrs	r5, r5, #2
 8006d56:	d03d      	beq.n	8006dd4 <__pow5mult+0xa0>
 8006d58:	69f4      	ldr	r4, [r6, #28]
 8006d5a:	b97c      	cbnz	r4, 8006d7c <__pow5mult+0x48>
 8006d5c:	2010      	movs	r0, #16
 8006d5e:	f7ff fd37 	bl	80067d0 <malloc>
 8006d62:	4602      	mov	r2, r0
 8006d64:	61f0      	str	r0, [r6, #28]
 8006d66:	b928      	cbnz	r0, 8006d74 <__pow5mult+0x40>
 8006d68:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006d6c:	4b1c      	ldr	r3, [pc, #112]	; (8006de0 <__pow5mult+0xac>)
 8006d6e:	481d      	ldr	r0, [pc, #116]	; (8006de4 <__pow5mult+0xb0>)
 8006d70:	f001 fd38 	bl	80087e4 <__assert_func>
 8006d74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d78:	6004      	str	r4, [r0, #0]
 8006d7a:	60c4      	str	r4, [r0, #12]
 8006d7c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006d80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d84:	b94c      	cbnz	r4, 8006d9a <__pow5mult+0x66>
 8006d86:	f240 2171 	movw	r1, #625	; 0x271
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f7ff ff14 	bl	8006bb8 <__i2b>
 8006d90:	2300      	movs	r3, #0
 8006d92:	4604      	mov	r4, r0
 8006d94:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d98:	6003      	str	r3, [r0, #0]
 8006d9a:	f04f 0900 	mov.w	r9, #0
 8006d9e:	07eb      	lsls	r3, r5, #31
 8006da0:	d50a      	bpl.n	8006db8 <__pow5mult+0x84>
 8006da2:	4639      	mov	r1, r7
 8006da4:	4622      	mov	r2, r4
 8006da6:	4630      	mov	r0, r6
 8006da8:	f7ff ff1c 	bl	8006be4 <__multiply>
 8006dac:	4680      	mov	r8, r0
 8006dae:	4639      	mov	r1, r7
 8006db0:	4630      	mov	r0, r6
 8006db2:	f7ff fe01 	bl	80069b8 <_Bfree>
 8006db6:	4647      	mov	r7, r8
 8006db8:	106d      	asrs	r5, r5, #1
 8006dba:	d00b      	beq.n	8006dd4 <__pow5mult+0xa0>
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	b938      	cbnz	r0, 8006dd0 <__pow5mult+0x9c>
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7ff ff0d 	bl	8006be4 <__multiply>
 8006dca:	6020      	str	r0, [r4, #0]
 8006dcc:	f8c0 9000 	str.w	r9, [r0]
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	e7e4      	b.n	8006d9e <__pow5mult+0x6a>
 8006dd4:	4638      	mov	r0, r7
 8006dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dda:	bf00      	nop
 8006ddc:	0800bb08 	.word	0x0800bb08
 8006de0:	0800b93a 	.word	0x0800b93a
 8006de4:	0800b9ba 	.word	0x0800b9ba

08006de8 <__lshift>:
 8006de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dec:	460c      	mov	r4, r1
 8006dee:	4607      	mov	r7, r0
 8006df0:	4691      	mov	r9, r2
 8006df2:	6923      	ldr	r3, [r4, #16]
 8006df4:	6849      	ldr	r1, [r1, #4]
 8006df6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dfa:	68a3      	ldr	r3, [r4, #8]
 8006dfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e00:	f108 0601 	add.w	r6, r8, #1
 8006e04:	42b3      	cmp	r3, r6
 8006e06:	db0b      	blt.n	8006e20 <__lshift+0x38>
 8006e08:	4638      	mov	r0, r7
 8006e0a:	f7ff fd95 	bl	8006938 <_Balloc>
 8006e0e:	4605      	mov	r5, r0
 8006e10:	b948      	cbnz	r0, 8006e26 <__lshift+0x3e>
 8006e12:	4602      	mov	r2, r0
 8006e14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006e18:	4b27      	ldr	r3, [pc, #156]	; (8006eb8 <__lshift+0xd0>)
 8006e1a:	4828      	ldr	r0, [pc, #160]	; (8006ebc <__lshift+0xd4>)
 8006e1c:	f001 fce2 	bl	80087e4 <__assert_func>
 8006e20:	3101      	adds	r1, #1
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	e7ee      	b.n	8006e04 <__lshift+0x1c>
 8006e26:	2300      	movs	r3, #0
 8006e28:	f100 0114 	add.w	r1, r0, #20
 8006e2c:	f100 0210 	add.w	r2, r0, #16
 8006e30:	4618      	mov	r0, r3
 8006e32:	4553      	cmp	r3, sl
 8006e34:	db33      	blt.n	8006e9e <__lshift+0xb6>
 8006e36:	6920      	ldr	r0, [r4, #16]
 8006e38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e3c:	f104 0314 	add.w	r3, r4, #20
 8006e40:	f019 091f 	ands.w	r9, r9, #31
 8006e44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e4c:	d02b      	beq.n	8006ea6 <__lshift+0xbe>
 8006e4e:	468a      	mov	sl, r1
 8006e50:	2200      	movs	r2, #0
 8006e52:	f1c9 0e20 	rsb	lr, r9, #32
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	fa00 f009 	lsl.w	r0, r0, r9
 8006e5c:	4310      	orrs	r0, r2
 8006e5e:	f84a 0b04 	str.w	r0, [sl], #4
 8006e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e66:	459c      	cmp	ip, r3
 8006e68:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e6c:	d8f3      	bhi.n	8006e56 <__lshift+0x6e>
 8006e6e:	ebac 0304 	sub.w	r3, ip, r4
 8006e72:	3b15      	subs	r3, #21
 8006e74:	f023 0303 	bic.w	r3, r3, #3
 8006e78:	3304      	adds	r3, #4
 8006e7a:	f104 0015 	add.w	r0, r4, #21
 8006e7e:	4584      	cmp	ip, r0
 8006e80:	bf38      	it	cc
 8006e82:	2304      	movcc	r3, #4
 8006e84:	50ca      	str	r2, [r1, r3]
 8006e86:	b10a      	cbz	r2, 8006e8c <__lshift+0xa4>
 8006e88:	f108 0602 	add.w	r6, r8, #2
 8006e8c:	3e01      	subs	r6, #1
 8006e8e:	4638      	mov	r0, r7
 8006e90:	4621      	mov	r1, r4
 8006e92:	612e      	str	r6, [r5, #16]
 8006e94:	f7ff fd90 	bl	80069b8 <_Bfree>
 8006e98:	4628      	mov	r0, r5
 8006e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	e7c5      	b.n	8006e32 <__lshift+0x4a>
 8006ea6:	3904      	subs	r1, #4
 8006ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eac:	459c      	cmp	ip, r3
 8006eae:	f841 2f04 	str.w	r2, [r1, #4]!
 8006eb2:	d8f9      	bhi.n	8006ea8 <__lshift+0xc0>
 8006eb4:	e7ea      	b.n	8006e8c <__lshift+0xa4>
 8006eb6:	bf00      	nop
 8006eb8:	0800b9a9 	.word	0x0800b9a9
 8006ebc:	0800b9ba 	.word	0x0800b9ba

08006ec0 <__mcmp>:
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	690a      	ldr	r2, [r1, #16]
 8006ec4:	6900      	ldr	r0, [r0, #16]
 8006ec6:	b530      	push	{r4, r5, lr}
 8006ec8:	1a80      	subs	r0, r0, r2
 8006eca:	d10d      	bne.n	8006ee8 <__mcmp+0x28>
 8006ecc:	3314      	adds	r3, #20
 8006ece:	3114      	adds	r1, #20
 8006ed0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ed4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ed8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006edc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ee0:	4295      	cmp	r5, r2
 8006ee2:	d002      	beq.n	8006eea <__mcmp+0x2a>
 8006ee4:	d304      	bcc.n	8006ef0 <__mcmp+0x30>
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	bd30      	pop	{r4, r5, pc}
 8006eea:	42a3      	cmp	r3, r4
 8006eec:	d3f4      	bcc.n	8006ed8 <__mcmp+0x18>
 8006eee:	e7fb      	b.n	8006ee8 <__mcmp+0x28>
 8006ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef4:	e7f8      	b.n	8006ee8 <__mcmp+0x28>
	...

08006ef8 <__mdiff>:
 8006ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	460d      	mov	r5, r1
 8006efe:	4607      	mov	r7, r0
 8006f00:	4611      	mov	r1, r2
 8006f02:	4628      	mov	r0, r5
 8006f04:	4614      	mov	r4, r2
 8006f06:	f7ff ffdb 	bl	8006ec0 <__mcmp>
 8006f0a:	1e06      	subs	r6, r0, #0
 8006f0c:	d111      	bne.n	8006f32 <__mdiff+0x3a>
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4638      	mov	r0, r7
 8006f12:	f7ff fd11 	bl	8006938 <_Balloc>
 8006f16:	4602      	mov	r2, r0
 8006f18:	b928      	cbnz	r0, 8006f26 <__mdiff+0x2e>
 8006f1a:	f240 2137 	movw	r1, #567	; 0x237
 8006f1e:	4b3a      	ldr	r3, [pc, #232]	; (8007008 <__mdiff+0x110>)
 8006f20:	483a      	ldr	r0, [pc, #232]	; (800700c <__mdiff+0x114>)
 8006f22:	f001 fc5f 	bl	80087e4 <__assert_func>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f32:	bfa4      	itt	ge
 8006f34:	4623      	movge	r3, r4
 8006f36:	462c      	movge	r4, r5
 8006f38:	4638      	mov	r0, r7
 8006f3a:	6861      	ldr	r1, [r4, #4]
 8006f3c:	bfa6      	itte	ge
 8006f3e:	461d      	movge	r5, r3
 8006f40:	2600      	movge	r6, #0
 8006f42:	2601      	movlt	r6, #1
 8006f44:	f7ff fcf8 	bl	8006938 <_Balloc>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	b918      	cbnz	r0, 8006f54 <__mdiff+0x5c>
 8006f4c:	f240 2145 	movw	r1, #581	; 0x245
 8006f50:	4b2d      	ldr	r3, [pc, #180]	; (8007008 <__mdiff+0x110>)
 8006f52:	e7e5      	b.n	8006f20 <__mdiff+0x28>
 8006f54:	f102 0814 	add.w	r8, r2, #20
 8006f58:	46c2      	mov	sl, r8
 8006f5a:	f04f 0c00 	mov.w	ip, #0
 8006f5e:	6927      	ldr	r7, [r4, #16]
 8006f60:	60c6      	str	r6, [r0, #12]
 8006f62:	692e      	ldr	r6, [r5, #16]
 8006f64:	f104 0014 	add.w	r0, r4, #20
 8006f68:	f105 0914 	add.w	r9, r5, #20
 8006f6c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006f70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f74:	3410      	adds	r4, #16
 8006f76:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006f7a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f7e:	fa1f f18b 	uxth.w	r1, fp
 8006f82:	4461      	add	r1, ip
 8006f84:	fa1f fc83 	uxth.w	ip, r3
 8006f88:	0c1b      	lsrs	r3, r3, #16
 8006f8a:	eba1 010c 	sub.w	r1, r1, ip
 8006f8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f92:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006f96:	b289      	uxth	r1, r1
 8006f98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006f9c:	454e      	cmp	r6, r9
 8006f9e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006fa2:	f84a 1b04 	str.w	r1, [sl], #4
 8006fa6:	d8e6      	bhi.n	8006f76 <__mdiff+0x7e>
 8006fa8:	1b73      	subs	r3, r6, r5
 8006faa:	3b15      	subs	r3, #21
 8006fac:	f023 0303 	bic.w	r3, r3, #3
 8006fb0:	3515      	adds	r5, #21
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	42ae      	cmp	r6, r5
 8006fb6:	bf38      	it	cc
 8006fb8:	2304      	movcc	r3, #4
 8006fba:	4418      	add	r0, r3
 8006fbc:	4443      	add	r3, r8
 8006fbe:	461e      	mov	r6, r3
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	4575      	cmp	r5, lr
 8006fc4:	d30e      	bcc.n	8006fe4 <__mdiff+0xec>
 8006fc6:	f10e 0103 	add.w	r1, lr, #3
 8006fca:	1a09      	subs	r1, r1, r0
 8006fcc:	f021 0103 	bic.w	r1, r1, #3
 8006fd0:	3803      	subs	r0, #3
 8006fd2:	4586      	cmp	lr, r0
 8006fd4:	bf38      	it	cc
 8006fd6:	2100      	movcc	r1, #0
 8006fd8:	440b      	add	r3, r1
 8006fda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fde:	b189      	cbz	r1, 8007004 <__mdiff+0x10c>
 8006fe0:	6117      	str	r7, [r2, #16]
 8006fe2:	e7a3      	b.n	8006f2c <__mdiff+0x34>
 8006fe4:	f855 8b04 	ldr.w	r8, [r5], #4
 8006fe8:	fa1f f188 	uxth.w	r1, r8
 8006fec:	4461      	add	r1, ip
 8006fee:	140c      	asrs	r4, r1, #16
 8006ff0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ff4:	b289      	uxth	r1, r1
 8006ff6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ffa:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006ffe:	f846 1b04 	str.w	r1, [r6], #4
 8007002:	e7de      	b.n	8006fc2 <__mdiff+0xca>
 8007004:	3f01      	subs	r7, #1
 8007006:	e7e8      	b.n	8006fda <__mdiff+0xe2>
 8007008:	0800b9a9 	.word	0x0800b9a9
 800700c:	0800b9ba 	.word	0x0800b9ba

08007010 <__ulp>:
 8007010:	4b0e      	ldr	r3, [pc, #56]	; (800704c <__ulp+0x3c>)
 8007012:	400b      	ands	r3, r1
 8007014:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007018:	2b00      	cmp	r3, #0
 800701a:	dc08      	bgt.n	800702e <__ulp+0x1e>
 800701c:	425b      	negs	r3, r3
 800701e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007022:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007026:	da04      	bge.n	8007032 <__ulp+0x22>
 8007028:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800702c:	4113      	asrs	r3, r2
 800702e:	2200      	movs	r2, #0
 8007030:	e008      	b.n	8007044 <__ulp+0x34>
 8007032:	f1a2 0314 	sub.w	r3, r2, #20
 8007036:	2b1e      	cmp	r3, #30
 8007038:	bfd6      	itet	le
 800703a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800703e:	2201      	movgt	r2, #1
 8007040:	40da      	lsrle	r2, r3
 8007042:	2300      	movs	r3, #0
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	7ff00000 	.word	0x7ff00000

08007050 <__b2d>:
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	6905      	ldr	r5, [r0, #16]
 8007054:	f100 0714 	add.w	r7, r0, #20
 8007058:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800705c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007060:	1f2e      	subs	r6, r5, #4
 8007062:	4620      	mov	r0, r4
 8007064:	f7ff fd5a 	bl	8006b1c <__hi0bits>
 8007068:	f1c0 0220 	rsb	r2, r0, #32
 800706c:	280a      	cmp	r0, #10
 800706e:	4603      	mov	r3, r0
 8007070:	f8df c068 	ldr.w	ip, [pc, #104]	; 80070dc <__b2d+0x8c>
 8007074:	600a      	str	r2, [r1, #0]
 8007076:	dc12      	bgt.n	800709e <__b2d+0x4e>
 8007078:	f1c0 0e0b 	rsb	lr, r0, #11
 800707c:	fa24 f20e 	lsr.w	r2, r4, lr
 8007080:	42b7      	cmp	r7, r6
 8007082:	ea42 010c 	orr.w	r1, r2, ip
 8007086:	bf2c      	ite	cs
 8007088:	2200      	movcs	r2, #0
 800708a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800708e:	3315      	adds	r3, #21
 8007090:	fa04 f303 	lsl.w	r3, r4, r3
 8007094:	fa22 f20e 	lsr.w	r2, r2, lr
 8007098:	431a      	orrs	r2, r3
 800709a:	4610      	mov	r0, r2
 800709c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800709e:	42b7      	cmp	r7, r6
 80070a0:	bf2e      	itee	cs
 80070a2:	2200      	movcs	r2, #0
 80070a4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80070a8:	f1a5 0608 	subcc.w	r6, r5, #8
 80070ac:	3b0b      	subs	r3, #11
 80070ae:	d012      	beq.n	80070d6 <__b2d+0x86>
 80070b0:	f1c3 0520 	rsb	r5, r3, #32
 80070b4:	fa22 f105 	lsr.w	r1, r2, r5
 80070b8:	409c      	lsls	r4, r3
 80070ba:	430c      	orrs	r4, r1
 80070bc:	42be      	cmp	r6, r7
 80070be:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80070c2:	bf94      	ite	ls
 80070c4:	2400      	movls	r4, #0
 80070c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80070ca:	409a      	lsls	r2, r3
 80070cc:	40ec      	lsrs	r4, r5
 80070ce:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80070d2:	4322      	orrs	r2, r4
 80070d4:	e7e1      	b.n	800709a <__b2d+0x4a>
 80070d6:	ea44 010c 	orr.w	r1, r4, ip
 80070da:	e7de      	b.n	800709a <__b2d+0x4a>
 80070dc:	3ff00000 	.word	0x3ff00000

080070e0 <__d2b>:
 80070e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070e2:	2101      	movs	r1, #1
 80070e4:	4617      	mov	r7, r2
 80070e6:	461c      	mov	r4, r3
 80070e8:	9e08      	ldr	r6, [sp, #32]
 80070ea:	f7ff fc25 	bl	8006938 <_Balloc>
 80070ee:	4605      	mov	r5, r0
 80070f0:	b930      	cbnz	r0, 8007100 <__d2b+0x20>
 80070f2:	4602      	mov	r2, r0
 80070f4:	f240 310f 	movw	r1, #783	; 0x30f
 80070f8:	4b22      	ldr	r3, [pc, #136]	; (8007184 <__d2b+0xa4>)
 80070fa:	4823      	ldr	r0, [pc, #140]	; (8007188 <__d2b+0xa8>)
 80070fc:	f001 fb72 	bl	80087e4 <__assert_func>
 8007100:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007104:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007108:	bb24      	cbnz	r4, 8007154 <__d2b+0x74>
 800710a:	2f00      	cmp	r7, #0
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	d026      	beq.n	800715e <__d2b+0x7e>
 8007110:	4668      	mov	r0, sp
 8007112:	9700      	str	r7, [sp, #0]
 8007114:	f7ff fd22 	bl	8006b5c <__lo0bits>
 8007118:	e9dd 1200 	ldrd	r1, r2, [sp]
 800711c:	b1e8      	cbz	r0, 800715a <__d2b+0x7a>
 800711e:	f1c0 0320 	rsb	r3, r0, #32
 8007122:	fa02 f303 	lsl.w	r3, r2, r3
 8007126:	430b      	orrs	r3, r1
 8007128:	40c2      	lsrs	r2, r0
 800712a:	616b      	str	r3, [r5, #20]
 800712c:	9201      	str	r2, [sp, #4]
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	bf14      	ite	ne
 8007134:	2102      	movne	r1, #2
 8007136:	2101      	moveq	r1, #1
 8007138:	61ab      	str	r3, [r5, #24]
 800713a:	6129      	str	r1, [r5, #16]
 800713c:	b1bc      	cbz	r4, 800716e <__d2b+0x8e>
 800713e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007142:	4404      	add	r4, r0
 8007144:	6034      	str	r4, [r6, #0]
 8007146:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800714a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714c:	6018      	str	r0, [r3, #0]
 800714e:	4628      	mov	r0, r5
 8007150:	b003      	add	sp, #12
 8007152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007154:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007158:	e7d7      	b.n	800710a <__d2b+0x2a>
 800715a:	6169      	str	r1, [r5, #20]
 800715c:	e7e7      	b.n	800712e <__d2b+0x4e>
 800715e:	a801      	add	r0, sp, #4
 8007160:	f7ff fcfc 	bl	8006b5c <__lo0bits>
 8007164:	9b01      	ldr	r3, [sp, #4]
 8007166:	2101      	movs	r1, #1
 8007168:	616b      	str	r3, [r5, #20]
 800716a:	3020      	adds	r0, #32
 800716c:	e7e5      	b.n	800713a <__d2b+0x5a>
 800716e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007172:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007176:	6030      	str	r0, [r6, #0]
 8007178:	6918      	ldr	r0, [r3, #16]
 800717a:	f7ff fccf 	bl	8006b1c <__hi0bits>
 800717e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007182:	e7e2      	b.n	800714a <__d2b+0x6a>
 8007184:	0800b9a9 	.word	0x0800b9a9
 8007188:	0800b9ba 	.word	0x0800b9ba

0800718c <__ratio>:
 800718c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	4688      	mov	r8, r1
 8007192:	4669      	mov	r1, sp
 8007194:	4681      	mov	r9, r0
 8007196:	f7ff ff5b 	bl	8007050 <__b2d>
 800719a:	460f      	mov	r7, r1
 800719c:	4604      	mov	r4, r0
 800719e:	460d      	mov	r5, r1
 80071a0:	4640      	mov	r0, r8
 80071a2:	a901      	add	r1, sp, #4
 80071a4:	f7ff ff54 	bl	8007050 <__b2d>
 80071a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80071b0:	468b      	mov	fp, r1
 80071b2:	eba3 0c02 	sub.w	ip, r3, r2
 80071b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80071ba:	1a9b      	subs	r3, r3, r2
 80071bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfd5      	itete	le
 80071c4:	460a      	movle	r2, r1
 80071c6:	462a      	movgt	r2, r5
 80071c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80071cc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80071d0:	bfd8      	it	le
 80071d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80071d6:	465b      	mov	r3, fp
 80071d8:	4602      	mov	r2, r0
 80071da:	4639      	mov	r1, r7
 80071dc:	4620      	mov	r0, r4
 80071de:	f7f9 fab5 	bl	800074c <__aeabi_ddiv>
 80071e2:	b003      	add	sp, #12
 80071e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071e8 <__copybits>:
 80071e8:	3901      	subs	r1, #1
 80071ea:	b570      	push	{r4, r5, r6, lr}
 80071ec:	1149      	asrs	r1, r1, #5
 80071ee:	6914      	ldr	r4, [r2, #16]
 80071f0:	3101      	adds	r1, #1
 80071f2:	f102 0314 	add.w	r3, r2, #20
 80071f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80071fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80071fe:	1f05      	subs	r5, r0, #4
 8007200:	42a3      	cmp	r3, r4
 8007202:	d30c      	bcc.n	800721e <__copybits+0x36>
 8007204:	1aa3      	subs	r3, r4, r2
 8007206:	3b11      	subs	r3, #17
 8007208:	f023 0303 	bic.w	r3, r3, #3
 800720c:	3211      	adds	r2, #17
 800720e:	42a2      	cmp	r2, r4
 8007210:	bf88      	it	hi
 8007212:	2300      	movhi	r3, #0
 8007214:	4418      	add	r0, r3
 8007216:	2300      	movs	r3, #0
 8007218:	4288      	cmp	r0, r1
 800721a:	d305      	bcc.n	8007228 <__copybits+0x40>
 800721c:	bd70      	pop	{r4, r5, r6, pc}
 800721e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007222:	f845 6f04 	str.w	r6, [r5, #4]!
 8007226:	e7eb      	b.n	8007200 <__copybits+0x18>
 8007228:	f840 3b04 	str.w	r3, [r0], #4
 800722c:	e7f4      	b.n	8007218 <__copybits+0x30>

0800722e <__any_on>:
 800722e:	f100 0214 	add.w	r2, r0, #20
 8007232:	6900      	ldr	r0, [r0, #16]
 8007234:	114b      	asrs	r3, r1, #5
 8007236:	4298      	cmp	r0, r3
 8007238:	b510      	push	{r4, lr}
 800723a:	db11      	blt.n	8007260 <__any_on+0x32>
 800723c:	dd0a      	ble.n	8007254 <__any_on+0x26>
 800723e:	f011 011f 	ands.w	r1, r1, #31
 8007242:	d007      	beq.n	8007254 <__any_on+0x26>
 8007244:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007248:	fa24 f001 	lsr.w	r0, r4, r1
 800724c:	fa00 f101 	lsl.w	r1, r0, r1
 8007250:	428c      	cmp	r4, r1
 8007252:	d10b      	bne.n	800726c <__any_on+0x3e>
 8007254:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007258:	4293      	cmp	r3, r2
 800725a:	d803      	bhi.n	8007264 <__any_on+0x36>
 800725c:	2000      	movs	r0, #0
 800725e:	bd10      	pop	{r4, pc}
 8007260:	4603      	mov	r3, r0
 8007262:	e7f7      	b.n	8007254 <__any_on+0x26>
 8007264:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007268:	2900      	cmp	r1, #0
 800726a:	d0f5      	beq.n	8007258 <__any_on+0x2a>
 800726c:	2001      	movs	r0, #1
 800726e:	e7f6      	b.n	800725e <__any_on+0x30>

08007270 <sulp>:
 8007270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007274:	460f      	mov	r7, r1
 8007276:	4690      	mov	r8, r2
 8007278:	f7ff feca 	bl	8007010 <__ulp>
 800727c:	4604      	mov	r4, r0
 800727e:	460d      	mov	r5, r1
 8007280:	f1b8 0f00 	cmp.w	r8, #0
 8007284:	d011      	beq.n	80072aa <sulp+0x3a>
 8007286:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800728a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800728e:	2b00      	cmp	r3, #0
 8007290:	dd0b      	ble.n	80072aa <sulp+0x3a>
 8007292:	2400      	movs	r4, #0
 8007294:	051b      	lsls	r3, r3, #20
 8007296:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800729a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800729e:	4622      	mov	r2, r4
 80072a0:	462b      	mov	r3, r5
 80072a2:	f7f9 f929 	bl	80004f8 <__aeabi_dmul>
 80072a6:	4604      	mov	r4, r0
 80072a8:	460d      	mov	r5, r1
 80072aa:	4620      	mov	r0, r4
 80072ac:	4629      	mov	r1, r5
 80072ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b2:	0000      	movs	r0, r0
 80072b4:	0000      	movs	r0, r0
	...

080072b8 <_strtod_l>:
 80072b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	b09f      	sub	sp, #124	; 0x7c
 80072be:	9217      	str	r2, [sp, #92]	; 0x5c
 80072c0:	2200      	movs	r2, #0
 80072c2:	4604      	mov	r4, r0
 80072c4:	921a      	str	r2, [sp, #104]	; 0x68
 80072c6:	460d      	mov	r5, r1
 80072c8:	f04f 0800 	mov.w	r8, #0
 80072cc:	f04f 0900 	mov.w	r9, #0
 80072d0:	460a      	mov	r2, r1
 80072d2:	9219      	str	r2, [sp, #100]	; 0x64
 80072d4:	7811      	ldrb	r1, [r2, #0]
 80072d6:	292b      	cmp	r1, #43	; 0x2b
 80072d8:	d04a      	beq.n	8007370 <_strtod_l+0xb8>
 80072da:	d838      	bhi.n	800734e <_strtod_l+0x96>
 80072dc:	290d      	cmp	r1, #13
 80072de:	d832      	bhi.n	8007346 <_strtod_l+0x8e>
 80072e0:	2908      	cmp	r1, #8
 80072e2:	d832      	bhi.n	800734a <_strtod_l+0x92>
 80072e4:	2900      	cmp	r1, #0
 80072e6:	d03b      	beq.n	8007360 <_strtod_l+0xa8>
 80072e8:	2200      	movs	r2, #0
 80072ea:	920e      	str	r2, [sp, #56]	; 0x38
 80072ec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80072ee:	7832      	ldrb	r2, [r6, #0]
 80072f0:	2a30      	cmp	r2, #48	; 0x30
 80072f2:	f040 80b2 	bne.w	800745a <_strtod_l+0x1a2>
 80072f6:	7872      	ldrb	r2, [r6, #1]
 80072f8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80072fc:	2a58      	cmp	r2, #88	; 0x58
 80072fe:	d16e      	bne.n	80073de <_strtod_l+0x126>
 8007300:	9302      	str	r3, [sp, #8]
 8007302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007304:	4620      	mov	r0, r4
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	ab1a      	add	r3, sp, #104	; 0x68
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	4a8c      	ldr	r2, [pc, #560]	; (8007540 <_strtod_l+0x288>)
 800730e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007310:	a919      	add	r1, sp, #100	; 0x64
 8007312:	f001 fb01 	bl	8008918 <__gethex>
 8007316:	f010 070f 	ands.w	r7, r0, #15
 800731a:	4605      	mov	r5, r0
 800731c:	d005      	beq.n	800732a <_strtod_l+0x72>
 800731e:	2f06      	cmp	r7, #6
 8007320:	d128      	bne.n	8007374 <_strtod_l+0xbc>
 8007322:	2300      	movs	r3, #0
 8007324:	3601      	adds	r6, #1
 8007326:	9619      	str	r6, [sp, #100]	; 0x64
 8007328:	930e      	str	r3, [sp, #56]	; 0x38
 800732a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800732c:	2b00      	cmp	r3, #0
 800732e:	f040 85a0 	bne.w	8007e72 <_strtod_l+0xbba>
 8007332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007334:	b1cb      	cbz	r3, 800736a <_strtod_l+0xb2>
 8007336:	4642      	mov	r2, r8
 8007338:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800733c:	4610      	mov	r0, r2
 800733e:	4619      	mov	r1, r3
 8007340:	b01f      	add	sp, #124	; 0x7c
 8007342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007346:	2920      	cmp	r1, #32
 8007348:	d1ce      	bne.n	80072e8 <_strtod_l+0x30>
 800734a:	3201      	adds	r2, #1
 800734c:	e7c1      	b.n	80072d2 <_strtod_l+0x1a>
 800734e:	292d      	cmp	r1, #45	; 0x2d
 8007350:	d1ca      	bne.n	80072e8 <_strtod_l+0x30>
 8007352:	2101      	movs	r1, #1
 8007354:	910e      	str	r1, [sp, #56]	; 0x38
 8007356:	1c51      	adds	r1, r2, #1
 8007358:	9119      	str	r1, [sp, #100]	; 0x64
 800735a:	7852      	ldrb	r2, [r2, #1]
 800735c:	2a00      	cmp	r2, #0
 800735e:	d1c5      	bne.n	80072ec <_strtod_l+0x34>
 8007360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007362:	9519      	str	r5, [sp, #100]	; 0x64
 8007364:	2b00      	cmp	r3, #0
 8007366:	f040 8582 	bne.w	8007e6e <_strtod_l+0xbb6>
 800736a:	4642      	mov	r2, r8
 800736c:	464b      	mov	r3, r9
 800736e:	e7e5      	b.n	800733c <_strtod_l+0x84>
 8007370:	2100      	movs	r1, #0
 8007372:	e7ef      	b.n	8007354 <_strtod_l+0x9c>
 8007374:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007376:	b13a      	cbz	r2, 8007388 <_strtod_l+0xd0>
 8007378:	2135      	movs	r1, #53	; 0x35
 800737a:	a81c      	add	r0, sp, #112	; 0x70
 800737c:	f7ff ff34 	bl	80071e8 <__copybits>
 8007380:	4620      	mov	r0, r4
 8007382:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007384:	f7ff fb18 	bl	80069b8 <_Bfree>
 8007388:	3f01      	subs	r7, #1
 800738a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800738c:	2f04      	cmp	r7, #4
 800738e:	d806      	bhi.n	800739e <_strtod_l+0xe6>
 8007390:	e8df f007 	tbb	[pc, r7]
 8007394:	201d0314 	.word	0x201d0314
 8007398:	14          	.byte	0x14
 8007399:	00          	.byte	0x00
 800739a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800739e:	05e9      	lsls	r1, r5, #23
 80073a0:	bf48      	it	mi
 80073a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80073a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073aa:	0d1b      	lsrs	r3, r3, #20
 80073ac:	051b      	lsls	r3, r3, #20
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1bb      	bne.n	800732a <_strtod_l+0x72>
 80073b2:	f7fe fb09 	bl	80059c8 <__errno>
 80073b6:	2322      	movs	r3, #34	; 0x22
 80073b8:	6003      	str	r3, [r0, #0]
 80073ba:	e7b6      	b.n	800732a <_strtod_l+0x72>
 80073bc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80073c0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80073c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80073c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80073cc:	e7e7      	b.n	800739e <_strtod_l+0xe6>
 80073ce:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007544 <_strtod_l+0x28c>
 80073d2:	e7e4      	b.n	800739e <_strtod_l+0xe6>
 80073d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80073d8:	f04f 38ff 	mov.w	r8, #4294967295
 80073dc:	e7df      	b.n	800739e <_strtod_l+0xe6>
 80073de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	9219      	str	r2, [sp, #100]	; 0x64
 80073e4:	785b      	ldrb	r3, [r3, #1]
 80073e6:	2b30      	cmp	r3, #48	; 0x30
 80073e8:	d0f9      	beq.n	80073de <_strtod_l+0x126>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d09d      	beq.n	800732a <_strtod_l+0x72>
 80073ee:	2301      	movs	r3, #1
 80073f0:	f04f 0a00 	mov.w	sl, #0
 80073f4:	220a      	movs	r2, #10
 80073f6:	46d3      	mov	fp, sl
 80073f8:	9305      	str	r3, [sp, #20]
 80073fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073fc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007400:	930b      	str	r3, [sp, #44]	; 0x2c
 8007402:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007404:	7806      	ldrb	r6, [r0, #0]
 8007406:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800740a:	b2d9      	uxtb	r1, r3
 800740c:	2909      	cmp	r1, #9
 800740e:	d926      	bls.n	800745e <_strtod_l+0x1a6>
 8007410:	2201      	movs	r2, #1
 8007412:	494d      	ldr	r1, [pc, #308]	; (8007548 <_strtod_l+0x290>)
 8007414:	f001 f9be 	bl	8008794 <strncmp>
 8007418:	2800      	cmp	r0, #0
 800741a:	d030      	beq.n	800747e <_strtod_l+0x1c6>
 800741c:	2000      	movs	r0, #0
 800741e:	4632      	mov	r2, r6
 8007420:	4603      	mov	r3, r0
 8007422:	465e      	mov	r6, fp
 8007424:	9008      	str	r0, [sp, #32]
 8007426:	2a65      	cmp	r2, #101	; 0x65
 8007428:	d001      	beq.n	800742e <_strtod_l+0x176>
 800742a:	2a45      	cmp	r2, #69	; 0x45
 800742c:	d113      	bne.n	8007456 <_strtod_l+0x19e>
 800742e:	b91e      	cbnz	r6, 8007438 <_strtod_l+0x180>
 8007430:	9a05      	ldr	r2, [sp, #20]
 8007432:	4302      	orrs	r2, r0
 8007434:	d094      	beq.n	8007360 <_strtod_l+0xa8>
 8007436:	2600      	movs	r6, #0
 8007438:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800743a:	1c6a      	adds	r2, r5, #1
 800743c:	9219      	str	r2, [sp, #100]	; 0x64
 800743e:	786a      	ldrb	r2, [r5, #1]
 8007440:	2a2b      	cmp	r2, #43	; 0x2b
 8007442:	d074      	beq.n	800752e <_strtod_l+0x276>
 8007444:	2a2d      	cmp	r2, #45	; 0x2d
 8007446:	d078      	beq.n	800753a <_strtod_l+0x282>
 8007448:	f04f 0c00 	mov.w	ip, #0
 800744c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007450:	2909      	cmp	r1, #9
 8007452:	d97f      	bls.n	8007554 <_strtod_l+0x29c>
 8007454:	9519      	str	r5, [sp, #100]	; 0x64
 8007456:	2700      	movs	r7, #0
 8007458:	e09e      	b.n	8007598 <_strtod_l+0x2e0>
 800745a:	2300      	movs	r3, #0
 800745c:	e7c8      	b.n	80073f0 <_strtod_l+0x138>
 800745e:	f1bb 0f08 	cmp.w	fp, #8
 8007462:	bfd8      	it	le
 8007464:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007466:	f100 0001 	add.w	r0, r0, #1
 800746a:	bfd6      	itet	le
 800746c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007470:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007474:	930a      	strle	r3, [sp, #40]	; 0x28
 8007476:	f10b 0b01 	add.w	fp, fp, #1
 800747a:	9019      	str	r0, [sp, #100]	; 0x64
 800747c:	e7c1      	b.n	8007402 <_strtod_l+0x14a>
 800747e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	9219      	str	r2, [sp, #100]	; 0x64
 8007484:	785a      	ldrb	r2, [r3, #1]
 8007486:	f1bb 0f00 	cmp.w	fp, #0
 800748a:	d037      	beq.n	80074fc <_strtod_l+0x244>
 800748c:	465e      	mov	r6, fp
 800748e:	9008      	str	r0, [sp, #32]
 8007490:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007494:	2b09      	cmp	r3, #9
 8007496:	d912      	bls.n	80074be <_strtod_l+0x206>
 8007498:	2301      	movs	r3, #1
 800749a:	e7c4      	b.n	8007426 <_strtod_l+0x16e>
 800749c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800749e:	3001      	adds	r0, #1
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	9219      	str	r2, [sp, #100]	; 0x64
 80074a4:	785a      	ldrb	r2, [r3, #1]
 80074a6:	2a30      	cmp	r2, #48	; 0x30
 80074a8:	d0f8      	beq.n	800749c <_strtod_l+0x1e4>
 80074aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80074ae:	2b08      	cmp	r3, #8
 80074b0:	f200 84e4 	bhi.w	8007e7c <_strtod_l+0xbc4>
 80074b4:	9008      	str	r0, [sp, #32]
 80074b6:	2000      	movs	r0, #0
 80074b8:	4606      	mov	r6, r0
 80074ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80074be:	3a30      	subs	r2, #48	; 0x30
 80074c0:	f100 0301 	add.w	r3, r0, #1
 80074c4:	d014      	beq.n	80074f0 <_strtod_l+0x238>
 80074c6:	9908      	ldr	r1, [sp, #32]
 80074c8:	eb00 0c06 	add.w	ip, r0, r6
 80074cc:	4419      	add	r1, r3
 80074ce:	9108      	str	r1, [sp, #32]
 80074d0:	4633      	mov	r3, r6
 80074d2:	210a      	movs	r1, #10
 80074d4:	4563      	cmp	r3, ip
 80074d6:	d113      	bne.n	8007500 <_strtod_l+0x248>
 80074d8:	1833      	adds	r3, r6, r0
 80074da:	2b08      	cmp	r3, #8
 80074dc:	f106 0601 	add.w	r6, r6, #1
 80074e0:	4406      	add	r6, r0
 80074e2:	dc1a      	bgt.n	800751a <_strtod_l+0x262>
 80074e4:	230a      	movs	r3, #10
 80074e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074e8:	fb03 2301 	mla	r3, r3, r1, r2
 80074ec:	930a      	str	r3, [sp, #40]	; 0x28
 80074ee:	2300      	movs	r3, #0
 80074f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80074f2:	4618      	mov	r0, r3
 80074f4:	1c51      	adds	r1, r2, #1
 80074f6:	9119      	str	r1, [sp, #100]	; 0x64
 80074f8:	7852      	ldrb	r2, [r2, #1]
 80074fa:	e7c9      	b.n	8007490 <_strtod_l+0x1d8>
 80074fc:	4658      	mov	r0, fp
 80074fe:	e7d2      	b.n	80074a6 <_strtod_l+0x1ee>
 8007500:	2b08      	cmp	r3, #8
 8007502:	f103 0301 	add.w	r3, r3, #1
 8007506:	dc03      	bgt.n	8007510 <_strtod_l+0x258>
 8007508:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800750a:	434f      	muls	r7, r1
 800750c:	970a      	str	r7, [sp, #40]	; 0x28
 800750e:	e7e1      	b.n	80074d4 <_strtod_l+0x21c>
 8007510:	2b10      	cmp	r3, #16
 8007512:	bfd8      	it	le
 8007514:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007518:	e7dc      	b.n	80074d4 <_strtod_l+0x21c>
 800751a:	2e10      	cmp	r6, #16
 800751c:	bfdc      	itt	le
 800751e:	230a      	movle	r3, #10
 8007520:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007524:	e7e3      	b.n	80074ee <_strtod_l+0x236>
 8007526:	2300      	movs	r3, #0
 8007528:	9308      	str	r3, [sp, #32]
 800752a:	2301      	movs	r3, #1
 800752c:	e780      	b.n	8007430 <_strtod_l+0x178>
 800752e:	f04f 0c00 	mov.w	ip, #0
 8007532:	1caa      	adds	r2, r5, #2
 8007534:	9219      	str	r2, [sp, #100]	; 0x64
 8007536:	78aa      	ldrb	r2, [r5, #2]
 8007538:	e788      	b.n	800744c <_strtod_l+0x194>
 800753a:	f04f 0c01 	mov.w	ip, #1
 800753e:	e7f8      	b.n	8007532 <_strtod_l+0x27a>
 8007540:	0800bb18 	.word	0x0800bb18
 8007544:	7ff00000 	.word	0x7ff00000
 8007548:	0800bb14 	.word	0x0800bb14
 800754c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800754e:	1c51      	adds	r1, r2, #1
 8007550:	9119      	str	r1, [sp, #100]	; 0x64
 8007552:	7852      	ldrb	r2, [r2, #1]
 8007554:	2a30      	cmp	r2, #48	; 0x30
 8007556:	d0f9      	beq.n	800754c <_strtod_l+0x294>
 8007558:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800755c:	2908      	cmp	r1, #8
 800755e:	f63f af7a 	bhi.w	8007456 <_strtod_l+0x19e>
 8007562:	3a30      	subs	r2, #48	; 0x30
 8007564:	9209      	str	r2, [sp, #36]	; 0x24
 8007566:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007568:	920c      	str	r2, [sp, #48]	; 0x30
 800756a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800756c:	1c57      	adds	r7, r2, #1
 800756e:	9719      	str	r7, [sp, #100]	; 0x64
 8007570:	7852      	ldrb	r2, [r2, #1]
 8007572:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007576:	f1be 0f09 	cmp.w	lr, #9
 800757a:	d938      	bls.n	80075ee <_strtod_l+0x336>
 800757c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800757e:	1a7f      	subs	r7, r7, r1
 8007580:	2f08      	cmp	r7, #8
 8007582:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007586:	dc03      	bgt.n	8007590 <_strtod_l+0x2d8>
 8007588:	9909      	ldr	r1, [sp, #36]	; 0x24
 800758a:	428f      	cmp	r7, r1
 800758c:	bfa8      	it	ge
 800758e:	460f      	movge	r7, r1
 8007590:	f1bc 0f00 	cmp.w	ip, #0
 8007594:	d000      	beq.n	8007598 <_strtod_l+0x2e0>
 8007596:	427f      	negs	r7, r7
 8007598:	2e00      	cmp	r6, #0
 800759a:	d14f      	bne.n	800763c <_strtod_l+0x384>
 800759c:	9905      	ldr	r1, [sp, #20]
 800759e:	4301      	orrs	r1, r0
 80075a0:	f47f aec3 	bne.w	800732a <_strtod_l+0x72>
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f47f aedb 	bne.w	8007360 <_strtod_l+0xa8>
 80075aa:	2a69      	cmp	r2, #105	; 0x69
 80075ac:	d029      	beq.n	8007602 <_strtod_l+0x34a>
 80075ae:	dc26      	bgt.n	80075fe <_strtod_l+0x346>
 80075b0:	2a49      	cmp	r2, #73	; 0x49
 80075b2:	d026      	beq.n	8007602 <_strtod_l+0x34a>
 80075b4:	2a4e      	cmp	r2, #78	; 0x4e
 80075b6:	f47f aed3 	bne.w	8007360 <_strtod_l+0xa8>
 80075ba:	499a      	ldr	r1, [pc, #616]	; (8007824 <_strtod_l+0x56c>)
 80075bc:	a819      	add	r0, sp, #100	; 0x64
 80075be:	f001 fbed 	bl	8008d9c <__match>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	f43f aecc 	beq.w	8007360 <_strtod_l+0xa8>
 80075c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b28      	cmp	r3, #40	; 0x28
 80075ce:	d12f      	bne.n	8007630 <_strtod_l+0x378>
 80075d0:	4995      	ldr	r1, [pc, #596]	; (8007828 <_strtod_l+0x570>)
 80075d2:	aa1c      	add	r2, sp, #112	; 0x70
 80075d4:	a819      	add	r0, sp, #100	; 0x64
 80075d6:	f001 fbf5 	bl	8008dc4 <__hexnan>
 80075da:	2805      	cmp	r0, #5
 80075dc:	d128      	bne.n	8007630 <_strtod_l+0x378>
 80075de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075e0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80075e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80075e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80075ec:	e69d      	b.n	800732a <_strtod_l+0x72>
 80075ee:	210a      	movs	r1, #10
 80075f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80075f2:	fb01 2107 	mla	r1, r1, r7, r2
 80075f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80075fa:	9209      	str	r2, [sp, #36]	; 0x24
 80075fc:	e7b5      	b.n	800756a <_strtod_l+0x2b2>
 80075fe:	2a6e      	cmp	r2, #110	; 0x6e
 8007600:	e7d9      	b.n	80075b6 <_strtod_l+0x2fe>
 8007602:	498a      	ldr	r1, [pc, #552]	; (800782c <_strtod_l+0x574>)
 8007604:	a819      	add	r0, sp, #100	; 0x64
 8007606:	f001 fbc9 	bl	8008d9c <__match>
 800760a:	2800      	cmp	r0, #0
 800760c:	f43f aea8 	beq.w	8007360 <_strtod_l+0xa8>
 8007610:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007612:	4987      	ldr	r1, [pc, #540]	; (8007830 <_strtod_l+0x578>)
 8007614:	3b01      	subs	r3, #1
 8007616:	a819      	add	r0, sp, #100	; 0x64
 8007618:	9319      	str	r3, [sp, #100]	; 0x64
 800761a:	f001 fbbf 	bl	8008d9c <__match>
 800761e:	b910      	cbnz	r0, 8007626 <_strtod_l+0x36e>
 8007620:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007622:	3301      	adds	r3, #1
 8007624:	9319      	str	r3, [sp, #100]	; 0x64
 8007626:	f04f 0800 	mov.w	r8, #0
 800762a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007834 <_strtod_l+0x57c>
 800762e:	e67c      	b.n	800732a <_strtod_l+0x72>
 8007630:	4881      	ldr	r0, [pc, #516]	; (8007838 <_strtod_l+0x580>)
 8007632:	f001 f8d1 	bl	80087d8 <nan>
 8007636:	4680      	mov	r8, r0
 8007638:	4689      	mov	r9, r1
 800763a:	e676      	b.n	800732a <_strtod_l+0x72>
 800763c:	9b08      	ldr	r3, [sp, #32]
 800763e:	f1bb 0f00 	cmp.w	fp, #0
 8007642:	bf08      	it	eq
 8007644:	46b3      	moveq	fp, r6
 8007646:	1afb      	subs	r3, r7, r3
 8007648:	2e10      	cmp	r6, #16
 800764a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800764c:	4635      	mov	r5, r6
 800764e:	9309      	str	r3, [sp, #36]	; 0x24
 8007650:	bfa8      	it	ge
 8007652:	2510      	movge	r5, #16
 8007654:	f7f8 fed6 	bl	8000404 <__aeabi_ui2d>
 8007658:	2e09      	cmp	r6, #9
 800765a:	4680      	mov	r8, r0
 800765c:	4689      	mov	r9, r1
 800765e:	dd13      	ble.n	8007688 <_strtod_l+0x3d0>
 8007660:	4b76      	ldr	r3, [pc, #472]	; (800783c <_strtod_l+0x584>)
 8007662:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007666:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800766a:	f7f8 ff45 	bl	80004f8 <__aeabi_dmul>
 800766e:	4680      	mov	r8, r0
 8007670:	4650      	mov	r0, sl
 8007672:	4689      	mov	r9, r1
 8007674:	f7f8 fec6 	bl	8000404 <__aeabi_ui2d>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4640      	mov	r0, r8
 800767e:	4649      	mov	r1, r9
 8007680:	f7f8 fd84 	bl	800018c <__adddf3>
 8007684:	4680      	mov	r8, r0
 8007686:	4689      	mov	r9, r1
 8007688:	2e0f      	cmp	r6, #15
 800768a:	dc36      	bgt.n	80076fa <_strtod_l+0x442>
 800768c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800768e:	2b00      	cmp	r3, #0
 8007690:	f43f ae4b 	beq.w	800732a <_strtod_l+0x72>
 8007694:	dd22      	ble.n	80076dc <_strtod_l+0x424>
 8007696:	2b16      	cmp	r3, #22
 8007698:	dc09      	bgt.n	80076ae <_strtod_l+0x3f6>
 800769a:	4968      	ldr	r1, [pc, #416]	; (800783c <_strtod_l+0x584>)
 800769c:	4642      	mov	r2, r8
 800769e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076a2:	464b      	mov	r3, r9
 80076a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076a8:	f7f8 ff26 	bl	80004f8 <__aeabi_dmul>
 80076ac:	e7c3      	b.n	8007636 <_strtod_l+0x37e>
 80076ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076b0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80076b4:	4293      	cmp	r3, r2
 80076b6:	db20      	blt.n	80076fa <_strtod_l+0x442>
 80076b8:	4c60      	ldr	r4, [pc, #384]	; (800783c <_strtod_l+0x584>)
 80076ba:	f1c6 060f 	rsb	r6, r6, #15
 80076be:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80076c2:	4642      	mov	r2, r8
 80076c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076c8:	464b      	mov	r3, r9
 80076ca:	f7f8 ff15 	bl	80004f8 <__aeabi_dmul>
 80076ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d0:	1b9e      	subs	r6, r3, r6
 80076d2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80076d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80076da:	e7e5      	b.n	80076a8 <_strtod_l+0x3f0>
 80076dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076de:	3316      	adds	r3, #22
 80076e0:	db0b      	blt.n	80076fa <_strtod_l+0x442>
 80076e2:	9b08      	ldr	r3, [sp, #32]
 80076e4:	4640      	mov	r0, r8
 80076e6:	1bdf      	subs	r7, r3, r7
 80076e8:	4b54      	ldr	r3, [pc, #336]	; (800783c <_strtod_l+0x584>)
 80076ea:	4649      	mov	r1, r9
 80076ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80076f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f4:	f7f9 f82a 	bl	800074c <__aeabi_ddiv>
 80076f8:	e79d      	b.n	8007636 <_strtod_l+0x37e>
 80076fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fc:	1b75      	subs	r5, r6, r5
 80076fe:	441d      	add	r5, r3
 8007700:	2d00      	cmp	r5, #0
 8007702:	dd70      	ble.n	80077e6 <_strtod_l+0x52e>
 8007704:	f015 030f 	ands.w	r3, r5, #15
 8007708:	d00a      	beq.n	8007720 <_strtod_l+0x468>
 800770a:	494c      	ldr	r1, [pc, #304]	; (800783c <_strtod_l+0x584>)
 800770c:	4642      	mov	r2, r8
 800770e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007712:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007716:	464b      	mov	r3, r9
 8007718:	f7f8 feee 	bl	80004f8 <__aeabi_dmul>
 800771c:	4680      	mov	r8, r0
 800771e:	4689      	mov	r9, r1
 8007720:	f035 050f 	bics.w	r5, r5, #15
 8007724:	d04d      	beq.n	80077c2 <_strtod_l+0x50a>
 8007726:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800772a:	dd22      	ble.n	8007772 <_strtod_l+0x4ba>
 800772c:	2600      	movs	r6, #0
 800772e:	46b3      	mov	fp, r6
 8007730:	960b      	str	r6, [sp, #44]	; 0x2c
 8007732:	9608      	str	r6, [sp, #32]
 8007734:	2322      	movs	r3, #34	; 0x22
 8007736:	f04f 0800 	mov.w	r8, #0
 800773a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007834 <_strtod_l+0x57c>
 800773e:	6023      	str	r3, [r4, #0]
 8007740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007742:	2b00      	cmp	r3, #0
 8007744:	f43f adf1 	beq.w	800732a <_strtod_l+0x72>
 8007748:	4620      	mov	r0, r4
 800774a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800774c:	f7ff f934 	bl	80069b8 <_Bfree>
 8007750:	4620      	mov	r0, r4
 8007752:	9908      	ldr	r1, [sp, #32]
 8007754:	f7ff f930 	bl	80069b8 <_Bfree>
 8007758:	4659      	mov	r1, fp
 800775a:	4620      	mov	r0, r4
 800775c:	f7ff f92c 	bl	80069b8 <_Bfree>
 8007760:	4620      	mov	r0, r4
 8007762:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007764:	f7ff f928 	bl	80069b8 <_Bfree>
 8007768:	4631      	mov	r1, r6
 800776a:	4620      	mov	r0, r4
 800776c:	f7ff f924 	bl	80069b8 <_Bfree>
 8007770:	e5db      	b.n	800732a <_strtod_l+0x72>
 8007772:	4b33      	ldr	r3, [pc, #204]	; (8007840 <_strtod_l+0x588>)
 8007774:	4640      	mov	r0, r8
 8007776:	9305      	str	r3, [sp, #20]
 8007778:	2300      	movs	r3, #0
 800777a:	4649      	mov	r1, r9
 800777c:	469a      	mov	sl, r3
 800777e:	112d      	asrs	r5, r5, #4
 8007780:	2d01      	cmp	r5, #1
 8007782:	dc21      	bgt.n	80077c8 <_strtod_l+0x510>
 8007784:	b10b      	cbz	r3, 800778a <_strtod_l+0x4d2>
 8007786:	4680      	mov	r8, r0
 8007788:	4689      	mov	r9, r1
 800778a:	492d      	ldr	r1, [pc, #180]	; (8007840 <_strtod_l+0x588>)
 800778c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007790:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007794:	4642      	mov	r2, r8
 8007796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800779a:	464b      	mov	r3, r9
 800779c:	f7f8 feac 	bl	80004f8 <__aeabi_dmul>
 80077a0:	4b24      	ldr	r3, [pc, #144]	; (8007834 <_strtod_l+0x57c>)
 80077a2:	460a      	mov	r2, r1
 80077a4:	400b      	ands	r3, r1
 80077a6:	4927      	ldr	r1, [pc, #156]	; (8007844 <_strtod_l+0x58c>)
 80077a8:	4680      	mov	r8, r0
 80077aa:	428b      	cmp	r3, r1
 80077ac:	d8be      	bhi.n	800772c <_strtod_l+0x474>
 80077ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80077b2:	428b      	cmp	r3, r1
 80077b4:	bf86      	itte	hi
 80077b6:	f04f 38ff 	movhi.w	r8, #4294967295
 80077ba:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007848 <_strtod_l+0x590>
 80077be:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80077c2:	2300      	movs	r3, #0
 80077c4:	9305      	str	r3, [sp, #20]
 80077c6:	e07b      	b.n	80078c0 <_strtod_l+0x608>
 80077c8:	07ea      	lsls	r2, r5, #31
 80077ca:	d505      	bpl.n	80077d8 <_strtod_l+0x520>
 80077cc:	9b05      	ldr	r3, [sp, #20]
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f8 fe91 	bl	80004f8 <__aeabi_dmul>
 80077d6:	2301      	movs	r3, #1
 80077d8:	9a05      	ldr	r2, [sp, #20]
 80077da:	f10a 0a01 	add.w	sl, sl, #1
 80077de:	3208      	adds	r2, #8
 80077e0:	106d      	asrs	r5, r5, #1
 80077e2:	9205      	str	r2, [sp, #20]
 80077e4:	e7cc      	b.n	8007780 <_strtod_l+0x4c8>
 80077e6:	d0ec      	beq.n	80077c2 <_strtod_l+0x50a>
 80077e8:	426d      	negs	r5, r5
 80077ea:	f015 020f 	ands.w	r2, r5, #15
 80077ee:	d00a      	beq.n	8007806 <_strtod_l+0x54e>
 80077f0:	4b12      	ldr	r3, [pc, #72]	; (800783c <_strtod_l+0x584>)
 80077f2:	4640      	mov	r0, r8
 80077f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077f8:	4649      	mov	r1, r9
 80077fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fe:	f7f8 ffa5 	bl	800074c <__aeabi_ddiv>
 8007802:	4680      	mov	r8, r0
 8007804:	4689      	mov	r9, r1
 8007806:	112d      	asrs	r5, r5, #4
 8007808:	d0db      	beq.n	80077c2 <_strtod_l+0x50a>
 800780a:	2d1f      	cmp	r5, #31
 800780c:	dd1e      	ble.n	800784c <_strtod_l+0x594>
 800780e:	2600      	movs	r6, #0
 8007810:	46b3      	mov	fp, r6
 8007812:	960b      	str	r6, [sp, #44]	; 0x2c
 8007814:	9608      	str	r6, [sp, #32]
 8007816:	2322      	movs	r3, #34	; 0x22
 8007818:	f04f 0800 	mov.w	r8, #0
 800781c:	f04f 0900 	mov.w	r9, #0
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	e78d      	b.n	8007740 <_strtod_l+0x488>
 8007824:	0800b901 	.word	0x0800b901
 8007828:	0800bb2c 	.word	0x0800bb2c
 800782c:	0800b8f9 	.word	0x0800b8f9
 8007830:	0800b930 	.word	0x0800b930
 8007834:	7ff00000 	.word	0x7ff00000
 8007838:	0800bcbd 	.word	0x0800bcbd
 800783c:	0800ba40 	.word	0x0800ba40
 8007840:	0800ba18 	.word	0x0800ba18
 8007844:	7ca00000 	.word	0x7ca00000
 8007848:	7fefffff 	.word	0x7fefffff
 800784c:	f015 0310 	ands.w	r3, r5, #16
 8007850:	bf18      	it	ne
 8007852:	236a      	movne	r3, #106	; 0x6a
 8007854:	4640      	mov	r0, r8
 8007856:	9305      	str	r3, [sp, #20]
 8007858:	4649      	mov	r1, r9
 800785a:	2300      	movs	r3, #0
 800785c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007b28 <_strtod_l+0x870>
 8007860:	07ea      	lsls	r2, r5, #31
 8007862:	d504      	bpl.n	800786e <_strtod_l+0x5b6>
 8007864:	e9da 2300 	ldrd	r2, r3, [sl]
 8007868:	f7f8 fe46 	bl	80004f8 <__aeabi_dmul>
 800786c:	2301      	movs	r3, #1
 800786e:	106d      	asrs	r5, r5, #1
 8007870:	f10a 0a08 	add.w	sl, sl, #8
 8007874:	d1f4      	bne.n	8007860 <_strtod_l+0x5a8>
 8007876:	b10b      	cbz	r3, 800787c <_strtod_l+0x5c4>
 8007878:	4680      	mov	r8, r0
 800787a:	4689      	mov	r9, r1
 800787c:	9b05      	ldr	r3, [sp, #20]
 800787e:	b1bb      	cbz	r3, 80078b0 <_strtod_l+0x5f8>
 8007880:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007884:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007888:	2b00      	cmp	r3, #0
 800788a:	4649      	mov	r1, r9
 800788c:	dd10      	ble.n	80078b0 <_strtod_l+0x5f8>
 800788e:	2b1f      	cmp	r3, #31
 8007890:	f340 8128 	ble.w	8007ae4 <_strtod_l+0x82c>
 8007894:	2b34      	cmp	r3, #52	; 0x34
 8007896:	bfd8      	it	le
 8007898:	f04f 33ff 	movle.w	r3, #4294967295
 800789c:	f04f 0800 	mov.w	r8, #0
 80078a0:	bfcf      	iteee	gt
 80078a2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80078a6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80078aa:	4093      	lslle	r3, r2
 80078ac:	ea03 0901 	andle.w	r9, r3, r1
 80078b0:	2200      	movs	r2, #0
 80078b2:	2300      	movs	r3, #0
 80078b4:	4640      	mov	r0, r8
 80078b6:	4649      	mov	r1, r9
 80078b8:	f7f9 f886 	bl	80009c8 <__aeabi_dcmpeq>
 80078bc:	2800      	cmp	r0, #0
 80078be:	d1a6      	bne.n	800780e <_strtod_l+0x556>
 80078c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c2:	465a      	mov	r2, fp
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	4620      	mov	r0, r4
 80078c8:	4633      	mov	r3, r6
 80078ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078cc:	f7ff f8dc 	bl	8006a88 <__s2b>
 80078d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80078d2:	2800      	cmp	r0, #0
 80078d4:	f43f af2a 	beq.w	800772c <_strtod_l+0x474>
 80078d8:	2600      	movs	r6, #0
 80078da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078dc:	9b08      	ldr	r3, [sp, #32]
 80078de:	2a00      	cmp	r2, #0
 80078e0:	eba3 0307 	sub.w	r3, r3, r7
 80078e4:	bfa8      	it	ge
 80078e6:	2300      	movge	r3, #0
 80078e8:	46b3      	mov	fp, r6
 80078ea:	9312      	str	r3, [sp, #72]	; 0x48
 80078ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80078f0:	9316      	str	r3, [sp, #88]	; 0x58
 80078f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078f4:	4620      	mov	r0, r4
 80078f6:	6859      	ldr	r1, [r3, #4]
 80078f8:	f7ff f81e 	bl	8006938 <_Balloc>
 80078fc:	9008      	str	r0, [sp, #32]
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f af18 	beq.w	8007734 <_strtod_l+0x47c>
 8007904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007906:	300c      	adds	r0, #12
 8007908:	691a      	ldr	r2, [r3, #16]
 800790a:	f103 010c 	add.w	r1, r3, #12
 800790e:	3202      	adds	r2, #2
 8007910:	0092      	lsls	r2, r2, #2
 8007912:	f7fe f894 	bl	8005a3e <memcpy>
 8007916:	ab1c      	add	r3, sp, #112	; 0x70
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	ab1b      	add	r3, sp, #108	; 0x6c
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	4642      	mov	r2, r8
 8007920:	464b      	mov	r3, r9
 8007922:	4620      	mov	r0, r4
 8007924:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007928:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800792c:	f7ff fbd8 	bl	80070e0 <__d2b>
 8007930:	901a      	str	r0, [sp, #104]	; 0x68
 8007932:	2800      	cmp	r0, #0
 8007934:	f43f aefe 	beq.w	8007734 <_strtod_l+0x47c>
 8007938:	2101      	movs	r1, #1
 800793a:	4620      	mov	r0, r4
 800793c:	f7ff f93c 	bl	8006bb8 <__i2b>
 8007940:	4683      	mov	fp, r0
 8007942:	2800      	cmp	r0, #0
 8007944:	f43f aef6 	beq.w	8007734 <_strtod_l+0x47c>
 8007948:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800794a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800794c:	2f00      	cmp	r7, #0
 800794e:	bfab      	itete	ge
 8007950:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007952:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007954:	eb07 0a03 	addge.w	sl, r7, r3
 8007958:	1bdd      	sublt	r5, r3, r7
 800795a:	9b05      	ldr	r3, [sp, #20]
 800795c:	bfa8      	it	ge
 800795e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007960:	eba7 0703 	sub.w	r7, r7, r3
 8007964:	4417      	add	r7, r2
 8007966:	4b71      	ldr	r3, [pc, #452]	; (8007b2c <_strtod_l+0x874>)
 8007968:	f107 37ff 	add.w	r7, r7, #4294967295
 800796c:	bfb8      	it	lt
 800796e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007972:	429f      	cmp	r7, r3
 8007974:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007978:	f280 80c7 	bge.w	8007b0a <_strtod_l+0x852>
 800797c:	1bdb      	subs	r3, r3, r7
 800797e:	2b1f      	cmp	r3, #31
 8007980:	f04f 0101 	mov.w	r1, #1
 8007984:	eba2 0203 	sub.w	r2, r2, r3
 8007988:	f300 80b3 	bgt.w	8007af2 <_strtod_l+0x83a>
 800798c:	fa01 f303 	lsl.w	r3, r1, r3
 8007990:	9313      	str	r3, [sp, #76]	; 0x4c
 8007992:	2300      	movs	r3, #0
 8007994:	9310      	str	r3, [sp, #64]	; 0x40
 8007996:	eb0a 0702 	add.w	r7, sl, r2
 800799a:	9b05      	ldr	r3, [sp, #20]
 800799c:	45ba      	cmp	sl, r7
 800799e:	4415      	add	r5, r2
 80079a0:	441d      	add	r5, r3
 80079a2:	4653      	mov	r3, sl
 80079a4:	bfa8      	it	ge
 80079a6:	463b      	movge	r3, r7
 80079a8:	42ab      	cmp	r3, r5
 80079aa:	bfa8      	it	ge
 80079ac:	462b      	movge	r3, r5
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bfc2      	ittt	gt
 80079b2:	1aff      	subgt	r7, r7, r3
 80079b4:	1aed      	subgt	r5, r5, r3
 80079b6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80079ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079bc:	2b00      	cmp	r3, #0
 80079be:	dd17      	ble.n	80079f0 <_strtod_l+0x738>
 80079c0:	4659      	mov	r1, fp
 80079c2:	461a      	mov	r2, r3
 80079c4:	4620      	mov	r0, r4
 80079c6:	f7ff f9b5 	bl	8006d34 <__pow5mult>
 80079ca:	4683      	mov	fp, r0
 80079cc:	2800      	cmp	r0, #0
 80079ce:	f43f aeb1 	beq.w	8007734 <_strtod_l+0x47c>
 80079d2:	4601      	mov	r1, r0
 80079d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079d6:	4620      	mov	r0, r4
 80079d8:	f7ff f904 	bl	8006be4 <__multiply>
 80079dc:	900a      	str	r0, [sp, #40]	; 0x28
 80079de:	2800      	cmp	r0, #0
 80079e0:	f43f aea8 	beq.w	8007734 <_strtod_l+0x47c>
 80079e4:	4620      	mov	r0, r4
 80079e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079e8:	f7fe ffe6 	bl	80069b8 <_Bfree>
 80079ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ee:	931a      	str	r3, [sp, #104]	; 0x68
 80079f0:	2f00      	cmp	r7, #0
 80079f2:	f300 808f 	bgt.w	8007b14 <_strtod_l+0x85c>
 80079f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	dd08      	ble.n	8007a0e <_strtod_l+0x756>
 80079fc:	4620      	mov	r0, r4
 80079fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007a00:	9908      	ldr	r1, [sp, #32]
 8007a02:	f7ff f997 	bl	8006d34 <__pow5mult>
 8007a06:	9008      	str	r0, [sp, #32]
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	f43f ae93 	beq.w	8007734 <_strtod_l+0x47c>
 8007a0e:	2d00      	cmp	r5, #0
 8007a10:	dd08      	ble.n	8007a24 <_strtod_l+0x76c>
 8007a12:	462a      	mov	r2, r5
 8007a14:	4620      	mov	r0, r4
 8007a16:	9908      	ldr	r1, [sp, #32]
 8007a18:	f7ff f9e6 	bl	8006de8 <__lshift>
 8007a1c:	9008      	str	r0, [sp, #32]
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f43f ae88 	beq.w	8007734 <_strtod_l+0x47c>
 8007a24:	f1ba 0f00 	cmp.w	sl, #0
 8007a28:	dd08      	ble.n	8007a3c <_strtod_l+0x784>
 8007a2a:	4659      	mov	r1, fp
 8007a2c:	4652      	mov	r2, sl
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f7ff f9da 	bl	8006de8 <__lshift>
 8007a34:	4683      	mov	fp, r0
 8007a36:	2800      	cmp	r0, #0
 8007a38:	f43f ae7c 	beq.w	8007734 <_strtod_l+0x47c>
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	9a08      	ldr	r2, [sp, #32]
 8007a40:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a42:	f7ff fa59 	bl	8006ef8 <__mdiff>
 8007a46:	4606      	mov	r6, r0
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	f43f ae73 	beq.w	8007734 <_strtod_l+0x47c>
 8007a4e:	2500      	movs	r5, #0
 8007a50:	68c3      	ldr	r3, [r0, #12]
 8007a52:	4659      	mov	r1, fp
 8007a54:	60c5      	str	r5, [r0, #12]
 8007a56:	930a      	str	r3, [sp, #40]	; 0x28
 8007a58:	f7ff fa32 	bl	8006ec0 <__mcmp>
 8007a5c:	42a8      	cmp	r0, r5
 8007a5e:	da6b      	bge.n	8007b38 <_strtod_l+0x880>
 8007a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a62:	ea53 0308 	orrs.w	r3, r3, r8
 8007a66:	f040 808f 	bne.w	8007b88 <_strtod_l+0x8d0>
 8007a6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f040 808a 	bne.w	8007b88 <_strtod_l+0x8d0>
 8007a74:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a78:	0d1b      	lsrs	r3, r3, #20
 8007a7a:	051b      	lsls	r3, r3, #20
 8007a7c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007a80:	f240 8082 	bls.w	8007b88 <_strtod_l+0x8d0>
 8007a84:	6973      	ldr	r3, [r6, #20]
 8007a86:	b913      	cbnz	r3, 8007a8e <_strtod_l+0x7d6>
 8007a88:	6933      	ldr	r3, [r6, #16]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	dd7c      	ble.n	8007b88 <_strtod_l+0x8d0>
 8007a8e:	4631      	mov	r1, r6
 8007a90:	2201      	movs	r2, #1
 8007a92:	4620      	mov	r0, r4
 8007a94:	f7ff f9a8 	bl	8006de8 <__lshift>
 8007a98:	4659      	mov	r1, fp
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	f7ff fa10 	bl	8006ec0 <__mcmp>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	dd71      	ble.n	8007b88 <_strtod_l+0x8d0>
 8007aa4:	9905      	ldr	r1, [sp, #20]
 8007aa6:	464b      	mov	r3, r9
 8007aa8:	4a21      	ldr	r2, [pc, #132]	; (8007b30 <_strtod_l+0x878>)
 8007aaa:	2900      	cmp	r1, #0
 8007aac:	f000 808d 	beq.w	8007bca <_strtod_l+0x912>
 8007ab0:	ea02 0109 	and.w	r1, r2, r9
 8007ab4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007ab8:	f300 8087 	bgt.w	8007bca <_strtod_l+0x912>
 8007abc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ac0:	f77f aea9 	ble.w	8007816 <_strtod_l+0x55e>
 8007ac4:	4640      	mov	r0, r8
 8007ac6:	4649      	mov	r1, r9
 8007ac8:	4b1a      	ldr	r3, [pc, #104]	; (8007b34 <_strtod_l+0x87c>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	f7f8 fd14 	bl	80004f8 <__aeabi_dmul>
 8007ad0:	4b17      	ldr	r3, [pc, #92]	; (8007b30 <_strtod_l+0x878>)
 8007ad2:	4680      	mov	r8, r0
 8007ad4:	400b      	ands	r3, r1
 8007ad6:	4689      	mov	r9, r1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f47f ae35 	bne.w	8007748 <_strtod_l+0x490>
 8007ade:	2322      	movs	r3, #34	; 0x22
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	e631      	b.n	8007748 <_strtod_l+0x490>
 8007ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aec:	ea03 0808 	and.w	r8, r3, r8
 8007af0:	e6de      	b.n	80078b0 <_strtod_l+0x5f8>
 8007af2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007af6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007afa:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007afe:	37e2      	adds	r7, #226	; 0xe2
 8007b00:	fa01 f307 	lsl.w	r3, r1, r7
 8007b04:	9310      	str	r3, [sp, #64]	; 0x40
 8007b06:	9113      	str	r1, [sp, #76]	; 0x4c
 8007b08:	e745      	b.n	8007996 <_strtod_l+0x6de>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	9310      	str	r3, [sp, #64]	; 0x40
 8007b0e:	2301      	movs	r3, #1
 8007b10:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b12:	e740      	b.n	8007996 <_strtod_l+0x6de>
 8007b14:	463a      	mov	r2, r7
 8007b16:	4620      	mov	r0, r4
 8007b18:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b1a:	f7ff f965 	bl	8006de8 <__lshift>
 8007b1e:	901a      	str	r0, [sp, #104]	; 0x68
 8007b20:	2800      	cmp	r0, #0
 8007b22:	f47f af68 	bne.w	80079f6 <_strtod_l+0x73e>
 8007b26:	e605      	b.n	8007734 <_strtod_l+0x47c>
 8007b28:	0800bb40 	.word	0x0800bb40
 8007b2c:	fffffc02 	.word	0xfffffc02
 8007b30:	7ff00000 	.word	0x7ff00000
 8007b34:	39500000 	.word	0x39500000
 8007b38:	46ca      	mov	sl, r9
 8007b3a:	d165      	bne.n	8007c08 <_strtod_l+0x950>
 8007b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b42:	b352      	cbz	r2, 8007b9a <_strtod_l+0x8e2>
 8007b44:	4a9e      	ldr	r2, [pc, #632]	; (8007dc0 <_strtod_l+0xb08>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d12a      	bne.n	8007ba0 <_strtod_l+0x8e8>
 8007b4a:	9b05      	ldr	r3, [sp, #20]
 8007b4c:	4641      	mov	r1, r8
 8007b4e:	b1fb      	cbz	r3, 8007b90 <_strtod_l+0x8d8>
 8007b50:	4b9c      	ldr	r3, [pc, #624]	; (8007dc4 <_strtod_l+0xb0c>)
 8007b52:	f04f 32ff 	mov.w	r2, #4294967295
 8007b56:	ea09 0303 	and.w	r3, r9, r3
 8007b5a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b5e:	d81a      	bhi.n	8007b96 <_strtod_l+0x8de>
 8007b60:	0d1b      	lsrs	r3, r3, #20
 8007b62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	4299      	cmp	r1, r3
 8007b6c:	d118      	bne.n	8007ba0 <_strtod_l+0x8e8>
 8007b6e:	4b96      	ldr	r3, [pc, #600]	; (8007dc8 <_strtod_l+0xb10>)
 8007b70:	459a      	cmp	sl, r3
 8007b72:	d102      	bne.n	8007b7a <_strtod_l+0x8c2>
 8007b74:	3101      	adds	r1, #1
 8007b76:	f43f addd 	beq.w	8007734 <_strtod_l+0x47c>
 8007b7a:	f04f 0800 	mov.w	r8, #0
 8007b7e:	4b91      	ldr	r3, [pc, #580]	; (8007dc4 <_strtod_l+0xb0c>)
 8007b80:	ea0a 0303 	and.w	r3, sl, r3
 8007b84:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007b88:	9b05      	ldr	r3, [sp, #20]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d19a      	bne.n	8007ac4 <_strtod_l+0x80c>
 8007b8e:	e5db      	b.n	8007748 <_strtod_l+0x490>
 8007b90:	f04f 33ff 	mov.w	r3, #4294967295
 8007b94:	e7e9      	b.n	8007b6a <_strtod_l+0x8b2>
 8007b96:	4613      	mov	r3, r2
 8007b98:	e7e7      	b.n	8007b6a <_strtod_l+0x8b2>
 8007b9a:	ea53 0308 	orrs.w	r3, r3, r8
 8007b9e:	d081      	beq.n	8007aa4 <_strtod_l+0x7ec>
 8007ba0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ba2:	b1e3      	cbz	r3, 8007bde <_strtod_l+0x926>
 8007ba4:	ea13 0f0a 	tst.w	r3, sl
 8007ba8:	d0ee      	beq.n	8007b88 <_strtod_l+0x8d0>
 8007baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bac:	4640      	mov	r0, r8
 8007bae:	4649      	mov	r1, r9
 8007bb0:	9a05      	ldr	r2, [sp, #20]
 8007bb2:	b1c3      	cbz	r3, 8007be6 <_strtod_l+0x92e>
 8007bb4:	f7ff fb5c 	bl	8007270 <sulp>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007bbe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007bc0:	f7f8 fae4 	bl	800018c <__adddf3>
 8007bc4:	4680      	mov	r8, r0
 8007bc6:	4689      	mov	r9, r1
 8007bc8:	e7de      	b.n	8007b88 <_strtod_l+0x8d0>
 8007bca:	4013      	ands	r3, r2
 8007bcc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007bd0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007bd4:	f04f 38ff 	mov.w	r8, #4294967295
 8007bd8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007bdc:	e7d4      	b.n	8007b88 <_strtod_l+0x8d0>
 8007bde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007be0:	ea13 0f08 	tst.w	r3, r8
 8007be4:	e7e0      	b.n	8007ba8 <_strtod_l+0x8f0>
 8007be6:	f7ff fb43 	bl	8007270 <sulp>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007bf0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007bf2:	f7f8 fac9 	bl	8000188 <__aeabi_dsub>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	4689      	mov	r9, r1
 8007bfe:	f7f8 fee3 	bl	80009c8 <__aeabi_dcmpeq>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	d0c0      	beq.n	8007b88 <_strtod_l+0x8d0>
 8007c06:	e606      	b.n	8007816 <_strtod_l+0x55e>
 8007c08:	4659      	mov	r1, fp
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f7ff fabe 	bl	800718c <__ratio>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c1e:	f7f8 fee7 	bl	80009f0 <__aeabi_dcmple>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d06f      	beq.n	8007d06 <_strtod_l+0xa4e>
 8007c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d17c      	bne.n	8007d26 <_strtod_l+0xa6e>
 8007c2c:	f1b8 0f00 	cmp.w	r8, #0
 8007c30:	d159      	bne.n	8007ce6 <_strtod_l+0xa2e>
 8007c32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d17b      	bne.n	8007d32 <_strtod_l+0xa7a>
 8007c3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c3e:	2200      	movs	r2, #0
 8007c40:	4b62      	ldr	r3, [pc, #392]	; (8007dcc <_strtod_l+0xb14>)
 8007c42:	f7f8 fecb 	bl	80009dc <__aeabi_dcmplt>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d15a      	bne.n	8007d00 <_strtod_l+0xa48>
 8007c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c4e:	2200      	movs	r2, #0
 8007c50:	4b5f      	ldr	r3, [pc, #380]	; (8007dd0 <_strtod_l+0xb18>)
 8007c52:	f7f8 fc51 	bl	80004f8 <__aeabi_dmul>
 8007c56:	4605      	mov	r5, r0
 8007c58:	460f      	mov	r7, r1
 8007c5a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007c5e:	9506      	str	r5, [sp, #24]
 8007c60:	9307      	str	r3, [sp, #28]
 8007c62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c66:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007c6a:	4b56      	ldr	r3, [pc, #344]	; (8007dc4 <_strtod_l+0xb0c>)
 8007c6c:	4a55      	ldr	r2, [pc, #340]	; (8007dc4 <_strtod_l+0xb0c>)
 8007c6e:	ea0a 0303 	and.w	r3, sl, r3
 8007c72:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c74:	4b57      	ldr	r3, [pc, #348]	; (8007dd4 <_strtod_l+0xb1c>)
 8007c76:	ea0a 0202 	and.w	r2, sl, r2
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	f040 80b0 	bne.w	8007de0 <_strtod_l+0xb28>
 8007c80:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007c84:	4640      	mov	r0, r8
 8007c86:	4649      	mov	r1, r9
 8007c88:	f7ff f9c2 	bl	8007010 <__ulp>
 8007c8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c90:	f7f8 fc32 	bl	80004f8 <__aeabi_dmul>
 8007c94:	4642      	mov	r2, r8
 8007c96:	464b      	mov	r3, r9
 8007c98:	f7f8 fa78 	bl	800018c <__adddf3>
 8007c9c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007dc4 <_strtod_l+0xb0c>
 8007ca0:	4a4d      	ldr	r2, [pc, #308]	; (8007dd8 <_strtod_l+0xb20>)
 8007ca2:	ea01 0a0a 	and.w	sl, r1, sl
 8007ca6:	4592      	cmp	sl, r2
 8007ca8:	4680      	mov	r8, r0
 8007caa:	d948      	bls.n	8007d3e <_strtod_l+0xa86>
 8007cac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cae:	4b46      	ldr	r3, [pc, #280]	; (8007dc8 <_strtod_l+0xb10>)
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d103      	bne.n	8007cbc <_strtod_l+0xa04>
 8007cb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	f43f ad3c 	beq.w	8007734 <_strtod_l+0x47c>
 8007cbc:	f04f 38ff 	mov.w	r8, #4294967295
 8007cc0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007dc8 <_strtod_l+0xb10>
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007cc8:	f7fe fe76 	bl	80069b8 <_Bfree>
 8007ccc:	4620      	mov	r0, r4
 8007cce:	9908      	ldr	r1, [sp, #32]
 8007cd0:	f7fe fe72 	bl	80069b8 <_Bfree>
 8007cd4:	4659      	mov	r1, fp
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f7fe fe6e 	bl	80069b8 <_Bfree>
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7fe fe6a 	bl	80069b8 <_Bfree>
 8007ce4:	e605      	b.n	80078f2 <_strtod_l+0x63a>
 8007ce6:	f1b8 0f01 	cmp.w	r8, #1
 8007cea:	d103      	bne.n	8007cf4 <_strtod_l+0xa3c>
 8007cec:	f1b9 0f00 	cmp.w	r9, #0
 8007cf0:	f43f ad91 	beq.w	8007816 <_strtod_l+0x55e>
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4b39      	ldr	r3, [pc, #228]	; (8007ddc <_strtod_l+0xb24>)
 8007cf8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007cfa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007cfe:	e016      	b.n	8007d2e <_strtod_l+0xa76>
 8007d00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007d02:	4f33      	ldr	r7, [pc, #204]	; (8007dd0 <_strtod_l+0xb18>)
 8007d04:	e7a9      	b.n	8007c5a <_strtod_l+0x9a2>
 8007d06:	4b32      	ldr	r3, [pc, #200]	; (8007dd0 <_strtod_l+0xb18>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d0e:	f7f8 fbf3 	bl	80004f8 <__aeabi_dmul>
 8007d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d14:	4605      	mov	r5, r0
 8007d16:	460f      	mov	r7, r1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d09e      	beq.n	8007c5a <_strtod_l+0x9a2>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d24:	e79d      	b.n	8007c62 <_strtod_l+0x9aa>
 8007d26:	2200      	movs	r2, #0
 8007d28:	4b28      	ldr	r3, [pc, #160]	; (8007dcc <_strtod_l+0xb14>)
 8007d2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d2e:	4f27      	ldr	r7, [pc, #156]	; (8007dcc <_strtod_l+0xb14>)
 8007d30:	e797      	b.n	8007c62 <_strtod_l+0x9aa>
 8007d32:	2200      	movs	r2, #0
 8007d34:	4b29      	ldr	r3, [pc, #164]	; (8007ddc <_strtod_l+0xb24>)
 8007d36:	4645      	mov	r5, r8
 8007d38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d3c:	e7f7      	b.n	8007d2e <_strtod_l+0xa76>
 8007d3e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007d42:	9b05      	ldr	r3, [sp, #20]
 8007d44:	46ca      	mov	sl, r9
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1bc      	bne.n	8007cc4 <_strtod_l+0xa0c>
 8007d4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d50:	0d1b      	lsrs	r3, r3, #20
 8007d52:	051b      	lsls	r3, r3, #20
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d1b5      	bne.n	8007cc4 <_strtod_l+0xa0c>
 8007d58:	4628      	mov	r0, r5
 8007d5a:	4639      	mov	r1, r7
 8007d5c:	f7f9 f998 	bl	8001090 <__aeabi_d2lz>
 8007d60:	f7f8 fb9c 	bl	800049c <__aeabi_l2d>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4628      	mov	r0, r5
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	f7f8 fa0c 	bl	8000188 <__aeabi_dsub>
 8007d70:	460b      	mov	r3, r1
 8007d72:	4602      	mov	r2, r0
 8007d74:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007d78:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d7e:	ea4a 0a08 	orr.w	sl, sl, r8
 8007d82:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007d86:	d06c      	beq.n	8007e62 <_strtod_l+0xbaa>
 8007d88:	a309      	add	r3, pc, #36	; (adr r3, 8007db0 <_strtod_l+0xaf8>)
 8007d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8e:	f7f8 fe25 	bl	80009dc <__aeabi_dcmplt>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f47f acd8 	bne.w	8007748 <_strtod_l+0x490>
 8007d98:	a307      	add	r3, pc, #28	; (adr r3, 8007db8 <_strtod_l+0xb00>)
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007da2:	f7f8 fe39 	bl	8000a18 <__aeabi_dcmpgt>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d08c      	beq.n	8007cc4 <_strtod_l+0xa0c>
 8007daa:	e4cd      	b.n	8007748 <_strtod_l+0x490>
 8007dac:	f3af 8000 	nop.w
 8007db0:	94a03595 	.word	0x94a03595
 8007db4:	3fdfffff 	.word	0x3fdfffff
 8007db8:	35afe535 	.word	0x35afe535
 8007dbc:	3fe00000 	.word	0x3fe00000
 8007dc0:	000fffff 	.word	0x000fffff
 8007dc4:	7ff00000 	.word	0x7ff00000
 8007dc8:	7fefffff 	.word	0x7fefffff
 8007dcc:	3ff00000 	.word	0x3ff00000
 8007dd0:	3fe00000 	.word	0x3fe00000
 8007dd4:	7fe00000 	.word	0x7fe00000
 8007dd8:	7c9fffff 	.word	0x7c9fffff
 8007ddc:	bff00000 	.word	0xbff00000
 8007de0:	9b05      	ldr	r3, [sp, #20]
 8007de2:	b333      	cbz	r3, 8007e32 <_strtod_l+0xb7a>
 8007de4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007de6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007dea:	d822      	bhi.n	8007e32 <_strtod_l+0xb7a>
 8007dec:	a328      	add	r3, pc, #160	; (adr r3, 8007e90 <_strtod_l+0xbd8>)
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	4628      	mov	r0, r5
 8007df4:	4639      	mov	r1, r7
 8007df6:	f7f8 fdfb 	bl	80009f0 <__aeabi_dcmple>
 8007dfa:	b1a0      	cbz	r0, 8007e26 <_strtod_l+0xb6e>
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f7f8 fe52 	bl	8000aa8 <__aeabi_d2uiz>
 8007e04:	2801      	cmp	r0, #1
 8007e06:	bf38      	it	cc
 8007e08:	2001      	movcc	r0, #1
 8007e0a:	f7f8 fafb 	bl	8000404 <__aeabi_ui2d>
 8007e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e10:	4605      	mov	r5, r0
 8007e12:	460f      	mov	r7, r1
 8007e14:	bb03      	cbnz	r3, 8007e58 <_strtod_l+0xba0>
 8007e16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e1a:	9014      	str	r0, [sp, #80]	; 0x50
 8007e1c:	9315      	str	r3, [sp, #84]	; 0x54
 8007e1e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007e22:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e2a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007e2e:	1a9b      	subs	r3, r3, r2
 8007e30:	9311      	str	r3, [sp, #68]	; 0x44
 8007e32:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007e34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e36:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007e3a:	f7ff f8e9 	bl	8007010 <__ulp>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	4640      	mov	r0, r8
 8007e44:	4649      	mov	r1, r9
 8007e46:	f7f8 fb57 	bl	80004f8 <__aeabi_dmul>
 8007e4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e4e:	f7f8 f99d 	bl	800018c <__adddf3>
 8007e52:	4680      	mov	r8, r0
 8007e54:	4689      	mov	r9, r1
 8007e56:	e774      	b.n	8007d42 <_strtod_l+0xa8a>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007e60:	e7dd      	b.n	8007e1e <_strtod_l+0xb66>
 8007e62:	a30d      	add	r3, pc, #52	; (adr r3, 8007e98 <_strtod_l+0xbe0>)
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	f7f8 fdb8 	bl	80009dc <__aeabi_dcmplt>
 8007e6c:	e79b      	b.n	8007da6 <_strtod_l+0xaee>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	930e      	str	r3, [sp, #56]	; 0x38
 8007e72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	f7ff ba5b 	b.w	8007332 <_strtod_l+0x7a>
 8007e7c:	2a65      	cmp	r2, #101	; 0x65
 8007e7e:	f43f ab52 	beq.w	8007526 <_strtod_l+0x26e>
 8007e82:	2a45      	cmp	r2, #69	; 0x45
 8007e84:	f43f ab4f 	beq.w	8007526 <_strtod_l+0x26e>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f7ff bb87 	b.w	800759c <_strtod_l+0x2e4>
 8007e8e:	bf00      	nop
 8007e90:	ffc00000 	.word	0xffc00000
 8007e94:	41dfffff 	.word	0x41dfffff
 8007e98:	94a03595 	.word	0x94a03595
 8007e9c:	3fcfffff 	.word	0x3fcfffff

08007ea0 <_strtod_r>:
 8007ea0:	4b01      	ldr	r3, [pc, #4]	; (8007ea8 <_strtod_r+0x8>)
 8007ea2:	f7ff ba09 	b.w	80072b8 <_strtod_l>
 8007ea6:	bf00      	nop
 8007ea8:	20000084 	.word	0x20000084

08007eac <_strtol_l.constprop.0>:
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb2:	4686      	mov	lr, r0
 8007eb4:	4690      	mov	r8, r2
 8007eb6:	d001      	beq.n	8007ebc <_strtol_l.constprop.0+0x10>
 8007eb8:	2b24      	cmp	r3, #36	; 0x24
 8007eba:	d906      	bls.n	8007eca <_strtol_l.constprop.0+0x1e>
 8007ebc:	f7fd fd84 	bl	80059c8 <__errno>
 8007ec0:	2316      	movs	r3, #22
 8007ec2:	6003      	str	r3, [r0, #0]
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eca:	460d      	mov	r5, r1
 8007ecc:	4835      	ldr	r0, [pc, #212]	; (8007fa4 <_strtol_l.constprop.0+0xf8>)
 8007ece:	462a      	mov	r2, r5
 8007ed0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ed4:	5d06      	ldrb	r6, [r0, r4]
 8007ed6:	f016 0608 	ands.w	r6, r6, #8
 8007eda:	d1f8      	bne.n	8007ece <_strtol_l.constprop.0+0x22>
 8007edc:	2c2d      	cmp	r4, #45	; 0x2d
 8007ede:	d12e      	bne.n	8007f3e <_strtol_l.constprop.0+0x92>
 8007ee0:	2601      	movs	r6, #1
 8007ee2:	782c      	ldrb	r4, [r5, #0]
 8007ee4:	1c95      	adds	r5, r2, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d057      	beq.n	8007f9a <_strtol_l.constprop.0+0xee>
 8007eea:	2b10      	cmp	r3, #16
 8007eec:	d109      	bne.n	8007f02 <_strtol_l.constprop.0+0x56>
 8007eee:	2c30      	cmp	r4, #48	; 0x30
 8007ef0:	d107      	bne.n	8007f02 <_strtol_l.constprop.0+0x56>
 8007ef2:	782a      	ldrb	r2, [r5, #0]
 8007ef4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007ef8:	2a58      	cmp	r2, #88	; 0x58
 8007efa:	d149      	bne.n	8007f90 <_strtol_l.constprop.0+0xe4>
 8007efc:	2310      	movs	r3, #16
 8007efe:	786c      	ldrb	r4, [r5, #1]
 8007f00:	3502      	adds	r5, #2
 8007f02:	2200      	movs	r2, #0
 8007f04:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007f08:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f0c:	fbbc f9f3 	udiv	r9, ip, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f16:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007f1a:	2f09      	cmp	r7, #9
 8007f1c:	d814      	bhi.n	8007f48 <_strtol_l.constprop.0+0x9c>
 8007f1e:	463c      	mov	r4, r7
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	dd20      	ble.n	8007f66 <_strtol_l.constprop.0+0xba>
 8007f24:	1c57      	adds	r7, r2, #1
 8007f26:	d007      	beq.n	8007f38 <_strtol_l.constprop.0+0x8c>
 8007f28:	4581      	cmp	r9, r0
 8007f2a:	d319      	bcc.n	8007f60 <_strtol_l.constprop.0+0xb4>
 8007f2c:	d101      	bne.n	8007f32 <_strtol_l.constprop.0+0x86>
 8007f2e:	45a2      	cmp	sl, r4
 8007f30:	db16      	blt.n	8007f60 <_strtol_l.constprop.0+0xb4>
 8007f32:	2201      	movs	r2, #1
 8007f34:	fb00 4003 	mla	r0, r0, r3, r4
 8007f38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f3c:	e7eb      	b.n	8007f16 <_strtol_l.constprop.0+0x6a>
 8007f3e:	2c2b      	cmp	r4, #43	; 0x2b
 8007f40:	bf04      	itt	eq
 8007f42:	782c      	ldrbeq	r4, [r5, #0]
 8007f44:	1c95      	addeq	r5, r2, #2
 8007f46:	e7ce      	b.n	8007ee6 <_strtol_l.constprop.0+0x3a>
 8007f48:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007f4c:	2f19      	cmp	r7, #25
 8007f4e:	d801      	bhi.n	8007f54 <_strtol_l.constprop.0+0xa8>
 8007f50:	3c37      	subs	r4, #55	; 0x37
 8007f52:	e7e5      	b.n	8007f20 <_strtol_l.constprop.0+0x74>
 8007f54:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007f58:	2f19      	cmp	r7, #25
 8007f5a:	d804      	bhi.n	8007f66 <_strtol_l.constprop.0+0xba>
 8007f5c:	3c57      	subs	r4, #87	; 0x57
 8007f5e:	e7df      	b.n	8007f20 <_strtol_l.constprop.0+0x74>
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295
 8007f64:	e7e8      	b.n	8007f38 <_strtol_l.constprop.0+0x8c>
 8007f66:	1c53      	adds	r3, r2, #1
 8007f68:	d108      	bne.n	8007f7c <_strtol_l.constprop.0+0xd0>
 8007f6a:	2322      	movs	r3, #34	; 0x22
 8007f6c:	4660      	mov	r0, ip
 8007f6e:	f8ce 3000 	str.w	r3, [lr]
 8007f72:	f1b8 0f00 	cmp.w	r8, #0
 8007f76:	d0a6      	beq.n	8007ec6 <_strtol_l.constprop.0+0x1a>
 8007f78:	1e69      	subs	r1, r5, #1
 8007f7a:	e006      	b.n	8007f8a <_strtol_l.constprop.0+0xde>
 8007f7c:	b106      	cbz	r6, 8007f80 <_strtol_l.constprop.0+0xd4>
 8007f7e:	4240      	negs	r0, r0
 8007f80:	f1b8 0f00 	cmp.w	r8, #0
 8007f84:	d09f      	beq.n	8007ec6 <_strtol_l.constprop.0+0x1a>
 8007f86:	2a00      	cmp	r2, #0
 8007f88:	d1f6      	bne.n	8007f78 <_strtol_l.constprop.0+0xcc>
 8007f8a:	f8c8 1000 	str.w	r1, [r8]
 8007f8e:	e79a      	b.n	8007ec6 <_strtol_l.constprop.0+0x1a>
 8007f90:	2430      	movs	r4, #48	; 0x30
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1b5      	bne.n	8007f02 <_strtol_l.constprop.0+0x56>
 8007f96:	2308      	movs	r3, #8
 8007f98:	e7b3      	b.n	8007f02 <_strtol_l.constprop.0+0x56>
 8007f9a:	2c30      	cmp	r4, #48	; 0x30
 8007f9c:	d0a9      	beq.n	8007ef2 <_strtol_l.constprop.0+0x46>
 8007f9e:	230a      	movs	r3, #10
 8007fa0:	e7af      	b.n	8007f02 <_strtol_l.constprop.0+0x56>
 8007fa2:	bf00      	nop
 8007fa4:	0800bb69 	.word	0x0800bb69

08007fa8 <_strtol_r>:
 8007fa8:	f7ff bf80 	b.w	8007eac <_strtol_l.constprop.0>

08007fac <__ssputs_r>:
 8007fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb0:	461f      	mov	r7, r3
 8007fb2:	688e      	ldr	r6, [r1, #8]
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	42be      	cmp	r6, r7
 8007fb8:	460c      	mov	r4, r1
 8007fba:	4690      	mov	r8, r2
 8007fbc:	680b      	ldr	r3, [r1, #0]
 8007fbe:	d82c      	bhi.n	800801a <__ssputs_r+0x6e>
 8007fc0:	898a      	ldrh	r2, [r1, #12]
 8007fc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fc6:	d026      	beq.n	8008016 <__ssputs_r+0x6a>
 8007fc8:	6965      	ldr	r5, [r4, #20]
 8007fca:	6909      	ldr	r1, [r1, #16]
 8007fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fd0:	eba3 0901 	sub.w	r9, r3, r1
 8007fd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fd8:	1c7b      	adds	r3, r7, #1
 8007fda:	444b      	add	r3, r9
 8007fdc:	106d      	asrs	r5, r5, #1
 8007fde:	429d      	cmp	r5, r3
 8007fe0:	bf38      	it	cc
 8007fe2:	461d      	movcc	r5, r3
 8007fe4:	0553      	lsls	r3, r2, #21
 8007fe6:	d527      	bpl.n	8008038 <__ssputs_r+0x8c>
 8007fe8:	4629      	mov	r1, r5
 8007fea:	f7fe fc19 	bl	8006820 <_malloc_r>
 8007fee:	4606      	mov	r6, r0
 8007ff0:	b360      	cbz	r0, 800804c <__ssputs_r+0xa0>
 8007ff2:	464a      	mov	r2, r9
 8007ff4:	6921      	ldr	r1, [r4, #16]
 8007ff6:	f7fd fd22 	bl	8005a3e <memcpy>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008004:	81a3      	strh	r3, [r4, #12]
 8008006:	6126      	str	r6, [r4, #16]
 8008008:	444e      	add	r6, r9
 800800a:	6026      	str	r6, [r4, #0]
 800800c:	463e      	mov	r6, r7
 800800e:	6165      	str	r5, [r4, #20]
 8008010:	eba5 0509 	sub.w	r5, r5, r9
 8008014:	60a5      	str	r5, [r4, #8]
 8008016:	42be      	cmp	r6, r7
 8008018:	d900      	bls.n	800801c <__ssputs_r+0x70>
 800801a:	463e      	mov	r6, r7
 800801c:	4632      	mov	r2, r6
 800801e:	4641      	mov	r1, r8
 8008020:	6820      	ldr	r0, [r4, #0]
 8008022:	f000 fb9d 	bl	8008760 <memmove>
 8008026:	2000      	movs	r0, #0
 8008028:	68a3      	ldr	r3, [r4, #8]
 800802a:	1b9b      	subs	r3, r3, r6
 800802c:	60a3      	str	r3, [r4, #8]
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	4433      	add	r3, r6
 8008032:	6023      	str	r3, [r4, #0]
 8008034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008038:	462a      	mov	r2, r5
 800803a:	f000 ff70 	bl	8008f1e <_realloc_r>
 800803e:	4606      	mov	r6, r0
 8008040:	2800      	cmp	r0, #0
 8008042:	d1e0      	bne.n	8008006 <__ssputs_r+0x5a>
 8008044:	4650      	mov	r0, sl
 8008046:	6921      	ldr	r1, [r4, #16]
 8008048:	f7fe fb7a 	bl	8006740 <_free_r>
 800804c:	230c      	movs	r3, #12
 800804e:	f8ca 3000 	str.w	r3, [sl]
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	f04f 30ff 	mov.w	r0, #4294967295
 8008058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	e7e9      	b.n	8008034 <__ssputs_r+0x88>

08008060 <_svfiprintf_r>:
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	4698      	mov	r8, r3
 8008066:	898b      	ldrh	r3, [r1, #12]
 8008068:	4607      	mov	r7, r0
 800806a:	061b      	lsls	r3, r3, #24
 800806c:	460d      	mov	r5, r1
 800806e:	4614      	mov	r4, r2
 8008070:	b09d      	sub	sp, #116	; 0x74
 8008072:	d50e      	bpl.n	8008092 <_svfiprintf_r+0x32>
 8008074:	690b      	ldr	r3, [r1, #16]
 8008076:	b963      	cbnz	r3, 8008092 <_svfiprintf_r+0x32>
 8008078:	2140      	movs	r1, #64	; 0x40
 800807a:	f7fe fbd1 	bl	8006820 <_malloc_r>
 800807e:	6028      	str	r0, [r5, #0]
 8008080:	6128      	str	r0, [r5, #16]
 8008082:	b920      	cbnz	r0, 800808e <_svfiprintf_r+0x2e>
 8008084:	230c      	movs	r3, #12
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	f04f 30ff 	mov.w	r0, #4294967295
 800808c:	e0d0      	b.n	8008230 <_svfiprintf_r+0x1d0>
 800808e:	2340      	movs	r3, #64	; 0x40
 8008090:	616b      	str	r3, [r5, #20]
 8008092:	2300      	movs	r3, #0
 8008094:	9309      	str	r3, [sp, #36]	; 0x24
 8008096:	2320      	movs	r3, #32
 8008098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800809c:	2330      	movs	r3, #48	; 0x30
 800809e:	f04f 0901 	mov.w	r9, #1
 80080a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80080a6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008248 <_svfiprintf_r+0x1e8>
 80080aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ae:	4623      	mov	r3, r4
 80080b0:	469a      	mov	sl, r3
 80080b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b6:	b10a      	cbz	r2, 80080bc <_svfiprintf_r+0x5c>
 80080b8:	2a25      	cmp	r2, #37	; 0x25
 80080ba:	d1f9      	bne.n	80080b0 <_svfiprintf_r+0x50>
 80080bc:	ebba 0b04 	subs.w	fp, sl, r4
 80080c0:	d00b      	beq.n	80080da <_svfiprintf_r+0x7a>
 80080c2:	465b      	mov	r3, fp
 80080c4:	4622      	mov	r2, r4
 80080c6:	4629      	mov	r1, r5
 80080c8:	4638      	mov	r0, r7
 80080ca:	f7ff ff6f 	bl	8007fac <__ssputs_r>
 80080ce:	3001      	adds	r0, #1
 80080d0:	f000 80a9 	beq.w	8008226 <_svfiprintf_r+0x1c6>
 80080d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d6:	445a      	add	r2, fp
 80080d8:	9209      	str	r2, [sp, #36]	; 0x24
 80080da:	f89a 3000 	ldrb.w	r3, [sl]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 80a1 	beq.w	8008226 <_svfiprintf_r+0x1c6>
 80080e4:	2300      	movs	r3, #0
 80080e6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ee:	f10a 0a01 	add.w	sl, sl, #1
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	9307      	str	r3, [sp, #28]
 80080f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080fa:	931a      	str	r3, [sp, #104]	; 0x68
 80080fc:	4654      	mov	r4, sl
 80080fe:	2205      	movs	r2, #5
 8008100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008104:	4850      	ldr	r0, [pc, #320]	; (8008248 <_svfiprintf_r+0x1e8>)
 8008106:	f7fd fc8c 	bl	8005a22 <memchr>
 800810a:	9a04      	ldr	r2, [sp, #16]
 800810c:	b9d8      	cbnz	r0, 8008146 <_svfiprintf_r+0xe6>
 800810e:	06d0      	lsls	r0, r2, #27
 8008110:	bf44      	itt	mi
 8008112:	2320      	movmi	r3, #32
 8008114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008118:	0711      	lsls	r1, r2, #28
 800811a:	bf44      	itt	mi
 800811c:	232b      	movmi	r3, #43	; 0x2b
 800811e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008122:	f89a 3000 	ldrb.w	r3, [sl]
 8008126:	2b2a      	cmp	r3, #42	; 0x2a
 8008128:	d015      	beq.n	8008156 <_svfiprintf_r+0xf6>
 800812a:	4654      	mov	r4, sl
 800812c:	2000      	movs	r0, #0
 800812e:	f04f 0c0a 	mov.w	ip, #10
 8008132:	9a07      	ldr	r2, [sp, #28]
 8008134:	4621      	mov	r1, r4
 8008136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800813a:	3b30      	subs	r3, #48	; 0x30
 800813c:	2b09      	cmp	r3, #9
 800813e:	d94d      	bls.n	80081dc <_svfiprintf_r+0x17c>
 8008140:	b1b0      	cbz	r0, 8008170 <_svfiprintf_r+0x110>
 8008142:	9207      	str	r2, [sp, #28]
 8008144:	e014      	b.n	8008170 <_svfiprintf_r+0x110>
 8008146:	eba0 0308 	sub.w	r3, r0, r8
 800814a:	fa09 f303 	lsl.w	r3, r9, r3
 800814e:	4313      	orrs	r3, r2
 8008150:	46a2      	mov	sl, r4
 8008152:	9304      	str	r3, [sp, #16]
 8008154:	e7d2      	b.n	80080fc <_svfiprintf_r+0x9c>
 8008156:	9b03      	ldr	r3, [sp, #12]
 8008158:	1d19      	adds	r1, r3, #4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	9103      	str	r1, [sp, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	bfbb      	ittet	lt
 8008162:	425b      	neglt	r3, r3
 8008164:	f042 0202 	orrlt.w	r2, r2, #2
 8008168:	9307      	strge	r3, [sp, #28]
 800816a:	9307      	strlt	r3, [sp, #28]
 800816c:	bfb8      	it	lt
 800816e:	9204      	strlt	r2, [sp, #16]
 8008170:	7823      	ldrb	r3, [r4, #0]
 8008172:	2b2e      	cmp	r3, #46	; 0x2e
 8008174:	d10c      	bne.n	8008190 <_svfiprintf_r+0x130>
 8008176:	7863      	ldrb	r3, [r4, #1]
 8008178:	2b2a      	cmp	r3, #42	; 0x2a
 800817a:	d134      	bne.n	80081e6 <_svfiprintf_r+0x186>
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	3402      	adds	r4, #2
 8008180:	1d1a      	adds	r2, r3, #4
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	9203      	str	r2, [sp, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	bfb8      	it	lt
 800818a:	f04f 33ff 	movlt.w	r3, #4294967295
 800818e:	9305      	str	r3, [sp, #20]
 8008190:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800824c <_svfiprintf_r+0x1ec>
 8008194:	2203      	movs	r2, #3
 8008196:	4650      	mov	r0, sl
 8008198:	7821      	ldrb	r1, [r4, #0]
 800819a:	f7fd fc42 	bl	8005a22 <memchr>
 800819e:	b138      	cbz	r0, 80081b0 <_svfiprintf_r+0x150>
 80081a0:	2240      	movs	r2, #64	; 0x40
 80081a2:	9b04      	ldr	r3, [sp, #16]
 80081a4:	eba0 000a 	sub.w	r0, r0, sl
 80081a8:	4082      	lsls	r2, r0
 80081aa:	4313      	orrs	r3, r2
 80081ac:	3401      	adds	r4, #1
 80081ae:	9304      	str	r3, [sp, #16]
 80081b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b4:	2206      	movs	r2, #6
 80081b6:	4826      	ldr	r0, [pc, #152]	; (8008250 <_svfiprintf_r+0x1f0>)
 80081b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081bc:	f7fd fc31 	bl	8005a22 <memchr>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d038      	beq.n	8008236 <_svfiprintf_r+0x1d6>
 80081c4:	4b23      	ldr	r3, [pc, #140]	; (8008254 <_svfiprintf_r+0x1f4>)
 80081c6:	bb1b      	cbnz	r3, 8008210 <_svfiprintf_r+0x1b0>
 80081c8:	9b03      	ldr	r3, [sp, #12]
 80081ca:	3307      	adds	r3, #7
 80081cc:	f023 0307 	bic.w	r3, r3, #7
 80081d0:	3308      	adds	r3, #8
 80081d2:	9303      	str	r3, [sp, #12]
 80081d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d6:	4433      	add	r3, r6
 80081d8:	9309      	str	r3, [sp, #36]	; 0x24
 80081da:	e768      	b.n	80080ae <_svfiprintf_r+0x4e>
 80081dc:	460c      	mov	r4, r1
 80081de:	2001      	movs	r0, #1
 80081e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80081e4:	e7a6      	b.n	8008134 <_svfiprintf_r+0xd4>
 80081e6:	2300      	movs	r3, #0
 80081e8:	f04f 0c0a 	mov.w	ip, #10
 80081ec:	4619      	mov	r1, r3
 80081ee:	3401      	adds	r4, #1
 80081f0:	9305      	str	r3, [sp, #20]
 80081f2:	4620      	mov	r0, r4
 80081f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081f8:	3a30      	subs	r2, #48	; 0x30
 80081fa:	2a09      	cmp	r2, #9
 80081fc:	d903      	bls.n	8008206 <_svfiprintf_r+0x1a6>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0c6      	beq.n	8008190 <_svfiprintf_r+0x130>
 8008202:	9105      	str	r1, [sp, #20]
 8008204:	e7c4      	b.n	8008190 <_svfiprintf_r+0x130>
 8008206:	4604      	mov	r4, r0
 8008208:	2301      	movs	r3, #1
 800820a:	fb0c 2101 	mla	r1, ip, r1, r2
 800820e:	e7f0      	b.n	80081f2 <_svfiprintf_r+0x192>
 8008210:	ab03      	add	r3, sp, #12
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	462a      	mov	r2, r5
 8008216:	4638      	mov	r0, r7
 8008218:	4b0f      	ldr	r3, [pc, #60]	; (8008258 <_svfiprintf_r+0x1f8>)
 800821a:	a904      	add	r1, sp, #16
 800821c:	f7fc fc46 	bl	8004aac <_printf_float>
 8008220:	1c42      	adds	r2, r0, #1
 8008222:	4606      	mov	r6, r0
 8008224:	d1d6      	bne.n	80081d4 <_svfiprintf_r+0x174>
 8008226:	89ab      	ldrh	r3, [r5, #12]
 8008228:	065b      	lsls	r3, r3, #25
 800822a:	f53f af2d 	bmi.w	8008088 <_svfiprintf_r+0x28>
 800822e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008230:	b01d      	add	sp, #116	; 0x74
 8008232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008236:	ab03      	add	r3, sp, #12
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	462a      	mov	r2, r5
 800823c:	4638      	mov	r0, r7
 800823e:	4b06      	ldr	r3, [pc, #24]	; (8008258 <_svfiprintf_r+0x1f8>)
 8008240:	a904      	add	r1, sp, #16
 8008242:	f7fc fed3 	bl	8004fec <_printf_i>
 8008246:	e7eb      	b.n	8008220 <_svfiprintf_r+0x1c0>
 8008248:	0800bc69 	.word	0x0800bc69
 800824c:	0800bc6f 	.word	0x0800bc6f
 8008250:	0800bc73 	.word	0x0800bc73
 8008254:	08004aad 	.word	0x08004aad
 8008258:	08007fad 	.word	0x08007fad

0800825c <__sfputc_r>:
 800825c:	6893      	ldr	r3, [r2, #8]
 800825e:	b410      	push	{r4}
 8008260:	3b01      	subs	r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	6093      	str	r3, [r2, #8]
 8008266:	da07      	bge.n	8008278 <__sfputc_r+0x1c>
 8008268:	6994      	ldr	r4, [r2, #24]
 800826a:	42a3      	cmp	r3, r4
 800826c:	db01      	blt.n	8008272 <__sfputc_r+0x16>
 800826e:	290a      	cmp	r1, #10
 8008270:	d102      	bne.n	8008278 <__sfputc_r+0x1c>
 8008272:	bc10      	pop	{r4}
 8008274:	f000 b9de 	b.w	8008634 <__swbuf_r>
 8008278:	6813      	ldr	r3, [r2, #0]
 800827a:	1c58      	adds	r0, r3, #1
 800827c:	6010      	str	r0, [r2, #0]
 800827e:	7019      	strb	r1, [r3, #0]
 8008280:	4608      	mov	r0, r1
 8008282:	bc10      	pop	{r4}
 8008284:	4770      	bx	lr

08008286 <__sfputs_r>:
 8008286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008288:	4606      	mov	r6, r0
 800828a:	460f      	mov	r7, r1
 800828c:	4614      	mov	r4, r2
 800828e:	18d5      	adds	r5, r2, r3
 8008290:	42ac      	cmp	r4, r5
 8008292:	d101      	bne.n	8008298 <__sfputs_r+0x12>
 8008294:	2000      	movs	r0, #0
 8008296:	e007      	b.n	80082a8 <__sfputs_r+0x22>
 8008298:	463a      	mov	r2, r7
 800829a:	4630      	mov	r0, r6
 800829c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a0:	f7ff ffdc 	bl	800825c <__sfputc_r>
 80082a4:	1c43      	adds	r3, r0, #1
 80082a6:	d1f3      	bne.n	8008290 <__sfputs_r+0xa>
 80082a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082ac <_vfiprintf_r>:
 80082ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b0:	460d      	mov	r5, r1
 80082b2:	4614      	mov	r4, r2
 80082b4:	4698      	mov	r8, r3
 80082b6:	4606      	mov	r6, r0
 80082b8:	b09d      	sub	sp, #116	; 0x74
 80082ba:	b118      	cbz	r0, 80082c4 <_vfiprintf_r+0x18>
 80082bc:	6a03      	ldr	r3, [r0, #32]
 80082be:	b90b      	cbnz	r3, 80082c4 <_vfiprintf_r+0x18>
 80082c0:	f7fd fa50 	bl	8005764 <__sinit>
 80082c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082c6:	07d9      	lsls	r1, r3, #31
 80082c8:	d405      	bmi.n	80082d6 <_vfiprintf_r+0x2a>
 80082ca:	89ab      	ldrh	r3, [r5, #12]
 80082cc:	059a      	lsls	r2, r3, #22
 80082ce:	d402      	bmi.n	80082d6 <_vfiprintf_r+0x2a>
 80082d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082d2:	f7fd fba4 	bl	8005a1e <__retarget_lock_acquire_recursive>
 80082d6:	89ab      	ldrh	r3, [r5, #12]
 80082d8:	071b      	lsls	r3, r3, #28
 80082da:	d501      	bpl.n	80082e0 <_vfiprintf_r+0x34>
 80082dc:	692b      	ldr	r3, [r5, #16]
 80082de:	b99b      	cbnz	r3, 8008308 <_vfiprintf_r+0x5c>
 80082e0:	4629      	mov	r1, r5
 80082e2:	4630      	mov	r0, r6
 80082e4:	f000 f9e4 	bl	80086b0 <__swsetup_r>
 80082e8:	b170      	cbz	r0, 8008308 <_vfiprintf_r+0x5c>
 80082ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082ec:	07dc      	lsls	r4, r3, #31
 80082ee:	d504      	bpl.n	80082fa <_vfiprintf_r+0x4e>
 80082f0:	f04f 30ff 	mov.w	r0, #4294967295
 80082f4:	b01d      	add	sp, #116	; 0x74
 80082f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fa:	89ab      	ldrh	r3, [r5, #12]
 80082fc:	0598      	lsls	r0, r3, #22
 80082fe:	d4f7      	bmi.n	80082f0 <_vfiprintf_r+0x44>
 8008300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008302:	f7fd fb8d 	bl	8005a20 <__retarget_lock_release_recursive>
 8008306:	e7f3      	b.n	80082f0 <_vfiprintf_r+0x44>
 8008308:	2300      	movs	r3, #0
 800830a:	9309      	str	r3, [sp, #36]	; 0x24
 800830c:	2320      	movs	r3, #32
 800830e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008312:	2330      	movs	r3, #48	; 0x30
 8008314:	f04f 0901 	mov.w	r9, #1
 8008318:	f8cd 800c 	str.w	r8, [sp, #12]
 800831c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80084cc <_vfiprintf_r+0x220>
 8008320:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008324:	4623      	mov	r3, r4
 8008326:	469a      	mov	sl, r3
 8008328:	f813 2b01 	ldrb.w	r2, [r3], #1
 800832c:	b10a      	cbz	r2, 8008332 <_vfiprintf_r+0x86>
 800832e:	2a25      	cmp	r2, #37	; 0x25
 8008330:	d1f9      	bne.n	8008326 <_vfiprintf_r+0x7a>
 8008332:	ebba 0b04 	subs.w	fp, sl, r4
 8008336:	d00b      	beq.n	8008350 <_vfiprintf_r+0xa4>
 8008338:	465b      	mov	r3, fp
 800833a:	4622      	mov	r2, r4
 800833c:	4629      	mov	r1, r5
 800833e:	4630      	mov	r0, r6
 8008340:	f7ff ffa1 	bl	8008286 <__sfputs_r>
 8008344:	3001      	adds	r0, #1
 8008346:	f000 80a9 	beq.w	800849c <_vfiprintf_r+0x1f0>
 800834a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800834c:	445a      	add	r2, fp
 800834e:	9209      	str	r2, [sp, #36]	; 0x24
 8008350:	f89a 3000 	ldrb.w	r3, [sl]
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 80a1 	beq.w	800849c <_vfiprintf_r+0x1f0>
 800835a:	2300      	movs	r3, #0
 800835c:	f04f 32ff 	mov.w	r2, #4294967295
 8008360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008364:	f10a 0a01 	add.w	sl, sl, #1
 8008368:	9304      	str	r3, [sp, #16]
 800836a:	9307      	str	r3, [sp, #28]
 800836c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008370:	931a      	str	r3, [sp, #104]	; 0x68
 8008372:	4654      	mov	r4, sl
 8008374:	2205      	movs	r2, #5
 8008376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800837a:	4854      	ldr	r0, [pc, #336]	; (80084cc <_vfiprintf_r+0x220>)
 800837c:	f7fd fb51 	bl	8005a22 <memchr>
 8008380:	9a04      	ldr	r2, [sp, #16]
 8008382:	b9d8      	cbnz	r0, 80083bc <_vfiprintf_r+0x110>
 8008384:	06d1      	lsls	r1, r2, #27
 8008386:	bf44      	itt	mi
 8008388:	2320      	movmi	r3, #32
 800838a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800838e:	0713      	lsls	r3, r2, #28
 8008390:	bf44      	itt	mi
 8008392:	232b      	movmi	r3, #43	; 0x2b
 8008394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008398:	f89a 3000 	ldrb.w	r3, [sl]
 800839c:	2b2a      	cmp	r3, #42	; 0x2a
 800839e:	d015      	beq.n	80083cc <_vfiprintf_r+0x120>
 80083a0:	4654      	mov	r4, sl
 80083a2:	2000      	movs	r0, #0
 80083a4:	f04f 0c0a 	mov.w	ip, #10
 80083a8:	9a07      	ldr	r2, [sp, #28]
 80083aa:	4621      	mov	r1, r4
 80083ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083b0:	3b30      	subs	r3, #48	; 0x30
 80083b2:	2b09      	cmp	r3, #9
 80083b4:	d94d      	bls.n	8008452 <_vfiprintf_r+0x1a6>
 80083b6:	b1b0      	cbz	r0, 80083e6 <_vfiprintf_r+0x13a>
 80083b8:	9207      	str	r2, [sp, #28]
 80083ba:	e014      	b.n	80083e6 <_vfiprintf_r+0x13a>
 80083bc:	eba0 0308 	sub.w	r3, r0, r8
 80083c0:	fa09 f303 	lsl.w	r3, r9, r3
 80083c4:	4313      	orrs	r3, r2
 80083c6:	46a2      	mov	sl, r4
 80083c8:	9304      	str	r3, [sp, #16]
 80083ca:	e7d2      	b.n	8008372 <_vfiprintf_r+0xc6>
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	1d19      	adds	r1, r3, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	9103      	str	r1, [sp, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bfbb      	ittet	lt
 80083d8:	425b      	neglt	r3, r3
 80083da:	f042 0202 	orrlt.w	r2, r2, #2
 80083de:	9307      	strge	r3, [sp, #28]
 80083e0:	9307      	strlt	r3, [sp, #28]
 80083e2:	bfb8      	it	lt
 80083e4:	9204      	strlt	r2, [sp, #16]
 80083e6:	7823      	ldrb	r3, [r4, #0]
 80083e8:	2b2e      	cmp	r3, #46	; 0x2e
 80083ea:	d10c      	bne.n	8008406 <_vfiprintf_r+0x15a>
 80083ec:	7863      	ldrb	r3, [r4, #1]
 80083ee:	2b2a      	cmp	r3, #42	; 0x2a
 80083f0:	d134      	bne.n	800845c <_vfiprintf_r+0x1b0>
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	3402      	adds	r4, #2
 80083f6:	1d1a      	adds	r2, r3, #4
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	9203      	str	r2, [sp, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	bfb8      	it	lt
 8008400:	f04f 33ff 	movlt.w	r3, #4294967295
 8008404:	9305      	str	r3, [sp, #20]
 8008406:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80084d0 <_vfiprintf_r+0x224>
 800840a:	2203      	movs	r2, #3
 800840c:	4650      	mov	r0, sl
 800840e:	7821      	ldrb	r1, [r4, #0]
 8008410:	f7fd fb07 	bl	8005a22 <memchr>
 8008414:	b138      	cbz	r0, 8008426 <_vfiprintf_r+0x17a>
 8008416:	2240      	movs	r2, #64	; 0x40
 8008418:	9b04      	ldr	r3, [sp, #16]
 800841a:	eba0 000a 	sub.w	r0, r0, sl
 800841e:	4082      	lsls	r2, r0
 8008420:	4313      	orrs	r3, r2
 8008422:	3401      	adds	r4, #1
 8008424:	9304      	str	r3, [sp, #16]
 8008426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800842a:	2206      	movs	r2, #6
 800842c:	4829      	ldr	r0, [pc, #164]	; (80084d4 <_vfiprintf_r+0x228>)
 800842e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008432:	f7fd faf6 	bl	8005a22 <memchr>
 8008436:	2800      	cmp	r0, #0
 8008438:	d03f      	beq.n	80084ba <_vfiprintf_r+0x20e>
 800843a:	4b27      	ldr	r3, [pc, #156]	; (80084d8 <_vfiprintf_r+0x22c>)
 800843c:	bb1b      	cbnz	r3, 8008486 <_vfiprintf_r+0x1da>
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	3307      	adds	r3, #7
 8008442:	f023 0307 	bic.w	r3, r3, #7
 8008446:	3308      	adds	r3, #8
 8008448:	9303      	str	r3, [sp, #12]
 800844a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800844c:	443b      	add	r3, r7
 800844e:	9309      	str	r3, [sp, #36]	; 0x24
 8008450:	e768      	b.n	8008324 <_vfiprintf_r+0x78>
 8008452:	460c      	mov	r4, r1
 8008454:	2001      	movs	r0, #1
 8008456:	fb0c 3202 	mla	r2, ip, r2, r3
 800845a:	e7a6      	b.n	80083aa <_vfiprintf_r+0xfe>
 800845c:	2300      	movs	r3, #0
 800845e:	f04f 0c0a 	mov.w	ip, #10
 8008462:	4619      	mov	r1, r3
 8008464:	3401      	adds	r4, #1
 8008466:	9305      	str	r3, [sp, #20]
 8008468:	4620      	mov	r0, r4
 800846a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800846e:	3a30      	subs	r2, #48	; 0x30
 8008470:	2a09      	cmp	r2, #9
 8008472:	d903      	bls.n	800847c <_vfiprintf_r+0x1d0>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0c6      	beq.n	8008406 <_vfiprintf_r+0x15a>
 8008478:	9105      	str	r1, [sp, #20]
 800847a:	e7c4      	b.n	8008406 <_vfiprintf_r+0x15a>
 800847c:	4604      	mov	r4, r0
 800847e:	2301      	movs	r3, #1
 8008480:	fb0c 2101 	mla	r1, ip, r1, r2
 8008484:	e7f0      	b.n	8008468 <_vfiprintf_r+0x1bc>
 8008486:	ab03      	add	r3, sp, #12
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	462a      	mov	r2, r5
 800848c:	4630      	mov	r0, r6
 800848e:	4b13      	ldr	r3, [pc, #76]	; (80084dc <_vfiprintf_r+0x230>)
 8008490:	a904      	add	r1, sp, #16
 8008492:	f7fc fb0b 	bl	8004aac <_printf_float>
 8008496:	4607      	mov	r7, r0
 8008498:	1c78      	adds	r0, r7, #1
 800849a:	d1d6      	bne.n	800844a <_vfiprintf_r+0x19e>
 800849c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800849e:	07d9      	lsls	r1, r3, #31
 80084a0:	d405      	bmi.n	80084ae <_vfiprintf_r+0x202>
 80084a2:	89ab      	ldrh	r3, [r5, #12]
 80084a4:	059a      	lsls	r2, r3, #22
 80084a6:	d402      	bmi.n	80084ae <_vfiprintf_r+0x202>
 80084a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084aa:	f7fd fab9 	bl	8005a20 <__retarget_lock_release_recursive>
 80084ae:	89ab      	ldrh	r3, [r5, #12]
 80084b0:	065b      	lsls	r3, r3, #25
 80084b2:	f53f af1d 	bmi.w	80082f0 <_vfiprintf_r+0x44>
 80084b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084b8:	e71c      	b.n	80082f4 <_vfiprintf_r+0x48>
 80084ba:	ab03      	add	r3, sp, #12
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	462a      	mov	r2, r5
 80084c0:	4630      	mov	r0, r6
 80084c2:	4b06      	ldr	r3, [pc, #24]	; (80084dc <_vfiprintf_r+0x230>)
 80084c4:	a904      	add	r1, sp, #16
 80084c6:	f7fc fd91 	bl	8004fec <_printf_i>
 80084ca:	e7e4      	b.n	8008496 <_vfiprintf_r+0x1ea>
 80084cc:	0800bc69 	.word	0x0800bc69
 80084d0:	0800bc6f 	.word	0x0800bc6f
 80084d4:	0800bc73 	.word	0x0800bc73
 80084d8:	08004aad 	.word	0x08004aad
 80084dc:	08008287 	.word	0x08008287

080084e0 <__sflush_r>:
 80084e0:	898a      	ldrh	r2, [r1, #12]
 80084e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e4:	4605      	mov	r5, r0
 80084e6:	0710      	lsls	r0, r2, #28
 80084e8:	460c      	mov	r4, r1
 80084ea:	d457      	bmi.n	800859c <__sflush_r+0xbc>
 80084ec:	684b      	ldr	r3, [r1, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	dc04      	bgt.n	80084fc <__sflush_r+0x1c>
 80084f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dc01      	bgt.n	80084fc <__sflush_r+0x1c>
 80084f8:	2000      	movs	r0, #0
 80084fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084fe:	2e00      	cmp	r6, #0
 8008500:	d0fa      	beq.n	80084f8 <__sflush_r+0x18>
 8008502:	2300      	movs	r3, #0
 8008504:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008508:	682f      	ldr	r7, [r5, #0]
 800850a:	6a21      	ldr	r1, [r4, #32]
 800850c:	602b      	str	r3, [r5, #0]
 800850e:	d032      	beq.n	8008576 <__sflush_r+0x96>
 8008510:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	075a      	lsls	r2, r3, #29
 8008516:	d505      	bpl.n	8008524 <__sflush_r+0x44>
 8008518:	6863      	ldr	r3, [r4, #4]
 800851a:	1ac0      	subs	r0, r0, r3
 800851c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800851e:	b10b      	cbz	r3, 8008524 <__sflush_r+0x44>
 8008520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008522:	1ac0      	subs	r0, r0, r3
 8008524:	2300      	movs	r3, #0
 8008526:	4602      	mov	r2, r0
 8008528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800852a:	4628      	mov	r0, r5
 800852c:	6a21      	ldr	r1, [r4, #32]
 800852e:	47b0      	blx	r6
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	89a3      	ldrh	r3, [r4, #12]
 8008534:	d106      	bne.n	8008544 <__sflush_r+0x64>
 8008536:	6829      	ldr	r1, [r5, #0]
 8008538:	291d      	cmp	r1, #29
 800853a:	d82b      	bhi.n	8008594 <__sflush_r+0xb4>
 800853c:	4a28      	ldr	r2, [pc, #160]	; (80085e0 <__sflush_r+0x100>)
 800853e:	410a      	asrs	r2, r1
 8008540:	07d6      	lsls	r6, r2, #31
 8008542:	d427      	bmi.n	8008594 <__sflush_r+0xb4>
 8008544:	2200      	movs	r2, #0
 8008546:	6062      	str	r2, [r4, #4]
 8008548:	6922      	ldr	r2, [r4, #16]
 800854a:	04d9      	lsls	r1, r3, #19
 800854c:	6022      	str	r2, [r4, #0]
 800854e:	d504      	bpl.n	800855a <__sflush_r+0x7a>
 8008550:	1c42      	adds	r2, r0, #1
 8008552:	d101      	bne.n	8008558 <__sflush_r+0x78>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	b903      	cbnz	r3, 800855a <__sflush_r+0x7a>
 8008558:	6560      	str	r0, [r4, #84]	; 0x54
 800855a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800855c:	602f      	str	r7, [r5, #0]
 800855e:	2900      	cmp	r1, #0
 8008560:	d0ca      	beq.n	80084f8 <__sflush_r+0x18>
 8008562:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008566:	4299      	cmp	r1, r3
 8008568:	d002      	beq.n	8008570 <__sflush_r+0x90>
 800856a:	4628      	mov	r0, r5
 800856c:	f7fe f8e8 	bl	8006740 <_free_r>
 8008570:	2000      	movs	r0, #0
 8008572:	6360      	str	r0, [r4, #52]	; 0x34
 8008574:	e7c1      	b.n	80084fa <__sflush_r+0x1a>
 8008576:	2301      	movs	r3, #1
 8008578:	4628      	mov	r0, r5
 800857a:	47b0      	blx	r6
 800857c:	1c41      	adds	r1, r0, #1
 800857e:	d1c8      	bne.n	8008512 <__sflush_r+0x32>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0c5      	beq.n	8008512 <__sflush_r+0x32>
 8008586:	2b1d      	cmp	r3, #29
 8008588:	d001      	beq.n	800858e <__sflush_r+0xae>
 800858a:	2b16      	cmp	r3, #22
 800858c:	d101      	bne.n	8008592 <__sflush_r+0xb2>
 800858e:	602f      	str	r7, [r5, #0]
 8008590:	e7b2      	b.n	80084f8 <__sflush_r+0x18>
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008598:	81a3      	strh	r3, [r4, #12]
 800859a:	e7ae      	b.n	80084fa <__sflush_r+0x1a>
 800859c:	690f      	ldr	r7, [r1, #16]
 800859e:	2f00      	cmp	r7, #0
 80085a0:	d0aa      	beq.n	80084f8 <__sflush_r+0x18>
 80085a2:	0793      	lsls	r3, r2, #30
 80085a4:	bf18      	it	ne
 80085a6:	2300      	movne	r3, #0
 80085a8:	680e      	ldr	r6, [r1, #0]
 80085aa:	bf08      	it	eq
 80085ac:	694b      	ldreq	r3, [r1, #20]
 80085ae:	1bf6      	subs	r6, r6, r7
 80085b0:	600f      	str	r7, [r1, #0]
 80085b2:	608b      	str	r3, [r1, #8]
 80085b4:	2e00      	cmp	r6, #0
 80085b6:	dd9f      	ble.n	80084f8 <__sflush_r+0x18>
 80085b8:	4633      	mov	r3, r6
 80085ba:	463a      	mov	r2, r7
 80085bc:	4628      	mov	r0, r5
 80085be:	6a21      	ldr	r1, [r4, #32]
 80085c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80085c4:	47e0      	blx	ip
 80085c6:	2800      	cmp	r0, #0
 80085c8:	dc06      	bgt.n	80085d8 <__sflush_r+0xf8>
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	f04f 30ff 	mov.w	r0, #4294967295
 80085d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085d4:	81a3      	strh	r3, [r4, #12]
 80085d6:	e790      	b.n	80084fa <__sflush_r+0x1a>
 80085d8:	4407      	add	r7, r0
 80085da:	1a36      	subs	r6, r6, r0
 80085dc:	e7ea      	b.n	80085b4 <__sflush_r+0xd4>
 80085de:	bf00      	nop
 80085e0:	dfbffffe 	.word	0xdfbffffe

080085e4 <_fflush_r>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	690b      	ldr	r3, [r1, #16]
 80085e8:	4605      	mov	r5, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	b913      	cbnz	r3, 80085f4 <_fflush_r+0x10>
 80085ee:	2500      	movs	r5, #0
 80085f0:	4628      	mov	r0, r5
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	b118      	cbz	r0, 80085fe <_fflush_r+0x1a>
 80085f6:	6a03      	ldr	r3, [r0, #32]
 80085f8:	b90b      	cbnz	r3, 80085fe <_fflush_r+0x1a>
 80085fa:	f7fd f8b3 	bl	8005764 <__sinit>
 80085fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0f3      	beq.n	80085ee <_fflush_r+0xa>
 8008606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008608:	07d0      	lsls	r0, r2, #31
 800860a:	d404      	bmi.n	8008616 <_fflush_r+0x32>
 800860c:	0599      	lsls	r1, r3, #22
 800860e:	d402      	bmi.n	8008616 <_fflush_r+0x32>
 8008610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008612:	f7fd fa04 	bl	8005a1e <__retarget_lock_acquire_recursive>
 8008616:	4628      	mov	r0, r5
 8008618:	4621      	mov	r1, r4
 800861a:	f7ff ff61 	bl	80084e0 <__sflush_r>
 800861e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008620:	4605      	mov	r5, r0
 8008622:	07da      	lsls	r2, r3, #31
 8008624:	d4e4      	bmi.n	80085f0 <_fflush_r+0xc>
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	059b      	lsls	r3, r3, #22
 800862a:	d4e1      	bmi.n	80085f0 <_fflush_r+0xc>
 800862c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800862e:	f7fd f9f7 	bl	8005a20 <__retarget_lock_release_recursive>
 8008632:	e7dd      	b.n	80085f0 <_fflush_r+0xc>

08008634 <__swbuf_r>:
 8008634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008636:	460e      	mov	r6, r1
 8008638:	4614      	mov	r4, r2
 800863a:	4605      	mov	r5, r0
 800863c:	b118      	cbz	r0, 8008646 <__swbuf_r+0x12>
 800863e:	6a03      	ldr	r3, [r0, #32]
 8008640:	b90b      	cbnz	r3, 8008646 <__swbuf_r+0x12>
 8008642:	f7fd f88f 	bl	8005764 <__sinit>
 8008646:	69a3      	ldr	r3, [r4, #24]
 8008648:	60a3      	str	r3, [r4, #8]
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	071a      	lsls	r2, r3, #28
 800864e:	d525      	bpl.n	800869c <__swbuf_r+0x68>
 8008650:	6923      	ldr	r3, [r4, #16]
 8008652:	b31b      	cbz	r3, 800869c <__swbuf_r+0x68>
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	6922      	ldr	r2, [r4, #16]
 8008658:	b2f6      	uxtb	r6, r6
 800865a:	1a98      	subs	r0, r3, r2
 800865c:	6963      	ldr	r3, [r4, #20]
 800865e:	4637      	mov	r7, r6
 8008660:	4283      	cmp	r3, r0
 8008662:	dc04      	bgt.n	800866e <__swbuf_r+0x3a>
 8008664:	4621      	mov	r1, r4
 8008666:	4628      	mov	r0, r5
 8008668:	f7ff ffbc 	bl	80085e4 <_fflush_r>
 800866c:	b9e0      	cbnz	r0, 80086a8 <__swbuf_r+0x74>
 800866e:	68a3      	ldr	r3, [r4, #8]
 8008670:	3b01      	subs	r3, #1
 8008672:	60a3      	str	r3, [r4, #8]
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	6022      	str	r2, [r4, #0]
 800867a:	701e      	strb	r6, [r3, #0]
 800867c:	6962      	ldr	r2, [r4, #20]
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	429a      	cmp	r2, r3
 8008682:	d004      	beq.n	800868e <__swbuf_r+0x5a>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	07db      	lsls	r3, r3, #31
 8008688:	d506      	bpl.n	8008698 <__swbuf_r+0x64>
 800868a:	2e0a      	cmp	r6, #10
 800868c:	d104      	bne.n	8008698 <__swbuf_r+0x64>
 800868e:	4621      	mov	r1, r4
 8008690:	4628      	mov	r0, r5
 8008692:	f7ff ffa7 	bl	80085e4 <_fflush_r>
 8008696:	b938      	cbnz	r0, 80086a8 <__swbuf_r+0x74>
 8008698:	4638      	mov	r0, r7
 800869a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800869c:	4621      	mov	r1, r4
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 f806 	bl	80086b0 <__swsetup_r>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d0d5      	beq.n	8008654 <__swbuf_r+0x20>
 80086a8:	f04f 37ff 	mov.w	r7, #4294967295
 80086ac:	e7f4      	b.n	8008698 <__swbuf_r+0x64>
	...

080086b0 <__swsetup_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4b2a      	ldr	r3, [pc, #168]	; (800875c <__swsetup_r+0xac>)
 80086b4:	4605      	mov	r5, r0
 80086b6:	6818      	ldr	r0, [r3, #0]
 80086b8:	460c      	mov	r4, r1
 80086ba:	b118      	cbz	r0, 80086c4 <__swsetup_r+0x14>
 80086bc:	6a03      	ldr	r3, [r0, #32]
 80086be:	b90b      	cbnz	r3, 80086c4 <__swsetup_r+0x14>
 80086c0:	f7fd f850 	bl	8005764 <__sinit>
 80086c4:	89a3      	ldrh	r3, [r4, #12]
 80086c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086ca:	0718      	lsls	r0, r3, #28
 80086cc:	d422      	bmi.n	8008714 <__swsetup_r+0x64>
 80086ce:	06d9      	lsls	r1, r3, #27
 80086d0:	d407      	bmi.n	80086e2 <__swsetup_r+0x32>
 80086d2:	2309      	movs	r3, #9
 80086d4:	602b      	str	r3, [r5, #0]
 80086d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086da:	f04f 30ff 	mov.w	r0, #4294967295
 80086de:	81a3      	strh	r3, [r4, #12]
 80086e0:	e034      	b.n	800874c <__swsetup_r+0x9c>
 80086e2:	0758      	lsls	r0, r3, #29
 80086e4:	d512      	bpl.n	800870c <__swsetup_r+0x5c>
 80086e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086e8:	b141      	cbz	r1, 80086fc <__swsetup_r+0x4c>
 80086ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086ee:	4299      	cmp	r1, r3
 80086f0:	d002      	beq.n	80086f8 <__swsetup_r+0x48>
 80086f2:	4628      	mov	r0, r5
 80086f4:	f7fe f824 	bl	8006740 <_free_r>
 80086f8:	2300      	movs	r3, #0
 80086fa:	6363      	str	r3, [r4, #52]	; 0x34
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008702:	81a3      	strh	r3, [r4, #12]
 8008704:	2300      	movs	r3, #0
 8008706:	6063      	str	r3, [r4, #4]
 8008708:	6923      	ldr	r3, [r4, #16]
 800870a:	6023      	str	r3, [r4, #0]
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	f043 0308 	orr.w	r3, r3, #8
 8008712:	81a3      	strh	r3, [r4, #12]
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	b94b      	cbnz	r3, 800872c <__swsetup_r+0x7c>
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800871e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008722:	d003      	beq.n	800872c <__swsetup_r+0x7c>
 8008724:	4621      	mov	r1, r4
 8008726:	4628      	mov	r0, r5
 8008728:	f000 fc6d 	bl	8009006 <__smakebuf_r>
 800872c:	89a0      	ldrh	r0, [r4, #12]
 800872e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008732:	f010 0301 	ands.w	r3, r0, #1
 8008736:	d00a      	beq.n	800874e <__swsetup_r+0x9e>
 8008738:	2300      	movs	r3, #0
 800873a:	60a3      	str	r3, [r4, #8]
 800873c:	6963      	ldr	r3, [r4, #20]
 800873e:	425b      	negs	r3, r3
 8008740:	61a3      	str	r3, [r4, #24]
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	b943      	cbnz	r3, 8008758 <__swsetup_r+0xa8>
 8008746:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800874a:	d1c4      	bne.n	80086d6 <__swsetup_r+0x26>
 800874c:	bd38      	pop	{r3, r4, r5, pc}
 800874e:	0781      	lsls	r1, r0, #30
 8008750:	bf58      	it	pl
 8008752:	6963      	ldrpl	r3, [r4, #20]
 8008754:	60a3      	str	r3, [r4, #8]
 8008756:	e7f4      	b.n	8008742 <__swsetup_r+0x92>
 8008758:	2000      	movs	r0, #0
 800875a:	e7f7      	b.n	800874c <__swsetup_r+0x9c>
 800875c:	20000080 	.word	0x20000080

08008760 <memmove>:
 8008760:	4288      	cmp	r0, r1
 8008762:	b510      	push	{r4, lr}
 8008764:	eb01 0402 	add.w	r4, r1, r2
 8008768:	d902      	bls.n	8008770 <memmove+0x10>
 800876a:	4284      	cmp	r4, r0
 800876c:	4623      	mov	r3, r4
 800876e:	d807      	bhi.n	8008780 <memmove+0x20>
 8008770:	1e43      	subs	r3, r0, #1
 8008772:	42a1      	cmp	r1, r4
 8008774:	d008      	beq.n	8008788 <memmove+0x28>
 8008776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800877a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800877e:	e7f8      	b.n	8008772 <memmove+0x12>
 8008780:	4601      	mov	r1, r0
 8008782:	4402      	add	r2, r0
 8008784:	428a      	cmp	r2, r1
 8008786:	d100      	bne.n	800878a <memmove+0x2a>
 8008788:	bd10      	pop	{r4, pc}
 800878a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800878e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008792:	e7f7      	b.n	8008784 <memmove+0x24>

08008794 <strncmp>:
 8008794:	b510      	push	{r4, lr}
 8008796:	b16a      	cbz	r2, 80087b4 <strncmp+0x20>
 8008798:	3901      	subs	r1, #1
 800879a:	1884      	adds	r4, r0, r2
 800879c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d103      	bne.n	80087b0 <strncmp+0x1c>
 80087a8:	42a0      	cmp	r0, r4
 80087aa:	d001      	beq.n	80087b0 <strncmp+0x1c>
 80087ac:	2a00      	cmp	r2, #0
 80087ae:	d1f5      	bne.n	800879c <strncmp+0x8>
 80087b0:	1ad0      	subs	r0, r2, r3
 80087b2:	bd10      	pop	{r4, pc}
 80087b4:	4610      	mov	r0, r2
 80087b6:	e7fc      	b.n	80087b2 <strncmp+0x1e>

080087b8 <_sbrk_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	2300      	movs	r3, #0
 80087bc:	4d05      	ldr	r5, [pc, #20]	; (80087d4 <_sbrk_r+0x1c>)
 80087be:	4604      	mov	r4, r0
 80087c0:	4608      	mov	r0, r1
 80087c2:	602b      	str	r3, [r5, #0]
 80087c4:	f7fc f876 	bl	80048b4 <_sbrk>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d102      	bne.n	80087d2 <_sbrk_r+0x1a>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	b103      	cbz	r3, 80087d2 <_sbrk_r+0x1a>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	bd38      	pop	{r3, r4, r5, pc}
 80087d4:	20000bc4 	.word	0x20000bc4

080087d8 <nan>:
 80087d8:	2000      	movs	r0, #0
 80087da:	4901      	ldr	r1, [pc, #4]	; (80087e0 <nan+0x8>)
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	7ff80000 	.word	0x7ff80000

080087e4 <__assert_func>:
 80087e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087e6:	4614      	mov	r4, r2
 80087e8:	461a      	mov	r2, r3
 80087ea:	4b09      	ldr	r3, [pc, #36]	; (8008810 <__assert_func+0x2c>)
 80087ec:	4605      	mov	r5, r0
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68d8      	ldr	r0, [r3, #12]
 80087f2:	b14c      	cbz	r4, 8008808 <__assert_func+0x24>
 80087f4:	4b07      	ldr	r3, [pc, #28]	; (8008814 <__assert_func+0x30>)
 80087f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087fa:	9100      	str	r1, [sp, #0]
 80087fc:	462b      	mov	r3, r5
 80087fe:	4906      	ldr	r1, [pc, #24]	; (8008818 <__assert_func+0x34>)
 8008800:	f000 fbca 	bl	8008f98 <fiprintf>
 8008804:	f000 fc5e 	bl	80090c4 <abort>
 8008808:	4b04      	ldr	r3, [pc, #16]	; (800881c <__assert_func+0x38>)
 800880a:	461c      	mov	r4, r3
 800880c:	e7f3      	b.n	80087f6 <__assert_func+0x12>
 800880e:	bf00      	nop
 8008810:	20000080 	.word	0x20000080
 8008814:	0800bc82 	.word	0x0800bc82
 8008818:	0800bc8f 	.word	0x0800bc8f
 800881c:	0800bcbd 	.word	0x0800bcbd

08008820 <_calloc_r>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	fba1 5402 	umull	r5, r4, r1, r2
 8008826:	b934      	cbnz	r4, 8008836 <_calloc_r+0x16>
 8008828:	4629      	mov	r1, r5
 800882a:	f7fd fff9 	bl	8006820 <_malloc_r>
 800882e:	4606      	mov	r6, r0
 8008830:	b928      	cbnz	r0, 800883e <_calloc_r+0x1e>
 8008832:	4630      	mov	r0, r6
 8008834:	bd70      	pop	{r4, r5, r6, pc}
 8008836:	220c      	movs	r2, #12
 8008838:	2600      	movs	r6, #0
 800883a:	6002      	str	r2, [r0, #0]
 800883c:	e7f9      	b.n	8008832 <_calloc_r+0x12>
 800883e:	462a      	mov	r2, r5
 8008840:	4621      	mov	r1, r4
 8008842:	f7fd f86e 	bl	8005922 <memset>
 8008846:	e7f4      	b.n	8008832 <_calloc_r+0x12>

08008848 <rshift>:
 8008848:	6903      	ldr	r3, [r0, #16]
 800884a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800884e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008852:	f100 0414 	add.w	r4, r0, #20
 8008856:	ea4f 1261 	mov.w	r2, r1, asr #5
 800885a:	dd46      	ble.n	80088ea <rshift+0xa2>
 800885c:	f011 011f 	ands.w	r1, r1, #31
 8008860:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008864:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008868:	d10c      	bne.n	8008884 <rshift+0x3c>
 800886a:	4629      	mov	r1, r5
 800886c:	f100 0710 	add.w	r7, r0, #16
 8008870:	42b1      	cmp	r1, r6
 8008872:	d335      	bcc.n	80088e0 <rshift+0x98>
 8008874:	1a9b      	subs	r3, r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	1eea      	subs	r2, r5, #3
 800887a:	4296      	cmp	r6, r2
 800887c:	bf38      	it	cc
 800887e:	2300      	movcc	r3, #0
 8008880:	4423      	add	r3, r4
 8008882:	e015      	b.n	80088b0 <rshift+0x68>
 8008884:	46a1      	mov	r9, r4
 8008886:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800888a:	f1c1 0820 	rsb	r8, r1, #32
 800888e:	40cf      	lsrs	r7, r1
 8008890:	f105 0e04 	add.w	lr, r5, #4
 8008894:	4576      	cmp	r6, lr
 8008896:	46f4      	mov	ip, lr
 8008898:	d816      	bhi.n	80088c8 <rshift+0x80>
 800889a:	1a9a      	subs	r2, r3, r2
 800889c:	0092      	lsls	r2, r2, #2
 800889e:	3a04      	subs	r2, #4
 80088a0:	3501      	adds	r5, #1
 80088a2:	42ae      	cmp	r6, r5
 80088a4:	bf38      	it	cc
 80088a6:	2200      	movcc	r2, #0
 80088a8:	18a3      	adds	r3, r4, r2
 80088aa:	50a7      	str	r7, [r4, r2]
 80088ac:	b107      	cbz	r7, 80088b0 <rshift+0x68>
 80088ae:	3304      	adds	r3, #4
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	eba3 0204 	sub.w	r2, r3, r4
 80088b6:	bf08      	it	eq
 80088b8:	2300      	moveq	r3, #0
 80088ba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088be:	6102      	str	r2, [r0, #16]
 80088c0:	bf08      	it	eq
 80088c2:	6143      	streq	r3, [r0, #20]
 80088c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088c8:	f8dc c000 	ldr.w	ip, [ip]
 80088cc:	fa0c fc08 	lsl.w	ip, ip, r8
 80088d0:	ea4c 0707 	orr.w	r7, ip, r7
 80088d4:	f849 7b04 	str.w	r7, [r9], #4
 80088d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088dc:	40cf      	lsrs	r7, r1
 80088de:	e7d9      	b.n	8008894 <rshift+0x4c>
 80088e0:	f851 cb04 	ldr.w	ip, [r1], #4
 80088e4:	f847 cf04 	str.w	ip, [r7, #4]!
 80088e8:	e7c2      	b.n	8008870 <rshift+0x28>
 80088ea:	4623      	mov	r3, r4
 80088ec:	e7e0      	b.n	80088b0 <rshift+0x68>

080088ee <__hexdig_fun>:
 80088ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80088f2:	2b09      	cmp	r3, #9
 80088f4:	d802      	bhi.n	80088fc <__hexdig_fun+0xe>
 80088f6:	3820      	subs	r0, #32
 80088f8:	b2c0      	uxtb	r0, r0
 80088fa:	4770      	bx	lr
 80088fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008900:	2b05      	cmp	r3, #5
 8008902:	d801      	bhi.n	8008908 <__hexdig_fun+0x1a>
 8008904:	3847      	subs	r0, #71	; 0x47
 8008906:	e7f7      	b.n	80088f8 <__hexdig_fun+0xa>
 8008908:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800890c:	2b05      	cmp	r3, #5
 800890e:	d801      	bhi.n	8008914 <__hexdig_fun+0x26>
 8008910:	3827      	subs	r0, #39	; 0x27
 8008912:	e7f1      	b.n	80088f8 <__hexdig_fun+0xa>
 8008914:	2000      	movs	r0, #0
 8008916:	4770      	bx	lr

08008918 <__gethex>:
 8008918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800891c:	4681      	mov	r9, r0
 800891e:	468a      	mov	sl, r1
 8008920:	4617      	mov	r7, r2
 8008922:	680a      	ldr	r2, [r1, #0]
 8008924:	b085      	sub	sp, #20
 8008926:	f102 0b02 	add.w	fp, r2, #2
 800892a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800892e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008932:	9302      	str	r3, [sp, #8]
 8008934:	32fe      	adds	r2, #254	; 0xfe
 8008936:	eb02 030b 	add.w	r3, r2, fp
 800893a:	46d8      	mov	r8, fp
 800893c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	2830      	cmp	r0, #48	; 0x30
 8008944:	d0f7      	beq.n	8008936 <__gethex+0x1e>
 8008946:	f7ff ffd2 	bl	80088ee <__hexdig_fun>
 800894a:	4604      	mov	r4, r0
 800894c:	2800      	cmp	r0, #0
 800894e:	d138      	bne.n	80089c2 <__gethex+0xaa>
 8008950:	2201      	movs	r2, #1
 8008952:	4640      	mov	r0, r8
 8008954:	49a7      	ldr	r1, [pc, #668]	; (8008bf4 <__gethex+0x2dc>)
 8008956:	f7ff ff1d 	bl	8008794 <strncmp>
 800895a:	4606      	mov	r6, r0
 800895c:	2800      	cmp	r0, #0
 800895e:	d169      	bne.n	8008a34 <__gethex+0x11c>
 8008960:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008964:	465d      	mov	r5, fp
 8008966:	f7ff ffc2 	bl	80088ee <__hexdig_fun>
 800896a:	2800      	cmp	r0, #0
 800896c:	d064      	beq.n	8008a38 <__gethex+0x120>
 800896e:	465a      	mov	r2, fp
 8008970:	7810      	ldrb	r0, [r2, #0]
 8008972:	4690      	mov	r8, r2
 8008974:	2830      	cmp	r0, #48	; 0x30
 8008976:	f102 0201 	add.w	r2, r2, #1
 800897a:	d0f9      	beq.n	8008970 <__gethex+0x58>
 800897c:	f7ff ffb7 	bl	80088ee <__hexdig_fun>
 8008980:	2301      	movs	r3, #1
 8008982:	fab0 f480 	clz	r4, r0
 8008986:	465e      	mov	r6, fp
 8008988:	0964      	lsrs	r4, r4, #5
 800898a:	9301      	str	r3, [sp, #4]
 800898c:	4642      	mov	r2, r8
 800898e:	4615      	mov	r5, r2
 8008990:	7828      	ldrb	r0, [r5, #0]
 8008992:	3201      	adds	r2, #1
 8008994:	f7ff ffab 	bl	80088ee <__hexdig_fun>
 8008998:	2800      	cmp	r0, #0
 800899a:	d1f8      	bne.n	800898e <__gethex+0x76>
 800899c:	2201      	movs	r2, #1
 800899e:	4628      	mov	r0, r5
 80089a0:	4994      	ldr	r1, [pc, #592]	; (8008bf4 <__gethex+0x2dc>)
 80089a2:	f7ff fef7 	bl	8008794 <strncmp>
 80089a6:	b978      	cbnz	r0, 80089c8 <__gethex+0xb0>
 80089a8:	b946      	cbnz	r6, 80089bc <__gethex+0xa4>
 80089aa:	1c6e      	adds	r6, r5, #1
 80089ac:	4632      	mov	r2, r6
 80089ae:	4615      	mov	r5, r2
 80089b0:	7828      	ldrb	r0, [r5, #0]
 80089b2:	3201      	adds	r2, #1
 80089b4:	f7ff ff9b 	bl	80088ee <__hexdig_fun>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d1f8      	bne.n	80089ae <__gethex+0x96>
 80089bc:	1b73      	subs	r3, r6, r5
 80089be:	009e      	lsls	r6, r3, #2
 80089c0:	e004      	b.n	80089cc <__gethex+0xb4>
 80089c2:	2400      	movs	r4, #0
 80089c4:	4626      	mov	r6, r4
 80089c6:	e7e1      	b.n	800898c <__gethex+0x74>
 80089c8:	2e00      	cmp	r6, #0
 80089ca:	d1f7      	bne.n	80089bc <__gethex+0xa4>
 80089cc:	782b      	ldrb	r3, [r5, #0]
 80089ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089d2:	2b50      	cmp	r3, #80	; 0x50
 80089d4:	d13d      	bne.n	8008a52 <__gethex+0x13a>
 80089d6:	786b      	ldrb	r3, [r5, #1]
 80089d8:	2b2b      	cmp	r3, #43	; 0x2b
 80089da:	d02f      	beq.n	8008a3c <__gethex+0x124>
 80089dc:	2b2d      	cmp	r3, #45	; 0x2d
 80089de:	d031      	beq.n	8008a44 <__gethex+0x12c>
 80089e0:	f04f 0b00 	mov.w	fp, #0
 80089e4:	1c69      	adds	r1, r5, #1
 80089e6:	7808      	ldrb	r0, [r1, #0]
 80089e8:	f7ff ff81 	bl	80088ee <__hexdig_fun>
 80089ec:	1e42      	subs	r2, r0, #1
 80089ee:	b2d2      	uxtb	r2, r2
 80089f0:	2a18      	cmp	r2, #24
 80089f2:	d82e      	bhi.n	8008a52 <__gethex+0x13a>
 80089f4:	f1a0 0210 	sub.w	r2, r0, #16
 80089f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089fc:	f7ff ff77 	bl	80088ee <__hexdig_fun>
 8008a00:	f100 3cff 	add.w	ip, r0, #4294967295
 8008a04:	fa5f fc8c 	uxtb.w	ip, ip
 8008a08:	f1bc 0f18 	cmp.w	ip, #24
 8008a0c:	d91d      	bls.n	8008a4a <__gethex+0x132>
 8008a0e:	f1bb 0f00 	cmp.w	fp, #0
 8008a12:	d000      	beq.n	8008a16 <__gethex+0xfe>
 8008a14:	4252      	negs	r2, r2
 8008a16:	4416      	add	r6, r2
 8008a18:	f8ca 1000 	str.w	r1, [sl]
 8008a1c:	b1dc      	cbz	r4, 8008a56 <__gethex+0x13e>
 8008a1e:	9b01      	ldr	r3, [sp, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	bf14      	ite	ne
 8008a24:	f04f 0800 	movne.w	r8, #0
 8008a28:	f04f 0806 	moveq.w	r8, #6
 8008a2c:	4640      	mov	r0, r8
 8008a2e:	b005      	add	sp, #20
 8008a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a34:	4645      	mov	r5, r8
 8008a36:	4626      	mov	r6, r4
 8008a38:	2401      	movs	r4, #1
 8008a3a:	e7c7      	b.n	80089cc <__gethex+0xb4>
 8008a3c:	f04f 0b00 	mov.w	fp, #0
 8008a40:	1ca9      	adds	r1, r5, #2
 8008a42:	e7d0      	b.n	80089e6 <__gethex+0xce>
 8008a44:	f04f 0b01 	mov.w	fp, #1
 8008a48:	e7fa      	b.n	8008a40 <__gethex+0x128>
 8008a4a:	230a      	movs	r3, #10
 8008a4c:	fb03 0002 	mla	r0, r3, r2, r0
 8008a50:	e7d0      	b.n	80089f4 <__gethex+0xdc>
 8008a52:	4629      	mov	r1, r5
 8008a54:	e7e0      	b.n	8008a18 <__gethex+0x100>
 8008a56:	4621      	mov	r1, r4
 8008a58:	eba5 0308 	sub.w	r3, r5, r8
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	2b07      	cmp	r3, #7
 8008a60:	dc0a      	bgt.n	8008a78 <__gethex+0x160>
 8008a62:	4648      	mov	r0, r9
 8008a64:	f7fd ff68 	bl	8006938 <_Balloc>
 8008a68:	4604      	mov	r4, r0
 8008a6a:	b940      	cbnz	r0, 8008a7e <__gethex+0x166>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	21e4      	movs	r1, #228	; 0xe4
 8008a70:	4b61      	ldr	r3, [pc, #388]	; (8008bf8 <__gethex+0x2e0>)
 8008a72:	4862      	ldr	r0, [pc, #392]	; (8008bfc <__gethex+0x2e4>)
 8008a74:	f7ff feb6 	bl	80087e4 <__assert_func>
 8008a78:	3101      	adds	r1, #1
 8008a7a:	105b      	asrs	r3, r3, #1
 8008a7c:	e7ef      	b.n	8008a5e <__gethex+0x146>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	469b      	mov	fp, r3
 8008a82:	f100 0a14 	add.w	sl, r0, #20
 8008a86:	f8cd a004 	str.w	sl, [sp, #4]
 8008a8a:	45a8      	cmp	r8, r5
 8008a8c:	d344      	bcc.n	8008b18 <__gethex+0x200>
 8008a8e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008a92:	4658      	mov	r0, fp
 8008a94:	f848 bb04 	str.w	fp, [r8], #4
 8008a98:	eba8 080a 	sub.w	r8, r8, sl
 8008a9c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008aa0:	6122      	str	r2, [r4, #16]
 8008aa2:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8008aa6:	f7fe f839 	bl	8006b1c <__hi0bits>
 8008aaa:	683d      	ldr	r5, [r7, #0]
 8008aac:	eba8 0800 	sub.w	r8, r8, r0
 8008ab0:	45a8      	cmp	r8, r5
 8008ab2:	dd59      	ble.n	8008b68 <__gethex+0x250>
 8008ab4:	eba8 0805 	sub.w	r8, r8, r5
 8008ab8:	4641      	mov	r1, r8
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7fe fbb7 	bl	800722e <__any_on>
 8008ac0:	4683      	mov	fp, r0
 8008ac2:	b1b8      	cbz	r0, 8008af4 <__gethex+0x1dc>
 8008ac4:	f04f 0b01 	mov.w	fp, #1
 8008ac8:	f108 33ff 	add.w	r3, r8, #4294967295
 8008acc:	1159      	asrs	r1, r3, #5
 8008ace:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008ad2:	f003 021f 	and.w	r2, r3, #31
 8008ad6:	fa0b f202 	lsl.w	r2, fp, r2
 8008ada:	420a      	tst	r2, r1
 8008adc:	d00a      	beq.n	8008af4 <__gethex+0x1dc>
 8008ade:	455b      	cmp	r3, fp
 8008ae0:	dd06      	ble.n	8008af0 <__gethex+0x1d8>
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f1a8 0102 	sub.w	r1, r8, #2
 8008ae8:	f7fe fba1 	bl	800722e <__any_on>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d138      	bne.n	8008b62 <__gethex+0x24a>
 8008af0:	f04f 0b02 	mov.w	fp, #2
 8008af4:	4641      	mov	r1, r8
 8008af6:	4620      	mov	r0, r4
 8008af8:	f7ff fea6 	bl	8008848 <rshift>
 8008afc:	4446      	add	r6, r8
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	42b3      	cmp	r3, r6
 8008b02:	da41      	bge.n	8008b88 <__gethex+0x270>
 8008b04:	4621      	mov	r1, r4
 8008b06:	4648      	mov	r0, r9
 8008b08:	f7fd ff56 	bl	80069b8 <_Bfree>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b10:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	e789      	b.n	8008a2c <__gethex+0x114>
 8008b18:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008b1c:	2a2e      	cmp	r2, #46	; 0x2e
 8008b1e:	d014      	beq.n	8008b4a <__gethex+0x232>
 8008b20:	2b20      	cmp	r3, #32
 8008b22:	d106      	bne.n	8008b32 <__gethex+0x21a>
 8008b24:	9b01      	ldr	r3, [sp, #4]
 8008b26:	f843 bb04 	str.w	fp, [r3], #4
 8008b2a:	f04f 0b00 	mov.w	fp, #0
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	465b      	mov	r3, fp
 8008b32:	7828      	ldrb	r0, [r5, #0]
 8008b34:	9303      	str	r3, [sp, #12]
 8008b36:	f7ff feda 	bl	80088ee <__hexdig_fun>
 8008b3a:	9b03      	ldr	r3, [sp, #12]
 8008b3c:	f000 000f 	and.w	r0, r0, #15
 8008b40:	4098      	lsls	r0, r3
 8008b42:	ea4b 0b00 	orr.w	fp, fp, r0
 8008b46:	3304      	adds	r3, #4
 8008b48:	e79f      	b.n	8008a8a <__gethex+0x172>
 8008b4a:	45a8      	cmp	r8, r5
 8008b4c:	d8e8      	bhi.n	8008b20 <__gethex+0x208>
 8008b4e:	2201      	movs	r2, #1
 8008b50:	4628      	mov	r0, r5
 8008b52:	4928      	ldr	r1, [pc, #160]	; (8008bf4 <__gethex+0x2dc>)
 8008b54:	9303      	str	r3, [sp, #12]
 8008b56:	f7ff fe1d 	bl	8008794 <strncmp>
 8008b5a:	9b03      	ldr	r3, [sp, #12]
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d1df      	bne.n	8008b20 <__gethex+0x208>
 8008b60:	e793      	b.n	8008a8a <__gethex+0x172>
 8008b62:	f04f 0b03 	mov.w	fp, #3
 8008b66:	e7c5      	b.n	8008af4 <__gethex+0x1dc>
 8008b68:	da0b      	bge.n	8008b82 <__gethex+0x26a>
 8008b6a:	eba5 0808 	sub.w	r8, r5, r8
 8008b6e:	4621      	mov	r1, r4
 8008b70:	4642      	mov	r2, r8
 8008b72:	4648      	mov	r0, r9
 8008b74:	f7fe f938 	bl	8006de8 <__lshift>
 8008b78:	4604      	mov	r4, r0
 8008b7a:	eba6 0608 	sub.w	r6, r6, r8
 8008b7e:	f100 0a14 	add.w	sl, r0, #20
 8008b82:	f04f 0b00 	mov.w	fp, #0
 8008b86:	e7ba      	b.n	8008afe <__gethex+0x1e6>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	42b3      	cmp	r3, r6
 8008b8c:	dd74      	ble.n	8008c78 <__gethex+0x360>
 8008b8e:	1b9e      	subs	r6, r3, r6
 8008b90:	42b5      	cmp	r5, r6
 8008b92:	dc35      	bgt.n	8008c00 <__gethex+0x2e8>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d023      	beq.n	8008be2 <__gethex+0x2ca>
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d025      	beq.n	8008bea <__gethex+0x2d2>
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d115      	bne.n	8008bce <__gethex+0x2b6>
 8008ba2:	42b5      	cmp	r5, r6
 8008ba4:	d113      	bne.n	8008bce <__gethex+0x2b6>
 8008ba6:	2d01      	cmp	r5, #1
 8008ba8:	d10b      	bne.n	8008bc2 <__gethex+0x2aa>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	9a02      	ldr	r2, [sp, #8]
 8008bae:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	6123      	str	r3, [r4, #16]
 8008bb8:	f8ca 3000 	str.w	r3, [sl]
 8008bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bbe:	601c      	str	r4, [r3, #0]
 8008bc0:	e734      	b.n	8008a2c <__gethex+0x114>
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	1e69      	subs	r1, r5, #1
 8008bc6:	f7fe fb32 	bl	800722e <__any_on>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d1ed      	bne.n	8008baa <__gethex+0x292>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	4648      	mov	r0, r9
 8008bd2:	f7fd fef1 	bl	80069b8 <_Bfree>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bda:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	e724      	b.n	8008a2c <__gethex+0x114>
 8008be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1f2      	bne.n	8008bce <__gethex+0x2b6>
 8008be8:	e7df      	b.n	8008baa <__gethex+0x292>
 8008bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1dc      	bne.n	8008baa <__gethex+0x292>
 8008bf0:	e7ed      	b.n	8008bce <__gethex+0x2b6>
 8008bf2:	bf00      	nop
 8008bf4:	0800bb14 	.word	0x0800bb14
 8008bf8:	0800b9a9 	.word	0x0800b9a9
 8008bfc:	0800bcbe 	.word	0x0800bcbe
 8008c00:	f106 38ff 	add.w	r8, r6, #4294967295
 8008c04:	f1bb 0f00 	cmp.w	fp, #0
 8008c08:	d133      	bne.n	8008c72 <__gethex+0x35a>
 8008c0a:	f1b8 0f00 	cmp.w	r8, #0
 8008c0e:	d004      	beq.n	8008c1a <__gethex+0x302>
 8008c10:	4641      	mov	r1, r8
 8008c12:	4620      	mov	r0, r4
 8008c14:	f7fe fb0b 	bl	800722e <__any_on>
 8008c18:	4683      	mov	fp, r0
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008c20:	f008 081f 	and.w	r8, r8, #31
 8008c24:	fa03 f308 	lsl.w	r3, r3, r8
 8008c28:	f04f 0802 	mov.w	r8, #2
 8008c2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008c30:	4631      	mov	r1, r6
 8008c32:	4213      	tst	r3, r2
 8008c34:	4620      	mov	r0, r4
 8008c36:	bf18      	it	ne
 8008c38:	f04b 0b02 	orrne.w	fp, fp, #2
 8008c3c:	1bad      	subs	r5, r5, r6
 8008c3e:	f7ff fe03 	bl	8008848 <rshift>
 8008c42:	687e      	ldr	r6, [r7, #4]
 8008c44:	f1bb 0f00 	cmp.w	fp, #0
 8008c48:	d04a      	beq.n	8008ce0 <__gethex+0x3c8>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d016      	beq.n	8008c7e <__gethex+0x366>
 8008c50:	2b03      	cmp	r3, #3
 8008c52:	d018      	beq.n	8008c86 <__gethex+0x36e>
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d109      	bne.n	8008c6c <__gethex+0x354>
 8008c58:	f01b 0f02 	tst.w	fp, #2
 8008c5c:	d006      	beq.n	8008c6c <__gethex+0x354>
 8008c5e:	f8da 3000 	ldr.w	r3, [sl]
 8008c62:	ea4b 0b03 	orr.w	fp, fp, r3
 8008c66:	f01b 0f01 	tst.w	fp, #1
 8008c6a:	d10f      	bne.n	8008c8c <__gethex+0x374>
 8008c6c:	f048 0810 	orr.w	r8, r8, #16
 8008c70:	e036      	b.n	8008ce0 <__gethex+0x3c8>
 8008c72:	f04f 0b01 	mov.w	fp, #1
 8008c76:	e7d0      	b.n	8008c1a <__gethex+0x302>
 8008c78:	f04f 0801 	mov.w	r8, #1
 8008c7c:	e7e2      	b.n	8008c44 <__gethex+0x32c>
 8008c7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c80:	f1c3 0301 	rsb	r3, r3, #1
 8008c84:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d0ef      	beq.n	8008c6c <__gethex+0x354>
 8008c8c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c90:	f104 0214 	add.w	r2, r4, #20
 8008c94:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008ca0:	4694      	mov	ip, r2
 8008ca2:	f852 1b04 	ldr.w	r1, [r2], #4
 8008ca6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008caa:	d01e      	beq.n	8008cea <__gethex+0x3d2>
 8008cac:	3101      	adds	r1, #1
 8008cae:	f8cc 1000 	str.w	r1, [ip]
 8008cb2:	f1b8 0f02 	cmp.w	r8, #2
 8008cb6:	f104 0214 	add.w	r2, r4, #20
 8008cba:	d13d      	bne.n	8008d38 <__gethex+0x420>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	42ab      	cmp	r3, r5
 8008cc2:	d10b      	bne.n	8008cdc <__gethex+0x3c4>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	1169      	asrs	r1, r5, #5
 8008cc8:	f005 051f 	and.w	r5, r5, #31
 8008ccc:	fa03 f505 	lsl.w	r5, r3, r5
 8008cd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008cd4:	421d      	tst	r5, r3
 8008cd6:	bf18      	it	ne
 8008cd8:	f04f 0801 	movne.w	r8, #1
 8008cdc:	f048 0820 	orr.w	r8, r8, #32
 8008ce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ce2:	601c      	str	r4, [r3, #0]
 8008ce4:	9b02      	ldr	r3, [sp, #8]
 8008ce6:	601e      	str	r6, [r3, #0]
 8008ce8:	e6a0      	b.n	8008a2c <__gethex+0x114>
 8008cea:	4290      	cmp	r0, r2
 8008cec:	f842 3c04 	str.w	r3, [r2, #-4]
 8008cf0:	d8d6      	bhi.n	8008ca0 <__gethex+0x388>
 8008cf2:	68a2      	ldr	r2, [r4, #8]
 8008cf4:	4593      	cmp	fp, r2
 8008cf6:	db17      	blt.n	8008d28 <__gethex+0x410>
 8008cf8:	6861      	ldr	r1, [r4, #4]
 8008cfa:	4648      	mov	r0, r9
 8008cfc:	3101      	adds	r1, #1
 8008cfe:	f7fd fe1b 	bl	8006938 <_Balloc>
 8008d02:	4682      	mov	sl, r0
 8008d04:	b918      	cbnz	r0, 8008d0e <__gethex+0x3f6>
 8008d06:	4602      	mov	r2, r0
 8008d08:	2184      	movs	r1, #132	; 0x84
 8008d0a:	4b1a      	ldr	r3, [pc, #104]	; (8008d74 <__gethex+0x45c>)
 8008d0c:	e6b1      	b.n	8008a72 <__gethex+0x15a>
 8008d0e:	6922      	ldr	r2, [r4, #16]
 8008d10:	f104 010c 	add.w	r1, r4, #12
 8008d14:	3202      	adds	r2, #2
 8008d16:	0092      	lsls	r2, r2, #2
 8008d18:	300c      	adds	r0, #12
 8008d1a:	f7fc fe90 	bl	8005a3e <memcpy>
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4648      	mov	r0, r9
 8008d22:	f7fd fe49 	bl	80069b8 <_Bfree>
 8008d26:	4654      	mov	r4, sl
 8008d28:	6922      	ldr	r2, [r4, #16]
 8008d2a:	1c51      	adds	r1, r2, #1
 8008d2c:	6121      	str	r1, [r4, #16]
 8008d2e:	2101      	movs	r1, #1
 8008d30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008d34:	6151      	str	r1, [r2, #20]
 8008d36:	e7bc      	b.n	8008cb2 <__gethex+0x39a>
 8008d38:	6921      	ldr	r1, [r4, #16]
 8008d3a:	4559      	cmp	r1, fp
 8008d3c:	dd0b      	ble.n	8008d56 <__gethex+0x43e>
 8008d3e:	2101      	movs	r1, #1
 8008d40:	4620      	mov	r0, r4
 8008d42:	f7ff fd81 	bl	8008848 <rshift>
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	3601      	adds	r6, #1
 8008d4a:	42b3      	cmp	r3, r6
 8008d4c:	f6ff aeda 	blt.w	8008b04 <__gethex+0x1ec>
 8008d50:	f04f 0801 	mov.w	r8, #1
 8008d54:	e7c2      	b.n	8008cdc <__gethex+0x3c4>
 8008d56:	f015 051f 	ands.w	r5, r5, #31
 8008d5a:	d0f9      	beq.n	8008d50 <__gethex+0x438>
 8008d5c:	9b01      	ldr	r3, [sp, #4]
 8008d5e:	f1c5 0520 	rsb	r5, r5, #32
 8008d62:	441a      	add	r2, r3
 8008d64:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008d68:	f7fd fed8 	bl	8006b1c <__hi0bits>
 8008d6c:	42a8      	cmp	r0, r5
 8008d6e:	dbe6      	blt.n	8008d3e <__gethex+0x426>
 8008d70:	e7ee      	b.n	8008d50 <__gethex+0x438>
 8008d72:	bf00      	nop
 8008d74:	0800b9a9 	.word	0x0800b9a9

08008d78 <L_shift>:
 8008d78:	f1c2 0208 	rsb	r2, r2, #8
 8008d7c:	0092      	lsls	r2, r2, #2
 8008d7e:	b570      	push	{r4, r5, r6, lr}
 8008d80:	f1c2 0620 	rsb	r6, r2, #32
 8008d84:	6843      	ldr	r3, [r0, #4]
 8008d86:	6804      	ldr	r4, [r0, #0]
 8008d88:	fa03 f506 	lsl.w	r5, r3, r6
 8008d8c:	432c      	orrs	r4, r5
 8008d8e:	40d3      	lsrs	r3, r2
 8008d90:	6004      	str	r4, [r0, #0]
 8008d92:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d96:	4288      	cmp	r0, r1
 8008d98:	d3f4      	bcc.n	8008d84 <L_shift+0xc>
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}

08008d9c <__match>:
 8008d9c:	b530      	push	{r4, r5, lr}
 8008d9e:	6803      	ldr	r3, [r0, #0]
 8008da0:	3301      	adds	r3, #1
 8008da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008da6:	b914      	cbnz	r4, 8008dae <__match+0x12>
 8008da8:	6003      	str	r3, [r0, #0]
 8008daa:	2001      	movs	r0, #1
 8008dac:	bd30      	pop	{r4, r5, pc}
 8008dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008db2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008db6:	2d19      	cmp	r5, #25
 8008db8:	bf98      	it	ls
 8008dba:	3220      	addls	r2, #32
 8008dbc:	42a2      	cmp	r2, r4
 8008dbe:	d0f0      	beq.n	8008da2 <__match+0x6>
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	e7f3      	b.n	8008dac <__match+0x10>

08008dc4 <__hexnan>:
 8008dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc8:	2500      	movs	r5, #0
 8008dca:	680b      	ldr	r3, [r1, #0]
 8008dcc:	4682      	mov	sl, r0
 8008dce:	115e      	asrs	r6, r3, #5
 8008dd0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008dd4:	f013 031f 	ands.w	r3, r3, #31
 8008dd8:	bf18      	it	ne
 8008dda:	3604      	addne	r6, #4
 8008ddc:	1f37      	subs	r7, r6, #4
 8008dde:	4690      	mov	r8, r2
 8008de0:	46b9      	mov	r9, r7
 8008de2:	463c      	mov	r4, r7
 8008de4:	46ab      	mov	fp, r5
 8008de6:	b087      	sub	sp, #28
 8008de8:	6801      	ldr	r1, [r0, #0]
 8008dea:	9301      	str	r3, [sp, #4]
 8008dec:	f846 5c04 	str.w	r5, [r6, #-4]
 8008df0:	9502      	str	r5, [sp, #8]
 8008df2:	784a      	ldrb	r2, [r1, #1]
 8008df4:	1c4b      	adds	r3, r1, #1
 8008df6:	9303      	str	r3, [sp, #12]
 8008df8:	b342      	cbz	r2, 8008e4c <__hexnan+0x88>
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	9105      	str	r1, [sp, #20]
 8008dfe:	9204      	str	r2, [sp, #16]
 8008e00:	f7ff fd75 	bl	80088ee <__hexdig_fun>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d14f      	bne.n	8008ea8 <__hexnan+0xe4>
 8008e08:	9a04      	ldr	r2, [sp, #16]
 8008e0a:	9905      	ldr	r1, [sp, #20]
 8008e0c:	2a20      	cmp	r2, #32
 8008e0e:	d818      	bhi.n	8008e42 <__hexnan+0x7e>
 8008e10:	9b02      	ldr	r3, [sp, #8]
 8008e12:	459b      	cmp	fp, r3
 8008e14:	dd13      	ble.n	8008e3e <__hexnan+0x7a>
 8008e16:	454c      	cmp	r4, r9
 8008e18:	d206      	bcs.n	8008e28 <__hexnan+0x64>
 8008e1a:	2d07      	cmp	r5, #7
 8008e1c:	dc04      	bgt.n	8008e28 <__hexnan+0x64>
 8008e1e:	462a      	mov	r2, r5
 8008e20:	4649      	mov	r1, r9
 8008e22:	4620      	mov	r0, r4
 8008e24:	f7ff ffa8 	bl	8008d78 <L_shift>
 8008e28:	4544      	cmp	r4, r8
 8008e2a:	d950      	bls.n	8008ece <__hexnan+0x10a>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f1a4 0904 	sub.w	r9, r4, #4
 8008e32:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e36:	461d      	mov	r5, r3
 8008e38:	464c      	mov	r4, r9
 8008e3a:	f8cd b008 	str.w	fp, [sp, #8]
 8008e3e:	9903      	ldr	r1, [sp, #12]
 8008e40:	e7d7      	b.n	8008df2 <__hexnan+0x2e>
 8008e42:	2a29      	cmp	r2, #41	; 0x29
 8008e44:	d155      	bne.n	8008ef2 <__hexnan+0x12e>
 8008e46:	3102      	adds	r1, #2
 8008e48:	f8ca 1000 	str.w	r1, [sl]
 8008e4c:	f1bb 0f00 	cmp.w	fp, #0
 8008e50:	d04f      	beq.n	8008ef2 <__hexnan+0x12e>
 8008e52:	454c      	cmp	r4, r9
 8008e54:	d206      	bcs.n	8008e64 <__hexnan+0xa0>
 8008e56:	2d07      	cmp	r5, #7
 8008e58:	dc04      	bgt.n	8008e64 <__hexnan+0xa0>
 8008e5a:	462a      	mov	r2, r5
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f7ff ff8a 	bl	8008d78 <L_shift>
 8008e64:	4544      	cmp	r4, r8
 8008e66:	d934      	bls.n	8008ed2 <__hexnan+0x10e>
 8008e68:	4623      	mov	r3, r4
 8008e6a:	f1a8 0204 	sub.w	r2, r8, #4
 8008e6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e72:	429f      	cmp	r7, r3
 8008e74:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e78:	d2f9      	bcs.n	8008e6e <__hexnan+0xaa>
 8008e7a:	1b3b      	subs	r3, r7, r4
 8008e7c:	f023 0303 	bic.w	r3, r3, #3
 8008e80:	3304      	adds	r3, #4
 8008e82:	3e03      	subs	r6, #3
 8008e84:	3401      	adds	r4, #1
 8008e86:	42a6      	cmp	r6, r4
 8008e88:	bf38      	it	cc
 8008e8a:	2304      	movcc	r3, #4
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	4443      	add	r3, r8
 8008e90:	f843 2b04 	str.w	r2, [r3], #4
 8008e94:	429f      	cmp	r7, r3
 8008e96:	d2fb      	bcs.n	8008e90 <__hexnan+0xcc>
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	b91b      	cbnz	r3, 8008ea4 <__hexnan+0xe0>
 8008e9c:	4547      	cmp	r7, r8
 8008e9e:	d126      	bne.n	8008eee <__hexnan+0x12a>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	2005      	movs	r0, #5
 8008ea6:	e025      	b.n	8008ef4 <__hexnan+0x130>
 8008ea8:	3501      	adds	r5, #1
 8008eaa:	2d08      	cmp	r5, #8
 8008eac:	f10b 0b01 	add.w	fp, fp, #1
 8008eb0:	dd06      	ble.n	8008ec0 <__hexnan+0xfc>
 8008eb2:	4544      	cmp	r4, r8
 8008eb4:	d9c3      	bls.n	8008e3e <__hexnan+0x7a>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	2501      	movs	r5, #1
 8008eba:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ebe:	3c04      	subs	r4, #4
 8008ec0:	6822      	ldr	r2, [r4, #0]
 8008ec2:	f000 000f 	and.w	r0, r0, #15
 8008ec6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008eca:	6020      	str	r0, [r4, #0]
 8008ecc:	e7b7      	b.n	8008e3e <__hexnan+0x7a>
 8008ece:	2508      	movs	r5, #8
 8008ed0:	e7b5      	b.n	8008e3e <__hexnan+0x7a>
 8008ed2:	9b01      	ldr	r3, [sp, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d0df      	beq.n	8008e98 <__hexnan+0xd4>
 8008ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8008edc:	f1c3 0320 	rsb	r3, r3, #32
 8008ee0:	40da      	lsrs	r2, r3
 8008ee2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	f846 3c04 	str.w	r3, [r6, #-4]
 8008eec:	e7d4      	b.n	8008e98 <__hexnan+0xd4>
 8008eee:	3f04      	subs	r7, #4
 8008ef0:	e7d2      	b.n	8008e98 <__hexnan+0xd4>
 8008ef2:	2004      	movs	r0, #4
 8008ef4:	b007      	add	sp, #28
 8008ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008efa <__ascii_mbtowc>:
 8008efa:	b082      	sub	sp, #8
 8008efc:	b901      	cbnz	r1, 8008f00 <__ascii_mbtowc+0x6>
 8008efe:	a901      	add	r1, sp, #4
 8008f00:	b142      	cbz	r2, 8008f14 <__ascii_mbtowc+0x1a>
 8008f02:	b14b      	cbz	r3, 8008f18 <__ascii_mbtowc+0x1e>
 8008f04:	7813      	ldrb	r3, [r2, #0]
 8008f06:	600b      	str	r3, [r1, #0]
 8008f08:	7812      	ldrb	r2, [r2, #0]
 8008f0a:	1e10      	subs	r0, r2, #0
 8008f0c:	bf18      	it	ne
 8008f0e:	2001      	movne	r0, #1
 8008f10:	b002      	add	sp, #8
 8008f12:	4770      	bx	lr
 8008f14:	4610      	mov	r0, r2
 8008f16:	e7fb      	b.n	8008f10 <__ascii_mbtowc+0x16>
 8008f18:	f06f 0001 	mvn.w	r0, #1
 8008f1c:	e7f8      	b.n	8008f10 <__ascii_mbtowc+0x16>

08008f1e <_realloc_r>:
 8008f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f22:	4680      	mov	r8, r0
 8008f24:	4614      	mov	r4, r2
 8008f26:	460e      	mov	r6, r1
 8008f28:	b921      	cbnz	r1, 8008f34 <_realloc_r+0x16>
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f30:	f7fd bc76 	b.w	8006820 <_malloc_r>
 8008f34:	b92a      	cbnz	r2, 8008f42 <_realloc_r+0x24>
 8008f36:	f7fd fc03 	bl	8006740 <_free_r>
 8008f3a:	4625      	mov	r5, r4
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f42:	f000 f8c6 	bl	80090d2 <_malloc_usable_size_r>
 8008f46:	4284      	cmp	r4, r0
 8008f48:	4607      	mov	r7, r0
 8008f4a:	d802      	bhi.n	8008f52 <_realloc_r+0x34>
 8008f4c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f50:	d812      	bhi.n	8008f78 <_realloc_r+0x5a>
 8008f52:	4621      	mov	r1, r4
 8008f54:	4640      	mov	r0, r8
 8008f56:	f7fd fc63 	bl	8006820 <_malloc_r>
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d0ed      	beq.n	8008f3c <_realloc_r+0x1e>
 8008f60:	42bc      	cmp	r4, r7
 8008f62:	4622      	mov	r2, r4
 8008f64:	4631      	mov	r1, r6
 8008f66:	bf28      	it	cs
 8008f68:	463a      	movcs	r2, r7
 8008f6a:	f7fc fd68 	bl	8005a3e <memcpy>
 8008f6e:	4631      	mov	r1, r6
 8008f70:	4640      	mov	r0, r8
 8008f72:	f7fd fbe5 	bl	8006740 <_free_r>
 8008f76:	e7e1      	b.n	8008f3c <_realloc_r+0x1e>
 8008f78:	4635      	mov	r5, r6
 8008f7a:	e7df      	b.n	8008f3c <_realloc_r+0x1e>

08008f7c <__ascii_wctomb>:
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	4608      	mov	r0, r1
 8008f80:	b141      	cbz	r1, 8008f94 <__ascii_wctomb+0x18>
 8008f82:	2aff      	cmp	r2, #255	; 0xff
 8008f84:	d904      	bls.n	8008f90 <__ascii_wctomb+0x14>
 8008f86:	228a      	movs	r2, #138	; 0x8a
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	4770      	bx	lr
 8008f90:	2001      	movs	r0, #1
 8008f92:	700a      	strb	r2, [r1, #0]
 8008f94:	4770      	bx	lr
	...

08008f98 <fiprintf>:
 8008f98:	b40e      	push	{r1, r2, r3}
 8008f9a:	b503      	push	{r0, r1, lr}
 8008f9c:	4601      	mov	r1, r0
 8008f9e:	ab03      	add	r3, sp, #12
 8008fa0:	4805      	ldr	r0, [pc, #20]	; (8008fb8 <fiprintf+0x20>)
 8008fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa6:	6800      	ldr	r0, [r0, #0]
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	f7ff f97f 	bl	80082ac <_vfiprintf_r>
 8008fae:	b002      	add	sp, #8
 8008fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fb4:	b003      	add	sp, #12
 8008fb6:	4770      	bx	lr
 8008fb8:	20000080 	.word	0x20000080

08008fbc <__swhatbuf_r>:
 8008fbc:	b570      	push	{r4, r5, r6, lr}
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc4:	4615      	mov	r5, r2
 8008fc6:	2900      	cmp	r1, #0
 8008fc8:	461e      	mov	r6, r3
 8008fca:	b096      	sub	sp, #88	; 0x58
 8008fcc:	da0c      	bge.n	8008fe8 <__swhatbuf_r+0x2c>
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008fd6:	bf0c      	ite	eq
 8008fd8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008fdc:	2340      	movne	r3, #64	; 0x40
 8008fde:	2000      	movs	r0, #0
 8008fe0:	6031      	str	r1, [r6, #0]
 8008fe2:	602b      	str	r3, [r5, #0]
 8008fe4:	b016      	add	sp, #88	; 0x58
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	466a      	mov	r2, sp
 8008fea:	f000 f849 	bl	8009080 <_fstat_r>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	dbed      	blt.n	8008fce <__swhatbuf_r+0x12>
 8008ff2:	9901      	ldr	r1, [sp, #4]
 8008ff4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008ff8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008ffc:	4259      	negs	r1, r3
 8008ffe:	4159      	adcs	r1, r3
 8009000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009004:	e7eb      	b.n	8008fde <__swhatbuf_r+0x22>

08009006 <__smakebuf_r>:
 8009006:	898b      	ldrh	r3, [r1, #12]
 8009008:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800900a:	079d      	lsls	r5, r3, #30
 800900c:	4606      	mov	r6, r0
 800900e:	460c      	mov	r4, r1
 8009010:	d507      	bpl.n	8009022 <__smakebuf_r+0x1c>
 8009012:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009016:	6023      	str	r3, [r4, #0]
 8009018:	6123      	str	r3, [r4, #16]
 800901a:	2301      	movs	r3, #1
 800901c:	6163      	str	r3, [r4, #20]
 800901e:	b002      	add	sp, #8
 8009020:	bd70      	pop	{r4, r5, r6, pc}
 8009022:	466a      	mov	r2, sp
 8009024:	ab01      	add	r3, sp, #4
 8009026:	f7ff ffc9 	bl	8008fbc <__swhatbuf_r>
 800902a:	9900      	ldr	r1, [sp, #0]
 800902c:	4605      	mov	r5, r0
 800902e:	4630      	mov	r0, r6
 8009030:	f7fd fbf6 	bl	8006820 <_malloc_r>
 8009034:	b948      	cbnz	r0, 800904a <__smakebuf_r+0x44>
 8009036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903a:	059a      	lsls	r2, r3, #22
 800903c:	d4ef      	bmi.n	800901e <__smakebuf_r+0x18>
 800903e:	f023 0303 	bic.w	r3, r3, #3
 8009042:	f043 0302 	orr.w	r3, r3, #2
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	e7e3      	b.n	8009012 <__smakebuf_r+0xc>
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	6020      	str	r0, [r4, #0]
 800904e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	9b00      	ldr	r3, [sp, #0]
 8009056:	6120      	str	r0, [r4, #16]
 8009058:	6163      	str	r3, [r4, #20]
 800905a:	9b01      	ldr	r3, [sp, #4]
 800905c:	b15b      	cbz	r3, 8009076 <__smakebuf_r+0x70>
 800905e:	4630      	mov	r0, r6
 8009060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009064:	f000 f81e 	bl	80090a4 <_isatty_r>
 8009068:	b128      	cbz	r0, 8009076 <__smakebuf_r+0x70>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	f023 0303 	bic.w	r3, r3, #3
 8009070:	f043 0301 	orr.w	r3, r3, #1
 8009074:	81a3      	strh	r3, [r4, #12]
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	431d      	orrs	r5, r3
 800907a:	81a5      	strh	r5, [r4, #12]
 800907c:	e7cf      	b.n	800901e <__smakebuf_r+0x18>
	...

08009080 <_fstat_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	2300      	movs	r3, #0
 8009084:	4d06      	ldr	r5, [pc, #24]	; (80090a0 <_fstat_r+0x20>)
 8009086:	4604      	mov	r4, r0
 8009088:	4608      	mov	r0, r1
 800908a:	4611      	mov	r1, r2
 800908c:	602b      	str	r3, [r5, #0]
 800908e:	f7fb fbec 	bl	800486a <_fstat>
 8009092:	1c43      	adds	r3, r0, #1
 8009094:	d102      	bne.n	800909c <_fstat_r+0x1c>
 8009096:	682b      	ldr	r3, [r5, #0]
 8009098:	b103      	cbz	r3, 800909c <_fstat_r+0x1c>
 800909a:	6023      	str	r3, [r4, #0]
 800909c:	bd38      	pop	{r3, r4, r5, pc}
 800909e:	bf00      	nop
 80090a0:	20000bc4 	.word	0x20000bc4

080090a4 <_isatty_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	2300      	movs	r3, #0
 80090a8:	4d05      	ldr	r5, [pc, #20]	; (80090c0 <_isatty_r+0x1c>)
 80090aa:	4604      	mov	r4, r0
 80090ac:	4608      	mov	r0, r1
 80090ae:	602b      	str	r3, [r5, #0]
 80090b0:	f7fb fbea 	bl	8004888 <_isatty>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_isatty_r+0x1a>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_isatty_r+0x1a>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	20000bc4 	.word	0x20000bc4

080090c4 <abort>:
 80090c4:	2006      	movs	r0, #6
 80090c6:	b508      	push	{r3, lr}
 80090c8:	f000 f834 	bl	8009134 <raise>
 80090cc:	2001      	movs	r0, #1
 80090ce:	f7fb fb9a 	bl	8004806 <_exit>

080090d2 <_malloc_usable_size_r>:
 80090d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d6:	1f18      	subs	r0, r3, #4
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bfbc      	itt	lt
 80090dc:	580b      	ldrlt	r3, [r1, r0]
 80090de:	18c0      	addlt	r0, r0, r3
 80090e0:	4770      	bx	lr

080090e2 <_raise_r>:
 80090e2:	291f      	cmp	r1, #31
 80090e4:	b538      	push	{r3, r4, r5, lr}
 80090e6:	4604      	mov	r4, r0
 80090e8:	460d      	mov	r5, r1
 80090ea:	d904      	bls.n	80090f6 <_raise_r+0x14>
 80090ec:	2316      	movs	r3, #22
 80090ee:	6003      	str	r3, [r0, #0]
 80090f0:	f04f 30ff 	mov.w	r0, #4294967295
 80090f4:	bd38      	pop	{r3, r4, r5, pc}
 80090f6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80090f8:	b112      	cbz	r2, 8009100 <_raise_r+0x1e>
 80090fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090fe:	b94b      	cbnz	r3, 8009114 <_raise_r+0x32>
 8009100:	4620      	mov	r0, r4
 8009102:	f000 f831 	bl	8009168 <_getpid_r>
 8009106:	462a      	mov	r2, r5
 8009108:	4601      	mov	r1, r0
 800910a:	4620      	mov	r0, r4
 800910c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009110:	f000 b818 	b.w	8009144 <_kill_r>
 8009114:	2b01      	cmp	r3, #1
 8009116:	d00a      	beq.n	800912e <_raise_r+0x4c>
 8009118:	1c59      	adds	r1, r3, #1
 800911a:	d103      	bne.n	8009124 <_raise_r+0x42>
 800911c:	2316      	movs	r3, #22
 800911e:	6003      	str	r3, [r0, #0]
 8009120:	2001      	movs	r0, #1
 8009122:	e7e7      	b.n	80090f4 <_raise_r+0x12>
 8009124:	2400      	movs	r4, #0
 8009126:	4628      	mov	r0, r5
 8009128:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800912c:	4798      	blx	r3
 800912e:	2000      	movs	r0, #0
 8009130:	e7e0      	b.n	80090f4 <_raise_r+0x12>
	...

08009134 <raise>:
 8009134:	4b02      	ldr	r3, [pc, #8]	; (8009140 <raise+0xc>)
 8009136:	4601      	mov	r1, r0
 8009138:	6818      	ldr	r0, [r3, #0]
 800913a:	f7ff bfd2 	b.w	80090e2 <_raise_r>
 800913e:	bf00      	nop
 8009140:	20000080 	.word	0x20000080

08009144 <_kill_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	2300      	movs	r3, #0
 8009148:	4d06      	ldr	r5, [pc, #24]	; (8009164 <_kill_r+0x20>)
 800914a:	4604      	mov	r4, r0
 800914c:	4608      	mov	r0, r1
 800914e:	4611      	mov	r1, r2
 8009150:	602b      	str	r3, [r5, #0]
 8009152:	f7fb fb48 	bl	80047e6 <_kill>
 8009156:	1c43      	adds	r3, r0, #1
 8009158:	d102      	bne.n	8009160 <_kill_r+0x1c>
 800915a:	682b      	ldr	r3, [r5, #0]
 800915c:	b103      	cbz	r3, 8009160 <_kill_r+0x1c>
 800915e:	6023      	str	r3, [r4, #0]
 8009160:	bd38      	pop	{r3, r4, r5, pc}
 8009162:	bf00      	nop
 8009164:	20000bc4 	.word	0x20000bc4

08009168 <_getpid_r>:
 8009168:	f7fb bb36 	b.w	80047d8 <_getpid>

0800916c <pow>:
 800916c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009170:	4614      	mov	r4, r2
 8009172:	461d      	mov	r5, r3
 8009174:	4680      	mov	r8, r0
 8009176:	4689      	mov	r9, r1
 8009178:	f000 f9e2 	bl	8009540 <__ieee754_pow>
 800917c:	4622      	mov	r2, r4
 800917e:	4606      	mov	r6, r0
 8009180:	460f      	mov	r7, r1
 8009182:	462b      	mov	r3, r5
 8009184:	4620      	mov	r0, r4
 8009186:	4629      	mov	r1, r5
 8009188:	f7f7 fc50 	bl	8000a2c <__aeabi_dcmpun>
 800918c:	bbc8      	cbnz	r0, 8009202 <pow+0x96>
 800918e:	2200      	movs	r2, #0
 8009190:	2300      	movs	r3, #0
 8009192:	4640      	mov	r0, r8
 8009194:	4649      	mov	r1, r9
 8009196:	f7f7 fc17 	bl	80009c8 <__aeabi_dcmpeq>
 800919a:	b1b8      	cbz	r0, 80091cc <pow+0x60>
 800919c:	2200      	movs	r2, #0
 800919e:	2300      	movs	r3, #0
 80091a0:	4620      	mov	r0, r4
 80091a2:	4629      	mov	r1, r5
 80091a4:	f7f7 fc10 	bl	80009c8 <__aeabi_dcmpeq>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d141      	bne.n	8009230 <pow+0xc4>
 80091ac:	4620      	mov	r0, r4
 80091ae:	4629      	mov	r1, r5
 80091b0:	f000 f868 	bl	8009284 <finite>
 80091b4:	b328      	cbz	r0, 8009202 <pow+0x96>
 80091b6:	2200      	movs	r2, #0
 80091b8:	2300      	movs	r3, #0
 80091ba:	4620      	mov	r0, r4
 80091bc:	4629      	mov	r1, r5
 80091be:	f7f7 fc0d 	bl	80009dc <__aeabi_dcmplt>
 80091c2:	b1f0      	cbz	r0, 8009202 <pow+0x96>
 80091c4:	f7fc fc00 	bl	80059c8 <__errno>
 80091c8:	2322      	movs	r3, #34	; 0x22
 80091ca:	e019      	b.n	8009200 <pow+0x94>
 80091cc:	4630      	mov	r0, r6
 80091ce:	4639      	mov	r1, r7
 80091d0:	f000 f858 	bl	8009284 <finite>
 80091d4:	b9c8      	cbnz	r0, 800920a <pow+0x9e>
 80091d6:	4640      	mov	r0, r8
 80091d8:	4649      	mov	r1, r9
 80091da:	f000 f853 	bl	8009284 <finite>
 80091de:	b1a0      	cbz	r0, 800920a <pow+0x9e>
 80091e0:	4620      	mov	r0, r4
 80091e2:	4629      	mov	r1, r5
 80091e4:	f000 f84e 	bl	8009284 <finite>
 80091e8:	b178      	cbz	r0, 800920a <pow+0x9e>
 80091ea:	4632      	mov	r2, r6
 80091ec:	463b      	mov	r3, r7
 80091ee:	4630      	mov	r0, r6
 80091f0:	4639      	mov	r1, r7
 80091f2:	f7f7 fc1b 	bl	8000a2c <__aeabi_dcmpun>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d0e4      	beq.n	80091c4 <pow+0x58>
 80091fa:	f7fc fbe5 	bl	80059c8 <__errno>
 80091fe:	2321      	movs	r3, #33	; 0x21
 8009200:	6003      	str	r3, [r0, #0]
 8009202:	4630      	mov	r0, r6
 8009204:	4639      	mov	r1, r7
 8009206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800920a:	2200      	movs	r2, #0
 800920c:	2300      	movs	r3, #0
 800920e:	4630      	mov	r0, r6
 8009210:	4639      	mov	r1, r7
 8009212:	f7f7 fbd9 	bl	80009c8 <__aeabi_dcmpeq>
 8009216:	2800      	cmp	r0, #0
 8009218:	d0f3      	beq.n	8009202 <pow+0x96>
 800921a:	4640      	mov	r0, r8
 800921c:	4649      	mov	r1, r9
 800921e:	f000 f831 	bl	8009284 <finite>
 8009222:	2800      	cmp	r0, #0
 8009224:	d0ed      	beq.n	8009202 <pow+0x96>
 8009226:	4620      	mov	r0, r4
 8009228:	4629      	mov	r1, r5
 800922a:	f000 f82b 	bl	8009284 <finite>
 800922e:	e7c8      	b.n	80091c2 <pow+0x56>
 8009230:	2600      	movs	r6, #0
 8009232:	4f01      	ldr	r7, [pc, #4]	; (8009238 <pow+0xcc>)
 8009234:	e7e5      	b.n	8009202 <pow+0x96>
 8009236:	bf00      	nop
 8009238:	3ff00000 	.word	0x3ff00000

0800923c <sqrt>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	4606      	mov	r6, r0
 8009240:	460f      	mov	r7, r1
 8009242:	f000 f825 	bl	8009290 <__ieee754_sqrt>
 8009246:	4632      	mov	r2, r6
 8009248:	4604      	mov	r4, r0
 800924a:	460d      	mov	r5, r1
 800924c:	463b      	mov	r3, r7
 800924e:	4630      	mov	r0, r6
 8009250:	4639      	mov	r1, r7
 8009252:	f7f7 fbeb 	bl	8000a2c <__aeabi_dcmpun>
 8009256:	b990      	cbnz	r0, 800927e <sqrt+0x42>
 8009258:	2200      	movs	r2, #0
 800925a:	2300      	movs	r3, #0
 800925c:	4630      	mov	r0, r6
 800925e:	4639      	mov	r1, r7
 8009260:	f7f7 fbbc 	bl	80009dc <__aeabi_dcmplt>
 8009264:	b158      	cbz	r0, 800927e <sqrt+0x42>
 8009266:	f7fc fbaf 	bl	80059c8 <__errno>
 800926a:	2321      	movs	r3, #33	; 0x21
 800926c:	2200      	movs	r2, #0
 800926e:	6003      	str	r3, [r0, #0]
 8009270:	2300      	movs	r3, #0
 8009272:	4610      	mov	r0, r2
 8009274:	4619      	mov	r1, r3
 8009276:	f7f7 fa69 	bl	800074c <__aeabi_ddiv>
 800927a:	4604      	mov	r4, r0
 800927c:	460d      	mov	r5, r1
 800927e:	4620      	mov	r0, r4
 8009280:	4629      	mov	r1, r5
 8009282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009284 <finite>:
 8009284:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009288:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800928c:	0fc0      	lsrs	r0, r0, #31
 800928e:	4770      	bx	lr

08009290 <__ieee754_sqrt>:
 8009290:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8009434 <__ieee754_sqrt+0x1a4>
 8009294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009298:	ea3c 0c01 	bics.w	ip, ip, r1
 800929c:	460b      	mov	r3, r1
 800929e:	4606      	mov	r6, r0
 80092a0:	460d      	mov	r5, r1
 80092a2:	460a      	mov	r2, r1
 80092a4:	4604      	mov	r4, r0
 80092a6:	d10e      	bne.n	80092c6 <__ieee754_sqrt+0x36>
 80092a8:	4602      	mov	r2, r0
 80092aa:	f7f7 f925 	bl	80004f8 <__aeabi_dmul>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4630      	mov	r0, r6
 80092b4:	4629      	mov	r1, r5
 80092b6:	f7f6 ff69 	bl	800018c <__adddf3>
 80092ba:	4606      	mov	r6, r0
 80092bc:	460d      	mov	r5, r1
 80092be:	4630      	mov	r0, r6
 80092c0:	4629      	mov	r1, r5
 80092c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c6:	2900      	cmp	r1, #0
 80092c8:	dc0d      	bgt.n	80092e6 <__ieee754_sqrt+0x56>
 80092ca:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80092ce:	ea5c 0c00 	orrs.w	ip, ip, r0
 80092d2:	d0f4      	beq.n	80092be <__ieee754_sqrt+0x2e>
 80092d4:	b139      	cbz	r1, 80092e6 <__ieee754_sqrt+0x56>
 80092d6:	4602      	mov	r2, r0
 80092d8:	f7f6 ff56 	bl	8000188 <__aeabi_dsub>
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	f7f7 fa34 	bl	800074c <__aeabi_ddiv>
 80092e4:	e7e9      	b.n	80092ba <__ieee754_sqrt+0x2a>
 80092e6:	1512      	asrs	r2, r2, #20
 80092e8:	f000 8089 	beq.w	80093fe <__ieee754_sqrt+0x16e>
 80092ec:	2500      	movs	r5, #0
 80092ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80092f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092fa:	07d2      	lsls	r2, r2, #31
 80092fc:	bf5c      	itt	pl
 80092fe:	005b      	lslpl	r3, r3, #1
 8009300:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009304:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009308:	bf58      	it	pl
 800930a:	0064      	lslpl	r4, r4, #1
 800930c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009310:	0062      	lsls	r2, r4, #1
 8009312:	2016      	movs	r0, #22
 8009314:	4629      	mov	r1, r5
 8009316:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800931a:	1076      	asrs	r6, r6, #1
 800931c:	190f      	adds	r7, r1, r4
 800931e:	429f      	cmp	r7, r3
 8009320:	bfde      	ittt	le
 8009322:	1bdb      	suble	r3, r3, r7
 8009324:	1939      	addle	r1, r7, r4
 8009326:	192d      	addle	r5, r5, r4
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	3801      	subs	r0, #1
 800932c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009330:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009334:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009338:	d1f0      	bne.n	800931c <__ieee754_sqrt+0x8c>
 800933a:	4604      	mov	r4, r0
 800933c:	2720      	movs	r7, #32
 800933e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8009342:	428b      	cmp	r3, r1
 8009344:	eb0c 0e00 	add.w	lr, ip, r0
 8009348:	dc02      	bgt.n	8009350 <__ieee754_sqrt+0xc0>
 800934a:	d113      	bne.n	8009374 <__ieee754_sqrt+0xe4>
 800934c:	4596      	cmp	lr, r2
 800934e:	d811      	bhi.n	8009374 <__ieee754_sqrt+0xe4>
 8009350:	f1be 0f00 	cmp.w	lr, #0
 8009354:	eb0e 000c 	add.w	r0, lr, ip
 8009358:	da56      	bge.n	8009408 <__ieee754_sqrt+0x178>
 800935a:	2800      	cmp	r0, #0
 800935c:	db54      	blt.n	8009408 <__ieee754_sqrt+0x178>
 800935e:	f101 0801 	add.w	r8, r1, #1
 8009362:	1a5b      	subs	r3, r3, r1
 8009364:	4641      	mov	r1, r8
 8009366:	4596      	cmp	lr, r2
 8009368:	bf88      	it	hi
 800936a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800936e:	eba2 020e 	sub.w	r2, r2, lr
 8009372:	4464      	add	r4, ip
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	3f01      	subs	r7, #1
 8009378:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800937c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009380:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009384:	d1dd      	bne.n	8009342 <__ieee754_sqrt+0xb2>
 8009386:	4313      	orrs	r3, r2
 8009388:	d01b      	beq.n	80093c2 <__ieee754_sqrt+0x132>
 800938a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009438 <__ieee754_sqrt+0x1a8>
 800938e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800943c <__ieee754_sqrt+0x1ac>
 8009392:	e9da 0100 	ldrd	r0, r1, [sl]
 8009396:	e9db 2300 	ldrd	r2, r3, [fp]
 800939a:	f7f6 fef5 	bl	8000188 <__aeabi_dsub>
 800939e:	e9da 8900 	ldrd	r8, r9, [sl]
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4640      	mov	r0, r8
 80093a8:	4649      	mov	r1, r9
 80093aa:	f7f7 fb21 	bl	80009f0 <__aeabi_dcmple>
 80093ae:	b140      	cbz	r0, 80093c2 <__ieee754_sqrt+0x132>
 80093b0:	e9da 0100 	ldrd	r0, r1, [sl]
 80093b4:	e9db 2300 	ldrd	r2, r3, [fp]
 80093b8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80093bc:	d126      	bne.n	800940c <__ieee754_sqrt+0x17c>
 80093be:	463c      	mov	r4, r7
 80093c0:	3501      	adds	r5, #1
 80093c2:	106b      	asrs	r3, r5, #1
 80093c4:	0864      	lsrs	r4, r4, #1
 80093c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80093ca:	07ea      	lsls	r2, r5, #31
 80093cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80093d0:	bf48      	it	mi
 80093d2:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80093d6:	4620      	mov	r0, r4
 80093d8:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80093dc:	e76d      	b.n	80092ba <__ieee754_sqrt+0x2a>
 80093de:	0ae3      	lsrs	r3, r4, #11
 80093e0:	3915      	subs	r1, #21
 80093e2:	0564      	lsls	r4, r4, #21
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d0fa      	beq.n	80093de <__ieee754_sqrt+0x14e>
 80093e8:	02d8      	lsls	r0, r3, #11
 80093ea:	d50a      	bpl.n	8009402 <__ieee754_sqrt+0x172>
 80093ec:	f1c2 0020 	rsb	r0, r2, #32
 80093f0:	fa24 f000 	lsr.w	r0, r4, r0
 80093f4:	1e55      	subs	r5, r2, #1
 80093f6:	4094      	lsls	r4, r2
 80093f8:	4303      	orrs	r3, r0
 80093fa:	1b4a      	subs	r2, r1, r5
 80093fc:	e776      	b.n	80092ec <__ieee754_sqrt+0x5c>
 80093fe:	4611      	mov	r1, r2
 8009400:	e7f0      	b.n	80093e4 <__ieee754_sqrt+0x154>
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	3201      	adds	r2, #1
 8009406:	e7ef      	b.n	80093e8 <__ieee754_sqrt+0x158>
 8009408:	4688      	mov	r8, r1
 800940a:	e7aa      	b.n	8009362 <__ieee754_sqrt+0xd2>
 800940c:	f7f6 febe 	bl	800018c <__adddf3>
 8009410:	e9da 8900 	ldrd	r8, r9, [sl]
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4640      	mov	r0, r8
 800941a:	4649      	mov	r1, r9
 800941c:	f7f7 fade 	bl	80009dc <__aeabi_dcmplt>
 8009420:	b120      	cbz	r0, 800942c <__ieee754_sqrt+0x19c>
 8009422:	1ca1      	adds	r1, r4, #2
 8009424:	bf08      	it	eq
 8009426:	3501      	addeq	r5, #1
 8009428:	3402      	adds	r4, #2
 800942a:	e7ca      	b.n	80093c2 <__ieee754_sqrt+0x132>
 800942c:	3401      	adds	r4, #1
 800942e:	f024 0401 	bic.w	r4, r4, #1
 8009432:	e7c6      	b.n	80093c2 <__ieee754_sqrt+0x132>
 8009434:	7ff00000 	.word	0x7ff00000
 8009438:	200001f0 	.word	0x200001f0
 800943c:	200001f8 	.word	0x200001f8

08009440 <floor>:
 8009440:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009448:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800944c:	2e13      	cmp	r6, #19
 800944e:	460b      	mov	r3, r1
 8009450:	4607      	mov	r7, r0
 8009452:	460c      	mov	r4, r1
 8009454:	4605      	mov	r5, r0
 8009456:	dc32      	bgt.n	80094be <floor+0x7e>
 8009458:	2e00      	cmp	r6, #0
 800945a:	da14      	bge.n	8009486 <floor+0x46>
 800945c:	a334      	add	r3, pc, #208	; (adr r3, 8009530 <floor+0xf0>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	f7f6 fe93 	bl	800018c <__adddf3>
 8009466:	2200      	movs	r2, #0
 8009468:	2300      	movs	r3, #0
 800946a:	f7f7 fad5 	bl	8000a18 <__aeabi_dcmpgt>
 800946e:	b138      	cbz	r0, 8009480 <floor+0x40>
 8009470:	2c00      	cmp	r4, #0
 8009472:	da56      	bge.n	8009522 <floor+0xe2>
 8009474:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009478:	4325      	orrs	r5, r4
 800947a:	d055      	beq.n	8009528 <floor+0xe8>
 800947c:	2500      	movs	r5, #0
 800947e:	4c2e      	ldr	r4, [pc, #184]	; (8009538 <floor+0xf8>)
 8009480:	4623      	mov	r3, r4
 8009482:	462f      	mov	r7, r5
 8009484:	e025      	b.n	80094d2 <floor+0x92>
 8009486:	4a2d      	ldr	r2, [pc, #180]	; (800953c <floor+0xfc>)
 8009488:	fa42 f806 	asr.w	r8, r2, r6
 800948c:	ea01 0208 	and.w	r2, r1, r8
 8009490:	4302      	orrs	r2, r0
 8009492:	d01e      	beq.n	80094d2 <floor+0x92>
 8009494:	a326      	add	r3, pc, #152	; (adr r3, 8009530 <floor+0xf0>)
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f7f6 fe77 	bl	800018c <__adddf3>
 800949e:	2200      	movs	r2, #0
 80094a0:	2300      	movs	r3, #0
 80094a2:	f7f7 fab9 	bl	8000a18 <__aeabi_dcmpgt>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d0ea      	beq.n	8009480 <floor+0x40>
 80094aa:	2c00      	cmp	r4, #0
 80094ac:	bfbe      	ittt	lt
 80094ae:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80094b2:	4133      	asrlt	r3, r6
 80094b4:	18e4      	addlt	r4, r4, r3
 80094b6:	2500      	movs	r5, #0
 80094b8:	ea24 0408 	bic.w	r4, r4, r8
 80094bc:	e7e0      	b.n	8009480 <floor+0x40>
 80094be:	2e33      	cmp	r6, #51	; 0x33
 80094c0:	dd0b      	ble.n	80094da <floor+0x9a>
 80094c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80094c6:	d104      	bne.n	80094d2 <floor+0x92>
 80094c8:	4602      	mov	r2, r0
 80094ca:	f7f6 fe5f 	bl	800018c <__adddf3>
 80094ce:	4607      	mov	r7, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4638      	mov	r0, r7
 80094d4:	4619      	mov	r1, r3
 80094d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094da:	f04f 38ff 	mov.w	r8, #4294967295
 80094de:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80094e2:	fa28 f802 	lsr.w	r8, r8, r2
 80094e6:	ea10 0f08 	tst.w	r0, r8
 80094ea:	d0f2      	beq.n	80094d2 <floor+0x92>
 80094ec:	a310      	add	r3, pc, #64	; (adr r3, 8009530 <floor+0xf0>)
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	f7f6 fe4b 	bl	800018c <__adddf3>
 80094f6:	2200      	movs	r2, #0
 80094f8:	2300      	movs	r3, #0
 80094fa:	f7f7 fa8d 	bl	8000a18 <__aeabi_dcmpgt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d0be      	beq.n	8009480 <floor+0x40>
 8009502:	2c00      	cmp	r4, #0
 8009504:	da0a      	bge.n	800951c <floor+0xdc>
 8009506:	2e14      	cmp	r6, #20
 8009508:	d101      	bne.n	800950e <floor+0xce>
 800950a:	3401      	adds	r4, #1
 800950c:	e006      	b.n	800951c <floor+0xdc>
 800950e:	2301      	movs	r3, #1
 8009510:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009514:	40b3      	lsls	r3, r6
 8009516:	441d      	add	r5, r3
 8009518:	42af      	cmp	r7, r5
 800951a:	d8f6      	bhi.n	800950a <floor+0xca>
 800951c:	ea25 0508 	bic.w	r5, r5, r8
 8009520:	e7ae      	b.n	8009480 <floor+0x40>
 8009522:	2500      	movs	r5, #0
 8009524:	462c      	mov	r4, r5
 8009526:	e7ab      	b.n	8009480 <floor+0x40>
 8009528:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800952c:	e7a8      	b.n	8009480 <floor+0x40>
 800952e:	bf00      	nop
 8009530:	8800759c 	.word	0x8800759c
 8009534:	7e37e43c 	.word	0x7e37e43c
 8009538:	bff00000 	.word	0xbff00000
 800953c:	000fffff 	.word	0x000fffff

08009540 <__ieee754_pow>:
 8009540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	b093      	sub	sp, #76	; 0x4c
 8009546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800954a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800954e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009552:	4689      	mov	r9, r1
 8009554:	ea56 0102 	orrs.w	r1, r6, r2
 8009558:	4680      	mov	r8, r0
 800955a:	d111      	bne.n	8009580 <__ieee754_pow+0x40>
 800955c:	1803      	adds	r3, r0, r0
 800955e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009562:	4152      	adcs	r2, r2
 8009564:	4299      	cmp	r1, r3
 8009566:	4b82      	ldr	r3, [pc, #520]	; (8009770 <__ieee754_pow+0x230>)
 8009568:	4193      	sbcs	r3, r2
 800956a:	f080 84ba 	bcs.w	8009ee2 <__ieee754_pow+0x9a2>
 800956e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009572:	4640      	mov	r0, r8
 8009574:	4649      	mov	r1, r9
 8009576:	f7f6 fe09 	bl	800018c <__adddf3>
 800957a:	4683      	mov	fp, r0
 800957c:	468c      	mov	ip, r1
 800957e:	e06f      	b.n	8009660 <__ieee754_pow+0x120>
 8009580:	4b7c      	ldr	r3, [pc, #496]	; (8009774 <__ieee754_pow+0x234>)
 8009582:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009586:	429c      	cmp	r4, r3
 8009588:	464d      	mov	r5, r9
 800958a:	4682      	mov	sl, r0
 800958c:	dc06      	bgt.n	800959c <__ieee754_pow+0x5c>
 800958e:	d101      	bne.n	8009594 <__ieee754_pow+0x54>
 8009590:	2800      	cmp	r0, #0
 8009592:	d1ec      	bne.n	800956e <__ieee754_pow+0x2e>
 8009594:	429e      	cmp	r6, r3
 8009596:	dc01      	bgt.n	800959c <__ieee754_pow+0x5c>
 8009598:	d10f      	bne.n	80095ba <__ieee754_pow+0x7a>
 800959a:	b172      	cbz	r2, 80095ba <__ieee754_pow+0x7a>
 800959c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80095a0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80095a4:	ea55 050a 	orrs.w	r5, r5, sl
 80095a8:	d1e1      	bne.n	800956e <__ieee754_pow+0x2e>
 80095aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80095ae:	18db      	adds	r3, r3, r3
 80095b0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80095b4:	4152      	adcs	r2, r2
 80095b6:	429d      	cmp	r5, r3
 80095b8:	e7d5      	b.n	8009566 <__ieee754_pow+0x26>
 80095ba:	2d00      	cmp	r5, #0
 80095bc:	da39      	bge.n	8009632 <__ieee754_pow+0xf2>
 80095be:	4b6e      	ldr	r3, [pc, #440]	; (8009778 <__ieee754_pow+0x238>)
 80095c0:	429e      	cmp	r6, r3
 80095c2:	dc52      	bgt.n	800966a <__ieee754_pow+0x12a>
 80095c4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80095c8:	429e      	cmp	r6, r3
 80095ca:	f340 849d 	ble.w	8009f08 <__ieee754_pow+0x9c8>
 80095ce:	1533      	asrs	r3, r6, #20
 80095d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80095d4:	2b14      	cmp	r3, #20
 80095d6:	dd0f      	ble.n	80095f8 <__ieee754_pow+0xb8>
 80095d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80095dc:	fa22 f103 	lsr.w	r1, r2, r3
 80095e0:	fa01 f303 	lsl.w	r3, r1, r3
 80095e4:	4293      	cmp	r3, r2
 80095e6:	f040 848f 	bne.w	8009f08 <__ieee754_pow+0x9c8>
 80095ea:	f001 0101 	and.w	r1, r1, #1
 80095ee:	f1c1 0302 	rsb	r3, r1, #2
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	b182      	cbz	r2, 8009618 <__ieee754_pow+0xd8>
 80095f6:	e05d      	b.n	80096b4 <__ieee754_pow+0x174>
 80095f8:	2a00      	cmp	r2, #0
 80095fa:	d159      	bne.n	80096b0 <__ieee754_pow+0x170>
 80095fc:	f1c3 0314 	rsb	r3, r3, #20
 8009600:	fa46 f103 	asr.w	r1, r6, r3
 8009604:	fa01 f303 	lsl.w	r3, r1, r3
 8009608:	42b3      	cmp	r3, r6
 800960a:	f040 847a 	bne.w	8009f02 <__ieee754_pow+0x9c2>
 800960e:	f001 0101 	and.w	r1, r1, #1
 8009612:	f1c1 0302 	rsb	r3, r1, #2
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	4b58      	ldr	r3, [pc, #352]	; (800977c <__ieee754_pow+0x23c>)
 800961a:	429e      	cmp	r6, r3
 800961c:	d132      	bne.n	8009684 <__ieee754_pow+0x144>
 800961e:	2f00      	cmp	r7, #0
 8009620:	f280 846b 	bge.w	8009efa <__ieee754_pow+0x9ba>
 8009624:	4642      	mov	r2, r8
 8009626:	464b      	mov	r3, r9
 8009628:	2000      	movs	r0, #0
 800962a:	4954      	ldr	r1, [pc, #336]	; (800977c <__ieee754_pow+0x23c>)
 800962c:	f7f7 f88e 	bl	800074c <__aeabi_ddiv>
 8009630:	e7a3      	b.n	800957a <__ieee754_pow+0x3a>
 8009632:	2300      	movs	r3, #0
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	2a00      	cmp	r2, #0
 8009638:	d13c      	bne.n	80096b4 <__ieee754_pow+0x174>
 800963a:	4b4e      	ldr	r3, [pc, #312]	; (8009774 <__ieee754_pow+0x234>)
 800963c:	429e      	cmp	r6, r3
 800963e:	d1eb      	bne.n	8009618 <__ieee754_pow+0xd8>
 8009640:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009644:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009648:	ea53 030a 	orrs.w	r3, r3, sl
 800964c:	f000 8449 	beq.w	8009ee2 <__ieee754_pow+0x9a2>
 8009650:	4b4b      	ldr	r3, [pc, #300]	; (8009780 <__ieee754_pow+0x240>)
 8009652:	429c      	cmp	r4, r3
 8009654:	dd0b      	ble.n	800966e <__ieee754_pow+0x12e>
 8009656:	2f00      	cmp	r7, #0
 8009658:	f2c0 8449 	blt.w	8009eee <__ieee754_pow+0x9ae>
 800965c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009660:	4658      	mov	r0, fp
 8009662:	4661      	mov	r1, ip
 8009664:	b013      	add	sp, #76	; 0x4c
 8009666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966a:	2302      	movs	r3, #2
 800966c:	e7e2      	b.n	8009634 <__ieee754_pow+0xf4>
 800966e:	2f00      	cmp	r7, #0
 8009670:	f04f 0b00 	mov.w	fp, #0
 8009674:	f04f 0c00 	mov.w	ip, #0
 8009678:	daf2      	bge.n	8009660 <__ieee754_pow+0x120>
 800967a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800967e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009682:	e7ed      	b.n	8009660 <__ieee754_pow+0x120>
 8009684:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009688:	d106      	bne.n	8009698 <__ieee754_pow+0x158>
 800968a:	4642      	mov	r2, r8
 800968c:	464b      	mov	r3, r9
 800968e:	4640      	mov	r0, r8
 8009690:	4649      	mov	r1, r9
 8009692:	f7f6 ff31 	bl	80004f8 <__aeabi_dmul>
 8009696:	e770      	b.n	800957a <__ieee754_pow+0x3a>
 8009698:	4b3a      	ldr	r3, [pc, #232]	; (8009784 <__ieee754_pow+0x244>)
 800969a:	429f      	cmp	r7, r3
 800969c:	d10a      	bne.n	80096b4 <__ieee754_pow+0x174>
 800969e:	2d00      	cmp	r5, #0
 80096a0:	db08      	blt.n	80096b4 <__ieee754_pow+0x174>
 80096a2:	4640      	mov	r0, r8
 80096a4:	4649      	mov	r1, r9
 80096a6:	b013      	add	sp, #76	; 0x4c
 80096a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ac:	f7ff bdf0 	b.w	8009290 <__ieee754_sqrt>
 80096b0:	2300      	movs	r3, #0
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	4640      	mov	r0, r8
 80096b6:	4649      	mov	r1, r9
 80096b8:	f000 fc58 	bl	8009f6c <fabs>
 80096bc:	4683      	mov	fp, r0
 80096be:	468c      	mov	ip, r1
 80096c0:	f1ba 0f00 	cmp.w	sl, #0
 80096c4:	d128      	bne.n	8009718 <__ieee754_pow+0x1d8>
 80096c6:	b124      	cbz	r4, 80096d2 <__ieee754_pow+0x192>
 80096c8:	4b2c      	ldr	r3, [pc, #176]	; (800977c <__ieee754_pow+0x23c>)
 80096ca:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d122      	bne.n	8009718 <__ieee754_pow+0x1d8>
 80096d2:	2f00      	cmp	r7, #0
 80096d4:	da07      	bge.n	80096e6 <__ieee754_pow+0x1a6>
 80096d6:	465a      	mov	r2, fp
 80096d8:	4663      	mov	r3, ip
 80096da:	2000      	movs	r0, #0
 80096dc:	4927      	ldr	r1, [pc, #156]	; (800977c <__ieee754_pow+0x23c>)
 80096de:	f7f7 f835 	bl	800074c <__aeabi_ddiv>
 80096e2:	4683      	mov	fp, r0
 80096e4:	468c      	mov	ip, r1
 80096e6:	2d00      	cmp	r5, #0
 80096e8:	daba      	bge.n	8009660 <__ieee754_pow+0x120>
 80096ea:	9b00      	ldr	r3, [sp, #0]
 80096ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80096f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80096f4:	431c      	orrs	r4, r3
 80096f6:	d108      	bne.n	800970a <__ieee754_pow+0x1ca>
 80096f8:	465a      	mov	r2, fp
 80096fa:	4663      	mov	r3, ip
 80096fc:	4658      	mov	r0, fp
 80096fe:	4661      	mov	r1, ip
 8009700:	f7f6 fd42 	bl	8000188 <__aeabi_dsub>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	e790      	b.n	800962c <__ieee754_pow+0xec>
 800970a:	9b00      	ldr	r3, [sp, #0]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d1a7      	bne.n	8009660 <__ieee754_pow+0x120>
 8009710:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009714:	469c      	mov	ip, r3
 8009716:	e7a3      	b.n	8009660 <__ieee754_pow+0x120>
 8009718:	0feb      	lsrs	r3, r5, #31
 800971a:	3b01      	subs	r3, #1
 800971c:	930c      	str	r3, [sp, #48]	; 0x30
 800971e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009720:	9b00      	ldr	r3, [sp, #0]
 8009722:	4313      	orrs	r3, r2
 8009724:	d104      	bne.n	8009730 <__ieee754_pow+0x1f0>
 8009726:	4642      	mov	r2, r8
 8009728:	464b      	mov	r3, r9
 800972a:	4640      	mov	r0, r8
 800972c:	4649      	mov	r1, r9
 800972e:	e7e7      	b.n	8009700 <__ieee754_pow+0x1c0>
 8009730:	4b15      	ldr	r3, [pc, #84]	; (8009788 <__ieee754_pow+0x248>)
 8009732:	429e      	cmp	r6, r3
 8009734:	f340 80f6 	ble.w	8009924 <__ieee754_pow+0x3e4>
 8009738:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800973c:	429e      	cmp	r6, r3
 800973e:	4b10      	ldr	r3, [pc, #64]	; (8009780 <__ieee754_pow+0x240>)
 8009740:	dd09      	ble.n	8009756 <__ieee754_pow+0x216>
 8009742:	429c      	cmp	r4, r3
 8009744:	dc0c      	bgt.n	8009760 <__ieee754_pow+0x220>
 8009746:	2f00      	cmp	r7, #0
 8009748:	da0c      	bge.n	8009764 <__ieee754_pow+0x224>
 800974a:	2000      	movs	r0, #0
 800974c:	b013      	add	sp, #76	; 0x4c
 800974e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009752:	f000 bcb2 	b.w	800a0ba <__math_oflow>
 8009756:	429c      	cmp	r4, r3
 8009758:	dbf5      	blt.n	8009746 <__ieee754_pow+0x206>
 800975a:	4b08      	ldr	r3, [pc, #32]	; (800977c <__ieee754_pow+0x23c>)
 800975c:	429c      	cmp	r4, r3
 800975e:	dd15      	ble.n	800978c <__ieee754_pow+0x24c>
 8009760:	2f00      	cmp	r7, #0
 8009762:	dcf2      	bgt.n	800974a <__ieee754_pow+0x20a>
 8009764:	2000      	movs	r0, #0
 8009766:	b013      	add	sp, #76	; 0x4c
 8009768:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	f000 bca0 	b.w	800a0b0 <__math_uflow>
 8009770:	fff00000 	.word	0xfff00000
 8009774:	7ff00000 	.word	0x7ff00000
 8009778:	433fffff 	.word	0x433fffff
 800977c:	3ff00000 	.word	0x3ff00000
 8009780:	3fefffff 	.word	0x3fefffff
 8009784:	3fe00000 	.word	0x3fe00000
 8009788:	41e00000 	.word	0x41e00000
 800978c:	4661      	mov	r1, ip
 800978e:	2200      	movs	r2, #0
 8009790:	4658      	mov	r0, fp
 8009792:	4b5f      	ldr	r3, [pc, #380]	; (8009910 <__ieee754_pow+0x3d0>)
 8009794:	f7f6 fcf8 	bl	8000188 <__aeabi_dsub>
 8009798:	a355      	add	r3, pc, #340	; (adr r3, 80098f0 <__ieee754_pow+0x3b0>)
 800979a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979e:	4604      	mov	r4, r0
 80097a0:	460d      	mov	r5, r1
 80097a2:	f7f6 fea9 	bl	80004f8 <__aeabi_dmul>
 80097a6:	a354      	add	r3, pc, #336	; (adr r3, 80098f8 <__ieee754_pow+0x3b8>)
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	4606      	mov	r6, r0
 80097ae:	460f      	mov	r7, r1
 80097b0:	4620      	mov	r0, r4
 80097b2:	4629      	mov	r1, r5
 80097b4:	f7f6 fea0 	bl	80004f8 <__aeabi_dmul>
 80097b8:	2200      	movs	r2, #0
 80097ba:	4682      	mov	sl, r0
 80097bc:	468b      	mov	fp, r1
 80097be:	4620      	mov	r0, r4
 80097c0:	4629      	mov	r1, r5
 80097c2:	4b54      	ldr	r3, [pc, #336]	; (8009914 <__ieee754_pow+0x3d4>)
 80097c4:	f7f6 fe98 	bl	80004f8 <__aeabi_dmul>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	a14c      	add	r1, pc, #304	; (adr r1, 8009900 <__ieee754_pow+0x3c0>)
 80097ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097d2:	f7f6 fcd9 	bl	8000188 <__aeabi_dsub>
 80097d6:	4622      	mov	r2, r4
 80097d8:	462b      	mov	r3, r5
 80097da:	f7f6 fe8d 	bl	80004f8 <__aeabi_dmul>
 80097de:	4602      	mov	r2, r0
 80097e0:	460b      	mov	r3, r1
 80097e2:	2000      	movs	r0, #0
 80097e4:	494c      	ldr	r1, [pc, #304]	; (8009918 <__ieee754_pow+0x3d8>)
 80097e6:	f7f6 fccf 	bl	8000188 <__aeabi_dsub>
 80097ea:	4622      	mov	r2, r4
 80097ec:	462b      	mov	r3, r5
 80097ee:	4680      	mov	r8, r0
 80097f0:	4689      	mov	r9, r1
 80097f2:	4620      	mov	r0, r4
 80097f4:	4629      	mov	r1, r5
 80097f6:	f7f6 fe7f 	bl	80004f8 <__aeabi_dmul>
 80097fa:	4602      	mov	r2, r0
 80097fc:	460b      	mov	r3, r1
 80097fe:	4640      	mov	r0, r8
 8009800:	4649      	mov	r1, r9
 8009802:	f7f6 fe79 	bl	80004f8 <__aeabi_dmul>
 8009806:	a340      	add	r3, pc, #256	; (adr r3, 8009908 <__ieee754_pow+0x3c8>)
 8009808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980c:	f7f6 fe74 	bl	80004f8 <__aeabi_dmul>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4650      	mov	r0, sl
 8009816:	4659      	mov	r1, fp
 8009818:	f7f6 fcb6 	bl	8000188 <__aeabi_dsub>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4604      	mov	r4, r0
 8009822:	460d      	mov	r5, r1
 8009824:	4630      	mov	r0, r6
 8009826:	4639      	mov	r1, r7
 8009828:	f7f6 fcb0 	bl	800018c <__adddf3>
 800982c:	2000      	movs	r0, #0
 800982e:	4632      	mov	r2, r6
 8009830:	463b      	mov	r3, r7
 8009832:	4682      	mov	sl, r0
 8009834:	468b      	mov	fp, r1
 8009836:	f7f6 fca7 	bl	8000188 <__aeabi_dsub>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4620      	mov	r0, r4
 8009840:	4629      	mov	r1, r5
 8009842:	f7f6 fca1 	bl	8000188 <__aeabi_dsub>
 8009846:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800984a:	9b00      	ldr	r3, [sp, #0]
 800984c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800984e:	3b01      	subs	r3, #1
 8009850:	4313      	orrs	r3, r2
 8009852:	f04f 0600 	mov.w	r6, #0
 8009856:	f04f 0200 	mov.w	r2, #0
 800985a:	bf0c      	ite	eq
 800985c:	4b2f      	ldreq	r3, [pc, #188]	; (800991c <__ieee754_pow+0x3dc>)
 800985e:	4b2c      	ldrne	r3, [pc, #176]	; (8009910 <__ieee754_pow+0x3d0>)
 8009860:	4604      	mov	r4, r0
 8009862:	460d      	mov	r5, r1
 8009864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009868:	e9cd 2300 	strd	r2, r3, [sp]
 800986c:	4632      	mov	r2, r6
 800986e:	463b      	mov	r3, r7
 8009870:	f7f6 fc8a 	bl	8000188 <__aeabi_dsub>
 8009874:	4652      	mov	r2, sl
 8009876:	465b      	mov	r3, fp
 8009878:	f7f6 fe3e 	bl	80004f8 <__aeabi_dmul>
 800987c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009880:	4680      	mov	r8, r0
 8009882:	4689      	mov	r9, r1
 8009884:	4620      	mov	r0, r4
 8009886:	4629      	mov	r1, r5
 8009888:	f7f6 fe36 	bl	80004f8 <__aeabi_dmul>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	4640      	mov	r0, r8
 8009892:	4649      	mov	r1, r9
 8009894:	f7f6 fc7a 	bl	800018c <__adddf3>
 8009898:	4632      	mov	r2, r6
 800989a:	463b      	mov	r3, r7
 800989c:	4680      	mov	r8, r0
 800989e:	4689      	mov	r9, r1
 80098a0:	4650      	mov	r0, sl
 80098a2:	4659      	mov	r1, fp
 80098a4:	f7f6 fe28 	bl	80004f8 <__aeabi_dmul>
 80098a8:	4604      	mov	r4, r0
 80098aa:	460d      	mov	r5, r1
 80098ac:	460b      	mov	r3, r1
 80098ae:	4602      	mov	r2, r0
 80098b0:	4649      	mov	r1, r9
 80098b2:	4640      	mov	r0, r8
 80098b4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80098b8:	f7f6 fc68 	bl	800018c <__adddf3>
 80098bc:	4b18      	ldr	r3, [pc, #96]	; (8009920 <__ieee754_pow+0x3e0>)
 80098be:	4682      	mov	sl, r0
 80098c0:	4299      	cmp	r1, r3
 80098c2:	460f      	mov	r7, r1
 80098c4:	460e      	mov	r6, r1
 80098c6:	f340 82e7 	ble.w	8009e98 <__ieee754_pow+0x958>
 80098ca:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80098ce:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80098d2:	4303      	orrs	r3, r0
 80098d4:	f000 81e2 	beq.w	8009c9c <__ieee754_pow+0x75c>
 80098d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098dc:	2200      	movs	r2, #0
 80098de:	2300      	movs	r3, #0
 80098e0:	f7f7 f87c 	bl	80009dc <__aeabi_dcmplt>
 80098e4:	3800      	subs	r0, #0
 80098e6:	bf18      	it	ne
 80098e8:	2001      	movne	r0, #1
 80098ea:	e72f      	b.n	800974c <__ieee754_pow+0x20c>
 80098ec:	f3af 8000 	nop.w
 80098f0:	60000000 	.word	0x60000000
 80098f4:	3ff71547 	.word	0x3ff71547
 80098f8:	f85ddf44 	.word	0xf85ddf44
 80098fc:	3e54ae0b 	.word	0x3e54ae0b
 8009900:	55555555 	.word	0x55555555
 8009904:	3fd55555 	.word	0x3fd55555
 8009908:	652b82fe 	.word	0x652b82fe
 800990c:	3ff71547 	.word	0x3ff71547
 8009910:	3ff00000 	.word	0x3ff00000
 8009914:	3fd00000 	.word	0x3fd00000
 8009918:	3fe00000 	.word	0x3fe00000
 800991c:	bff00000 	.word	0xbff00000
 8009920:	408fffff 	.word	0x408fffff
 8009924:	4bd4      	ldr	r3, [pc, #848]	; (8009c78 <__ieee754_pow+0x738>)
 8009926:	2200      	movs	r2, #0
 8009928:	402b      	ands	r3, r5
 800992a:	b943      	cbnz	r3, 800993e <__ieee754_pow+0x3fe>
 800992c:	4658      	mov	r0, fp
 800992e:	4661      	mov	r1, ip
 8009930:	4bd2      	ldr	r3, [pc, #840]	; (8009c7c <__ieee754_pow+0x73c>)
 8009932:	f7f6 fde1 	bl	80004f8 <__aeabi_dmul>
 8009936:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800993a:	4683      	mov	fp, r0
 800993c:	460c      	mov	r4, r1
 800993e:	1523      	asrs	r3, r4, #20
 8009940:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009944:	4413      	add	r3, r2
 8009946:	930b      	str	r3, [sp, #44]	; 0x2c
 8009948:	4bcd      	ldr	r3, [pc, #820]	; (8009c80 <__ieee754_pow+0x740>)
 800994a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800994e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009952:	429c      	cmp	r4, r3
 8009954:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009958:	dd08      	ble.n	800996c <__ieee754_pow+0x42c>
 800995a:	4bca      	ldr	r3, [pc, #808]	; (8009c84 <__ieee754_pow+0x744>)
 800995c:	429c      	cmp	r4, r3
 800995e:	f340 8164 	ble.w	8009c2a <__ieee754_pow+0x6ea>
 8009962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009964:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009968:	3301      	adds	r3, #1
 800996a:	930b      	str	r3, [sp, #44]	; 0x2c
 800996c:	2600      	movs	r6, #0
 800996e:	00f3      	lsls	r3, r6, #3
 8009970:	930d      	str	r3, [sp, #52]	; 0x34
 8009972:	4bc5      	ldr	r3, [pc, #788]	; (8009c88 <__ieee754_pow+0x748>)
 8009974:	4658      	mov	r0, fp
 8009976:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800997a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800997e:	4629      	mov	r1, r5
 8009980:	461a      	mov	r2, r3
 8009982:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009986:	4623      	mov	r3, r4
 8009988:	f7f6 fbfe 	bl	8000188 <__aeabi_dsub>
 800998c:	46da      	mov	sl, fp
 800998e:	462b      	mov	r3, r5
 8009990:	4652      	mov	r2, sl
 8009992:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009996:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800999a:	f7f6 fbf7 	bl	800018c <__adddf3>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	2000      	movs	r0, #0
 80099a4:	49b9      	ldr	r1, [pc, #740]	; (8009c8c <__ieee754_pow+0x74c>)
 80099a6:	f7f6 fed1 	bl	800074c <__aeabi_ddiv>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80099b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80099b6:	f7f6 fd9f 	bl	80004f8 <__aeabi_dmul>
 80099ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099be:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80099c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80099c6:	2300      	movs	r3, #0
 80099c8:	2200      	movs	r2, #0
 80099ca:	46ab      	mov	fp, r5
 80099cc:	106d      	asrs	r5, r5, #1
 80099ce:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80099d2:	9304      	str	r3, [sp, #16]
 80099d4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80099d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80099dc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80099e0:	4640      	mov	r0, r8
 80099e2:	4649      	mov	r1, r9
 80099e4:	4614      	mov	r4, r2
 80099e6:	461d      	mov	r5, r3
 80099e8:	f7f6 fd86 	bl	80004f8 <__aeabi_dmul>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80099f4:	f7f6 fbc8 	bl	8000188 <__aeabi_dsub>
 80099f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80099fc:	4606      	mov	r6, r0
 80099fe:	460f      	mov	r7, r1
 8009a00:	4620      	mov	r0, r4
 8009a02:	4629      	mov	r1, r5
 8009a04:	f7f6 fbc0 	bl	8000188 <__aeabi_dsub>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4650      	mov	r0, sl
 8009a0e:	4659      	mov	r1, fp
 8009a10:	f7f6 fbba 	bl	8000188 <__aeabi_dsub>
 8009a14:	4642      	mov	r2, r8
 8009a16:	464b      	mov	r3, r9
 8009a18:	f7f6 fd6e 	bl	80004f8 <__aeabi_dmul>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4630      	mov	r0, r6
 8009a22:	4639      	mov	r1, r7
 8009a24:	f7f6 fbb0 	bl	8000188 <__aeabi_dsub>
 8009a28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a2c:	f7f6 fd64 	bl	80004f8 <__aeabi_dmul>
 8009a30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a34:	4682      	mov	sl, r0
 8009a36:	468b      	mov	fp, r1
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	f7f6 fd5c 	bl	80004f8 <__aeabi_dmul>
 8009a40:	a37b      	add	r3, pc, #492	; (adr r3, 8009c30 <__ieee754_pow+0x6f0>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	4604      	mov	r4, r0
 8009a48:	460d      	mov	r5, r1
 8009a4a:	f7f6 fd55 	bl	80004f8 <__aeabi_dmul>
 8009a4e:	a37a      	add	r3, pc, #488	; (adr r3, 8009c38 <__ieee754_pow+0x6f8>)
 8009a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a54:	f7f6 fb9a 	bl	800018c <__adddf3>
 8009a58:	4622      	mov	r2, r4
 8009a5a:	462b      	mov	r3, r5
 8009a5c:	f7f6 fd4c 	bl	80004f8 <__aeabi_dmul>
 8009a60:	a377      	add	r3, pc, #476	; (adr r3, 8009c40 <__ieee754_pow+0x700>)
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	f7f6 fb91 	bl	800018c <__adddf3>
 8009a6a:	4622      	mov	r2, r4
 8009a6c:	462b      	mov	r3, r5
 8009a6e:	f7f6 fd43 	bl	80004f8 <__aeabi_dmul>
 8009a72:	a375      	add	r3, pc, #468	; (adr r3, 8009c48 <__ieee754_pow+0x708>)
 8009a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a78:	f7f6 fb88 	bl	800018c <__adddf3>
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	462b      	mov	r3, r5
 8009a80:	f7f6 fd3a 	bl	80004f8 <__aeabi_dmul>
 8009a84:	a372      	add	r3, pc, #456	; (adr r3, 8009c50 <__ieee754_pow+0x710>)
 8009a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8a:	f7f6 fb7f 	bl	800018c <__adddf3>
 8009a8e:	4622      	mov	r2, r4
 8009a90:	462b      	mov	r3, r5
 8009a92:	f7f6 fd31 	bl	80004f8 <__aeabi_dmul>
 8009a96:	a370      	add	r3, pc, #448	; (adr r3, 8009c58 <__ieee754_pow+0x718>)
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	f7f6 fb76 	bl	800018c <__adddf3>
 8009aa0:	4622      	mov	r2, r4
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	460f      	mov	r7, r1
 8009aa6:	462b      	mov	r3, r5
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	4629      	mov	r1, r5
 8009aac:	f7f6 fd24 	bl	80004f8 <__aeabi_dmul>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	4639      	mov	r1, r7
 8009ab8:	f7f6 fd1e 	bl	80004f8 <__aeabi_dmul>
 8009abc:	4604      	mov	r4, r0
 8009abe:	460d      	mov	r5, r1
 8009ac0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	464b      	mov	r3, r9
 8009ac8:	f7f6 fb60 	bl	800018c <__adddf3>
 8009acc:	4652      	mov	r2, sl
 8009ace:	465b      	mov	r3, fp
 8009ad0:	f7f6 fd12 	bl	80004f8 <__aeabi_dmul>
 8009ad4:	4622      	mov	r2, r4
 8009ad6:	462b      	mov	r3, r5
 8009ad8:	f7f6 fb58 	bl	800018c <__adddf3>
 8009adc:	4642      	mov	r2, r8
 8009ade:	4606      	mov	r6, r0
 8009ae0:	460f      	mov	r7, r1
 8009ae2:	464b      	mov	r3, r9
 8009ae4:	4640      	mov	r0, r8
 8009ae6:	4649      	mov	r1, r9
 8009ae8:	f7f6 fd06 	bl	80004f8 <__aeabi_dmul>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009af4:	2200      	movs	r2, #0
 8009af6:	4b66      	ldr	r3, [pc, #408]	; (8009c90 <__ieee754_pow+0x750>)
 8009af8:	f7f6 fb48 	bl	800018c <__adddf3>
 8009afc:	4632      	mov	r2, r6
 8009afe:	463b      	mov	r3, r7
 8009b00:	f7f6 fb44 	bl	800018c <__adddf3>
 8009b04:	2400      	movs	r4, #0
 8009b06:	460d      	mov	r5, r1
 8009b08:	4622      	mov	r2, r4
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	4649      	mov	r1, r9
 8009b10:	f7f6 fcf2 	bl	80004f8 <__aeabi_dmul>
 8009b14:	2200      	movs	r2, #0
 8009b16:	4680      	mov	r8, r0
 8009b18:	4689      	mov	r9, r1
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	4b5c      	ldr	r3, [pc, #368]	; (8009c90 <__ieee754_pow+0x750>)
 8009b20:	f7f6 fb32 	bl	8000188 <__aeabi_dsub>
 8009b24:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b28:	f7f6 fb2e 	bl	8000188 <__aeabi_dsub>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4630      	mov	r0, r6
 8009b32:	4639      	mov	r1, r7
 8009b34:	f7f6 fb28 	bl	8000188 <__aeabi_dsub>
 8009b38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b3c:	f7f6 fcdc 	bl	80004f8 <__aeabi_dmul>
 8009b40:	4622      	mov	r2, r4
 8009b42:	4606      	mov	r6, r0
 8009b44:	460f      	mov	r7, r1
 8009b46:	462b      	mov	r3, r5
 8009b48:	4650      	mov	r0, sl
 8009b4a:	4659      	mov	r1, fp
 8009b4c:	f7f6 fcd4 	bl	80004f8 <__aeabi_dmul>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4630      	mov	r0, r6
 8009b56:	4639      	mov	r1, r7
 8009b58:	f7f6 fb18 	bl	800018c <__adddf3>
 8009b5c:	2400      	movs	r4, #0
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460f      	mov	r7, r1
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4640      	mov	r0, r8
 8009b68:	4649      	mov	r1, r9
 8009b6a:	f7f6 fb0f 	bl	800018c <__adddf3>
 8009b6e:	a33c      	add	r3, pc, #240	; (adr r3, 8009c60 <__ieee754_pow+0x720>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	4620      	mov	r0, r4
 8009b76:	460d      	mov	r5, r1
 8009b78:	f7f6 fcbe 	bl	80004f8 <__aeabi_dmul>
 8009b7c:	4642      	mov	r2, r8
 8009b7e:	464b      	mov	r3, r9
 8009b80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b84:	4620      	mov	r0, r4
 8009b86:	4629      	mov	r1, r5
 8009b88:	f7f6 fafe 	bl	8000188 <__aeabi_dsub>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4630      	mov	r0, r6
 8009b92:	4639      	mov	r1, r7
 8009b94:	f7f6 faf8 	bl	8000188 <__aeabi_dsub>
 8009b98:	a333      	add	r3, pc, #204	; (adr r3, 8009c68 <__ieee754_pow+0x728>)
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	f7f6 fcab 	bl	80004f8 <__aeabi_dmul>
 8009ba2:	a333      	add	r3, pc, #204	; (adr r3, 8009c70 <__ieee754_pow+0x730>)
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	4606      	mov	r6, r0
 8009baa:	460f      	mov	r7, r1
 8009bac:	4620      	mov	r0, r4
 8009bae:	4629      	mov	r1, r5
 8009bb0:	f7f6 fca2 	bl	80004f8 <__aeabi_dmul>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4630      	mov	r0, r6
 8009bba:	4639      	mov	r1, r7
 8009bbc:	f7f6 fae6 	bl	800018c <__adddf3>
 8009bc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bc2:	4b34      	ldr	r3, [pc, #208]	; (8009c94 <__ieee754_pow+0x754>)
 8009bc4:	4413      	add	r3, r2
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	f7f6 fadf 	bl	800018c <__adddf3>
 8009bce:	4680      	mov	r8, r0
 8009bd0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009bd2:	4689      	mov	r9, r1
 8009bd4:	f7f6 fc26 	bl	8000424 <__aeabi_i2d>
 8009bd8:	4604      	mov	r4, r0
 8009bda:	460d      	mov	r5, r1
 8009bdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009be0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009be2:	4b2d      	ldr	r3, [pc, #180]	; (8009c98 <__ieee754_pow+0x758>)
 8009be4:	4413      	add	r3, r2
 8009be6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009bea:	4642      	mov	r2, r8
 8009bec:	464b      	mov	r3, r9
 8009bee:	f7f6 facd 	bl	800018c <__adddf3>
 8009bf2:	4632      	mov	r2, r6
 8009bf4:	463b      	mov	r3, r7
 8009bf6:	f7f6 fac9 	bl	800018c <__adddf3>
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	462b      	mov	r3, r5
 8009bfe:	f7f6 fac5 	bl	800018c <__adddf3>
 8009c02:	2000      	movs	r0, #0
 8009c04:	4622      	mov	r2, r4
 8009c06:	462b      	mov	r3, r5
 8009c08:	4682      	mov	sl, r0
 8009c0a:	468b      	mov	fp, r1
 8009c0c:	f7f6 fabc 	bl	8000188 <__aeabi_dsub>
 8009c10:	4632      	mov	r2, r6
 8009c12:	463b      	mov	r3, r7
 8009c14:	f7f6 fab8 	bl	8000188 <__aeabi_dsub>
 8009c18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c1c:	f7f6 fab4 	bl	8000188 <__aeabi_dsub>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4640      	mov	r0, r8
 8009c26:	4649      	mov	r1, r9
 8009c28:	e60b      	b.n	8009842 <__ieee754_pow+0x302>
 8009c2a:	2601      	movs	r6, #1
 8009c2c:	e69f      	b.n	800996e <__ieee754_pow+0x42e>
 8009c2e:	bf00      	nop
 8009c30:	4a454eef 	.word	0x4a454eef
 8009c34:	3fca7e28 	.word	0x3fca7e28
 8009c38:	93c9db65 	.word	0x93c9db65
 8009c3c:	3fcd864a 	.word	0x3fcd864a
 8009c40:	a91d4101 	.word	0xa91d4101
 8009c44:	3fd17460 	.word	0x3fd17460
 8009c48:	518f264d 	.word	0x518f264d
 8009c4c:	3fd55555 	.word	0x3fd55555
 8009c50:	db6fabff 	.word	0xdb6fabff
 8009c54:	3fdb6db6 	.word	0x3fdb6db6
 8009c58:	33333303 	.word	0x33333303
 8009c5c:	3fe33333 	.word	0x3fe33333
 8009c60:	e0000000 	.word	0xe0000000
 8009c64:	3feec709 	.word	0x3feec709
 8009c68:	dc3a03fd 	.word	0xdc3a03fd
 8009c6c:	3feec709 	.word	0x3feec709
 8009c70:	145b01f5 	.word	0x145b01f5
 8009c74:	be3e2fe0 	.word	0xbe3e2fe0
 8009c78:	7ff00000 	.word	0x7ff00000
 8009c7c:	43400000 	.word	0x43400000
 8009c80:	0003988e 	.word	0x0003988e
 8009c84:	000bb679 	.word	0x000bb679
 8009c88:	0800bd20 	.word	0x0800bd20
 8009c8c:	3ff00000 	.word	0x3ff00000
 8009c90:	40080000 	.word	0x40080000
 8009c94:	0800bd40 	.word	0x0800bd40
 8009c98:	0800bd30 	.word	0x0800bd30
 8009c9c:	a39c      	add	r3, pc, #624	; (adr r3, 8009f10 <__ieee754_pow+0x9d0>)
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	4640      	mov	r0, r8
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	f7f6 fa71 	bl	800018c <__adddf3>
 8009caa:	4622      	mov	r2, r4
 8009cac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cb0:	462b      	mov	r3, r5
 8009cb2:	4650      	mov	r0, sl
 8009cb4:	4639      	mov	r1, r7
 8009cb6:	f7f6 fa67 	bl	8000188 <__aeabi_dsub>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cc2:	f7f6 fea9 	bl	8000a18 <__aeabi_dcmpgt>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	f47f ae06 	bne.w	80098d8 <__ieee754_pow+0x398>
 8009ccc:	4aa2      	ldr	r2, [pc, #648]	; (8009f58 <__ieee754_pow+0xa18>)
 8009cce:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	f340 8100 	ble.w	8009ed8 <__ieee754_pow+0x998>
 8009cd8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009cdc:	151b      	asrs	r3, r3, #20
 8009cde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009ce2:	fa4a fa03 	asr.w	sl, sl, r3
 8009ce6:	44b2      	add	sl, r6
 8009ce8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009cec:	489b      	ldr	r0, [pc, #620]	; (8009f5c <__ieee754_pow+0xa1c>)
 8009cee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009cf2:	4108      	asrs	r0, r1
 8009cf4:	ea00 030a 	and.w	r3, r0, sl
 8009cf8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009cfc:	f1c1 0114 	rsb	r1, r1, #20
 8009d00:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009d04:	fa4a fa01 	asr.w	sl, sl, r1
 8009d08:	2e00      	cmp	r6, #0
 8009d0a:	f04f 0200 	mov.w	r2, #0
 8009d0e:	4620      	mov	r0, r4
 8009d10:	4629      	mov	r1, r5
 8009d12:	bfb8      	it	lt
 8009d14:	f1ca 0a00 	rsblt	sl, sl, #0
 8009d18:	f7f6 fa36 	bl	8000188 <__aeabi_dsub>
 8009d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d24:	2400      	movs	r4, #0
 8009d26:	4642      	mov	r2, r8
 8009d28:	464b      	mov	r3, r9
 8009d2a:	f7f6 fa2f 	bl	800018c <__adddf3>
 8009d2e:	a37a      	add	r3, pc, #488	; (adr r3, 8009f18 <__ieee754_pow+0x9d8>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	4620      	mov	r0, r4
 8009d36:	460d      	mov	r5, r1
 8009d38:	f7f6 fbde 	bl	80004f8 <__aeabi_dmul>
 8009d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d40:	4606      	mov	r6, r0
 8009d42:	460f      	mov	r7, r1
 8009d44:	4620      	mov	r0, r4
 8009d46:	4629      	mov	r1, r5
 8009d48:	f7f6 fa1e 	bl	8000188 <__aeabi_dsub>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4640      	mov	r0, r8
 8009d52:	4649      	mov	r1, r9
 8009d54:	f7f6 fa18 	bl	8000188 <__aeabi_dsub>
 8009d58:	a371      	add	r3, pc, #452	; (adr r3, 8009f20 <__ieee754_pow+0x9e0>)
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f7f6 fbcb 	bl	80004f8 <__aeabi_dmul>
 8009d62:	a371      	add	r3, pc, #452	; (adr r3, 8009f28 <__ieee754_pow+0x9e8>)
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	4680      	mov	r8, r0
 8009d6a:	4689      	mov	r9, r1
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	4629      	mov	r1, r5
 8009d70:	f7f6 fbc2 	bl	80004f8 <__aeabi_dmul>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	4640      	mov	r0, r8
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	f7f6 fa06 	bl	800018c <__adddf3>
 8009d80:	4604      	mov	r4, r0
 8009d82:	460d      	mov	r5, r1
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4630      	mov	r0, r6
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	f7f6 f9fe 	bl	800018c <__adddf3>
 8009d90:	4632      	mov	r2, r6
 8009d92:	463b      	mov	r3, r7
 8009d94:	4680      	mov	r8, r0
 8009d96:	4689      	mov	r9, r1
 8009d98:	f7f6 f9f6 	bl	8000188 <__aeabi_dsub>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4620      	mov	r0, r4
 8009da2:	4629      	mov	r1, r5
 8009da4:	f7f6 f9f0 	bl	8000188 <__aeabi_dsub>
 8009da8:	4642      	mov	r2, r8
 8009daa:	4606      	mov	r6, r0
 8009dac:	460f      	mov	r7, r1
 8009dae:	464b      	mov	r3, r9
 8009db0:	4640      	mov	r0, r8
 8009db2:	4649      	mov	r1, r9
 8009db4:	f7f6 fba0 	bl	80004f8 <__aeabi_dmul>
 8009db8:	a35d      	add	r3, pc, #372	; (adr r3, 8009f30 <__ieee754_pow+0x9f0>)
 8009dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	460d      	mov	r5, r1
 8009dc2:	f7f6 fb99 	bl	80004f8 <__aeabi_dmul>
 8009dc6:	a35c      	add	r3, pc, #368	; (adr r3, 8009f38 <__ieee754_pow+0x9f8>)
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	f7f6 f9dc 	bl	8000188 <__aeabi_dsub>
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	462b      	mov	r3, r5
 8009dd4:	f7f6 fb90 	bl	80004f8 <__aeabi_dmul>
 8009dd8:	a359      	add	r3, pc, #356	; (adr r3, 8009f40 <__ieee754_pow+0xa00>)
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f7f6 f9d5 	bl	800018c <__adddf3>
 8009de2:	4622      	mov	r2, r4
 8009de4:	462b      	mov	r3, r5
 8009de6:	f7f6 fb87 	bl	80004f8 <__aeabi_dmul>
 8009dea:	a357      	add	r3, pc, #348	; (adr r3, 8009f48 <__ieee754_pow+0xa08>)
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f7f6 f9ca 	bl	8000188 <__aeabi_dsub>
 8009df4:	4622      	mov	r2, r4
 8009df6:	462b      	mov	r3, r5
 8009df8:	f7f6 fb7e 	bl	80004f8 <__aeabi_dmul>
 8009dfc:	a354      	add	r3, pc, #336	; (adr r3, 8009f50 <__ieee754_pow+0xa10>)
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	f7f6 f9c3 	bl	800018c <__adddf3>
 8009e06:	4622      	mov	r2, r4
 8009e08:	462b      	mov	r3, r5
 8009e0a:	f7f6 fb75 	bl	80004f8 <__aeabi_dmul>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	460b      	mov	r3, r1
 8009e12:	4640      	mov	r0, r8
 8009e14:	4649      	mov	r1, r9
 8009e16:	f7f6 f9b7 	bl	8000188 <__aeabi_dsub>
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	460d      	mov	r5, r1
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4640      	mov	r0, r8
 8009e24:	4649      	mov	r1, r9
 8009e26:	f7f6 fb67 	bl	80004f8 <__aeabi_dmul>
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e34:	4620      	mov	r0, r4
 8009e36:	4629      	mov	r1, r5
 8009e38:	f7f6 f9a6 	bl	8000188 <__aeabi_dsub>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e44:	f7f6 fc82 	bl	800074c <__aeabi_ddiv>
 8009e48:	4632      	mov	r2, r6
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	463b      	mov	r3, r7
 8009e50:	4640      	mov	r0, r8
 8009e52:	4649      	mov	r1, r9
 8009e54:	f7f6 fb50 	bl	80004f8 <__aeabi_dmul>
 8009e58:	4632      	mov	r2, r6
 8009e5a:	463b      	mov	r3, r7
 8009e5c:	f7f6 f996 	bl	800018c <__adddf3>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4620      	mov	r0, r4
 8009e66:	4629      	mov	r1, r5
 8009e68:	f7f6 f98e 	bl	8000188 <__aeabi_dsub>
 8009e6c:	4642      	mov	r2, r8
 8009e6e:	464b      	mov	r3, r9
 8009e70:	f7f6 f98a 	bl	8000188 <__aeabi_dsub>
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	2000      	movs	r0, #0
 8009e7a:	4939      	ldr	r1, [pc, #228]	; (8009f60 <__ieee754_pow+0xa20>)
 8009e7c:	f7f6 f984 	bl	8000188 <__aeabi_dsub>
 8009e80:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009e84:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009e88:	da29      	bge.n	8009ede <__ieee754_pow+0x99e>
 8009e8a:	4652      	mov	r2, sl
 8009e8c:	f000 f874 	bl	8009f78 <scalbn>
 8009e90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e94:	f7ff bbfd 	b.w	8009692 <__ieee754_pow+0x152>
 8009e98:	4b32      	ldr	r3, [pc, #200]	; (8009f64 <__ieee754_pow+0xa24>)
 8009e9a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009e9e:	429f      	cmp	r7, r3
 8009ea0:	f77f af14 	ble.w	8009ccc <__ieee754_pow+0x78c>
 8009ea4:	4b30      	ldr	r3, [pc, #192]	; (8009f68 <__ieee754_pow+0xa28>)
 8009ea6:	440b      	add	r3, r1
 8009ea8:	4303      	orrs	r3, r0
 8009eaa:	d009      	beq.n	8009ec0 <__ieee754_pow+0x980>
 8009eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f7f6 fd92 	bl	80009dc <__aeabi_dcmplt>
 8009eb8:	3800      	subs	r0, #0
 8009eba:	bf18      	it	ne
 8009ebc:	2001      	movne	r0, #1
 8009ebe:	e452      	b.n	8009766 <__ieee754_pow+0x226>
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	f7f6 f960 	bl	8000188 <__aeabi_dsub>
 8009ec8:	4642      	mov	r2, r8
 8009eca:	464b      	mov	r3, r9
 8009ecc:	f7f6 fd9a 	bl	8000a04 <__aeabi_dcmpge>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	f43f aefb 	beq.w	8009ccc <__ieee754_pow+0x78c>
 8009ed6:	e7e9      	b.n	8009eac <__ieee754_pow+0x96c>
 8009ed8:	f04f 0a00 	mov.w	sl, #0
 8009edc:	e720      	b.n	8009d20 <__ieee754_pow+0x7e0>
 8009ede:	4621      	mov	r1, r4
 8009ee0:	e7d6      	b.n	8009e90 <__ieee754_pow+0x950>
 8009ee2:	f04f 0b00 	mov.w	fp, #0
 8009ee6:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009f60 <__ieee754_pow+0xa20>
 8009eea:	f7ff bbb9 	b.w	8009660 <__ieee754_pow+0x120>
 8009eee:	f04f 0b00 	mov.w	fp, #0
 8009ef2:	f04f 0c00 	mov.w	ip, #0
 8009ef6:	f7ff bbb3 	b.w	8009660 <__ieee754_pow+0x120>
 8009efa:	4640      	mov	r0, r8
 8009efc:	4649      	mov	r1, r9
 8009efe:	f7ff bb3c 	b.w	800957a <__ieee754_pow+0x3a>
 8009f02:	9200      	str	r2, [sp, #0]
 8009f04:	f7ff bb88 	b.w	8009618 <__ieee754_pow+0xd8>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f7ff bb72 	b.w	80095f2 <__ieee754_pow+0xb2>
 8009f0e:	bf00      	nop
 8009f10:	652b82fe 	.word	0x652b82fe
 8009f14:	3c971547 	.word	0x3c971547
 8009f18:	00000000 	.word	0x00000000
 8009f1c:	3fe62e43 	.word	0x3fe62e43
 8009f20:	fefa39ef 	.word	0xfefa39ef
 8009f24:	3fe62e42 	.word	0x3fe62e42
 8009f28:	0ca86c39 	.word	0x0ca86c39
 8009f2c:	be205c61 	.word	0xbe205c61
 8009f30:	72bea4d0 	.word	0x72bea4d0
 8009f34:	3e663769 	.word	0x3e663769
 8009f38:	c5d26bf1 	.word	0xc5d26bf1
 8009f3c:	3ebbbd41 	.word	0x3ebbbd41
 8009f40:	af25de2c 	.word	0xaf25de2c
 8009f44:	3f11566a 	.word	0x3f11566a
 8009f48:	16bebd93 	.word	0x16bebd93
 8009f4c:	3f66c16c 	.word	0x3f66c16c
 8009f50:	5555553e 	.word	0x5555553e
 8009f54:	3fc55555 	.word	0x3fc55555
 8009f58:	3fe00000 	.word	0x3fe00000
 8009f5c:	fff00000 	.word	0xfff00000
 8009f60:	3ff00000 	.word	0x3ff00000
 8009f64:	4090cbff 	.word	0x4090cbff
 8009f68:	3f6f3400 	.word	0x3f6f3400

08009f6c <fabs>:
 8009f6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f70:	4619      	mov	r1, r3
 8009f72:	4770      	bx	lr
 8009f74:	0000      	movs	r0, r0
	...

08009f78 <scalbn>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	4616      	mov	r6, r2
 8009f7c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009f80:	4604      	mov	r4, r0
 8009f82:	460d      	mov	r5, r1
 8009f84:	460b      	mov	r3, r1
 8009f86:	b992      	cbnz	r2, 8009fae <scalbn+0x36>
 8009f88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f8c:	4303      	orrs	r3, r0
 8009f8e:	d03c      	beq.n	800a00a <scalbn+0x92>
 8009f90:	4b31      	ldr	r3, [pc, #196]	; (800a058 <scalbn+0xe0>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	f7f6 fab0 	bl	80004f8 <__aeabi_dmul>
 8009f98:	4b30      	ldr	r3, [pc, #192]	; (800a05c <scalbn+0xe4>)
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	429e      	cmp	r6, r3
 8009f9e:	460d      	mov	r5, r1
 8009fa0:	da0f      	bge.n	8009fc2 <scalbn+0x4a>
 8009fa2:	a329      	add	r3, pc, #164	; (adr r3, 800a048 <scalbn+0xd0>)
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	f7f6 faa6 	bl	80004f8 <__aeabi_dmul>
 8009fac:	e006      	b.n	8009fbc <scalbn+0x44>
 8009fae:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8009fb2:	42ba      	cmp	r2, r7
 8009fb4:	d109      	bne.n	8009fca <scalbn+0x52>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	f7f6 f8e8 	bl	800018c <__adddf3>
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	460d      	mov	r5, r1
 8009fc0:	e023      	b.n	800a00a <scalbn+0x92>
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009fc8:	3a36      	subs	r2, #54	; 0x36
 8009fca:	f24c 3150 	movw	r1, #50000	; 0xc350
 8009fce:	428e      	cmp	r6, r1
 8009fd0:	dd0e      	ble.n	8009ff0 <scalbn+0x78>
 8009fd2:	a31f      	add	r3, pc, #124	; (adr r3, 800a050 <scalbn+0xd8>)
 8009fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009fdc:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009fe0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009fe4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009fe8:	481d      	ldr	r0, [pc, #116]	; (800a060 <scalbn+0xe8>)
 8009fea:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009fee:	e7db      	b.n	8009fa8 <scalbn+0x30>
 8009ff0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009ff4:	4432      	add	r2, r6
 8009ff6:	428a      	cmp	r2, r1
 8009ff8:	dceb      	bgt.n	8009fd2 <scalbn+0x5a>
 8009ffa:	2a00      	cmp	r2, #0
 8009ffc:	dd08      	ble.n	800a010 <scalbn+0x98>
 8009ffe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a002:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a006:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a00a:	4620      	mov	r0, r4
 800a00c:	4629      	mov	r1, r5
 800a00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a010:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a014:	da0c      	bge.n	800a030 <scalbn+0xb8>
 800a016:	a30c      	add	r3, pc, #48	; (adr r3, 800a048 <scalbn+0xd0>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a020:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a024:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a028:	480e      	ldr	r0, [pc, #56]	; (800a064 <scalbn+0xec>)
 800a02a:	f041 011f 	orr.w	r1, r1, #31
 800a02e:	e7bb      	b.n	8009fa8 <scalbn+0x30>
 800a030:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a034:	3236      	adds	r2, #54	; 0x36
 800a036:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a03a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a03e:	4620      	mov	r0, r4
 800a040:	4629      	mov	r1, r5
 800a042:	2200      	movs	r2, #0
 800a044:	4b08      	ldr	r3, [pc, #32]	; (800a068 <scalbn+0xf0>)
 800a046:	e7af      	b.n	8009fa8 <scalbn+0x30>
 800a048:	c2f8f359 	.word	0xc2f8f359
 800a04c:	01a56e1f 	.word	0x01a56e1f
 800a050:	8800759c 	.word	0x8800759c
 800a054:	7e37e43c 	.word	0x7e37e43c
 800a058:	43500000 	.word	0x43500000
 800a05c:	ffff3cb0 	.word	0xffff3cb0
 800a060:	8800759c 	.word	0x8800759c
 800a064:	c2f8f359 	.word	0xc2f8f359
 800a068:	3c900000 	.word	0x3c900000

0800a06c <with_errno>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	4604      	mov	r4, r0
 800a070:	460d      	mov	r5, r1
 800a072:	4616      	mov	r6, r2
 800a074:	f7fb fca8 	bl	80059c8 <__errno>
 800a078:	4629      	mov	r1, r5
 800a07a:	6006      	str	r6, [r0, #0]
 800a07c:	4620      	mov	r0, r4
 800a07e:	bd70      	pop	{r4, r5, r6, pc}

0800a080 <xflow>:
 800a080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a082:	4615      	mov	r5, r2
 800a084:	461c      	mov	r4, r3
 800a086:	b180      	cbz	r0, 800a0aa <xflow+0x2a>
 800a088:	4610      	mov	r0, r2
 800a08a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a08e:	e9cd 0100 	strd	r0, r1, [sp]
 800a092:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a096:	4628      	mov	r0, r5
 800a098:	4621      	mov	r1, r4
 800a09a:	f7f6 fa2d 	bl	80004f8 <__aeabi_dmul>
 800a09e:	2222      	movs	r2, #34	; 0x22
 800a0a0:	b003      	add	sp, #12
 800a0a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0a6:	f7ff bfe1 	b.w	800a06c <with_errno>
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	e7ee      	b.n	800a08e <xflow+0xe>

0800a0b0 <__math_uflow>:
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a0b6:	f7ff bfe3 	b.w	800a080 <xflow>

0800a0ba <__math_oflow>:
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a0c0:	f7ff bfde 	b.w	800a080 <xflow>

0800a0c4 <_init>:
 800a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c6:	bf00      	nop
 800a0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ca:	bc08      	pop	{r3}
 800a0cc:	469e      	mov	lr, r3
 800a0ce:	4770      	bx	lr

0800a0d0 <_fini>:
 800a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d2:	bf00      	nop
 800a0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d6:	bc08      	pop	{r3}
 800a0d8:	469e      	mov	lr, r3
 800a0da:	4770      	bx	lr
