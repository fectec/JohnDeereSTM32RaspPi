
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011b4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001538  080012e4  080012e4  000112e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800281c  0800281c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800281c  0800281c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800281c  0800281c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800281c  0800281c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002824  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000010  08002834  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08002834  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015dc  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005c6  00000000  00000000  00021658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00021c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000112  00000000  00000000  00021da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000138a  00000000  00000000  00021eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f54  00000000  00000000  00023244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000048c3  00000000  00000000  00025198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000510  00000000  00000000  00029a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00029f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	080012cc 	.word	0x080012cc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	080012cc 	.word	0x080012cc

08000170 <USER_GPIO_Define>:

#include "main.h"
#include "GPIO.h"

void USER_GPIO_Define( uint8_t port, uint8_t pin, uint8_t direction, uint8_t option )
{
 8000170:	b490      	push	{r4, r7}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4604      	mov	r4, r0
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4623      	mov	r3, r4
 8000180:	71fb      	strb	r3, [r7, #7]
 8000182:	4603      	mov	r3, r0
 8000184:	71bb      	strb	r3, [r7, #6]
 8000186:	460b      	mov	r3, r1
 8000188:	717b      	strb	r3, [r7, #5]
 800018a:	4613      	mov	r3, r2
 800018c:	713b      	strb	r3, [r7, #4]
  volatile uint32_t * CR;
  uint8_t actual_pin = pin;
 800018e:	79bb      	ldrb	r3, [r7, #6]
 8000190:	72fb      	strb	r3, [r7, #11]
  uint8_t offset = 0x00;
 8000192:	2300      	movs	r3, #0
 8000194:	72bb      	strb	r3, [r7, #10]

  if( pin > 7 ) {
 8000196:	79bb      	ldrb	r3, [r7, #6]
 8000198:	2b07      	cmp	r3, #7
 800019a:	d904      	bls.n	80001a6 <USER_GPIO_Define+0x36>
      actual_pin -= 8;
 800019c:	7afb      	ldrb	r3, [r7, #11]
 800019e:	3b08      	subs	r3, #8
 80001a0:	72fb      	strb	r3, [r7, #11]
      offset = 0x01;
 80001a2:	2301      	movs	r3, #1
 80001a4:	72bb      	strb	r3, [r7, #10]
  }

  if( port == 0 )
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d107      	bne.n	80001bc <USER_GPIO_Define+0x4c>
  {
      CR = (volatile uint32_t *) (&GPIOA->CRL + offset);
 80001ac:	7abb      	ldrb	r3, [r7, #10]
 80001ae:	009b      	lsls	r3, r3, #2
 80001b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001b4:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80001b8:	60fb      	str	r3, [r7, #12]
 80001ba:	e040      	b.n	800023e <USER_GPIO_Define+0xce>
  }
  else if( port == 1 )
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d107      	bne.n	80001d2 <USER_GPIO_Define+0x62>
  {
      CR = (volatile uint32_t *) (&GPIOB->CRL + offset);
 80001c2:	7abb      	ldrb	r3, [r7, #10]
 80001c4:	009b      	lsls	r3, r3, #2
 80001c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001ca:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	e035      	b.n	800023e <USER_GPIO_Define+0xce>
  }
  else if ( port == 2 )
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	2b02      	cmp	r3, #2
 80001d6:	d107      	bne.n	80001e8 <USER_GPIO_Define+0x78>
  {
      CR = (volatile uint32_t *) (&GPIOC->CRL + offset);
 80001d8:	7abb      	ldrb	r3, [r7, #10]
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001e0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80001e4:	60fb      	str	r3, [r7, #12]
 80001e6:	e02a      	b.n	800023e <USER_GPIO_Define+0xce>
  }
  else if ( port == 3 )
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b03      	cmp	r3, #3
 80001ec:	d107      	bne.n	80001fe <USER_GPIO_Define+0x8e>
  {
      CR = (volatile uint32_t *) (&GPIOD->CRL + offset);
 80001ee:	7abb      	ldrb	r3, [r7, #10]
 80001f0:	009b      	lsls	r3, r3, #2
 80001f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001f6:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	e01f      	b.n	800023e <USER_GPIO_Define+0xce>
  }
  else if( port == 4 )
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	2b04      	cmp	r3, #4
 8000202:	d107      	bne.n	8000214 <USER_GPIO_Define+0xa4>
  {
      CR = (volatile uint32_t *) (&GPIOE->CRL + offset);
 8000204:	7abb      	ldrb	r3, [r7, #10]
 8000206:	009b      	lsls	r3, r3, #2
 8000208:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800020c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e014      	b.n	800023e <USER_GPIO_Define+0xce>
  }
  else if( port == 5 )
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	2b05      	cmp	r3, #5
 8000218:	d107      	bne.n	800022a <USER_GPIO_Define+0xba>
  {
      CR = (volatile uint32_t *) (&GPIOF->CRL + offset);
 800021a:	7abb      	ldrb	r3, [r7, #10]
 800021c:	009b      	lsls	r3, r3, #2
 800021e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000222:	f503 338e 	add.w	r3, r3, #72704	; 0x11c00
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	e009      	b.n	800023e <USER_GPIO_Define+0xce>
  }
  else if( port == 6 )
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b06      	cmp	r3, #6
 800022e:	d106      	bne.n	800023e <USER_GPIO_Define+0xce>
  {
      CR = (volatile uint32_t *) (&GPIOG->CRL + offset);
 8000230:	7abb      	ldrb	r3, [r7, #10]
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000238:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800023c:	60fb      	str	r3, [r7, #12]
  }

  *CR	&=	~( 0xF << (actual_pin * 4) );		// Reset the target pin
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	7afa      	ldrb	r2, [r7, #11]
 8000244:	0092      	lsls	r2, r2, #2
 8000246:	210f      	movs	r1, #15
 8000248:	fa01 f202 	lsl.w	r2, r1, r2
 800024c:	43d2      	mvns	r2, r2
 800024e:	401a      	ands	r2, r3
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	601a      	str	r2, [r3, #0]
  *CR	|=	( direction << (actual_pin * 4) )	// Set up the direction and the option for the pin
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	7979      	ldrb	r1, [r7, #5]
 800025a:	7afa      	ldrb	r2, [r7, #11]
 800025c:	0092      	lsls	r2, r2, #2
 800025e:	4091      	lsls	r1, r2
	|	( option << (actual_pin * 4 + 2) );
 8000260:	7938      	ldrb	r0, [r7, #4]
 8000262:	7afa      	ldrb	r2, [r7, #11]
 8000264:	0092      	lsls	r2, r2, #2
 8000266:	3202      	adds	r2, #2
 8000268:	fa00 f202 	lsl.w	r2, r0, r2
 800026c:	430a      	orrs	r2, r1
  *CR	|=	( direction << (actual_pin * 4) )	// Set up the direction and the option for the pin
 800026e:	431a      	orrs	r2, r3
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	601a      	str	r2, [r3, #0]
}
 8000274:	bf00      	nop
 8000276:	3710      	adds	r7, #16
 8000278:	46bd      	mov	sp, r7
 800027a:	bc90      	pop	{r4, r7}
 800027c:	4770      	bx	lr
	...

08000280 <USER_I2C_Init>:
#include "GPIO.h"

// Init

void USER_I2C_Init( uint8_t I2C, uint8_t speed_mode )
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	460a      	mov	r2, r1
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
  RCC->APB2ENR		|=	RCC_APB2ENR_AFIOEN;	// Alternate function I/O clock enable
 8000290:	4b35      	ldr	r3, [pc, #212]	; (8000368 <USER_I2C_Init+0xe8>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a34      	ldr	r2, [pc, #208]	; (8000368 <USER_I2C_Init+0xe8>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6193      	str	r3, [r2, #24]

  if( I2C == 0 )
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d12d      	bne.n	80002fe <USER_I2C_Init+0x7e>
  {
      RCC->APB1ENR 	|=	RCC_APB1ENR_I2C1EN;	// I2C1 clock enable
 80002a2:	4b31      	ldr	r3, [pc, #196]	; (8000368 <USER_I2C_Init+0xe8>)
 80002a4:	69db      	ldr	r3, [r3, #28]
 80002a6:	4a30      	ldr	r2, [pc, #192]	; (8000368 <USER_I2C_Init+0xe8>)
 80002a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002ac:	61d3      	str	r3, [r2, #28]

      USER_GPIO_Define( PORTB, 6, OUT_50, OUT_AF_OD );	// PB6 I2C1_SCL
 80002ae:	2303      	movs	r3, #3
 80002b0:	2203      	movs	r2, #3
 80002b2:	2106      	movs	r1, #6
 80002b4:	2001      	movs	r0, #1
 80002b6:	f7ff ff5b 	bl	8000170 <USER_GPIO_Define>
      USER_GPIO_Define( PORTB, 7, OUT_50, OUT_AF_OD );	// PB7 I2C1_SDA
 80002ba:	2303      	movs	r3, #3
 80002bc:	2203      	movs	r2, #3
 80002be:	2107      	movs	r1, #7
 80002c0:	2001      	movs	r0, #1
 80002c2:	f7ff ff55 	bl	8000170 <USER_GPIO_Define>

      I2C1->CR1		|=	I2C_CR1_SWRST;		// Software reset
 80002c6:	4b29      	ldr	r3, [pc, #164]	; (800036c <USER_I2C_Init+0xec>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a28      	ldr	r2, [pc, #160]	; (800036c <USER_I2C_Init+0xec>)
 80002cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002d0:	6013      	str	r3, [r2, #0]
      I2C1->CR1		&=	~I2C_CR1_SWRST;
 80002d2:	4b26      	ldr	r3, [pc, #152]	; (800036c <USER_I2C_Init+0xec>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a25      	ldr	r2, [pc, #148]	; (800036c <USER_I2C_Init+0xec>)
 80002d8:	0c1b      	lsrs	r3, r3, #16
 80002da:	041b      	lsls	r3, r3, #16
 80002dc:	6013      	str	r3, [r2, #0]

      I2C1->CR2		=	I2C_CR2_FREQ;		// Peripheral clock frequency of 8 MHz
 80002de:	4b23      	ldr	r3, [pc, #140]	; (800036c <USER_I2C_Init+0xec>)
 80002e0:	2208      	movs	r2, #8
 80002e2:	605a      	str	r2, [r3, #4]

      I2C1->CCR		=	speed_mode;		// Clock control register in Fm/Sm mode
 80002e4:	4a21      	ldr	r2, [pc, #132]	; (800036c <USER_I2C_Init+0xec>)
 80002e6:	79bb      	ldrb	r3, [r7, #6]
 80002e8:	61d3      	str	r3, [r2, #28]
      I2C1->TRISE	=	I2C_TRISE_TRISE;	// Maximum rise time in Fm/Sm mode (Master mode)
 80002ea:	4b20      	ldr	r3, [pc, #128]	; (800036c <USER_I2C_Init+0xec>)
 80002ec:	2209      	movs	r2, #9
 80002ee:	621a      	str	r2, [r3, #32]

      I2C1->CR1		|=	I2C_CR1_PE;		// Peripheral enable
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <USER_I2C_Init+0xec>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a1d      	ldr	r2, [pc, #116]	; (800036c <USER_I2C_Init+0xec>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]
      I2C2->TRISE	=	I2C_TRISE_TRISE;

      I2C2->CR1		|=	I2C_CR1_PE;
  }

}
 80002fc:	e02f      	b.n	800035e <USER_I2C_Init+0xde>
  else if( I2C == 1 )
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d12c      	bne.n	800035e <USER_I2C_Init+0xde>
      RCC->APB1ENR 	|=	RCC_APB1ENR_I2C2EN;	// I2C2 clock enable
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <USER_I2C_Init+0xe8>)
 8000306:	69db      	ldr	r3, [r3, #28]
 8000308:	4a17      	ldr	r2, [pc, #92]	; (8000368 <USER_I2C_Init+0xe8>)
 800030a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800030e:	61d3      	str	r3, [r2, #28]
      USER_GPIO_Define( PORTB, 10, OUT_50, OUT_AF_OD );	// PB10 I2C2_SCL
 8000310:	2303      	movs	r3, #3
 8000312:	2203      	movs	r2, #3
 8000314:	210a      	movs	r1, #10
 8000316:	2001      	movs	r0, #1
 8000318:	f7ff ff2a 	bl	8000170 <USER_GPIO_Define>
      USER_GPIO_Define( PORTB, 11, OUT_50, OUT_AF_OD );	// PB11 I2C2_SDA
 800031c:	2303      	movs	r3, #3
 800031e:	2203      	movs	r2, #3
 8000320:	210b      	movs	r1, #11
 8000322:	2001      	movs	r0, #1
 8000324:	f7ff ff24 	bl	8000170 <USER_GPIO_Define>
      I2C2->CR1		|=	I2C_CR1_SWRST;
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <USER_I2C_Init+0xf0>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a10      	ldr	r2, [pc, #64]	; (8000370 <USER_I2C_Init+0xf0>)
 800032e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000332:	6013      	str	r3, [r2, #0]
      I2C2->CR1		&=	~I2C_CR1_SWRST;
 8000334:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <USER_I2C_Init+0xf0>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <USER_I2C_Init+0xf0>)
 800033a:	0c1b      	lsrs	r3, r3, #16
 800033c:	041b      	lsls	r3, r3, #16
 800033e:	6013      	str	r3, [r2, #0]
      I2C2->CR2		=	I2C_CR2_FREQ;
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <USER_I2C_Init+0xf0>)
 8000342:	2208      	movs	r2, #8
 8000344:	605a      	str	r2, [r3, #4]
      I2C2->CCR		=	speed_mode;
 8000346:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <USER_I2C_Init+0xf0>)
 8000348:	79bb      	ldrb	r3, [r7, #6]
 800034a:	61d3      	str	r3, [r2, #28]
      I2C2->TRISE	=	I2C_TRISE_TRISE;
 800034c:	4b08      	ldr	r3, [pc, #32]	; (8000370 <USER_I2C_Init+0xf0>)
 800034e:	2209      	movs	r2, #9
 8000350:	621a      	str	r2, [r3, #32]
      I2C2->CR1		|=	I2C_CR1_PE;
 8000352:	4b07      	ldr	r3, [pc, #28]	; (8000370 <USER_I2C_Init+0xf0>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a06      	ldr	r2, [pc, #24]	; (8000370 <USER_I2C_Init+0xf0>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6013      	str	r3, [r2, #0]
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000
 800036c:	40005400 	.word	0x40005400
 8000370:	40005800 	.word	0x40005800

08000374 <USER_I2C_Start>:

// Start

void USER_I2C_Start( uint8_t I2C )
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]

  if( I2C == 0 )
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d10d      	bne.n	80003a0 <USER_I2C_Start+0x2c>
  {
      I2C1->CR1		|=	I2C_CR1_START;		// Start generation
 8000384:	4b11      	ldr	r3, [pc, #68]	; (80003cc <USER_I2C_Start+0x58>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a10      	ldr	r2, [pc, #64]	; (80003cc <USER_I2C_Start+0x58>)
 800038a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800038e:	6013      	str	r3, [r2, #0]
      while (! ( I2C1->SR1 & I2C_SR1_SB) );		// Set when a Start condition generated
 8000390:	bf00      	nop
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <USER_I2C_Start+0x58>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0f9      	beq.n	8000392 <USER_I2C_Start+0x1e>
  {
      I2C2->CR1		|=	I2C_CR1_START;
      while (! ( I2C2->SR1 & I2C_SR1_SB ) );
  }

}
 800039e:	e00f      	b.n	80003c0 <USER_I2C_Start+0x4c>
  else if ( I2C == 1 )
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d10c      	bne.n	80003c0 <USER_I2C_Start+0x4c>
      I2C2->CR1		|=	I2C_CR1_START;
 80003a6:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <USER_I2C_Start+0x5c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a09      	ldr	r2, [pc, #36]	; (80003d0 <USER_I2C_Start+0x5c>)
 80003ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003b0:	6013      	str	r3, [r2, #0]
      while (! ( I2C2->SR1 & I2C_SR1_SB ) );
 80003b2:	bf00      	nop
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <USER_I2C_Start+0x5c>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d0f9      	beq.n	80003b4 <USER_I2C_Start+0x40>
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40005400 	.word	0x40005400
 80003d0:	40005800 	.word	0x40005800

080003d4 <USER_I2C_Address>:

// Send the address + R or W

void USER_I2C_Address( uint8_t I2C, uint8_t address, uint8_t RW )
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
 80003de:	460b      	mov	r3, r1
 80003e0:	71bb      	strb	r3, [r7, #6]
 80003e2:	4613      	mov	r3, r2
 80003e4:	717b      	strb	r3, [r7, #5]
  volatile uint16_t tmp;

  if( I2C == 0 )
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d122      	bne.n	8000432 <USER_I2C_Address+0x5e>
  {
      I2C1->DR = ( address | RW );
 80003ec:	79ba      	ldrb	r2, [r7, #6]
 80003ee:	797b      	ldrb	r3, [r7, #5]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	4b26      	ldr	r3, [pc, #152]	; (8000490 <USER_I2C_Address+0xbc>)
 80003f6:	611a      	str	r2, [r3, #16]

      while( !( I2C1->SR1 & I2C_SR1_ADDR ) );		// ADDR flag is zero while address is mismatched or not received
 80003f8:	bf00      	nop
 80003fa:	4b25      	ldr	r3, [pc, #148]	; (8000490 <USER_I2C_Address+0xbc>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f003 0302 	and.w	r3, r3, #2
 8000402:	2b00      	cmp	r3, #0
 8000404:	d0f9      	beq.n	80003fa <USER_I2C_Address+0x26>
      while ( I2C1->SR1 & I2C_SR1_ADDR )		// ADDR flag is set when received address matched
 8000406:	e00d      	b.n	8000424 <USER_I2C_Address+0x50>
      {
	  tmp = I2C1->SR1;				// Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag
 8000408:	4b21      	ldr	r3, [pc, #132]	; (8000490 <USER_I2C_Address+0xbc>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	b29b      	uxth	r3, r3
 800040e:	81fb      	strh	r3, [r7, #14]
	  tmp = I2C1->SR2;
 8000410:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <USER_I2C_Address+0xbc>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	b29b      	uxth	r3, r3
 8000416:	81fb      	strh	r3, [r7, #14]

	  if( !( I2C1->SR1 & I2C_SR1_ADDR ) )
 8000418:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <USER_I2C_Address+0xbc>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	f003 0302 	and.w	r3, r3, #2
 8000420:	2b00      	cmp	r3, #0
 8000422:	d02c      	beq.n	800047e <USER_I2C_Address+0xaa>
      while ( I2C1->SR1 & I2C_SR1_ADDR )		// ADDR flag is set when received address matched
 8000424:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <USER_I2C_Address+0xbc>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	f003 0302 	and.w	r3, r3, #2
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1eb      	bne.n	8000408 <USER_I2C_Address+0x34>
	      break;
	  }
      }
  }

}
 8000430:	e028      	b.n	8000484 <USER_I2C_Address+0xb0>
  else if ( I2C == 1 )
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d125      	bne.n	8000484 <USER_I2C_Address+0xb0>
      I2C2->DR = ( address | RW );
 8000438:	79ba      	ldrb	r2, [r7, #6]
 800043a:	797b      	ldrb	r3, [r7, #5]
 800043c:	4313      	orrs	r3, r2
 800043e:	b2da      	uxtb	r2, r3
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <USER_I2C_Address+0xc0>)
 8000442:	611a      	str	r2, [r3, #16]
      while( !( I2C2->SR1 & I2C_SR1_ADDR ) );
 8000444:	bf00      	nop
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <USER_I2C_Address+0xc0>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f003 0302 	and.w	r3, r3, #2
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <USER_I2C_Address+0x72>
      while ( I2C2->SR1 & I2C_SR1_ADDR )
 8000452:	e00d      	b.n	8000470 <USER_I2C_Address+0x9c>
	  tmp = I2C2->SR1;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <USER_I2C_Address+0xc0>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	b29b      	uxth	r3, r3
 800045a:	81fb      	strh	r3, [r7, #14]
	  tmp = I2C2->SR2;
 800045c:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <USER_I2C_Address+0xc0>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	b29b      	uxth	r3, r3
 8000462:	81fb      	strh	r3, [r7, #14]
	  if( !( I2C2->SR1 & I2C_SR1_ADDR ) )
 8000464:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <USER_I2C_Address+0xc0>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	f003 0302 	and.w	r3, r3, #2
 800046c:	2b00      	cmp	r3, #0
 800046e:	d008      	beq.n	8000482 <USER_I2C_Address+0xae>
      while ( I2C2->SR1 & I2C_SR1_ADDR )
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <USER_I2C_Address+0xc0>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	f003 0302 	and.w	r3, r3, #2
 8000478:	2b00      	cmp	r3, #0
 800047a:	d1eb      	bne.n	8000454 <USER_I2C_Address+0x80>
}
 800047c:	e002      	b.n	8000484 <USER_I2C_Address+0xb0>
	      break;
 800047e:	bf00      	nop
 8000480:	e000      	b.n	8000484 <USER_I2C_Address+0xb0>
	      break;
 8000482:	bf00      	nop
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	40005400 	.word	0x40005400
 8000494:	40005800 	.word	0x40005800

08000498 <USER_I2C_Data>:

// Send data

void USER_I2C_Data( uint8_t I2C, uint8_t data )
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	460a      	mov	r2, r1
 80004a2:	71fb      	strb	r3, [r7, #7]
 80004a4:	4613      	mov	r3, r2
 80004a6:	71bb      	strb	r3, [r7, #6]

  if( I2C == 0 )
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d111      	bne.n	80004d2 <USER_I2C_Data+0x3a>
  {
      while( !( I2C1->SR1 & I2C_SR1_TXE ) );		// While data register not empty
 80004ae:	bf00      	nop
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <USER_I2C_Data+0x6c>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0f9      	beq.n	80004b0 <USER_I2C_Data+0x18>
      I2C1->DR = data;
 80004bc:	4a11      	ldr	r2, [pc, #68]	; (8000504 <USER_I2C_Data+0x6c>)
 80004be:	79bb      	ldrb	r3, [r7, #6]
 80004c0:	6113      	str	r3, [r2, #16]
      while( !( I2C1->SR1 & I2C_SR1_TXE ) );
 80004c2:	bf00      	nop
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <USER_I2C_Data+0x6c>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d0f9      	beq.n	80004c4 <USER_I2C_Data+0x2c>
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );		// While data register not empty
      I2C2->DR = data;
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );
  }

}
 80004d0:	e013      	b.n	80004fa <USER_I2C_Data+0x62>
  else if ( I2C == 1 )
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d110      	bne.n	80004fa <USER_I2C_Data+0x62>
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );		// While data register not empty
 80004d8:	bf00      	nop
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <USER_I2C_Data+0x70>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d0f9      	beq.n	80004da <USER_I2C_Data+0x42>
      I2C2->DR = data;
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <USER_I2C_Data+0x70>)
 80004e8:	79bb      	ldrb	r3, [r7, #6]
 80004ea:	6113      	str	r3, [r2, #16]
      while( !( I2C2->SR1 & I2C_SR1_TXE ) );
 80004ec:	bf00      	nop
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <USER_I2C_Data+0x70>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <USER_I2C_Data+0x56>
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	40005400 	.word	0x40005400
 8000508:	40005800 	.word	0x40005800

0800050c <USER_I2C_Stop>:

// Stop

void USER_I2C_Stop( uint8_t I2C )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t tmp;

  if( I2C == 0 )
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d10e      	bne.n	800053a <USER_I2C_Stop+0x2e>
  {
      tmp = I2C1->SR1;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <USER_I2C_Stop+0x5c>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	b29b      	uxth	r3, r3
 8000522:	81fb      	strh	r3, [r7, #14]
      tmp = I2C1->SR2;
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <USER_I2C_Stop+0x5c>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	b29b      	uxth	r3, r3
 800052a:	81fb      	strh	r3, [r7, #14]
      I2C1->CR1		|=	I2C_CR1_STOP;		// Stop generation
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <USER_I2C_Stop+0x5c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <USER_I2C_Stop+0x5c>)
 8000532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000536:	6013      	str	r3, [r2, #0]
      tmp = I2C2->SR1;
      tmp = I2C2->SR2;
      I2C2->CR1		|=	I2C_CR1_STOP;		// Stop generation
  }

}
 8000538:	e010      	b.n	800055c <USER_I2C_Stop+0x50>
  else if ( I2C == 1 )
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d10d      	bne.n	800055c <USER_I2C_Stop+0x50>
      tmp = I2C2->SR1;
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <USER_I2C_Stop+0x60>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	b29b      	uxth	r3, r3
 8000546:	81fb      	strh	r3, [r7, #14]
      tmp = I2C2->SR2;
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <USER_I2C_Stop+0x60>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	b29b      	uxth	r3, r3
 800054e:	81fb      	strh	r3, [r7, #14]
      I2C2->CR1		|=	I2C_CR1_STOP;		// Stop generation
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <USER_I2C_Stop+0x60>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a05      	ldr	r2, [pc, #20]	; (800056c <USER_I2C_Stop+0x60>)
 8000556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800055a:	6013      	str	r3, [r2, #0]
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40005400 	.word	0x40005400
 800056c:	40005800 	.word	0x40005800

08000570 <USER_OLED_Command_1_Byte>:

#include "OLED.h"
#include "I2C.h"

void USER_OLED_Command_1_Byte( uint8_t I2C, uint8_t data )
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Start( I2C );
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fef6 	bl	8000374 <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2200      	movs	r2, #0
 800058c:	2178      	movs	r1, #120	; 0x78
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff20 	bl	80003d4 <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x00 );				// Control function for a command
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ff7d 	bl	8000498 <USER_I2C_Data>
  USER_I2C_Data( I2C, data );
 800059e:	79ba      	ldrb	r2, [r7, #6]
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	4611      	mov	r1, r2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ff77 	bl	8000498 <USER_I2C_Data>

  USER_I2C_Stop( I2C );
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ffad 	bl	800050c <USER_I2C_Stop>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <USER_OLED_Command_2_Byte>:

void USER_OLED_Command_2_Byte( uint8_t I2C, uint8_t data[] )
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b084      	sub	sp, #16
 80005be:	af00      	add	r7, sp, #0
 80005c0:	4603      	mov	r3, r0
 80005c2:	6039      	str	r1, [r7, #0]
 80005c4:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]

  USER_I2C_Start( I2C );
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff fed1 	bl	8000374 <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2200      	movs	r2, #0
 80005d6:	2178      	movs	r1, #120	; 0x78
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fefb 	bl	80003d4 <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x00 );	// Control function for a command
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff58 	bl	8000498 <USER_I2C_Data>
  for(i = 0; i < 2; i++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e00b      	b.n	8000606 <USER_OLED_Command_2_Byte+0x4c>
  {
      USER_I2C_Data( I2C, data[i] );
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	781a      	ldrb	r2, [r3, #0]
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff4c 	bl	8000498 <USER_I2C_Data>
  for(i = 0; i < 2; i++)
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	3301      	adds	r3, #1
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d9f0      	bls.n	80005ee <USER_OLED_Command_2_Byte+0x34>
  }

  USER_I2C_Stop( I2C );
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff7c 	bl	800050c <USER_I2C_Stop>
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <USER_OLED_Init>:

void USER_OLED_Init( uint8_t I2C, uint8_t screen_size )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	460a      	mov	r2, r1
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	4613      	mov	r3, r2
 800062a:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Init( I2C, I2C_FM );
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	212d      	movs	r1, #45	; 0x2d
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fe25 	bl	8000280 <USER_I2C_Init>

  uint8_t cmd_1[] = {0xA8, 0x3F};
 8000636:	f643 73a8 	movw	r3, #16296	; 0x3fa8
 800063a:	84bb      	strh	r3, [r7, #36]	; 0x24
  USER_OLED_Command_2_Byte( I2C, cmd_1 );
 800063c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	4611      	mov	r1, r2
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ffb8 	bl	80005ba <USER_OLED_Command_2_Byte>

  uint8_t cmd_2[] = {0xD3, 0x00};
 800064a:	23d3      	movs	r3, #211	; 0xd3
 800064c:	843b      	strh	r3, [r7, #32]
  USER_OLED_Command_2_Byte( I2C, cmd_2 );
 800064e:	f107 0220 	add.w	r2, r7, #32
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffaf 	bl	80005ba <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0x40 );
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2140      	movs	r1, #64	; 0x40
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff85 	bl	8000570 <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xA1 );
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	21a1      	movs	r1, #161	; 0xa1
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff80 	bl	8000570 <USER_OLED_Command_1_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xC8 );
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	21c8      	movs	r1, #200	; 0xc8
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff7b 	bl	8000570 <USER_OLED_Command_1_Byte>

  uint8_t cmd_3[] = {0xDA, screen_size};
 800067a:	23da      	movs	r3, #218	; 0xda
 800067c:	773b      	strb	r3, [r7, #28]
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	777b      	strb	r3, [r7, #29]
  USER_OLED_Command_2_Byte( I2C, cmd_3 );
 8000682:	f107 021c 	add.w	r2, r7, #28
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4611      	mov	r1, r2
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff95 	bl	80005ba <USER_OLED_Command_2_Byte>

  uint8_t cmd_4[] = {0x81, 0x7F};
 8000690:	f647 7381 	movw	r3, #32641	; 0x7f81
 8000694:	833b      	strh	r3, [r7, #24]
  USER_OLED_Command_2_Byte( I2C, cmd_4 );
 8000696:	f107 0218 	add.w	r2, r7, #24
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff8b 	bl	80005ba <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xA4 );
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	21a4      	movs	r1, #164	; 0xa4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff61 	bl	8000570 <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xA6 );
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	21a6      	movs	r1, #166	; 0xa6
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff5c 	bl	8000570 <USER_OLED_Command_1_Byte>

  uint8_t cmd_5[] = {0xD5, 0x80};
 80006b8:	f248 03d5 	movw	r3, #32981	; 0x80d5
 80006bc:	82bb      	strh	r3, [r7, #20]
  USER_OLED_Command_2_Byte( I2C, cmd_5 );
 80006be:	f107 0214 	add.w	r2, r7, #20
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff77 	bl	80005ba <USER_OLED_Command_2_Byte>

  uint8_t cmd_6[] = {0x8D, 0x14};
 80006cc:	f241 438d 	movw	r3, #5261	; 0x148d
 80006d0:	823b      	strh	r3, [r7, #16]
  USER_OLED_Command_2_Byte( I2C, cmd_6 );
 80006d2:	f107 0210 	add.w	r2, r7, #16
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4611      	mov	r1, r2
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff6d 	bl	80005ba <USER_OLED_Command_2_Byte>

  USER_OLED_Command_1_Byte( I2C, 0xAF );
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	21af      	movs	r1, #175	; 0xaf
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff43 	bl	8000570 <USER_OLED_Command_1_Byte>

  uint8_t cmd_7[] = {0x20, 0x10};
 80006ea:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80006ee:	81bb      	strh	r3, [r7, #12]
  USER_OLED_Command_2_Byte( I2C, cmd_7 );
 80006f0:	f107 020c 	add.w	r2, r7, #12
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff5e 	bl	80005ba <USER_OLED_Command_2_Byte>
}
 80006fe:	bf00      	nop
 8000700:	3728      	adds	r7, #40	; 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <USER_OLED_Init_64>:
{
  USER_OLED_Init(I2C, 0x22);
}

void USER_OLED_Init_64( uint8_t I2C )
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	71fb      	strb	r3, [r7, #7]
  USER_OLED_Init(I2C, 0x12);
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2112      	movs	r1, #18
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff81 	bl	800061c <USER_OLED_Init>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <USER_OLED_Data>:

void USER_OLED_Data( uint8_t I2C, uint8_t data )
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	4603      	mov	r3, r0
 800072a:	460a      	mov	r2, r1
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	4613      	mov	r3, r2
 8000730:	71bb      	strb	r3, [r7, #6]
  USER_I2C_Start( I2C );
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fe1d 	bl	8000374 <USER_I2C_Start>
  USER_I2C_Address( I2C, OLED_PRIMARY_ADDRESS, 0 );
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2200      	movs	r2, #0
 800073e:	2178      	movs	r1, #120	; 0x78
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fe47 	bl	80003d4 <USER_I2C_Address>

  USER_I2C_Data( I2C, 0x40 );				// Control function for data
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2140      	movs	r1, #64	; 0x40
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fea4 	bl	8000498 <USER_I2C_Data>
  USER_I2C_Data( I2C, data );
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fe9e 	bl	8000498 <USER_I2C_Data>

  USER_I2C_Stop( I2C );
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fed4 	bl	800050c <USER_I2C_Stop>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <USER_OLED_Position>:

void USER_OLED_Position( uint8_t I2C, uint8_t x_pos, uint8_t y_pos )
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
 8000776:	460b      	mov	r3, r1
 8000778:	71bb      	strb	r3, [r7, #6]
 800077a:	4613      	mov	r3, r2
 800077c:	717b      	strb	r3, [r7, #5]
  USER_OLED_Command_1_Byte( I2C, 0x00 + ( 0x0F & x_pos ) );
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	f003 030f 	and.w	r3, r3, #15
 8000784:	b2da      	uxtb	r2, r3
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fef0 	bl	8000570 <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0x10 + (0x0F & ( x_pos >> 4 ) ) );
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	091b      	lsrs	r3, r3, #4
 8000794:	b2db      	uxtb	r3, r3
 8000796:	3310      	adds	r3, #16
 8000798:	b2da      	uxtb	r2, r3
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fee6 	bl	8000570 <USER_OLED_Command_1_Byte>
  USER_OLED_Command_1_Byte( I2C, 0xB0 + y_pos );
 80007a4:	797b      	ldrb	r3, [r7, #5]
 80007a6:	3b50      	subs	r3, #80	; 0x50
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	4611      	mov	r1, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fede 	bl	8000570 <USER_OLED_Command_1_Byte>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <USER_OLED_Blank>:


void USER_OLED_Blank( uint8_t I2C )
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j;

  USER_OLED_Position( I2C, 0, 0 );
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ffcd 	bl	800076c <USER_OLED_Position>

  for(i = 0; i < OLED_SCREEN_ROWS; i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	e011      	b.n	80007fc <USER_OLED_Blank+0x40>
  {
    for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 80007d8:	2300      	movs	r3, #0
 80007da:	73bb      	strb	r3, [r7, #14]
 80007dc:	e007      	b.n	80007ee <USER_OLED_Blank+0x32>
    {
	USER_OLED_Data( I2C, 0x0 );
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff9d 	bl	8000722 <USER_OLED_Data>
    for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73bb      	strb	r3, [r7, #14]
 80007ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	daf3      	bge.n	80007de <USER_OLED_Blank+0x22>
  for(i = 0; i < OLED_SCREEN_ROWS; i++)
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	3301      	adds	r3, #1
 80007fa:	73fb      	strb	r3, [r7, #15]
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	2b07      	cmp	r3, #7
 8000800:	d9ea      	bls.n	80007d8 <USER_OLED_Blank+0x1c>
    }
  }
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <USER_OLED_Print>:

void USER_OLED_Print( uint8_t I2C, char str[] )
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0, j;
 8000818:	2300      	movs	r3, #0
 800081a:	73fb      	strb	r3, [r7, #15]

  while( str[i] )
 800081c:	e01e      	b.n	800085c <USER_OLED_Print+0x50>
  {
      for(j = 0; j < 5; j++)
 800081e:	2300      	movs	r3, #0
 8000820:	73bb      	strb	r3, [r7, #14]
 8000822:	e015      	b.n	8000850 <USER_OLED_Print+0x44>
      {
	   USER_OLED_Data(I2C, ASCII[str[i] - 32][j]);
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	4413      	add	r3, r2
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	f1a3 0220 	sub.w	r2, r3, #32
 8000830:	7bb9      	ldrb	r1, [r7, #14]
 8000832:	4810      	ldr	r0, [pc, #64]	; (8000874 <USER_OLED_Print+0x68>)
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	4403      	add	r3, r0
 800083c:	440b      	add	r3, r1
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff6c 	bl	8000722 <USER_OLED_Data>
      for(j = 0; j < 5; j++)
 800084a:	7bbb      	ldrb	r3, [r7, #14]
 800084c:	3301      	adds	r3, #1
 800084e:	73bb      	strb	r3, [r7, #14]
 8000850:	7bbb      	ldrb	r3, [r7, #14]
 8000852:	2b04      	cmp	r3, #4
 8000854:	d9e6      	bls.n	8000824 <USER_OLED_Print+0x18>
      }

      i++;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	3301      	adds	r3, #1
 800085a:	73fb      	strb	r3, [r7, #15]
  while( str[i] )
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1da      	bne.n	800081e <USER_OLED_Print+0x12>
  }
}
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	08001300 	.word	0x08001300

08000878 <USER_OLED_Message>:

void USER_OLED_Message( uint8_t I2C, char str[], uint8_t x_pos, uint8_t y_pos )
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6039      	str	r1, [r7, #0]
 8000880:	4611      	mov	r1, r2
 8000882:	461a      	mov	r2, r3
 8000884:	4603      	mov	r3, r0
 8000886:	71fb      	strb	r3, [r7, #7]
 8000888:	460b      	mov	r3, r1
 800088a:	71bb      	strb	r3, [r7, #6]
 800088c:	4613      	mov	r3, r2
 800088e:	717b      	strb	r3, [r7, #5]
  USER_OLED_Position(I2C, x_pos, y_pos);
 8000890:	797a      	ldrb	r2, [r7, #5]
 8000892:	79b9      	ldrb	r1, [r7, #6]
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff68 	bl	800076c <USER_OLED_Position>
  USER_OLED_Print(I2C, str);
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	6839      	ldr	r1, [r7, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ffb3 	bl	800080c <USER_OLED_Print>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <USER_OLED_Clear_Buffer>:

void USER_OLED_Clear_Buffer( char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 80008ae:	b480      	push	{r7}
 80008b0:	b085      	sub	sp, #20
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
  uint8_t i, j;

  for(i = 0; i < OLED_SCREEN_ROWS; i++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	e013      	b.n	80008e4 <USER_OLED_Clear_Buffer+0x36>
  {
      for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 80008bc:	2300      	movs	r3, #0
 80008be:	73bb      	strb	r3, [r7, #14]
 80008c0:	e009      	b.n	80008d6 <USER_OLED_Clear_Buffer+0x28>
      {
	  screen_buffer[i][j] = 0;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	01db      	lsls	r3, r3, #7
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	441a      	add	r2, r3
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	2100      	movs	r1, #0
 80008ce:	54d1      	strb	r1, [r2, r3]
      for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 80008d0:	7bbb      	ldrb	r3, [r7, #14]
 80008d2:	3301      	adds	r3, #1
 80008d4:	73bb      	strb	r3, [r7, #14]
 80008d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	daf1      	bge.n	80008c2 <USER_OLED_Clear_Buffer+0x14>
  for(i = 0; i < OLED_SCREEN_ROWS; i++)
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	3301      	adds	r3, #1
 80008e2:	73fb      	strb	r3, [r7, #15]
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	2b07      	cmp	r3, #7
 80008e8:	d9e8      	bls.n	80008bc <USER_OLED_Clear_Buffer+0xe>
      }
  }
}
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <USER_OLED_Update_Buffer>:

void USER_OLED_Update_Buffer( ImgType img, uint8_t img_num, char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 80008f6:	b084      	sub	sp, #16
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	f107 0c18 	add.w	ip, r7, #24
 8000902:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint16_t x_dir, y_dir, end_x, end_y, cnt = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	80fb      	strh	r3, [r7, #6]

  if( ( img.width + img.x_pos ) > OLED_SCREEN_COLUMNS )
 800090a:	7e7b      	ldrb	r3, [r7, #25]
 800090c:	461a      	mov	r2, r3
 800090e:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 8000912:	4413      	add	r3, r2
 8000914:	2b80      	cmp	r3, #128	; 0x80
 8000916:	dd02      	ble.n	800091e <USER_OLED_Update_Buffer+0x28>
  {
      end_x = OLED_SCREEN_COLUMNS - 1;
 8000918:	237f      	movs	r3, #127	; 0x7f
 800091a:	817b      	strh	r3, [r7, #10]
 800091c:	e009      	b.n	8000932 <USER_OLED_Update_Buffer+0x3c>
  }
  else
  {
      end_x = img.width + img.x_pos - 1;
 800091e:	7e7b      	ldrb	r3, [r7, #25]
 8000920:	b21a      	sxth	r2, r3
 8000922:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 8000926:	b21b      	sxth	r3, r3
 8000928:	4413      	add	r3, r2
 800092a:	b21b      	sxth	r3, r3
 800092c:	b29b      	uxth	r3, r3
 800092e:	3b01      	subs	r3, #1
 8000930:	817b      	strh	r3, [r7, #10]
  }

  if( ( img.height + img.y_pos ) > OLED_SCREEN_ROWS )
 8000932:	7e3b      	ldrb	r3, [r7, #24]
 8000934:	461a      	mov	r2, r3
 8000936:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 800093a:	4413      	add	r3, r2
 800093c:	2b08      	cmp	r3, #8
 800093e:	dd02      	ble.n	8000946 <USER_OLED_Update_Buffer+0x50>
  {
      end_y = OLED_SCREEN_ROWS - 1;
 8000940:	2307      	movs	r3, #7
 8000942:	813b      	strh	r3, [r7, #8]
 8000944:	e009      	b.n	800095a <USER_OLED_Update_Buffer+0x64>
  }
  else
  {
      end_y = img.height + img.y_pos - 1;
 8000946:	7e3b      	ldrb	r3, [r7, #24]
 8000948:	b21a      	sxth	r2, r3
 800094a:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 800094e:	b21b      	sxth	r3, r3
 8000950:	4413      	add	r3, r2
 8000952:	b21b      	sxth	r3, r3
 8000954:	b29b      	uxth	r3, r3
 8000956:	3b01      	subs	r3, #1
 8000958:	813b      	strh	r3, [r7, #8]
  }

  for(y_dir = img.y_pos; y_dir <= end_y; y_dir++)
 800095a:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 800095e:	81bb      	strh	r3, [r7, #12]
 8000960:	e02f      	b.n	80009c2 <USER_OLED_Update_Buffer+0xcc>
  {
    for (x_dir= img.x_pos; x_dir <= end_x; x_dir++)
 8000962:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 8000966:	81fb      	strh	r3, [r7, #14]
 8000968:	e024      	b.n	80009b4 <USER_OLED_Update_Buffer+0xbe>
    {
      cnt =( y_dir - img.y_pos ) * img.width + x_dir - img.x_pos;
 800096a:	89bb      	ldrh	r3, [r7, #12]
 800096c:	f997 2095 	ldrsb.w	r2, [r7, #149]	; 0x95
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	b29b      	uxth	r3, r3
 8000974:	7e7a      	ldrb	r2, [r7, #25]
 8000976:	b292      	uxth	r2, r2
 8000978:	fb02 f303 	mul.w	r3, r2, r3
 800097c:	b29a      	uxth	r2, r3
 800097e:	89fb      	ldrh	r3, [r7, #14]
 8000980:	4413      	add	r3, r2
 8000982:	b29a      	uxth	r2, r3
 8000984:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 8000988:	b29b      	uxth	r3, r3
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	80fb      	strh	r3, [r7, #6]
      screen_buffer[y_dir][x_dir] = img.image[img_num][cnt];
 800098e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	3318      	adds	r3, #24
 8000996:	443b      	add	r3, r7
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	18d1      	adds	r1, r2, r3
 800099e:	89bb      	ldrh	r3, [r7, #12]
 80009a0:	01db      	lsls	r3, r3, #7
 80009a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80009a6:	441a      	add	r2, r3
 80009a8:	89fb      	ldrh	r3, [r7, #14]
 80009aa:	7809      	ldrb	r1, [r1, #0]
 80009ac:	54d1      	strb	r1, [r2, r3]
    for (x_dir= img.x_pos; x_dir <= end_x; x_dir++)
 80009ae:	89fb      	ldrh	r3, [r7, #14]
 80009b0:	3301      	adds	r3, #1
 80009b2:	81fb      	strh	r3, [r7, #14]
 80009b4:	89fa      	ldrh	r2, [r7, #14]
 80009b6:	897b      	ldrh	r3, [r7, #10]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d9d6      	bls.n	800096a <USER_OLED_Update_Buffer+0x74>
  for(y_dir = img.y_pos; y_dir <= end_y; y_dir++)
 80009bc:	89bb      	ldrh	r3, [r7, #12]
 80009be:	3301      	adds	r3, #1
 80009c0:	81bb      	strh	r3, [r7, #12]
 80009c2:	89ba      	ldrh	r2, [r7, #12]
 80009c4:	893b      	ldrh	r3, [r7, #8]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d9cb      	bls.n	8000962 <USER_OLED_Update_Buffer+0x6c>
    }
  }
}
 80009ca:	bf00      	nop
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	b004      	add	sp, #16
 80009d6:	4770      	bx	lr

080009d8 <USER_OLED_Print_Buffer>:
    i++;
  }
}

void USER_OLED_Print_Buffer( uint8_t I2C, char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  USER_OLED_Position( I2C, 0, 0 );
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff febe 	bl	800076c <USER_OLED_Position>

  uint8_t i, j;

  for (i = 0; i < OLED_SCREEN_ROWS; i++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	e017      	b.n	8000a26 <USER_OLED_Print_Buffer+0x4e>
  {
    for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	73bb      	strb	r3, [r7, #14]
 80009fa:	e00d      	b.n	8000a18 <USER_OLED_Print_Buffer+0x40>
    {
	USER_OLED_Data( I2C, screen_buffer[i][j] );
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	01db      	lsls	r3, r3, #7
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	441a      	add	r2, r3
 8000a04:	7bbb      	ldrb	r3, [r7, #14]
 8000a06:	5cd2      	ldrb	r2, [r2, r3]
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fe88 	bl	8000722 <USER_OLED_Data>
    for(j = 0; j < OLED_SCREEN_COLUMNS; j++)
 8000a12:	7bbb      	ldrb	r3, [r7, #14]
 8000a14:	3301      	adds	r3, #1
 8000a16:	73bb      	strb	r3, [r7, #14]
 8000a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	daed      	bge.n	80009fc <USER_OLED_Print_Buffer+0x24>
  for (i = 0; i < OLED_SCREEN_ROWS; i++)
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	3301      	adds	r3, #1
 8000a24:	73fb      	strb	r3, [r7, #15]
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	2b07      	cmp	r3, #7
 8000a2a:	d9e4      	bls.n	80009f6 <USER_OLED_Print_Buffer+0x1e>
    }
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <USER_OLED_Update_Buffer_Bit>:

void USER_OLED_Update_Buffer_Bit( ImgType img, uint8_t img_num, char screen_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS] )
{
 8000a36:	b084      	sub	sp, #16
 8000a38:	b480      	push	{r7}
 8000a3a:	b091      	sub	sp, #68	; 0x44
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8000a42:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int start_x, end_x, start_img_x, y_offset, bit_y_pos_byte, start_y, end_y, x_dir, y_dir,
  buffer_height = OLED_SCREEN_ROWS, buffer_width = OLED_SCREEN_COLUMNS, start_img_byte, start_img_x_tmp,
 8000a46:	2308      	movs	r3, #8
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	60fb      	str	r3, [r7, #12]

  // Working on the X axe

  // Find end_x

  if(img.x_pos > buffer_width)
 8000a4e:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4293      	cmp	r3, r2
 8000a58:	da02      	bge.n	8000a60 <USER_OLED_Update_Buffer_Bit+0x2a>
  {
    end_x = buffer_width;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a5e:	e009      	b.n	8000a74 <USER_OLED_Update_Buffer_Bit+0x3e>
  }
  else if(img.x_pos < 1)
 8000a60:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	dc02      	bgt.n	8000a6e <USER_OLED_Update_Buffer_Bit+0x38>
  {
    end_x = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a6c:	e002      	b.n	8000a74 <USER_OLED_Update_Buffer_Bit+0x3e>
  }
  else
  {
    end_x = img.x_pos;
 8000a6e:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 8000a72:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  // Find start_x

  start_x = img.x_pos - img.width;
 8000a74:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 8000a78:	461a      	mov	r2, r3
 8000a7a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	63fb      	str	r3, [r7, #60]	; 0x3c

  if(start_x > buffer_width)
 8000a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	dd02      	ble.n	8000a90 <USER_OLED_Update_Buffer_Bit+0x5a>
  {
    start_x = buffer_width;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a8e:	e004      	b.n	8000a9a <USER_OLED_Update_Buffer_Bit+0x64>
  }
  else if(start_x < 0)
 8000a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	da01      	bge.n	8000a9a <USER_OLED_Update_Buffer_Bit+0x64>
  {
    start_x = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  // Starting the picture x_location to start from

  start_img_x = img.width - img.x_pos;
 8000a9a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	f997 30c4 	ldrsb.w	r3, [r7, #196]	; 0xc4
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34

  if(start_img_x < 0)
 8000aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	da01      	bge.n	8000ab2 <USER_OLED_Update_Buffer_Bit+0x7c>
  {
      start_img_x = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Working on the Y axe

  y_offset = img.bit_y_pos % 8;
 8000ab2:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8000ab6:	425a      	negs	r2, r3
 8000ab8:	f003 0307 	and.w	r3, r3, #7
 8000abc:	f002 0207 	and.w	r2, r2, #7
 8000ac0:	bf58      	it	pl
 8000ac2:	4253      	negpl	r3, r2
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	60bb      	str	r3, [r7, #8]
  bit_y_pos_byte = img.bit_y_pos / 8;
 8000ac8:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	da00      	bge.n	8000ad2 <USER_OLED_Update_Buffer_Bit+0x9c>
 8000ad0:	3307      	adds	r3, #7
 8000ad2:	10db      	asrs	r3, r3, #3
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30

  if(bit_y_pos_byte > buffer_height)
 8000ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dd01      	ble.n	8000ae4 <USER_OLED_Update_Buffer_Bit+0xae>
  {
      bit_y_pos_byte = buffer_height;
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
  }

  // Find end_y

  end_y = buffer_height - bit_y_pos_byte + 1;
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	3301      	adds	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(end_y < 0)
 8000aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	da02      	bge.n	8000afa <USER_OLED_Update_Buffer_Bit+0xc4>
  {
    end_y = buffer_height;
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000af8:	e002      	b.n	8000b00 <USER_OLED_Update_Buffer_Bit+0xca>
  }
  else
  {
    end_y = bit_y_pos_byte + 1;
 8000afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000afc:	3301      	adds	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  // Find start_y

  start_y = img.bit_y_pos / 8 - img.height;
 8000b00:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	da00      	bge.n	8000b0a <USER_OLED_Update_Buffer_Bit+0xd4>
 8000b08:	3307      	adds	r3, #7
 8000b0a:	10db      	asrs	r3, r3, #3
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c

  if(start_y > buffer_height)
 8000b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dd02      	ble.n	8000b26 <USER_OLED_Update_Buffer_Bit+0xf0>
  {
    start_y = buffer_height;
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b24:	e004      	b.n	8000b30 <USER_OLED_Update_Buffer_Bit+0xfa>
  }
  else if(start_y < 0)
 8000b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	da01      	bge.n	8000b30 <USER_OLED_Update_Buffer_Bit+0xfa>
  {
    start_y = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  // Starting the picture y_location to start form

  start_img_byte = img.height - bit_y_pos_byte - 1;
 8000b30:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000b34:	461a      	mov	r2, r3
 8000b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	61fb      	str	r3, [r7, #28]

  if(start_img_byte < 0)
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	da02      	bge.n	8000b4a <USER_OLED_Update_Buffer_Bit+0x114>
  {
    start_img_byte = -1;
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	61fb      	str	r3, [r7, #28]
  }

  // Running the display

  for(y_dir = start_y; y_dir < end_y; y_dir++)
 8000b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4c:	623b      	str	r3, [r7, #32]
 8000b4e:	e094      	b.n	8000c7a <USER_OLED_Update_Buffer_Bit+0x244>
  {
    start_img_x_tmp = start_img_x;
 8000b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b52:	61bb      	str	r3, [r7, #24]

    for(x_dir = start_x; x_dir < end_x; x_dir++)
 8000b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
 8000b58:	e084      	b.n	8000c64 <USER_OLED_Update_Buffer_Bit+0x22e>
    {
      if(start_img_byte == -1)
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	d102      	bne.n	8000b68 <USER_OLED_Update_Buffer_Bit+0x132>
      {
	cnt_1 = start_img_x;
 8000b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e008      	b.n	8000b7a <USER_OLED_Update_Buffer_Bit+0x144>
      }
      else
      {
	cnt_1 = (start_img_byte) * img.width + start_img_x_tmp;
 8000b68:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	fb02 f303 	mul.w	r3, r2, r3
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	4413      	add	r3, r2
 8000b78:	617b      	str	r3, [r7, #20]
      }

      cnt_2 = (start_img_byte + 1) * img.width + start_img_x_tmp;
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8000b82:	fb02 f303 	mul.w	r3, r2, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4413      	add	r3, r2
 8000b8a:	607b      	str	r3, [r7, #4]
      start_img_x_tmp++;
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	61bb      	str	r3, [r7, #24]

      // Start drawing

      if(start_img_byte == -1)
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d117      	bne.n	8000bca <USER_OLED_Update_Buffer_Bit+0x194>
      {
	// Beginning of the picture

	screen_buffer[y_dir][x_dir] = ( img.image[img_num][cnt_2] << ( y_offset ) );
 8000b9a:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	3348      	adds	r3, #72	; 0x48
 8000ba2:	443b      	add	r3, r7
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	fa02 f103 	lsl.w	r1, r2, r3
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
 8000bb6:	01db      	lsls	r3, r3, #7
 8000bb8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000bbc:	441a      	add	r2, r3
 8000bbe:	b2c9      	uxtb	r1, r1
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc2:	4413      	add	r3, r2
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	e049      	b.n	8000c5e <USER_OLED_Update_Buffer_Bit+0x228>
      }
      else if(start_img_byte < img.height - 1)
 8000bca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	69fa      	ldr	r2, [r7, #28]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	da2a      	bge.n	8000c2c <USER_OLED_Update_Buffer_Bit+0x1f6>
      {
	  // Inside of the picture

	  screen_buffer[y_dir][x_dir] = ( img.image[img_num][cnt_2] << ( y_offset ) ) | ( img.image[img_num][cnt_1] >> ( 8-y_offset ) );
 8000bd6:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	3348      	adds	r3, #72	; 0x48
 8000bde:	443b      	add	r3, r7
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	b25a      	sxtb	r2, r3
 8000bf2:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	3348      	adds	r3, #72	; 0x48
 8000bfa:	443b      	add	r3, r7
 8000bfc:	6859      	ldr	r1, [r3, #4]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	440b      	add	r3, r1
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	f1c3 0308 	rsb	r3, r3, #8
 8000c0c:	fa41 f303 	asr.w	r3, r1, r3
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b259      	sxtb	r1, r3
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	01db      	lsls	r3, r3, #7
 8000c1a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000c1e:	441a      	add	r2, r3
 8000c20:	b2c9      	uxtb	r1, r1
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	4413      	add	r3, r2
 8000c26:	460a      	mov	r2, r1
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e018      	b.n	8000c5e <USER_OLED_Update_Buffer_Bit+0x228>
      }
      else
      {
	  screen_buffer[y_dir][x_dir] = ( img.image[img_num][cnt_1] >> ( 8 - y_offset ) );
 8000c2c:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	3348      	adds	r3, #72	; 0x48
 8000c34:	443b      	add	r3, r7
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	f1c3 0308 	rsb	r3, r3, #8
 8000c46:	fa42 f103 	asr.w	r1, r2, r3
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	01db      	lsls	r3, r3, #7
 8000c4e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000c52:	441a      	add	r2, r3
 8000c54:	b2c9      	uxtb	r1, r1
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	4413      	add	r3, r2
 8000c5a:	460a      	mov	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
    for(x_dir = start_x; x_dir < end_x; x_dir++)
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	3301      	adds	r3, #1
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
 8000c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	f6ff af76 	blt.w	8000b5a <USER_OLED_Update_Buffer_Bit+0x124>
      }
    }

    start_img_byte++;
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3301      	adds	r3, #1
 8000c72:	61fb      	str	r3, [r7, #28]
  for(y_dir = start_y; y_dir < end_y; y_dir++)
 8000c74:	6a3b      	ldr	r3, [r7, #32]
 8000c76:	3301      	adds	r3, #1
 8000c78:	623b      	str	r3, [r7, #32]
 8000c7a:	6a3a      	ldr	r2, [r7, #32]
 8000c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	f6ff af66 	blt.w	8000b50 <USER_OLED_Update_Buffer_Bit+0x11a>
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3744      	adds	r7, #68	; 0x44
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	b004      	add	sp, #16
 8000c90:	4770      	bx	lr
	...

08000c94 <USER_SYSTICK_Init>:

#include "main.h"
#include "SYSTICK.h"

void USER_SYSTICK_Init( void )
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
    SYSTICK->CTRL	= 0;				// Clear register
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <USER_SYSTICK_Init+0x38>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
    SYSTICK->LOAD	= 0x00FFFFFF;			// Max start value
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <USER_SYSTICK_Init+0x38>)
 8000ca0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000ca4:	605a      	str	r2, [r3, #4]
    SYSTICK->VAL	= 0;				// Clear register
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <USER_SYSTICK_Init+0x38>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]

    SYSTICK->CTRL	|=	SYSTICK_CTRL_CLKSOURCE;	// Clock source is processor clock (AHB)
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <USER_SYSTICK_Init+0x38>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <USER_SYSTICK_Init+0x38>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	6013      	str	r3, [r2, #0]
    SYSTICK->CTRL	|=	SYSTICK_CTRL_ENABLE;	// Counter enabled
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <USER_SYSTICK_Init+0x38>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a03      	ldr	r2, [pc, #12]	; (8000ccc <USER_SYSTICK_Init+0x38>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <USER_SYSTICK_Delay_Millis>:

void USER_SYSTICK_Delay_Millis( void )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  SYSTICK->LOAD		=	0x11940;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <USER_SYSTICK_Delay_Millis+0x28>)
 8000cd6:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <USER_SYSTICK_Delay_Millis+0x2c>)
 8000cd8:	605a      	str	r2, [r3, #4]
  SYSTICK->VAL		=	0;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <USER_SYSTICK_Delay_Millis+0x28>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG));	// Returns 1 if timer counted to 0 since last time this was read
 8000ce0:	bf00      	nop
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <USER_SYSTICK_Delay_Millis+0x28>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f9      	beq.n	8000ce2 <USER_SYSTICK_Delay_Millis+0x12>
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e010 	.word	0xe000e010
 8000cfc:	00011940 	.word	0x00011940

08000d00 <USER_SYSTICK_Delay_ms>:

void USER_SYSTICK_Delay_ms( uint32_t t )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  for(; t > 0; t--)
 8000d08:	e004      	b.n	8000d14 <USER_SYSTICK_Delay_ms+0x14>
  {
      USER_SYSTICK_Delay_Millis();
 8000d0a:	f7ff ffe1 	bl	8000cd0 <USER_SYSTICK_Delay_Millis>
  for(; t > 0; t--)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f7      	bne.n	8000d0a <USER_SYSTICK_Delay_ms+0xa>
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <main>:

char oled_buffer[OLED_SCREEN_ROWS][OLED_SCREEN_COLUMNS];
uint8_t i, j;

int main( void )
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 8000d2a:	af1e      	add	r7, sp, #120	; 0x78
  ImgType JOHN_DEERE_LOGO_PIC = { .height = JOHN_DEERE_LOGO_ROWS, .width = JOHN_DEERE_LOGO_COLS, .x_pos = 0, .y_pos = 0, .bit_y_pos = 0 };
 8000d2c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fa8e 	bl	8001256 <memset>
 8000d3a:	4bd3      	ldr	r3, [pc, #844]	; (8001088 <main+0x364>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	f887 3300 	strb.w	r3, [r7, #768]	; 0x300
 8000d42:	4bd2      	ldr	r3, [pc, #840]	; (800108c <main+0x368>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	f887 3301 	strb.w	r3, [r7, #769]	; 0x301
  JOHN_DEERE_LOGO_PIC.image[0] = JOHN_DEERE_LOGO;
 8000d4a:	4bd1      	ldr	r3, [pc, #836]	; (8001090 <main+0x36c>)
 8000d4c:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304

  ImgType JOHN_DEERE_LOGO_PIC_NO_TEXT = { .height = JOHN_DEERE_LOGO_NO_TEXT_ROWS, .width = JOHN_DEERE_LOGO_NO_TEXT_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 8000d50:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000d54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d58:	4618      	mov	r0, r3
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f000 fa79 	bl	8001256 <memset>
 8000d64:	4bcb      	ldr	r3, [pc, #812]	; (8001094 <main+0x370>)
 8000d66:	781a      	ldrb	r2, [r3, #0]
 8000d68:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000d6c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	4bc9      	ldr	r3, [pc, #804]	; (8001098 <main+0x374>)
 8000d74:	781a      	ldrb	r2, [r3, #0]
 8000d76:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000d7a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d7e:	705a      	strb	r2, [r3, #1]
 8000d80:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000d84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d88:	2220      	movs	r2, #32
 8000d8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  JOHN_DEERE_LOGO_PIC_NO_TEXT.image[0] = JOHN_DEERE_LOGO_NO_TEXT;
 8000d8e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000d92:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d96:	4ac1      	ldr	r2, [pc, #772]	; (800109c <main+0x378>)
 8000d98:	605a      	str	r2, [r3, #4]

  ImgType ITESM_LOGO_PIC = { .height = ITESM_LOGO_ROWS, .width = ITESM_LOGO_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 8000d9a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000d9e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000da2:	4618      	mov	r0, r3
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	461a      	mov	r2, r3
 8000da8:	2100      	movs	r1, #0
 8000daa:	f000 fa54 	bl	8001256 <memset>
 8000dae:	4bbc      	ldr	r3, [pc, #752]	; (80010a0 <main+0x37c>)
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000db6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	4bb9      	ldr	r3, [pc, #740]	; (80010a4 <main+0x380>)
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000dc4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000dc8:	705a      	strb	r2, [r3, #1]
 8000dca:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000dce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  ITESM_LOGO_PIC.image[0] = ITESM_LOGO;
 8000dd8:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000ddc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000de0:	4ab1      	ldr	r2, [pc, #708]	; (80010a8 <main+0x384>)
 8000de2:	605a      	str	r2, [r3, #4]

  ImgType RASPBERRY_PI_LOGO_PIC = { .height = RASPBERRY_PI_LOGO_ROWS, .width = RASPBERRY_PI_LOGO_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 8000de4:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000de8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000dec:	4618      	mov	r0, r3
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	461a      	mov	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f000 fa2f 	bl	8001256 <memset>
 8000df8:	4bac      	ldr	r3, [pc, #688]	; (80010ac <main+0x388>)
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000e00:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	4baa      	ldr	r3, [pc, #680]	; (80010b0 <main+0x38c>)
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000e0e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000e12:	705a      	strb	r2, [r3, #1]
 8000e14:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000e18:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000e1c:	2220      	movs	r2, #32
 8000e1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  RASPBERRY_PI_LOGO_PIC.image[0] = RASPBERRY_PI_LOGO;
 8000e22:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000e26:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000e2a:	4aa2      	ldr	r2, [pc, #648]	; (80010b4 <main+0x390>)
 8000e2c:	605a      	str	r2, [r3, #4]

  ImgType LINUX_LOGO_PIC = { .height = LINUX_LOGO_ROWS, .width = LINUX_LOGO_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 8000e2e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000e32:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000e36:	4618      	mov	r0, r3
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f000 fa0a 	bl	8001256 <memset>
 8000e42:	4b9d      	ldr	r3, [pc, #628]	; (80010b8 <main+0x394>)
 8000e44:	781a      	ldrb	r2, [r3, #0]
 8000e46:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000e4a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	4b9a      	ldr	r3, [pc, #616]	; (80010bc <main+0x398>)
 8000e52:	781a      	ldrb	r2, [r3, #0]
 8000e54:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000e58:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000e5c:	705a      	strb	r2, [r3, #1]
 8000e5e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000e62:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000e66:	2220      	movs	r2, #32
 8000e68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  LINUX_LOGO_PIC.image[0] = LINUX_LOGO;
 8000e6c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000e70:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000e74:	4a92      	ldr	r2, [pc, #584]	; (80010c0 <main+0x39c>)
 8000e76:	605a      	str	r2, [r3, #4]

  ImgType STM32_LOGO_PIC = { .height = STM32_LOGO_ROWS, .width = STM32_LOGO_COLS, .x_pos = OLED_SCREEN_COLUMNS / 4, .y_pos = 0, .bit_y_pos = 0 };
 8000e78:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000e7c:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8000e80:	4618      	mov	r0, r3
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	461a      	mov	r2, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	f000 f9e5 	bl	8001256 <memset>
 8000e8c:	4b8d      	ldr	r3, [pc, #564]	; (80010c4 <main+0x3a0>)
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000e94:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	4b8b      	ldr	r3, [pc, #556]	; (80010c8 <main+0x3a4>)
 8000e9c:	781a      	ldrb	r2, [r3, #0]
 8000e9e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000ea2:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8000ea6:	705a      	strb	r2, [r3, #1]
 8000ea8:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000eac:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  STM32_LOGO_PIC.image[0] = STM32_LOGO;
 8000eb6:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000eba:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8000ebe:	4a83      	ldr	r2, [pc, #524]	; (80010cc <main+0x3a8>)
 8000ec0:	605a      	str	r2, [r3, #4]

  ImgType TRACTOR_PIC = { .height = TRACTOR_ROWS, .width = TRACTOR_COLS, .x_pos = 0, .y_pos = 0, .bit_y_pos = 0 };
 8000ec2:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000ec6:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000eca:	4618      	mov	r0, r3
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f000 f9c0 	bl	8001256 <memset>
 8000ed6:	4b7e      	ldr	r3, [pc, #504]	; (80010d0 <main+0x3ac>)
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000ede:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	4b7b      	ldr	r3, [pc, #492]	; (80010d4 <main+0x3b0>)
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000eec:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000ef0:	705a      	strb	r2, [r3, #1]
  TRACTOR_PIC.image[0] = TRACTOR_1;
 8000ef2:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000ef6:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000efa:	4a77      	ldr	r2, [pc, #476]	; (80010d8 <main+0x3b4>)
 8000efc:	605a      	str	r2, [r3, #4]
  TRACTOR_PIC.image[1] = TRACTOR_2;
 8000efe:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000f02:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000f06:	4a75      	ldr	r2, [pc, #468]	; (80010dc <main+0x3b8>)
 8000f08:	609a      	str	r2, [r3, #8]
  TRACTOR_PIC.image[2] = TRACTOR_3;
 8000f0a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000f0e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000f12:	4a73      	ldr	r2, [pc, #460]	; (80010e0 <main+0x3bc>)
 8000f14:	60da      	str	r2, [r3, #12]
  TRACTOR_PIC.image[3] = TRACTOR_4;
 8000f16:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000f1a:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000f1e:	4a71      	ldr	r2, [pc, #452]	; (80010e4 <main+0x3c0>)
 8000f20:	611a      	str	r2, [r3, #16]

  USER_SYSTICK_Init();
 8000f22:	f7ff feb7 	bl	8000c94 <USER_SYSTICK_Init>
  RCC->APB2ENR	|=	RCC_APB2ENR_IOPBEN;
 8000f26:	4b70      	ldr	r3, [pc, #448]	; (80010e8 <main+0x3c4>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	4a6f      	ldr	r2, [pc, #444]	; (80010e8 <main+0x3c4>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6193      	str	r3, [r2, #24]

  USER_OLED_Init_64(I2C_1);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff fbe7 	bl	8000706 <USER_OLED_Init_64>

  USER_OLED_Clear_Buffer(oled_buffer);
 8000f38:	486c      	ldr	r0, [pc, #432]	; (80010ec <main+0x3c8>)
 8000f3a:	f7ff fcb8 	bl	80008ae <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer(JOHN_DEERE_LOGO_PIC, 0, oled_buffer);
 8000f3e:	4b6b      	ldr	r3, [pc, #428]	; (80010ec <main+0x3c8>)
 8000f40:	931d      	str	r3, [sp, #116]	; 0x74
 8000f42:	2300      	movs	r3, #0
 8000f44:	931c      	str	r3, [sp, #112]	; 0x70
 8000f46:	4668      	mov	r0, sp
 8000f48:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8000f4c:	2270      	movs	r2, #112	; 0x70
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f000 f9ae 	bl	80012b0 <memcpy>
 8000f54:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8000f58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f5a:	f7ff fccc 	bl	80008f6 <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer(I2C_1, oled_buffer);
 8000f5e:	4963      	ldr	r1, [pc, #396]	; (80010ec <main+0x3c8>)
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff fd39 	bl	80009d8 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 100 );
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f7ff feca 	bl	8000d00 <USER_SYSTICK_Delay_ms>

  USER_OLED_Clear_Buffer(oled_buffer);
 8000f6c:	485f      	ldr	r0, [pc, #380]	; (80010ec <main+0x3c8>)
 8000f6e:	f7ff fc9e 	bl	80008ae <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer(ITESM_LOGO_PIC, 0, oled_buffer);
 8000f72:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000f76:	f5a3 74c0 	sub.w	r4, r3, #384	; 0x180
 8000f7a:	4b5c      	ldr	r3, [pc, #368]	; (80010ec <main+0x3c8>)
 8000f7c:	931d      	str	r3, [sp, #116]	; 0x74
 8000f7e:	2300      	movs	r3, #0
 8000f80:	931c      	str	r3, [sp, #112]	; 0x70
 8000f82:	4668      	mov	r0, sp
 8000f84:	f104 0310 	add.w	r3, r4, #16
 8000f88:	2270      	movs	r2, #112	; 0x70
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f000 f990 	bl	80012b0 <memcpy>
 8000f90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f94:	f7ff fcaf 	bl	80008f6 <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer(I2C_1, oled_buffer);
 8000f98:	4954      	ldr	r1, [pc, #336]	; (80010ec <main+0x3c8>)
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff fd1c 	bl	80009d8 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 100 );
 8000fa0:	2064      	movs	r0, #100	; 0x64
 8000fa2:	f7ff fead 	bl	8000d00 <USER_SYSTICK_Delay_ms>

  USER_OLED_Clear_Buffer(oled_buffer);
 8000fa6:	4851      	ldr	r0, [pc, #324]	; (80010ec <main+0x3c8>)
 8000fa8:	f7ff fc81 	bl	80008ae <USER_OLED_Clear_Buffer>
  USER_OLED_Clear_Buffer(oled_buffer);
 8000fac:	484f      	ldr	r0, [pc, #316]	; (80010ec <main+0x3c8>)
 8000fae:	f7ff fc7e 	bl	80008ae <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer(STM32_LOGO_PIC, 0, oled_buffer);
 8000fb2:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000fb6:	f5a3 7440 	sub.w	r4, r3, #768	; 0x300
 8000fba:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <main+0x3c8>)
 8000fbc:	931d      	str	r3, [sp, #116]	; 0x74
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	931c      	str	r3, [sp, #112]	; 0x70
 8000fc2:	4668      	mov	r0, sp
 8000fc4:	f104 0310 	add.w	r3, r4, #16
 8000fc8:	2270      	movs	r2, #112	; 0x70
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f000 f970 	bl	80012b0 <memcpy>
 8000fd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fd4:	f7ff fc8f 	bl	80008f6 <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer(I2C_1, oled_buffer);
 8000fd8:	4944      	ldr	r1, [pc, #272]	; (80010ec <main+0x3c8>)
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff fcfc 	bl	80009d8 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 100 );
 8000fe0:	2064      	movs	r0, #100	; 0x64
 8000fe2:	f7ff fe8d 	bl	8000d00 <USER_SYSTICK_Delay_ms>

  USER_OLED_Clear_Buffer(oled_buffer);
 8000fe6:	4841      	ldr	r0, [pc, #260]	; (80010ec <main+0x3c8>)
 8000fe8:	f7ff fc61 	bl	80008ae <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer(RASPBERRY_PI_LOGO_PIC, 0, oled_buffer);
 8000fec:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000ff0:	f5a3 7400 	sub.w	r4, r3, #512	; 0x200
 8000ff4:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <main+0x3c8>)
 8000ff6:	931d      	str	r3, [sp, #116]	; 0x74
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	931c      	str	r3, [sp, #112]	; 0x70
 8000ffc:	4668      	mov	r0, sp
 8000ffe:	f104 0310 	add.w	r3, r4, #16
 8001002:	2270      	movs	r2, #112	; 0x70
 8001004:	4619      	mov	r1, r3
 8001006:	f000 f953 	bl	80012b0 <memcpy>
 800100a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800100e:	f7ff fc72 	bl	80008f6 <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer(I2C_1, oled_buffer);
 8001012:	4936      	ldr	r1, [pc, #216]	; (80010ec <main+0x3c8>)
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fcdf 	bl	80009d8 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 100 );
 800101a:	2064      	movs	r0, #100	; 0x64
 800101c:	f7ff fe70 	bl	8000d00 <USER_SYSTICK_Delay_ms>

  USER_OLED_Clear_Buffer(oled_buffer);
 8001020:	4832      	ldr	r0, [pc, #200]	; (80010ec <main+0x3c8>)
 8001022:	f7ff fc44 	bl	80008ae <USER_OLED_Clear_Buffer>
  USER_OLED_Update_Buffer(LINUX_LOGO_PIC, 0, oled_buffer);
 8001026:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800102a:	f5a3 7420 	sub.w	r4, r3, #640	; 0x280
 800102e:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <main+0x3c8>)
 8001030:	931d      	str	r3, [sp, #116]	; 0x74
 8001032:	2300      	movs	r3, #0
 8001034:	931c      	str	r3, [sp, #112]	; 0x70
 8001036:	4668      	mov	r0, sp
 8001038:	f104 0310 	add.w	r3, r4, #16
 800103c:	2270      	movs	r2, #112	; 0x70
 800103e:	4619      	mov	r1, r3
 8001040:	f000 f936 	bl	80012b0 <memcpy>
 8001044:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001048:	f7ff fc55 	bl	80008f6 <USER_OLED_Update_Buffer>
  USER_OLED_Print_Buffer(I2C_1, oled_buffer);
 800104c:	4927      	ldr	r1, [pc, #156]	; (80010ec <main+0x3c8>)
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff fcc2 	bl	80009d8 <USER_OLED_Print_Buffer>
  USER_SYSTICK_Delay_ms( 100 );
 8001054:	2064      	movs	r0, #100	; 0x64
 8001056:	f7ff fe53 	bl	8000d00 <USER_SYSTICK_Delay_ms>

  USER_OLED_Blank(I2C_1);
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fbae 	bl	80007bc <USER_OLED_Blank>
  USER_OLED_Message(I2C_1, "TRACTOR DRIVING", OLED_SCREEN_COLUMNS / 5, OLED_SCREEN_ROWS / 3 + TEXT_ROWS_OFFSET);
 8001060:	2303      	movs	r3, #3
 8001062:	2219      	movs	r2, #25
 8001064:	4922      	ldr	r1, [pc, #136]	; (80010f0 <main+0x3cc>)
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff fc06 	bl	8000878 <USER_OLED_Message>
  USER_OLED_Message(I2C_1, "SIMULATOR", OLED_SCREEN_COLUMNS / 4 + TEXT_COLUMNS_OFFSET, OLED_SCREEN_ROWS / 2);
 800106c:	2304      	movs	r3, #4
 800106e:	2228      	movs	r2, #40	; 0x28
 8001070:	4920      	ldr	r1, [pc, #128]	; (80010f4 <main+0x3d0>)
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fc00 	bl	8000878 <USER_OLED_Message>
  USER_SYSTICK_Delay_ms( 200 );
 8001078:	20c8      	movs	r0, #200	; 0xc8
 800107a:	f7ff fe41 	bl	8000d00 <USER_SYSTICK_Delay_ms>

  for(i = 0; i < LOGO_DISPLACEMENT; i++)
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <main+0x3d4>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	e073      	b.n	800116e <main+0x44a>
 8001086:	bf00      	nop
 8001088:	20000000 	.word	0x20000000
 800108c:	20000001 	.word	0x20000001
 8001090:	080014e0 	.word	0x080014e0
 8001094:	20000002 	.word	0x20000002
 8001098:	20000003 	.word	0x20000003
 800109c:	080018e0 	.word	0x080018e0
 80010a0:	20000004 	.word	0x20000004
 80010a4:	20000005 	.word	0x20000005
 80010a8:	08001a0c 	.word	0x08001a0c
 80010ac:	2000000a 	.word	0x2000000a
 80010b0:	2000000b 	.word	0x2000000b
 80010b4:	08001fac 	.word	0x08001fac
 80010b8:	20000006 	.word	0x20000006
 80010bc:	20000007 	.word	0x20000007
 80010c0:	08001bec 	.word	0x08001bec
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000009 	.word	0x20000009
 80010cc:	08001dcc 	.word	0x08001dcc
 80010d0:	2000000c 	.word	0x2000000c
 80010d4:	2000000d 	.word	0x2000000d
 80010d8:	0800218c 	.word	0x0800218c
 80010dc:	08002330 	.word	0x08002330
 80010e0:	080024d4 	.word	0x080024d4
 80010e4:	08002678 	.word	0x08002678
 80010e8:	40021000 	.word	0x40021000
 80010ec:	2000002c 	.word	0x2000002c
 80010f0:	080012e4 	.word	0x080012e4
 80010f4:	080012f4 	.word	0x080012f4
 80010f8:	2000042c 	.word	0x2000042c
  {
    JOHN_DEERE_LOGO_PIC_NO_TEXT.x_pos = 3 * i;
 80010fc:	4b3e      	ldr	r3, [pc, #248]	; (80011f8 <main+0x4d4>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	0052      	lsls	r2, r2, #1
 8001104:	4413      	add	r3, r2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	b25a      	sxtb	r2, r3
 800110a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800110e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001112:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    JOHN_DEERE_LOGO_PIC_NO_TEXT.bit_y_pos = 2 * i;
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <main+0x4d4>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	b29b      	uxth	r3, r3
 8001120:	b21a      	sxth	r2, r3
 8001122:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001126:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800112a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    USER_OLED_Clear_Buffer(oled_buffer);
 800112e:	4833      	ldr	r0, [pc, #204]	; (80011fc <main+0x4d8>)
 8001130:	f7ff fbbd 	bl	80008ae <USER_OLED_Clear_Buffer>
    USER_OLED_Update_Buffer_Bit(JOHN_DEERE_LOGO_PIC_NO_TEXT, 0, oled_buffer);
 8001134:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001138:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 800113c:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <main+0x4d8>)
 800113e:	931d      	str	r3, [sp, #116]	; 0x74
 8001140:	2300      	movs	r3, #0
 8001142:	931c      	str	r3, [sp, #112]	; 0x70
 8001144:	4668      	mov	r0, sp
 8001146:	f104 0310 	add.w	r3, r4, #16
 800114a:	2270      	movs	r2, #112	; 0x70
 800114c:	4619      	mov	r1, r3
 800114e:	f000 f8af 	bl	80012b0 <memcpy>
 8001152:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001156:	f7ff fc6e 	bl	8000a36 <USER_OLED_Update_Buffer_Bit>
    USER_OLED_Print_Buffer(I2C_1, oled_buffer);
 800115a:	4928      	ldr	r1, [pc, #160]	; (80011fc <main+0x4d8>)
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff fc3b 	bl	80009d8 <USER_OLED_Print_Buffer>
  for(i = 0; i < LOGO_DISPLACEMENT; i++)
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <main+0x4d4>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <main+0x4d4>)
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <main+0x4d4>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b1d      	cmp	r3, #29
 8001174:	d9c2      	bls.n	80010fc <main+0x3d8>
  }

  for(;;)
  {
    for(i = 0; i < 83; i++)
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <main+0x4d4>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e037      	b.n	80011ee <main+0x4ca>
    {
	TRACTOR_PIC.x_pos = i;
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <main+0x4d4>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b25a      	sxtb	r2, r3
 8001184:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001188:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800118c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      for(j = 0; j < 4; j++)
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <main+0x4dc>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e020      	b.n	80011da <main+0x4b6>
      {
	USER_OLED_Clear_Buffer(oled_buffer);
 8001198:	4818      	ldr	r0, [pc, #96]	; (80011fc <main+0x4d8>)
 800119a:	f7ff fb88 	bl	80008ae <USER_OLED_Clear_Buffer>
	USER_OLED_Update_Buffer(TRACTOR_PIC, j, oled_buffer);
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <main+0x4dc>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	f507 7260 	add.w	r2, r7, #896	; 0x380
 80011a6:	f5a2 7460 	sub.w	r4, r2, #896	; 0x380
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <main+0x4d8>)
 80011ac:	921d      	str	r2, [sp, #116]	; 0x74
 80011ae:	931c      	str	r3, [sp, #112]	; 0x70
 80011b0:	4668      	mov	r0, sp
 80011b2:	f104 0310 	add.w	r3, r4, #16
 80011b6:	2270      	movs	r2, #112	; 0x70
 80011b8:	4619      	mov	r1, r3
 80011ba:	f000 f879 	bl	80012b0 <memcpy>
 80011be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011c2:	f7ff fb98 	bl	80008f6 <USER_OLED_Update_Buffer>
	USER_OLED_Print_Buffer(I2C_1, oled_buffer);
 80011c6:	490d      	ldr	r1, [pc, #52]	; (80011fc <main+0x4d8>)
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff fc05 	bl	80009d8 <USER_OLED_Print_Buffer>
      for(j = 0; j < 4; j++)
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <main+0x4dc>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <main+0x4dc>)
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <main+0x4dc>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d9da      	bls.n	8001198 <main+0x474>
    for(i = 0; i < 83; i++)
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <main+0x4d4>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <main+0x4d4>)
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	4b02      	ldr	r3, [pc, #8]	; (80011f8 <main+0x4d4>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b52      	cmp	r3, #82	; 0x52
 80011f4:	d9c3      	bls.n	800117e <main+0x45a>
 80011f6:	e7be      	b.n	8001176 <main+0x452>
 80011f8:	2000042c 	.word	0x2000042c
 80011fc:	2000002c 	.word	0x2000002c
 8001200:	2000042d 	.word	0x2000042d

08001204 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001206:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001208:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <LoopForever+0x6>)
  ldr r1, =_edata
 800120e:	490d      	ldr	r1, [pc, #52]	; (8001244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <LoopForever+0xe>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001224:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <LoopForever+0x16>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001232:	f000 f819 	bl	8001268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001236:	f7ff fd75 	bl	8000d24 <main>

0800123a <LoopForever>:

LoopForever:
  b LoopForever
 800123a:	e7fe      	b.n	800123a <LoopForever>
  ldr   r0, =_estack
 800123c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001248:	08002824 	.word	0x08002824
  ldr r2, =_sbss
 800124c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001250:	20000430 	.word	0x20000430

08001254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC1_2_IRQHandler>

08001256 <memset>:
 8001256:	4603      	mov	r3, r0
 8001258:	4402      	add	r2, r0
 800125a:	4293      	cmp	r3, r2
 800125c:	d100      	bne.n	8001260 <memset+0xa>
 800125e:	4770      	bx	lr
 8001260:	f803 1b01 	strb.w	r1, [r3], #1
 8001264:	e7f9      	b.n	800125a <memset+0x4>
	...

08001268 <__libc_init_array>:
 8001268:	b570      	push	{r4, r5, r6, lr}
 800126a:	2600      	movs	r6, #0
 800126c:	4d0c      	ldr	r5, [pc, #48]	; (80012a0 <__libc_init_array+0x38>)
 800126e:	4c0d      	ldr	r4, [pc, #52]	; (80012a4 <__libc_init_array+0x3c>)
 8001270:	1b64      	subs	r4, r4, r5
 8001272:	10a4      	asrs	r4, r4, #2
 8001274:	42a6      	cmp	r6, r4
 8001276:	d109      	bne.n	800128c <__libc_init_array+0x24>
 8001278:	f000 f828 	bl	80012cc <_init>
 800127c:	2600      	movs	r6, #0
 800127e:	4d0a      	ldr	r5, [pc, #40]	; (80012a8 <__libc_init_array+0x40>)
 8001280:	4c0a      	ldr	r4, [pc, #40]	; (80012ac <__libc_init_array+0x44>)
 8001282:	1b64      	subs	r4, r4, r5
 8001284:	10a4      	asrs	r4, r4, #2
 8001286:	42a6      	cmp	r6, r4
 8001288:	d105      	bne.n	8001296 <__libc_init_array+0x2e>
 800128a:	bd70      	pop	{r4, r5, r6, pc}
 800128c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001290:	4798      	blx	r3
 8001292:	3601      	adds	r6, #1
 8001294:	e7ee      	b.n	8001274 <__libc_init_array+0xc>
 8001296:	f855 3b04 	ldr.w	r3, [r5], #4
 800129a:	4798      	blx	r3
 800129c:	3601      	adds	r6, #1
 800129e:	e7f2      	b.n	8001286 <__libc_init_array+0x1e>
 80012a0:	0800281c 	.word	0x0800281c
 80012a4:	0800281c 	.word	0x0800281c
 80012a8:	0800281c 	.word	0x0800281c
 80012ac:	08002820 	.word	0x08002820

080012b0 <memcpy>:
 80012b0:	440a      	add	r2, r1
 80012b2:	4291      	cmp	r1, r2
 80012b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80012b8:	d100      	bne.n	80012bc <memcpy+0xc>
 80012ba:	4770      	bx	lr
 80012bc:	b510      	push	{r4, lr}
 80012be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80012c2:	4291      	cmp	r1, r2
 80012c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80012c8:	d1f9      	bne.n	80012be <memcpy+0xe>
 80012ca:	bd10      	pop	{r4, pc}

080012cc <_init>:
 80012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ce:	bf00      	nop
 80012d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012d2:	bc08      	pop	{r3}
 80012d4:	469e      	mov	lr, r3
 80012d6:	4770      	bx	lr

080012d8 <_fini>:
 80012d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012da:	bf00      	nop
 80012dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012de:	bc08      	pop	{r3}
 80012e0:	469e      	mov	lr, r3
 80012e2:	4770      	bx	lr
