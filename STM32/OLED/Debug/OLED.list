
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000034c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800047c  08000484  00010484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800047c  0800047c  00010484  2**0
                  CONTENTS
  4 .ARM          00000000  0800047c  0800047c  00010484  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800047c  08000484  00010484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000480  08000480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000484  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000484  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010484  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000104ad  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000063f  00000000  00000000  000104f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000358  00000000  00000000  00010b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00010e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000081  00000000  00000000  00010f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001280  00000000  00000000  00010fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001337  00000000  00000000  00012251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004278  00000000  00000000  00013588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000194  00000000  00000000  00017800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00017994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000464 	.word	0x08000464

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000464 	.word	0x08000464

08000170 <USER_GPIO_Define>:

#include "main.h"
#include "GPIO.h"

void USER_GPIO_Define( uint8_t port, uint8_t pin, uint8_t direction, uint8_t option )
{
 8000170:	b490      	push	{r4, r7}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4604      	mov	r4, r0
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4623      	mov	r3, r4
 8000180:	71fb      	strb	r3, [r7, #7]
 8000182:	4603      	mov	r3, r0
 8000184:	71bb      	strb	r3, [r7, #6]
 8000186:	460b      	mov	r3, r1
 8000188:	717b      	strb	r3, [r7, #5]
 800018a:	4613      	mov	r3, r2
 800018c:	713b      	strb	r3, [r7, #4]
  volatile uint32_t * CR;
  uint8_t actual_pin = pin;
 800018e:	79bb      	ldrb	r3, [r7, #6]
 8000190:	72fb      	strb	r3, [r7, #11]
  uint8_t offset = 0x00;
 8000192:	2300      	movs	r3, #0
 8000194:	72bb      	strb	r3, [r7, #10]

  if( pin > 7 ) {
 8000196:	79bb      	ldrb	r3, [r7, #6]
 8000198:	2b07      	cmp	r3, #7
 800019a:	d904      	bls.n	80001a6 <USER_GPIO_Define+0x36>
      actual_pin -= 8;
 800019c:	7afb      	ldrb	r3, [r7, #11]
 800019e:	3b08      	subs	r3, #8
 80001a0:	72fb      	strb	r3, [r7, #11]
      offset = 0x01;
 80001a2:	2301      	movs	r3, #1
 80001a4:	72bb      	strb	r3, [r7, #10]
  }

  if( port == 0 )
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d107      	bne.n	80001bc <USER_GPIO_Define+0x4c>
  {
      CR = (volatile uint32_t *) (&GPIOA->CRL + offset);
 80001ac:	7abb      	ldrb	r3, [r7, #10]
 80001ae:	009b      	lsls	r3, r3, #2
 80001b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001b4:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80001b8:	60fb      	str	r3, [r7, #12]
 80001ba:	e040      	b.n	800023e <USER_GPIO_Define+0xce>
  }
  else if( port == 1 )
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d107      	bne.n	80001d2 <USER_GPIO_Define+0x62>
  {
      CR = (volatile uint32_t *) (&GPIOB->CRL + offset);
 80001c2:	7abb      	ldrb	r3, [r7, #10]
 80001c4:	009b      	lsls	r3, r3, #2
 80001c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001ca:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	e035      	b.n	800023e <USER_GPIO_Define+0xce>
  }
  else if ( port == 2 )
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	2b02      	cmp	r3, #2
 80001d6:	d107      	bne.n	80001e8 <USER_GPIO_Define+0x78>
  {
      CR = (volatile uint32_t *) (&GPIOC->CRL + offset);
 80001d8:	7abb      	ldrb	r3, [r7, #10]
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001e0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80001e4:	60fb      	str	r3, [r7, #12]
 80001e6:	e02a      	b.n	800023e <USER_GPIO_Define+0xce>
  }
  else if ( port == 3 )
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b03      	cmp	r3, #3
 80001ec:	d107      	bne.n	80001fe <USER_GPIO_Define+0x8e>
  {
      CR = (volatile uint32_t *) (&GPIOD->CRL + offset);
 80001ee:	7abb      	ldrb	r3, [r7, #10]
 80001f0:	009b      	lsls	r3, r3, #2
 80001f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001f6:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	e01f      	b.n	800023e <USER_GPIO_Define+0xce>
  }
  else if( port == 4 )
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	2b04      	cmp	r3, #4
 8000202:	d107      	bne.n	8000214 <USER_GPIO_Define+0xa4>
  {
      CR = (volatile uint32_t *) (&GPIOE->CRL + offset);
 8000204:	7abb      	ldrb	r3, [r7, #10]
 8000206:	009b      	lsls	r3, r3, #2
 8000208:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800020c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e014      	b.n	800023e <USER_GPIO_Define+0xce>
  }
  else if( port == 5 )
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	2b05      	cmp	r3, #5
 8000218:	d107      	bne.n	800022a <USER_GPIO_Define+0xba>
  {
      CR = (volatile uint32_t *) (&GPIOF->CRL + offset);
 800021a:	7abb      	ldrb	r3, [r7, #10]
 800021c:	009b      	lsls	r3, r3, #2
 800021e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000222:	f503 338e 	add.w	r3, r3, #72704	; 0x11c00
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	e009      	b.n	800023e <USER_GPIO_Define+0xce>
  }
  else if( port == 6 )
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b06      	cmp	r3, #6
 800022e:	d106      	bne.n	800023e <USER_GPIO_Define+0xce>
  {
      CR = (volatile uint32_t *) (&GPIOG->CRL + offset);
 8000230:	7abb      	ldrb	r3, [r7, #10]
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000238:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800023c:	60fb      	str	r3, [r7, #12]
  }

  *CR	&=	~( 0xF << (actual_pin * 4) );		// Reset the target pin
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	7afa      	ldrb	r2, [r7, #11]
 8000244:	0092      	lsls	r2, r2, #2
 8000246:	210f      	movs	r1, #15
 8000248:	fa01 f202 	lsl.w	r2, r1, r2
 800024c:	43d2      	mvns	r2, r2
 800024e:	401a      	ands	r2, r3
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	601a      	str	r2, [r3, #0]
  *CR	|=	( direction << (actual_pin * 4) )	// Set up the direction and the option for the pin
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	7979      	ldrb	r1, [r7, #5]
 800025a:	7afa      	ldrb	r2, [r7, #11]
 800025c:	0092      	lsls	r2, r2, #2
 800025e:	4091      	lsls	r1, r2
	|	( option << (actual_pin * 4 + 2) );
 8000260:	7938      	ldrb	r0, [r7, #4]
 8000262:	7afa      	ldrb	r2, [r7, #11]
 8000264:	0092      	lsls	r2, r2, #2
 8000266:	3202      	adds	r2, #2
 8000268:	fa00 f202 	lsl.w	r2, r0, r2
 800026c:	430a      	orrs	r2, r1
  *CR	|=	( direction << (actual_pin * 4) )	// Set up the direction and the option for the pin
 800026e:	431a      	orrs	r2, r3
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	601a      	str	r2, [r3, #0]
}
 8000274:	bf00      	nop
 8000276:	3710      	adds	r7, #16
 8000278:	46bd      	mov	sp, r7
 800027a:	bc90      	pop	{r4, r7}
 800027c:	4770      	bx	lr
	...

08000280 <USER_I2C_Init>:
#include "main.h"
#include "I2C.h"
#include "GPIO.h"

void USER_I2C_Init( char I2C, uint8_t speed_mode )
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	460a      	mov	r2, r1
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
  RCC->APB2ENR		|=	RCC_APB2ENR_AFIOEN;	// Alternate function I/O clock enable
 8000290:	4b35      	ldr	r3, [pc, #212]	; (8000368 <USER_I2C_Init+0xe8>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a34      	ldr	r2, [pc, #208]	; (8000368 <USER_I2C_Init+0xe8>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6193      	str	r3, [r2, #24]

  if( I2C == 1 )
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d12d      	bne.n	80002fe <USER_I2C_Init+0x7e>
  {
      RCC->APB1ENR 	|=	RCC_APB1ENR_I2C1EN;	// I2C1 clock enable
 80002a2:	4b31      	ldr	r3, [pc, #196]	; (8000368 <USER_I2C_Init+0xe8>)
 80002a4:	69db      	ldr	r3, [r3, #28]
 80002a6:	4a30      	ldr	r2, [pc, #192]	; (8000368 <USER_I2C_Init+0xe8>)
 80002a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002ac:	61d3      	str	r3, [r2, #28]

      USER_GPIO_Define(PORTB, 6, OUT_50, OUT_AF_OD);	// PB6 I2C1_SCL
 80002ae:	2303      	movs	r3, #3
 80002b0:	2203      	movs	r2, #3
 80002b2:	2106      	movs	r1, #6
 80002b4:	2001      	movs	r0, #1
 80002b6:	f7ff ff5b 	bl	8000170 <USER_GPIO_Define>
      USER_GPIO_Define(PORTB, 7, OUT_50, OUT_AF_OD);	// PB7 I2C1_SDA
 80002ba:	2303      	movs	r3, #3
 80002bc:	2203      	movs	r2, #3
 80002be:	2107      	movs	r1, #7
 80002c0:	2001      	movs	r0, #1
 80002c2:	f7ff ff55 	bl	8000170 <USER_GPIO_Define>

      I2C1->CR1		|=	I2C_CR1_SWRST;		// Software reset
 80002c6:	4b29      	ldr	r3, [pc, #164]	; (800036c <USER_I2C_Init+0xec>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a28      	ldr	r2, [pc, #160]	; (800036c <USER_I2C_Init+0xec>)
 80002cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002d0:	6013      	str	r3, [r2, #0]
      I2C1->CR1		&=	~I2C_CR1_SWRST;
 80002d2:	4b26      	ldr	r3, [pc, #152]	; (800036c <USER_I2C_Init+0xec>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a25      	ldr	r2, [pc, #148]	; (800036c <USER_I2C_Init+0xec>)
 80002d8:	0c1b      	lsrs	r3, r3, #16
 80002da:	041b      	lsls	r3, r3, #16
 80002dc:	6013      	str	r3, [r2, #0]

      I2C1->CR2		=	I2C_CR2_FREQ;		// Peripheral clock frequency of 8 MHz
 80002de:	4b23      	ldr	r3, [pc, #140]	; (800036c <USER_I2C_Init+0xec>)
 80002e0:	2208      	movs	r2, #8
 80002e2:	605a      	str	r2, [r3, #4]

      I2C1->CCR		=	speed_mode;		// Clock control register in Fm/Sm mode
 80002e4:	4a21      	ldr	r2, [pc, #132]	; (800036c <USER_I2C_Init+0xec>)
 80002e6:	79bb      	ldrb	r3, [r7, #6]
 80002e8:	61d3      	str	r3, [r2, #28]
      I2C1->TRISE	=	I2C_TRISE_TRISE;	// Maximum rise time in Fm/Sm mode (Master mode)
 80002ea:	4b20      	ldr	r3, [pc, #128]	; (800036c <USER_I2C_Init+0xec>)
 80002ec:	2209      	movs	r2, #9
 80002ee:	621a      	str	r2, [r3, #32]

      I2C1->CR1		|=	I2C_CR1_PE;		// Peripheral enable
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <USER_I2C_Init+0xec>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a1d      	ldr	r2, [pc, #116]	; (800036c <USER_I2C_Init+0xec>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]

      I2C2->CR1		|=	I2C_CR1_PE;		// Peripheral enable
  }


}
 80002fc:	e02f      	b.n	800035e <USER_I2C_Init+0xde>
  else if( I2C == 2 )
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	2b02      	cmp	r3, #2
 8000302:	d12c      	bne.n	800035e <USER_I2C_Init+0xde>
      RCC->APB1ENR 	|=	RCC_APB1ENR_I2C2EN;	// I2C1 clock enable
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <USER_I2C_Init+0xe8>)
 8000306:	69db      	ldr	r3, [r3, #28]
 8000308:	4a17      	ldr	r2, [pc, #92]	; (8000368 <USER_I2C_Init+0xe8>)
 800030a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800030e:	61d3      	str	r3, [r2, #28]
      USER_GPIO_Define(PORTB, 10, OUT_50, OUT_AF_OD);	// PB6 I2C1_SCL
 8000310:	2303      	movs	r3, #3
 8000312:	2203      	movs	r2, #3
 8000314:	210a      	movs	r1, #10
 8000316:	2001      	movs	r0, #1
 8000318:	f7ff ff2a 	bl	8000170 <USER_GPIO_Define>
      USER_GPIO_Define(PORTB, 11, OUT_50, OUT_AF_OD);	// PB7 I2C1_SDA
 800031c:	2303      	movs	r3, #3
 800031e:	2203      	movs	r2, #3
 8000320:	210b      	movs	r1, #11
 8000322:	2001      	movs	r0, #1
 8000324:	f7ff ff24 	bl	8000170 <USER_GPIO_Define>
      I2C2->CR1		|=	I2C_CR1_SWRST;		// Software reset
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <USER_I2C_Init+0xf0>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a10      	ldr	r2, [pc, #64]	; (8000370 <USER_I2C_Init+0xf0>)
 800032e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000332:	6013      	str	r3, [r2, #0]
      I2C2->CR1		&=	~I2C_CR1_SWRST;
 8000334:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <USER_I2C_Init+0xf0>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <USER_I2C_Init+0xf0>)
 800033a:	0c1b      	lsrs	r3, r3, #16
 800033c:	041b      	lsls	r3, r3, #16
 800033e:	6013      	str	r3, [r2, #0]
      I2C2->CR2		=	I2C_CR2_FREQ;		// Peripheral clock frequency of 8 MHz
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <USER_I2C_Init+0xf0>)
 8000342:	2208      	movs	r2, #8
 8000344:	605a      	str	r2, [r3, #4]
      I2C2->CCR		=	speed_mode;		// Clock control register in Fm/Sm mode
 8000346:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <USER_I2C_Init+0xf0>)
 8000348:	79bb      	ldrb	r3, [r7, #6]
 800034a:	61d3      	str	r3, [r2, #28]
      I2C2->TRISE	=	I2C_TRISE_TRISE;	// Maximum rise time in Fm/Sm mode (Master mode)
 800034c:	4b08      	ldr	r3, [pc, #32]	; (8000370 <USER_I2C_Init+0xf0>)
 800034e:	2209      	movs	r2, #9
 8000350:	621a      	str	r2, [r3, #32]
      I2C2->CR1		|=	I2C_CR1_PE;		// Peripheral enable
 8000352:	4b07      	ldr	r3, [pc, #28]	; (8000370 <USER_I2C_Init+0xf0>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a06      	ldr	r2, [pc, #24]	; (8000370 <USER_I2C_Init+0xf0>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6013      	str	r3, [r2, #0]
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000
 800036c:	40005400 	.word	0x40005400
 8000370:	40005800 	.word	0x40005800

08000374 <USER_SYSTICK_Init>:

#include "main.h"
#include "SYSTICK.h"

void USER_SYSTICK_Init( void )
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
    SYSTICK->CTRL	= 0;				// Clear register
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <USER_SYSTICK_Init+0x38>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
    SYSTICK->LOAD	= 0x00FFFFFF;			// Max start value
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <USER_SYSTICK_Init+0x38>)
 8000380:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000384:	605a      	str	r2, [r3, #4]
    SYSTICK->VAL	= 0;				// Clear register
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <USER_SYSTICK_Init+0x38>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]

    SYSTICK->CTRL	|=	SYSTICK_CTRL_CLKSOURCE;
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <USER_SYSTICK_Init+0x38>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a06      	ldr	r2, [pc, #24]	; (80003ac <USER_SYSTICK_Init+0x38>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6013      	str	r3, [r2, #0]
    SYSTICK->CTRL	|=	SYSTICK_CTRL_ENABLE;
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <USER_SYSTICK_Init+0x38>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a03      	ldr	r2, [pc, #12]	; (80003ac <USER_SYSTICK_Init+0x38>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	6013      	str	r3, [r2, #0]
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	e000e010 	.word	0xe000e010

080003b0 <main>:
#include "GPIO.h"
#include "SYSTICK.h"
#include "I2C.h"

int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  USER_SYSTICK_Init();
 80003b4:	f7ff ffde 	bl	8000374 <USER_SYSTICK_Init>
  USER_I2C_Init(2, I2C_FM);
 80003b8:	212d      	movs	r1, #45	; 0x2d
 80003ba:	2002      	movs	r0, #2
 80003bc:	f7ff ff60 	bl	8000280 <USER_I2C_Init>
 80003c0:	2300      	movs	r3, #0

}
 80003c2:	4618      	mov	r0, r3
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c8:	480d      	ldr	r0, [pc, #52]	; (8000400 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <LoopForever+0x6>)
  ldr r1, =_edata
 80003d2:	490d      	ldr	r1, [pc, #52]	; (8000408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <LoopForever+0xe>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d8:	e002      	b.n	80003e0 <LoopCopyDataInit>

080003da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003de:	3304      	adds	r3, #4

080003e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e4:	d3f9      	bcc.n	80003da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e6:	4a0a      	ldr	r2, [pc, #40]	; (8000410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e8:	4c0a      	ldr	r4, [pc, #40]	; (8000414 <LoopForever+0x16>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ec:	e001      	b.n	80003f2 <LoopFillZerobss>

080003ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f0:	3204      	adds	r2, #4

080003f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f4:	d3fb      	bcc.n	80003ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f6:	f000 f811 	bl	800041c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003fa:	f7ff ffd9 	bl	80003b0 <main>

080003fe <LoopForever>:

LoopForever:
  b LoopForever
 80003fe:	e7fe      	b.n	80003fe <LoopForever>
  ldr   r0, =_estack
 8000400:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000408:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800040c:	08000484 	.word	0x08000484
  ldr r2, =_sbss
 8000410:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000414:	2000001c 	.word	0x2000001c

08000418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000418:	e7fe      	b.n	8000418 <ADC1_2_IRQHandler>
	...

0800041c <__libc_init_array>:
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	2600      	movs	r6, #0
 8000420:	4d0c      	ldr	r5, [pc, #48]	; (8000454 <__libc_init_array+0x38>)
 8000422:	4c0d      	ldr	r4, [pc, #52]	; (8000458 <__libc_init_array+0x3c>)
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	10a4      	asrs	r4, r4, #2
 8000428:	42a6      	cmp	r6, r4
 800042a:	d109      	bne.n	8000440 <__libc_init_array+0x24>
 800042c:	f000 f81a 	bl	8000464 <_init>
 8000430:	2600      	movs	r6, #0
 8000432:	4d0a      	ldr	r5, [pc, #40]	; (800045c <__libc_init_array+0x40>)
 8000434:	4c0a      	ldr	r4, [pc, #40]	; (8000460 <__libc_init_array+0x44>)
 8000436:	1b64      	subs	r4, r4, r5
 8000438:	10a4      	asrs	r4, r4, #2
 800043a:	42a6      	cmp	r6, r4
 800043c:	d105      	bne.n	800044a <__libc_init_array+0x2e>
 800043e:	bd70      	pop	{r4, r5, r6, pc}
 8000440:	f855 3b04 	ldr.w	r3, [r5], #4
 8000444:	4798      	blx	r3
 8000446:	3601      	adds	r6, #1
 8000448:	e7ee      	b.n	8000428 <__libc_init_array+0xc>
 800044a:	f855 3b04 	ldr.w	r3, [r5], #4
 800044e:	4798      	blx	r3
 8000450:	3601      	adds	r6, #1
 8000452:	e7f2      	b.n	800043a <__libc_init_array+0x1e>
 8000454:	0800047c 	.word	0x0800047c
 8000458:	0800047c 	.word	0x0800047c
 800045c:	0800047c 	.word	0x0800047c
 8000460:	08000480 	.word	0x08000480

08000464 <_init>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr

08000470 <_fini>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr
